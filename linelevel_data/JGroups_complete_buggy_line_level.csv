fix_commit_hash,commit_hash,change_type,is_buggy_line,code_change_remove_common_tokens
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"// $Id: Protocol.java,v 1.11 2004/04/21 11:57:00 yaron-r Exp $"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,import EDU.oswego.cs.dl.util.concurrent.Mutex;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,private Queue mq = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,private Protocol handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,private ProtocolObserver observer = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected Log log = LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"public UpHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.mq = mq;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.handler = handler;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.observer = observer;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"setName(""UpHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} else {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"setName(""UpHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,}
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,setDaemon(true);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void setObserver(ProtocolObserver observer) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,/**
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Removes events from mq and calls handler.up(evt)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,*/
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void run() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,Event evt;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,while (!mq.closed()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,try {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"handler.blockUntilUpReady();  //If 'up' is not ready, block."
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,evt = (Event) mq.remove();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (evt == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (log.isWarnEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.warn(""removed null event"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,continue;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer != null) {                          // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"if (observer.up(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,handler.up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,evt = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} catch (QueueClosedException queue_closed) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,break;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} catch (Throwable e) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.warn(getName() + "" exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,e.printStackTrace();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"public DownHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"setName(""DownHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"setName(""DownHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Removes events from mq and calls handler.down(evt)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"handler.blockUntilDownReady();  //If 'up' is not ready, block."
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer != null) {                            // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"if (observer.down(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,int type = evt.getType();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (type == Event.ACK || type == Event.START || type == Event.STOP) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (handler.handleSpecialDownEvent(evt) == false) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,handler.down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.warn(getName() + "" exception is "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* The Protocol class provides a set of common services for protocol layers. Each layer has to be a subclass of Protocol
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* and override a number of methods (typically just <code>up()</code>, <code>Down</code> and <code>getName</code>."
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Layers are stacked in a certain order to form a protocol stack. <a href=org.jgroups.Event.html>Events</a> are passed
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* from lower layers to upper ones and vice versa. E.g. a Message received by the UDP layer at the bottom will be passed
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* to its higher layer as an Event. That layer will in turn pass the Event to its layer and so on, until a layer handles"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* the Message and sends a response or discards it, the former resulting in another Event being passed down the"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* stack.<p> Each layer has 2 FIFO queues, one for up Events and one for down Events. When an Event is received by a"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* layer (calling the internal upcall <code>ReceiveUpEvent</code>), it is placed in the up-queue where it will be"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* retrieved by the up-handler thread which will invoke method <code>Up</code> of the layer. The same applies for Events
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* traveling down the stack. Handling of the up-handler and down-handler threads and the 2 FIFO queues is donw by the
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* Protocol class, subclasses will almost never have to override this behavior.<p> The important thing to bear in mind"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* is that Events have to passed on between layers in FIFO order which is guaranteed by the Protocol implementation and
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* must be guranteed by subclasses implementing their on Event queuing.<p> <b>Note that each class implementing
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* interface Protocol MUST provide an empty, public constructor !</b>"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected Properties props = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"protected Protocol up_prot = null, down_prot = null;"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected ProtocolStack stack = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"protected Queue up_queue = new Queue(), down_queue = new Queue();"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected UpHandler up_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected int up_thread_prio = -1;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected DownHandler down_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected int down_thread_prio = -1;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected ProtocolObserver observer = null; // hook for debugger
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,private final long THREAD_JOIN_TIMEOUT = 1000;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected boolean down_thread = true;  // determines whether the down_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected boolean up_thread = true;    // determines whether the up_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"private final Mutex m_upLock = new Mutex(); 		// obtain lock if not ready for up, release when ready"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"private final Mutex m_downLock = new Mutex();    	// obtain lock if not ready for down, release when ready"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Configures the protocol initially. A configuration string consists of name=value
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* items, separated by a ';' (semicolon), e.g.:<pre>"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* ""loopback=false;unicast_inport=4444"""
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* </pre>
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public boolean setProperties(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.props = props;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return true;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* Called by Configurator. Removes 2 properties which are used by the Protocol directly and then calls setProperties(),"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* which might invoke the setProperties() method of the actual protocol instance.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public boolean setPropertiesInternal(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,String str;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.props = (Properties) props.clone();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"str = props.getProperty(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (str != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_thread = new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"props.remove(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"str = props.getProperty(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_thread_prio = Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"props.remove(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"str = props.getProperty(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_thread = new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"props.remove(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"str = props.getProperty(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_thread_prio = Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"props.remove(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return setProperties(props);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Properties getProperties() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return props;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,observer.setProtocol(this);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (up_handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Called after instance has been created (null constructor) and before protocol is started. Properties are already
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* set. Other protocols are not yet connected and events cannot yet be sent.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,*
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* @throws Exception Thrown if protocol cannot be initialized successfully. This will cause the ProtocolStack to fail,"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,*                   so the channel constructor will throw an exception
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void init() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* This method is called on a {@link org.jgroups.Channel#connect(String)}. Starts work. Protocols are connected and
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* queues are ready to receive events. Will be called <em>from bottom to top</em>. This call will replace the
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* <b>START</b> and <b>START_OK</b> events.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* @throws Exception Thrown if protocol cannot be started successfully. This will cause the ProtocolStack to fail, so"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,*                   {@link org.jgroups.Channel#connect(String)} will throw an exception
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void start() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* This method is called on a {@link org.jgroups.Channel#disconnect()}. Stops work (e.g. by closing multicast socket).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Will be called <em>from top to bottom</em>. This means that at the time of the method invocation the neighbor
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* protocol below is still working. This method will replace the <b>STOP</b>, <b>STOP_OK</b>, <b>CLEANUP</b> and"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* <b>CLEANUP_OK</b> events. The ProtocolStack guarantees that when this method is called all messages in the down
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* queue will have been flushed
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void stop() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* This method is called on a {@link org.jgroups.Channel#close()}. Does some cleanup; after the call the VM will
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* terminate
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void destroy() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Queue getUpQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return up_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,}    // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Queue getDownQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return down_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,}  // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* List of events that are required to be answered by some layer above.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* @return Vector (of Integers)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Vector requiredUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* List of events that are required to be answered by some layer below.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Vector requiredDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* List of events that are provided to layers above (they will be handled when sent down from above).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Vector providedUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* List of events that are provided to layers below (they will be handled when sent down from below).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Vector providedDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public abstract String getName();   // all protocol names have to be unique !
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Protocol getUpProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public Protocol getDownProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void setUpProtocol(Protocol up_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.up_prot = up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void setDownProtocol(Protocol down_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.down_prot = down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void setProtocolStack(ProtocolStack stack) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,this.stack = stack;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* Used internally. If overridden, call this method first. Only creates the up_handler thread if down_thread is true"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void startUpHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (up_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (up_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"up_handler = new UpHandler(up_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (up_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_handler.setPriority(up_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} catch (Throwable t) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (log.isErrorEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.error(""priority "" + up_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,""" could not be set for thread: "" + Util.getStackTrace(t));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* Used internally. If overridden, call this method first. Only creates the down_handler thread if down_thread is true"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void startDownHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"down_handler = new DownHandler(down_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_handler.setPriority(down_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.error(""priority "" + down_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* Used internally. If overridden, call parent's method first"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void stopInternal() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_queue.close(false);  // this should terminate up_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (up_handler != null && up_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} catch (Exception ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_handler.interrupt();  // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.error(""up_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,""" was interrupted (in order to be terminated), but is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_queue.close(false); // this should terminate down_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_handler != null && down_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_handler.interrupt(); // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.error(""down_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,""" was interrupted (in order to be terminated), but is is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* Internal method, should not be called by clients. Used by ProtocolStack. I would have used the 'friends' modifier,"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* but this is available only in C++ ... If the up_handler thread is not available (down_thread == false), then"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* directly call the up() method: we will run on the caller's thread (e.g. the protocol layer below us).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected void receiveUpEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer != null) {                               // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"if (observer.up(evt, up_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} catch (Exception e) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.warn(""exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* but this is available only in C++ ... If the down_handler thread is not available (down_thread == false), then"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* directly call the down() method: we will run on the caller's thread (e.g. the protocol layer above us).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected void receiveDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer != null) {                                    // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"if (observer.down(evt, down_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (handleSpecialDownEvent(evt) == false) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Causes the event to be forwarded to the next layer up in the hierarchy. Typically called by the implementation of
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* <code>Up</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void passUp(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer != null) {                   // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer.passUp(evt) == false) {  // false means don't pass up (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (up_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,up_prot.receiveUpEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} else if (log.isErrorEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.error(""no upper layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Causes the event to be forwarded to the next layer down in the hierarchy.Typically called by the implementation of
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* <code>Down</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void passDown(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer != null) {                     // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (observer.passDown(evt) == false) {  // false means don't pass down (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,down_prot.receiveDownEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"log.error(""no lower layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* An event was received from the layer below. Usually the current layer will want to examine the event type and -
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* depending on its type - perform some computation (e.g. removing headers from a MSG event type, or updating the"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* internal membership list when receiving a VIEW_CHANGE event). Finally the event is either a) discarded, or b) an"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* event is sent down the stack using <code>passDown()</code> or c) the event (or another event) is sent up the stack
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void up(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,passUp(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Call this method before calling 'up'. This method will block (not return) until 'up' is ready.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void blockUntilUpReady() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,m_upLock.acquire();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,} catch (InterruptedException ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,//this is ok
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,m_upLock.release();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* An event is to be sent down the stack. The layer may want to examine its type and perform some action on it,"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* depending on the event's type. If the event is a message MSG, then the layer may need to add a header to it (or do"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* nothing at all) before sending it down the stack using <code>passDown()</code>. In case of a GET_ADDRESS event
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"* (which tries to retrieve the stack's address from one of the bottom layers), the layer may need to send a new"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* response event back up the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void down(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,passDown(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* Call this method before calling 'down'. This method will block (not return) until 'down' is ready.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,public void blockUntilDownReady() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,m_downLock.acquire();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,m_downLock.release();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* These are special internal events that should not be handled by protocols
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,* @return boolean True: the event should be passed further down the stack. False: the event should be discarded (not
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,*         passed down the stack)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,protected boolean handleSpecialDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,switch (evt.getType()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,case Event.ACK:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,if (down_prot == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,passUp(new Event(Event.ACK_OK));
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return false; // don't pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,case Event.START:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,start();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"// if we're the transport protocol, reply with a START_OK up the stack"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"passUp(new Event(Event.START_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return true; // pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"passUp(new Event(Event.START_OK, new Exception(""exception caused by "" + getName() + "".start(): "" + e)));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return false;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,case Event.STOP:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,stop();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,"passUp(new Event(Event.STOP_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,default:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,added,0,return true; // pass down by default
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"// $Id: Protocol.java,v 1.10 2004/03/30 06:47:27 belaban Exp $"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,private Queue mq=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,private Protocol handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,private ProtocolObserver observer=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected Log  log=LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"public UpHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.mq=mq;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.handler=handler;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.observer=observer;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"setName(""UpHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,else
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"setName(""UpHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,setDaemon(true);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,}
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void setObserver(ProtocolObserver observer) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** Removes events from mq and calls handler.up(evt) */
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void run() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,Event evt;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,while(!mq.closed()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,try {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,evt=(Event)mq.remove();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(evt == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isWarnEnabled()) log.warn(""removed null event"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,continue;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer != null) {                          // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(observer.up(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,handler.up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,evt=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,catch(QueueClosedException queue_closed) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,break;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,catch(Throwable e) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isWarnEnabled()) log.warn(getName() + "" exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,e.printStackTrace();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"public DownHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"setName(""DownHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"setName(""DownHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** Removes events from mq and calls handler.down(evt) */
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer != null) {                            // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(observer.down(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,int type=evt.getType();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(type == Event.ACK || type == Event.START || type == Event.STOP) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(handler.handleSpecialDownEvent(evt) == false)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,handler.down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isWarnEnabled()) log.warn(getName() + "" exception is "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* The Protocol class provides a set of common services for protocol layers. Each layer has to
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* be a subclass of Protocol and override a number of methods (typically just <code>up()</code>,"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* <code>Down</code> and <code>getName</code>. Layers are stacked in a certain order to form
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* a protocol stack. <a href=org.jgroups.Event.html>Events</a> are passed from lower
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* layers to upper ones and vice versa. E.g. a Message received by the UDP layer at the bottom
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* will be passed to its higher layer as an Event. That layer will in turn pass the Event to
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* its layer and so on, until a layer handles the Message and sends a response or discards it,"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the former resulting in another Event being passed down the stack.<p>
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* Each layer has 2 FIFO queues, one for up Events and one for down Events. When an Event is"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* received by a layer (calling the internal upcall <code>ReceiveUpEvent</code>), it is placed"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* in the up-queue where it will be retrieved by the up-handler thread which will invoke method
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* <code>Up</code> of the layer. The same applies for Events traveling down the stack. Handling
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* of the up-handler and down-handler threads and the 2 FIFO queues is donw by the Protocol
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* class, subclasses will almost never have to override this behavior.<p>"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* The important thing to bear in mind is that Events have to passed on between layers in FIFO
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* order which is guaranteed by the Protocol implementation and must be guranteed by subclasses
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* implementing their on Event queuing.<p>
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* <b>Note that each class implementing interface Protocol MUST provide an empty, public"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* constructor !</b>
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected Properties       props=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"protected Protocol         up_prot=null, down_prot=null;"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected ProtocolStack    stack=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"protected Queue            up_queue=new Queue(), down_queue=new Queue();"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected UpHandler        up_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected int              up_thread_prio=-1;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected DownHandler      down_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected int              down_thread_prio=-1;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected ProtocolObserver observer=null; // hook for debugger
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,private final long         THREAD_JOIN_TIMEOUT=1000;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected boolean          down_thread=true;  // determines whether the down_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected boolean          up_thread=true;    // determines whether the up_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected Log              log=LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/**
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Configures the protocol initially. A configuration string consists of name=value
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* items, separated by a ';' (semicolon), e.g.:<pre>"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* ""loopback=false;unicast_inport=4444"""
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* </pre>
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,*/
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public boolean setProperties(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.props=props;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return true;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** Called by Configurator. Removes 2 properties which are used by the Protocol directly and then
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"*	calls setProperties(), which might invoke the setProperties() method of the actual protocol instance."
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public boolean setPropertiesInternal(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,String str;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.props=(Properties)props.clone();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"str=props.getProperty(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(str != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_thread=new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"props.remove(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"str=props.getProperty(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_thread_prio=Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"props.remove(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"str=props.getProperty(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_thread=new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"props.remove(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"str=props.getProperty(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_thread_prio=Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"props.remove(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return setProperties(props);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Properties getProperties() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return props;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,observer.setProtocol(this);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Called after instance has been created (null constructor) and before protocol is started.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Properties are already set. Other protocols are not yet connected and events cannot yet be sent.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* @exception Exception Thrown if protocol cannot be initialized successfully. This will cause the
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"*                      ProtocolStack to fail, so the channel constructor will throw an exception"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void init() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* This method is called on a {@link org.jgroups.Channel#connect(String)}. Starts work.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Protocols are connected and queues are ready to receive events.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Will be called <em>from bottom to top</em>. This call will replace
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the <b>START</b> and <b>START_OK</b> events.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* @exception Exception Thrown if protocol cannot be started successfully. This will cause the ProtocolStack
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"*                      to fail, so {@link org.jgroups.Channel#connect(String)} will throw an exception"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void start() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* This method is called on a {@link org.jgroups.Channel#disconnect()}. Stops work (e.g. by closing multicast socket).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Will be called <em>from top to bottom</em>. This means that at the time of the method invocation the
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* neighbor protocol below is still working. This method will replace the
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* <b>STOP</b>, <b>STOP_OK</b>, <b>CLEANUP</b> and <b>CLEANUP_OK</b> events. The ProtocolStack guarantees that"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* when this method is called all messages in the down queue will have been flushed
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void stop() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* This method is called on a {@link org.jgroups.Channel#close()}.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Does some cleanup; after the call the VM will terminate
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void destroy() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Queue getUpQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return up_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,}    // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Queue getDownQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return down_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,}  // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** List of events that are required to be answered by some layer above.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,@return Vector (of Integers) */
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Vector requiredUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** List of events that are required to be answered by some layer below.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Vector requiredDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** List of events that are provided to layers above (they will be handled when sent down from
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,above).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Vector providedUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/** List of events that are provided to layers below (they will be handled when sent down from
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,below).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Vector providedDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public abstract String getName();   // all protocol names have to be unique !
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Protocol getUpProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public Protocol getDownProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void setUpProtocol(Protocol up_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.up_prot=up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void setDownProtocol(Protocol down_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.down_prot=down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void setProtocolStack(ProtocolStack stack) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,this.stack=stack;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"/** Used internally. If overridden, call this method first. Only creates the up_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if down_thread is true */
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void startUpHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"up_handler=new UpHandler(up_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_handler.setPriority(up_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,catch(Throwable t) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isErrorEnabled()) log.error(""priority "" + up_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,""" could not be set for thread: "" + Util.getStackTrace(t));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"/** Used internally. If overridden, call this method first. Only creates the down_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void startDownHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"down_handler=new DownHandler(down_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_handler.setPriority(down_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isErrorEnabled()) log.error(""priority "" + down_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"/** Used internally. If overridden, call parent's method first */"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void stopInternal() {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_queue.close(false);  // this should terminate up_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_handler != null && up_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,catch(Exception ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_handler.interrupt();  // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_handler != null && up_handler.isAlive())
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isErrorEnabled()) log.error(""up_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,""" was interrupted (in order to be terminated), but is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_queue.close(false); // this should terminate down_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_handler != null && down_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_handler.interrupt(); // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_handler != null && down_handler.isAlive())
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isErrorEnabled()) log.error(""down_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,""" was interrupted (in order to be terminated), but is is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* Internal method, should not be called by clients. Used by ProtocolStack. I would have"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* used the 'friends' modifier, but this is available only in C++ ... If the up_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* is not available (down_thread == false), then directly call the up() method: we will run on the"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* caller's thread (e.g. the protocol layer below us).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected void receiveUpEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer != null) {                               // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(observer.up(evt, up_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,catch(Exception e) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isWarnEnabled()) log.warn(""exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* used the 'friends' modifier, but this is available only in C++ ... If the down_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* is not available (down_thread == false), then directly call the down() method: we will run on the"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* caller's thread (e.g. the protocol layer above us).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected void receiveDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer != null) {                                    // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(observer.down(evt, down_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(handleSpecialDownEvent(evt) == false)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Causes the event to be forwarded to the next layer up in the hierarchy. Typically called
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* by the implementation of <code>Up</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void passUp(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer != null) {                   // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer.passUp(evt) == false) {  // false means don't pass up (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(up_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,up_prot.receiveUpEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isErrorEnabled()) log.error(""no upper layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* Causes the event to be forwarded to the next layer down in the hierarchy.Typically called
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* by the implementation of <code>Down</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void passDown(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer != null) {                     // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(observer.passDown(evt) == false) {  // false means don't pass down (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_prot != null)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,down_prot.receiveDownEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"if(log.isErrorEnabled()) log.error(""no lower layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* An event was received from the layer below. Usually the current layer will want to examine
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the event type and - depending on its type - perform some computation
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* (e.g. removing headers from a MSG event type, or updating the internal membership list"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* when receiving a VIEW_CHANGE event).
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* Finally the event is either a) discarded, or b) an event is sent down"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the stack using <code>passDown()</code> or c) the event (or another event) is sent up
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void up(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,passUp(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* An event is to be sent down the stack. The layer may want to examine its type and perform
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* some action on it, depending on the event's type. If the event is a message MSG, then"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the layer may need to add a header to it (or do nothing at all) before sending it down
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* the stack using <code>passDown()</code>. In case of a GET_ADDRESS event (which tries to
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"* retrieve the stack's address from one of the bottom layers), the layer may need to send"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* a new response event back up the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,public void down(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,passDown(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,/**  These are special internal events that should not be handled by protocols
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* @return boolean True: the event should be passed further down the stack. False: the event should
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,* be discarded (not passed down the stack)
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,protected boolean handleSpecialDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,switch(evt.getType()) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,case Event.ACK:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,if(down_prot == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,passUp(new Event(Event.ACK_OK));
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return false; // don't pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,case Event.START:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,start();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"// if we're the transport protocol, reply with a START_OK up the stack"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"passUp(new Event(Event.START_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return true; // pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"passUp(new Event(Event.START_OK, new Exception(""exception caused by "" + getName() + "".start(): "" + e)));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return false;
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,case Event.STOP:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,stop();
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,"passUp(new Event(Event.STOP_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,default:
cc88a4a6b162f10af320cb7c96196119710527e8,243bd8c0e628bf21042c8413e27258b52517ce15,deleted,1,return true; // pass down by default
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"// $Id: Protocol.java,v 1.11 2004/04/21 11:57:00 yaron-r Exp $"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,import EDU.oswego.cs.dl.util.concurrent.Mutex;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,private Queue mq = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,private Protocol handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,private ProtocolObserver observer = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected Log log = LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"public UpHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.mq = mq;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.handler = handler;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.observer = observer;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"setName(""UpHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} else {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"setName(""UpHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,}
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,setDaemon(true);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void setObserver(ProtocolObserver observer) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,/**
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Removes events from mq and calls handler.up(evt)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,*/
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void run() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,Event evt;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,while (!mq.closed()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,try {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"handler.blockUntilUpReady();  //If 'up' is not ready, block."
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,evt = (Event) mq.remove();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (evt == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (log.isWarnEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.warn(""removed null event"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,continue;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer != null) {                          // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"if (observer.up(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,handler.up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,evt = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} catch (QueueClosedException queue_closed) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,break;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} catch (Throwable e) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.warn(getName() + "" exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,e.printStackTrace();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"public DownHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"setName(""DownHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"setName(""DownHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Removes events from mq and calls handler.down(evt)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"handler.blockUntilDownReady();  //If 'up' is not ready, block."
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer != null) {                            // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"if (observer.down(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,int type = evt.getType();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (type == Event.ACK || type == Event.START || type == Event.STOP) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (handler.handleSpecialDownEvent(evt) == false) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,handler.down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.warn(getName() + "" exception is "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* The Protocol class provides a set of common services for protocol layers. Each layer has to be a subclass of Protocol
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* and override a number of methods (typically just <code>up()</code>, <code>Down</code> and <code>getName</code>."
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Layers are stacked in a certain order to form a protocol stack. <a href=org.jgroups.Event.html>Events</a> are passed
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* from lower layers to upper ones and vice versa. E.g. a Message received by the UDP layer at the bottom will be passed
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* to its higher layer as an Event. That layer will in turn pass the Event to its layer and so on, until a layer handles"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* the Message and sends a response or discards it, the former resulting in another Event being passed down the"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* stack.<p> Each layer has 2 FIFO queues, one for up Events and one for down Events. When an Event is received by a"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* layer (calling the internal upcall <code>ReceiveUpEvent</code>), it is placed in the up-queue where it will be"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* retrieved by the up-handler thread which will invoke method <code>Up</code> of the layer. The same applies for Events
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* traveling down the stack. Handling of the up-handler and down-handler threads and the 2 FIFO queues is donw by the
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* Protocol class, subclasses will almost never have to override this behavior.<p> The important thing to bear in mind"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* is that Events have to passed on between layers in FIFO order which is guaranteed by the Protocol implementation and
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* must be guranteed by subclasses implementing their on Event queuing.<p> <b>Note that each class implementing
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* interface Protocol MUST provide an empty, public constructor !</b>"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected Properties props = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"protected Protocol up_prot = null, down_prot = null;"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected ProtocolStack stack = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"protected Queue up_queue = new Queue(), down_queue = new Queue();"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected UpHandler up_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected int up_thread_prio = -1;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected DownHandler down_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected int down_thread_prio = -1;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected ProtocolObserver observer = null; // hook for debugger
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,private final long THREAD_JOIN_TIMEOUT = 1000;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected boolean down_thread = true;  // determines whether the down_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected boolean up_thread = true;    // determines whether the up_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"private final Mutex m_upLock = new Mutex(); 		// obtain lock if not ready for up, release when ready"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"private final Mutex m_downLock = new Mutex();    	// obtain lock if not ready for down, release when ready"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Configures the protocol initially. A configuration string consists of name=value
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* items, separated by a ';' (semicolon), e.g.:<pre>"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* ""loopback=false;unicast_inport=4444"""
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* </pre>
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public boolean setProperties(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.props = props;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return true;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* Called by Configurator. Removes 2 properties which are used by the Protocol directly and then calls setProperties(),"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* which might invoke the setProperties() method of the actual protocol instance.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public boolean setPropertiesInternal(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,String str;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.props = (Properties) props.clone();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"str = props.getProperty(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (str != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_thread = new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"props.remove(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"str = props.getProperty(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_thread_prio = Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"props.remove(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"str = props.getProperty(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_thread = new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"props.remove(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"str = props.getProperty(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_thread_prio = Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"props.remove(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return setProperties(props);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Properties getProperties() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return props;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,observer.setProtocol(this);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (up_handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Called after instance has been created (null constructor) and before protocol is started. Properties are already
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* set. Other protocols are not yet connected and events cannot yet be sent.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,*
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* @throws Exception Thrown if protocol cannot be initialized successfully. This will cause the ProtocolStack to fail,"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,*                   so the channel constructor will throw an exception
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void init() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* This method is called on a {@link org.jgroups.Channel#connect(String)}. Starts work. Protocols are connected and
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* queues are ready to receive events. Will be called <em>from bottom to top</em>. This call will replace the
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* <b>START</b> and <b>START_OK</b> events.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* @throws Exception Thrown if protocol cannot be started successfully. This will cause the ProtocolStack to fail, so"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,*                   {@link org.jgroups.Channel#connect(String)} will throw an exception
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void start() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* This method is called on a {@link org.jgroups.Channel#disconnect()}. Stops work (e.g. by closing multicast socket).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Will be called <em>from top to bottom</em>. This means that at the time of the method invocation the neighbor
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* protocol below is still working. This method will replace the <b>STOP</b>, <b>STOP_OK</b>, <b>CLEANUP</b> and"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* <b>CLEANUP_OK</b> events. The ProtocolStack guarantees that when this method is called all messages in the down
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* queue will have been flushed
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void stop() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* This method is called on a {@link org.jgroups.Channel#close()}. Does some cleanup; after the call the VM will
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* terminate
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void destroy() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Queue getUpQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return up_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,}    // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Queue getDownQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return down_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,}  // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* List of events that are required to be answered by some layer above.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* @return Vector (of Integers)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Vector requiredUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* List of events that are required to be answered by some layer below.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Vector requiredDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* List of events that are provided to layers above (they will be handled when sent down from above).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Vector providedUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* List of events that are provided to layers below (they will be handled when sent down from below).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Vector providedDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public abstract String getName();   // all protocol names have to be unique !
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Protocol getUpProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public Protocol getDownProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void setUpProtocol(Protocol up_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.up_prot = up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void setDownProtocol(Protocol down_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.down_prot = down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void setProtocolStack(ProtocolStack stack) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,this.stack = stack;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* Used internally. If overridden, call this method first. Only creates the up_handler thread if down_thread is true"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void startUpHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (up_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (up_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"up_handler = new UpHandler(up_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (up_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_handler.setPriority(up_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} catch (Throwable t) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (log.isErrorEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.error(""priority "" + up_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,""" could not be set for thread: "" + Util.getStackTrace(t));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* Used internally. If overridden, call this method first. Only creates the down_handler thread if down_thread is true"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void startDownHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"down_handler = new DownHandler(down_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_handler.setPriority(down_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.error(""priority "" + down_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* Used internally. If overridden, call parent's method first"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void stopInternal() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_queue.close(false);  // this should terminate up_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (up_handler != null && up_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} catch (Exception ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_handler.interrupt();  // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.error(""up_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,""" was interrupted (in order to be terminated), but is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_queue.close(false); // this should terminate down_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_handler != null && down_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_handler.interrupt(); // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.error(""down_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,""" was interrupted (in order to be terminated), but is is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* Internal method, should not be called by clients. Used by ProtocolStack. I would have used the 'friends' modifier,"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* but this is available only in C++ ... If the up_handler thread is not available (down_thread == false), then"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* directly call the up() method: we will run on the caller's thread (e.g. the protocol layer below us).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected void receiveUpEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer != null) {                               // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"if (observer.up(evt, up_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} catch (Exception e) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.warn(""exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* but this is available only in C++ ... If the down_handler thread is not available (down_thread == false), then"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* directly call the down() method: we will run on the caller's thread (e.g. the protocol layer above us).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected void receiveDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer != null) {                                    // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"if (observer.down(evt, down_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (handleSpecialDownEvent(evt) == false) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Causes the event to be forwarded to the next layer up in the hierarchy. Typically called by the implementation of
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* <code>Up</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void passUp(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer != null) {                   // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer.passUp(evt) == false) {  // false means don't pass up (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (up_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,up_prot.receiveUpEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} else if (log.isErrorEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.error(""no upper layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Causes the event to be forwarded to the next layer down in the hierarchy.Typically called by the implementation of
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* <code>Down</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void passDown(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer != null) {                     // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (observer.passDown(evt) == false) {  // false means don't pass down (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,down_prot.receiveDownEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"log.error(""no lower layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* An event was received from the layer below. Usually the current layer will want to examine the event type and -
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* depending on its type - perform some computation (e.g. removing headers from a MSG event type, or updating the"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* internal membership list when receiving a VIEW_CHANGE event). Finally the event is either a) discarded, or b) an"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* event is sent down the stack using <code>passDown()</code> or c) the event (or another event) is sent up the stack
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void up(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,passUp(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Call this method before calling 'up'. This method will block (not return) until 'up' is ready.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void blockUntilUpReady() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,m_upLock.acquire();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,} catch (InterruptedException ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,//this is ok
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,m_upLock.release();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* An event is to be sent down the stack. The layer may want to examine its type and perform some action on it,"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* depending on the event's type. If the event is a message MSG, then the layer may need to add a header to it (or do"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* nothing at all) before sending it down the stack using <code>passDown()</code>. In case of a GET_ADDRESS event
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"* (which tries to retrieve the stack's address from one of the bottom layers), the layer may need to send a new"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* response event back up the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void down(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,passDown(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* Call this method before calling 'down'. This method will block (not return) until 'down' is ready.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,public void blockUntilDownReady() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,m_downLock.acquire();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,m_downLock.release();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* These are special internal events that should not be handled by protocols
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,* @return boolean True: the event should be passed further down the stack. False: the event should be discarded (not
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,*         passed down the stack)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,protected boolean handleSpecialDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,switch (evt.getType()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,case Event.ACK:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,if (down_prot == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,passUp(new Event(Event.ACK_OK));
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return false; // don't pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,case Event.START:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,start();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"// if we're the transport protocol, reply with a START_OK up the stack"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"passUp(new Event(Event.START_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return true; // pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"passUp(new Event(Event.START_OK, new Exception(""exception caused by "" + getName() + "".start(): "" + e)));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return false;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,case Event.STOP:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,stop();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,"passUp(new Event(Event.STOP_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,default:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,added,0,return true; // pass down by default
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"// $Id: Protocol.java,v 1.10 2004/03/30 06:47:27 belaban Exp $"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,private Queue mq=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,private Protocol handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,private ProtocolObserver observer=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected Log  log=LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"public UpHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.mq=mq;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.handler=handler;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.observer=observer;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"setName(""UpHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,else
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"setName(""UpHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,setDaemon(true);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,}
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void setObserver(ProtocolObserver observer) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** Removes events from mq and calls handler.up(evt) */
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void run() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,Event evt;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,while(!mq.closed()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,try {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,evt=(Event)mq.remove();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(evt == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isWarnEnabled()) log.warn(""removed null event"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,continue;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer != null) {                          // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(observer.up(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,handler.up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,evt=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,catch(QueueClosedException queue_closed) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,break;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,catch(Throwable e) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isWarnEnabled()) log.warn(getName() + "" exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,e.printStackTrace();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"public DownHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"setName(""DownHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"setName(""DownHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** Removes events from mq and calls handler.down(evt) */
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer != null) {                            // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(observer.down(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,int type=evt.getType();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(type == Event.ACK || type == Event.START || type == Event.STOP) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(handler.handleSpecialDownEvent(evt) == false)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,handler.down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isWarnEnabled()) log.warn(getName() + "" exception is "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* The Protocol class provides a set of common services for protocol layers. Each layer has to
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* be a subclass of Protocol and override a number of methods (typically just <code>up()</code>,"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* <code>Down</code> and <code>getName</code>. Layers are stacked in a certain order to form
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* a protocol stack. <a href=org.jgroups.Event.html>Events</a> are passed from lower
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* layers to upper ones and vice versa. E.g. a Message received by the UDP layer at the bottom
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* will be passed to its higher layer as an Event. That layer will in turn pass the Event to
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* its layer and so on, until a layer handles the Message and sends a response or discards it,"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the former resulting in another Event being passed down the stack.<p>
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* Each layer has 2 FIFO queues, one for up Events and one for down Events. When an Event is"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* received by a layer (calling the internal upcall <code>ReceiveUpEvent</code>), it is placed"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* in the up-queue where it will be retrieved by the up-handler thread which will invoke method
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* <code>Up</code> of the layer. The same applies for Events traveling down the stack. Handling
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* of the up-handler and down-handler threads and the 2 FIFO queues is donw by the Protocol
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* class, subclasses will almost never have to override this behavior.<p>"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* The important thing to bear in mind is that Events have to passed on between layers in FIFO
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* order which is guaranteed by the Protocol implementation and must be guranteed by subclasses
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* implementing their on Event queuing.<p>
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* <b>Note that each class implementing interface Protocol MUST provide an empty, public"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* constructor !</b>
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected Properties       props=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"protected Protocol         up_prot=null, down_prot=null;"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected ProtocolStack    stack=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"protected Queue            up_queue=new Queue(), down_queue=new Queue();"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected UpHandler        up_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected int              up_thread_prio=-1;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected DownHandler      down_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected int              down_thread_prio=-1;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected ProtocolObserver observer=null; // hook for debugger
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,private final long         THREAD_JOIN_TIMEOUT=1000;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected boolean          down_thread=true;  // determines whether the down_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected boolean          up_thread=true;    // determines whether the up_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected Log              log=LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/**
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Configures the protocol initially. A configuration string consists of name=value
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* items, separated by a ';' (semicolon), e.g.:<pre>"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* ""loopback=false;unicast_inport=4444"""
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* </pre>
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,*/
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public boolean setProperties(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.props=props;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return true;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** Called by Configurator. Removes 2 properties which are used by the Protocol directly and then
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"*	calls setProperties(), which might invoke the setProperties() method of the actual protocol instance."
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public boolean setPropertiesInternal(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,String str;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.props=(Properties)props.clone();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"str=props.getProperty(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(str != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_thread=new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"props.remove(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"str=props.getProperty(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_thread_prio=Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"props.remove(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"str=props.getProperty(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_thread=new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"props.remove(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"str=props.getProperty(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_thread_prio=Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"props.remove(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return setProperties(props);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Properties getProperties() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return props;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,observer.setProtocol(this);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Called after instance has been created (null constructor) and before protocol is started.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Properties are already set. Other protocols are not yet connected and events cannot yet be sent.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* @exception Exception Thrown if protocol cannot be initialized successfully. This will cause the
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"*                      ProtocolStack to fail, so the channel constructor will throw an exception"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void init() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* This method is called on a {@link org.jgroups.Channel#connect(String)}. Starts work.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Protocols are connected and queues are ready to receive events.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Will be called <em>from bottom to top</em>. This call will replace
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the <b>START</b> and <b>START_OK</b> events.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* @exception Exception Thrown if protocol cannot be started successfully. This will cause the ProtocolStack
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"*                      to fail, so {@link org.jgroups.Channel#connect(String)} will throw an exception"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void start() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* This method is called on a {@link org.jgroups.Channel#disconnect()}. Stops work (e.g. by closing multicast socket).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Will be called <em>from top to bottom</em>. This means that at the time of the method invocation the
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* neighbor protocol below is still working. This method will replace the
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* <b>STOP</b>, <b>STOP_OK</b>, <b>CLEANUP</b> and <b>CLEANUP_OK</b> events. The ProtocolStack guarantees that"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* when this method is called all messages in the down queue will have been flushed
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void stop() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* This method is called on a {@link org.jgroups.Channel#close()}.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Does some cleanup; after the call the VM will terminate
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void destroy() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Queue getUpQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return up_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,}    // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Queue getDownQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return down_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,}  // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** List of events that are required to be answered by some layer above.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,@return Vector (of Integers) */
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Vector requiredUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** List of events that are required to be answered by some layer below.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Vector requiredDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** List of events that are provided to layers above (they will be handled when sent down from
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,above).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Vector providedUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/** List of events that are provided to layers below (they will be handled when sent down from
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,below).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Vector providedDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public abstract String getName();   // all protocol names have to be unique !
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Protocol getUpProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public Protocol getDownProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void setUpProtocol(Protocol up_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.up_prot=up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void setDownProtocol(Protocol down_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.down_prot=down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void setProtocolStack(ProtocolStack stack) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,this.stack=stack;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"/** Used internally. If overridden, call this method first. Only creates the up_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if down_thread is true */
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void startUpHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"up_handler=new UpHandler(up_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_handler.setPriority(up_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,catch(Throwable t) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isErrorEnabled()) log.error(""priority "" + up_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,""" could not be set for thread: "" + Util.getStackTrace(t));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"/** Used internally. If overridden, call this method first. Only creates the down_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void startDownHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"down_handler=new DownHandler(down_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_handler.setPriority(down_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isErrorEnabled()) log.error(""priority "" + down_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"/** Used internally. If overridden, call parent's method first */"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void stopInternal() {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_queue.close(false);  // this should terminate up_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_handler != null && up_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,catch(Exception ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_handler.interrupt();  // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_handler != null && up_handler.isAlive())
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isErrorEnabled()) log.error(""up_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,""" was interrupted (in order to be terminated), but is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_queue.close(false); // this should terminate down_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_handler != null && down_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_handler.interrupt(); // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_handler != null && down_handler.isAlive())
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isErrorEnabled()) log.error(""down_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,""" was interrupted (in order to be terminated), but is is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* Internal method, should not be called by clients. Used by ProtocolStack. I would have"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* used the 'friends' modifier, but this is available only in C++ ... If the up_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* is not available (down_thread == false), then directly call the up() method: we will run on the"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* caller's thread (e.g. the protocol layer below us).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected void receiveUpEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer != null) {                               // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(observer.up(evt, up_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,catch(Exception e) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isWarnEnabled()) log.warn(""exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* used the 'friends' modifier, but this is available only in C++ ... If the down_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* is not available (down_thread == false), then directly call the down() method: we will run on the"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* caller's thread (e.g. the protocol layer above us).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected void receiveDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer != null) {                                    // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(observer.down(evt, down_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(handleSpecialDownEvent(evt) == false)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Causes the event to be forwarded to the next layer up in the hierarchy. Typically called
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* by the implementation of <code>Up</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void passUp(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer != null) {                   // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer.passUp(evt) == false) {  // false means don't pass up (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(up_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,up_prot.receiveUpEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isErrorEnabled()) log.error(""no upper layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* Causes the event to be forwarded to the next layer down in the hierarchy.Typically called
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* by the implementation of <code>Down</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void passDown(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer != null) {                     // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(observer.passDown(evt) == false) {  // false means don't pass down (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_prot != null)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,down_prot.receiveDownEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"if(log.isErrorEnabled()) log.error(""no lower layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* An event was received from the layer below. Usually the current layer will want to examine
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the event type and - depending on its type - perform some computation
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* (e.g. removing headers from a MSG event type, or updating the internal membership list"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* when receiving a VIEW_CHANGE event).
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* Finally the event is either a) discarded, or b) an event is sent down"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the stack using <code>passDown()</code> or c) the event (or another event) is sent up
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void up(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,passUp(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* An event is to be sent down the stack. The layer may want to examine its type and perform
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* some action on it, depending on the event's type. If the event is a message MSG, then"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the layer may need to add a header to it (or do nothing at all) before sending it down
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* the stack using <code>passDown()</code>. In case of a GET_ADDRESS event (which tries to
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"* retrieve the stack's address from one of the bottom layers), the layer may need to send"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* a new response event back up the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,public void down(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,passDown(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,/**  These are special internal events that should not be handled by protocols
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* @return boolean True: the event should be passed further down the stack. False: the event should
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,* be discarded (not passed down the stack)
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,protected boolean handleSpecialDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,switch(evt.getType()) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,case Event.ACK:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,if(down_prot == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,passUp(new Event(Event.ACK_OK));
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return false; // don't pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,case Event.START:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,start();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"// if we're the transport protocol, reply with a START_OK up the stack"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"passUp(new Event(Event.START_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return true; // pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"passUp(new Event(Event.START_OK, new Exception(""exception caused by "" + getName() + "".start(): "" + e)));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return false;
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,case Event.STOP:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,stop();
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,"passUp(new Event(Event.STOP_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,default:
cc88a4a6b162f10af320cb7c96196119710527e8,b3a2135b7afdb53302fbdf59e35bf5af8e27f9f1,deleted,1,return true; // pass down by default
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"// $Id: Protocol.java,v 1.11 2004/04/21 11:57:00 yaron-r Exp $"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,import EDU.oswego.cs.dl.util.concurrent.Mutex;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,private Queue mq = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,private Protocol handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,private ProtocolObserver observer = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected Log log = LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"public UpHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.mq = mq;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.handler = handler;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.observer = observer;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"setName(""UpHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} else {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"setName(""UpHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,}
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,setDaemon(true);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void setObserver(ProtocolObserver observer) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,/**
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Removes events from mq and calls handler.up(evt)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,*/
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void run() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,Event evt;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,while (!mq.closed()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,try {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"handler.blockUntilUpReady();  //If 'up' is not ready, block."
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,evt = (Event) mq.remove();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (evt == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (log.isWarnEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.warn(""removed null event"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,continue;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer != null) {                          // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"if (observer.up(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,handler.up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,evt = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} catch (QueueClosedException queue_closed) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,break;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} catch (Throwable e) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.warn(getName() + "" exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,e.printStackTrace();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"public DownHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"setName(""DownHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"setName(""DownHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Removes events from mq and calls handler.down(evt)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"handler.blockUntilDownReady();  //If 'up' is not ready, block."
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer != null) {                            // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"if (observer.down(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,int type = evt.getType();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (type == Event.ACK || type == Event.START || type == Event.STOP) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (handler.handleSpecialDownEvent(evt) == false) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,handler.down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.warn(getName() + "" exception is "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* The Protocol class provides a set of common services for protocol layers. Each layer has to be a subclass of Protocol
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* and override a number of methods (typically just <code>up()</code>, <code>Down</code> and <code>getName</code>."
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Layers are stacked in a certain order to form a protocol stack. <a href=org.jgroups.Event.html>Events</a> are passed
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* from lower layers to upper ones and vice versa. E.g. a Message received by the UDP layer at the bottom will be passed
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* to its higher layer as an Event. That layer will in turn pass the Event to its layer and so on, until a layer handles"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* the Message and sends a response or discards it, the former resulting in another Event being passed down the"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* stack.<p> Each layer has 2 FIFO queues, one for up Events and one for down Events. When an Event is received by a"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* layer (calling the internal upcall <code>ReceiveUpEvent</code>), it is placed in the up-queue where it will be"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* retrieved by the up-handler thread which will invoke method <code>Up</code> of the layer. The same applies for Events
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* traveling down the stack. Handling of the up-handler and down-handler threads and the 2 FIFO queues is donw by the
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* Protocol class, subclasses will almost never have to override this behavior.<p> The important thing to bear in mind"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* is that Events have to passed on between layers in FIFO order which is guaranteed by the Protocol implementation and
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* must be guranteed by subclasses implementing their on Event queuing.<p> <b>Note that each class implementing
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* interface Protocol MUST provide an empty, public constructor !</b>"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected Properties props = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"protected Protocol up_prot = null, down_prot = null;"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected ProtocolStack stack = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"protected Queue up_queue = new Queue(), down_queue = new Queue();"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected UpHandler up_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected int up_thread_prio = -1;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected DownHandler down_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected int down_thread_prio = -1;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected ProtocolObserver observer = null; // hook for debugger
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,private final long THREAD_JOIN_TIMEOUT = 1000;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected boolean down_thread = true;  // determines whether the down_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected boolean up_thread = true;    // determines whether the up_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"private final Mutex m_upLock = new Mutex(); 		// obtain lock if not ready for up, release when ready"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"private final Mutex m_downLock = new Mutex();    	// obtain lock if not ready for down, release when ready"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Configures the protocol initially. A configuration string consists of name=value
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* items, separated by a ';' (semicolon), e.g.:<pre>"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* ""loopback=false;unicast_inport=4444"""
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* </pre>
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public boolean setProperties(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.props = props;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return true;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* Called by Configurator. Removes 2 properties which are used by the Protocol directly and then calls setProperties(),"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* which might invoke the setProperties() method of the actual protocol instance.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public boolean setPropertiesInternal(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,String str;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.props = (Properties) props.clone();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"str = props.getProperty(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (str != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_thread = new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"props.remove(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"str = props.getProperty(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_thread_prio = Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"props.remove(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"str = props.getProperty(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_thread = new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"props.remove(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"str = props.getProperty(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_thread_prio = Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"props.remove(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return setProperties(props);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Properties getProperties() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return props;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,observer.setProtocol(this);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (up_handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_handler != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Called after instance has been created (null constructor) and before protocol is started. Properties are already
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* set. Other protocols are not yet connected and events cannot yet be sent.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,*
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* @throws Exception Thrown if protocol cannot be initialized successfully. This will cause the ProtocolStack to fail,"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,*                   so the channel constructor will throw an exception
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void init() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* This method is called on a {@link org.jgroups.Channel#connect(String)}. Starts work. Protocols are connected and
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* queues are ready to receive events. Will be called <em>from bottom to top</em>. This call will replace the
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* <b>START</b> and <b>START_OK</b> events.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* @throws Exception Thrown if protocol cannot be started successfully. This will cause the ProtocolStack to fail, so"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,*                   {@link org.jgroups.Channel#connect(String)} will throw an exception
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void start() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* This method is called on a {@link org.jgroups.Channel#disconnect()}. Stops work (e.g. by closing multicast socket).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Will be called <em>from top to bottom</em>. This means that at the time of the method invocation the neighbor
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* protocol below is still working. This method will replace the <b>STOP</b>, <b>STOP_OK</b>, <b>CLEANUP</b> and"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* <b>CLEANUP_OK</b> events. The ProtocolStack guarantees that when this method is called all messages in the down
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* queue will have been flushed
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void stop() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* This method is called on a {@link org.jgroups.Channel#close()}. Does some cleanup; after the call the VM will
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* terminate
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void destroy() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Queue getUpQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return up_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,}    // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Queue getDownQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return down_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,}  // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* List of events that are required to be answered by some layer above.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* @return Vector (of Integers)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Vector requiredUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* List of events that are required to be answered by some layer below.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Vector requiredDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* List of events that are provided to layers above (they will be handled when sent down from above).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Vector providedUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* List of events that are provided to layers below (they will be handled when sent down from below).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Vector providedDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public abstract String getName();   // all protocol names have to be unique !
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Protocol getUpProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public Protocol getDownProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void setUpProtocol(Protocol up_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.up_prot = up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void setDownProtocol(Protocol down_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.down_prot = down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void setProtocolStack(ProtocolStack stack) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,this.stack = stack;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* Used internally. If overridden, call this method first. Only creates the up_handler thread if down_thread is true"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void startUpHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (up_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (up_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"up_handler = new UpHandler(up_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (up_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_handler.setPriority(up_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} catch (Throwable t) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (log.isErrorEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.error(""priority "" + up_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,""" could not be set for thread: "" + Util.getStackTrace(t));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* Used internally. If overridden, call this method first. Only creates the down_handler thread if down_thread is true"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void startDownHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"down_handler = new DownHandler(down_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_handler.setPriority(down_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.error(""priority "" + down_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* Used internally. If overridden, call parent's method first"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void stopInternal() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_queue.close(false);  // this should terminate up_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (up_handler != null && up_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} catch (Exception ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_handler.interrupt();  // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.error(""up_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,""" was interrupted (in order to be terminated), but is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_queue.close(false); // this should terminate down_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_handler != null && down_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_handler.interrupt(); // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.error(""down_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,""" was interrupted (in order to be terminated), but is is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_handler = null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* Internal method, should not be called by clients. Used by ProtocolStack. I would have used the 'friends' modifier,"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* but this is available only in C++ ... If the up_handler thread is not available (down_thread == false), then"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* directly call the up() method: we will run on the caller's thread (e.g. the protocol layer below us).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected void receiveUpEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer != null) {                               // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"if (observer.up(evt, up_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} catch (Exception e) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.warn(""exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* but this is available only in C++ ... If the down_handler thread is not available (down_thread == false), then"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* directly call the down() method: we will run on the caller's thread (e.g. the protocol layer above us).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected void receiveDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer != null) {                                    // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"if (observer.down(evt, down_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (handleSpecialDownEvent(evt) == false) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Causes the event to be forwarded to the next layer up in the hierarchy. Typically called by the implementation of
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* <code>Up</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void passUp(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer != null) {                   // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer.passUp(evt) == false) {  // false means don't pass up (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (up_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,up_prot.receiveUpEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} else if (log.isErrorEnabled()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.error(""no upper layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Causes the event to be forwarded to the next layer down in the hierarchy.Typically called by the implementation of
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* <code>Down</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void passDown(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer != null) {                     // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (observer.passDown(evt) == false) {  // false means don't pass down (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,down_prot.receiveDownEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"log.error(""no lower layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* An event was received from the layer below. Usually the current layer will want to examine the event type and -
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* depending on its type - perform some computation (e.g. removing headers from a MSG event type, or updating the"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* internal membership list when receiving a VIEW_CHANGE event). Finally the event is either a) discarded, or b) an"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* event is sent down the stack using <code>passDown()</code> or c) the event (or another event) is sent up the stack
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void up(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,passUp(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Call this method before calling 'up'. This method will block (not return) until 'up' is ready.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void blockUntilUpReady() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,m_upLock.acquire();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,} catch (InterruptedException ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,//this is ok
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,m_upLock.release();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* An event is to be sent down the stack. The layer may want to examine its type and perform some action on it,"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* depending on the event's type. If the event is a message MSG, then the layer may need to add a header to it (or do"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* nothing at all) before sending it down the stack using <code>passDown()</code>. In case of a GET_ADDRESS event
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"* (which tries to retrieve the stack's address from one of the bottom layers), the layer may need to send a new"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* response event back up the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void down(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,passDown(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* Call this method before calling 'down'. This method will block (not return) until 'down' is ready.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,public void blockUntilDownReady() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,m_downLock.acquire();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,m_downLock.release();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* These are special internal events that should not be handled by protocols
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,* @return boolean True: the event should be passed further down the stack. False: the event should be discarded (not
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,*         passed down the stack)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,protected boolean handleSpecialDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,switch (evt.getType()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,case Event.ACK:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,if (down_prot == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,passUp(new Event(Event.ACK_OK));
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return false; // don't pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,case Event.START:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,start();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"// if we're the transport protocol, reply with a START_OK up the stack"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"passUp(new Event(Event.START_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return true; // pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"passUp(new Event(Event.START_OK, new Exception(""exception caused by "" + getName() + "".start(): "" + e)));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return false;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,case Event.STOP:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,stop();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,"passUp(new Event(Event.STOP_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,default:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,added,0,return true; // pass down by default
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"// $Id: Protocol.java,v 1.10 2004/03/30 06:47:27 belaban Exp $"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,private Queue mq=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,private Protocol handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,private ProtocolObserver observer=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected Log  log=LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"public UpHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.mq=mq;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.handler=handler;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.observer=observer;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"setName(""UpHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,else
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"setName(""UpHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,setDaemon(true);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,}
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void setObserver(ProtocolObserver observer) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** Removes events from mq and calls handler.up(evt) */
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void run() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,Event evt;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,while(!mq.closed()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,try {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,evt=(Event)mq.remove();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(evt == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isWarnEnabled()) log.warn(""removed null event"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,continue;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer != null) {                          // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(observer.up(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,handler.up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,evt=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,catch(QueueClosedException queue_closed) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,break;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,catch(Throwable e) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isWarnEnabled()) log.warn(getName() + "" exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,e.printStackTrace();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"public DownHandler(Queue mq, Protocol handler, ProtocolObserver observer) {"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"setName(""DownHandler ("" + handler.getName() + "")"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"setName(""DownHandler"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** Removes events from mq and calls handler.down(evt) */
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer != null) {                            // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(observer.down(evt, mq.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,int type=evt.getType();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(type == Event.ACK || type == Event.START || type == Event.STOP) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(handler.handleSpecialDownEvent(evt) == false)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,handler.down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isWarnEnabled()) log.warn(getName() + "" exception is "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* The Protocol class provides a set of common services for protocol layers. Each layer has to
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* be a subclass of Protocol and override a number of methods (typically just <code>up()</code>,"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* <code>Down</code> and <code>getName</code>. Layers are stacked in a certain order to form
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* a protocol stack. <a href=org.jgroups.Event.html>Events</a> are passed from lower
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* layers to upper ones and vice versa. E.g. a Message received by the UDP layer at the bottom
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* will be passed to its higher layer as an Event. That layer will in turn pass the Event to
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* its layer and so on, until a layer handles the Message and sends a response or discards it,"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the former resulting in another Event being passed down the stack.<p>
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* Each layer has 2 FIFO queues, one for up Events and one for down Events. When an Event is"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* received by a layer (calling the internal upcall <code>ReceiveUpEvent</code>), it is placed"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* in the up-queue where it will be retrieved by the up-handler thread which will invoke method
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* <code>Up</code> of the layer. The same applies for Events traveling down the stack. Handling
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* of the up-handler and down-handler threads and the 2 FIFO queues is donw by the Protocol
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* class, subclasses will almost never have to override this behavior.<p>"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* The important thing to bear in mind is that Events have to passed on between layers in FIFO
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* order which is guaranteed by the Protocol implementation and must be guranteed by subclasses
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* implementing their on Event queuing.<p>
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* <b>Note that each class implementing interface Protocol MUST provide an empty, public"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* constructor !</b>
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected Properties       props=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"protected Protocol         up_prot=null, down_prot=null;"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected ProtocolStack    stack=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"protected Queue            up_queue=new Queue(), down_queue=new Queue();"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected UpHandler        up_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected int              up_thread_prio=-1;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected DownHandler      down_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected int              down_thread_prio=-1;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected ProtocolObserver observer=null; // hook for debugger
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,private final long         THREAD_JOIN_TIMEOUT=1000;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected boolean          down_thread=true;  // determines whether the down_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected boolean          up_thread=true;    // determines whether the up_handler thread should be started
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected Log              log=LogFactory.getLog(this.getClass());
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/**
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Configures the protocol initially. A configuration string consists of name=value
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* items, separated by a ';' (semicolon), e.g.:<pre>"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* ""loopback=false;unicast_inport=4444"""
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* </pre>
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,*/
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public boolean setProperties(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.props=props;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return true;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** Called by Configurator. Removes 2 properties which are used by the Protocol directly and then
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"*	calls setProperties(), which might invoke the setProperties() method of the actual protocol instance."
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public boolean setPropertiesInternal(Properties props) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,String str;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.props=(Properties)props.clone();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"str=props.getProperty(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(str != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_thread=new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"props.remove(""down_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"str=props.getProperty(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_thread_prio=Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"props.remove(""down_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"str=props.getProperty(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_thread=new Boolean(str).booleanValue();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"props.remove(""up_thread"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"str=props.getProperty(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_thread_prio=Integer.parseInt(str);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"props.remove(""up_thread_prio"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return setProperties(props);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Properties getProperties() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return props;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,observer.setProtocol(this);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_handler != null)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_handler.setObserver(observer);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Called after instance has been created (null constructor) and before protocol is started.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Properties are already set. Other protocols are not yet connected and events cannot yet be sent.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* @exception Exception Thrown if protocol cannot be initialized successfully. This will cause the
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"*                      ProtocolStack to fail, so the channel constructor will throw an exception"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void init() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* This method is called on a {@link org.jgroups.Channel#connect(String)}. Starts work.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Protocols are connected and queues are ready to receive events.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Will be called <em>from bottom to top</em>. This call will replace
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the <b>START</b> and <b>START_OK</b> events.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* @exception Exception Thrown if protocol cannot be started successfully. This will cause the ProtocolStack
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"*                      to fail, so {@link org.jgroups.Channel#connect(String)} will throw an exception"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void start() throws Exception {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* This method is called on a {@link org.jgroups.Channel#disconnect()}. Stops work (e.g. by closing multicast socket).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Will be called <em>from top to bottom</em>. This means that at the time of the method invocation the
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* neighbor protocol below is still working. This method will replace the
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* <b>STOP</b>, <b>STOP_OK</b>, <b>CLEANUP</b> and <b>CLEANUP_OK</b> events. The ProtocolStack guarantees that"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* when this method is called all messages in the down queue will have been flushed
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void stop() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* This method is called on a {@link org.jgroups.Channel#close()}.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Does some cleanup; after the call the VM will terminate
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void destroy() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Queue getUpQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return up_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,}    // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Queue getDownQueue() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return down_queue;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,}  // used by Debugger (ProtocolView)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** List of events that are required to be answered by some layer above.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,@return Vector (of Integers) */
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Vector requiredUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** List of events that are required to be answered by some layer below.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Vector requiredDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** List of events that are provided to layers above (they will be handled when sent down from
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,above).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Vector providedUpServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/** List of events that are provided to layers below (they will be handled when sent down from
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,below).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Vector providedDownServices() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public abstract String getName();   // all protocol names have to be unique !
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Protocol getUpProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public Protocol getDownProtocol() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void setUpProtocol(Protocol up_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.up_prot=up_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void setDownProtocol(Protocol down_prot) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.down_prot=down_prot;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void setProtocolStack(ProtocolStack stack) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,this.stack=stack;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"/** Used internally. If overridden, call this method first. Only creates the up_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if down_thread is true */
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void startUpHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"up_handler=new UpHandler(up_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_handler.setPriority(up_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,catch(Throwable t) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isErrorEnabled()) log.error(""priority "" + up_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,""" could not be set for thread: "" + Util.getStackTrace(t));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"/** Used internally. If overridden, call this method first. Only creates the down_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void startDownHandler() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_thread) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_handler == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"down_handler=new DownHandler(down_queue, this, observer);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_thread_prio >= 0) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_handler.setPriority(down_thread_prio);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isErrorEnabled()) log.error(""priority "" + down_thread_prio +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_handler.start();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"/** Used internally. If overridden, call parent's method first */"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void stopInternal() {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_queue.close(false);  // this should terminate up_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_handler != null && up_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,catch(Exception ex) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_handler.interrupt();  // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_handler != null && up_handler.isAlive())
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isErrorEnabled()) log.error(""up_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,""" was interrupted (in order to be terminated), but is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_queue.close(false); // this should terminate down_handler thread
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_handler != null && down_handler.isAlive()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_handler.join(THREAD_JOIN_TIMEOUT);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_handler.interrupt(); // still alive ? let's just kill it without mercy...
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_handler != null && down_handler.isAlive())
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isErrorEnabled()) log.error(""down_handler thread for "" + getName() +"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,""" was interrupted (in order to be terminated), but is is still alive"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_handler=null;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* Internal method, should not be called by clients. Used by ProtocolStack. I would have"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* used the 'friends' modifier, but this is available only in C++ ... If the up_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* is not available (down_thread == false), then directly call the up() method: we will run on the"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* caller's thread (e.g. the protocol layer below us).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected void receiveUpEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer != null) {                               // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(observer.up(evt, up_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,catch(Exception e) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isWarnEnabled()) log.warn(""exception: "" + e);"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* used the 'friends' modifier, but this is available only in C++ ... If the down_handler thread"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* is not available (down_thread == false), then directly call the down() method: we will run on the"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* caller's thread (e.g. the protocol layer above us).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected void receiveDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer != null) {                                    // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(observer.down(evt, down_queue.size()) == false) {  // false means discard event"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(handleSpecialDownEvent(evt) == false)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_queue.add(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Causes the event to be forwarded to the next layer up in the hierarchy. Typically called
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* by the implementation of <code>Up</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void passUp(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer != null) {                   // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer.passUp(evt) == false) {  // false means don't pass up (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(up_prot != null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,up_prot.receiveUpEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isErrorEnabled()) log.error(""no upper layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* Causes the event to be forwarded to the next layer down in the hierarchy.Typically called
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* by the implementation of <code>Down</code> (when done).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void passDown(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer != null) {                     // call debugger hook (if installed)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(observer.passDown(evt) == false) {  // false means don't pass down (=discard) event
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_prot != null)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,down_prot.receiveDownEvent(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"if(log.isErrorEnabled()) log.error(""no lower layer available"");"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* An event was received from the layer below. Usually the current layer will want to examine
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the event type and - depending on its type - perform some computation
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* (e.g. removing headers from a MSG event type, or updating the internal membership list"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* when receiving a VIEW_CHANGE event).
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* Finally the event is either a) discarded, or b) an event is sent down"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the stack using <code>passDown()</code> or c) the event (or another event) is sent up
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void up(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,passUp(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* An event is to be sent down the stack. The layer may want to examine its type and perform
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* some action on it, depending on the event's type. If the event is a message MSG, then"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the layer may need to add a header to it (or do nothing at all) before sending it down
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* the stack using <code>passDown()</code>. In case of a GET_ADDRESS event (which tries to
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"* retrieve the stack's address from one of the bottom layers), the layer may need to send"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* a new response event back up the stack using <code>passUp()</code>.
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,public void down(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,passDown(evt);
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,/**  These are special internal events that should not be handled by protocols
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* @return boolean True: the event should be passed further down the stack. False: the event should
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,* be discarded (not passed down the stack)
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,protected boolean handleSpecialDownEvent(Event evt) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,switch(evt.getType()) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,case Event.ACK:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,if(down_prot == null) {
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,passUp(new Event(Event.ACK_OK));
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return false; // don't pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,case Event.START:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,start();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"// if we're the transport protocol, reply with a START_OK up the stack"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"passUp(new Event(Event.START_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return true; // pass down the stack
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"passUp(new Event(Event.START_OK, new Exception(""exception caused by "" + getName() + "".start(): "" + e)));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return false;
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,case Event.STOP:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,stop();
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,"passUp(new Event(Event.STOP_OK, Boolean.TRUE));"
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,default:
cc88a4a6b162f10af320cb7c96196119710527e8,a95c4dedd7cd51855f91f2fba7b69c09e140ad24,deleted,1,return true; // pass down by default
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// $Id: MessageDispatcher.java,v 1.12 2004/04/21 13:33:03 yaron-r Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Channel channel = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected RequestCorrelator corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected MessageListener msg_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected MembershipListener membership_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected RequestHandler req_handler = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected ProtocolAdapter prot_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected TransportAdapter transport_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Vector members = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Address local_addr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected boolean deadlock_detection = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected PullPushAdapter adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Serializable id = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Log log = LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an item
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* has completed before fetching the next item from the queue. Note that setting this to true may destroy the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you know"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* what you're doing !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected boolean concurrent_processing = false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.channel = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,prot_adapter = new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.deadlock_detection = deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.concurrent_processing = concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.adapter = adapter;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.id = id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,PullPushHandler handler = new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Transport tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,transport_adapter = new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = ((Channel) tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter initially"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private void setMembers(Vector new_mbrs) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,deadlock_detection = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.concurrent_processing = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (transport_adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"//We have a correlator, we can 'up'. Unlock the up lock."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,prot_adapter.releaseUpLock(); //calling release on an already 'released' lock has no side effects.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,//We're stopped. Lock the up lock to make sure we don't loose events. They will be queued by the up queue of Protocol.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,prot_adapter.acquireUpLock(); //release it in start()
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,req_handler = rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} else if (adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (id != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param msg     The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST: return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                the first response received. <li>GET_ALL: wait for all responses (minus the ones from suspected
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"*                <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"*                (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                </ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,GroupRequest _req = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Channel tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,tmp = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,tmp = (Channel) adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (local_addr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (local_addr != null && real_dests != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isDebugEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isInfoEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param dests  The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param msg    The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if this
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*               is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (local_addr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination must
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector mbrs = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,RspList rsp_list = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Object dest = msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Rsp rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (mode == GroupRequest.GET_NONE) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,rsp_list = _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isWarnEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (rsp_list.size() > 1) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,rsp = (Rsp) rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (rsp.wasSuspected()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (!rsp.wasReceived()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (req_handler != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public String getName() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"return ""MessageDispatcher"";"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message listener's
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,byte[] tmp_state = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,switch (evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener.receive((Message) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,tmp_state = msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener.setState((byte[]) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,View v = (View) evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector new_mbrs = v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (membership_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener.suspect((Address) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,//todo: Yaronr: queue up events when correlator is null.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"/* Not needed any more. stop() blocks the upping, start() restarts it."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = (Address) evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"/* This is not an error, we are between stop and start"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* A situation may exist where an up protocol exists, but it is not ready to process events yet. In that case we"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* should save the events until he is ready. should this queue be bounded - yes, to be on the safe side. 50 should be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* more than enough, oldest event should be pushed out."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* <p/>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* This method is used by Protocol to test if the dispatcher is ready to process events.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} else if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,boolean pass_up = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,pass_up = corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return msg_listener != null ? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// $Id: MessageDispatcher.java,v 1.11 2004/04/08 04:58:35 belaban Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Channel             channel=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected RequestCorrelator   corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected MessageListener     msg_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected MembershipListener  membership_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected RequestHandler      req_handler=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected ProtocolAdapter     prot_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected TransportAdapter    transport_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Vector              members=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Address             local_addr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected boolean             deadlock_detection=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected PullPushAdapter     adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Serializable        id=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Log log=LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected boolean             concurrent_processing=false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.channel=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,prot_adapter=new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.deadlock_detection=deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.concurrent_processing=concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.adapter=adapter; this.id=id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,PullPushHandler handler=new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Transport       tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,transport_adapter=new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,else
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=((Channel)tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,private void setMembers (Vector new_mbrs)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,deadlock_detection=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.concurrent_processing=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(transport_adapter != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,req_handler=rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(channel != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,else if(adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(id != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,catch(Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Uses <code>GroupRequest</code>.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,is sent to all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,@param msg The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_FIRST: return the first response received.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,</ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<em>or</em> timeout time.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,GroupRequest  _req=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector        real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Channel       tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,tmp=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,tmp=(Channel)adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(local_addr == null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(local_addr != null && real_dests != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isInfoEnabled()) log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* request can be freed.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*               correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param msg The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*             immediately if this is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(local_addr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* The message's destination must be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector        mbrs=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,RspList       rsp_list=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Object        dest=msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Rsp           rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(mode == GroupRequest.GET_NONE)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,rsp_list=_req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(rsp_list.size() > 1)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(rsp.wasSuspected())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(!rsp.wasReceived())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(req_handler != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* message listener's corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,byte[] tmp_state=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,switch(evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(msg_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener.receive((Message)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,tmp_state=msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,catch(Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener.setState((byte[])evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,catch(ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,View    v=(View)evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector  new_mbrs=v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(membership_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener.suspect((Address)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(corr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,boolean pass_up=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,pass_up=corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return msg_listener != null? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// $Id: MessageDispatcher.java,v 1.12 2004/04/21 13:33:03 yaron-r Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Channel channel = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected RequestCorrelator corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected MessageListener msg_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected MembershipListener membership_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected RequestHandler req_handler = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected ProtocolAdapter prot_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected TransportAdapter transport_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Vector members = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Address local_addr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected boolean deadlock_detection = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected PullPushAdapter adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Serializable id = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Log log = LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an item
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* has completed before fetching the next item from the queue. Note that setting this to true may destroy the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you know"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* what you're doing !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected boolean concurrent_processing = false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.channel = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,prot_adapter = new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.deadlock_detection = deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.concurrent_processing = concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.adapter = adapter;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.id = id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,PullPushHandler handler = new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Transport tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,transport_adapter = new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = ((Channel) tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter initially"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private void setMembers(Vector new_mbrs) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,deadlock_detection = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.concurrent_processing = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (transport_adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"//We have a correlator, we can 'up'. Unlock the up lock."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,prot_adapter.releaseUpLock(); //calling release on an already 'released' lock has no side effects.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,//We're stopped. Lock the up lock to make sure we don't loose events. They will be queued by the up queue of Protocol.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,prot_adapter.acquireUpLock(); //release it in start()
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,req_handler = rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} else if (adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (id != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param msg     The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST: return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                the first response received. <li>GET_ALL: wait for all responses (minus the ones from suspected
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"*                <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"*                (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                </ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,GroupRequest _req = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Channel tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,tmp = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,tmp = (Channel) adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (local_addr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (local_addr != null && real_dests != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isDebugEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isInfoEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param dests  The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param msg    The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if this
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*               is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (local_addr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination must
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector mbrs = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,RspList rsp_list = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Object dest = msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Rsp rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (mode == GroupRequest.GET_NONE) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,rsp_list = _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isWarnEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (rsp_list.size() > 1) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,rsp = (Rsp) rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (rsp.wasSuspected()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (!rsp.wasReceived()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (req_handler != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public String getName() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"return ""MessageDispatcher"";"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message listener's
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,byte[] tmp_state = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,switch (evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener.receive((Message) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,tmp_state = msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener.setState((byte[]) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,View v = (View) evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector new_mbrs = v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (membership_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener.suspect((Address) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,//todo: Yaronr: queue up events when correlator is null.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"/* Not needed any more. stop() blocks the upping, start() restarts it."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = (Address) evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"/* This is not an error, we are between stop and start"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* A situation may exist where an up protocol exists, but it is not ready to process events yet. In that case we"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* should save the events until he is ready. should this queue be bounded - yes, to be on the safe side. 50 should be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* more than enough, oldest event should be pushed out."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* <p/>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* This method is used by Protocol to test if the dispatcher is ready to process events.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} else if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,boolean pass_up = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,pass_up = corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return msg_listener != null ? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// $Id: MessageDispatcher.java,v 1.11 2004/04/08 04:58:35 belaban Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Channel             channel=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected RequestCorrelator   corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected MessageListener     msg_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected MembershipListener  membership_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected RequestHandler      req_handler=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected ProtocolAdapter     prot_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected TransportAdapter    transport_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Vector              members=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Address             local_addr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected boolean             deadlock_detection=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected PullPushAdapter     adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Serializable        id=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Log log=LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected boolean             concurrent_processing=false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.channel=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,prot_adapter=new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.deadlock_detection=deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.concurrent_processing=concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.adapter=adapter; this.id=id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,PullPushHandler handler=new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Transport       tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,transport_adapter=new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,else
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=((Channel)tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,private void setMembers (Vector new_mbrs)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,deadlock_detection=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.concurrent_processing=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(transport_adapter != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,req_handler=rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(channel != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,else if(adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(id != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,catch(Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Uses <code>GroupRequest</code>.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,is sent to all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,@param msg The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_FIRST: return the first response received.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,</ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<em>or</em> timeout time.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,GroupRequest  _req=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector        real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Channel       tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,tmp=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,tmp=(Channel)adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(local_addr == null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(local_addr != null && real_dests != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isInfoEnabled()) log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* request can be freed.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*               correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param msg The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*             immediately if this is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(local_addr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* The message's destination must be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector        mbrs=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,RspList       rsp_list=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Object        dest=msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Rsp           rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(mode == GroupRequest.GET_NONE)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,rsp_list=_req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(rsp_list.size() > 1)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(rsp.wasSuspected())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(!rsp.wasReceived())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(req_handler != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* message listener's corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,byte[] tmp_state=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,switch(evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(msg_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener.receive((Message)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,tmp_state=msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,catch(Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener.setState((byte[])evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,catch(ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,View    v=(View)evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector  new_mbrs=v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(membership_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener.suspect((Address)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(corr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,boolean pass_up=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,pass_up=corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return msg_listener != null? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// $Id: MessageDispatcher.java,v 1.12 2004/04/21 13:33:03 yaron-r Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Channel channel = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected RequestCorrelator corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected MessageListener msg_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected MembershipListener membership_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected RequestHandler req_handler = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected ProtocolAdapter prot_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected TransportAdapter transport_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Vector members = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Address local_addr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected boolean deadlock_detection = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected PullPushAdapter adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Serializable id = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Log log = LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an item
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* has completed before fetching the next item from the queue. Note that setting this to true may destroy the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you know"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* what you're doing !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected boolean concurrent_processing = false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.channel = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,prot_adapter = new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.deadlock_detection = deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.concurrent_processing = concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.adapter = adapter;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.id = id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,PullPushHandler handler = new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Transport tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,transport_adapter = new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = ((Channel) tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter initially"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private void setMembers(Vector new_mbrs) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,deadlock_detection = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.concurrent_processing = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (transport_adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"//We have a correlator, we can 'up'. Unlock the up lock."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,prot_adapter.releaseUpLock(); //calling release on an already 'released' lock has no side effects.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,//We're stopped. Lock the up lock to make sure we don't loose events. They will be queued by the up queue of Protocol.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,prot_adapter.acquireUpLock(); //release it in start()
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,req_handler = rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} else if (adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (id != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param msg     The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST: return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                the first response received. <li>GET_ALL: wait for all responses (minus the ones from suspected
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"*                <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"*                (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                </ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,GroupRequest _req = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Channel tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,tmp = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,tmp = (Channel) adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (local_addr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (local_addr != null && real_dests != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isDebugEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isInfoEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param dests  The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param msg    The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if this
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*               is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (local_addr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination must
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector mbrs = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,RspList rsp_list = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Object dest = msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Rsp rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (mode == GroupRequest.GET_NONE) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,rsp_list = _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isWarnEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (rsp_list.size() > 1) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,rsp = (Rsp) rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (rsp.wasSuspected()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (!rsp.wasReceived()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (req_handler != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public String getName() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"return ""MessageDispatcher"";"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message listener's
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,byte[] tmp_state = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,switch (evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener.receive((Message) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,tmp_state = msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener.setState((byte[]) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,View v = (View) evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector new_mbrs = v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (membership_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener.suspect((Address) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,//todo: Yaronr: queue up events when correlator is null.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"/* Not needed any more. stop() blocks the upping, start() restarts it."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = (Address) evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"/* This is not an error, we are between stop and start"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* A situation may exist where an up protocol exists, but it is not ready to process events yet. In that case we"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* should save the events until he is ready. should this queue be bounded - yes, to be on the safe side. 50 should be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* more than enough, oldest event should be pushed out."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* <p/>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* This method is used by Protocol to test if the dispatcher is ready to process events.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} else if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,boolean pass_up = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,pass_up = corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return msg_listener != null ? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// $Id: MessageDispatcher.java,v 1.11 2004/04/08 04:58:35 belaban Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Channel             channel=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected RequestCorrelator   corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected MessageListener     msg_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected MembershipListener  membership_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected RequestHandler      req_handler=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected ProtocolAdapter     prot_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected TransportAdapter    transport_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Vector              members=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Address             local_addr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected boolean             deadlock_detection=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected PullPushAdapter     adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Serializable        id=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Log log=LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected boolean             concurrent_processing=false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.channel=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,prot_adapter=new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.deadlock_detection=deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.concurrent_processing=concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.adapter=adapter; this.id=id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,PullPushHandler handler=new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Transport       tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,transport_adapter=new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,else
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=((Channel)tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,private void setMembers (Vector new_mbrs)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,deadlock_detection=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.concurrent_processing=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(transport_adapter != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,req_handler=rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(channel != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,else if(adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(id != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,catch(Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Uses <code>GroupRequest</code>.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,is sent to all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,@param msg The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_FIRST: return the first response received.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,</ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<em>or</em> timeout time.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,GroupRequest  _req=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector        real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Channel       tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,tmp=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,tmp=(Channel)adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(local_addr == null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(local_addr != null && real_dests != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isInfoEnabled()) log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* request can be freed.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*               correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param msg The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*             immediately if this is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(local_addr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* The message's destination must be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector        mbrs=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,RspList       rsp_list=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Object        dest=msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Rsp           rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(mode == GroupRequest.GET_NONE)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,rsp_list=_req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(rsp_list.size() > 1)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(rsp.wasSuspected())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(!rsp.wasReceived())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(req_handler != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* message listener's corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,byte[] tmp_state=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,switch(evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(msg_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener.receive((Message)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,tmp_state=msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,catch(Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener.setState((byte[])evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,catch(ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,View    v=(View)evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector  new_mbrs=v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(membership_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener.suspect((Address)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(corr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,boolean pass_up=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,pass_up=corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return msg_listener != null? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// $Id: MessageDispatcher.java,v 1.12 2004/04/21 13:33:03 yaron-r Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Channel channel = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected RequestCorrelator corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected MessageListener msg_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected MembershipListener membership_listener = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected RequestHandler req_handler = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected ProtocolAdapter prot_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected TransportAdapter transport_adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Vector members = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Address local_addr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected boolean deadlock_detection = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected PullPushAdapter adapter = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Serializable id = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Log log = LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an item
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* has completed before fetching the next item from the queue. Note that setting this to true may destroy the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you know"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* what you're doing !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected boolean concurrent_processing = false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.channel = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,prot_adapter = new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.deadlock_detection = deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.concurrent_processing = concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.adapter = adapter;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.id = id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,PullPushHandler handler = new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Transport tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,transport_adapter = new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = ((Channel) tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter initially"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private void setMembers(Vector new_mbrs) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,deadlock_detection = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.concurrent_processing = flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (transport_adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"//We have a correlator, we can 'up'. Unlock the up lock."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,prot_adapter.releaseUpLock(); //calling release on an already 'released' lock has no side effects.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,//We're stopped. Lock the up lock to make sure we don't loose events. They will be queued by the up queue of Protocol.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,prot_adapter.acquireUpLock(); //release it in start()
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener = l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,req_handler = rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} else if (adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (id != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param msg     The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST: return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                the first response received. <li>GET_ALL: wait for all responses (minus the ones from suspected
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"*                <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"*                (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                </ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,GroupRequest _req = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Channel tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,tmp = channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,tmp = (Channel) adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (local_addr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (local_addr != null && real_dests != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isDebugEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isInfoEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param dests  The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param msg    The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if this
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*               is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (local_addr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination must
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector mbrs = new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,RspList rsp_list = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Object dest = msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Rsp rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (mode == GroupRequest.GET_NONE) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,rsp_list = _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isWarnEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (rsp_list.size() > 1) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,rsp = (Rsp) rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (rsp.wasSuspected()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (!rsp.wasReceived()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (req_handler != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public String getName() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"return ""MessageDispatcher"";"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message listener's
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,byte[] tmp_state = null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,switch (evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener.receive((Message) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,tmp_state = msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener.setState((byte[]) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,View v = (View) evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector new_mbrs = v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (membership_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener.suspect((Address) evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,//todo: Yaronr: queue up events when correlator is null.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"/* Not needed any more. stop() blocks the upping, start() restarts it."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = (Address) evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"/* This is not an error, we are between stop and start"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* A situation may exist where an up protocol exists, but it is not ready to process events yet. In that case we"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* should save the events until he is ready. should this queue be bounded - yes, to be on the safe side. 50 should be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* more than enough, oldest event should be pushed out."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* <p/>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* This method is used by Protocol to test if the dispatcher is ready to process events.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} else if (log.isErrorEnabled()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,boolean pass_up = true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,pass_up = corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return msg_listener != null ? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// $Id: MessageDispatcher.java,v 1.11 2004/04/08 04:58:35 belaban Exp $"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* application instead of protocol level.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Channel             channel=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected RequestCorrelator   corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected MessageListener     msg_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected MembershipListener  membership_listener=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected RequestHandler      req_handler=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected ProtocolAdapter     prot_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected TransportAdapter    transport_adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Vector              members=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Address             local_addr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected boolean             deadlock_detection=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected PullPushAdapter     adapter=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Serializable        id=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Log log=LogFactory.getLog(getClass());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected boolean             concurrent_processing=false;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.channel=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,prot_adapter=new ProtocolAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(channel != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=channel.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"channel.setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,}
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,setMessageListener(l);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,setMembershipListener(l2);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,channel.setUpHandler(prot_adapter);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, boolean deadlock_detection) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.deadlock_detection=deadlock_detection;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"boolean deadlock_detection, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.concurrent_processing=concurrent_processing;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"this(channel, l, l2);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,setRequestHandler(req_handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public MessageDispatcher(Channel channel, MessageListener l, MembershipListener l2, RequestHandler req_handler,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,boolean deadlock_detection) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/*
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* Uses a user-provided PullPushAdapter rather than a Channel as transport. If id is non-null, it will be"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* used to register under that id. This is typically used when another building block is already using
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* PullPushAdapter, and we want to add this building block in addition. The id is the used to discriminate"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* between messages for the various blocks on top of PullPushAdapter. If null, we will assume we are the"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* first block created on PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param adapter The PullPushAdapter which to use as underlying transport
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param id A serializable object (e.g. an Integer) used to discriminate (multiplex/demultiplex) between
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*           requests/responses for different building blocks on top of PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*/
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public MessageDispatcher(PullPushAdapter adapter, Serializable id,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"MessageListener l, MembershipListener l2) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.adapter=adapter; this.id=id;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,PullPushHandler handler=new PullPushHandler();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Transport       tp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,transport_adapter=new TransportAdapter();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,adapter.addMembershipListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,adapter.setListener(handler);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,else
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"adapter.registerListener(id, handler);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=((Channel)tp).getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param req_handler The object implementing RequestHandler. It will be called when a request is received
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"MessageListener l, MembershipListener l2,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,RequestHandler req_handler) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"RequestHandler req_handler, boolean concurrent_processing) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/**
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,private void setMembers (Vector new_mbrs)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,{
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(new_mbrs != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,members.removeAllElements();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,members.addElement(new_mbrs.elementAt(i));
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void setDeadlockDetection(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,deadlock_detection=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.setDeadlockDetection(flag);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void setConcurrentProcessing(boolean flag) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.concurrent_processing=flag;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void finalize() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void start() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(corr == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(transport_adapter != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,else {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.start();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,setMembers(tmp_mbrs);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void stop() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(corr != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.stop();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void setMessageListener(MessageListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void setMembershipListener(MembershipListener l) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener=l;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void setRequestHandler(RequestHandler rh) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,req_handler=rh;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public void send(Message msg) throws ChannelNotConnectedException, ChannelClosedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(channel != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,channel.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,else if(adapter != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,try {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(id != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"adapter.send(id, msg);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,adapter.send(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,catch(Throwable ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Uses <code>GroupRequest</code>.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,is sent to all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,@param msg The message to be sent to n members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_FIRST: return the first response received.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,</ol>
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<em>or</em> timeout time.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,to its sender.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,GroupRequest  _req=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector        real_dests;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Channel       tmp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// we need to clone because we don't want to modify the original
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// therefore remove it from the membership
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,tmp=channel;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(tmp == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,tmp=(Channel)adapter.getTransport();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(local_addr == null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=tmp.getLocalAddress();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(local_addr != null && real_dests != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,real_dests.removeElement(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// don't even send the message if the destination list is empty
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(real_dests == null || real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isInfoEnabled()) log.info(""destination list is empty, won't send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return new RspList(); // return empty response list
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,_req.execute();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return _req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* request can be freed.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*               correlate responses with requests
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param msg The request to be sent
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*             immediately if this is null
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public void castMessage(final Vector dests, long req_id, Message msg, RspCollector coll) {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(msg == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(coll == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(local_addr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(real_dests.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"corr.sendRequest(req_id, real_dests, msg, coll);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void done(long req_id) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.done(req_id);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* The message's destination must be non-zero !
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public Object sendMessage(Message msg, int mode, long timeout) throws TimeoutException, SuspectedException {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector        mbrs=new Vector();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,RspList       rsp_list=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Object        dest=msg.getDest();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Rsp           rsp;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(dest == null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"""cannot send message"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(mode == GroupRequest.GET_NONE)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,rsp_list=_req.getResults();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(rsp_list.size() == 0) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(rsp_list.size() > 1)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"""more that 1 response; returning first response !"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(rsp.wasSuspected())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,throw new SuspectedException(dest);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(!rsp.wasReceived())
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,throw new TimeoutException();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return rsp.getValue();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* ------------------------ RequestHandler Interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public Object handle(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(req_handler != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return req_handler.handle(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* -------------------- End of RequestHandler Interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,class ProtocolAdapter extends Protocol implements UpHandler {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* ------------------------- Protocol Interface --------------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void startUpHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// do nothing, DON'T REMOVE !!!!"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void startDownHandler() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void stopInternal() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected void receiveUpEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected void receiveDownEvent(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* message listener's corresponding methods
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void passUp(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,byte[] tmp_state=null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,switch(evt.getType()) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,case Event.MSG:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(msg_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener.receive((Message)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,break;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,case Event.GET_APPLSTATE: // reply with GET_APPLSTATE_OK
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(msg_listener != null) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,tmp_state=msg_listener.getState();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,catch(Throwable t) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"log.error(""failed getting state from message listener ("" + msg_listener + "")"", t);"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,channel.returnState(tmp_state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,case Event.GET_STATE_OK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener.setState((byte[])evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,catch(ClassCastException cast_ex) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,case Event.VIEW_CHANGE:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,View    v=(View)evt.getArg();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector  new_mbrs=v.getMembers();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(membership_listener != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener.viewAccepted(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,case Event.SUSPECT:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener.suspect((Address)evt.getArg());
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,case Event.BLOCK:
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener.block();
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void passDown(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void up(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(corr != null)
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.setLocalAddress(local_addr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.receive(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void down(Event evt) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,channel.down(evt);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* ----------------------- End of Protocol Interface ------------------------ */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,class TransportAdapter implements Transport {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void send(Message msg) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public Object receive(long timeout) throws Exception {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// @todo: implement
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"class PullPushHandler implements MessageListener, MembershipListener {"
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* ------------------------- MessageListener interface ---------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void receive(Message msg) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,boolean pass_up=true;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,pass_up=corr.receiveMessage(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(pass_up) {   // pass on to MessageListener
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener.receive(msg);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public byte[] getState() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return msg_listener != null? msg_listener.getState() : null;
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void setState(byte[] state) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener.setState(state);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* --------------------- End of MessageListener interface ------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* ------------------------ MembershipListener interface -------------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void viewAccepted(View v) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.receiveView(v);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void suspect(Address suspected_mbr) {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.receiveSuspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener.suspect(suspected_mbr);
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,public void block() {
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/* --------------------- End of MembershipListener interface ---------------- */
de11e563cde19970f8491cbb8d689fbc8fd53f0f,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// @todo: receive SET_LOCAL_ADDR event and call corr.setLocalAddress(addr)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// $Id: MessageDispatcher.java,v 1.15 2004/04/29 13:46:24 yaron-r Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,import org.jgroups.util.ReentrantLatch;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,import EDU.oswego.cs.dl.util.concurrent.LinkedQueue;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Channel channel = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected RequestCorrelator corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected MessageListener msg_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected MembershipListener membership_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected RequestHandler req_handler = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected ProtocolAdapter prot_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected TransportAdapter transport_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Vector members = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Address local_addr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected boolean deadlock_detection = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected PullPushAdapter adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Serializable id = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected Log log = LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* item has completed before fetching the next item from the queue. Note that setting this to true may destroy the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* know what you're doing !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,protected boolean concurrent_processing = false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.channel = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,prot_adapter = new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.deadlock_detection = deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.concurrent_processing = concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.adapter = adapter;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.id = id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,PullPushHandler handler = new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Transport tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,transport_adapter = new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = ((Channel) tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private void setMembers(Vector new_mbrs) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,deadlock_detection = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,this.concurrent_processing = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (transport_adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,prot_adapter.resume();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,prot_adapter.pause();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,req_handler = rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} else if (adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (id != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param msg     The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                return the first response received. <li>GET_ALL: wait for all responses (minus the ones from
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                suspected members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"*                size) <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"*                responses (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*                (non-blocking) </ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,GroupRequest _req = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Channel tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,tmp = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,tmp = (Channel) adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (local_addr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,local_addr = tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (local_addr != null && real_dests != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isDebugEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param dests  The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*               requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param msg    The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,*               this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (local_addr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector mbrs = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,RspList rsp_list = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Object dest = msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Rsp rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (mode == GroupRequest.GET_NONE) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,rsp_list = _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (log.isWarnEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (rsp_list.size() > 1) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,rsp = (Rsp) rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (rsp.wasSuspected()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (!rsp.wasReceived()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (req_handler != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public String getName() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"return ""MessageDispatcher"";"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,byte[] tmp_state = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,switch (evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener.receive((Message) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,tmp_state = msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,msg_listener.setState((byte[]) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,evt.getArg() +
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,""" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,View v = (View) evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,Vector new_mbrs = v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (membership_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,membership_listener.suspect((Address) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private Thread m_upProcessingThread = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private EDU.oswego.cs.dl.util.concurrent.Channel m_upQueue = new LinkedQueue();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private ReentrantLatch m_upLatch = new ReentrantLatch(false);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private void startProcessingThreads() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upProcessingThread = new Thread(new Runnable() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void run() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,while (true) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,try {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upLatch.passThrough();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,handleUp((Event) m_upQueue.take());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} catch (InterruptedException ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,//this is ok.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,});
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"m_upProcessingThread.setName(""MessageDispatcher up processing thread"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upProcessingThread.setDaemon(true);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upProcessingThread.start();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public void pause() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upLatch.lock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,public synchronized void resume() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (m_upProcessingThread == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,startProcessingThreads();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upLatch.unlock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,m_upQueue.put(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,//this is ok
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,private void handleUp(Event evt) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (null != corr) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"} else if (log.isErrorEnabled()) { //Something is seriously wrong, correlator should not be null since latch is not locked!"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,"log.error(""correlator is null, but latch is not locked! Event ignored."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,} else if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,boolean pass_up = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,pass_up = corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,if (pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,added,0,return msg_listener != null ? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// $Id: MessageDispatcher.java,v 1.14 2004/04/26 18:40:12 belaban Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Channel             channel=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected RequestCorrelator   corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected MessageListener     msg_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected MembershipListener  membership_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected RequestHandler      req_handler=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected ProtocolAdapter     prot_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected TransportAdapter    transport_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Vector              members=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Address             local_addr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected boolean             deadlock_detection=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected PullPushAdapter     adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Serializable        id=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected Log log=LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,protected boolean             concurrent_processing=false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.channel=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,prot_adapter=new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.deadlock_detection=deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.concurrent_processing=concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.adapter=adapter; this.id=id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,PullPushHandler handler=new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Transport       tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,transport_adapter=new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,else
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=((Channel)tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,private void setMembers (Vector new_mbrs)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,deadlock_detection=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,this.concurrent_processing=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(transport_adapter != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,req_handler=rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(channel != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,else if(adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(id != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,catch(Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Uses <code>GroupRequest</code>.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,is sent to all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,@param msg The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_FIRST: return the first response received.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,</ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,<em>or</em> timeout time.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,GroupRequest  _req=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector        real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Channel       tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,tmp=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,tmp=(Channel)adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(local_addr == null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(local_addr != null && real_dests != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isDebugEnabled()) log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* request can be freed.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*               correlate responses with requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param msg The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,*             immediately if this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(local_addr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* The message's destination must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector        mbrs=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,RspList       rsp_list=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Object        dest=msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Rsp           rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(mode == GroupRequest.GET_NONE)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,rsp_list=_req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(rsp_list.size() > 1)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(rsp.wasSuspected())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(!rsp.wasReceived())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(req_handler != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,* message listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,byte[] tmp_state=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,switch(evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(msg_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener.receive((Message)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,tmp_state=msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,catch(Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,msg_listener.setState((byte[])evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,catch(ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,View    v=(View)evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,Vector  new_mbrs=v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(membership_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,membership_listener.suspect((Address)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(corr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.setLocalAddress(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,boolean pass_up=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,pass_up=corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,if(pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4c926af23692e93ef158146cd1fdf16e8665e2a1,deleted,1,return msg_listener != null? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// $Id: MessageDispatcher.java,v 1.15 2004/04/29 13:46:24 yaron-r Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,import org.jgroups.util.ReentrantLatch;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,import EDU.oswego.cs.dl.util.concurrent.LinkedQueue;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Channel channel = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected RequestCorrelator corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected MessageListener msg_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected MembershipListener membership_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected RequestHandler req_handler = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected ProtocolAdapter prot_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected TransportAdapter transport_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Vector members = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Address local_addr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected boolean deadlock_detection = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected PullPushAdapter adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Serializable id = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected Log log = LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* item has completed before fetching the next item from the queue. Note that setting this to true may destroy the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* know what you're doing !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,protected boolean concurrent_processing = false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.channel = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,prot_adapter = new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.deadlock_detection = deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.concurrent_processing = concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.adapter = adapter;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.id = id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,PullPushHandler handler = new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Transport tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,transport_adapter = new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = ((Channel) tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private void setMembers(Vector new_mbrs) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,deadlock_detection = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,this.concurrent_processing = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (transport_adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,prot_adapter.resume();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,prot_adapter.pause();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,req_handler = rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} else if (adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (id != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param msg     The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                return the first response received. <li>GET_ALL: wait for all responses (minus the ones from
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                suspected members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"*                size) <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"*                responses (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*                (non-blocking) </ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,GroupRequest _req = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Channel tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,tmp = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,tmp = (Channel) adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (local_addr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,local_addr = tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (local_addr != null && real_dests != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isDebugEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param dests  The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*               requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param msg    The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,*               this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (local_addr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector mbrs = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,RspList rsp_list = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Object dest = msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Rsp rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (mode == GroupRequest.GET_NONE) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,rsp_list = _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (log.isWarnEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (rsp_list.size() > 1) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,rsp = (Rsp) rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (rsp.wasSuspected()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (!rsp.wasReceived()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (req_handler != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public String getName() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"return ""MessageDispatcher"";"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,byte[] tmp_state = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,switch (evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener.receive((Message) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,tmp_state = msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,msg_listener.setState((byte[]) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,evt.getArg() +
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,""" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,View v = (View) evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,Vector new_mbrs = v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (membership_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,membership_listener.suspect((Address) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private Thread m_upProcessingThread = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private EDU.oswego.cs.dl.util.concurrent.Channel m_upQueue = new LinkedQueue();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private ReentrantLatch m_upLatch = new ReentrantLatch(false);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private void startProcessingThreads() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upProcessingThread = new Thread(new Runnable() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void run() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,while (true) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,try {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upLatch.passThrough();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,handleUp((Event) m_upQueue.take());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} catch (InterruptedException ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,//this is ok.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,});
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"m_upProcessingThread.setName(""MessageDispatcher up processing thread"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upProcessingThread.setDaemon(true);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upProcessingThread.start();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public void pause() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upLatch.lock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,public synchronized void resume() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (m_upProcessingThread == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,startProcessingThreads();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upLatch.unlock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,m_upQueue.put(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,//this is ok
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,private void handleUp(Event evt) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (null != corr) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"} else if (log.isErrorEnabled()) { //Something is seriously wrong, correlator should not be null since latch is not locked!"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,"log.error(""correlator is null, but latch is not locked! Event ignored."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,} else if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,boolean pass_up = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,pass_up = corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,if (pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,added,0,return msg_listener != null ? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// $Id: MessageDispatcher.java,v 1.14 2004/04/26 18:40:12 belaban Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Channel             channel=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected RequestCorrelator   corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected MessageListener     msg_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected MembershipListener  membership_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected RequestHandler      req_handler=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected ProtocolAdapter     prot_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected TransportAdapter    transport_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Vector              members=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Address             local_addr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected boolean             deadlock_detection=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected PullPushAdapter     adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Serializable        id=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected Log log=LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,protected boolean             concurrent_processing=false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.channel=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,prot_adapter=new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.deadlock_detection=deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.concurrent_processing=concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.adapter=adapter; this.id=id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,PullPushHandler handler=new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Transport       tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,transport_adapter=new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,else
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=((Channel)tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,private void setMembers (Vector new_mbrs)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,deadlock_detection=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,this.concurrent_processing=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(transport_adapter != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,req_handler=rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(channel != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,else if(adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(id != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,catch(Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Uses <code>GroupRequest</code>.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,is sent to all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,@param msg The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_FIRST: return the first response received.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,</ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,<em>or</em> timeout time.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,GroupRequest  _req=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector        real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Channel       tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,tmp=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,tmp=(Channel)adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(local_addr == null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(local_addr != null && real_dests != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isDebugEnabled()) log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* request can be freed.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*               correlate responses with requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param msg The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,*             immediately if this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(local_addr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* The message's destination must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector        mbrs=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,RspList       rsp_list=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Object        dest=msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Rsp           rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(mode == GroupRequest.GET_NONE)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,rsp_list=_req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(rsp_list.size() > 1)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(rsp.wasSuspected())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(!rsp.wasReceived())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(req_handler != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,* message listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,byte[] tmp_state=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,switch(evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(msg_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener.receive((Message)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,tmp_state=msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,catch(Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,msg_listener.setState((byte[])evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,catch(ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,View    v=(View)evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,Vector  new_mbrs=v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(membership_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,membership_listener.suspect((Address)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(corr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.setLocalAddress(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,boolean pass_up=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,pass_up=corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,if(pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,4750ec413619f4c89531aba0eb634c94ad7dfb99,deleted,1,return msg_listener != null? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// $Id: MessageDispatcher.java,v 1.15 2004/04/29 13:46:24 yaron-r Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,import org.jgroups.util.ReentrantLatch;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,import EDU.oswego.cs.dl.util.concurrent.LinkedQueue;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Channel channel = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected RequestCorrelator corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected MessageListener msg_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected MembershipListener membership_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected RequestHandler req_handler = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected ProtocolAdapter prot_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected TransportAdapter transport_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Vector members = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Address local_addr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected boolean deadlock_detection = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected PullPushAdapter adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Serializable id = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected Log log = LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* item has completed before fetching the next item from the queue. Note that setting this to true may destroy the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* know what you're doing !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,protected boolean concurrent_processing = false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.channel = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,prot_adapter = new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.deadlock_detection = deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.concurrent_processing = concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.adapter = adapter;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.id = id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,PullPushHandler handler = new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Transport tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,transport_adapter = new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = ((Channel) tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private void setMembers(Vector new_mbrs) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,deadlock_detection = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,this.concurrent_processing = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (transport_adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,prot_adapter.resume();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,prot_adapter.pause();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,req_handler = rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} else if (adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (id != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param msg     The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                return the first response received. <li>GET_ALL: wait for all responses (minus the ones from
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                suspected members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"*                size) <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"*                responses (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*                (non-blocking) </ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,GroupRequest _req = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Channel tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,tmp = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,tmp = (Channel) adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (local_addr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,local_addr = tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (local_addr != null && real_dests != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isDebugEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param dests  The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*               requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param msg    The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,*               this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (local_addr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector mbrs = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,RspList rsp_list = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Object dest = msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Rsp rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (mode == GroupRequest.GET_NONE) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,rsp_list = _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (log.isWarnEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (rsp_list.size() > 1) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,rsp = (Rsp) rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (rsp.wasSuspected()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (!rsp.wasReceived()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (req_handler != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public String getName() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"return ""MessageDispatcher"";"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,byte[] tmp_state = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,switch (evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener.receive((Message) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,tmp_state = msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,msg_listener.setState((byte[]) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,evt.getArg() +
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,""" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,View v = (View) evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,Vector new_mbrs = v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (membership_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,membership_listener.suspect((Address) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private Thread m_upProcessingThread = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private EDU.oswego.cs.dl.util.concurrent.Channel m_upQueue = new LinkedQueue();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private ReentrantLatch m_upLatch = new ReentrantLatch(false);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private void startProcessingThreads() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upProcessingThread = new Thread(new Runnable() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void run() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,while (true) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,try {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upLatch.passThrough();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,handleUp((Event) m_upQueue.take());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} catch (InterruptedException ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,//this is ok.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,});
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"m_upProcessingThread.setName(""MessageDispatcher up processing thread"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upProcessingThread.setDaemon(true);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upProcessingThread.start();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public void pause() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upLatch.lock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,public synchronized void resume() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (m_upProcessingThread == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,startProcessingThreads();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upLatch.unlock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,m_upQueue.put(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,//this is ok
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,private void handleUp(Event evt) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (null != corr) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"} else if (log.isErrorEnabled()) { //Something is seriously wrong, correlator should not be null since latch is not locked!"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,"log.error(""correlator is null, but latch is not locked! Event ignored."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,} else if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,boolean pass_up = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,pass_up = corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,if (pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,added,0,return msg_listener != null ? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// $Id: MessageDispatcher.java,v 1.14 2004/04/26 18:40:12 belaban Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Channel             channel=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected RequestCorrelator   corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected MessageListener     msg_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected MembershipListener  membership_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected RequestHandler      req_handler=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected ProtocolAdapter     prot_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected TransportAdapter    transport_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Vector              members=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Address             local_addr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected boolean             deadlock_detection=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected PullPushAdapter     adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Serializable        id=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected Log log=LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,protected boolean             concurrent_processing=false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.channel=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,prot_adapter=new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.deadlock_detection=deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.concurrent_processing=concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.adapter=adapter; this.id=id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,PullPushHandler handler=new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Transport       tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,transport_adapter=new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,else
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=((Channel)tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,private void setMembers (Vector new_mbrs)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,deadlock_detection=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,this.concurrent_processing=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(transport_adapter != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,req_handler=rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(channel != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,else if(adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(id != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,catch(Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Uses <code>GroupRequest</code>.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,is sent to all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,@param msg The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_FIRST: return the first response received.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,</ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,<em>or</em> timeout time.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,GroupRequest  _req=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector        real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Channel       tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,tmp=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,tmp=(Channel)adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(local_addr == null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(local_addr != null && real_dests != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isDebugEnabled()) log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* request can be freed.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*               correlate responses with requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param msg The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,*             immediately if this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(local_addr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* The message's destination must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector        mbrs=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,RspList       rsp_list=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Object        dest=msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Rsp           rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(mode == GroupRequest.GET_NONE)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,rsp_list=_req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(rsp_list.size() > 1)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(rsp.wasSuspected())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(!rsp.wasReceived())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(req_handler != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,* message listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,byte[] tmp_state=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,switch(evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(msg_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener.receive((Message)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,tmp_state=msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,catch(Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,msg_listener.setState((byte[])evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,catch(ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,View    v=(View)evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,Vector  new_mbrs=v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(membership_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,membership_listener.suspect((Address)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(corr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.setLocalAddress(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,boolean pass_up=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,pass_up=corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,if(pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,61798402036f2c10e4f2520d6e8969e4f33408c1,deleted,1,return msg_listener != null? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// $Id: MessageDispatcher.java,v 1.15 2004/04/29 13:46:24 yaron-r Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,import org.jgroups.util.ReentrantLatch;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,import EDU.oswego.cs.dl.util.concurrent.LinkedQueue;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Used on top of channel to implement group requests. Client's <code>handle()</code> method is called when request is
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* received. Is the equivalent of RpcProtocol on the application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Channel channel = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected RequestCorrelator corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected MessageListener msg_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected MembershipListener membership_listener = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected RequestHandler req_handler = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected ProtocolAdapter prot_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected TransportAdapter transport_adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Vector members = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Address local_addr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected boolean deadlock_detection = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected PullPushAdapter adapter = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Serializable id = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected Log log = LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Process items on the queue concurrently (RequestCorrelator). The default is to wait until the processing of an
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* item has completed before fetching the next item from the queue. Note that setting this to true may destroy the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* properties of a protocol stack, e.g total or causal order may not be guaranteed. Set this to true only if you"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* know what you're doing !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,protected boolean concurrent_processing = false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.channel = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,prot_adapter = new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.deadlock_detection = deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.concurrent_processing = concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.adapter = adapter;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.id = id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,setMembers(((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,PullPushHandler handler = new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Transport tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,transport_adapter = new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"if (id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if ((tp = adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"((Channel) tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = ((Channel) tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = ((Channel) tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members from the adapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private void setMembers(Vector new_mbrs) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,for (int i = 0; i < new_mbrs.size(); i++) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,deadlock_detection = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,this.concurrent_processing = flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (transport_adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"corr = new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector tmp_mbrs = channel.getView() != null ? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,prot_adapter.resume();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,prot_adapter.pause();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener = l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,req_handler = rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} else if (adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (id != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* Cast a message to all members, and wait for <code>mode</code> responses. The responses are returned in a response"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* list, where each response is associated with its sender.<p> Uses <code>GroupRequest</code>."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* @param dests   The members to which the message is to be sent. If it is null, then the message is sent to all"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param msg     The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param mode    Defined in <code>GroupRequest</code>. The number of responses to wait for: <ol> <li>GET_FIRST:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                return the first response received. <li>GET_ALL: wait for all responses (minus the ones from
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                suspected members) <li>GET_MAJORITY: wait for a majority of all responses (relative to the grp
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"*                size) <li>GET_ABS_MAJORITY: wait for majority (absolute, computed once) <li>GET_N: wait for n"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"*                responses (may block if n > group size) <li>GET_NONE: wait for no responses, return immediately"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*                (non-blocking) </ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* @param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses <em>or</em> timeout time."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @return RspList A list of responses. Each response is an <code>Object</code> and associated to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,GroupRequest _req = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Channel tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,real_dests = dests != null ? (Vector) dests.clone() : (members != null ? (Vector) members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,tmp = channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (adapter != null && adapter.getTransport() instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,tmp = (Channel) adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (local_addr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,local_addr = tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (local_addr != null && real_dests != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isDebugEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"_req = new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Multicast a message request to all members in <code>dests</code> and receive responses via the RspCollector
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* interface. When done receiving the required number of responses, the caller has to call done(req_id) on the"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"* underlyinh RequestCorrelator, so that the resources allocated to that request can be freed."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param dests  The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to correlate responses with
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*               requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param msg    The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* @param coll   The sender needs to provide this interface to collect responses. Call will return immediately if
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,*               this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,real_dests = dests != null ? (Vector) dests.clone() : (Vector) members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (local_addr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Sends a message to a single member (destination = msg.dest) and returns the response. The message's destination
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector mbrs = new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,RspList rsp_list = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Object dest = msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Rsp rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"_req = new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (mode == GroupRequest.GET_NONE) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,rsp_list = _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (log.isWarnEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (rsp_list.size() > 1) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,rsp = (Rsp) rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (rsp.wasSuspected()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (!rsp.wasReceived()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (req_handler != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public String getName() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"return ""MessageDispatcher"";"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Called by request correlator when message was not generated by it. We handle it and call the message
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,byte[] tmp_state = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,switch (evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener.receive((Message) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,tmp_state = msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,msg_listener.setState((byte[]) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,evt.getArg() +
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,""" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,View v = (View) evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,Vector new_mbrs = v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (membership_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,membership_listener.suspect((Address) evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private Thread m_upProcessingThread = null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private EDU.oswego.cs.dl.util.concurrent.Channel m_upQueue = new LinkedQueue();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private ReentrantLatch m_upLatch = new ReentrantLatch(false);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private void startProcessingThreads() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upProcessingThread = new Thread(new Runnable() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void run() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,while (true) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,try {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upLatch.passThrough();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,handleUp((Event) m_upQueue.take());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} catch (InterruptedException ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,//this is ok.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,});
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"m_upProcessingThread.setName(""MessageDispatcher up processing thread"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upProcessingThread.setDaemon(true);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upProcessingThread.start();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public void pause() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upLatch.lock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,public synchronized void resume() {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (m_upProcessingThread == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,startProcessingThreads();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upLatch.unlock();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,* Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,m_upQueue.put(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,//this is ok
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,private void handleUp(Event evt) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (null != corr) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"} else if (log.isErrorEnabled()) { //Something is seriously wrong, correlator should not be null since latch is not locked!"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,"log.error(""correlator is null, but latch is not locked! Event ignored."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,} else if (log.isErrorEnabled()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,boolean pass_up = true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,pass_up = corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,if (pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,added,0,return msg_listener != null ? msg_listener.getState() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// $Id: MessageDispatcher.java,v 1.14 2004/04/26 18:40:12 belaban Exp $"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Used on top of channel to implement group requests. Client's <code>handle()</code>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* method is called when request is received. Is the equivalent of RpcProtocol on the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* application instead of protocol level.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Channel             channel=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected RequestCorrelator   corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected MessageListener     msg_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected MembershipListener  membership_listener=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected RequestHandler      req_handler=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected ProtocolAdapter     prot_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected TransportAdapter    transport_adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Vector              members=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Address             local_addr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected boolean             deadlock_detection=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected PullPushAdapter     adapter=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Serializable        id=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected Log log=LogFactory.getLog(getClass());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/** Process items on the queue concurrently (RequestCorrelator). The default is to wait until the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* processing of an item has completed before fetching the next item from the queue. Note that setting
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* this to true may destroy the properties of a protocol stack, e.g total or causal order may not be"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* guaranteed. Set this to true only if you know what you're doing ! */
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,protected boolean             concurrent_processing=false;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.channel=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,prot_adapter=new ProtocolAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(channel != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=channel.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.deadlock_detection=deadlock_detection;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.concurrent_processing=concurrent_processing;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.adapter=adapter; this.id=id;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,setMembers (((Channel) adapter.getTransport()).getView().getMembers());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,PullPushHandler handler=new PullPushHandler();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Transport       tp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,transport_adapter=new TransportAdapter();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(id == null) // no other building block around, let's become the main consumer of this PullPushAdapter"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,else
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if((tp=adapter.getTransport()) instanceof Channel) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"((Channel)tp).setOpt(Channel.GET_STATE_EVENTS, Boolean.TRUE);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=((Channel)tp).getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=((Channel)tp).getLocalAddress(); // fixed bug #800774
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* If this dispatcher is using a user-provided PullPushAdapter, then need to set the members"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* from the adapter initially since viewChange has most likely already been called in PullPushAdapter.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,private void setMembers (Vector new_mbrs)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,{
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(new_mbrs != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,for(int i=0; i < new_mbrs.size(); i++)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,deadlock_detection=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,this.concurrent_processing=flag;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(corr == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(transport_adapter != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", transport_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"this, deadlock_detection, local_addr, concurrent_processing);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,else {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"corr=new RequestCorrelator(""MessageDispatcher"", prot_adapter,"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector tmp_mbrs=channel.getView() != null? channel.getView().getMembers() : null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(corr != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener=l;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,req_handler=rh;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(channel != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,else if(adapter != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(id != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,catch(Throwable ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""exception="" + Util.print(ex));"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""channel == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/**
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"Cast a message to all members, and wait for <code>mode</code> responses. The responses are"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"returned in a response list, where each response is associated with its sender.<p>"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Uses <code>GroupRequest</code>.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"@param dests The members to which the message is to be sent. If it is null, then the message"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,is sent to all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,@param msg The message to be sent to n members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,@param mode Defined in <code>GroupRequest</code>. The number of responses to wait for:
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_FIRST: return the first response received.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_ALL: wait for all responses (minus the ones from suspected members)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_MAJORITY: wait for a majority of all responses (relative to the grp size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"<li>GET_ABS_MAJORITY: wait for majority (absolute, computed once)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<li>GET_N: wait for n responses (may block if n > group size)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"<li>GET_NONE: wait for no responses, return immediately (non-blocking)"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,</ol>
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"@param timeout If 0: wait forever. Otherwise, wait for <code>mode</code> responses"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,<em>or</em> timeout time.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,@return RspList A list of responses. Each response is an <code>Object</code> and associated
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,to its sender.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*/
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public RspList castMessage(final Vector dests, Message msg, int mode, long timeout) {"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,GroupRequest  _req=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector        real_dests;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Channel       tmp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// we need to clone because we don't want to modify the original
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// (we remove ourselves if LOCAL is false, see below) !"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (members != null? (Vector)members.clone() : null);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"// if local delivery is off, then we should not wait for the message from the local member."
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// therefore remove it from the membership
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,tmp=channel;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(tmp == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(adapter != null && adapter.getTransport() instanceof Channel)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,tmp=(Channel)adapter.getTransport();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,}
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(tmp != null && tmp.getOpt(Channel.LOCAL).equals(Boolean.FALSE)) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(local_addr == null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=tmp.getLocalAddress();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(local_addr != null && real_dests != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,real_dests.removeElement(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,// don't even send the message if the destination list is empty
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isDebugEnabled()) log.debug(""real_dests="" + real_dests);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(real_dests == null || real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isDebugEnabled()) log.debug(""destination list is empty, won't send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return new RspList(); // return empty response list
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"_req=new GroupRequest(msg, corr, real_dests, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,_req.execute();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return _req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Multicast a message request to all members in <code>dests</code> and receive responses
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* via the RspCollector interface. When done receiving the required number of responses, the caller"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"* has to call done(req_id) on the underlyinh RequestCorrelator, so that the resources allocated to that"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* request can be freed.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param dests The list of members from which to receive responses. Null means all members
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param req_id The ID of the request. Used by the underlying RequestCorrelator to
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*               correlate responses with requests
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param msg The request to be sent
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* @param coll The sender needs to provide this interface to collect responses. Call will return
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,*             immediately if this is null
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(msg == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""request is null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(coll == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""response collector is null (must be non-null)"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,real_dests=dests != null ? (Vector)dests.clone() : (Vector)members.clone();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(local_addr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(real_dests.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Sends a message to a single member (destination = msg.dest) and returns the response.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* The message's destination must be non-zero !
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector        mbrs=new Vector();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,RspList       rsp_list=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Object        dest=msg.getDest();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Rsp           rsp;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(dest == null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""the message's destination is null, "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"""cannot send message"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,mbrs.addElement(dest);   // dummy membership (of destination address)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"_req=new GroupRequest(msg, corr, mbrs, mode, timeout, 0);"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(mode == GroupRequest.GET_NONE)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,rsp_list=_req.getResults();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(rsp_list.size() == 0) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isWarnEnabled()) log.warn("" response list is empty"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(rsp_list.size() > 1)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isWarnEnabled()) log.warn(""response list contains "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"""more that 1 response; returning first response !"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,rsp=(Rsp)rsp_list.elementAt(0);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(rsp.wasSuspected())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(!rsp.wasReceived())
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(req_handler != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"public String getName() {return ""MessageDispatcher"";}"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* Called by request correlator when message was not generated by it. We handle it and call the
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,* message listener's corresponding methods
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,byte[] tmp_state=null;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,switch(evt.getType()) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(msg_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener.receive((Message)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(msg_listener != null) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,tmp_state=msg_listener.getState();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,catch(Throwable t) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,msg_listener.setState((byte[])evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,catch(ClassCastException cast_ex) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""received SetStateEvent, but argument "" +"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"evt.getArg() + "" is not serializable. Discarding message."");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,View    v=(View)evt.getArg();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,Vector  new_mbrs=v.getMembers();
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(membership_listener != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,membership_listener.suspect((Address)evt.getArg());
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,/** Called by channel (we registered before) when event is received. This is the UpHandler interface.
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(evt.getType() == Event.SET_LOCAL_ADDRESS) {
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,local_addr=(Address)evt.getArg(); // suggested by Yaron Rosenbaum
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(corr != null)
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.setLocalAddress(local_addr);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,corr.receive(evt);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,"if(log.isErrorEnabled()) log.error(""corr == null"");"
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,boolean pass_up=true;
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,pass_up=corr.receiveMessage(msg);
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,if(pass_up) {   // pass on to MessageListener
146a9f744cbe901c4fe56f6ceb2100ee15e7e898,33c41c1ea48b5c509a320ae5ba9fda395b9d56a3,deleted,1,return msg_listener != null? msg_listener.getState() : null;
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,"* @version $Id: JChannel.java,v 1.168 2008/01/30 05:18:38 vlada Exp $"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,"stopStack(true, false);"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,init();
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,//if FLUSH is used do not return from connect() until UNBLOCK event is received
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(flush_supported) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,}
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,//invoke receiver if block receiving is on
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(receive_blocks && receiver instanceof ExtendedReceiver) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,//flip promise
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,flush_unblock_promise.setResult(Boolean.TRUE);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,return null;
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(close_mq)
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,closeMessageQueue(false);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,"stopStack(true, true);"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,"protected void stopStack(boolean disconnect, boolean destroy) {"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(prot_stack != null){
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,try{
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(disconnect)
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,prot_stack.stopStack(cluster_name);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(destroy)
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,prot_stack.destroy();
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,}catch(Exception e){
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(log.isErrorEnabled())
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,"log.error(""failed destroying the protocol stack"", e);"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,//do not return until UNBLOCK event is received
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,flush_unblock_promise.getResultWithTimeout(FLUSH_UNBLOCK_TIMEOUT);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,}catch(TimeoutException te){
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,"log.warn(""Timeout waiting for UNBLOCK event at "" + getLocalAddress());"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,if(!flush_supported){
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,added,0,// do not return until UNBLOCK event is received
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,"* @version $Id: JChannel.java,v 1.167 2008/01/25 11:57:35 belaban Exp $"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//if FLUSH is used do not return from connect() until UNBLOCK event is received
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,boolean singletonMember=my_view != null && my_view.size() == 1;
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,boolean shouldWaitForUnblock=flush_supported && receive_blocks && !singletonMember && !flush_unblock_promise.hasResult();
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(shouldWaitForUnblock) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,try {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,"prot_stack.stopStack(cluster_name); // calls stop() in all protocols, from top to bottom"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,}
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,catch(Exception e) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,"if(log.isErrorEnabled()) log.error(""exception: "" + e);"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,"//Vladimir Oct 29,2007 JChannel.java 1.156"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//STREAMING_STATE_TRANSFER does not require return value.
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//If there is not return value STATE_TRANSFER_OUTPUTSTREAM event
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//can be processed concurrently by Multiplexer along with other messages
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//for a specific MuxChannel
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//@see Multiplexer#passToMuxChannel();
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//discard if client has not set 'receiving blocks' to 'on'
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(!receive_blocks) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,return null;
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(receiver instanceof ExtendedReceiver) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,flush_unblock_promise.setResult(Boolean.TRUE);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,break;
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(close_mq) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(mq != null)
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,mq.close(false);              // closes and removes all messages
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(prot_stack != null) {
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,prot_stack.stopStack(cluster_name);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,prot_stack.destroy();
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,"if(log.isErrorEnabled()) log.error(""failed destroying the protocol stack"", e);"
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,//do not return until UNBLOCK event is received
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,boolean shouldWaitForUnblock = receive_blocks;
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(shouldWaitForUnblock){
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,try{
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,flush_unblock_promise.getResultWithTimeout(FLUSH_UNBLOCK_TIMEOUT);
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,catch (TimeoutException te){
ca14fa6dd99fac922bc9e5506986485b74d1076f,d04957691657e44bfb20206e3b2e1a98d802abea,deleted,1,if(!flush_supported) {
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,added,0,"* @version $Id: FlushTest.java,v 1.90 2009/10/14 15:44:00 vlada Exp $"
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,added,0,// send out START_FLUSH but call Util.shutdown(Channel) right after
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,added,0,//failure detection will kick in in a few seconds and remove C2
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,added,0,//C3 should call STOP_FLUSH
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,added,0,c2.downcall(new Event(Event.SUSPEND_BUT_FAIL));
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,deleted,1,"* @version $Id: FlushTest.java,v 1.89 2009/10/14 13:01:09 belaban Exp $"
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,deleted,1,Util.shutdown(c2); // kill the flush coord: failure detection will kick in in a few seconds and remove C2
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,0644438c7e3cc79f3e94f7646faf5e9f58f917a3,deleted,1,Util.startFlush(c2);
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"* @version $Id: FlushTest.java,v 1.90 2009/10/14 15:44:00 vlada Exp $"
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,// send out START_FLUSH but call Util.shutdown(Channel) right after
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,//failure detection will kick in in a few seconds and remove C2
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,//C3 should call STOP_FLUSH
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,c2.downcall(new Event(Event.SUSPEND_BUT_FAIL));
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"* @version $Id: FlushTest.java,v 1.89 2009/10/14 13:01:09 belaban Exp $"
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,Util.shutdown(c2); // kill the flush coord: failure detection will kick in in a few seconds and remove C2
5d56b01afdb9ae616864de9ffb4b1fbf0cb86917,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,Util.startFlush(c2);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"private static final FlushStartResult SUCCESS_START_FLUSH = new FlushStartResult(Boolean.TRUE,null);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,private final Promise<FlushStartResult> flush_promise = new Promise<FlushStartResult>();
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,public void startFlush() {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,startFlush(new Event(Event.SUSPEND));
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,private void startFlush(Event evt) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,startFlush(flushParticipants);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,private void startFlush(List<Address> flushParticipants) throws RuntimeException {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,FlushStartResult r = flush_promise.getResultWithTimeout(start_flush_timeout);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,if(r.failed())
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,throw new RuntimeException(r.getFailureCause());
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,throw new RuntimeException(localAddress
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"+ "" timed out waiting for flush responses after """
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,+ start_flush_timeout
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"+ "" ms. Rejected flush to participants """
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"+ flushParticipants,e);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,else {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"throw new RuntimeException(""Flush attempt is in progress"");"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,}
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,startFlush(evt);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,break;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"flush_promise.setResult(new FlushStartResult(Boolean.TRUE,null));"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"flush_promise.setResult(new FlushStartResult(Boolean.FALSE, new Exception(""Flush failed for "" + msg.getSrc())));"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,flush_promise.setResult(SUCCESS_START_FLUSH);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,private static class FlushStartResult {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,private final Boolean result;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,private final Exception failureCause;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"public FlushStartResult(Boolean result, Exception failureCause) {"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,this.result = result;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,this.failureCause = failureCause;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,public Boolean getResult() {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,return result;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,public boolean failed(){
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,return result == Boolean.FALSE;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,public Exception getFailureCause() {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,return failureCause;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,private final Promise<Boolean> flush_promise = new Promise<Boolean>();
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,public boolean startFlush() {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,return startFlush(new Event(Event.SUSPEND));
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,private boolean startFlush(Event evt) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,return startFlush(flushParticipants);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,private boolean startFlush(List<Address> flushParticipants) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,boolean successfulFlush = false;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,Boolean r = flush_promise.getResultWithTimeout(start_flush_timeout);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,successfulFlush = r.booleanValue();
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,if (log.isDebugEnabled())
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,log.debug(localAddress
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"+ "": timed out waiting for flush responses after """
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,+ start_flush_timeout
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"+ "" ms. Rejecting flush to participants """
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,+ flushParticipants);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,return successfulFlush;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,return startFlush(evt);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,flush_promise.setResult(Boolean.TRUE);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,flush_promise.setResult(Boolean.FALSE);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,boolean successfulFlush=false;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,while (attemptCount < maxAttempts) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,try {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"up_prot.up(new Event(Event.SUSPEND, new ArrayList<Address>(new_view.getMembers())));"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,successfulFlush = true;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,} catch (Exception e) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"Util.sleepRandom(randomFloor, randomCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,attemptCount++;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,}
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,boolean successfulFlush=true;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,while(attemptCount < maxAttempts){
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"successfulFlush=(Boolean)up_prot.up(new Event(Event.SUSPEND, new ArrayList<Address>(new_view.getMembers())));"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,if(successfulFlush)
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"Util.sleepRandom(randomFloor,randomCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,attemptCount++;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,"public static boolean startFlush(Channel c, List<Address> flushParticipants,"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,"int numberOfAttempts, long randomSleepTimeoutFloor, long randomSleepTimeoutCeiling) {"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,int attemptCount = 0;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,while (attemptCount < numberOfAttempts) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,try {
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,"c.startFlush(flushParticipants, false);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,return true;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,} catch (Exception e) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,"Util.sleepRandom(randomSleepTimeoutFloor, randomSleepTimeoutCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,attemptCount++;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,}
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,return false;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,try{
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,c.startFlush(false);
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,} catch(Exception e) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,added,0,"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,"public static boolean startFlush(Channel c, List<Address> flushParticipants, int numberOfAttempts,  long randomSleepTimeoutFloor,long randomSleepTimeoutCeiling) {"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,boolean successfulFlush = false;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,int attemptCount = 0;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,while(attemptCount < numberOfAttempts){
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,"successfulFlush = c.startFlush(flushParticipants, false);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,if(successfulFlush)
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,break;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,attemptCount++;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,}
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,return successfulFlush;
c1c1251f5c52164e4b2a470272a755cf29775e8e,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,deleted,1,successfulFlush = c.startFlush(false);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"public static boolean startFlush(Channel c, List<Address> flushParticipants,"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"int numberOfAttempts, long randomSleepTimeoutFloor, long randomSleepTimeoutCeiling) {"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,int attemptCount = 0;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,while (attemptCount < numberOfAttempts) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,try {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"c.startFlush(flushParticipants, false);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,return true;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,} catch (Exception e) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"Util.sleepRandom(randomSleepTimeoutFloor, randomSleepTimeoutCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,attemptCount++;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,}
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,return false;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,try{
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,c.startFlush(false);
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,} catch(Exception e) {
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,added,0,"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"public static boolean startFlush(Channel c, List<Address> flushParticipants, int numberOfAttempts,  long randomSleepTimeoutFloor,long randomSleepTimeoutCeiling) {"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,boolean successfulFlush = false;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,int attemptCount = 0;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,while(attemptCount < numberOfAttempts){
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"successfulFlush = c.startFlush(flushParticipants, false);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,if(successfulFlush)
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,break;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);"
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,attemptCount++;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,}
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,return successfulFlush;
c1c1251f5c52164e4b2a470272a755cf29775e8e,f9841f57c53e3217d008226f3c0df3c3db92e45d,deleted,1,successfulFlush = c.startFlush(false);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,package org.jgroups.protocols;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.*;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.annotations.MBean;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.annotations.Property;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.stack.Protocol;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.util.AsciiString;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.util.Buffer;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.util.MessageBatch;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import org.jgroups.util.Util;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import javax.crypto.Cipher;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import javax.crypto.KeyGenerator;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import javax.crypto.SecretKey;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import javax.crypto.spec.SecretKeySpec;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.io.*;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.security.*;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.security.cert.CertificateException;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.security.spec.X509EncodedKeySpec;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.*;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.concurrent.BlockingQueue;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.concurrent.LinkedBlockingQueue;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.concurrent.TimeUnit;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.concurrent.atomic.AtomicInteger;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.concurrent.locks.Lock;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.concurrent.locks.ReentrantLock;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,import java.util.function.BiFunction;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,/**
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* ENCRYPT layer. Encrypt and decrypt communication in JGroups
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,*
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* This class can be used in two ways:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <ul>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <li> Option 1. Configured with a secretKey in a keystore so it can be used at
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* any layer in JGroups without the need for a coordinator, or if you want"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* protection against passive monitoring but do not want the key exchange
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* overhead and complexity. In this mode all nodes must be distributed with the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* same keystore file.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <li> Option 2. Configured with algorithms and key sizes. The ENCRYPT layer in
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* this mode sould be placed above the GMS protocol in the configuration. The
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* coordinator then chooses the secretkey which it distributes amongst all the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* peers. In this form, no keystore exists as the keys are distributed using a"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* public/private key exchange. View changes that identify a new controller will
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* result in a new session key being generated and then distributed to all
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* peers. This overhead can be substantial in a an application with a reasonable
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* peer churn.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* </ul>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <p>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Each message is identified as encrypted with a specific encryption header
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* which identifies the type of encrypt header and an MD5 digest that identifies
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* the version of the key being used to encrypt/decrypt the messages.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <h2>Option 1</h2>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <br>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* This is the simplest option and can be used by simply inserting the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Encryption layer at any point in the JGroups stack - it will encrypt all
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Events of a type MSG that have a non-null message buffer. The format of the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* entry in this form is:<br>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* &lt;ENCRYPT key_store_name=""defaultStore.keystore"" store_password=""changeit"""
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* alias=""myKey""/&gt;<br>"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* An example showing the keystore version can be found in
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* the conf in a file called EncryptKeyStore.xml - along with a
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* defaultStore.keystore file.<br>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* In order to use the ENCRYPT layer in this manner, it is necessary to have the"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* secretKey already generated in a keystore file. The directory containing the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* keystore file must be on the application's classpath. You cannot create a
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* SecretKey keystore file using the keytool application shipped with the JDK. A
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* java file called KeyStoreGenerator is included in the demo package that can
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* be used from the command line (or IDE) to generate a suitable keystore.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* <h2>Option 2</h2>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* This option is suited to an application that does not ship with a known key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* but instead it is generated and distributed by the controller. The secret key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* is first generated by the controller (in JGroups terms). When a view change
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* occurs, a peer will request the secret key by sending a key request with its"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* own public key. The controller encrypts the secret key with this key and
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* sends it back to the peer who then decrypts it and installs the key as its
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* own secret key. <br>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* All encryption and decryption of messages is done using this key. When a peer
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* receives a view change that shows a different keyserver, it will repeat this"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* process - the view change event also trigger the ENCRYPT layer to queue up
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* and down messages until the new key is installed. The previous keys are
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* retained so that messages sent before the view change that are queued can be
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* decrypted if the key is different. <br>
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* An example EncryptNoKeyStore.xml is included in the conf file as a guide.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Note: the current version does not support the concept of perfect forward
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* encryption (PFE) which means that if a peer leaves the group the keys are
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* re-generated preventing the departed peer from decrypting future messages if
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* it chooses to listen in on the group. This is not included as it really
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* requires a suitable authentication scheme as well to make this feature useful
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* as there is nothing to stop the peer rejoining and receiving the new key. A
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* future release will address this issue.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @author Steve Woodcock
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @author Bela Ban
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,*/
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@MBean(description=""Protocol which encrypts and decrypts cluster traffic"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public class ENCRYPT extends Protocol {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private static final String DEFAULT_SYM_ALGO=""AES"";"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Address local_addr;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Address keyServerAddr;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,boolean keyServer=false; //used to see whether we are the key server
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,/* -----------------------------------------    Properties     -------------------------------------------------- */
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// encryption properties in no supplied key mode
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""asym_provider"", description=""Cryptographic Service Provider. Default is Bouncy Castle Provider"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,String asymProvider=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""sym_provider"", description=""Cryptographic Service Provider. Default is Bouncy Castle Provider"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,String symProvider=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""asym_algorithm"", description=""Cipher engine transformation for asymmetric algorithm. Default is RSA"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected String asymAlgorithm=""RSA"";"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""sym_algorithm"", description=""Cipher engine transformation for symmetric algorithm. Default is AES"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,String symAlgorithm=DEFAULT_SYM_ALGO;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""asym_init"", description=""Initial public/private key length. Default is 512"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int asymInit=512;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""sym_init"", description=""Initial key length for matching symmetric algorithm. Default is 128"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int symInit=128;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""change_keys"", description=""Generate new symmetric keys on every view change. Default is false. "" +"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"""Set this to true when using asymmetric encryption, to handle merging (JGRP-1907)"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,boolean changeKeysOnViewChange=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// properties for functioning in supplied key mode
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private boolean suppliedKey=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""key_store_name"", description=""File on classpath that contains keystore repository"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,String keyStoreName;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""store_password"","
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"description=""Password used to check the integrity/unlock the keystore. Change the default"","
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,exposeAsManagedAttribute=false)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected String storePassword=""changeit""; //JDK default"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""key_password"", description=""Password for recovering the key. Change the default"","
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private String keyPassword=null; // allows to assign keypwd=storepwd if not set (https://issues.jboss.org/browse/JGRP-1375)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(name=""alias"", description=""Alias used for recovering the key. Change the default"",exposeAsManagedAttribute=false)"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected String alias=""mykey""; // JDK default"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@Property(description=""Number of ciphers in the pool to parallelize encrypt and decrypt requests"",writable=false)"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected int cipher_pool_size=8;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// public/private Key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,KeyPair Kpair; // to store own's public/private Key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,//	 for client to store server's public Key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// PublicKey serverPubKey;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// Cipher pools used for encryption and decryption. Size is cipher_pool_size
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected Cipher[] encoding_ciphers, decoding_ciphers;"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// Locks to synchronize access to the cipher pools
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected Lock[] encoding_locks, decoding_locks;"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected final AtomicInteger cipher_index=new AtomicInteger(0); // the cipher and lock to select
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// version filed for secret key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected byte[] symVersion;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// dhared secret key to encrypt/decrypt messages
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected SecretKey secretKey;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// map to hold previous keys so we can decrypt some earlier messages if we need to
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"final Map<AsciiString,Cipher> keyMap=new WeakHashMap<>();"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// queues to buffer data while we are swapping shared key or obtaining key for first time
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private boolean queue_up=true;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private boolean queue_down=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// queue to hold upcoming messages while key negotiation is happening
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private final BlockingQueue<Message> upMessageQueue=new LinkedBlockingQueue<>();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,//	 queue to hold downcoming messages while key negotiation is happening
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private final BlockingQueue<Message> downMessageQueue=new LinkedBlockingQueue<>();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// decrypting cypher for secret key requests
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private Cipher asymCipher;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"/** determines whether to encrypt the entire message, or just the buffer */"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,@Property
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected boolean encrypt_entire_message=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected int getNextIndex() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"// same as mod, but (apparently, I'm told) more efficient. Size needs to be a power ot 2"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int current_index=cipher_index.getAndIncrement();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return current_index & (cipher_pool_size-1);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public int       getAsymInit()          {return asymInit;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public SecretKey getDesKey()            {return secretKey;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public KeyPair   getKpair()             {return Kpair;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public Cipher    getAsymCipher()        {return asymCipher;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public String    getSymAlgorithm()      {return symAlgorithm;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public int       getSymInit()           {return symInit;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public String    getAsymAlgorithm()     {return asymAlgorithm;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public byte[]    getSymVersion()        {return symVersion;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public SecretKey getSecretKey()         {return secretKey;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public Cipher    getSymDecodingCipher() {return decoding_ciphers[getNextIndex()];}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public Cipher    getSymEncodingCipher() {return encoding_ciphers[getNextIndex()];}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public Address   getKeyServerAddr()     {return keyServerAddr;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private void     setSymVersion(byte[] symVersion)        {this.symVersion=Arrays.copyOf(symVersion, symVersion.length);}"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void     setSecretKey(SecretKey secretKey)       {this.secretKey=secretKey;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected void   setLocalAddress(Address local_addr)     {this.local_addr=local_addr;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected void   setKeyServerAddr(Address keyServerAddr) {this.keyServerAddr=keyServerAddr;}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,/*
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"* GetAlgorithm: Get the algorithm name from ""algorithm/mode/padding"""
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,*  taken m original ENCRYPT file
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private static String getAlgorithm(String s) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int index=s.indexOf('/');
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(index == -1)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return s;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return s.substring(0, index);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public void init() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(keyPassword == null && storePassword != null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyPassword=storePassword;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""key_password used is same as store_password"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(keyStoreName == null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,initSymKey();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,initKeyPair();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,else
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,initConfiguredKey();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(cipher_pool_size <= 0) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""cipher_pool_size of %d is invalid; setting it to 1"", cipher_pool_size);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,cipher_pool_size=1;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int tmp=Util.getNextHigherPowerOfTwo(cipher_pool_size);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(tmp != cipher_pool_size) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""setting cipher_pool_size (%d) to %d (power of 2) for faster modulo operation"", cipher_pool_size, tmp);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,cipher_pool_size=tmp;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,encoding_ciphers=new Cipher[cipher_pool_size];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,encoding_locks=new Lock[cipher_pool_size];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,decoding_ciphers=new Cipher[cipher_pool_size];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,decoding_locks=new Lock[cipher_pool_size];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"initSymCiphers(symAlgorithm, getSecretKey());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Initialisation if a supplied key is defined in the properties. This
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* supplied key must be in a keystore which can be generated using the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* keystoreGenerator file in demos. The keystore must be on the classpath to
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* find it.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @throws KeyStoreException
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @throws Exception
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @throws IOException
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @throws NoSuchAlgorithmException
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @throws CertificateException
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @throws UnrecoverableKeyException
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void initConfiguredKey() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,InputStream inputStream=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// must not use default keystore type - as does not support secret keys
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"KeyStore store=KeyStore.getInstance(""JCEKS"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,SecretKey tempKey=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,try {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// load in keystore using this thread's classloader
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,inputStream=Thread.currentThread()
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,.getContextClassLoader()
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,.getResourceAsStream(keyStoreName);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(inputStream == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,inputStream=new FileInputStream(keyStoreName);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// we can't find a keystore here -
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(inputStream == null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"throw new Exception(""Unable to load keystore "" + keyStoreName"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"+ "" ensure file is on classpath"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// we have located a file lets load the keystore
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"store.load(inputStream, storePassword.toCharArray());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// loaded keystore - get the key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"tempKey=(SecretKey)store.getKey(alias, keyPassword.toCharArray());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,catch(IOException e) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"throw new Exception(""Unable to load keystore "" + keyStoreName + "": "" + e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,catch(NoSuchAlgorithmException e) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"throw new Exception(""No Such algorithm "" + keyStoreName + "": "" + e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,catch(CertificateException e) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"throw new Exception(""Certificate exception "" + keyStoreName + "": "" + e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(tempKey == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"throw new Exception(""Unable to retrieve key '"" + alias + ""' from keystore "" + keyStoreName);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,//set the key here
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,setSecretKey(tempKey);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(symAlgorithm.equals(DEFAULT_SYM_ALGO))
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,symAlgorithm=tempKey.getAlgorithm();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// set the fact we are using a supplied key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,suppliedKey=true;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,queue_down=queue_up=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,finally {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Util.close(inputStream);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Used to initialise the symmetric key if none is supplied in a keystore.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public void initSymKey() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,KeyGenerator keyGen=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// see if we have a provider specified
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(symProvider != null && !symProvider.trim().isEmpty())
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"keyGen=KeyGenerator.getInstance(getAlgorithm(symAlgorithm), symProvider);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyGen=KeyGenerator.getInstance(getAlgorithm(symAlgorithm));
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// generate the key using the defined init properties
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyGen.init(symInit);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,secretKey=keyGen.generateKey();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,setSecretKey(secretKey);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""symmetric key generated "");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Initialises the Ciphers for both encryption and decryption using the
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* generated or supplied secret key.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param algorithm
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param secret
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private void initSymCiphers(String algorithm, SecretKey secret) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""initializing symmetric ciphers (pool size=%d)"",cipher_pool_size);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,for(int i=0; i < cipher_pool_size; i++) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,encoding_ciphers[i]=symProvider != null && !symProvider.trim().isEmpty()?
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Cipher.getInstance(algorithm, symProvider) : Cipher.getInstance(algorithm);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"encoding_ciphers[i].init(Cipher.ENCRYPT_MODE, secret);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,decoding_ciphers[i]=symProvider != null && !symProvider.trim().isEmpty()?
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"decoding_ciphers[i].init(Cipher.DECRYPT_MODE, secret);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,encoding_locks[i]=new ReentrantLock();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,decoding_locks[i]=new ReentrantLock();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,//set the version
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"MessageDigest digest=MessageDigest.getInstance(""MD5"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,digest.reset();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,digest.update(secret.getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,byte[] tmp=digest.digest();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"symVersion=Arrays.copyOf(tmp, tmp.length);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// symVersion = byteArrayToHexString(digest.digest());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""initialized symmetric ciphers with secret key ("" + symVersion.length + "" bytes)"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,/* public static String byteArrayToHexString(byte[] b){
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,StringBuilder sb = new StringBuilder(b.length * 2);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,for (int i = 0; i < b.length; i++){
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int v = b[i] & 0xff;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if (v < 16) { sb.append('0'); }
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,sb.append(Integer.toHexString(v));
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return sb.toString().toUpperCase();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,}*/
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Generates the public/private key pair from the init params
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public void initKeyPair() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// generate keys according to the specified algorithms
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// generate publicKey and Private Key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,KeyPairGenerator KpairGen=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(asymProvider != null && !asymProvider.trim().isEmpty())
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"KpairGen=KeyPairGenerator.getInstance(getAlgorithm(asymAlgorithm), asymProvider);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,KpairGen=KeyPairGenerator.getInstance(getAlgorithm(asymAlgorithm));
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"KpairGen.initialize(asymInit,new SecureRandom());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Kpair=KpairGen.generateKeyPair();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// set up the Cipher to decrypt secret key responses encrypted with our key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"asymCipher=Cipher.getInstance(asymAlgorithm, asymProvider);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,asymCipher=Cipher.getInstance(asymAlgorithm);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"asymCipher.init(Cipher.DECRYPT_MODE,Kpair.getPrivate());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""asym algo initialized"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public Object up(Event evt) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,switch(evt.getType()) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case Event.VIEW_CHANGE:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,View view=(View)evt.getArg();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""new view: "" + view);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(!suppliedKey)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"handleViewChange(view, false);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,break;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case Event.TMP_VIEW:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,view=(View)evt.getArg();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"handleViewChange(view, true);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// we try and decrypt all messages
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case Event.MSG:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return handleUpMessage(evt);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,catch(Exception e) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""exception occurred decrypting message"", e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return up_prot.up(evt);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public void up(MessageBatch batch) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Decrypter decrypter=new Decrypter();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,batch.map(decrypter);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,decrypter.unlock();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(!batch.isEmpty())
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,up_prot.up(batch);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private synchronized void handleViewChange(View view, boolean makeServer) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(makeServer)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,initializeNewSymmetricKey(view instanceof MergeView);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// if view is a bit broken set me as keyserver
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,List<Address> members = view.getMembers();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if (members == null || members.isEmpty() || members.get(0) == null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"becomeKeyServer(local_addr, false);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// otherwise get keyserver from view controller
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Address tmpKeyServer=view.getMembers().get(0);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,//I am  keyserver - either first member of group or old key server is no more and
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// I have been voted new controller
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(makeServer || (tmpKeyServer.equals(local_addr)))
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"becomeKeyServer(tmpKeyServer, makeServer);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"handleNewKeyServer(tmpKeyServer, view instanceof MergeView);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void initializeNewSymmetricKey(boolean merge_view) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if ( changeKeysOnViewChange || !keyServer || merge_view) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""initalizing new ciphers"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"initSymCiphers(getSymAlgorithm(), getSecretKey());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,} catch (Exception e) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.error(Util.getMessage(""CouldNotInitializeNewCiphers""), e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if ( e instanceof RuntimeException) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,throw (RuntimeException)e;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,} else {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,throw new IllegalStateException(e);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Handles becoming server - resetting queue settings and setting keyserver
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* address to be local address.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param tmpKeyServer
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private void becomeKeyServer(Address tmpKeyServer, boolean forced) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyServerAddr=tmpKeyServer;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyServer=true;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(log.isDebugEnabled() && !forced)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""%s: I have become the new key server"", local_addr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,queue_down=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,queue_up=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Sets up the peer for a new keyserver - this is setting queueing to buffer
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* messages until we have a new secret key from the key server and sending a
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* key request to the new keyserver.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param newKeyServer
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private void handleNewKeyServer(Address newKeyServer, boolean merge_view) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if ( changeKeysOnViewChange || keyServerChanged(newKeyServer) || merge_view) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// start queueing until we have new key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// to make sure we are not sending with old key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,queue_up=true;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,queue_down=true;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// set new keyserver address
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyServerAddr=newKeyServer;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""%s: %s has become the new key server, sending key request to it"", local_addr, keyServerAddr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,sendKeyRequest();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private boolean keyServerChanged(Address newKeyServer) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return !Objects.equals(keyServerAddr, newKeyServer);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private Object handleUpMessage(Event evt) throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Message msg=(Message)evt.getArg();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,EncryptHeader hdr;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(msg == null || (msg.getLength() == 0 && !encrypt_entire_message) || ((hdr=(EncryptHeader)msg.getHeader(this.id)) == null))
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(log.isTraceEnabled())
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""header received %s"", hdr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,switch(hdr.getType()) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case EncryptHeader.ENCRYPT:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return handleEncryptedMessage(msg, evt, hdr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,default:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"handleUpEvent(msg,hdr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"@SuppressWarnings(""UnusedParameters"")"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected Object handleEncryptedMessage(Message msg, Event evt, EncryptHeader hdr) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// if queueing then pass into queue to be dealt with later
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(queue_up) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""queueing up message as no session key established: %s"", msg);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,upMessageQueue.put(msg);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// make sure we pass up any queued messages first
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// could be more optimised but this can wait we only need this if not using supplied key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,drainUpQueue();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// try and decrypt the message - we need to copy msg as we modify its
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// buffer (http://jira.jboss.com/jira/browse/JGRP-538)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message tmpMsg=decryptMessage(null, msg.copy()); // need to copy for possible xmits"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(tmpMsg != null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return up_prot.up(new Event(Event.MSG, tmpMsg));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""unrecognised cipher; discarding message"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected void handleUpEvent(Message msg, EncryptHeader hdr) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// check if we had some sort of encrypt control header if using supplied key we should not process it
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(suppliedKey) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""we received an encrypt header of %s while in configured mode"",hdr.getType());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// see what sort of encrypt control message we have received
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// if a key request
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case EncryptHeader.KEY_REQUEST:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""received a key request from peer %s"", msg.getSrc());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// if a key request send response key back
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// extract peer's public key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,PublicKey tmpKey=generatePubKey(msg.getBuffer());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// send back the secret key we have
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"sendSecretKey(getSecretKey(), tmpKey, msg.getSrc());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""unable to reconstitute peer's public key"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case EncryptHeader.SECRETKEY:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""received a secretkey response from keyserver %s"", msg.getSrc());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,SecretKey tmp=decodeKey(msg.getBuffer());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(tmp == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"sendKeyRequest(); // unable to understand response, let's try again"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,else {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// otherwise lets set the returned key as the shared key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"setKeys(tmp, hdr.getVersion());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""decoded secretkey response"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""unable to process received public key"", e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""received ignored encrypt header of %s"", hdr.getType());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* used to drain the up queue - synchronized so we can call it safely
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* despite access from potentially two threads at once
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void drainUpQueue() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(log.isTraceEnabled()) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int size=upMessageQueue.size();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(size > 0)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""draining %d messages from the up queue"", size);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,while(true) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message tmp=upMessageQueue.poll(0L, TimeUnit.MILLISECONDS);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message msg=decryptMessage(null, tmp.copy()); // need to copy for possible xmits"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(msg != null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"up_prot.up(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,catch(Throwable t) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.error(Util.getMessage(""FailedDecryptingAndSendingMessageUpWhenDrainingQueue""), t);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void drainDownQueue() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int size=downMessageQueue.size();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""draining %d messages from the down queue"", size);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message tmp=downMessageQueue.poll(0L, TimeUnit.MILLISECONDS);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,encryptAndSend(tmp);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.error(Util.getMessage(""FailedSendingMessageDownWhenDrainingQueue""), t);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Sets the keys for the app. and drains the queues - the drains could be
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* called att he same time as the up/down messages calling in to the class
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* so we may have an extra call to the drain methods but this slight expense
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* is better than the alternative of waiting until the next message to
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* trigger the drains which may never happen.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param version
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private void setKeys(SecretKey key, byte[] version) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// put the previous key into the map
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// if the keys are already there then they will overwrite
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"keyMap.put(new AsciiString(getSymVersion()), getSymDecodingCipher());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,setSecretKey(key);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"initSymCiphers(key.getAlgorithm(), key);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,setSymVersion(version);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// drain the up queue
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""setting queue up to false in setKeys"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,drainDownQueue();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* Does the actual work for decrypting - if version does not match current cipher then tries the previous cipher
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private Message decryptMessage(Cipher cipher, Message msg) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,EncryptHeader hdr=(EncryptHeader)msg.getHeader(this.id);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"if(!Arrays.equals(hdr.getVersion(),getSymVersion())) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""attempting to use stored cipher as message does not use current encryption version "");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,cipher=keyMap.get(new AsciiString(hdr.getVersion()));
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(cipher == null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""unable to find a matching cipher in previous key map"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""decrypting using previous cipher version"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,synchronized(cipher) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return _decrypt(cipher, msg, hdr.encryptEntireMessage());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private Message _decrypt(final Cipher cipher, Message msg, boolean decrypt_entire_msg) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,byte[] decrypted_msg;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(cipher == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"decrypted_msg=code(msg.getRawBuffer(), msg.getOffset(), msg.getLength(), true);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"decrypted_msg=cipher.doFinal(msg.getRawBuffer(), msg.getOffset(), msg.getLength());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(!decrypt_entire_msg) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,msg.setBuffer(decrypted_msg);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return msg;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message ret=Util.streamableFromBuffer(Message.class,decrypted_msg,0,decrypted_msg.length);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(ret.getDest() == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,ret.setDest(msg.getDest());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(ret.getSrc() == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,ret.setSrc(msg.getSrc());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return ret;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private void sendSecretKey(SecretKey secret, PublicKey pubKey, Address source) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// create a cipher with peer's public key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Cipher tmp;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if (asymProvider != null && !asymProvider.trim().isEmpty())
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"tmp=Cipher.getInstance(asymAlgorithm, asymProvider);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,tmp=Cipher.getInstance(asymAlgorithm);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"tmp.init(Cipher.ENCRYPT_MODE,pubKey);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,//encrypt current secret key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,byte[] encryptedKey=tmp.doFinal(secret.getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message newMsg=new Message(source, local_addr, encryptedKey)"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,".putHeader(this.id, new EncryptHeader(EncryptHeader.SECRETKEY, getSymVersion()));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""sending version %s encoded key to client"", new String(getSymVersion()));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"down_prot.down(new Event(Event.MSG,newMsg));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,/** send client's public key to server and request server's public key */
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void sendKeyRequest() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message newMsg=new Message(keyServerAddr, local_addr, Kpair.getPublic().getEncoded())"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,".putHeader(this.id,new EncryptHeader(EncryptHeader.KEY_REQUEST,getSymVersion()));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public Object down(Event evt) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(msg.getLength() == 0 && !encrypt_entire_message)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(queue_down) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""queueing down message as no session key established: %s"", msg);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,downMessageQueue.put(msg); // queue messages if we are waiting for a new key
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// make sure the down queue is drained first to keep ordering
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,encryptAndSend(msg);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.warn(""unable to send message down"", e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,case Event.SET_LOCAL_ADDRESS:
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,local_addr=(Address)evt.getArg();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.debug(""set local address to %s"", local_addr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(!suppliedKey) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// if a tmp_view then we are trying to become coordinator so
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// make us keyserver
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return down_prot.down(evt);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private void encryptAndSend(Message msg) throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"EncryptHeader hdr=new EncryptHeader(EncryptHeader.ENCRYPT, getSymVersion());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(this.encrypt_entire_message)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,hdr.type|=EncryptHeader.ENCRYPT_ENTIRE_MSG;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(encrypt_entire_message) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(msg.getSrc() == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,msg.setSrc(local_addr);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Buffer serialized_msg=Util.streamableToBuffer(msg);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"byte[] encrypted_msg=code(serialized_msg.getBuf(),serialized_msg.getOffset(),serialized_msg.getLength(),false);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"// exclude existing headers, they will be seen again when we decrypt and unmarshal the msg at the receiver"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message tmp=msg.copy(false, false).setBuffer(encrypted_msg).putHeader(this.id,hdr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"down_prot.down(new Event(Event.MSG, tmp));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// copy neeeded because same message (object) may be retransmitted -> no double encryption
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message msgEncrypted=msg.copy(false).putHeader(this.id, hdr)"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,".setBuffer(code(msg.getRawBuffer(),msg.getOffset(),msg.getLength(),false));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"down_prot.down(new Event(Event.MSG,msgEncrypted));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"private byte[] code(byte[] buf, int offset, int length, boolean decode) throws Exception {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int index=getNextIndex();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Lock lock=decode? decoding_locks[index] : encoding_locks[index];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Cipher cipher=decode? decoding_ciphers[index] : encoding_ciphers[index];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,lock.lock();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return cipher.doFinal(buf, offset, length);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,lock.unlock();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// try and decode secrey key sent from keyserver
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private SecretKeySpec decodeKey(byte[] encodedKey) throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,byte[] keyBytes;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,synchronized(this) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,keyBytes=asymCipher.doFinal(encodedKey);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"SecretKeySpec keySpec=new SecretKeySpec(keyBytes, getAlgorithm(symAlgorithm));"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,// test reconstituted key to see if valid
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,Cipher temp;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if (symProvider != null && !symProvider.trim().isEmpty())
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"temp=Cipher.getInstance(symAlgorithm, symProvider);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,temp=Cipher.getInstance(symAlgorithm);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"temp.init(Cipher.SECRET_KEY, keySpec);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return keySpec;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.error(Util.getMessage(""FailedDecodingKey""), e);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* used to reconstitute public key sent in byte form from peer
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @param encodedKey
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @return PublicKey
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private PublicKey generatePubKey(byte[] encodedKey) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,PublicKey pubKey=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,KeyFactory KeyFac=KeyFactory.getInstance(getAlgorithm(asymAlgorithm));
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,X509EncodedKeySpec x509KeySpec=new X509EncodedKeySpec(encodedKey);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,pubKey=KeyFac.generatePublic(x509KeySpec);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,e.printStackTrace();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return pubKey;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"/** Decrypts all messages in a batch, replacing encrypted messages in-place with their decrypted versions */"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected class Decrypter implements BiFunction<Message,MessageBatch,Message> {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected Lock   lock;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected Cipher cipher;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"public Message apply(Message msg, MessageBatch batch) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(msg == null || (msg.getLength() == 0 && !encrypt_entire_message) || ((hdr=(EncryptHeader)msg.getHeader(id)) == null))
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(hdr.getType() == EncryptHeader.ENCRYPT) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"queueUpMessage(msg, batch);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(lock == null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,lock=decoding_locks[index];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,cipher=decoding_ciphers[index];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"Message tmpMsg=decryptMessage(cipher, msg.copy()); // need to copy for possible xmits"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"batch.replace(msg, tmpMsg);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.error(""failed decrypting message from %s (offset=%d, length=%d, buf.length=%d): %s, headers are %s"","
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"msg.getSrc(), msg.getOffset(), msg.getLength(), msg.getRawBuffer().length, e, msg.printHeaders());"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,batch.remove(msg); // a control message will get handled by ENCRYPT and should not be passed up
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"handleUpEvent(msg, hdr);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected void unlock() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(lock != null) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,lock=null;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"protected void queueUpMessage(Message msg, MessageBatch batch) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"log.trace(""queueing up message as no session key established: "" + msg);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,batch.remove(msg);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,catch(InterruptedException e) {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public static class EncryptHeader extends org.jgroups.Header {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public static final byte ENCRYPT            = 1 << 0;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public static final byte KEY_REQUEST        = 1 << 1;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public static final byte SECRETKEY          = 1 << 2;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public static final byte ENCRYPT_ENTIRE_MSG = 1 << 3;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,private   byte   type;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected byte[] version;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public EncryptHeader() {}
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"public EncryptHeader(byte type, byte[] version) {"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,this.type=type;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,this.version=version;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,if(version == null)
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"throw new IllegalArgumentException(""version must be defined"");"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public byte getType() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return (byte)(type & ~ENCRYPT_ENTIRE_MSG); // clear the ENCRYPT_ENTIRE_MSG flag
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,* @return Returns the version.
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,protected byte[] getVersion() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return version;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public boolean encryptEntireMessage() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return Util.isFlagSet(type, ENCRYPT_ENTIRE_MSG);"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public void writeTo(DataOutput out) throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,out.writeByte(type);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,out.writeShort(version.length);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,out.write(version);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public void readFrom(DataInput in) throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,type=in.readByte();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,short len=in.readShort();
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,version=new byte[len];
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,in.readFully(version);
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public String toString() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,"return ""[type="" + type + "" version=\"""" + (version != null? version.length + "" bytes"" : ""n/a"") + ""\""]"";"
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,public int size() {
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,int retval=Global.BYTE_SIZE + Global.SHORT_SIZE;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,retval+=version.length;
38a882331035ffed205d15a5c92b471fd09659c0,63fe226fb66056b6c96026aa2d389d8632df64d2,deleted,1,return retval;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,/*
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,* Created on 04-Jul-2004
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,*
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,* To change the template for this generated file go to
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,* Window - Preferences - Java - Code Generation - Code and Comments
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,*/
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,package org.jgroups.protocols;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.jgroups.*;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.jgroups.conf.ClassConfigurator;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.jgroups.protocols.ENCRYPT.EncryptHeader;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.jgroups.stack.Protocol;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.jgroups.util.MessageBatch;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.jgroups.util.Util;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.testng.Assert;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.testng.annotations.BeforeClass;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import org.testng.annotations.Test;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import javax.crypto.Cipher;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import javax.crypto.SecretKey;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import java.security.MessageDigest;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import java.security.Security;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,import java.util.TreeMap;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,/**
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,* @author xenephon
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,* @author Bela Ban
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"@Test(groups=Global.FUNCTIONAL, sequential=false)"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public class ENCRYPTAsymmetricTest {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,protected static final short ENCRYPT_ID=ClassConfigurator.getProtocolId(ENCRYPT.class);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"protected static final Address encrypt_addr=Util.createRandomAddress(""encrypt"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"protected static final Address server_addr=Util.createRandomAddress(""server"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"protected static final Address peer_addr=Util.createRandomAddress(""peer"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"protected static final Address peer2_addr=Util.createRandomAddress(""peer2"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,@BeforeClass
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,static void initProvider() {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,}
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testInitNoProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,ENCRYPT encrypt=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,encrypt.init();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// test the default asymetric key
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""RSA"".equals(encrypt.getAsymAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getAsymInit() == 512;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""RSA"".equals(encrypt.getKpair().getPublic().getAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""X.509"".equals(encrypt.getKpair().getPublic().getFormat());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getKpair().getPublic().getEncoded() != null;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// test the default symetric key
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""AES"".equals(encrypt.getSymAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getSymInit() == 128;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""AES"".equals(encrypt.getDesKey().getAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""RAW"".equals(encrypt.getDesKey().getFormat());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getDesKey().getEncoded() != null;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//test the resulting ciphers
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"System.out.println(""Provider:"" + encrypt.getAsymCipher().getProvider());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getAsymCipher() != null;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getSymDecodingCipher() != null;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert encrypt.getSymEncodingCipher() != null;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testInitBCAsymProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"encrypt.asymAlgorithm = ""RSA"";"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//Strangely this returns differently from the default provider for RSA which is also BC!
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,@Test(expectedExceptions=Exception.class)
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testInitIDEAProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"encrypt.symAlgorithm =  ""IDEA"";"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,encrypt.symInit = 128;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testInitAESProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"encrypt.symAlgorithm = ""AES"";"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"assert ""AES"".equals(encrypt.getSymAlgorithm()) : ""expected AES but was "" + encrypt.getSymAlgorithm();"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(128, encrypt.getSymInit());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(""AES"", encrypt.getDesKey().getAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(""RAW"", encrypt.getDesKey().getFormat());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertNotNull(encrypt.getDesKey().getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertNotNull(encrypt.getSymDecodingCipher());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertNotNull(encrypt.getSymEncodingCipher());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testViewChangeBecomeKeyserver() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// set up the peer
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// set in the observer
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,encrypt.setLocalAddress(encrypt_addr);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,MockProtocol observer=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,encrypt.setUpProtocol(observer);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// produce encrypted message
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Cipher cipher=encrypt.getSymEncodingCipher();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"MessageDigest digest=MessageDigest.getInstance(""MD5"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,digest.reset();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,digest.update(encrypt.getDesKey().getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,byte[] symVersion=digest.digest();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,encrypt.keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Message msg=new Message().setBuffer(cipher.doFinal(""hello"".getBytes()))"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,".putHeader(ENCRYPT_ID, new EncryptHeader(EncryptHeader.ENCRYPT, symVersion));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"encrypt.up(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// assert that message is queued as we have no key
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertTrue(observer.upMessages.isEmpty());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send a view change to trigger the become key server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// we use the fact that our address is now the controller one
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"View tempView=View.create(encrypt_addr,1,encrypt_addr);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event event=new Event(Event.VIEW_CHANGE, tempView);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// this should have changed us to the key server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,encrypt.up(event);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send another encrypted message
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Message msg2=new Message().setBuffer(cipher.doFinal(""hello2"".getBytes()))"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,".putHeader(ENCRYPT_ID,new EncryptHeader(EncryptHeader.ENCRYPT,symVersion));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// we should have three messages now in our observer that are decrypted
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"encrypt.up(new Event(Event.MSG, msg2));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(3, observer.upMessages.size());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event sent=observer.upMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(""hello"", new String(((Message)sent.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"sent=observer.upMessages.get(""message2"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(""hello2"", new String(((Message)sent.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testViewChangeNewKeyServer() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,ENCRYPT peer=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.init();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,ENCRYPT server=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.init();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// set up server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.keyServer=true;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,MockProtocol serverObserver=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.setUpProtocol(serverObserver);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.setDownProtocol(serverObserver);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.setLocalAddress(server_addr);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event viewChange = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.up(viewChange);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// set up peer
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.setLocalAddress(peer_addr);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,MockProtocol peerObserver=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.setUpProtocol(peerObserver);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.setDownProtocol(peerObserver);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,digest.update(server.getDesKey().getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// encrypt and send an initial message to peer
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Cipher cipher=server.getSymEncodingCipher();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"peer.up(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//assert that message is queued as we have no key from server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertTrue(peerObserver.upMessages.isEmpty());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send a view change where we are not the controller
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send to peer - which should have peer2 as its key server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(viewChange);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// assert that peer\ keyserver address is now set
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(server_addr, peer.getKeyServerAddr());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// get the resulting message from the peer - should be a key request
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event sent=peerObserver.downMessages.get(""message0"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(((EncryptHeader)((Message)sent.getArg()).getHeader(ENCRYPT_ID)).getType(), EncryptHeader.KEY_REQUEST);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(new String(((Message)sent.getArg()).getBuffer()), new String(peer.getKpair().getPublic().getEncoded()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send this event to server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.up(sent);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event reply=serverObserver.downMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//assert that reply is the session key encrypted with peer's public key
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(((EncryptHeader)((Message)reply.getArg()).getHeader(ENCRYPT_ID)).getType(), EncryptHeader.SECRETKEY);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert !peer.getDesKey().equals(server.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// now send back to peer
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(reply);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// assert that both now have same key
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(peer.getDesKey(), server.getDesKey());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send another encrypted message to peer to test queue
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"peer.up(new Event(Event.MSG, msg2));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// make sure we have the events now in the up layers
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(3,peerObserver.upMessages.size());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event tempEvt=peerObserver.upMessages.get(""message2"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(""hello"", new String(((Message)tempEvt.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"tempEvt=peerObserver.upMessages.get(""message3"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(""hello2"", new String(((Message)tempEvt.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testViewChangeNewKeyServerNewKey() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// create peer and server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,ENCRYPT peer2=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.init();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//set the local address and view change to simulate a started instance
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event serverEvent = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.up(serverEvent);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// set up peer as if it has started but not recieved view change
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// set up peer2 with server as key server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.setLocalAddress(peer2_addr);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,MockProtocol peer2Observer=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.setUpProtocol(peer2Observer);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.setDownProtocol(peer2Observer);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.setKeyServerAddr(server_addr);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send an encrypted message from the server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Message msg=new Message().setBuffer(""hello"".getBytes());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"server.down(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// message0 is in response to view change
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event encEvt=serverObserver.downMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// sent to peer encrypted - should be queued in encyption layer as we do not have a keyserver set
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(encEvt);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"updateViewFor(peer, server, serverObserver, serverEvent, peerObserver);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertFalse(peerObserver.upMessages.isEmpty());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event event = new Event(Event.VIEW_CHANGE, View.create(peer2_addr, 2, peer2_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// send to peer - should set peer2 as keyserver
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(event);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(peer2_addr, peer.getKeyServerAddr());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// get the resulting message from the peer - should be a key request to peer2
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// ensure type and that request contains peers pub key
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.up(event);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.up(sent);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event reply=peer2Observer.downMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert !peer.getDesKey().equals(peer2.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert !server.getDesKey().equals(peer2.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(peer.getDesKey(), peer2.getDesKey());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,assert !server.getDesKey().equals(peer.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Message msg2=new Message();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"msg2.setBuffer(""hello2"".getBytes());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event evt2=new Event(Event.MSG, msg2);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.down(evt2);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event evt3=peer2Observer.downMessages.get(""message2"");"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(evt3);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Util.assertEquals(4, peerObserver.upMessages.size());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Event tempEvt=peerObserver.getLatestUpMessage();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public void testKeyChangesDuringKeyServerChange() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,// create peers and server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//	set the server up as keyserver
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"server.up(new Event(Event.TMP_VIEW, serverEvent.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"updateViewFor(peer2, server, serverObserver, serverEvent, peer2Observer);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Assert.assertEquals(server.getDesKey().getEncoded(), peer.getDesKey().getEncoded());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Assert.assertEquals(server.getDesKey().getEncoded(), peer2.getDesKey().getEncoded());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event viewChange2 = new Event(Event.VIEW_CHANGE, View.create(peer2_addr, 2, peer2_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"peer2.up(new Event(Event.TMP_VIEW, viewChange2.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer2.up(viewChange2);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"updateViewFor(peer, peer2, peer2Observer, viewChange2, peerObserver);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Assert.assertFalse(server.getDesKey().equals(peer.getDesKey()));
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Assert.assertEquals(peer.getDesKey().getEncoded(), peer2.getDesKey().getEncoded());"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public static void testSymmetricKeyIsChangedOnViewChange() throws Exception{
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.changeKeysOnViewChange=true;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//	set the server up as key server
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event initalView = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"server.up(new Event(Event.TMP_VIEW, initalView.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.up(initalView);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,SecretKey key = server.getDesKey();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,//	Update the view with new member
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"Event updatedView = new Event(Event.VIEW_CHANGE, View.create(server_addr, 2, peer_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"server.up(new Event(Event.TMP_VIEW, updatedView.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,server.up(updatedView);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,SecretKey keyAfterViewChange = server.getDesKey();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Util.assertFalse(key.equals(keyAfterViewChange));
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"private static void updateViewFor(ENCRYPT peer, ENCRYPT keyServer, MockProtocol serverObserver, Event serverEvent,"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,MockProtocol peerObserver) {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(serverEvent);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Event peerKeyRequest=peerObserver.getLatestDownMessage();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,keyServer.up(peerKeyRequest);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,Event serverKeyToPeer=serverObserver.getLatestDownMessage();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,peer.up(serverKeyToPeer);
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,static class MockProtocol extends Protocol {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"private final TreeMap<String, Event> upMessages=new TreeMap<>();"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"private final TreeMap<String, Event> downMessages=new TreeMap<>();"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,private int counter;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public Object down(Event evt) {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"downMessages.put(""message"" + counter++, evt);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,return null;
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public Object up(Event evt) {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,"upMessages.put(""message"" + counter++, evt);"
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,public void up(MessageBatch batch) {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,throw new UnsupportedOperationException();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,protected Event getLatestUpMessage() {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,return upMessages.isEmpty()? null : upMessages.lastEntry().getValue();
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,protected Event getLatestDownMessage() {
38a882331035ffed205d15a5c92b471fd09659c0,73540c69c03cfb3e5fd70c631d34d58bea88d352,deleted,1,return downMessages.isEmpty()? null : downMessages.lastEntry().getValue();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,/*
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,* Created on 04-Jul-2004
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,*
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,* To change the template for this generated file go to
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,* Window - Preferences - Java - Code Generation - Code and Comments
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,*/
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,package org.jgroups.protocols;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.jgroups.*;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.jgroups.conf.ClassConfigurator;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.jgroups.protocols.ENCRYPT.EncryptHeader;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.jgroups.stack.Protocol;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.jgroups.util.MessageBatch;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.jgroups.util.Util;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.testng.Assert;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.testng.annotations.BeforeClass;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import org.testng.annotations.Test;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import javax.crypto.Cipher;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import javax.crypto.SecretKey;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import java.security.MessageDigest;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import java.security.Security;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,import java.util.TreeMap;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,/**
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,* @author xenephon
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,* @author Bela Ban
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"@Test(groups=Global.FUNCTIONAL, sequential=false)"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public class ENCRYPTAsymmetricTest {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,protected static final short ENCRYPT_ID=ClassConfigurator.getProtocolId(ENCRYPT.class);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"protected static final Address encrypt_addr=Util.createRandomAddress(""encrypt"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"protected static final Address server_addr=Util.createRandomAddress(""server"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"protected static final Address peer_addr=Util.createRandomAddress(""peer"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"protected static final Address peer2_addr=Util.createRandomAddress(""peer2"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,@BeforeClass
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,static void initProvider() {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,}
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testInitNoProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,ENCRYPT encrypt=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,encrypt.init();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// test the default asymetric key
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""RSA"".equals(encrypt.getAsymAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getAsymInit() == 512;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""RSA"".equals(encrypt.getKpair().getPublic().getAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""X.509"".equals(encrypt.getKpair().getPublic().getFormat());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getKpair().getPublic().getEncoded() != null;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// test the default symetric key
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""AES"".equals(encrypt.getSymAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getSymInit() == 128;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""AES"".equals(encrypt.getDesKey().getAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""RAW"".equals(encrypt.getDesKey().getFormat());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getDesKey().getEncoded() != null;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//test the resulting ciphers
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"System.out.println(""Provider:"" + encrypt.getAsymCipher().getProvider());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getAsymCipher() != null;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getSymDecodingCipher() != null;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert encrypt.getSymEncodingCipher() != null;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testInitBCAsymProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"encrypt.asymAlgorithm = ""RSA"";"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//Strangely this returns differently from the default provider for RSA which is also BC!
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,@Test(expectedExceptions=Exception.class)
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testInitIDEAProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"encrypt.symAlgorithm =  ""IDEA"";"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,encrypt.symInit = 128;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testInitAESProperties() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"encrypt.symAlgorithm = ""AES"";"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"assert ""AES"".equals(encrypt.getSymAlgorithm()) : ""expected AES but was "" + encrypt.getSymAlgorithm();"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(128, encrypt.getSymInit());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(""AES"", encrypt.getDesKey().getAlgorithm());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(""RAW"", encrypt.getDesKey().getFormat());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertNotNull(encrypt.getDesKey().getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertNotNull(encrypt.getSymDecodingCipher());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertNotNull(encrypt.getSymEncodingCipher());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testViewChangeBecomeKeyserver() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// set up the peer
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// set in the observer
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,encrypt.setLocalAddress(encrypt_addr);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,MockProtocol observer=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,encrypt.setUpProtocol(observer);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// produce encrypted message
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Cipher cipher=encrypt.getSymEncodingCipher();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"MessageDigest digest=MessageDigest.getInstance(""MD5"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,digest.reset();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,digest.update(encrypt.getDesKey().getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,byte[] symVersion=digest.digest();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,encrypt.keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Message msg=new Message().setBuffer(cipher.doFinal(""hello"".getBytes()))"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,".putHeader(ENCRYPT_ID, new EncryptHeader(EncryptHeader.ENCRYPT, symVersion));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"encrypt.up(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// assert that message is queued as we have no key
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertTrue(observer.upMessages.isEmpty());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send a view change to trigger the become key server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// we use the fact that our address is now the controller one
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"View tempView=View.create(encrypt_addr,1,encrypt_addr);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event event=new Event(Event.VIEW_CHANGE, tempView);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// this should have changed us to the key server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,encrypt.up(event);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send another encrypted message
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Message msg2=new Message().setBuffer(cipher.doFinal(""hello2"".getBytes()))"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,".putHeader(ENCRYPT_ID,new EncryptHeader(EncryptHeader.ENCRYPT,symVersion));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// we should have three messages now in our observer that are decrypted
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"encrypt.up(new Event(Event.MSG, msg2));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(3, observer.upMessages.size());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event sent=observer.upMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(""hello"", new String(((Message)sent.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"sent=observer.upMessages.get(""message2"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(""hello2"", new String(((Message)sent.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testViewChangeNewKeyServer() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,ENCRYPT peer=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.init();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,ENCRYPT server=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.init();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// set up server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.keyServer=true;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,MockProtocol serverObserver=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.setUpProtocol(serverObserver);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.setDownProtocol(serverObserver);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.setLocalAddress(server_addr);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event viewChange = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.up(viewChange);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// set up peer
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.setLocalAddress(peer_addr);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,MockProtocol peerObserver=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.setUpProtocol(peerObserver);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.setDownProtocol(peerObserver);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,digest.update(server.getDesKey().getEncoded());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// encrypt and send an initial message to peer
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Cipher cipher=server.getSymEncodingCipher();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"peer.up(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//assert that message is queued as we have no key from server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertTrue(peerObserver.upMessages.isEmpty());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send a view change where we are not the controller
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send to peer - which should have peer2 as its key server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(viewChange);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// assert that peer\ keyserver address is now set
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(server_addr, peer.getKeyServerAddr());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// get the resulting message from the peer - should be a key request
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event sent=peerObserver.downMessages.get(""message0"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(((EncryptHeader)((Message)sent.getArg()).getHeader(ENCRYPT_ID)).getType(), EncryptHeader.KEY_REQUEST);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(new String(((Message)sent.getArg()).getBuffer()), new String(peer.getKpair().getPublic().getEncoded()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send this event to server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.up(sent);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event reply=serverObserver.downMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//assert that reply is the session key encrypted with peer's public key
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(((EncryptHeader)((Message)reply.getArg()).getHeader(ENCRYPT_ID)).getType(), EncryptHeader.SECRETKEY);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert !peer.getDesKey().equals(server.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// now send back to peer
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(reply);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// assert that both now have same key
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(peer.getDesKey(), server.getDesKey());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send another encrypted message to peer to test queue
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"peer.up(new Event(Event.MSG, msg2));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// make sure we have the events now in the up layers
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(3,peerObserver.upMessages.size());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event tempEvt=peerObserver.upMessages.get(""message2"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(""hello"", new String(((Message)tempEvt.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"tempEvt=peerObserver.upMessages.get(""message3"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(""hello2"", new String(((Message)tempEvt.getArg()).getBuffer()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testViewChangeNewKeyServerNewKey() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// create peer and server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,ENCRYPT peer2=new ENCRYPT();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.init();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//set the local address and view change to simulate a started instance
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event serverEvent = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.up(serverEvent);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// set up peer as if it has started but not recieved view change
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// set up peer2 with server as key server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.setLocalAddress(peer2_addr);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,MockProtocol peer2Observer=new MockProtocol();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.setUpProtocol(peer2Observer);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.setDownProtocol(peer2Observer);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.keyServer=false;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.setKeyServerAddr(server_addr);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send an encrypted message from the server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Message msg=new Message().setBuffer(""hello"".getBytes());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"server.down(new Event(Event.MSG, msg));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// message0 is in response to view change
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event encEvt=serverObserver.downMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// sent to peer encrypted - should be queued in encyption layer as we do not have a keyserver set
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(encEvt);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"updateViewFor(peer, server, serverObserver, serverEvent, peerObserver);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertFalse(peerObserver.upMessages.isEmpty());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event event = new Event(Event.VIEW_CHANGE, View.create(peer2_addr, 2, peer2_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// send to peer - should set peer2 as keyserver
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(event);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(peer2_addr, peer.getKeyServerAddr());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// get the resulting message from the peer - should be a key request to peer2
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// ensure type and that request contains peers pub key
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.up(event);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.up(sent);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event reply=peer2Observer.downMessages.get(""message1"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert !peer.getDesKey().equals(peer2.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert !server.getDesKey().equals(peer2.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(peer.getDesKey(), peer2.getDesKey());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,assert !server.getDesKey().equals(peer.getDesKey());
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Message msg2=new Message();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"msg2.setBuffer(""hello2"".getBytes());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event evt2=new Event(Event.MSG, msg2);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.down(evt2);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event evt3=peer2Observer.downMessages.get(""message2"");"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(evt3);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Util.assertEquals(4, peerObserver.upMessages.size());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Event tempEvt=peerObserver.getLatestUpMessage();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public void testKeyChangesDuringKeyServerChange() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,// create peers and server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//	set the server up as keyserver
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"server.up(new Event(Event.TMP_VIEW, serverEvent.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"updateViewFor(peer2, server, serverObserver, serverEvent, peer2Observer);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Assert.assertEquals(server.getDesKey().getEncoded(), peer.getDesKey().getEncoded());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Assert.assertEquals(server.getDesKey().getEncoded(), peer2.getDesKey().getEncoded());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event viewChange2 = new Event(Event.VIEW_CHANGE, View.create(peer2_addr, 2, peer2_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"peer2.up(new Event(Event.TMP_VIEW, viewChange2.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer2.up(viewChange2);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"updateViewFor(peer, peer2, peer2Observer, viewChange2, peerObserver);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Assert.assertFalse(server.getDesKey().equals(peer.getDesKey()));
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Assert.assertEquals(peer.getDesKey().getEncoded(), peer2.getDesKey().getEncoded());"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public static void testSymmetricKeyIsChangedOnViewChange() throws Exception{
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.changeKeysOnViewChange=true;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//	set the server up as key server
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event initalView = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"server.up(new Event(Event.TMP_VIEW, initalView.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.up(initalView);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,SecretKey key = server.getDesKey();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,//	Update the view with new member
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"Event updatedView = new Event(Event.VIEW_CHANGE, View.create(server_addr, 2, peer_addr));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"server.up(new Event(Event.TMP_VIEW, updatedView.getArg()));"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,server.up(updatedView);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,SecretKey keyAfterViewChange = server.getDesKey();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Util.assertFalse(key.equals(keyAfterViewChange));
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"private static void updateViewFor(ENCRYPT peer, ENCRYPT keyServer, MockProtocol serverObserver, Event serverEvent,"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,MockProtocol peerObserver) {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(serverEvent);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Event peerKeyRequest=peerObserver.getLatestDownMessage();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,keyServer.up(peerKeyRequest);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,Event serverKeyToPeer=serverObserver.getLatestDownMessage();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,peer.up(serverKeyToPeer);
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,static class MockProtocol extends Protocol {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"private final TreeMap<String, Event> upMessages=new TreeMap<>();"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"private final TreeMap<String, Event> downMessages=new TreeMap<>();"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,private int counter;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public Object down(Event evt) {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"downMessages.put(""message"" + counter++, evt);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,return null;
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public Object up(Event evt) {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,"upMessages.put(""message"" + counter++, evt);"
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,public void up(MessageBatch batch) {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,throw new UnsupportedOperationException();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,protected Event getLatestUpMessage() {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,return upMessages.isEmpty()? null : upMessages.lastEntry().getValue();
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,protected Event getLatestDownMessage() {
38a882331035ffed205d15a5c92b471fd09659c0,d84114b5de9955f97bd36467f798bb4e867520a3,deleted,1,return downMessages.isEmpty()? null : downMessages.lastEntry().getValue();
38a882331035ffed205d15a5c92b471fd09659c0,40d43dbc3cac6f24802c1edba225b598e163706c,added,0,"channels[0].getProtocolStack().insertProtocol(discard, ProtocolStack.Position.ABOVE, TP.class);"
38a882331035ffed205d15a5c92b471fd09659c0,40d43dbc3cac6f24802c1edba225b598e163706c,deleted,1,"channels[0].getProtocolStack().insertProtocol(discard, ProtocolStack.ABOVE, TP.class);"
38a882331035ffed205d15a5c92b471fd09659c0,988c55f94ede6951168bd0748f6eec8c7c444154,added,0,public void testEncryptHeader() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,988c55f94ede6951168bd0748f6eec8c7c444154,added,0,"EncryptHeader hdr=new EncryptHeader(EncryptHeader.ENCRYPT, new byte[]{'b','e', 'l', 'a'});"
38a882331035ffed205d15a5c92b471fd09659c0,988c55f94ede6951168bd0748f6eec8c7c444154,added,0,"hdr=new EncryptHeader(EncryptHeader.ENCRYPT, ""Hello"".getBytes()).signature(""bla"".getBytes());"
38a882331035ffed205d15a5c92b471fd09659c0,988c55f94ede6951168bd0748f6eec8c7c444154,deleted,1,public static void testEncryptHeader() throws Exception {
38a882331035ffed205d15a5c92b471fd09659c0,988c55f94ede6951168bd0748f6eec8c7c444154,deleted,1,"ENCRYPT.EncryptHeader hdr=new ENCRYPT.EncryptHeader((byte)1, new byte[]{'b','e', 'l', 'a'});"
38a882331035ffed205d15a5c92b471fd09659c0,988c55f94ede6951168bd0748f6eec8c7c444154,deleted,1,"hdr=new ENCRYPT.EncryptHeader((byte)2, ""Hello world"".getBytes());"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,import org.jgroups.conf.XmlConfigurator;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,import org.jgroups.conf.XmlNode;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,import java.util.ArrayList;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,import java.util.HashMap;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,import java.util.List;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,import java.util.Map;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,XmlNode root=XmlConfigurator.parseXmlDocument(input);
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"public static void parse(XmlNode root, final Map<String,SiteConfig> map) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"match(RELAY_CONFIG, root.getName());"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,List<XmlNode> children=root.getChildren();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,if(children == null || children.isEmpty())
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,for(XmlNode node: children) {
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"match(SITES, node.getName());"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"parseSites(map, node);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"protected static void parseSites(final Map<String,SiteConfig> map, XmlNode root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"match(SITE, node.getName());"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"Map<String,String> attrs=node.getAttributes();"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"if(attrs == null || attrs.isEmpty() || !attrs.containsKey(""name""))"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"throw new IllegalStateException(String.format(""site must have a name (attrs: %s)"", attrs));"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"String site_name=attrs.get(""name"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,if(map.containsKey(site_name))
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"throw new Exception(""Site \"""" + site_name + ""\"" already defined"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,SiteConfig site_config=new SiteConfig(site_name);
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"map.put(site_name, site_config);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"protected static void parseBridgesAndForwards(SiteConfig site_config, XmlNode root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,String node_name=node.getName();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"protected static void parseBridges(SiteConfig site_config, XmlNode root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"match(BRIDGE, node_name);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,if(attrs == null || attrs.isEmpty())
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"String name=attrs.get(""name"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"String config=attrs.get(""config"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"protected static void parseForwards(SiteConfig site_config, XmlNode root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"match(FORWARD, node.getName());"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"String to=attrs.get(""to"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"String gateway=attrs.get(""gateway"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"protected static void match(String expected_name, String name) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,"throw new Exception(""\"""" + name + ""\"" didn't match \"""" + expected_name + ""\"""");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,added,0,this.config=Util.substituteVariable(config);
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,import org.w3c.dom.*;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,import javax.xml.parsers.DocumentBuilder;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,import javax.xml.parsers.DocumentBuilderFactory;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,import java.util.*;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,/*public String toString() {
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,StringBuilder sb=new StringBuilder();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"sb.append(""sites:\n"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"for(Map.Entry<String,SiteConfig> entry: sites.entrySet())"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"sb.append(entry.getKey() + "" --> "" + entry.getValue() + ""\n"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,return sb.toString();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,}*/
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,factory.setValidating(false); // for now
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,DocumentBuilder builder=factory.newDocumentBuilder();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,Document document=builder.parse(input);
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,Element root=document.getDocumentElement();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"public static void parse(Node root, final Map<String,SiteConfig> map) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"match(RELAY_CONFIG, root.getNodeName(), true);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,NodeList children=root.getChildNodes();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,if(children == null || children.getLength() == 0)
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,for(int i=0; i < children.getLength(); i++) {
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,Node node=children.item(i);
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,if(node.getNodeType() != Node.ELEMENT_NODE)
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,continue;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String element_name=node.getNodeName();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,if(SITES.equals(element_name))
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"parseSites(map, node);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,else
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"throw new Exception(""expected <"" + SITES + "">, but got "" + ""<"" + element_name + "">"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"protected static void parseSites(final Map<String,SiteConfig> map, Node root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"match(SITE, node.getNodeName(), true);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,NamedNodeMap attrs=node.getAttributes();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,if(attrs == null || attrs.getLength() == 0)
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"Attr name_attr=(Attr)attrs.getNamedItem(""name"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String name=name_attr.getValue();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,if(map.containsKey(name))
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"throw new Exception(""Site \"""" + name + ""\"" already defined"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,SiteConfig site_config=new SiteConfig(name);
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"map.put(name, site_config);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"protected static void parseBridgesAndForwards(SiteConfig site_config, Node root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String node_name=node.getNodeName();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"protected static void parseBridges(SiteConfig site_config, Node root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"match(BRIDGE, node_name, true);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"Attr config_attr=(Attr)attrs.getNamedItem(""config"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String name=name_attr != null? name_attr.getValue() : null;
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String config=config_attr.getValue();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"protected static void parseForwards(SiteConfig site_config, Node root) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"match(FORWARD, node_name, true);"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"Attr to_attr=(Attr)attrs.getNamedItem(""to"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"Attr gw_attr=(Attr)attrs.getNamedItem(""gateway"");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String to=to_attr.getValue();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,String gateway=gw_attr.getValue();
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"protected static void match(String expected_name, String name, boolean is_element) throws Exception {"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,"throw new Exception((is_element? ""Element "" : ""Attribute "") + ""\"""" + name + ""\"" didn't match \"""" + expected_name + ""\"""");"
05d4d414f674f5796ec277a178ca1fbeb0706998,6241bfafcc7f52dc1257690be63d6ee9e3fd6d45,deleted,1,this.config= Util.substituteVariable(config);
