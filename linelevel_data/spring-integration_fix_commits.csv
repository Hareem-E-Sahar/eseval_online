commit_id,date,message
c08a7a657e0f8947aa15a4e579d8218b758d9905,2010-05-25 13:21:25+00:00,"renamed modules org.springframework.integration.* -> spring-integration-*
@Ignore'd SimpleTcpNetOutboundGatewayTests#testOutboundClose() to avoid failure; this failure is correlated to the module name change, but hard to understand how it would be caused by it"
4689ae17ac8ca0914fb7c4476c76a93dc2bac7c7,2010-06-23 21:59:03+00:00,INT-1139 added a test demonstrating the use of #args.foo in an expression
90c6b585018082b92b8cfe2f2614137bda2367ec,2010-07-19 20:52:14+00:00,"INT-946 rolled back the change (... namespace=""##local"" . . . to namespace=""##other"") due to the failing tests in other namespaces"
a5031020e75217881f545bc0c4dd615ff19013c6,2010-08-01 15:49:23+00:00,"INT-1307 Updated schema to make sure its compatible with Java 5 (when using <xsd:any namespace=""##other""..> and <beans:bean. . .> element we were violating Unique Particle Attribute, so sine we already say any-other, there is no need to explicitly include <beans:bean>),  changed ControlBusXmlTest.anonymousConsumerRegistered() since it was throwing MalformedObjectNameException: invalid character '*' which was used in 'generated=*'"
b85ed0fe279daee8322a6f9a4342af0938596422,2010-08-24 10:45:13+00:00,"fixed a compilation issue stemming from Java 1.5 != 1.6 compatible. (that's twice i've been bitten by the Properties class supporting a completely obvious #store(writer, String) variant!"
245ae1d5fad32653c997774925207ea97ebec5d4,2010-08-24 11:02:46+00:00,"fixed a compilation issue stemming from Java 1.5 != 1.6 compatible. (that's twice i've been bitten by the Properties class supporting a completely obvious #store(writer, String) variant!"
5c7f97f1015cc67e6b8ee71177ae1b877482e832,2010-09-02 14:19:57+00:00,"INT-1401 EvaluationContext variable names are now fixed (#return, #method, #args, and #exception)"
1ab977f84c25476dd27fb84003c230081d87603c,2011-05-24 15:05:38-04:00,typo in doc as pointed out in forum: http://forum.springsource.org/showthread.php?73703&p=363951#post363951
25c421e82c63b4af1c3a5b0fcd5ff3e692876801,2011-07-29 16:52:53-04:00,Fixed #INT-2021 Clean up formatting issues in chapter 11 (File Support) of the reference documentation; #INT-1967 Standardize namespace pre-fixes in documentation
6497a72bdc7b48015fd1d7f8d5cc5a3f6708a3a2,2011-07-29 18:08:49-04:00,Fixed #INT-2021 Clean up formatting issues in chapter 11 (File Support) of the reference documentation
9fae5bf47740f4d3de58c19b7fe27e6032b27e45,2011-07-31 10:38:00-04:00,Fixed #INT-1984 - Error documentation about Converter; #INT-1967 Standardize namespace pre-fixes in documentation
78c479eb0564271b12e9bcd42ee6734d96c8f401,2011-07-31 11:10:53-04:00,Fixed #INT-1984 - Error documentation about Converter; #INT-1967 Standardize namespace pre-fixes in documentation
3887f5505593e39ec705d373dcb6d824198b12b6,2011-07-31 15:28:21-04:00,#INT-1967 Standardize namespace pre-fixes in documentation
f35c9b8c3a2b164e4159f82e446e98967fef39b9,2011-07-31 23:51:04-04:00,#INT-1987 - Add a paragraph/section to the beginning of the Reference Manual explaining the usage of namespace prefixes
ffc4b07abbac9b2cc45cfbb17d90c94a01897478,2011-07-31 23:56:42-04:00,#INT-1967 Standardize namespace pre-fixes in documentation
bce562368c0283e6b31bfff20014740fe2579100,2011-08-11 10:19:28-07:00,"Merge pull request #4 from olegz/INT-2040

INT-2040 changed signature of MessageStore.getMessageCount() to return lo"
5eaa57df11e08be55dfb0318106e0ea665b2f955,2011-08-11 11:10:29-07:00,"Merge pull request #5 from markfisher/INT-2046

INT-2046 added @ManagedAttribute to MessageStores"
ab47ca704b9e3cf495fe31f4db9c86a757952efa,2011-08-12 09:21:45-04:00,"Merge pull request #6 from olegz/INT-2030

INT-2030 polished RedisMessageGroup

1. simplified size() method to simply return the sum of sizes from marked and unmarked
2. removed System,out.println
3. added more assertions to tests
4. cosmetic changes"
a352f1951408845ed53c11e6d194636bd0878ffe,2011-08-12 13:03:23-04:00,"Revert ""Merge pull request #6 from olegz/INT-2030""

Backing out this change in order to use the merge commit approach.

This reverts commit ab47ca704b9e3cf495fe31f4db9c86a757952efa."
6d3eac8c4935c346be7fbeae652a7da24ef84a9e,2011-08-12 13:09:31-04:00,"Merge pull request #6 from olegz/INT-2030

INT-2030 polished RedisMessageGroup"
11680bae2276a9942b2643e3e36a1f40f74e751b,2011-08-13 12:05:42-07:00,"Merge pull request #7 from garyrussell/INT-2040

INT-2040 Broken JMX Test"
b4f200fe381d41251065e1d2b566bf8aa2ac5a3d,2011-08-13 15:16:46-04:00,"Merge pull request #9 from garyrussell/INT-1884

Fix Intermittent Test Failure

Issue: INT-1884"
97e9499b88a955a5b7667e886d9dab9f4c0f4996,2011-08-16 10:41:37-04:00,#INT-2052 - renamed readme.txt to README.md to allow for Markdown styling
5316b118053edd860f28dbc4327910226ce10086,2011-08-16 10:41:37-04:00,#INT-2052 - Formatted README.md
029761404354789b1f91943b4751ee39c8127770,2011-08-16 10:41:37-04:00,#INT-2052 - Sourounded --recursive with <code> to escape -- in README.md
f0d42d1f910bd4347f309dbfe28365aa3d99503c,2011-08-16 11:29:31-04:00,#INT-2052 - Fixed some wording in README.md
21626a546585f59056b7f8cebb2872e638c36bc8,2011-08-16 09:42:17-07:00,"Merge pull request #11 from markfisher/INT-1947

Add 'loggerName' property."
0bba8827ca2adfdd881fb156d6f6b35a8e13991e,2011-08-16 09:44:19-07:00,"Merge pull request #15 from ghillert/INT-2052

INT-2052"
254f0f1f50262ea5f05ec8214556f4d6c4632975,2011-08-16 16:44:05-04:00,"Merge pull request #14 from dturanski/INT-2049

  remove gemfire cfg files
  add namespace support
  add SpEL support to CacheWritingMessageHandler and general cleanup"
6544414544cb7b99a80aec7e457f25d20fa0e47a,2011-08-16 17:11:35-04:00,"Merge pull request #16 from ghillert/INT-2043

  Add @Filter annotation to appendix
  Add annotation documentation to 5.2.2 Configuring Filter
  Some documentation cleanup"
17c8759ceb21334cda38e22c84678baab84d3138,2011-08-17 22:55:12-04:00,"Merge pull request #18 from joshlong/INT2060

  ensured everything worked after merge
  general clean up

Issue: INT-2060"
8116b8ba5efc86b34f7ee4a3a7cb582f857065d7,2011-08-18 08:32:24-04:00,"Merge pull request #17 from markfisher/INT-2047

* INT-2047:
  updated 2.0 xsd
  SftpSessionFactory -> DefaultSftpSessionFactory"
625dc98242039ef78356effd5789e78ddc14cc5f,2011-08-18 06:52:38-07:00,"Merge pull request #19 from joshlong/INT-2062

INT-2062"
180cce3d0516aacfe4229c6fcd38426f982c44ba,2011-08-18 11:36:34-04:00,"Merge pull request #20 from ghillert/INT-2061

* INT-2061:
  INT-2061 - Added description for auto-startup attribute in spring-integration-file-2.0.xsd
  INT-2061 - Added description for auto-startup attribute in spring-integration-file-2.1.xsd"
6f76a293b43016e9f81bcc2f48f76ffbf9b5ee72,2011-08-18 17:39:50-04:00,"Merge pull request #21 from dturanski/INT-2062

  Fixed GemfireMessageGroupStoreTest (changed Set to List to avoid equals() collisions affecting size())"
29f4fe59480c520807ad13a09cb34868f3cbc780,2011-08-19 09:47:59-04:00,"Merge pull request #23 from ghillert/INT-2058

* INT-2058:
  polishing
  Added Xml schema documentation for the attributes: id, channel, directory, scanner (2.0 and 2.1 Schema)"
23219d2a1296800dc4d01ecb34c8a9307a996782,2011-08-19 14:37:35-04:00,"Merge pull request #22 from markfisher/INT-1996

  inbound-gateway now supports all attributes"
c035ce8b03942db527f9ab0d6dae7b626ef9e0c4,2011-08-19 17:08:22-04:00,"Merge pull request #24 from markfisher/INT-2069

  updated POMs with Spring 3.0.5.RELEASE
  reverted ETag test String escaping
  reverting use of AnnotationConfigContextLoader
  reverting 3.1 BeanDefinitionParserDelegate usage
  reverting use of new DefaultConversionService()
  build.gradle: Spring 3.1.0.M2 -> 3.0.5.RELEASE"
741b1e58bd401fe00fe19e2d2ee413e27fb14556,2011-08-21 11:08:22-04:00,"Merge pull request #25 from dturanski/INT-2068

  fixed shouldSkipNulls logic"
2d151932fcc8d0949dc4664d24781326a06d2afd,2011-08-22 11:46:21-04:00,"Merge pull request #27 from markfisher/INT-1982

  added support for durable subscription settings"
5bc29046f08384f9ad40970b5d06c3d7a488c689,2011-08-22 15:45:45-04:00,"Merge pull request #29 from markfisher/INT-2067

  id is now a fallback for a generated channel name"
9d6df08b9888c443082c1db92624d49420026e47,2011-08-22 22:23:27-04:00,"Merge pull request #30 from dturanski/INT-2074

* dturanski/INT-2074:
  INT-2074 changed name to queryName
  INT-2074 - refactored ContinuousQueryMessageProducer and cleaned up tests
  added CacheServerProcess"
d3dd603a247816eaa63f54dcc31e31e0bfad93ee,2011-08-23 12:53:54-07:00,"Merge pull request #31 from dturanski/INT-2074

set use-factory-locator=false and changed cache-id"
044ab4f06401a77d6909fc1b9d4da9409d4dd826,2011-08-23 16:01:17-04:00,"Merge pull request #32 from ghillert/INT-2070

  Initial commit of the first draft of the AMQP adapter documentation"
4f131e2d34138574ae2f7338111e500085be0846,2011-08-24 15:55:16-04:00,"Merge pull request #33 from olegz/INT-2011

  fixed MessagingMethodInvokerHelper.HandlerMethod.dummyMessages to be of type Collection<Message<?>> instead of List<Message<?>>"
ee0efee168c76d79e5553ff903386a562454fdb2,2011-08-24 16:18:32-04:00,"Merge pull request #35 from olegz/INT-2011

  fixed ReseqencerParserTests that was broken due to the change in method names in MaxValueReleaseStrategy"
a7e4fc104b2c271ffbd4b5600cdd5c082f5ff335,2011-08-24 20:23:46-04:00,"Merge pull request #37 from dturanski/gemfire

  fixed gemfire test compile problem
  for example, see: https://build.springsource.org/browse/INT-MASTER-20/"
a97ddfa71eda969791c32dedd455eae7100baf6c,2011-08-24 21:05:18-04:00,"Merge pull request #26 from markfisher/INT-2056

  added check for IllegalStateException on unexpected exception thrown from method invocation
  walks the cause hierarchy again
  Gateway now rethrows unwrapped RuntimeExceptions"
201b4abe577d7adfaa83f0dc7aa0c09497d054a4,2011-08-25 22:45:57-04:00,"Merge pull request #42 from dturanski/INT-2082

  SpelMessageProducerSupport abstract and package-private
  INT-2082 added supported event types
  INT-2081 added gemfire documentation to the reference. Also fixed a typo in the schema
  INT-2082 added support for evaluating payload expression in ContinuousQueryMessageProducer"
96dd1d4d6da942ab438914047f5c97ee59c697eb,2011-08-26 10:44:30-04:00,"Merge pull request #44 from dturanski/INT-2075

  Added namespace support for cq-inbound-channel-adapter
  Also some general cleanup and additional tests"
d895a8d1e1e055d714f7e80cae258758140f499a,2011-08-26 16:28:40-04:00,"Merge pull request #28 from olegz/INT-2028

  MongoDbMessageStore for M1"
0aa87c4dc76209ce64a88b971b75cc7ca5187cd2,2011-08-26 17:56:26-04:00,"Merge pull request #46 from olegz/INT-2009

  added documentation clarifying the use of MessageGroup when using POJO-based ReleaseStrategy"
d1ece40ddc5d2b1802dfcec020de7b474766e770,2011-08-27 10:24:39-04:00,"Merge pull request #34 from olegz/INT-2030

  INT-2030: RedisMessageStore"
82794bcff7360a22758bea8f65d610a9a3d16d6d,2011-08-27 12:43:07-04:00,"Merge pull request #45 from dturanski/INT-2075

  made changes for the new SGF class names"
974b385a08a0e8a8f1689b8e18178afca7485882,2011-08-30 13:00:07-04:00,"Merge pull request #47 from markfisher/INT-2085

  properly support request and reply pubSubDomain"
f4cb32c866ef8f09d5f1f7f39ecabbe1ffb9faaa,2011-08-30 15:43:06-04:00,"Merge pull request #38 from markfisher/INT-2017

  INT-2016, INT-2017, INT-2090:
  DefaultAmqpHeaderMapper refactoring"
fe3f1f3802960e37001df7b19affa577d389f102,2011-08-30 22:29:34-04:00,"Merge pull request #49 from markfisher/INT-1109

  add request-destination-expression for outbound-gateway
  add destination-expression for outbound-channel-adapter"
fb12e94714b3a5f4cfad61fe0451928f5ee7cf3a,2011-08-30 22:33:14-04:00,"Merge pull request #48 from markfisher/INT-1943

  properly applying JMS outbound-gateway send-timeout and receive-timeout attributes
  clarified role of send-timeout and receive-timeout in the XSD documentation"
e4313153ce7198e8400bc4e701b2dfc4d8a47af1,2011-08-31 12:39:38-04:00,"Merge pull request #40 from olegz/INT-2079

  added initial documentation for Redis module"
b26b7bbb6c0eeb30820861b127137deb82c0a17a,2011-08-31 12:55:31-04:00,"Merge pull request #50 from markfisher/INT-2093

  removed deprecated trigger sub-elements non-core test configs
  removed deprecated trigger sub-elements from core test configs
  removed the parsing logic for handling deprecated trigger sub-elements"
fac689251c3dd5eed37aa384dd988ffd1d186944,2011-08-31 15:28:02-04:00,"Merge pull request #43 from olegz/INT-2080

  added initial Mongo support documentation"
ecad0de7942aa5df99b160f1c6035c04de32a4f2,2011-09-01 17:36:28-04:00,"Merge pull request #52 from olegz/INT-2094

  removed deprecated use of task-executor"
6d421f30b2b710cbca0b32e1b703c28b5982f2bc,2011-09-02 08:26:31-04:00,"Merge pull request #10 from garyrussell/INT-1945

  dir -> directory
  polishing
  INT-1945 (S)FTP Gateway - Initial Implementation"
10efd1c844eeaf9f078f845c39e8f09956abba13,2011-09-02 12:19:11-04:00,"Merge pull request #55 from dturanski/scripting-name-changes

* scripting-name-changes:
  Removed Jsr223 from classnames"
c38e585250ca572d39beade71eaa1920e010e1f0,2011-09-02 12:22:27-04:00,"Merge pull request #54 from olegz/INT-2104

  fixed invalid check for open folder that was precluding ImapIdleChannelAdapter from receiving subsequent email messages"
948234364e0fbaf1773058e7d12f267909b8d3f2,2011-09-02 12:46:18-04:00,"Merge pull request #51 from olegz/INT-1968

  ObjectToMapTransformer now handles BigDecimal"
040a44985de133019d816d96daba2d18ab73c89e,2011-09-02 16:03:05-04:00,"Merge pull request #53 from olegz/INT-1677

  refactored the UriPathHandlerMapping to only provide an implementation of the abstract method
  changed uriVariables to pathVariables
  added pathVariables and requestParams as variables to the EvaluationContext
  setting the HttpEntity as the rootObject of the EvauationContext (it includes the converted 'body' if present and 'headers')
  removed requirement for an ID, polished schema, added more tests, and tested with server
  finished the namespace support for payload-expression attribute and header sub-element, added parser test
  updated 2.1 schema with new 'payload-expression' attribute as well as 'header' elements
  polished UriPathHandlerMapping to address comments from the review
  added UriPathHandlerMapping to aid in support of the 'path' attribute
  fixed thread safety for EvaluationContext since it has to be created per request due to the fact that we are adding request data to it
  added support for SpEL expressions"
201fd705de6f787d0514bca6319486df8491c946,2011-09-02 16:11:11-04:00,"Merge pull request #56 from olegz/INT-1968A

  fixed a broken test"
a28e554749a22715ea928b020f2143a660537472,2011-09-13 11:52:09-04:00,"Merge pull request #65 from markfisher/INT-2118

  added 'exchange-name-expression' attributes to the schema
  added support for 'exchange-name-expression' on AMQP outbound adapters
  changed default connection-factory value to 'rabbitConnectionFactory' to be consistent with the Spring AMQP listener-container"
6854a87ebdd35a098f20388495dcb163de4eef4d,2011-09-13 11:56:55-04:00,"Merge pull request #70 from ghillert/INT-2123

  INT-2123 - Cleaned up dependencies 2 modules still had Spring 3.1 transitive dependencies:"
2ecaede2d98eca5ce1b5b61b00c90b8be05fe545,2011-09-13 12:31:58-04:00,"Merge pull request #61 from garyrussell/INT-2111

  Fix typo in Samples Appendix"
a0ff7719ef1a85d435ef1fba7079b93ebef2eb43,2011-09-14 11:07:58-04:00,"Merge pull request #58 from olegz/INT-2109

  updated JMS schema documentation to cover DMLC attributes"
b649a327dae1dde4335dda410882e4752c7568d8,2011-09-15 07:24:13-04:00,"Merge pull request #71 from olegz/INT-2115

  added logic to recognize abstract bean definitions in GroovyControlBusFactoryBean.ManagedBeansScriptVariableGenerator"
94f213fc151da0d3f558bc57aa59cab7a4a4cdf3,2011-09-15 07:42:18-04:00,"Merge pull request #72 from olegz/INT-2106

  added support for poller to outbound mail adapter"
dd68950f317af212ea9693b306c1aa7efdf54b86,2011-09-15 14:26:51-04:00,"Merge pull request #68 from olegz/INT-1818

  using parameterized types
  migrated Twitter support to use Spring Social"
4413bcc0a0db5b3334decb8dd425478e925d76f5,2011-09-15 16:26:12-04:00,"Merge pull request #73 from olegz/INT-1818

  updated template.mf with new dependencies"
f005df8d6529f2efdf251c9d3f009ea99f4d48d6,2011-09-19 14:09:10-04:00,"Merge pull request #76 from ghillert/INT-2129

  Fix the pom.xml for Twitter adapter."
4056ec5c694ec836e13f4d9c34c93ada914c0796,2011-09-19 14:37:33-04:00,"Merge pull request #74 from olegz/INT-2012

  improved documentation for 'send-partial-result-on-expiry'"
b55520369d68d04ff36e9ba2f2f42037914c6264,2011-09-20 08:22:20-04:00,"Merge pull request #77 from olegz/INT-2013

  Added documentation explaining how the 'timeout' property of the MessageGroupStoreReaper can be impacted by the task scheduler rate"
08e72873385b6cda311fad53854ac7d948408b2d,2011-09-20 12:53:50-04:00,"Merge pull request #57 from ghillert/INT-2053

  Refactor/Standardize Router XSD Schema Attributes"
b6294fc602393c6cae7f86c02d9bd350c7c72298,2011-09-20 13:57:25-04:00,"Merge pull request #66 from markfisher/INT-2089

  No-arg gateway method can be a 'send' operation"
f9952da461425ba63f1c2714580941a1a7cb7a67,2011-09-23 09:29:45-04:00,"Merge pull request #79 from dturanski/INT-2130

* INT-2130:
  updated groovy module pom
  Moved scripting support from core to scripting"
6ef95da4902ea10d2166b7072dddcd8a09971b2f,2011-09-23 10:19:25-04:00,"Merge pull request #82 from markfisher/INT-2131

  Add ReplyRequiredException"
29d027c721557f404e11ffd58284d7674b547139,2011-09-23 11:11:58-04:00,"Merge pull request #85 from olegz/INT-1884

  - polished test that intermittently break CI
  - increased the 'await' time in JdbcMessageStoreChannelIntegrationTests.testTransactionalSendAndReceive()
  - polished InnerDefinitionHandlerAwareEndpointParserTests.testAggregatorDefinitionSuccess to avoid NPE
  - increased its receive timeout as well"
09e053e95f88fb48a1faf8e9ef676b4bd2111868,2011-09-23 18:02:11-04:00,"Merge pull request #87 from dturanski/INT-2088

  added documentation for scripting and updated groovy section"
c313e813c2bcaed78f88baeae2768215020ba47c,2011-09-26 08:44:04-04:00,"Merge pull request #92 from markfisher/INT-2145

  Removed hardcoded ""restTemplate"" references."
4c9b37f5d05263da196b59db77b0e3a14f678b21,2011-09-26 08:46:36-04:00,"Merge pull request #91 from garyrussell/INT-2111

  Reference Doc Polishing"
0b43a9aa163d095693c2726f972be406d4747c38,2011-09-26 08:48:38-04:00,"Merge pull request #90 from garyrussell/INT-2144

  Document Socket Timeout Defaults"
d358711ce93dd9e19bf6830a944170d684b0736b,2011-09-26 16:49:12-04:00,"Merge pull request #88 from markfisher/INT-2143

  added 'error-handler' attribute"
3079fe9bf082531b305ec6028caa87c1df264073,2011-09-27 09:55:03-04:00,"Merge pull request #93 from markfisher/INT-2136

  Only require 'queue-names' if no container ref"
9f188d7326e607aa4859380ba55dde6c9ded56b1,2011-09-27 12:10:15-04:00,"Merge pull request #94 from garyrussell/INT-2154

  Minor Refactoring"
6e662f48ebf360d2e8a81ed91cce87041ea64847,2011-09-27 12:52:06-04:00,"Merge pull request #84 from markfisher/INT-1931

  add URI variable Expressions to outbound gateway"
6958001f45431ec16db90055ba97c1e9f58bcdc2,2011-09-27 17:03:56-04:00,"Merge pull request #97 from markfisher/INT-2110

  PollerParser correctly prevents multiple triggers"
2a3df6f08faade1bed7e5b2930eed5b5dc7c24fd,2011-09-29 10:42:16-04:00,"Merge pull request #100 from olegz/INT-2150

  fixed copy/paste mistakes
  polishing schema, updated expected-type
  removed one more reference for Twitter4J from xsd
  fixed Twitter schema to remove Twitter4J references"
f78d6021a8e6c2956105cc37fa77d2709ac9f0d1,2011-09-30 09:48:24-04:00,"Merge pull request #103 from markfisher/INT-2149

  Setters now expect a Map with Expression values"
836d04218edb47f3ecd3608dd8c9e70b6af5d7a9,2011-09-30 10:39:45-04:00,"Merge pull request #104 from dturanski/INT-2160

  Create ScriptEngine per execution
  Corrected concurrency issues with JRuby"
ae7a1647269c3593c23c6e208393396989bca114,2011-09-30 15:56:55-04:00,"Merge pull request #81 from markfisher/INT-1761

  initial implementation of XPathFilter"
86df10c69697a4ddabdec09f6d255ef4632aaeac,2011-10-02 12:15:15-04:00,"Merge pull request #107 from garyrussell/INT-2163

  Remove Abstract from Test Case Name
  Fix Failing Test on Windows"
03d6105f5163fc5e36e9288c0bdf1ec909f66db8,2011-10-03 08:17:54-04:00,"Merge pull request #105 from olegz/INT-2100

  simplified ReceivingTask in ImapIdleChannelAdapter"
28dd2571c0093fd5bb1ba5e23c4d3fafc1147d5b,2011-10-04 14:41:35-04:00,"Merge pull request #106 from garyrussell/INT-2162

  INT-2162 Add apply-sequence to TCP Connection Factory
  INT-2154 Refactor TCP ConnectionFactorys to facilitate subclassing
  INT-2050 Code Polishing"
5bec13ebd22e4c35c81cb9e069ef9c6fe4e5b48c,2011-10-04 15:55:05-04:00,"Merge pull request #80 from markfisher/INT-2124

  add support for 'converter' on <xpath-router>"
90061778a44a738ee790b7333ea62ecb70eecb0a,2011-10-06 07:34:58-04:00,"Merge pull request #109 from garyrussell/INT-2168

  Reinstate Port in Tcp Connection Id"
86e59c8d3f63c0d4c35152aa9b44dc7a61f5fcc4,2011-10-06 09:02:33-04:00,"Merge pull request #62 from olegz/INT-2031

* INT-2031, INT-2122:
  Added support to fall back on FIFO semantics to the PriorityChannel
  Will fallback if the default priority-header comparator has a tie
  Will also fallback if a custom Comparator has a tie
  Changed type of PRIORITY header to be Long instead of Integer"
fb1b1b7d7fa70d5559e337f5bf7e3e1f2d761c15,2011-10-10 10:19:56-04:00,"Merge pull request #114 from olegz/INT-2135-gemfire-patch

  Fixed failing Gemfire tests
  Commented one test with @Ignore (temporarily) since it uses namespace-based configuration where ignoreJta attribute is not exposed, changing configuration to a <bean> style would defeat the purpose of the test"
fd1781b095143931c8830f311cb02b29c576e9eb,2011-10-10 12:05:51-04:00,"Merge pull request #113 from olegz/INT-2169

* INT-2169:
  added delegate setters to DefaultSftpSessionFactory for the remaining properties of com.jcraft.jsch.Session"
6e2f5064e8019c94a6e5dc952266a2160841a0ee,2011-10-10 12:39:42-04:00,"Merge pull request #115 from olegz/INT-2135-mongo-patch

  fixed NPE in MongoDbMessageStore
  removed XSD versions from Gemfire test configs"
60e302dd4f66bb992d0a906a049d6da41963863f,2011-10-10 15:55:18-04:00,"Merge pull request #117 from markfisher/INT-2170

  add setMessageConverter to inbound gateway"
3e1b0596bb9f3bbc59b76cecab45f63197169e5b,2011-10-10 16:51:18-04:00,"Merge pull request #119 from markfisher/INT-1868

  fallback if proxy does not support Queue* types"
2502c4bb6130c22039734161b4a375875bc84f5e,2011-10-12 09:01:16-04:00,"Merge pull request #112 from ghillert/INT-1803

  Initial draft of the stored proc. adapters

  Code Review Fixes:
    * AbstractReplyProducingMessageHandler - throw MessageHandlingException instead of MessagingException
    * In Parser classes reduce validation logic, where the the Xml Schema already enforces it
    * Better null handling in class ProcedureParameter + more unit tests
    * Refactored the functionality around sqlParameterSourceFactory and usePayloadAsParameterSource
    * Fixed some spelling errors"
d373f90bd70806eae129ede32a71c0d92fe3496f,2011-10-12 10:47:31-04:00,"Merge pull request #118 from markfisher/INT-2171

  using content-* props from the converter"
b0c25bfe4a410baa6a1f15f46e8e10f4f101cb4e,2011-10-12 13:06:44-04:00,"Merge pull request #111 from markfisher/INT-1878

* INT-1878:
  initial implementation of AMQP channels"
d666e664cc2d8845423f78abcebecc0ab75b94f3,2011-10-12 13:25:22-04:00,"Merge pull request #121 from markfisher/INT-2157

  uncommented schema version check"
a8e752e486d66faf3d66a59b690308f741629d17,2011-10-13 17:16:34-04:00,"Merge pull request #122 from garyrussell/INT-2179

  Fix NPE If Connection Id Header Missing"
0c15ee1516f91b53c634d77b4c0f3512636024d2,2011-10-15 13:52:26-04:00,"Merge pull request #127 from garyrussell/INT-1770

  Support Client Mode For TCP Endpoints"
1d80d34225f99ccca4505f3d2b408f9466c844b2,2011-10-15 13:55:57-04:00,"Merge pull request #128 from garyrussell/INT-2183

  Fix Multicast Regression Issue"
619356c986ef4b724aecf0546feab81354ee062c,2011-10-15 14:00:43-04:00,"Merge pull request #124 from dturanski/INT-2177

  Added python support and related refactoring
  Improved exception handling. Made ScriptExecutorFactory abstract"
d9d3c14a6c0aee4d6c16fec2b6a7e93e71dbfc39,2011-10-15 14:11:26-04:00,"Merge pull request #126 from ghillert/INT-2133

  Update Router Documentation"
120382ea650c81c551a2a554cd51244fa08ee228,2011-10-15 14:27:23-04:00,"Merge pull request #123 from olegz/INT-1977

  log WARN message for irrelevant extractPayload"
40c46c0f3c76e66c5563d0bf1aa5c1fff3478aa0,2011-10-17 11:46:27-04:00,"Merge pull request #129 from garyrussell/INT-1872

  Allow Indefinite Socket Timeout"
559bab4750f6df39d376c4eb80e84eb4c3559e39,2011-10-17 11:54:39-04:00,"Merge pull request #130 from garyrussell/INT-2167

  Code Polishing"
41f1d510474470210dfa28c2aa79cb4dafcacb74,2011-10-17 11:58:30-04:00,"Merge pull request #132 from garyrussell/INT-2184

  Lifecycle Problem With TCP OB Adapter"
288452654336e4de910539b8efb88eb5f57ea2be,2011-10-18 18:09:39-04:00,"Merge pull request #133 from olegz/INT-1813

* INT-1813:
  polishing
  INT-1813 added support for recognizig default components Added support for recognizing default components in parent ApplicationContext before they get auto-registered in child AC"
1e5f24fb091e4bdcc324a435ae954a9977e327bb,2011-10-19 10:23:39-04:00,"Merge pull request #136 from olegz/INT-1296

  refactored Aggregator/Resequencer schemas and parsers"
6e36c267ed5c67a58e86d6f694fb1b7f23239823,2011-10-19 10:46:46-04:00,"Merge pull request #137 from olegz/INT-2103

  added 'auto-startup' to FTP inbound adapter"
22c43a199b445c0aa0cf5acf0b1839546f4a9c87,2011-10-19 11:36:00-04:00,"Merge pull request #138 from olegz/INT-1908

  paremeterized with H for 'handler'
  Refactored FileWritingMessageHandlerFactoryBean"
c0fbcc6dba0b1ce6e12c0d338e106bd756eb62c5,2011-10-19 14:02:06-04:00,"Merge pull request #135 from olegz/INT-2048

  Improved check for existing directories"
761a797ee126211be8bc51121543f5aceba2ac8c,2011-10-19 15:49:01-04:00,"Merge pull request #139 from olegz/INT-1844

  Added support for generating local file name for FTP and SFTP inbound adapters"
821a8c0061d84f907637094a62f6b4afa5e43cf5,2011-10-19 17:08:36-04:00,Merge pull request #131 from olegz/INT-2146
0691d013bba84cd9787a469f65124d007f1437df,2011-10-20 07:48:18-04:00,"Merge pull request #146 from olegz/INT-2192

  upgraded Redis module to spring-data-redis-1.0.0.RC1"
8c2adf748f79b2d1ece68d5223e731c8a1c8d1d1,2011-10-20 10:32:22-04:00,"Merge pull request #142 from ghillert/INT-2186

* INT-2186:
  Update Docs of the SI XML Module for SI 2.1"
ed386c2fc38546a836a630fbdb3b259e1dab2ad0,2011-10-20 10:58:47-04:00,"Merge pull request #143 from ghillert/INT-2189

  The expression attribute is now required for the xpath-expression element."
950fcf9a21d49b29db1bf525486d7bdd9e956469,2011-10-20 13:59:48-04:00,"Merge pull request #144 from olegz/INT-2103

  added auto-startup to FTP/SFTP schemas

  refactored FTP/SFTP schemas to eliminate duplication"
60bcfb1d7b1983dacae22c1fce514a55074df21b,2011-10-21 10:16:53-04:00,"Merge pull request #147 from ghillert/INT-2191

  XPath Expression Namespace Parser: Improve Validation"
2969ec786ef10810ea92d875ec0bc710bb96366c,2011-10-21 16:00:53-04:00,"Merge pull request #149 from ghillert/INT-2173

  Add doc for calling no-arg Gateway methods"
f11b17f9fbebe77b98a06925e032f85f606f2054,2011-10-21 16:04:20-04:00,"Merge pull request #148 from markfisher/INT-2196

* INT-2196:
  polishing
  enable asyncExecutor to be configured on gateways"
027af031da39f7056ff6175a84d3b390d8424a58,2011-10-21 16:12:44-04:00,"Merge pull request #134 from markfisher/INT-2095

  remove channel-resolver attribute"
24714fa71106f36a7df76cd342d8e7a6ceac8ab6,2011-10-25 12:00:28-05:00,"Merge pull request #152 from olegz/INT-2182

INT-2182"
1cf058489f22807bf3e953a6d6c94085f16c27a1,2011-10-25 12:42:41-05:00,"Merge pull request #150 and #151 from markfisher/INT-2198

  initial implementation"
ed483824989a0f1cefcd823ba6580d5d5b8f1930,2011-10-31 10:13:07-04:00,"Merge pull request #156 from ghillert/INT-2205

  Fix documentation for Claim Check"
1148e8b75d1d290db1e0ecf75e6ca13b611eaa6e,2011-10-31 15:36:24-04:00,"Merge pull request #157 from markfisher/INT-2210

  enable interceptors for AMQP channels"
61b7108f72290938f52ce1c15044fde52f421462,2011-10-31 15:39:07-04:00,"Merge pull request #158 from garyrussell/INT-2202

  Add auto-startup To Inbound Endpoints"
bcc17ee49717deba6d5aa7790e04721645bcd9fe,2011-11-01 17:07:58-04:00,"Merge pull request #162 from olegz/INT-2212

  fixed NPE in AbstractKeyValueMessageStore"
aef0f4780e1f9b4754563cdd9ead121c6780b0d8,2011-11-02 10:08:54-04:00,"Merge pull request #159 from ghillert/INT-2055

  Describe 'ignore-send-failures' attribute better"
6ffc107a3a73c2fe8b1bd6292d17678e293165be,2011-11-02 11:34:16-04:00,"Merge pull request #163 from ghillert/INT-2215

  Refactor Claim Check Schema Definition"
02b31299c3c80433862e9f9f7c78297f7af10586,2011-11-02 13:20:55-04:00,"Merge pull request #164 from ghillert/INT-2219

  Setting the ""auto-startup"" attribute on Aggregators not possible

  For reference see: https://jira.springsource.org/browse/INT-2219"
fd35d23ee5ceff0539a3dd56dc1759b2f063f820,2011-11-03 11:11:56-04:00,"Merge pull request #166 from olegz/INT-2212

  removed dependency on removed Message when disassociating it from MessageGroupMetadata"
73a63f706683c4ad107677ef844caecab537a219,2011-11-03 13:13:49-04:00,"Merge pull request #165 from markfisher/INT-2178

  Refactored AMQP channels"
9ddd7a8ec7083a71f9dcb508998ca33c766a32e6,2011-11-03 15:16:20-04:00,"Merge pull request #167 from markfisher/INT-2221

  fixed atomicity"
934a1788a9a20851c7241de48ddb968d066e2654,2011-11-03 16:41:38-04:00,"Merge pull request #168 from ghillert/INT-2223

  Allow for Enriching Map Payloads

  see https://jira.springsource.org/browse/INT-2223"
68875ca435d20550d627c3f4dcfd9a56f3943c2b,2011-11-04 13:49:13-04:00,"Merge pull request #169 from ghillert/INT-2224

  Enricher - Allow to send a sub-set of the payload

  see also: https://jira.springsource.org/browse/INT-2224"
434e97a1e30ecd173c38b136f237353241a68baf,2011-11-07 04:51:51-05:00,"Merge pull request #170 from olegz/INT-2220

  polished Gemfire tests"
e44946391beb4271e53f9f3a0a60ce4b2f794bde,2011-11-07 04:59:16-05:00,"Merge pull request #172 from olegz/INT-2226

  refactored SimpleMessageStore addressed concurrency issues prompted by INT-2221

  changed the logic to ensure the existence of MessageGroup for any operation other than addMessageToGroup where such group might be created as well"
7e30f7df9e37c299e96878bf44974337cc6c1ff2,2011-11-10 14:32:27-05:00,"Merge pull request #174 from garyrussell/INT-2207

  Add Documentation for JSON Transformers"
a95e88aba644d0f927704f8e50ee8d4c54feb0c1,2011-11-10 15:33:00-05:00,"Merge pull request #175 from ghillert/INT-2228

  Enricher fixes based on code review

  Content Enricher - request-channel should be optional

  see also: https://jira.springsource.org/browse/INT-2228"
5ade6548ec800308faa1fc5a5b50e1d1cd024167,2011-11-10 15:36:41-05:00,"Merge pull request #176 from olegz/INT-2213

  added support for specifying 'temporary-remote-directory' as well as 'temporary-remote-directory-expression'"
a9c45294ae35d55db86e804526aa76966fc6943a,2011-11-10 15:41:17-05:00,"Merge pull request #178 from ghillert/INT-2199

  Add documentation for Content Enricher"
646bc72615c195faff51737f59f27074a426676f,2011-11-10 15:45:55-05:00,"Merge pull request #179 from garyrussell/INT-2232

  GCIBPP Don't Emit Stack Trace"
e20c0e0efae73520415c4920addcae4a4034fe55,2011-11-10 17:17:44-05:00,"Merge pull request #161 from artembilan/INT-2188

  INT-2188 and INT-2165"
92fa58769fb42d5db30263a223cf05504b26b79e,2011-11-17 08:12:50-05:00,"Merge pull request #180 from ghillert/INT-2195

  Add 'What's new in 2.1' to docs

  For reference see: https://jira.springsource.org/browse/INT-2195"
a0e4fecf9816f119ca743a9fd0cfa10bc903c6b4,2011-11-17 10:56:59-05:00,"Merge pull request #186 from jamescarr/patch-2

  Fixed casing"
9acd3163bced69ec8e5973246df23058407da7cc,2011-11-17 11:16:52-05:00,"Merge pull request #184 from garyrussell/INT-2242

  Fix JavaDocs for FTP File Types"
497d07bdad2d18e8659164ae922a65e10729c23d,2011-11-17 12:51:18-05:00,"Merge pull request #185 from ghillert/INT-2241

  Stored Proc: Add attribute: skipUndeclaredResults

  For reference see: https://jira.springsource.org/browse/INT-2241"
fd96e57e1e3cc0c7afba890104142fd6390736ca,2011-11-17 16:42:12-05:00,"Merge pull request #183 from garyrussell/INT-2035a

  Support Simple Cookie Handling"
448808edb7aaa00e299f46ea37a5683741aaf739,2011-11-18 14:17:00-05:00,"Merge pull request #182 from artembilan/INT-2237

  'Sprig' type-o fix"
e493922437f86c2c0c6a251560bf25ed7e735c73,2011-11-21 08:10:23-05:00,"Merge pull request #194 from markfisher/INT-2251

  request-timeout replaced with reply-timeout for HTTP outbound-gateway"
e16216a18b51f4c4a1e2026413f9ecee825939e7,2011-11-21 12:00:32-05:00,"Merge pull request #195 from olegz/INT-2254

  added support for recognition of a Message to HttpRequestHandlingEndpointSupport"
072a675d651f91f10d4eaf8405ad191e42a906c2,2011-11-21 13:44:17-05:00,"Merge pull request #191 from ghillert/INT-2175

  Add Doc for Stored Proc Components

  For reference see: https://jira.springsource.org/browse/INT-2175"
740246a4198ec86d1524fca628c56456ca777331,2011-11-21 13:49:08-05:00,"Merge pull request #196 from ghillert/INT-2245

  Jdbc Outbound Gateways - Change ""request-timeout"" to ""reply-timeout""

  For reference see: https://jira.springsource.org/browse/INT-2245"
d67736021a2dc3e4447922dbe474da7dd6092edf,2011-11-21 13:55:23-05:00,"Merge pull request #197 from olegz/INT-2255 which includes the changes from pull request #188 from oxlade39/master

  fixed Gemfire CQ parser errors

  Fixed a mistake in the Gemfire AdapterParsers where the element attribute validation is not correctly applied and will never result in the intended behavior."
f2990f5f59e9f1266cc6f279ac5af771966d4a9a,2011-11-21 16:00:15-05:00,Merge pull request #193 from olegz/INT-2231
cc0f3bd425adca5590bdd172e0edc20f162bb762,2011-11-21 17:12:26-05:00,Merge pull request #190 from olegz/INT-2249
d484f651007a8bf6aa1318946559af8e4f43ca00,2011-11-22 08:28:05-05:00,"Merge pull request #199 from olegz/INT-2253

  added support for updating MessageGroup with lastModified timestamp on every touch"
5cac946cf3fd3a25e274a45a3ab6d2d45de50339,2011-11-22 11:52:07-05:00,"Merge pull request #200 from ghillert/INT-2216

  For Payload Enricher - add: 'request-timeout' and 'reply-timeout' attributes

  For reference see: https://jira.springsource.org/browse/INT-2216"
72c8fff42184136b945cfb604ce698ddce752d8e,2011-11-22 14:09:17-05:00,"Merge pull request #201 from markfisher/INT-2235 which builds upon PR #181 from olegz/INT-2235

  fixed polling period and renamed test class

  ElementFilter now CollectionFilter"
11592a5dd2ce38a81a0d47e4ad4d3bc2df6cceee,2011-11-22 15:08:45-05:00,"Merge pull request #202 from ghillert/INT-2257

  Payload Enricher - Handle ""Null"" Messages due to reply-timeout"
910675be3941ac1dc8a5ce7cd10381b820aa8034,2011-11-22 15:33:47-05:00,"Merge pull request #203 from markfisher/INT-2259

  added wrapper for ConversionServiceFactoryBean"
51e706983f547bc8f94660b678f96bd289c22a1c,2011-11-22 15:43:13-05:00,"Merge pull request #187 from ghillert/INT-2246

  Add attribute ""max-rows-per-poll"" to Jdbc Outbound Gateway

  For reference see: https://jira.springsource.org/browse/INT-2246"
ff7bbfa40418be94bdecd37d6030941785521dff,2011-11-22 16:55:10-05:00,"Merge pull request #204 from ghillert/INT-2258

  In enricher: add setRequiresReply to XSD for the ContentEnricher. This attribute defaults to 'true'."
df440d5059dd4febdbe66bb51c96f957e4796a98,2011-11-22 17:07:46-05:00,"Merge pull request #189 from olegz/INT-2083

  HeaderMapper refactoring"
0b25a6dd994a04c7099a68234944f8b299f1a053,2011-11-22 19:37:33-05:00,Merge pull request #192 from artembilan/INT-1906
b1680a0cdff448a9cf8967fa5c144f492505f5b4,2011-11-22 21:15:18-05:00,Merge pull request #205 from olegz/INT-2238
fa977d96ca12d0cbf22e5190dcbb5bdb32748bd4,2011-11-23 08:05:14-05:00,"Merge pull request #206 from markfisher/INT-2164-quickfix-for-2.1

* INT-2164-quickfix-for-2.1:
  catching and ignoring Exception"
cadbed3523f37abe7ca7d898bfc70c3a3d792e14,2011-11-23 15:08:32-05:00,Merge pull request #209 from olegz/INT-2235-updated
0494f4355c31502d66347b2e595e71d4fcdef087,2011-11-23 16:37:58-05:00,"Merge pull request #210 from olegz/INT-2270

  INT-2270 upgraded Groovy module to Groovy 1.8.4"
a979d7c06c3e86cf45a857fd2750e79a8f6e579c,2011-11-28 14:57:40-05:00,"Merge pull request #215 from olegz/INT-2279

  INT-2279 upgraded Spring WS to 2.0.3"
91b0f46c4427aafc4ad5403be11f403cc4ae6a3a,2011-11-28 15:56:36-05:00,"Merge pull request #216 from olegz/INT-2278

  INT-2278: fixed the bug affecting renaming of files"
c22ef922a5cd44afa5cdb51c3fba126e1d5d9b49,2011-11-28 17:33:17-05:00,Merge pull request #217 from olegz/INT-2265
705e17f1d33af6b41fe664b8e70d76f91362fc40,2011-11-29 11:43:17-05:00,"Merge pull request #219 from olegz/INT-2280

  INT-2280 polishing Jdbc tests hoping to avoid intermittent failures"
841d80849248fef41e9ad78c1c6b6b3d837925e5,2011-11-29 11:49:12-05:00,"Merge pull request #220 from olegz/INT-2283

  INT-2283 upgraded SFTP module to JSCH v0.1.45"
5c606dfcb407316e49da816c217d81f3c20b4f4c,2011-11-29 11:53:11-05:00,"Merge pull request #222 from garyrussell/INT-2268

  INT-2268 Fix Spurious Failing Test"
90c4f869418277530179614ac9aacc318a30502d,2011-11-29 14:34:51-05:00,"Merge pull request #223 from olegz/INT-2267

  INT-2267 removed test compile warnings"
baa127d4bfa2a02a3c62e88a255378726bb5a37a,2011-11-30 16:20:53-05:00,"Merge pull request #225 from garyrussell/INT-2035b

  INT-2035 Remove Dangling Import"
1d80b44dcefd6c57a8096a41edd6003452b476cf,2011-11-30 16:23:57-05:00,"Merge pull request #226 from garyrussell/INT-2287

  INT-2287 Timing Hole With Send-and-Forget TCP"
81cd06472e69557dbca8eae162d6194a3ef6c3ea,2011-11-30 17:07:02-05:00,"Merge pull request #221 from olegz/INT-2282

  INT-2282, INT-2284

  added general Message Store section to reference manual

  added GemfireMessageStore section"
d15f852ad598687349bb61e554dfeac6c14a55c9,2011-12-01 09:39:09-05:00,Merge pull request #228 from olegz/INT-2261
801ba439bea5bdb609dca6d2555f5cd59693208e,2011-12-01 13:12:27-05:00,"Merge pull request #229 from olegz/INT-2291

  INT-2291 fixed failing test"
8890d1b13eecf6757a49becd3e572cbcb07c43fd,2011-12-02 14:14:27-05:00,Merge pull request #214 from artembilan/INT-2273
d183ec3a69d41af3c5cb203afd1c7857bc30bf49,2011-12-02 14:41:55-05:00,"Merge pull request #213 from artembilan/INT-2274

  INT-2274: Manual: Limitation of usage scoped beans in the command scripts for Groovy Control Bus."
47292246041fccb1e22f4b902da2d84dd7514763,2011-12-02 16:05:31-05:00,"Merge pull request #231 from ghillert/INT-2233

  INT-2233 - Updated links to Github Reworded some of the paragraphs."
b6ded0de5e54794d4255f63620f434067c5ebcfc,2011-12-02 16:12:00-05:00,"Merge pull request #233 from ghillert/INT-2244

  Add ExpressionEvaluatingSqlParameterSourceFactory example to Reference Manual

  For reference see: https://jira.springsource.org/browse/INT-2244"
ff028936b6ac4e0865b7533909b962516f2b4c5b,2011-12-09 15:23:06-05:00,"Merge pull request #238 from garyrussell/INT-2294 which built upon pull request #237 from markfisher/INT-2294

  INT-2294:

  Add SoapHeaderMapper Unit Tests

  Fixed null check for soapHeader (rather than source)"
635e1abdcafd1cb2714c990febf783be507f3a23,2011-12-09 15:27:10-05:00,"Merge pull request #236 from markfisher/INT-1868a

  INT-1868 using generic JMS 1.1 API only"
de5ae9147edcae0b9e0c0be525ef9decacd9f29b,2011-12-12 15:05:24-05:00,"Merge pull request #234 from garyrussell/INT-2298

  INT-2298 Remove Versions From Schemas in Reference"
bc46186ba07ea533d0054b42c9f0555395c8a4a9,2011-12-12 15:10:48-05:00,"Merge pull request #239 from markfisher/spring-3_1-dep

  updated HTTP module for 3.1 support"
7a3a667ea42c03468c4dda437410ebbe2e305a01,2011-12-12 16:59:04-05:00,"Merge pull request #240 from markfisher/INT-2281

  refactored test code for compatibility with Spring Security 3.1"
e306e5f1e111271c16dd8c7970ebdb41830f2a1f,2011-12-14 11:40:24-05:00,"Merge pull request #227 from artembilan/INT-2288

  ResourceInboundChannelAdapterParserTests is now independent of OS

  Added @After to remove files in tests"
6c868472d808b572f33f37b30955d7e26eebce80,2011-12-14 11:48:06-05:00,"Merge pull request #235 from artembilan/INT-2300

  INT-2300: Manual: update xpath-router sample"
7bfd97888c8f1c26639f230cfe023f08e82c5ad9,2011-12-14 17:40:55-05:00,"Merge pull request #243 from olegz/INT-2297-new

  INT-2297-new lighter version of addressing cache-sessions deprecation for FTP/SFTP"
9deb63a43ad43f80972e5d0d35c2dd6ab9787d37,2011-12-15 15:41:21-05:00,"Merge pull request #245 from olegz/INT-2291

  INT-2291 polished test"
052c325dfa1d1fd069c36e39a45825a6341277c1,2011-12-15 16:11:37-05:00,"Merge pull request #242 from olegz/INT-2295

  INT-2295 fixed parser logic to eliminate STS warning"
dd8c0aa8fc62c101c4b8c8795a28076d9408132d,2011-12-15 17:16:45-05:00,"Merge pull request #244 from olegz/INT-2299

  moved ChannelResolver setter call to configureRouter() method

  put back 'channel-resolver' attribute with deprecation warnings"
8c2b7dcdf2e60ac780b065998e01562e0301666f,2011-12-15 17:58:14-05:00,"Merge pull request #246 from olegz/INT-2306

  INT-2306: fixed populateUserDefinedHeaders() to account for standard headers (bypassing them)"
a009a05dc357aed75d4cde1c3e806c6930dfb54b,2011-12-16 16:19:12-05:00,"Merge pull request #211 from artembilan/INT-2236

  INT-2236: limitations while using persistent MessageStore"
5f19e731acf3c8f7bb6e595b3ca5b227f992f975,2011-12-19 10:30:15-05:00,"Merge pull request #252 from olegz/INT-2291

  INT-2291

  * polished MixedDispatcherConfigurationScenarioTests.failoverNoLoadBalancingWithExecutorConcurrent() test even more
  * introduced 'taskSubmissionMonitor' as CountDownLatch to ensure that shutdown command is not called until all tasks are submitted
  * also made sure that ExecutorChannel is using the same task executor so shutdown command actually shuts down the same executor"
962fcb000a302a8ab37afed4cf343fadfe6f85ac,2011-12-19 12:43:27-05:00,"Merge pull request #250 from garyrussell/INT-2313

  INT-2313 Avoid Naming Conflicts With Mutliple Ctx
  INT-2307 added MBeanExporterHelper to avoid conflicts with core MBeanExporter"
6f10e92f776905127fb917cd62abba0fc2a85853,2011-12-19 15:34:51-05:00,"Merge pull request #249 from markfisher/INT-2301

  added reply-timeout support for WS inbound-gateway"
092fa44552076291878c93cc375d997af36ae672,2011-12-19 15:42:29-05:00,"Merge pull request #251 from artembilan/INT-2315

  headerValueRouter chain mapping minOcc=0"
de47b504948600b99e0090d8a13be10e6eeccc0b,2011-12-19 15:49:59-05:00,"Merge pull request #253 from ghillert/INT-2314

  Document use-payload-as-parameter-source attribute"
928438bdd76a58591cf7919bfbd2556a58e2d6e9,2011-12-19 19:42:57-05:00,Merge pull request #248 from olegz/INT-2311
ba9041d641a97c9fd65c69d08113051e6037a62d,2011-12-20 09:25:46-05:00,Merge pull request #255 from markfisher/INT-2320
49482dd0db4f0f2a6f9990cdb5fa696972cea45a,2011-12-20 11:14:21-05:00,"Merge pull request #256 from artembilan/INT-2316

  INT-2316: xsd improve for reply- & error-channels"
41be270170ebae943b66b2a57996438ce2d46296,2011-12-20 12:14:54-05:00,"Merge pull request #257 from olegz/SONAR

  INT-2323"
9f0dd7d0cd2a6f0ccc3e55282f7e053b33a9af4f,2011-12-20 13:43:38-05:00,Merge pull request #260 from markfisher/INT-2322
d07975319fa45ed0b0a7f9b3cab92c863e4e1a57,2011-12-20 14:07:35-05:00,Merge pull request #259 from olegz/INT-2321
81fdf511ff894d971deb57fe8d36c99b38362e76,2011-12-20 14:11:32-05:00,Merge pull request #258 from olegz/INT-2319-v2
8ebf99a0a8831090d8c78c9e78a16ca783b9051b,2011-12-21 10:29:25-05:00,Merge pull request #263 from artembilan/INT-2325
12b4fb6bca4066126e558f9cb23640c3cba51825,2011-12-21 10:59:56-05:00,"Merge pull request #264 from olegz/INT-2327

  INT-2327 added Null check to SubscribableJmsChannel"
a6300bc497f86b94dd59bc4c1a2861634db88cdd,2011-12-21 11:02:38-05:00,"Merge pull request #265 from olegz/INT-2328

  INT-2328 added Null checks to SubscribableRedisChannel"
6e7654c97d53fc1546ab88367358cc40d3c82e3b,2011-12-22 08:39:13-05:00,"Merge pull request #271 garyrussell/INT-2332

  INT-2332 Remove Benign Exceptions From Maven Build"
0d50f671e30625e404f8c7bdde37ac1774639f4a,2011-12-22 09:11:38-05:00,"Merge pull request #272 from olegz/INT-2331

  INT-2331 fixed aggregator documentation"
2dce55f39ed98ba668a67c283f2303f8196f5899,2011-12-22 12:35:36-05:00,"Merge pull request #274 from ghillert/INT-2330

  INT-2330 - Upgrade to Apache commons-net 3.0.1

  For reference see: https://jira.springsource.org/browse/INT-2330"
1a7dae5f270ec8050c0a5e41dc1a7b3bde6684d1,2011-12-22 15:54:07-05:00,"Merge pull request #276 from garyrussell/INT-2333

  INT-2333 Work Around for MAC OSX JVM Bug"
52dd9e8aabd45625c2c746b5d6dc32a6f8f56cb0,2011-12-22 16:42:12-05:00,"Merge pull request #277 from garyrussell/INT-2333a

  INT-2333 Mac OSX TCP Workaround on Server Side"
953d8a62d2855bb5dae5063d7e1d9ca0d9badd86,2011-12-22 22:46:42-05:00,"Merge pull request #282 from olegz/INT-2338

  INT-2338 added MessageHistory tests to all implementations of MessageStore"
1435dc5794356c3decf55a59caac1716ccc0c502,2011-12-22 23:26:00-05:00,"Merge pull request #281 from olegz/INT-2334

  INT-2334 Fix for MongoDbMessageStore storing MessageHistory"
4de72a3fe6cebdb56bffa6996408a770f7226ae8,2011-12-23 10:48:11-05:00,"Merge pull request #283 from ghillert/INT-2339

  INT-2339 - Make spring-tx an explicit dependency for the Spring Integration MongoDb Module

  remove unnecessary spring-context dependencies since it's brought in spring-tx"
f5cabd80853c6c35b33ee6468fcd1a7feb7011c4,2012-01-03 11:18:48-05:00,"Merge pull request #284 from markfisher/INT-2342

* INT-2342:
  INT-2342"
6d033bae4a1063438dac0ffbd372012146d2ebb0,2012-01-03 11:44:53-05:00,"Merge pull request #285 from garyrussell/INT-2347

* INT-2347:
  INT-2347 Update Channel Mappings Atomically"
2f2d491ec89f3ab70a8e55e1c06530d9da685eb9,2012-01-03 13:03:43-05:00,"Merge pull request #287 from garyrussell/INT-2346

  INT-2346 Add ToC to Acrobat Bookmarks Pane"
0e3c70d798284659167e2dbd8893ac8630857dd3,2012-01-03 15:30:39-05:00,"Merge pull request #289 from olegz/INT-2344

  added documentation about mapped-request/reply-headers

  change javadoc in DefaultAmqpHeaderMapper"
a017836b260db88fbbd3f4eb64edad1e9eca5267,2012-01-03 16:42:17-05:00,"Merge pull request #288 from olegz/INT-2350

  INT-2350 fixed FtpSession improved logic that deals with creating multiple directories independent of the OS hosting FTP server"
b23131a09e46de1cb9844edd2a885413a011dd96,2012-01-04 11:20:51-05:00,"Merge pull request #292 from olegz/INT-2353

  INT-2353 upgraded scripting and groovy module to Groovy 1.8.5"
9378ee8d4c988cbb9cb94013aa97a64181bbaa11,2012-01-04 11:31:47-05:00,"Merge pull request #291 from artembilan/INT-2345

  INT-2345: Doc: 'async-executor' for <gateway/>"
0286e5fe6bd8d57e3fc4eac2ac7567ae41e480ef,2012-01-04 15:05:43-05:00,"Merge pull request #295 from garyrussell/INT-2355

  INT-2355 Update Mockito to 1.9.0"
770b4c22db17be5ba0e3dfb07ba7f4f2a09e314d,2012-01-04 15:09:43-05:00,"Merge pull request #296 from ghillert/INT-2356

  INT-2356 - Update Jackson to 1.9.2 For reference see: https://jira.springsource.org/browse/INT-2356"
c90b61e7d88913d073e7aacc02dddcd1cd365e4f,2012-01-05 09:42:00-05:00,"Merge pull request #298 from olegz/INT-2358

* INT-2358:
  INT-2358"
f612328a86beec66cdcf98d842d0cdef7e09066e,2012-01-05 09:50:53-05:00,"Merge pull request #299 from olegz/INT-2357

  INT-2357 upgraded XMPP to Smack 3.2.1"
55a6f87bc70098ed6631882156eac4af979921aa,2012-01-05 10:49:40-05:00,"Merge pull request #297 from garyrussell/INT-2354

  INT-2354 Fix Race Condition in Tests"
0ac14b70954526c8f8240bc2a99a1cd6ee5e0419,2012-01-05 14:43:22-05:00,Merge pull request #300 from garyrussell/INT-2359
87fdf08fee52e2f6e755c5961405df3304821ff0,2012-01-05 15:30:57-05:00,Merge pull request #302 from garyrussell/INT-2359a
557822954bc3b447d0f3d5f9cdd49d2eaa0593dc,2012-01-05 16:19:21-05:00,Merge pull request #303 from ghillert/INT-2359-GH
58602d480224ed77b7dbbf1e3643db81c15e56f6,2012-01-05 16:57:18-05:00,Merge pull request #301 from olegz/INT-2351-v2
ae0ecff8863e00ad4665106f06bfc8227bdcbecc,2012-01-05 17:19:45-05:00,"Merge pull request #305 from olegz/INT-2387

  INT-2387 changed mkdir() method in Session to return boolean"
0534a89690af0daae5eb70ef2637d9759f5e745e,2012-01-05 18:20:56-05:00,"Merge pull request #306 from garyrussell/INT-2359b

  INT-2364 package-info File Base Package"
10a384a6d1d1bab68a2d5e9d2b2cf7ea2f717ad9,2012-01-13 13:22:31-05:00,"Merge pull request #316 from garyrussell/INT-2400

  NT-2400 Fix tool:expected-type Classes"
277ba477a485aeca5d29f83c1c31fadf2b485c73,2012-01-13 14:26:11-05:00,"Merge pull request #318 from garyrussell/INT-2400a

  INT-2400 More expected-type Fixes"
c19191fe70f54d4e8e6f6f34d38076d98975a86a,2012-01-23 09:58:50-05:00,"Merge pull request #331 from cbeams/gradle

  Improve api doc generation

  Upgrade to Gradle 1.0-milestone-8 snapshot"
e7b514a1e466c7e895186e6212d8c37b49704498,2012-01-23 10:01:57-05:00,"Merge pull request #312 from ghillert/INT-2393

  INT-2393 Add Sonar Support (Gradle Plugin)"
dc002d9bfcc7e332170435a729acb77b4519aaad,2012-01-23 10:13:18-05:00,"Merge pull request #328 from garyrussell/INT-2407

  INT-2404 Fix Auto-Created Channel; Event, TCP, UDP"
ce622744460bb8c4e69fc6accd0bf69584048a91,2012-01-23 10:16:24-05:00,Merge pull request #332 from garyrussell/springNature
29e1e289d235d0a7cbab54dff0898db6a98099a5,2012-01-23 10:24:53-05:00,Merge pull request #333 from garyrussell/INT-2406
9970cb03b4f8ae52748a421f487e0a2f423d9264,2012-01-23 10:27:48-05:00,"Merge pull request #335 from garyrussell/INT-2402

  INT-2402 Fix Versioned Schema Example"
e39a40581d59eb4b9d0f4e91832b2223fac815fd,2012-01-23 10:31:27-05:00,"Merge pull request #336 from garyrussell/INT-2411

  INT-2411 default-output-channel Ignored on RLR"
03af248b550f3b199181a49c7b11fc81060f3513,2012-01-23 10:36:00-05:00,"Merge pull request #337 from garyrussell/INT-2413

  INT-2413 <int-jmx:mbean-export/> And <control-bus>"
235fb0e82ea0357d5aebfdc6b40d6e2f3d3fda00,2012-01-23 10:43:19-05:00,"Merge pull request #324 from artembilan/INT-2180

  INT-2180: fix Delayer's scheduler docs"
670495c6c0015604a73b648135f25ba8911ba2d6,2012-01-23 12:14:03-05:00,Merge pull request #338 from garyrussell/INT-2415
0be3dbc5c91b01c3a2dc5cd808f84d8c4dfd98d0,2012-01-30 10:08:17-05:00,"Merge pull request #339 from garyrussell/INT-2414

  INT-2414 Error When container-class Supplied"
3518f3cb4eaf2bb42e969e3c592db367dc833419,2012-01-30 10:15:10-05:00,"INT-2409 Fix STS 'Missing Bean' Warnings

Some generated bean names (e.g. LoggingHandler) cause
warnings in STS:

(Warning ""Referenced bean
'org.springframework.integration.handler.LoggingHandler#0' not found"")

Fix is to register these beans as components so an event is fired."
e21917499057b70dd79b2bc31b490ec01e0c35fb,2012-01-30 10:15:47-05:00,"Merge pull request #341 from garyrussell/INT-2409

  INT-2409 Fix STS 'Missing Bean' Warnings"
251ee040c9ccadb19b23fa59f271b2844082703d,2012-01-30 10:18:59-05:00,"Merge pull request #342 from garyrussell/INT-2418

  INT-2418 Pool Size and NIO"
3ab14bdd2c55b5dd80e95f0c04e062349a2c1eba,2012-02-06 09:54:42-05:00,"Merge pull request #343 from ghillert/INT-2423

  Removed 'KEEP_RELEASED_MESSAGES' constant from AbstractCorrelatingMessageHandlerParser

  Removed 'keep-released-messages' attribute

  For reference see: https://jira.springsource.org/browse/INT-2423"
51da77d14d535f6f8cda9979528e06951bb352ea,2012-02-06 09:59:46-05:00,"INT-2399 fix processMessage for service-activator

ServiceActivatorFactoryBean#createMessageProcessingHandler: force 'processMessage' method-name parameter into constructor ServiceActivatingHandler for MessageProcessor
Test for check 'handlerMethods' in ServiceActivatingHandler's MethodInvokingMessageProcessor
Integration test for <service-activator> with invalid Groovy inline script"
a55cb2c18b41753704094b3e2136c718cb0eea4a,2012-02-06 10:00:45-05:00,"Merge pull request #323 from artembilan/INT-2399

  INT-2399 fix processMessage for service-activator"
caa25251a99b659aa141b4a1fe8eb26cda6ca26b,2012-02-06 10:18:18-05:00,"Merge pull request #325 from artembilan/INT-2405

  INT-2405 fix MessageProcessor for <header-value>"
8789d850b3f382be3a738f82c298aabc455e77fc,2012-02-13 08:34:46-05:00,Merge pull request #344 from olegz/INT-1734
797806811b684616a382d0eb34806e35a3a436b6,2012-02-13 12:05:11-05:00,Merge pull request #346 from olegz/INT-2412
894d145af48c14f1771fd58c049f7c4000eafb00,2012-02-13 12:15:08-05:00,"Merge pull request #349 from garyrussell/INT-2427

  INT-2427 Fix Types of AMQP Outbound Endpoints"
0e6a36b4c36691eb6a96b1971f6ecc368e05a2a4,2012-03-05 21:57:51-05:00,"Merge pull request #361 from olegz/INT-2437

  INT-2437 upgraded spring-data-mongo to 1.0.1"
fa91813ddd467d81ad20f43a3cbecb11822be55a,2012-03-08 10:20:58-05:00,"INT-2442
Fixed DefaultSftpSessionFactory#OptimisticUserInfoImpl to additionally implement UIKeyboardInteractive, tested with both right and wrong password."
8fd0376b6cd4553841a6dfc8e97a3e6b1c463eb9,2012-03-08 10:50:22-05:00,"Merge pull request #364 from olegz/INT-2442

INT-2442 Fix DefaultSftpSessionFactory#OptimisticUserInfoImpl"
d4a6fe380242643318fbe853e4969d1e1fd97747,2012-03-08 14:04:28-05:00,"Merge pull request #372 from olegz/INT-2445-v2

INT-2445 Fix NotWritablePropertyException"
b45bc645e75c1e0c4c5845e8b89187793fb5e1c4,2012-03-08 15:04:36-05:00,"Merge pull request #354 from olegz/INT-2428/29

INT-2428/29 FTP Documentation Improvements"
2642f363867f7516ee3de7be549a65852b9acd87,2012-03-09 11:10:49-05:00,Merge pull request #366 from ghillert/INT-2430
ba0d41e3b76c86a7f6aa327d45d48b2d6e55123b,2012-03-12 12:03:31-04:00,Merge pull request #373 from ghillert/INT-2443
146067c57e330ae43fdbf9f2a48b62310f4eb06e,2012-03-12 13:28:34-04:00,Merge pull request #374 from ghillert/INT-2461
6c7f7c3eb080ed0cd1323dbbbfedb2015bb3279b,2012-03-13 11:22:54-04:00,"INT-2439 PollerParser adviceChain.add(customBean)

Fix PollerParser#configureAdviceChain for adding 'customBeanDefinition' into 'adviceChain' List.
PollerParserTests: adding <tx:advice> as customElement into poller's <advice-chain>.

Commit is mostly parser tidy-up. The crux of the fix is to add the
missing call to adviceChain.add()."
a7dffa7a6109cf161cc2d11a03a4a1068fcc63d3,2012-03-13 11:26:57-04:00,Merge pull request #362 from artembilan/INT-2439
372d754a6d9c88fc9ff7e3429b3611ddd27fd34a,2012-03-20 16:24:09-04:00,Merge pull request #382 from olegz/INT-2420
0b649abfaa8030f034a7d5499ee317881b4645c1,2012-03-21 17:05:04-04:00,"Merge pull request #376 from garyrussell/INT-2442a

* INT-2442a:
  INT-2442 SFTP Authentication"
6b6a463638c82a4594d2083af4206b747c9a4c5e,2012-03-23 10:04:16-04:00,"Merge pull request #351 from garyrussell/INT-2431

* INT-2431:
  INT-2431 Improve 'Dispatcher Has No Subscribers'"
43c2ac43b4d4a19b24a6d9c683f8a17ee961cade,2012-03-23 10:32:59-04:00,"Merge pull request #375 from garyrussell/INT-2465

* INT-2465:
  INT-2465 Fix Temporary File Suffix"
849030eee2111874d7b4e35033c9d298a7aa404d,2012-03-23 10:56:21-04:00,"Merge pull request #379 from ghillert/INT-2468

* INT-2468:
  INT-2468 - Fix DocBook <ulink/> PDF Problems"
c5e3bcf245cf4074bafab516915827fda414debb,2012-03-24 16:29:03-04:00,"Merge pull request #378 from garyrussell/INT-2471

* INT-2471:
  INT-2471 Improve Run Time For JMS Tests"
2f3330c78f718cb3df4fd44153dd0bba67794c0d,2012-03-26 10:10:38-04:00,"Merge pull request #369 from garyrussell/INT-2449

* INT-2449:
  INT-2449 Fix PubSub Subscriber Accounting"
da1887a182243855a5d49abb43867e7bfc08d257,2012-03-27 11:37:37-04:00,"Merge pull request #387 from garyrussell/INT-2492

* INT-2492:
  INT-2492 Add (S)FTP Support for mget"
2eb3fa3783926bdaaf8bd6cd146be293c543e745,2012-03-27 11:43:42-04:00,Merge pull request #383 from olegz/INT-2478
ec6ad79fba20e0f91b579692f5536ad0a3303f87,2012-03-27 13:22:23-04:00,Merge pull request #381 from olegz/INT-2475
a48f2512dab4eee280f0cf6d7ebaac93f49903e5,2012-03-27 14:10:27-04:00,Merge pull request #388 from olegz/INT-2489
6bb460d8258d9ba0d60a7ff46529dfaeb7ee3bf3,2012-03-27 14:46:30-04:00,Merge pull request #389 from olegz/INT-2478a
6975da83da65c8bf6de10fcada30dc7106e83487,2012-03-27 15:30:29-04:00,Merge pull request #348 from olegz/INT-2396
f5908ec8763f377d834aac95b755ba41d1c3665c,2012-03-27 15:57:25-04:00,Merge pull request #386 from digitalsanctum/INT-2477
3356712796ed3f60c832439839a602ddf83b049c,2012-03-28 18:56:48-04:00,Merge pull request #390 from olegz/INT-2502
2df124022064788407b757b59ca47d73716225aa,2012-03-29 11:22:47-04:00,Merge pull request #393 from olegz/INT-2502-patch
1d392e6ab2107d125cb8b8d8ed285c9e70bc7e1f,2012-03-29 15:50:45-04:00,Merge pull request #380 from olegz/INT-2479
8c3c4a0e1f9b834bd183825441e9f002d567aa79,2012-03-29 18:34:46-04:00,"Merge pull request #394 from garyrussell/INT-2451

* INT-2451:
  Combined commit from Gary and Mark for INT-2451 Added bean resolver to ContentEnricher INT-2451 Polishing - PR Review Comments"
d117b590069f116dd2e73f958b0c60083c7b29c7,2012-03-30 09:50:25-04:00,"Merge pull request #368 from ghillert/INT-2446

* INT-2446:
  INT-2446 - Twitter: Allow unauthorized operations * also improve test code coverage"
93c0f6592def474314e5be466c7ac944e3811280,2012-03-30 14:12:38-04:00,Merge pull request #396 from olegz/INT-2490
e847342852ec5493b7864f604e5f0834d2dbd3d4,2012-03-30 14:43:01-04:00,Merge pull request #360 from olegz/INT-2434-v3
d1d4a182b4765e4fec3985d1a688d21df75021b2,2012-03-30 14:56:45-04:00,Merge pull request #395 from olegz/INT-2496
6dca78a624166082727b4fa2d7bb98a8a6cadeae,2012-04-09 09:29:10-04:00,"Merge pull request #398 from garyrussell/INT-2494

* INT-2494:
  INT-2494 Move listNames() Method to Session"
0b015830d3464c33e9b0ab3d3ae306c50defcbc5,2012-04-09 09:35:21-04:00,"Merge pull request #399 from garyrussell/INT-2493

* INT-2493:
  INT-2493 Add Edit For Filter on Get"
ee9f7fb69c4095d1bf28e893dda1bbce5b917187,2012-04-09 15:35:20-04:00,"Merge pull request #400 from garyrussell/INT-2493a

* INT-2493a:
  INT-2493 Fix Failing Tests"
e0871ff6ce78e6c7af51f2c18a3557c6bd77bd50,2012-04-19 12:44:47-04:00,Merge pull request #402 from ghillert/INT-2512
fd3fa99dc8802ed4f95f911be4424e025b2edde1,2012-04-26 11:42:34-04:00,Merge pull request #408 from ghillert/INT-2517
b6a113f3316d8aa2f1484b719382bb5cba4a8b29,2012-04-26 12:39:46-04:00,Merge pull request #410 from artembilan/INT-2533
14921e7598b2aa9bdbc4466891f69613e0251fc9,2012-05-01 16:29:15-04:00,Merge pull request #416 from artembilan/INT-2533a
bfa55cbf58ff50141d133e2dc452f7c47823b548,2012-05-04 08:36:56-04:00,"Merge pull request #417 from garyrussell/INT-2472

* INT-2472:
  INT-2472 Capture Forked Stderr in Tests"
fae49aa59323be5be5575a5e27216fdd5d5258c2,2012-05-04 08:58:52-04:00,"Merge pull request #413 from garyrussell/INT-2535

* INT-2535:
  INT-2535 Update Version to 2.2.0.BUILD-SNAPSHOT"
7177764a64e4f8755ec0026970e0d2614aafef34,2012-05-04 10:05:11-04:00,"Merge pull request #414 from garyrussell/INT-2536

* INT-2536:
  INT-2536 Create 2.2 Schemas"
37de51d8661bd5ea4907b3cab6f99c676d874723,2012-05-04 10:33:05-04:00,"Merge pull request #401 from garyrussell/INT-2511

* INT-2511:
  INT-2511 Change Default Socket Timeout"
ab0989d73a7eebba03fbc210e87b006a06b34c25,2012-05-04 10:59:53-04:00,"Merge pull request #415 from garyrussell/INT-2538

* INT-2538:
  INT-2538 Prepare Docs For 2.2"
343e19e6fcb9ed5f4e3346db7284996e4a0f3deb,2012-05-07 08:26:16-04:00,"Merge pull request #397 from garyrussell/INT-1871

* INT-1871:
  INT-1871 TCP CachingClientConnectionFactory"
fd6c8d0b772e4c6f97b2255377366aab25bcd418,2012-05-07 09:24:43-04:00,"Merge pull request #419 from garyrussell/INT-1871a

* INT-1871a:
  INT-1871 Remove Schema Versions"
52879a5617e2ae051ab44f83621a36a3772521a3,2012-05-07 13:00:48-04:00,"Merge pull request #404 from garyrussell/INT-2519

* INT-2519:
  INT-2519 Fix Memory Leak"
c018176dd6f92c429cef521f6e5afa103ff0429d,2012-05-08 13:52:36-04:00,Merge pull request #420 from olegz/INT-2437
66a9df56415b7baab5491eb93fa7f9309bda4723,2012-05-08 15:10:55-04:00,"Merge pull request #423 from garyrussell/INT-2519a

* INT-2519a:
  INT-2519 Fix Failing Test"
582817de29e3e269008c0f31069f137b51feb1a3,2012-05-08 16:23:27-04:00,Merge pull request #421 from olegz/INT-2247
a6c61208687102a14a3f3c0e8161207d611376a0,2012-05-08 16:55:41-04:00,Merge pull request #422 from olegz/INT-2497
9235efe16ba88f450c49465325b89b3aa324fe71,2012-05-09 13:27:12-04:00,"Merge pull request #431 from artembilan/INT-2542

* INT-2542:
  INT-2542: order attr. for logging-channel-adapter"
77e3886a121704cbf97ec23d4fa6ac9292167979,2012-05-09 13:57:32-04:00,Merge pull request #424 from olegz/INT-2508
e3e6ad7d9174118a37b83f4689f5ac6713cd68a6,2012-05-10 08:11:07-04:00,"Merge pull request #403 from garyrussell/INT-2485a

* INT-2485a:
  INT-2485 Orderly Shutdown"
4d5b8d5be1b6d06823cd260b7d2c0b219f9eee76,2012-05-10 08:30:46-04:00,"Merge pull request #434 from ghillert/INT-2545

* INT-2545:
  INT-2545 - Upgrade bundlor-plugin + docbook-reference-plugin * Upgrade bundlor-plugin version to 0.1.2 * Upgrade docbook-reference-plugin to 0.1.5"
6c2f3d8dd07f217b8f38089c50e48b4a9297d976,2012-05-14 13:00:42-04:00,"Merge pull request #435 from artembilan/INT-2275

* INT-2275:
  INT-2275: any outbound-channel-adapter in <chain>"
8fbc9264f72dec63d6181aadce74862a1adfd817,2012-05-14 13:30:54-04:00,"Merge pull request #411 from ghillert/INT-1983

* INT-1983:
  INT-1983 - Add JPA Adapter For reference see: https://jira.springsource.org/browse/INT-1983"
f56420446639ef9a9c577c08bd4e02400871e98c,2012-05-14 18:10:40-04:00,"Merge pull request #436 from garyrussell/INT-2509

* INT-2509:
  INT-2394 Support HA (Mirrored) Queues"
2486f0cad4b53dc34c6a1963e6caaf6c7f44499e,2012-05-14 18:26:09-04:00,Merge pull request #438 from ghillert/INT-2556
2061c37608ca1a78397c961561ef5fc2a5a093ba,2012-05-15 13:02:56-04:00,"Merge pull request #440 from ghillert/INT-2560

* INT-2560:
  INT-2560 - Fix tests in JpaPollingChannelAdapterTests For reference see: https://jira.springsource.org/browse/INT-2560"
c0e03a16663b437593d7f28f724c83907a4e9618,2012-05-15 13:12:02-04:00,"Merge pull request #437 from dturanski/INT-2550

* INT-2550:
  INT-2550,INT-2552:added support for properties regionName and region to GemfireMessageStore"
081fab47fbefbed97f83ee0743034fc003e0e73d,2012-05-15 17:11:24-04:00,Merge pull request #441 from olegz/INT-2453
030a53e6d5f97b020fa192fd9470330ec4e3ec58,2012-05-18 12:51:57-04:00,"Merge pull request #447 from garyrussell/INT-2417

* INT-2417:
  INT-2417 Alias Endpoints with Generated Names"
a1c2c63534b80fcddd0f32f25cfe556d497bf86b,2012-05-18 12:56:16-04:00,"Merge pull request #445 from artembilan/INT-2557

* INT-2557:
  INT-2557: chain with jpa:outbound-channel-adapter"
e1c4281290722d73c9d77757f73eaa2a5faeea21,2012-05-21 11:51:12-04:00,Merge pull request #442 from olegz/INT-2544b
7d914d64bd2e19edc11cf48536dfb65bc8dfaea8,2012-05-21 13:39:15-04:00,Merge pull request #449 from ghillert/INT-2558
73164ff82a05e06228db7bda3720a55da28d0a66,2012-05-23 12:46:21-04:00,"Merge pull request #444 from garyrussell/INT-2153

* INT-2153:
  INT-2153 SSL Support"
f060a714a46f8bf6b23ec058d13515ff0afedd99,2012-05-23 13:45:00-04:00,"Merge pull request #454 from garyrussell/INT-2581

* INT-2581:
  INT-2581 Fix Failing Test (Timing)"
44e3ae276d5a6016a0ac1645961120223d43fb0b,2012-05-23 16:23:32-04:00,Merge pull request #450 from amolnayak311/INT-2440
bb16381210d38772e657750ea17e7a17baa7df83,2012-05-25 12:02:40-04:00,"Merge pull request #459 from garyrussell/INT-2570

* INT-2570a:
  INT-2570 Support url-expression on Outbound Http"
72f5a266820d84742a982031d4ebb2cd2d7b5ef4,2012-05-25 12:31:28-04:00,"Merge pull request #461 from garyrussell/INT-2570 fixing failing tests

* INT-2570b:
  INT-2570 Fix Failing Tests"
020a8bf1e0aa813fad2474f54c04aa4727a54102,2012-05-25 12:36:18-04:00,"Merge pull request #460 from garyrussell/INT-2448

* INT-2448:
  INT-2448 Add view-expression to Http Inbound"
e8282648670fc417fe1e1d408eac079f8c5e5cac,2012-05-25 13:39:31-04:00,Merge pull request #455 from amolnayak311/INT-2572
a2cf6f85fa523a6244e6e32a5fa8df436a84ea47,2012-05-25 15:33:46-04:00,"Merge pull request #462 from garyrussell/INT-2588

* INT-2588:
  INT-2588 Remove Deprecation"
c1f5c5155044145a1085d7db4db1b94ea1a67470,2012-05-30 16:50:12-04:00,Merge pull request #451 from amolnayak311/INT-2571
5750c6914296ef92319fcacec292ac34cafdfeda,2012-05-31 21:25:07-04:00,"Merge pull request #464 from garyrussell/INT-2591

  INT-2591 Upgrade spring-amqp to 1.1.1.RELEASE"
4e5319ac350c3c2577e032ab99d8d9315f0d6c15,2012-06-01 11:01:25-04:00,"Merge pull request #446 from artembilan/INT-2567

* INT-2567:
  INT-2567: Improvement & refactor Groovy component"
01225b8a48b4a1dd79e88d702b5cbd01b9ca2278,2012-06-01 12:00:24-04:00,Merge pull request #469 from olegz/INT-2318
a011f9dda78036affd69116e20c046a1f02d94f7,2012-06-01 12:14:17-04:00,"Merge pull request #456 from garyrussell/INT-2419

* INT-2419:
  INT-2419 Thread Starvation Detection"
4bc8760012afdf0950f4a73bffe6d08612176af7,2012-06-01 12:31:44-04:00,Merge pull request #468 from olegz/INT-2397
0646df36577fda554b1df813b33434edfee3bc87,2012-06-01 13:15:22-04:00,"Merge pull request #463 from garyrussell/INT-2592

* INT-2592:
  INT-2592 Fix Memory Leak in SimpleMessageStore"
3a26285b00e91c34b0065cbbbaf90b7a8ff02ea7,2012-06-01 15:14:04-04:00,"Merge pull request #472 from garyrussell/INT-2271

* INT-2271:
  INT-2271 - Add Dynamic Stored Proc Names (SpEL + Header) * Add support for Stored Procedure/Function Names via Message Header * Add support for Stored Procedure/Function Names via ""stored-procedure-expression"" parameter * Add support for cacheable *SimpleJdbcCallOperation* instances * Add Guava dependency for Cache Support * Convert white-spaces to tabs (where occurring) * Convert line-delimiters to Linux format (where occurring)"
d21b1f1316d4019e6a12c98e0def6645a60a0f84,2012-06-01 16:25:56-04:00,Merge pull request #470 from ghillert/INT-2580
e335d2961f789960674d00969168a812de2f2ea3,2012-06-03 12:43:46-04:00,Merge pull request #465 from ghillert/INT-2582
b90736c4451f93af4711b0ba7a4c5741acd23ae9,2012-06-04 07:27:31-04:00,Merge pull request #474 from ghillert/INT-2601
44e033a8446caf119a82dfebce7df173e49f1306,2012-06-04 18:32:02-04:00,Merge pull request #475 from olegz/INT-2593
49960f3f36c3718e9b0f2414e625e7ad22fe365c,2012-06-05 16:40:33-04:00,"Merge pull request #476 from garyrussell/INT-2264

* INT-2264:
  INT-2264, INT-2263 TCP GW Reconcile reply-timeout"
956e7bcd0dcceae184a81fb2ec7bab6dae410883,2012-06-06 18:53:40-04:00,Merge pull request #477 from olegz/INT-2518
b7a4529a6e8eb0f45889c4232c7fa81fc1c3365f,2012-06-07 11:33:15-04:00,Merge pull request #478 from olegz/INT-2516
dae64702480e2b88117f928b2abd09cde737e9bb,2012-06-07 12:26:47-04:00,"Merge pull request #482 from garyrussell/INT-2459

* INT-2459:
  INT-2459 Add Support for TCP Failover"
a494dd22625db1621c7cfb67b47f4a50a564ddde,2012-06-07 12:53:11-04:00,"Merge pull request #484 from garyrussell/INT-2540

* INT-2540:
  INT-2540 AbstractJmsChannel wasn't Marked Abstract"
c3860e14b73b56b8977c5a7133bb04ec71fba9cf,2012-06-07 13:01:15-04:00,"Merge pull request #485 from garyrussell/INT-2604

* INT-2604:
  INT-2604 Remove Deprecated Header"
42ba0b7b5610749ee59b7b5c9590ed78e54e6e21,2012-06-07 13:22:01-04:00,"Merge pull request #483 from artembilan/INT-1029

* INT-1029:
  INT-1029: Support for outbound-gateways in chain"
14f78509eafde9eec3c0df8d90b8feee3a96c5b8,2012-06-07 14:12:24-04:00,"Merge pull request #487 from garyrussell/INT-2590

* INT-2590:
  INT-2590 Add TestingUtility"
e6520821d171759bcfdf902085703303e8dd2b00,2012-06-07 14:47:49-04:00,Merge pull request #481 from olegz/INT-1929
5232b8377c5f9280873e5cac9be7ac8169fe1866,2012-06-07 16:27:29-04:00,Merge pull request #480 from olegz/INT-1760
8a4698d7cf331fcd42e83451138f6ddfe5615b7f,2012-06-12 12:33:37-04:00,"Merge pull request #489 from ghillert/INT-2546

* INT-2546:
  INT-2546 Move method PollerParser.configureTransactionAttributes to IntegrationNamespaceUtils"
e3ca5ac5de4879884ac1d5eeb532e71d9b28a560,2012-06-13 15:34:50-04:00,Merge pull request #491 from olegz/INT-2594
4e9a393983667af7d1b4043fa71ae33a47cfbac2,2012-06-13 16:06:31-04:00,Merge pull request #491 from olegz/INT-2594
3da251ed5ccd4561e8f8ceca4d1a61f023b0180c,2012-06-14 17:02:22-04:00,"Merge pull request #493 from garyrussell/INT-1849

* INT-1849:
  INT-1849/INT-2606 Pseudo Transactional Message Src"
3fda7f066b494138d2baa1799482d3348a55effd,2012-06-14 18:52:56-04:00,Merge pull request #492 from olegz/INT-2470
d74dbd3b1f1838a63e7f72fc96926be405839cc1,2012-06-14 21:41:58-04:00,"Merge pull request #498 from mstine/INT-2583

* INT-2583:
  INT-2583 Update Reference Copyright"
9082512a487a1f3fc99c42b4649b6210b18c5140,2012-06-15 11:29:40-04:00,"Merge pull request #494 from ghiller/INT-805

* INT-805:
  INT-805 - Dynamically create directories"
a6049bc51c364bd4a995f61a062e25b1a2fc1a78,2012-06-15 11:45:52-04:00,"Merge pull request #496 from ghillert/INT-2618

* INT-2618:
  INT-2618 - Document directory-expression attribute"
72562c7aa422a3a74e79598afbbc0df67178100a,2012-06-18 16:54:29-04:00,Merge pull request #501 from artembilan/INT-2621
41d73d91b3519c0369529b35cd820ff7cdca8708,2012-06-18 17:32:31-04:00,Merge pull request #500 from mstine/INT-2575
84f66e059b9c56594c6e8650692261bb9c5ef25c,2012-06-18 17:50:12-04:00,Merge pull request #504 from ghillert/INT-2514
39491a1df7f140146b0ed5051492fd901f7f2798,2012-06-19 10:02:31-04:00,Merge pull request #488 from artembilan/INT-1132a
eead19680802929e8aa96d78aa4a1f2a2b275f8f,2012-06-19 11:45:11-04:00,"Merge pull request #502 from garyrussell/INT-2523

* garyrussell-INT-2523:
  INT-2523 Add QOS Attributes on JMS Channel"
6fea7318097c17ba94f3ba89092a6a35bdc8db45,2012-06-20 12:39:38-04:00,Merge pull request #503 from ghillert/INT-2616
0a6e44ddc53a56d618cf6b97f88d9d8c4921bf24,2012-06-21 10:09:48-04:00,Merge pull request #505 from artembilan/INT-2605
f505d426a22b6f1de03c7960e11b9a71148a59d5,2012-06-21 11:52:28-04:00,Merge pull request #507 from artembilan/INT-2622
7dd1255351cc43e4905ca0da78029fed33140360,2012-06-21 12:36:50-04:00,Merge pull request #510 from ghillert/INT-2564
92c62932dc838b29f359659cf79e8bd8d201f08e,2012-06-21 13:32:06-04:00,Merge pull request #495 from olegz/INT-1141
af4dfbaa945e443e85bc6ba72603392967444546,2012-06-21 13:43:55-04:00,Merge pull request #511 from ghillert/INT-2444
284464383d7b0fc03d19fe051cf3d680e8385ec4,2012-06-21 13:54:55-04:00,Merge pull request #513 from ghillert/INT-2290
25a2efe59cf4f2504c1f60b82cd0ad24564747b2,2012-06-21 14:30:32-04:00,"INT-2607: refactor 'resolveId' with pC.isNested()

* add delegation to `BeanDefinitionReaderUtils.generateBeanName(definition, parserContext.getRegistry(), parserContext.isNested())`
in the `AbstractBeanDefinitionParser#resolveId()` implementations when it is necessary.
* remove redundant `shouldGenerateId()` & `shouldGenerateIdAsFallback()` when they don't make sense.
* additional simple polishing in the affected classes.
* remove TODO & forced 'id' attribute from JpaOutboundGatewayTests-context.xml to check that this solution works as was booked.

JIRA: https://jira.springsource.org/browse/INT-2607"
97661cc39a518cc6181c4092e2950d4f06c1c21a,2012-06-21 14:47:06-04:00,Merge pull request #512 from artembilan/INT-2607
7f81d294daa213d87d8d304585864bd8bf541b91,2012-06-21 15:27:11-04:00,Merge pull request #506 from ghillert/INT-2596
a9963e5d09ffc9cc782139691502b7b4f42925e1,2012-06-21 17:34:11-04:00,Merge pull request #515 from artembilan/INT-1132-Fix
341490d3567ac861a90097cf38b03152224fa482,2012-06-22 09:52:46-04:00,Merge pull request #516 from artembilan/INT-2623
24d2acd36885631c072a9c78186944737e76b047,2012-06-22 10:02:52-04:00,Merge pull request #517 from ghillert/INT-2441
703122a6fb540fed6cce2c254dd224672a23c07b,2012-06-22 11:12:22-04:00,Merge pull request #519 from ghillert/INT-2597
9b541c86184d38a1fac717b88512b73c2fd63c16,2012-06-25 12:06:55-04:00,"Merge pull request #508 from garyrussell/INT-2147

* garyrussell-INT-2147:
  INT-1849/INT-2147 Add Disposition to File Adapter"
0f9c8f5b588c8f1a256373dd9520f636ba01ac85,2012-06-25 16:31:29-04:00,Merge pull request #520 from ghillert/INT-2521
8c09655554cf8ea71e7160c531e565d085ef73ac,2012-06-25 16:32:14-04:00,Merge pull request #521 from ghillert/INT-2454
9b5d5fc6f78ddc595ed3e111be2c16a5c238923d,2012-06-26 10:45:33-04:00,"Merge pull request #514 from garyrussell/INT-2515

* garyrussell-INT-2515:
  INT-2515 More Orderly Shutdown"
2dfd0be0789afbb5e517618b2f339a000e8fff13,2012-06-27 11:52:07-04:00,"Merge pull request #524 from garyrussell/INT-2636

* garyrussell-INT-2636:
  INT-2636 Gateway Timeout Changes"
f54bb340d6da4601048f4393263f894213bc2efd,2012-06-27 12:19:49-04:00,"Merge pull request #522 from garyrussell/INT-2630

* garyrussell-INT-2630:
  INT-2630 MessageHeaders/History Conversion Issue"
3757592f2aab946df16aa17d9166d28810f82f0a,2012-06-28 10:43:15-04:00,"INT-2631: remove BD logic from GroovyControlBus

* make 'Groovy Control Bus' similar to 'Expression Control Bus'
* add tests about `abstract` & `prototype` Beans
* fix about lost `groovy.lang.Script#println()` functionality in the `GroovyControlBusFactoryBean$ManagedBeansBinding`
* polishing `GroovyControlBusDelayerManagementTest` to show abilities & fixes with this issue

JIRA: https://jira.springsource.org/browse/INT-2631

INT-2631: polishing according to PR comments"
9642a1830720ac65e1282ff64a2e753858591ce0,2012-06-28 10:55:55-04:00,Merge pull request #518 from artembilan/INT-2631
884a4e5bb36f71363829ee3dd86b1cfc7d4fb0d2,2012-06-28 15:53:56-04:00,"Merge pull request #527 from garyrussell/INT-2635

* garyrussell-INT-2635:
  INT-2635 Set Buffer Size for Piped Streams"
3bdce8cdf3a24b351336ac78d57e90b604bb82ed,2012-06-29 08:53:22-04:00,Merge pull request #525 from ghillert/INT-2289
ba9060057a4e7881431573b0974743a46818573f,2012-06-29 09:36:25-04:00,"Merge pull request #526 from garyrussell/INT-2640

* garyrussell-INT-2640:
  INT-2640 Fix Failing JDBC Test on OSX"
a54bcf3cdffb27ff22ca58eef9cb2f2c29d4c3eb,2012-06-29 09:48:55-04:00,Merge pull request #529 from artembilan/INT-2641
d2d9d67edb9b217d7813673efc449b7886e212a3,2012-07-02 13:19:25-04:00,"INT-2610 Fix Gateway Mapping Issue

Fix the inability for mappings by convention to be overriden with payload expression

Cherry-pick PR #531"
9c03811b75822b37028b2fb0a89acab6cde07bfe,2012-07-02 16:38:39-04:00,"Merge pull request #532 from garyrussell/INT-2647

* garyrussell-INT-2647:
  INT-2647 spring-tx Needed as Transitive Dependency"
23085ba31d527657b1a280d6389a019f95fb4f03,2012-07-06 13:54:04-04:00,"Merge pull request #535 from garyrussell/INT-2650

* INT-2650:
  INT-2650 Don't Convert byte[]"
f26719d23cd09c5fe1466c6edb7e3de2a5b1ee70,2012-07-06 15:58:36-04:00,Merge pull request #530 from ghillert/INT-2473
62f96fa1945c3cc5c689cfdb2938028a0f85bb3c,2012-07-06 18:33:31-04:00,Merge pull request #539 from ghillert/INT-2656
ef498d2d94b72009d07de8acca63ce5aa4ba356e,2012-07-10 16:33:15-04:00,"Merge pull request #533 from garyrussell/INT-2648

* INT-2648:
  INT-2648 UDP - Don't Hold a Scheduler Thread"
e73d3a34254e305e206b4aee88e45f6473317fa7,2012-07-10 16:41:26-04:00,"Merge pull request #541 from garyrussell/INT-2660

* INT-2660:
  INT-2660 NPE When Using SSL and NIO with Defaults"
d0f26cd618d0b232b0e17d7c6f23d2d4aa296ad2,2012-07-10 17:07:32-04:00,"Merge pull request #537 from johndoe/INT-2652

* INT-2652:
  INT-2652 Fix mget for FTP"
468fbbc6c7d95c7580f13211566059ddd0cb96c1,2012-07-10 19:05:52-04:00,"Merge pull request #538 from garyrussell/INT-2633

* INT-2633:
  INT-2633 Add File Disposition to (S)FTP Inbound"
ee0dcd80204a25607e7410096a225f6203fb27f3,2012-07-10 19:15:35-04:00,"Merge pull request #544 from garyrussell/INT-2658

* INT-2658:
  INT-2658 Upgrade Spring to 3.1.2"
e6708ad6aeb3686c0c966228b0cd35f37f917edb,2012-07-10 22:58:55-04:00,Merge pull request #540 from ghillert/INT-2657
b429e1ff2d6aa01d1bd5f8b03e87c69f426df5d2,2012-07-12 11:50:00-04:00,Merge pull request #550 from olegz/INT-2659
6753a379bc9ddacac0435ccf5c539abdde895958,2012-07-12 17:53:37-04:00,Merge pull request #542 from olegz/INT-2666
c5d6980a5b4094de116ad96d7e4be0bd9772ccde,2012-07-12 18:17:05-04:00,"Merge pull request #542 from ghillert/INT-1958

Previous merge should have referenced #552"
a90a7e8e0b9b6d591dd67da4e0320b119da47e04,2012-07-16 10:38:02-04:00,Merge pull request #549 from ghillert/INT-2574
386be70dda41bc8b44b0b711ccf1219459ca029b,2012-07-16 14:17:36-04:00,"Merge pull request #543 from garyrussell/INT-2285

* garyrussell-INT-2285:
  INT-2285 Implement max-subscribers on Channels"
8c9e307f49902b8a3c38b854aea154ec96c49933,2012-07-16 14:52:12-04:00,Merge pull request #547 from ghillert/INT-2262
bc63baa3e6b1b9ccf7f27ded2d6138d38886aab6,2012-07-18 13:26:12-04:00,Merge pull request #555 from olegz/INT-2677
b39b0c2681db8c8d113c9b6ca42b992c4c57bcf8,2012-07-19 12:58:54-04:00,"Merge pull request #556 from artembilan/INT-2678

* INT-2678:
  INT-2678: fix a couple of typo"
9be17fa4dffe3e6465286ffed401a8616bbf8db8,2012-07-19 13:05:07-04:00,"Merge pull request #554 from garyrussell/INT-2665

* INT-2665:
  INT-2665 JMX Endpoints And Remote MBeanServer"
19c53ed9e919416194ef2b91bae69b1e8e31ab50,2012-08-01 13:02:17-04:00,"Merge pull request #561 from ghillert/INT02681

* INT-2681:
  INT-2681 - Upgrade to Gradle 1.0 GA For reference: https://jira.springsource.org/browse/INT-2681"
b6a9c1aedc0ca40a0aebde98413070a6e687d9eb,2012-08-01 13:10:37-04:00,"Merge pull request #566 from johndoe/INT-2689

* INT-2689:
  INT-2689 - SI builds without warnings (Except Spring Integration HTTP)"
0fc285db6e835c3b7b86724607a8730c94f8af41,2012-08-01 13:34:21-04:00,"Merge pull request #559 from ghillert/INT-2668

* INT-2668:
  INT-2668 - Improve the File Overwrite Handling"
d6623bda823953603772f130a93caf478fca4588,2012-08-03 13:55:16-04:00,"Merge pull request #569 from ghillert/INT-2680

* INT-2680:
  INT-2680 - Duplicate Content-Type header For reference please see: https://jira.springsource.org/browse/INT-2680"
4de02fa75e3feae3515e4bad1cd8451b20349c2a,2012-08-03 14:04:22-04:00,"INT-2685 Transaction Synchronization

Remove M3 disposition-* attributes on File/(S)FTP inbound adapters.

Add <pseudo-transactional/> and <transaction-synchronization/> elements
to <poller/>.

These elements provide the following attributes:

* on-success-expression
* on-success-result-channel
* on-failure-expression
* on-failure-result-channel
* send-timeout

<transaction-synchronization/> synchronizes these expression evaluations
with the transaction, such that they are executed immediately after
the commit/rollback.

<psuedo-transactional/> is used for a non-transactional poller.

When an <advice-chain/> is provided to the poller, <psuedo-transactional/>
and <transaction-synchronization/> are synonyms; and the behavior is
dictated by whether or not the <advice-chain/> contains a transaction
advice. It is recommended that <pseudo-transactional/> is used when the
<advice-chain/> does not have a txAdvice, and <transaction-synchronization/>
when it does, but the framework does not enforce this.

The expressions have the original (polled) message as the #root variable.
In addition, a BeanResolver is provided, allowing expressions such as
'@someBean.handleSuccess(payload)'.

MessageSources may also implement PseudoTransactionalMessageSource. This
has a number of methods allowing more flexibility in transactional and
non-transactional environents. For example, for backwards compatibility.
the mail-inbound-channel-adapter deletes its polled message after the
receive() rather than after the polled message is sent (when running in
a non-transactional poller). However, when running in a transactional
poller, the delete is done after the transaction commits (but not when
it rolls back).

In addition, MessageSources that implement this interface can optionally
provide an arbitrary object to the success/failure expressions in a
variable named '#resource'.

INT-2685 Polishing

PR Review Comments

Add tests for non-tx PseudoTransactionalMessageSource"
56e3c22970b93de9f3aa30328407eea5d70e5e70,2012-08-03 14:05:11-04:00,"Merge pull request #564 from garyrussell/INT-2685

* INT-2685:
  INT-2685 Transaction Synchronization"
fc1417ed39086d5d9765cb816966dd477df4805d,2012-08-06 09:17:36-04:00,"Merge pull request #562 from garyrussell/INT-2214,INT-343/INT-2250/INT-2656

* INT-2214b:
  INT-2214, INT-343, INT-2250 MessageHandler Advice"
d4e135b13d8888f9876c33efb7d9296664a58e40,2012-08-06 12:09:30-04:00,"INT-2649: DelayHandler: tx & adviceChain support

* 'delayer-type' XSD: add `<transactional>` & `<advice-chain>`
* move `PollerParser#configureAdviceChain` into `IntegrationNamespaceUtils`
* DelayerParser: parsing `<transactional>` & `<advice-chain>` via `IntegrationNamespaceUtils#configureAdviceChain`
* DelayHandler: add `adviceChain` property
* DelayHandler: introduce `ReleaseMessageHandler` to apply `adviceChain` capabilities around `DelayHandler#doReleaseMessage`
* DelayerParserTests: tests for introduced sub-elements
* DelayerHandlerRescheduleIntegrationTests: test for transaction boundaries with intentional rollback in the message-flow after message release

JIRA: https://jira.springsource.org/browse/INT-2649

Resolve conflicts; polishing."
d4d009135f8f4abed99238fd98fa19e911b31ec9,2012-08-06 12:13:08-04:00,Merge pull request #546 from artembilan/INT-2649
9423c21e7ad69a9929823941098aaa1d8a2cb43d,2012-08-09 12:17:21-04:00,"Merge pull request #581 from garyrussell/INT-2707

* INT-2707:
  INT-2707 Fix pseudo-transactional Attribute Typo"
0dabdbea6ddf73fec8b285cb60e54739514b45e7,2012-08-09 12:24:10-04:00,Merge pull request #574 from ghillert/INT-2670
39efd0bcd4d6883c6a797ea19261f56b8c7d9111,2012-08-09 13:36:40-04:00,Merge pull request #582 from ghillert/INT-2708
9cc6890374e0d55cffff48e8b9da6dac3c0afc54,2012-08-09 17:31:43-04:00,"Merge pull request #572 from garyrussell/INT-2703

* INT-2703:
  INT-2703 SpEL-Based Retry State Generator"
b5350fdb3c682d57a44f7fe72b66c17b0e75c4af,2012-08-10 07:48:57-04:00,"Merge pull request #575 from ghillert/INT-2392

* INT-2392:
  INT-2392 - ChainElementsFailureTests reads wrong 'xmlheader' property For reference: https://jira.springsource.org/browse/INT-2392"
1cf52b92a8b6e4d8bfe792582a7cb681f6633ce9,2012-08-10 07:53:00-04:00,"Merge pull request #578 from ghillert/INT-2292

* INT-2292:
  INT-2292 - Document usage of default namespaces for XPath Expressions For reference see: https://jira.springsource.org/browse/INT-2292"
25afb09f48cd84554b9ef6fd73143f57c82242ed,2012-08-10 08:04:40-04:00,"Merge pull request #580 from artembilan/INT-2706

* INT-2706:
  INT-2706: fix 'expected-response-type' primitives"
bfb5cbdb2a39ac565ae21efddccee19a31ff288a,2012-08-10 16:26:24-04:00,"INT-2638 added support for Redis inbound channel adapters

Currenly there is support for:
- list-inbound-channel-adapter - http://redis.io/commands#list
- zset-inbound-channel-adapter - http://redis.io/commands#sorted_set

INT-2638 polishing

INT-2638 polished schema docs

INT-2638 polishing

INT-2638 polishing

INT-2638 refactored Redis collection inbound adapters to use RedisStore (view)

INT-2638 polishing, exposed redis-template via the namespace

INT-2638 polished based on PR comments

INT-2638 polishing

INT-2638 Polishing"
3feef9414aeabff4cfd3a383c231822955e81e4f,2012-08-10 16:41:58-04:00,Merge pull request #570 from olegz/INT-2638
c2d6486f9bf33dba2da8d084ffea30c421badea2,2012-08-12 11:23:40-04:00,"Merge pull request #573 from garyrussell/INT-2704

* INT-2704:
  INT-2704 Exception Processing in TCP Adapter"
ca7e78a2d21f4484ceefa063a8bd213d8012b3ae,2012-08-13 10:08:31-04:00,Merge pull request #583 from olegz/INT-2712
a544ef08b35e15882db20e5dde2a10887650ccc0,2012-08-14 14:16:13-04:00,"Merge pull request #585 from garyrussell/INT-2711

* INT-2711:
  INT-2711 syslog Transformer"
2a04ee0806bb2c53b8364c65ef46488dfd3b6bd1,2012-08-14 15:03:13-04:00,Merge pull request #587 from olegz/INT-2712
a2b0c3b5088c8ec8ab3483dbbe186fb07b1a9f00,2012-08-14 15:40:34-04:00,Merge pull request #586 from olegz/INT-2626b
de5506daf3b7ba9b9469240aa2d3ad8a0d9eb2b0,2012-08-15 15:08:09-04:00,Merge pull request #577 from olegz/INT-2637c
1edac11fbad4da232713647ac0e567c56ebce4dd,2012-08-15 19:29:26-04:00,Merge pull request #588 from olegz/INT-2713
1f59577281b24575b7df44948cdabd9be7c51c0c,2012-08-16 08:18:08-04:00,"Merge pull request #589 from garyrussell/INT-2702

* INT-2702:
  INT-2702 Mail ThreadLocal Polishing"
bfac7999cd3d3ecc32356ead25eee293fe4678e1,2012-08-17 17:10:59-04:00,"Merge pull request #584 from garyrussell/INT-2683

* INT-2683:
  INT-2683, INT-2684 JmsOutboundGateway improvements Added support for caching reply consumers when reply queue is Temporary Queue Added support for reuse of temporary Reply queues in the JmsOutboundGateway"
f3f81930f72ab34a3ba48d9203c7d746db9053cc,2012-08-22 10:41:37-04:00,Merge pull request #590 from olegz/INT-2612b
0345a381b241de652a1beaa8ddc952faa6bd6ff1,2012-08-28 09:21:12-04:00,Merge pull request #591 from artembilan/INT-2717
35ccb61b3101f3b58687848108ddcdce1c394da9,2012-08-28 17:00:17-04:00,Merge pull request #593 from artembilan/INT-2722
6be155fbc5cc680bc3725e0b753ea34319bae54f,2012-08-29 11:39:43-04:00,Merge pull request #594 from ghillert/INT-2710
3bd9270d390e2ee316b9272f0bcabb10abb827e0,2012-08-29 14:12:24-04:00,"Merge pull request #599 from garyrussell/INT-2716

* garyrussell-INT-2716:
  INT-2716 Fix Javadoc Warnings"
3c15f376dbb6b5b937d3a56f42cf2f5ac6624ec0,2012-08-29 14:15:08-04:00,"Merge pull request #598 from garyrussell/INT-2715

* garyrussell-INT-2715:
  INT-2715 Update spring-amqp Dependency to 1.1.2"
7507401dea1a6d52c29b32bca2d81c67531a8a12,2012-08-30 16:40:02-04:00,Merge pull request #600 from ghillert/INT-2524
ffe4a449ac1ae825506ce057d3836a7a5d2b6f36,2012-08-31 17:49:53-04:00,"Merge pull request #606 from olegz/INT-2729

  INT-2729 Redis Outbound Adapter"
a5b090facc1fcb25e6774321f0e59105ddb4312d,2012-08-31 18:20:35-04:00,"Merge pull request #605 from garyrussell/INT-2730

  INT-2730 Move OrderlyShutDownAware Interface"
c16684a4c2e1a5dae2676cde112ecad6ec76d968,2012-09-05 11:49:37-04:00,"Merge pull request #603 from garyrussell/INT-2603

* INT-2603:
  INT-2603 Fix TCP Shutdown Delay"
5828f70321f99e5cb9652592f5df45785120b8c3,2012-09-05 11:56:50-04:00,"Merge pull request #604 from garyrussell/INT-2701

* INT-2701:
  INT-2701 Document JEE TaskSchduler Override"
94cc5a73e2910c231ff879e3390dc9f5c4bbe617,2012-09-05 16:55:34-04:00,"INT-2727 PseudoTX Refactoring

Remove the need for pseudo-transactional element

INT-2727 PseudoTX
Add PseudoTransactionalTransactionManager

INT-2727
addressed PR comments
cherry picked previous code for mail module to eliminate breaking change

INT-2727
initial refactoring pseudo-tx support to use common configuration

INT-2727
finalizing pseudo-tx synchronization support

INT-2727 polishing

INT-2727 polishing based on PR comments

INT-2727 addressed PR comments

INT-2727 polishing

INT-2727 Remove PseudoTransactionalMessageSource

Instead of getResource, bind the resource holder before
receive() and then add attributes to the holder.

INT-2727 polishing

INT-2727 Polishing

Remove bind of #resource; add beforeCommit() test;
add TransactionTemplate tests."
f3533bd6730061341d1835198e2c297ee2a9c419,2012-09-05 16:58:53-04:00,Merge pull request #608 from olegz/INT-2727
fab04d521984429673e10f901897a083be0e8a46,2012-09-05 20:16:30-04:00,"Merge pull request #610 from garyrussell/INT-2727a

* garyrussell-INT-2727a:
  INT-2727 Fix JavaDoc Warnings"
5df766b93dbf4164a68d39d4b052cb3fe7bf8e55,2012-09-06 13:22:41-04:00,Merge pull request #611 from olegz/INT-2733/4/6
3d26bd1a5f4527eaea4b3a84187880542699a6be,2012-09-06 16:01:35-04:00,Merge pull request #612 from olegz/INT-2737
1c3f41ea4bec3e4c4ef334efec4fe2c4d5eb3b60,2012-09-07 08:08:36-04:00,"Merge pull request #607 from garyrussell/INT-2487

* INT-2487:
  INT-2487 Object Name Patterns for Notifications"
ec695d031ae97812f8377b133ef7c726e3a5b79a,2012-09-07 08:12:43-04:00,"Merge pull request #602 from garyrussell/INT-2532

* INT-2532:
  INT-2532 AMQP Schema Doc Clarification"
950dc223430a8695ccff23ef8206b120c45cffe3,2012-09-07 08:30:26-04:00,"Merge pull request #601 from garyrussell/INT-2599

* INT-2599:
  INT-2599 TCP Client Mode Corrections"
374f6251e98954610e7f77df9b58db504ffc0122,2012-09-07 10:18:53-04:00,Merge pull request #597 from garyrussell/INT-2698
a9142e9c4469fd3b81c0143ca7e8670d18760c7c,2012-09-07 11:35:49-04:00,Merge pull request #596 from ghillert/INT-2448
063c5c82697188216435d309645e4ba86b853b53,2012-09-07 16:50:59-04:00,"Merge pull request #614 from garyrussell/INT-2740

  INT-2740 MessageSelector w/ Pollable JMS Channel"
333fc19e01716e3db363a817d3c204f89435dd40,2012-09-10 16:14:25-04:00,Merge pull request #592 from artembilan/INT-2718
921e9d6a361a7e1326074476f79337c495db8fee,2012-09-12 16:03:51-04:00,Merge pull request #620 from olegz/INT-2725
abc37560b89dc0c6d350b022cd6d01695f613003,2012-09-17 16:16:07-04:00,"Merge pull request #625 from garyrussell/INT-2750

* garyrussell-INT-2750:
  INT-2750 Fix GatewayProxyFactoryBean Javadoc"
ad72515e58a93f16d3949b745dfcf913f36365dd,2012-09-18 00:06:05+01:00,"Merge pull request #626 from ghillert/INT-2752

* INT-2752:
  INT-2752 - Fix build.gradle for Spring 3.2 compatibility For reference: https://jira.springsource.org/browse/INT-2752"
fe80265ace96db7113e37a142d9d65cfab1a5cd6,2012-09-18 08:27:22-04:00,"Merge pull request #615 from garyrussell/INT-2699

* INT-2699:
  INT-2699 Reference Docs for Tx Synchronization"
03e60171ec7e6d1894dd4c69b346c2a5d9993d2c,2012-09-18 09:07:25-04:00,"Merge pull request #623 from garyrussell/INT-2748

* INT-2748:
  INT-2748 Change CircuitBreaker Exception"
e337521958f9c0642b2bfdce4f484e76faac7a6d,2012-09-18 09:17:53-04:00,"Merge pull request #616 from garyrussell/INT-2742

* INT-2742:
  INT-2742 Fix TCP Test Case Race Condition"
c24d8e7395849024609c292790a61009f08ee72e,2012-09-18 09:42:12-04:00,"Merge pull request #613 from johndoe/INT-2695

* INT-2695:
  INT-2695 WS Support URI Schemes Other than http(s)"
b9e77624290bcfba010047f079637413f3dced90,2012-09-18 09:52:41-04:00,"Merge pull request #627 from garyrussell/INT-2751

* INT-2751:
  INT-2751 Fix Reaper Race Condition"
a013b66af07aea843cd5db5617beaa627679b928,2012-09-18 16:04:27+01:00,"INT-2723/24 RedisStore Inbound/Outbound docs

INT-2723 Polishing

Polish docs

Remove #store SpEL variable from the Tx Synchronization."
091e3e3456c3a7b5fe89065fb2d9bd9339d41a9d,2012-09-18 16:04:55+01:00,Merge pull request #621 from olegz/INT-2723
e1dd8240d0f129e85321fa26d2a5c37ab45184d4,2012-09-18 17:09:22-04:00,"Merge pull request #618 from garyrussell/INT-2744

* garyrussell-INT-2744:
  INT-2744 Mechanism to Suppress Standard Headers"
17b8fe1db4a2f8d25ae717fa56fed7868624c9e7,2012-09-19 12:14:32-04:00,"Merge pull request #622 from olegz/INT-1819

* INT-1819:
  INT-1819 Mail pseudo-tx support Added pseudo-tx support for Mail inbound adapters For polling adapters no changes have been made other then returning a javax.mail.Message instead of its copy so post-tx dispositions could be performed on it. For Imap IDLE adapter changes are simiar to the once present in SPCA where TX synchronization logic was added to ImapIdleChannelAdapter Couple of things to note: First IDLE receives an array of messages while Polling task receives one message which means i need to sendMessage in the Polling task in the separate thread, so for maintaining single thread semantics we have now it uses single thread executor to send Messages Renamed MSRH to TransactionalResourceHolder since we no longer use 'source' anywhere and in the case of IDLE there is no MessageSource. Its is truly a holder of attributes we want to make available for use (e.g., SpEL)"
04547941dc1ee852410bf35242c25075eb25e9c9,2012-09-19 19:04:31+01:00,Merge pull request #630 from olegz/INT-2749
06e2f619696a0810ca109ee633adb05a20274a9f,2012-09-19 15:39:59-04:00,"Merge pull request #629 from garyrussell/INT-2571a

* INT-2571a:
  INT-2751 Jdbc Message Store Group Id Issues"
26e2a45ee610276d3d1ce10c99b6efda96e64f6b,2012-09-20 14:34:45+01:00,Merge pull request #631 from olegz/INT-2757
52d042eadcfa4b366f8df9e523e569af22eca29c,2012-09-20 14:50:38+01:00,Merge pull request #632 from olegz/INT-2756
9e8d1c83f8e4185d5f370636589dd41eb6b5efb6,2012-09-20 12:08:55-04:00,"Merge pull request #633 from garyrussell/INT-2759

* INT-2759:
  INT-2759 Fix Failing JPA Test"
e835ce30785bdefb671837d409c7e2bde8583c5c,2012-09-20 21:32:31-04:00,"Merge pull request #609 from garyrussell/INT-2741

* INT-2683-dmlc-3:
  INT-2683 Add Reply Listener Container Option"
c9f73a8a491d115901827ea5e52c9b4f597305c0,2012-09-20 21:36:33-04:00,"Merge pull request #617 from garyrussell/INT-2667

* INT-2667:
  INT-2667 JMS Outbound Gateway Documentation"
7055845424028ba5ea811bb01979bbd42db053fc,2012-09-21 12:22:52+01:00,"INT-2218 - Chain Parser Validation Improvements

Components within Chain: Add parser validation

For reference see: https://jira.springsource.org/browse/INT-2218

INT-2218 - Code review changes

INT-2218 - Fix HttpOutboundGatewayParserTests

INT-2218 - Remove input-channel validation

Was already covered by PR #592"
3713fd6851612dca9d1e1b9e90c3933f6159c851,2012-09-21 12:54:07+01:00,Merge pull request #628 from ghillert/INT-2218-2
8ee86f035fe51a723b14d664e51e0bcac6adf6ea,2012-09-21 10:51:18-04:00,"Merge pull request #634 from garyrussell/INT-2747

* garyrussell-INT-2747:
  INT-2747 Change Bundlor Spring Minimums"
c8da0532d76b79e0090062872d1a55beff448faf,2012-09-21 12:38:27-04:00,"Merge pull request #635 from garyrussell/INT-2761

* INT-2761:
  INT-2761 Make Redis ZSet Default - Increment Score"
3e5694e235ead7694b7e4617d59ac3dc58284df0,2012-09-21 14:10:13-04:00,"Merge pull request #636 from garyrussell/INT-2763

* INT-2763:
  INT-2763 Send AdviceMessage from Advice"
b85ddc52ed1ac43298952ce985ce01a5123fb87f,2012-10-03 11:15:50-04:00,"Merge pull request #639 from olegz:INT-2774/75

# By Oleg Zhurakousky
* olegz-INT-2774/75:
  INT-2774/75 RedisCollectionPopulatingMessageHandler fix * Added support for 'channel' attribute for RedisStore outbound adapter * Fixed logic in RedisCollectionPopulatingMessageHandler to ensure that RedisHeaders.ZSET_INCREMENT_SCORE can be passed as Boolean true/false as well as String true/false. The current solution is based on relyiong oin ConversionService registered with SpEL Context (see RedisCollectionPopulatingMessageHandler.extractZsetIncrementHeader method). This way other types could be supported without introducing any code changes."
e9096c784698746e9c4014e772a9d235fbe80aa2,2012-10-03 11:29:38-04:00,"Merge pull request #637 from garyrussell/INT-2765

# By Gary Russell
* garyrussell-INT-2765:
  INT-2765 Remove Obsolete Annotation from Docs"
4cde75bfe1a0cff65333c4af54cc0a00bc606d2a,2012-10-09 16:23:56-04:00,Merge pull request #638 from artembilan/INT-2770
dfe9906bae0487b84884f6e1a9aa7177ec94cd21,2012-10-10 19:08:31-04:00,"Merge pull request #642 from garyrussell/INT-2767

  INT-2767 Remove Unused Test Config"
1b298bae375a9de2afc32998c85ad01815285a70,2012-10-11 10:10:12-04:00,Merge pull request #644 from ghillert/INT-2766
0e4b250ff806d7db3ad3cc90a6727a240fabdf72,2012-10-11 10:29:24-04:00,"Merge pull request #645 from ghillert/INT-2753

  INT-2753 - Add CONTRIBUTING.md Copied from the Contributor Guidelines wiki document [1] in order to take advantage of GitHub's new integrated support for displaying a link to contributor guidelines when issuing a pull request [2]."
1672680419202c053f9fc173bde53932ce7f643e,2012-10-11 15:15:22-04:00,"Merge pull request #643 from garyrussell/INT-2781

  INT-2781 Retry Advice; Fix Recovery For Zero Tries"
cc301226cefdc62217236249000c996f34bc6691,2012-10-11 15:46:07-04:00,"Merge pull request #641 from garyrussell/INT-2776

  INT-2776 Add Sender's UDP Port To Headers"
cd1b36d67b8f5404888f5912a6fe2d104ca6b372,2012-10-11 17:16:05-04:00,"Merge pull request #649 from olegz/INT-2764

  INT-2764 added what's new for Redis/Mongo adapters"
ef2549cf2283c087d78bc5f928a24fa5c54eb797,2012-10-11 17:47:52-04:00,Merge pull request #647 from olegz/INT-2777
eb1500cb7e024930b82f8e64d002afe6719974ee,2012-10-11 18:36:15-04:00,"INT-2773: Fix `AmqpOutboundEndpoint`'s properties

* make `AmqpOutboundEndpoint` 'exchangeName' & 'routingKey' **null** by default
* some polishing for `AmqpOutboundEndpoint`
* verification tests for parameters of `com.rabbitmq.client.Channel#basicPublish`

JIRA: https://jira.springsource.org/browse/INT-2773

INT-2773 Polishing - Allow Override to """"

Previously, there was no way to revert to the previous
behavior by specifying an empty string for the attribute(s).

Add test to verify setting attributes to """" overrides template."
dc630073520ae007e7ac291111197aca83862032,2012-10-11 18:37:32-04:00,Merge pull request #640 from artembilan/INT-2773
2012ff0ef6c97e4d70f37bb20cf08f84b8d001ea,2012-10-11 21:03:35-04:00,Merge pull request #648 from olegz/INT-2280
f9ce02936641627f28fedaba1401abca76d50698,2012-10-12 10:21:39-04:00,"Merge pull request #651 from garyrussell/INT-2782

  INT-2782 Fix spring-retry Import-Package"
9e5ec80533615e99d3ced2cda8e2f6efef1ea907,2012-10-12 11:34:21-04:00,"INT-2786 Do not Provide Fixed XMPP Resource String

Previously, the connection resource was hard-coded to 'Smack' by
default.

According to RFC 6120 section 7.6.  Server-Generated Resource Identifier
if the connecting client does not provide resource string, server will
generate RANDOM one for it.
Smack API allows this by providing null resource in
XMPPConnection#login(username, password, resource) call.
See Smack's SASLAuthentication documentation.

Tested with XMPP sample (including default resource and configuring
as 'Smack')."
6747f69a77b817e9b8df20e2a871141a30f27f91,2012-10-12 11:35:29-04:00,Merge pull request #650 from smokku
7fcb5cbb45743a00ca2ea0123ab9d8aca44e0e06,2012-10-19 10:25:57-04:00,"Merge pull request #652 from artembilan/INT-2766

* INT-2766-1:
  INT-2766: fix early closed tag <appendix>"
b61a4fcb6d37b3b47729fde4920b233125045b7f,2012-10-19 10:28:30-04:00,"Merge pull request #653 from artembilan/INT-2777

* INT-2777-1:
  INT-2777 TxSynchFactory: tests for bound resource"
23b0575a0c1aab26905f9e4219ec36c8239e1c21,2012-10-19 11:22:03-04:00,"Merge pull request #646 from olegz/INT-2779

* INT-2779:
  INT-2779 spring-data-mongo upgrade upgraded to spring-data-mongo-1.1.1.RELEASE removed safety logic that was put temporarily to address DATAMONGO-550/551"
c7292535e273f3b6f275dc361e8db1764f647048,2012-10-19 12:11:22-04:00,"Merge pull request #654 from olegz/INT-2779

* INT-2779-bundlor:
  INT-2779-bundlor fixed manifest template"
57e7e400ca45ddcdf239829ad5c2e5d6339ba778,2012-10-30 09:38:54-04:00,"Merge pull request #657 from ghillert/INT-2790

  INT-2790 - extractZsetIncrementHeader should return 'true' by default For reference: https://jira.springsource.org/browse/INT-2790"
83a25b80b7f9e19f50e2ed8abe3d8ed2895eb7f2,2012-10-30 10:31:00-04:00,"Merge pull request #658 from ghillert/INT-2794

  INT-2794 - Spring Integration WS should depend on spring-webmvc

  INT-2795 - Update Spring WS dependency to 2.1.1.RELEASE

  INT-2796 - Update Spring-XML dependency to 2.1.1.RELEASE"
c363ceaa9d64064da499ea190c286c63b9d83fd7,2012-10-31 17:21:29-04:00,"Merge pull request #661 from ghillert/INT-2802

* ghillert-INT-2802:
  INT-2802 - Upgrade build.gradle to use Gradle 1.2 For reference see: https://jira.springsource.org/browse/INT-2802"
66200e94a2193c27e2f2df36f1eae721313b0ef4,2012-11-01 12:13:27-04:00,"Merge pull request #655 from garyrussell/INT-2788

* INT-2788 AMQP return-channel Doc. Improvements"
73faefa22ca43979d4b4c57055e10652d1c9e5f5,2012-11-02 12:27:35-04:00,Merge pull request #663 from ghillert/INT-2804
bc8d49905489d0f3519379f1f1456d58185eb800,2012-11-05 12:33:45-05:00,"Merge pull request #665 from garyrussell/INT-2800

* INT-2800: Add search-term-strategy to IMAP Adapter"
1c8b849af75b89a14e12bf008a62702164d5da0d,2012-11-05 13:02:27-05:00,"Merge pull request #664 from garyrussell/INT-2803

* INT-2803 Fix Lazy Fetch of Email Messages
* polishing: IntegrationMimeMessage wrapper class is now private"
956bece7b3b1c72548db042c54b08ec485269b78,2012-11-06 14:11:50-05:00,"Merge pull request #666 from garyrussell/INT-2797a

* INT-2797 Document JSON Transformer content-type"
a5b13dba44bc73fd9a8fc41086418e39882dcaa3,2012-11-07 09:17:08-05:00,"Merge pull request #667 from garyrussell/INT-2792

* INT-2792: Update spring-amqp Version to 1.1.3"
2055e481118624f6941d9cf908ebba04ddb47885,2012-11-07 15:51:18-05:00,Merge pull request #668 from markfisher/INT-2812
32ccfda5d5108af1a460a06d8701c1ab52e0ed78,2012-11-08 15:12:54-05:00,Merge pull request #660 from michaljemala
97caba30cceb8ca874235178df0c048179043fbd,2012-11-09 14:42:18-05:00,"Merge pull request #670 from garyrussell/INT-2814

* INT-2814: Fix OSGI Versions for OXM/WS"
3d93bb409e86b6b1a8c994cee42d4fd6cede7ece,2012-11-09 14:49:06-05:00,"Merge pull request #672 from garyrussell/INT-2438

* INT-2438: Fix Temporary Remote Directory"
5f2cc5a5871936a6c954da7a9529c4bbe78c93cd,2012-11-09 16:25:11-05:00,Merge pull request #673 from markfisher/INT-2811
5b0b0d731f31b05c504d5e435cfcb05887995c57,2012-11-14 01:45:52-05:00,"Merge pull request #675 from garyrussell/INT-2815

# By Gary Russell
* garyrussell-INT-2815:
  INT-2815 Support Tx Synch In Pollable Consumers"
78394aa5ddd7dec60c8b2dd8560a91a83281c93f,2012-11-19 15:40:39-05:00,Merge pull request #674 from markfisher/INT-2798
2461b3548d56b01122f1178722405c212cac7ac9,2012-11-20 17:02:57-05:00,"Merge pull request #678 from garyrussell/INT-2821

* INT-2821: Find Existing Mails if No RECENT Support"
ff039c3ea278b9910365b3cfe9c920743ae60bd4,2012-11-20 18:09:39-05:00,"Merge pull request #679 from garyrussell/INT-2820

* INT-2820: Shutdown Default Idle Executor"
4822d9b2094dd96068aa96b0d1d2148309afc3c1,2012-11-20 19:47:47-05:00,"Merge pull request #681 from garyrussell/INT-2827

* INT-2827: Fix Amqp Gateway Tests"
84cfb62592134ca3e0ca1dd71905f4a654f1f647,2012-11-20 20:40:24-05:00,"Merge pull request #677 from garyrussell/INT-2815a

* INT-2815a: Refactor AbstractPollingEndpoint"
de5082a25dfe9a1b7d40ce7ec081284509027673,2012-11-21 09:24:16-05:00,Merge pull request #676 from ghillert/INT-2674
9bed8608383a452953477021a8dc7f66aacbc81c,2012-11-21 09:29:01-05:00,Merge pull request #680 from ghillert/INT-2826
12375ec0524f9511b083e8659d6ed0a79a543a19,2012-11-21 17:45:35-05:00,"Merge pull request #682 from garyrussell/INT-2828

* garyrussell-INT-2828:
  INT-2828 Remove Package Tangle"
3d04e15fd3cf1bda8e246e0ca478fbc44f2bba8e,2012-11-29 21:06:39-05:00,"Merge pull request #686 from garyrussell/INT-2839

* INT-2839: Fix TCP Caching Connections with Gateways"
28fa4407b9a9ddc9f4669240d280ee59025fd13c,2012-11-30 11:56:55-05:00,"Merge pull request #687 from ghillert/INT-2840

* INT-2840: Fix build failure against Spring 3.0.7

For reference see: https://jira.springsource.org/browse/INT-2840"
4ce08ad6dcfd0f0269382552f781fc5ed85a1236,2012-11-30 12:04:38-05:00,"Merge pull request #688 from ghillert/INT-2841

* INT-2841: Fix broken links"
84f4bea5e7cac4a287989314cb40d57760f858c8,2012-11-30 13:59:01-05:00,"Merge pull request #685 from garyrussell/INT-2837a

* INT-2837a:
  INT-2837 Fix Accept Hdr for Serializable Response"
120410f78cccd1fb2638b71cada7d2996db08a21,2012-11-30 15:38:57-05:00,"Merge pull request #683 from garyrussell/INT-2832-2833

* INT-2832-2833:
  INT-2832/2833 Aggregator Fix and Documentation"
675dc4cf60d8eb1cbe50cd44b69319ffaebb1b9d,2012-11-30 16:19:59-05:00,"Merge pull request #689 from ghillert/INT-2843

* INT-2843: Doc: with 2.2 Java serialization over HTTP not enabled by default

* INT-2842: Doc: Re-order 'What's New in 2.2' section"
a80c6e9ce60708c0bb276757eda324f76b623a2e,2012-12-03 08:57:54-05:00,Merge pull request #692 from artembilan/INT-2846
0cbde92b5a361d416b764df04f594f638d0d775d,2013-01-14 10:48:26-05:00,Merge pull request #691 from artembilan/INT-2845
bcaf11c3f80008e1485e9777b574748d2c833ab6,2013-01-14 12:07:40-05:00,Merge pull request #694 from dturanski/INT-2859
3c59d377f43e30607cfa98c3909d1005226a336a,2013-01-14 23:50:27-05:00,"Merge pull request #703 from garyrussell/INT-2847

* garyrussell-INT-2847:
  INT-2847 Fix Test with Java 7"
f3b1c9d9d2db88917e260ff80bb803b9a7c715e9,2013-01-15 13:15:32-05:00,Merge pull request #696 from ferstl/INT-2863
0ff2a2027b23b12cdbe33c034f46bf2fce2f8035,2013-01-15 15:24:23-05:00,"Merge pull request #700 from garyrussell/INT-2875

* garyrussell-INT-2875:
  INT-2875 Fix CPU Usage In JMS Test"
a994b40b477cafbb1271288246336986d177a55e,2013-01-16 12:04:03-05:00,"INT-2858: Fix for Repeatable invocation.proceed()

Heretofore there wasn't ability to make some scenario like this, when we want to make failure notification on each retry:

<service-activator>
  <request-handler-advice-chain>
      <bean class=""org.springframework.integration.handler.advice.RequestHandlerRetryAdvice""/>
      <bean class=""org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice""
	    p:onFailureExpression=""#exception"" p:failureChannel-ref=""errorOnEachRetryChannel""/>
  </request-handler-advice-chain>
</service-activator>

The second Advice was invoked only once. This was because `ProxyMethodInvocation` keeps the index of current interceptor
on each `invocation.proceed()`, which is recursive by design.

So, change `AbstractRequestHandlerAdvice` to use `((ProxyMethodInvocation) invocation).invocableClone().proceed();`
This way, we get a fresh `MethodInvocation` for the current `Advice` with nested desired advices.

JIRA: https://jira.springsource.org/browse/INT-2858

INT-2858: Polishing; PR Comments

Introduce `AbstractRequestHandlerAdvice.ExecutionCallback#cloneAndExecute()` especially for repeatable Advices, e.g. `RequestHandlerRetryAdvice`
to avoid overhead from `clone()` on simple Advices

INT-2858: Doc ExecutionCallback#cloneAndExecute()

INT-2858 Polishing

Rework docs; add Javadoc; add to test case."
df6a8dee04b5a42b8472fdfbd9a6eb111b17febd,2013-01-16 12:06:13-05:00,Merge pull request #693 from artembilan/INT-2858
3b2489ea3e640334d91ed1c530950d5ac5f33443,2013-01-16 12:55:07-05:00,Merge pull request #704 from artembilan/INT-2878
03053a8450d6c42cec90676db369090d0dca0d09,2013-01-16 13:10:54-05:00,"INT-2880 Fix System.out Concurrent Race Condition

Gradle may run tests using multiple threads.

Using shared resources (e.g. `System.out`) may produce concurrency issues.

* Remove usage of `System.out`
* Add mocking around `LoggingHandler#messageLogger`.

JIRA: https://jira.springsource.org/browse/INT-2880"
05021f1e24467e24b614a2a9d0d575dd665d0dec,2013-01-16 13:12:49-05:00,Merge pull request #705 from artembilan/INT-2880
58a5fa3be802e4ac6634b90d427671636dfaf556,2013-01-18 12:48:01-05:00,"Merge pull request #706 from garyrussell/INT-2864

* garyrussell-INT-2864:
  INT-2864 Enforce Ref/Expression Mutual Exclusivity"
f3772914f2ce0c994f70a5b4196b67f75467f470,2013-01-18 13:01:36-05:00,"Merge pull request #701 from garyrussell/INT-2838

* garyrussell-INT-2838:
  INT-2838 Allow @bean Expressions in (S)FTP Out"
e66a0981498ecaa64d33c8f2c7b926ab6e465aea,2013-01-18 15:36:47-05:00,"Merge pull request #710 from garyrussell/INT-2889

* INT-2889: Fix Concurrency Problem in Type Converter"
be29f909baea900c7ed6c4bf2e273dc3f3e758cb,2013-01-22 12:30:51-05:00,"Merge pull request #695 from garyrussell/INT-2861-2862

* INT-2861-2862:
  INT-2861/INT-2862 TCP Outbound Gateway Fixes"
3245fa58dcac1dc14985579de2dc09e5c28da5ff,2013-01-22 14:29:43-05:00,"Merge pull request #698 from garyrussell/INT-2860

* INT-2860: Improve TCP Connection Timeout"
11e303744eb143347bd6781d9d553c3da2999626,2013-01-22 15:16:20-05:00,"Merge pull request #708 from garyrussell/INT-2886

* INT-2886: Fix TCP Connection Exception"
a8aea3df1787a5c1f9c37d62ac2d7fa2d603661f,2013-01-22 15:23:22-05:00,"Merge pull request #711 from garyrussell/INT-2890

* INT-2890: Remove Hard-Coded Port from HTTP Tests"
ed3cfe027122e63df9845105e9b5337ae8211dc7,2013-01-22 16:12:12-05:00,"Merge pull request #702 from garyrussell/INT-2876

* INT-2876: Use Custom InputStream For NIO"
cc6f07966fa5e829fed79edbde7837ecda0b0f75,2013-01-23 13:07:33-05:00,"Merge pull request #699 from garyrussell/INT-2874

* INT-2874: Fix JSON/JMS Incompatibility"
c817280ed9c1abed6d05334d98dad6ccbd21801f,2013-01-23 17:32:40-05:00,"Merge pull request #713 from garyrussell/INT-2894

* INT-2894: Do Not Leak ThrowableHolderException"
afe6f25b812f7fb88bbdf1d0b5571fb24a41936e,2013-01-25 12:40:21-05:00,"Merge pull request #715 from garyrussell/INT-2895

* INT-2895: Update Bundlor Ranges for 2.2.1"
a9369a1ecf0943f040d737daa797c17c26fe1210,2013-01-25 17:56:28-05:00,"Merge pull request #716 from garyrussell/INT-2873

* INT-2873: Create 3.0 Schemas"
3d9c87efe4ac56360a471605633d19bdca7d410b,2013-02-01 15:56:47-05:00,Merge pull request #721 from artembilan/INT-2884
f3e59cda26f1821b119e6341059cda2321a531b4,2013-02-01 19:00:53-05:00,Merge pull request #725 from artembilan/INT-2907
ed4fe234c7b50a389626a950ba6850b3c57c064b,2013-02-04 17:42:08-05:00,"Merge pull request #717 from garyrussell/INT-2825

* garyrussell-INT-2825:
  INT-2825 Remove Temporary 2.2. Interface"
90c54c5f74bf995d6a86c68d86d433b8e63e0d40,2013-02-05 09:51:44-05:00,"Merge pull request #718 from garyrussell-INT-2682

* garyrussell-INT-2682-2:
  INT-2682 JMS GW - Support Expression for replyDest"
e9b47ff02461ca237596a502e754f7c279c448e3,2013-02-05 12:51:58-05:00,Merge pull request #712 from artembilan/INT-2893
6d53e4b61cbe3ecffe4d4bfed30ac0b0e07522e5,2013-02-05 14:13:59-05:00,Merge pull request #726 from artembilan/INT-2908
0a2426704181ca848f0b1296e5750be54f588912,2013-02-06 16:44:02-05:00,"Merge pull request #731 from garyrussell/INT-2915

* garyrussell-INT-2915:
  INT-2915 JMS Remove Deprecated Attributes"
35919ea2ee10c10a972888ddb13e57c2679fcb01,2013-02-07 11:48:06-05:00,Merge pull request #738 from ghillert/INT-2697
9c7116a9360c96b0e0adf2b95353f80034222c49,2013-02-08 15:07:24-05:00,"Merge pull request #740 from garyrussell/INT-2923

* garyrussell-INT-2923:
  INT-2923 3.0 Reference Changes"
f88a97332ad1b4c031b4658d64b69492c6b504d3,2013-02-08 16:33:30-05:00,Merge pull request #736 from nickspacek/INT-2920
0602f88c9fbb558daddb4373a0e9bd27701c62cb,2013-02-08 17:59:54-05:00,"Merge pull request #719 from garyrussell/INT-2829

* garyrussell-INT-2829:
  INT-2830 Resolve Class Tangle"
fd4fa6aa757cf7c3eb1bfe79732e81ec75c134a6,2013-02-11 11:26:05-05:00,Merge pull request #741 from ghillert/INT-2769
e994c4dab3f09fbbadf11b250ed24a6dd6e3b64c,2013-02-11 23:45:20-05:00,"Merge pull request #735 from sobychacko/INT-2526

* sobychacko-INT-2526:
  INT-2526 - Remove additional deprecations in Core
  INT-2526: Remove deprecations in Core after upgrade to Spring 3.1.1"
77fae8844a197459cc515f3fc198a1d2ae64f205,2013-02-12 10:51:36-05:00,"INT-2888 Fix MapToObjectTransformerParser CL Issue

In the parent-child environment configuration that relies on class names may produce
a `ClassNotFoundException`.

* remove usage of `ClassLoader` in the `MapToObjectTransformerParser` and allow to use the `ConversionService` from application context
* remove deprecation from `MapToObjectTransformer`
* refactor `MapToObjectTransformer` to use `IntegrationObjectSupport#getConversionService()`
* remove fallback to the `beanFactory#getConversionService()` in the `ExpressionUtils`

JIRA: https://jira.springsource.org/browse/INT-2888

INT-2928: Do Not Fallback to BF's ConversionService

* Polishing according PR's comments
* Important note about `conversionService` & `integrationConversionService` beans
* Link a JIRA about elimination of `BeanFactory`'s `ConversionService` usage
* Add a note to the 2.2-3.0 Migration Guide

JIRA: https://jira.springsource.org/browse/INT-2928

INT-2888 Doc Polishing"
c60b7afa38944141ba87a0c9e7ea8ae8224e3314,2013-02-12 10:52:41-05:00,Merge pull request #722 from artembilan/INT-2888
bc51c86a2186687aec13653c441d3cefe9c893a4,2013-02-12 11:05:53-05:00,Merge pull request #744 from ghillert/INT-2919
22859bf63e969242839e3e1b96b9fe6ea744c24b,2013-02-12 11:56:51-05:00,Merge pull request #742 from ghillert/INT-2728
8c07856fa11691039e4b6e5b75979fc77561eb47,2013-02-12 14:27:31-05:00,"INT-2899: Remove Redundant Logic from Aggregator

Previously, `AggregatingMessageHandler#setExpireGroupsUponCompletion` had additional logic
for removing complete MessageGroups. It could produce some overhead on application start-up with big persistent `MessageStore`.
This logic played a role to remove empty groups from a `MessageStore`.
Since `AbstractCorrelatingMessageHandler#forceComplete` has an ability to to remove empty groups too,
this logic became redundant.
So, to clean `MessageStore` from empty complete groups, it's sufficient to use a `MessageGroupStoreReaper`.

* Remove logic iterating over the `MessageStore` from `AggregatingMessageHandler#setExpireGroupsUponCompletion`
* Polishing `AggregatorSupportedUseCasesTests.java` to use `store.expireMessageGroups(0)`
* Introduce `empty-group-min-timeout` xml-attribute, populating `AbstractCorrelatingMessageHandler#minimumTimeoutForEmptyGroups`
* Add parser tests for `empty-group-min-timeout` attribute

JIRA: https://jira.springsource.org/browse/INT-2899

INT-2899: Documentation about changes of ACMH

* rename new XSD-attribute to `empty-group-min-timeout`
* add to Reference Manual description about `empty-group-min-timeout`
* add 'What's new' for `empty-group-min-timeout`
* add 2.2-3.0 Migration Guide note

INT-2899 Doc Polishing"
6eb009fd62fdb95c9c2721a40ef59e5cb6a597a8,2013-02-12 14:29:29-05:00,Merge pull request #727 from artembilan/INT-2899
716b5f7f8ede82165d9f65410cbb0364a4934194,2013-02-12 14:56:25-05:00,Merge pull request #729 from ghillert/INT-2912
7c7dbe65c4e46b6a063dc204e303212f1f0a5fb7,2013-02-12 15:31:27-05:00,"Merge pull request #732 from garyrussell/INT-2823

* garyrussell-INT-2823:
  INT-2823 Add QueueChannelOperations"
82173d3be68802b4e9d33259fa44f6a90472ae89,2013-02-12 16:55:44-05:00,"Merge pull request #739 from garyrussell/INT-2922

* garyrussell-INT-2922:
  INT-2922 Fix TypeConverter Concurrency Issue"
d765add2553d3bbfcb1fd580c3882301d5590ae4,2013-02-13 12:38:30-05:00,"Merge pull request #728 from garyrussell/INT-2911

* garyrussell-INT-2911:
  INT-2911 IO Exceptions Not Logged as ERROR"
937b38c36625f4043cd7718d9da599c4302def2b,2013-02-13 14:24:36-05:00,"Merge pull request #733 from garyrussell/INT-2900

* INT-2900: Remove Extraneous Debug Log"
0ab076ee240d6a8ebf93e1d9bee68862e5747c69,2013-02-14 02:04:07-05:00,"Merge pull request #746 from garyrussell/INT-2906

* garyrussell-INT-2906:
  INT-2906 Upgrade Groovy to 2.1.0"
d8dc140b173d7788c4f1e1dbc0ad2c63543787bb,2013-02-14 02:10:56-05:00,"Merge pull request #745 from garyrussell/INT-2929

* garyrussell-INT-2929:
  INT-2929 Fix JMX Occasional Failing Tests"
0374b56ee1db7da36730b661ad713476fdefac20,2013-02-14 11:05:15-05:00,"Merge pull request #734 from garyrussell/INT-2853

* garyrussell-INT-2853:
  INT-2853 ObjectToStringTransformer Improvements"
bb5bd1169e20caf4b3c0386f0629406c12d9a324,2013-02-14 12:48:23-05:00,"Merge pull request #743 from garyrussell/INT-2877

* garyrussell-INT-2877:
  INT-2126 Add TcpConnection Event Publisher"
c1fe62857b1d248f8c427852ffbf2852c4dc17c2,2013-02-14 14:35:06-05:00,Merge pull request #747 from ferstl/INT-2931
69fcf5b16a1c4ed42abfdc8cd1294d731967be76,2013-02-25 13:08:55-05:00,"Merge pull request #749 from garyrussell/INT-2936

* INT-2936: Fix TCP Binary DeSerialization with NIO"
9efb70f24ee129c9ca1afadef90b2c50a9140555,2013-02-25 14:40:11-05:00,"Merge pull request #751 from garyrussell/INT-2937

* INT-2937: Fix Race Condition in MGS Reaper"
139fabed22204024d627ba18ba55aef4506daf3f,2013-03-01 11:48:46-05:00,Merge pull request #757 from bijukunjummen/patch-1
8b476b2d76c0256f70e1c444b93aeacf19b3210f,2013-03-05 11:32:57-05:00,Merge pull request #756 from ghillert/INT-2945
35365990f91742b31735c8da745384bfa7821562,2013-03-08 10:10:57-05:00,"Merge pull request #752 from garyrussell/INT-2932

* garyrussell-INT-2932:
  INT-2932 TCP Connection Events - Doc and Polishing"
834974481ae62d32565c198d518d7135344489d1,2013-03-12 18:45:43-04:00,Merge pull request #707 from ghillert/INT-2882
a3ff5bc2e7babd349ff1cdce6131d983a8214aea,2013-03-13 12:06:01-04:00,Merge pull request #764 from artembilan/INT-2958
0fc21de170d7119dd428fce5dc4f7b1063ff8ec8,2013-03-14 10:54:19-04:00,"Merge pull request #765 from garyrussell/INT-2957

* garyrussell-INT-2957:
  INT-2957 Remove Unnecessary AspectJ Dependencies"
cd7e0576ed1f4ad617007358a2632d5c953d79aa,2013-03-14 13:49:35-04:00,"Merge pull request #759 from sobychacko/INT-2531

* sobychacko-INT-2531:
  INT-2531: Remove deprecations in XML Adapter after upgrade to Spring 3.1.1"
be4416c9bff0f4acee40e665600bd1b5656a497d,2013-03-14 15:50:07-04:00,Merge pull request #767 from ghillert/INT-2960
e00389104034164b1316edfafb713d6313b4e5f2,2013-03-26 23:50:57-04:00,"Merge pull request #772 from garyrussell/INT-2959

* garyrussell-INT-2959:
  INT-2959 Correct Schema GW reply-timeout Doc."
dfe8d07eea41bfbc4684ad358b30d0301937139a,2013-03-27 17:31:12-04:00,"Merge pull request #761 from garyrussell/INT-2955

* INT-2955: Fix Collection/Map Conversion"
ea687466657cb70302e2ee78b59a89f9146ceb7e,2013-03-27 17:44:00-04:00,"Merge pull request #773 from garyrussell/INT-2954

# By Gary Russell
* INT-2954:
  INT-2954 (S)FTP Fix AutoCreate Top Level Dir"
110957f975e1f9f32246a4ec81b0d7681fcd3426,2013-03-27 23:31:04-04:00,"Merge pull request #775 from garyrussell/INT-2968

* garyrussell-INT-2968:
  INT-2968 SFTP - Update JSch to 1.49"
93211942cf64f2f82fd3e5a82e4f2aa4b4446fa7,2013-04-02 18:08:25-04:00,"Merge pull request #777 from garyrussell/INT-2970

* garyrussell-INT-2970:
  INT-2970 Update to Spring-AMQP 1.2.0.M1"
3c98b371fae10c2ad6c813dfefb9105610785fee,2013-04-03 00:14:03-04:00,"Merge pull request #754 from garyrussell/INT-2939

* garyrussell-INT-2939:
  INT-2939 Polishing
  INT-2939 LoggingHandler Improvements"
77c93bc6e552ae0ac1d0f92d0d356e0dc0d3fb67,2013-04-04 13:43:14-04:00,Merge pull request #737 from ghillert/INT-2916
7d99a9a07a5bd91d000919579d278c493c9b1768,2013-04-09 10:02:31-04:00,Merge pull request #776 from artembilan/INT-2971
3e5a3a2b3dc728d9331053cea87fb2c5a46f3685,2013-04-10 10:41:57-04:00,Merge pull request #769 from artembilan/INT-2720
fe7c311f9c844a648e966d1721f39f68e34a05ed,2013-04-10 17:46:36-04:00,"Merge pull request #782 from garyrussell/INT-2989

* garyrussell-INT-2989:
  INT-2989 Increase JMS Test Timeouts"
7e8035acd2fbfd4f9c73c324786aef8e28226075,2013-04-11 12:19:12-04:00,"Merge pull request #783 from sobychacko/INT-2926

* sobychacko-INT-2926:
  INT-2926:Remove deprecation warnings in CacheServerProcess in the gemfire module"
4c348d3785e10458282216ddc442e21aa860e621,2013-04-15 15:59:15-04:00,Merge pull request #785 from ghillert/INT-2985
768d7ff713ca992f1cccd8dd2920b1c01749979a,2013-04-15 17:17:32-04:00,Merge pull request #786 from ghillert/INT-2964
2e2986d3545e7817775a77715ae67f868294ed34,2013-04-16 16:19:35-04:00,Merge pull request #787 from ghillert/INT-2992
b50410923f52fd2dea71dc692a93e9b983304837,2013-04-16 16:32:35-04:00,"Merge pull request #779 from garyrussell/INT-2981

* garyrussell-INT-2981:
  INT-2981 - Add Rename (mv) to (S)FTP Gateway"
2c5b9eb97779572479f05f1e541959eb964e52b8,2013-04-19 09:56:41-04:00,"Merge pull request #788 from garyrussell/INT-2996

* garyrussell-INT-2996:
  INT-2996 Fix Class and Package Cycles"
e6753efd508927a115f97773a8d1cadea3a2f032,2013-04-23 23:39:07-04:00,"Merge pull request #780 from garyrussell/INT-2982

* garyrussell-INT-2982:
  INT-2982 Add Syslog Inbound Channel Adapter"
749896b812a0d62096375b3ce482cd985eba4088,2013-04-24 00:13:15-04:00,"Merge pull request #789 from garyrussell/INT-2892

* garyrussell-INT-2892:
  INT-2892 Add 'local-filter' to (S)FTP Adapters"
5e7aa59f73737c94b7e6fc38564ac6f9fb833017,2013-04-24 11:23:43-04:00,Merge pull request #781 from ghillert/INT-2980
7d6b5850f5b61e3fe3a15dd2c1683c08cf764387,2013-04-26 00:23:04-04:00,"Merge pull request #790 from garyrussell/INT-2982a

* garyrussell-INT-2982a:
  INT-2982 Fix Hard-Coded Ports in Syslog Tests"
0b5cabf22cfffc11a6e4f43415a7daf174838708,2013-04-29 10:29:56-04:00,"Merge pull request #793 from garyrussell/INT-2620

* garyrussell-INT-2620:
  INT-2620 Fix Race Condition in Failover Tests"
486e0bee3cd0836c0c136e214f30d4ac243f6e63,2013-04-29 10:37:53-04:00,"Merge pull request #784 from garyrussell/INT-2991

* garyrussell-INT-2991:
  INT-2991 Filtered Messages Marked SEEN"
ab9b6fb1dd71fa7b0664910c70c64289d38fd8e3,2013-04-30 09:38:15-04:00,"Merge pull request #774 from artembilan/INT-2831

* INT-2831:
  INT-2831: Add Jackson 2 support"
5d1759cf422cac2079afa9bcaee0c5ea357ea32f,2013-04-30 11:53:01-04:00,"Merge pull request #755 from artembilan/INT-2455

* INT-2455:
  INT-2455: Support HTTP Outbound 'encode-uri' Flag"
9bee4b3ff2838f7d8dedb745f38ad8c2ec3cb9fc,2013-05-01 16:35:22-04:00,"Merge pull request #798 from garyrussell/INT-3001

* garyrussell-INT-3001:
  INT-3001 Field Order in SyslogToMapTransformer"
3dbf1158cca0fecb270ac273612f07af68610d0e,2013-05-01 16:43:00-04:00,"Merge pull request #796 from garyrussell/INT-2976

* garyrussell-INT-2976:
  INT-2976 Update JavaMail to 1.4.7"
8b164fef1c79537d710f7269b680e46534793953,2013-05-01 17:16:09-04:00,"Merge pull request #778 from kdvolder/master

* TestUtils:
  Fix compile error in STS/Eclipse."
e24efc89b34a02de7b8d303705ba90042f1be800,2013-05-01 17:31:19-04:00,"Merge pull request #795 from dturanski/XD-33

* XD-33 - Implemented Local Channel Registry"
fd9dc75550a329a55b03a9a20a324fce27612003,2013-05-07 10:32:31-04:00,"Merge pull request #797 from garyrussell/INT-2903

* INT-2903: Fix Timing Problem in TCP Timeout Tests"
3eab287e952fab5c85db8f522b14f73e83af7e9a,2013-05-07 10:42:43-04:00,"Merge pull request #792 from garyrussell/INT-2972

* INT-2972: FixedMethodFilter - Return Mutable List"
121b28f426b910803e847b6e2b024c7384321c3f,2013-05-07 12:39:09-04:00,"Merge pull request #762 from garyrussell/INT-2956

* INT-2956: Fix NIO With Custom Deserializers"
23856828a7cc4826b2afdfa2b5714209a36e0e1b,2013-05-07 12:56:43-04:00,"Merge pull request #794 from garyrussell/INT-2999

* INT-2999: Add BeanResolvers to AMQP OB Endpoints"
7ef3ee5f6e6d54bcdc9efadfaf4f95d412cf1e43,2013-05-07 13:26:01-04:00,"Merge pull request #799 from garyrussell/INT-3002

* INT-3002: Fix Content-Type Mapping"
515d78f8ee22b390c4ef432504a91c4571859403,2013-05-07 16:25:06-04:00,"Merge pull request #801 from garyrussell/INT-3007

* INT-3007: Add WARN Log When Advice Skipped"
116f4934c1bc815967c50a6f30c1ed96b515f248,2013-05-08 12:25:04-04:00,"INT-2935: Improve Event Inbound Adapter

Previously, the `ApplicationEventListeningMessageProducer` accepted
all `ApplicationEvent`'s and than filtered them.
This caused some `ApplicationEventMulticaster.retrieverCache` overhead.

* Improve `ApplicationEventListeningMessageProducer` to `implements SmartApplicationListener`.

    This allows filtering earlier on first the appropriate `ApplicationEvent`
    using `ApplicationEventListeningMessageProducer#supportsEventType`
    and caching the `ApplicationListener` only for that `ApplicationEvent`.

* Re-register `ApplicationEventListeningMessageProducer` in the `ApplicationEventMulticaster`
    when  `ApplicationEventListeningMessageProducer#setEventTypes` is invoked
    to clear the `ApplicationEventMulticaster.retrieverCache`.

* Move `org.springframework.integration.gemfire.inbound.SpelMessageProducerSupport` to core `ExpressionMessageProducerSupport`.

* Add test for the new logic int `ApplicationEventListeningMessageProducer` and its behavior with respect to the `ApplicationEventMulticaster.retrieverCache`.

JIRA: https://jira.springsource.org/browse/INT-2935

INT-2935: EMPS JavaDoc & AELMP ReadWriteLock

INT-2935: AELMP#eventTypes changing 'barrier'

INT-2935: avoid 'eventTypes' mutation afterwards

INT-2935: Polishing according PR comments

INT-2935: Fix NPE in the `setEventTypes`

Minor Polishing

   Polish java docs/comments
   Remove compiler warnings"
698cb10fe42b4c3150c0cb63641b87d380d3ff6f,2013-05-08 12:29:29-04:00,"Merge pull request #750 from artembilan/INT-2935

* INT-2935:
  INT-2935: Improve Event Inbound Adapter"
0c4c0d9f17963a9fd9677e9f62d78e3c8e537d76,2013-05-09 10:58:03-04:00,"Merge pull request #800 from garyrussell/INT-3004

* INT-3004: Detect Timeout in MessagingTemplate"
b06f3aaecb38bc054bf52c797832864d5952623f,2013-05-13 11:27:10-04:00,"Merge pull request #804 from artembilan/INT-2783

* artembilan-INT-2783:
  INT-2783: Add BeanResolver to StoredProc params"
1f9c6e39b6d6817e8e1f6d98efb40608c490b7ba,2013-05-20 11:21:07-04:00,"Merge pull request #802 from garyrussell/INT-2855

* garyrussell-INT-2855:
  INT-2855 File Tailing Inbound Channel Adapter"
20d7c30fd091f28d23d1c5c77d6a0fc4059da90d,2013-05-20 17:50:02-04:00,"Merge pull request #803 from srt/INT-3011

* INT-3011:
  INT-3011 Groovy Classloader and BeanFactory Fixes"
fa9f747c37f28063041b5ce7d11acca4351e975f,2013-05-21 12:29:31-04:00,"Merge pull request #753 from srt/INT-2755

* INT-2755:
  INT-2755: Support 'id' For <chain> Child Elements"
e2553994156c25aaadd1d77a46fe7dfc7db2e111,2013-05-21 15:07:46-04:00,"Merge pull request #809 from garyrussell/INT-3026

* INT-3026: Header Enrichment Using Gateways"
3176cbaf344274c28684e12a253f3e21f2aa0cea,2013-05-22 12:58:45-04:00,"Merge pull request #758 from garyrussell/INT-2951

* garyrussell-INT-2951:
  INT-2951 Add Context Id to Dispatcher has no Subs."
d649a9f54204126fa794312a2ce0c23a42b4d58d,2013-05-22 15:05:28-04:00,"Merge pull request #810 from garyrussell/INT-3028

* garyrussell-INT-3028:
  INT-3028 Fix Tailing Factory Bean"
564956de860d95eea6b54e7f182d070300388c4c,2013-05-23 10:43:13-04:00,"Merge pull request #806 from ghillert/INT-3021

* INT-3021:
  INT-3021 - Fix Sonar Build Plan"
2bf6b9ba14e6bd4ed3c45a08c77850a29a3621e3,2013-05-23 11:33:53-04:00,"Merge pull request #808 from artembilan/INT-3022

* INT-3022:
  INT-3022: SimpleResponseMessageExtractor NPE fix"
b64a43cc0eb3e07f636ce79b9c80c5c6a6acdf69,2013-05-23 12:08:34-04:00,"Merge pull request #760 from garyrussell/INT-2938

# By Gary Russell
* INT-2938:
  INT-2938 Filter - Provide Option for Discard"
91afaedbe2eeb608b7d3d85321335dd28ef4d58d,2013-06-06 09:55:27-04:00,"Merge pull request #815 from artembilan/INT-2993

* artembilan-INT-2993:
  INT-2993: JCMStore: fix 'idCache' race condition"
0c3eaaa3b5eac74e372990a9eb269ccd86fbd9d0,2013-06-06 11:39:42-04:00,"Merge pull request #812 from garyrussell/INT-3035

* INT-3035: Fix ExponentialMovingAverageRate 'window'"
0913ff3607426871915137c2b0cdea97533d5ff5,2013-06-07 16:24:04-04:00,"Merge pull request #818 from garyrussell/INT-3031

* INT-3031: Fix RMI Remote Failed Message"
1a27d8194158572f59622f1618de17b99dfb52f0,2013-06-07 18:19:56-04:00,"Merge pull request #816 from habuma

# By Craig Walls
* twitter-api-retire:
  Update Spring Social Twitter version to 1.0.4"
cc5bcf64a68bb7b6e59132cc675c36be694e174a,2013-06-09 20:37:46-04:00,"Merge pull request #819 from garyrussell/INT-3053

* INT-3053: Allow task-executor on <reply-listener/>"
af35733b20fa97a5df123a155362f9b5781ac4b6,2013-06-10 13:12:39+01:00,"Merge pull request #814 from willschipp/INT-3037

* INT-3037:
  INT-3037 Fix JDBC MS Discard After Completion"
5cff151763360702743588c4093dae793285b10e,2013-07-01 07:03:07+01:00,"Merge pull request #817 from alighm/INT-2990

* INT-2990:
  INT-2990 Remove System.out in PipelineJmsTests"
a203b652c98b515f590b493d5bf68bd797675750,2013-07-15 00:37:00-04:00,"Merge pull request #805 from artembilan/INT-2865

* artembilan-INT-2865:
  INT-2865: Stored Procedure SqlReturnType support"
e00c112e575387f7b1cdfcde53a0ab8afb0e4818,2013-07-16 13:59:47-04:00,"Merge pull request #832 from garyrussell/INT-3089

* garyrussell-INT-3089:
  INT-3089 Fix FileExistsMode.IGNORE"
70886b254371d07d7ad267f539348b201ff45faf,2013-08-19 13:48:31-04:00,"INT-2822: 'requires-reply' for Outbound Gateways

* Add `requires-reply` attribute for all adapters outbound gateways as `true` by default
* WS-outbound-gateway is still without it, because it has its own specific attribute `ignore-empty-responses`
* Make `requires-reply` as `false` by default for `jdbc:stored-proc-outbound-gateway` inasmuch as `jdbc:stored-proc-outbound-adapter`
doesn't have ability to configure `returning-resultset`
* add parser tests for `requires-reply`

JIRA: https://jira.springsource.org/browse/INT-2822

INT-2822 'requires-reply' for ws:outbound-gateway

Default false.

INT-2822: Polishing after rebase

INT-2822: deprecate 'ignore-empty-responses'

* Add 'requires-reply' section into What's New

INT-2822: remove 'ignore-empty-responses' from RM

INT-2822: Polishing after rebase

INT-2822: Rebased and polished

INT-2822: Rebased and polished

Add WARN within deprecated `AbstractWebServiceOutboundGateway#setIgnoreEmptyResponses`

Revert 'ignore-empty-responses'; Doc Polishing"
b5ee5338db31deeaeee0461130419c70804bc502,2013-08-26 15:40:59-04:00,"Merge pull request #822 from wwadge/INT-3054

* INT-3054:
  INT-3054: Add ExpressionEvalMap Support
  INT-3054 URI Variable Mapping Improvements"
98b42cbe36e9696f93ad2befaa49f3e65c9d0f4e,2013-09-03 18:15:02-04:00,"INT-3070: Fix Delayer with MongoDbMessageStore

The `DelayHandler.DelayedMessageWrapper` works correctly, as designed by INT-3049.
However `DelayHandler.DelayedMessageWrapper` contains `Message` as a property
and `GenericMessage` can't be reconstructed automatically.

So, added new `DBObjectToGenericMessageConverter` to read `GenericMessage` for
`DelayHandler.DelayedMessageWrapper#original` property.

JIRA: https://jira.springsource.org/browse/INT-3070

Cherry-picked 2.2.x

INT-3070: PR comments

INT-3070: Remove `assert` for common state"
f28f30c880021cf963c3f2b0ee2918ab0d54eec2,2013-09-16 15:41:00-04:00,"INT-2117: Test that trim() Works in the AMMR

* `AbstractMappingMessageRouter#addChannelFromString` uses
`StringUtils.tokenizeToStringArray`, so it's enough to check it from test.

JIRA: https://jira.springsource.org/browse/INT-2117"
63cbf736a2e316bc77ec967538152306e72b2a20,2013-09-19 12:35:34-04:00,"INT-3139: Add #jsonPath SpEL Function Support

* #jsonPath function is registered automatically if the library is on the classpath
* Add otional dependency on `com.jayway.jsonpath:json-path` artifact
* Add `JsonPathUtils` class as a wrapper around `JsonPath`
* Add `#jsonPath` tests for: `<transformer>`, `<filter>`, `<splitter>`, `<router>`

JIRA: https://jira.springsource.org/browse/INT-3139

INT-3139: Further improvements

* Remove `SpelFunctionRegistrar`
* Introduce `SpelFunctionFactoryBean`

INT-3139: Polishing"
f96e5ee00ba8a554cfa005fc07528dacc20c1125,2013-09-20 01:52:19-07:00,"Merge pull request #890 from garyrussell/INT-3144

INT-3144 Fix JMX Tests Timing Issue"
e8ecbac7fde25e4311910235222747e53ae8f965,2013-09-23 16:27:54-04:00,"INT-2943: Retry: Don't Wrap in MessagingException

Previously, `RequestHandlerRetryAdvice` wrapped a Handler's (business) Exceptions in a
`MessagingException` on each retry within `RetryCallback#doWithRetry`
and before `RetryPolicy#canRetry`.
It made useless some retry framework out-of-the-box features like `BinaryExceptionClassifier`

* Push wrapping to `MessagingException` after `retryTemplate#execute`
* Polishing `ErrorMessageSendingRecoverer` regarding new logic
* Add `retryableExceptions` test

You can now properly specify Business exceptions with the retry policy to
perform conditional retry.

JIRA: https://jira.springsource.org/browse/INT-2943

Polishing

Only wrap Throwable in ThrowableHolderException if the Throwable
is not an Exception.

INT-2943: Polishing ErrorMessageSendingRecoverer"
19dd45a98a314d0a1eba9a2be23d5641d4701787,2013-09-24 16:55:08-04:00,"INT-3133: Add <spel-property-accessors> Support

* Add <spel-property-accessors> to configure a list of beans
that implement `org.springframework.expression.PropertyAccessor`
* Add `SpelPropertyAccessorRegistrar` to manage a list of PropertyAccessors
for Integration infrastructure
* Refactoring for `SpelFunctionRegistrar` and `IntegrationEvaluationContextFactoryBean`
to fix the issue when there is no `SpelFunctionRegistrar`(`SpelPropertyAccessorRegistrar`)
in the child AC, but there is one in the parent.
Previously the inheritance did't work for that reason.
* Now parent/child logic moved to `IntegrationEvaluationContextFactoryBean`
* Add documentation

JIRA: https://jira.springsource.org/browse/INT-3133

INT-3133: Rebasing, polishing and documentation

INT-3133: PropertyAccessors override support

* `@Ignore` `SOLingerTests#finReceivedNioLinger()` test

INT-3133: Change JavaDoc link to 3.0.0.RC1

Polishing

- Remove duplicate check - last bean def wins
- Doc Polishing"
4d7b94e0eee24813af6c81fb17aadcc7cecd9b27,2013-09-25 17:48:59-04:00,"Merge pull request #897 from mbazos/INT-2768

* INT-2768:
  INT-2768 Polishing - Docs, White Space
  INT-2768: Add BeanClassLoaderAware
  INT-2768 Add XSLT Transformer Factory Class Name"
6a9cb75668aec1d5ab913e90a8245cb5b5beae81,2013-10-01 18:00:28-04:00,"INT-2312 Add HTTP RequestMapping support

The general idea is to use Spring-MVC as much as possible.

* Introduce `RequestMapping`, `IntegrationRequestMappingHandlerMapping`
* Introduce XSD nested element `<request-mapping>` for HTTP Inbound Endpoints
* Introduce `inboundCommonAttributes` XSD attributeGroup for HTTP Inbound Endpoints
* Introduce `IntegrationNamespaceUtils#createExpressionDefIfAttributeDefined` & `IntegrationNamespaceUtils#createDirectChannel`
* Remove deprecated `name` attribute
* Remove `UriPathHandlerMapping` as superseded by `IntegrationRequestMappingHandlerMapping`
* Add documentation for `<request-mapping>`
  - Add description to Reference Manual about `<request-mapping>`
* Add documentation to section 'What's new'
* Add additional test for `<request-mapping>`

JIRA: https://jira.springsource.org/browse/INT-2312, https://jira.springsource.org/browse/INT-2619

Additional changes:

* INT-2528 Remove deprecations in HTTP module
  - JIRA: https://jira.springsource.org/browse/INT-2528
* Add Jackson 2 support for HTTP-inbound
* Using Jackson 2 HttpMessageConverter if Jackson 2 is available in classpath
* Make `RequestMapping` public
* Introduce `HttpContextUtils` and move `HANDLER_MAPPING_BEAN_NAME` to it
* Revert and deprecate public API
* Improve JavaDocs
* Improve Reference Manual

Thanks also to Biju Kunjummen for his incorporated commit."
36795e5ee85ec5d9ae95d3dbd58a8b125492a0c4,2013-10-23 19:35:09+03:00,"INT-3069 Add Global Gateway Method Metadata

https://jira.springsource.org/browse/INT-3069

Provide a mechanism to specify headers and payload-expression that can
be applied to all methods in the gateway.

- Headers defined as 'default' are globally applied to all gateway methods.
- Also supports 'default-payload-expression'.
- Headers defined on a specific method override the global settings.
- An `@Header` in the interface is overridden by a specific <header/> for that method (current behavior)
- An `@Header` in the interface is NOT overridden by a  <default-header/>
- Add 3 new SpEL variables:
-- #methodName (synonym for #method - deprecated)
-- #methodString (a string representation of the method showing return type and arg types)
-- #methodObject (the Method object)

	<int:gateway id=""sampleGateway""
			service-interface=""org.springframework.integration.gateway.GatewayInterfaceTests.Bar""
			default-request-channel=""requestChannelBaz"">
		<int:default-header name=""name"" expression=""#methodName""/>
		<int:default-header name=""string"" expression=""#methodString""/>
		<int:default-header name=""object"" expression=""#methodObject""/>
		<int:method name=""baz"">
			<int:header name=""name"" value=""overrideGlobal""/>
		</int:method>
	</int:gateway>

INT-3069 Polishing - PR Comments

- Remove extra 'method' variables, just provide `gatewayMethod`.
- Parser improvements
- Schema now enforces default-header elements to precede method elements
- Doc polishing"
e57103466e24ca97886e8c061b28e31070e24ff8,2013-10-28 15:39:22+02:00,"Polishing according latest SPR-4.0.0 fixes

* Remove `@Ignore` from `MongoDbMessageStoreTests#testInt3153SequenceDetails()`
* Revert generic for `SessionFactory` field in `SftpServerOutboundTests`"
a5d4e3ab48e5bb1918cfa2cec28cc1962e6c17de,2013-10-30 09:23:16-04:00,"INT-3181: Improve JdbcChannelMS usingIdCache doc

JIRA: https://jira.springsource.org/browse/INT-3181

INT-3181: Fix JdbcChannelMS#pollMessageFromGroup

* Add `doRemoveMessageFromGroup` and check its result.
If it is `false` then just return `null`, not polled `Message`
* Add `AbstractTxTimeoutMessageStoreTests#testInt3181ConcurrentPolling` test
and implement it for some DBs
* Make a note regarding MVCC as important in the Doc

Minor Polishing"
848f3a51032c350b76f701273a61dbef6995bbfd,2013-10-30 18:58:34+02:00,"INT-3185 Fix Direct Handlers When Exposed as MBean

When determining candidates for direct invocation, we need
to use the target of any existing proxy (such as JMX Metrics).

Copy ServiceActivatorDefaultFrameworkMethodTests to the JMX project
and adjust to work with JMX Proxies.

INT-3185: fix for AbstractSMHFBean#checkReuse

JIRA: https://jira.springsource.org/browse/INT-3185"
4dd95c41ea08141cb441a7e22e9db3c24783d943,2013-11-01 16:22:03-04:00,"INT-2809: Add/Extract JSON JavaType Headers

* Add `AmqpHeaders` headers
* Add `JavaType` headers mapping to `DefaultAmqpHeaderMapper`
* Add ability to Json Transformers to add/extract `JavaType` headers
* Make `JsonToObjectTransformer#targetClass` as non-required and do fallback
to extract type from `JavaType` headers
* Add `JavaType` extraction in the `JsonObjectMapper` implementors

JIRA: https://jira.springsource.org/browse/INT-2809

INT-2809: Polishing and refactoring

* Introduce `JsonHeaders`, `AbstractJacksonJsonObjectMapper`
* Move `TestPerson` and `TestAddress` to package level
* Now `JsonToObjectTransformer` supports not only `String` payload
* Remove json headers after transformation in the `JsonToObjectTransformer`

INT-2809 Minor Polishing

INT-2809 Docs and What's New"
5be8ef3fd8f258584220b5feb12f73e64f3b0244,2013-11-04 12:44:12-05:00,"INT-3147: (3167,3173,1941) Improve MetadataStore

Previously, `MetadataStore` couldn't be configured for Twitter Adapters
- only a global one could be used.
The `metadataKey` was generated automatically with a 'difficult' value.

* Register all `MessageSource` for `SourcePollingChannelAdapter`
as beans with id based on adapter id and prefix '.source' (INT-3147)
* Polishing parser to get rid of explicit `MessageSource` beans. (INT-3147)
* Make Feed and Twitter adapters `id` attribute as required -
now it presents a `metadataKey` for `MetadataStore` (INT-3147)
* Add to Twitter adapters a reference attribute for `MetadataStore` (INT-3173)
* Add Twitter adapters `poll-skip-period` attribute (INT-3167)
* Add and implement `MetadataStore#remove` (INT-1941)
* Make `MetadataStore` as `@ManagedResource` (INT-1941)
* Polishing tests

JIRAs:
https://jira.springsource.org/browse/INT-3147
https://jira.springsource.org/browse/INT-3167
https://jira.springsource.org/browse/INT-3173
https://jira.springsource.org/browse/INT-1941

INT-3147: Polishing and fixes

* add domain suffix to `metadataKey`
* change contract of `MetadataStore.remove`
* remove timeout window from `AbstractTwitterMessageSource`
* polishing and fix `SearchReceivingMessageSourceWithRedisTests`

INT-3147: Rebasing and polishing

INT-3147: fix 'metadata' package tangle

INT-3147 Doc Polishing"
3470e3306977539baecbf0b5a1c8fc6abea6ec17,2013-11-05 12:40:19-05:00,"INT-3177: Generic RedisTemplate for PublishingMH

JIRA: https://jira.springsource.org/browse/INT-3177

* Change `RedisPublishingMessageHandler.StringRedisTemplate` to `RedisTemplate<?, ?>`
* Don't provide `serializer` to the `template`
* Use `serializer` directly for values which are not `byte[]`
* Add `RedisAvailableTests#awaitContainerSubscribed` for tests to avoid race conditions
* Refactor some tests
* Add test for `byte[]` payload

INT-3177: Generic RedisInboundChannelAdapter

Port from Spring XD: allow for `RedisInboundChannelAdapter`
to receive from Redis any object, not only String

* Make `serializer` property 'resettable' to `null`
* Change `RedisInboundChannelAdapterParser` to allow to apply
empty value from `serializer` attribute
* Add parser test and test for `byte[]` messages

INT-3177: Polishing and documentation

JIRA: https://jira.springsource.org/browse/INT-3033

* Add `topic-expression` to `<int-redis:outbound-channel-adapter>`
* Add tests and docs

INT-3177: Deprecate `RedisPublishMH.defaultTopic`

* Make `topic` and `topic-expression` attributes as mutually exclusive
* Polishing Redis Topic Parsers
* Polishing tests and docs
* Default `serializer` for Redis Topic Adapters is `StringRedisSerializer` for backward compatibility

Polishing according PR's discussion

INT-3177 Doc Polishing"
93bcfdbc55622f2d9606dc193b30fd5784409f73,2013-11-06 14:31:27-05:00,"INT-3198: Add 'recovery-interval' for redis-q-c-a

JIRA: https://jira.springsource.org/browse/INT-3198

* Expose `RedisQueueMessageDrivenEndpoint.recoveryInterval` to Namespace support
* Add parser's tests
* Rename parser test class
* Polishing for concurrency of`RedisQueueMessageDrivenEndpointTests#testInt3196Recovery` test
* Add documentation for 'recovery-interval' and Redis Events implementation

Doc Polishing

Add more delay because of unsolvable race condition in the Redis Subscription - see DATAREDIS-242"
88de8117aa23f204fb20ce6528a5166a47f035ed,2013-11-15 15:54:14-05:00,"INT-3140: Add `#xpath()` SpEL Function Support

JIRA: https://jira.springsource.org/browse/INT-3140

* Introduce `XPathUtils`
* Add `#xpath()` tests
* Add documentation

INT-3140: Polishing according PR comments

INT-3140 Polishing

- Doc and javadoc polishing
- Fix some compiler warnings (not all xpath)"
945cb14407525834065d692592541f2dda74fe51,2013-11-19 17:27:56-05:00,"INT-3199: Fix Inconsistency for Candidate Methods

JIRA: https://jira.springsource.org/browse/INT-3199

* Set `TypeDescriptor` to `Void.class` as default `targetParameterType` for falling-back
* Change `fall-thru` only to one method:
* Extract generic type from `Massage` parameter, so now
``` m1(Message<String> message);
    m2(String payload);
```
are equal by `payload type` and similar POJO causes ambiguity configuration exception

INT-3199: Polishing and further fixing

* Address PR's comments
* Provide more friendly exception message for `Void.class` method
* Remove the logic around `@ServiceActivator`:
 - one part was fixed within INT-3114
 - another for `RequestReplyExchanger#exchange` doesn't make sense as it is good candidate
* Add fallback to `Iterator.class` method for `Iterable` payloads
* Add tests

Polishing

INT-3199: Add `handlerMessageMethods`

* Introduce separate properties:
 - `handlerMessageMethods` for methods with `Message` parameter
 - `handlerMethod`, if there is only one candidate after configuration
* Polishing several tests according new state of `MessagingMethodInvokerHelper`'s properties

Polishing

Revert `RequestReplyExchanger` fallback

Add `fallbackMessageMethods` processing

INT-3199 Polishing

Only revert to RequestReplyExchanger if there are ambiguous
fallback methods - if the target object is an RRE, it will always
have a candidate fallback (exchange).

Add more RRE tests.

Make ParametersWrapper a public inner class - it's only used
within the context of a process() call. Making it public allows
SpEL to access its properties without reflection."
d0501cda4d045d4f4b657679940d59c823285e4f,2013-11-21 13:49:28+02:00,"INT-3215: Redis: Squash `ZSet` tests to one

JIRA: https://jira.springsource.org/browse/INT-3215

Added fix for `RedisChannelParserTests#testPubSubChannelUsage()`"
6a2583affdaed9263144556a0e35e595e6b98795,2013-11-21 19:55:49+02:00,"INT-2501: Set `CI#autoCreate` from INT properties

JIRA: https://jira.springsource.org/browse/INT-2501"
db32486d354cc9049f7b03cce32b14bbb40805b6,2013-11-26 11:35:16-05:00,"INT-3006: Resolve 'maxSubscribers' from INT Props

JIRA: https://jira.springsource.org/browse/INT-3006

* Add integration properties `channels.maxUnicastSubscribers` and `channels.maxBroadcastSubscribers`
with default value to `Integer.MAX_VALUE`
* Add SpEL value resolution for those default values from parsers
* Deprecate similar properties from `ChannelInitializer`

INT-3006 `maxSubscribers` from channels' onInit()

* Move default init for `maxSubscribers` to the channels' `onInit()`
from `integrationProperties`, not from parsers
* extract `default` `integrationProperties` from static block in the `IntegrationProperties`
and use them as `default` on `IntegrationContextUtils#getIntegrationProperties`
* Add bean definition expression building to get the default values for `integration properties`
on bean building phase.

INT-3006: Add `taskScheduler.poolSize` property

INT-3006: Polishing"
c2004f1ab31ed7eabcbf991b38165c89d703654b,2013-12-10 09:21:04-05:00,"INT-3228: Remove Previous versions' Deprecations

JIRA: https://jira.springsource.org/browse/INT-3228

Remove elements that were deprecated in earlier
versions; see the migration guide for more information

https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-2.2-to-3.0-Migration-Guide

INT-3228: Revert FileTransferMH#setTempDirectory"
19aa52e510f4d35463279735bf29d483a7b10a1a,2013-12-16 15:31:34-05:00,"INT-3160: IRMHM: Use Protected Method from Super

JIRA: https://jira.springsource.org/browse/INT-3160

Prior to SPR 4.0 `RequestMappingHandlerMapping#createRequestMappingInfo` was `private`.
So, there was reason to to use reflection in the `IntegrationRequestMappingHandlerMapping`"
73a104c95555ce5ef21e8e8ee38c218ab8df154d,2013-12-17 11:32:46-05:00,"INT-3184: Test HTTP Matrix Variables

JIRA: https://jira.springsource.org/browse/INT-3184

* Change `IntegrationRequestMappingHandlerMapping` to postpone
Handlers detection as late as possible using `ApplicationListener<ContextRefreshedEvent>`.
This is needed, because `RequestMappingInfoHandlerMapping#afterPropertiesSet()`
iterates over beans from `BeanFactory` to detect MVC Handlers. But at the same time
Integration Endpoints require `requestChannel` as dependency and those may be postponed
for `auto-creation` by `ChannelInitializer` - late-binding issue."
c45b708341457ef9ea5e61c38b2a897a119e8b2a,2014-01-15 19:16:37+02:00,"INT-3262 JDK8 Javadoc Commit

Increase receive timeout for `Jsr223TransformerTests#testInt3162ScriptExecutorThreadSafety`.

JIRA: https://jira.springsource.org/browse/INT-3262
JIRA: https://jira.springsource.org/browse/INT-3263"
4ae5152effa50192e68bad22837957891a3a4975,2014-02-04 16:30:03-05:00,"INT-3250: Add @EnableIntegration Infrastructure

JIRA: https://jira.springsource.org/browse/INT-3250

* The main purpose of this change to move all infrastructure bean definitions
from `AbstractIntegrationNamespaceHandler` to a new `IntegrationRegistrar`.
* `IntegrationRegistrar` is invoked by the standard `@Configuration` process and also directly from `AbstractIntegrationNamespaceHandler`.
* Provide some refactoring for consistency.
* Add AnnotationContext tests

INT-3250: Polishing

* Remove `@EnableIntegration#defaultPublisherChannel`
* Revert `#jsonPath` & `#xpath` registration logic
* Fix for DEBUG message on each parse

JIRA: https://jira.springsource.org/browse/INT-3258

INT-3250 Fix JavaDocs & IDEA+Gradle srcDirs issue

INT-3250: Revert `build.gradle` changes

INT-3250 Polishing

* Remove commented out code
* Add javadoc to IntegrationRegistrar.registerBeanDefinitions()
* Fix javadoc links to other Spring projects (and JVM, JEE)
* Add reference documentation and what's new"
e3f8ef534bdc88daf8d536c63158caeb7d14dbdf,2014-03-27 14:06:35-04:00,"INT-3331: Add `ChannelSecurityInterceptorFB`

JIRA: https://jira.spring.io/browse/INT-3331

INT-3331: PR comments and others

* Register `ChannelSecurityInterceptorBeanPostProcessor` as a `BeanDefinition` (not `BPP`)
* Get `ChannelSecurityInterceptor`s from `ChannelSecurityInterceptorBeanPostProcessor#afterPropertiesSet()`
* Make `ChannelSecurityInterceptor` `final` to disallow to subclass it for unexpected issues
* Provide more convenience to the `ChannelSecurityInterceptorFactoryBean` - to allow to use it from xml configuration

Doc Polishing"
24f176c897cc7fc3f5311d6d5de9a3e98db53c3c,2014-04-24 21:56:58+03:00,"INT-3376 Support Meta-Annotation Att. Override

JIRA: https://jira.spring.io/browse/INT-3376

Allow user annotations with Messaging Meta-Annotations
override/supplement attributes set on the meta-Annotation.

PR Comments and More

- Do not create a bean definition for the annotation (interface)
when `MessagingGateway` is used as a meta-Annotation.
- For a `MessagingGateway` restore attributes overridden with empty values
- Other PR comments.

Fully support meta-Annotation hierarchy.

Polishing:

* Upgrade JRuby to 1.7.12
* Replace `AnnotationFinder` with moving its methods to `MessagingAnnotationUtils`
* Refactor aggregator classes to use `MessagingAnnotationUtils` to determine the method for annotation
* Fix `IntegrationComponentScanRegistrar` to skip annotation classes
* Fix `MessagingGatewayRegistrar#replaceEmptyOverrides`
* Improve `MessagingAnnotationPostProcessor` to use `ReflectionUtils.USER_DECLARED_METHODS` `MethodFilter`
* Change the `MethodAnnotationPostProcessor` hierarchy to use just list of annotations to process attributes"
34cc492942f41c1998be6db32a5f752bf57246e8,2014-04-29 09:16:11-04:00,"INT-3381: Messaging Annotations on `@Bean` Method

JIRA: https://jira.spring.io/browse/INT-3381

* Add support to mark `@Bean` methods with `Messaging Annotations`
* Addition attributes for `Messaging Annotations`
* Some refactoring and fixing
* Fix `AbstractMappingMessageRouter#onInit()` propagation
* Fix `GemfireGroupStoreTests` (https://build.spring.io/browse/INT-MASTERSPRING40-JOB1-246/test/case/135235772)

There is still some side effect: we need define `MessageChannel` beans explicitly. Since methods are processed within `BPP`,
not all beans with `Messaging Annotations` might be processed.

INT-3381: PR comments and other fixes

INT-3381 Polishing

INT-3381: Revert `RouterFB` & `SplitterFB`"
cedbf6edc2118bc5bd8e298f46b29516592fd2d6,2014-05-30 21:14:21+03:00,"INT-3418: Prepare 4.1 VERSION

JIRA: https://jira.spring.io/browse/INT-3418

* Create 4.1 XSD
* Clean up Docs for 4.1
* Prepare WebSocket module
* Add Reactor dependency
* Remove Eclipse and SNV artifacts

Phase #1: prepare

Conflicts:
	gradle.properties"
4b1eed27e35664aecb39a01325afbae5f0428c31,2014-06-20 19:05:16-04:00,"INT-3442 `RedisQMDE` Delay `stop` Until Last Read

JIRA: https://jira.spring.io/browse/INT-3442

Previously `RedisQueueMessageDrivenEndpoint.stop()` returned immediately.
It caused an issue when one more `message` might be read and processed to stopped app.

* Introduce `AbstractEndpoint#lifecycleCondition` and wait on it from `RedisQueueMessageDrivenEndpoint.doStop()`
and `signal()` it from `ListenerTask`.
* Since everything is done around `lifecycleLock` the `RedisQueueMessageDrivenEndpoint.stop()` waits for the proper
'last' message process.
* Add tiny `Thread.sleep(1)` to the `popMessageAndSend` cycle to free `lifecycleLock` for other Threads, e.g. `stop()`

INT-3442: Get rid of `lock` from listener cycle

* Introduce `stopTimeout` to minimize the `stop` thread blocking
* If the message is returned after that timeout it moved back to Redis List using `RPUSH`

INT-3442: Addressing PR comments"
3c063a265bddc15eb4a4b714d9896dbd22b8dc99,2014-06-23 09:46:41+03:00,"INT-3433 Delay Failed IOs

JIRA: https://jira.spring.io/browse/INT-3433`

If a read fails due to insufficient threads, delay the read
for (default 100ms) - do not re-enable OP_READ until that
time has elapsed. Avoids spinning the CPU.

INT-3433 More Polishing

If the assembler couldn't execute a new assembler after assembling
the current message (when it detected there is more data), in the
finally block it would ""continue"" only if the socket was still
open.

The test case closes the socket after sending 4 messages so when
this condition occurred, the assembler failed to continue and
data was left in the buffer.

Remove the `isOpen()` check in the finally block and always continue
if there's not another assembler running and there's data available.

INT-3433 More Polishing

We can still get starvation if the selector is in a long
wait (in select()) when a read is delayed.

Whenever a read is delayed, wake the selector so its next
select will use the readDelay timeout.

INT-3433 Reference Docs

Also remove Thread.yield().

Revert redundant boolean return from `TcpNioConnection#checkForAssembler()`"
8754fa9ea946f92b43e0a828d59759abf22d777e,2014-06-25 16:36:16+03:00,"Merge pull request #1182 from JohnA2/INT-3453

Fixed infinite loop described in INT-3453."
5aee3c85ba6f380e9949f37aa5105935ddd92a4a,2014-06-27 18:23:04+03:00,"INT-3453 NIO Always Release Assembler Thread

Fixed hung assembler described in INT-3453.

Used CountDownLatch instead of sleep()

INT-3453 Add Test Case

Currently failing for me - assembler thread stuck on CDL.

Remove redundant `if (TcpNioConnection.this.writingLatch != null)` from `ChannelInputStream#write`"
3890e892d831c4b0b581fd283132bf5a2437e1c1,2014-07-17 14:32:50-04:00,"INT-3470: SF 4.1 Compatibility #2

JIRA: https://jira.spring.io/browse/INT-3470

* Apply the last `ChannelInterceptor` changes - just `extends ChannelInterceptorAdapter`
* Change some tests to check content according to the new changes to the `GenericMessage#toString()`

**Cherry-pick to 4.0.x**"
a64b53a1b5265588583c2930f82e92853c8f7e6b,2014-07-17 15:37:05-04:00,"INT-3473: Set Inactive `TcpNioFactory` Before Stop

JIRA: https://jira.spring.io/browse/INT-3473

A simple fix to prevent `Selector closed` error loging message on `TcpNioServerConnectionFactory#stop()`

Polishing"
81cacf340c87587450c98e4a6149a48b4c604aa6,2014-07-18 13:21:33-04:00,"INT-651: Add `Iterator` Support for `Splitter`

JIRA: https://jira.spring.io/browse/INT-651

INT-651: Polishing according PR comments

INT-651: Polishing #2

Doc Polishing"
d69c8cb718765b0691b68ff27aa846da82451fa5,2014-08-15 11:28:23-04:00,"INT-3495 Add `FileTailInChAFBean#setErrorChannel`

JIRA: https://jira.spring.io/browse/INT-3495

**Cherry-pick to 4.0.x & 3.0.x**

INT-3495 Add `error-channel` to `<tail-i-c-a>`

JIRA: https://jira.spring.io/browse/INT-3495

* Fix `AbstractEndpoint` JavaDoc"
0674abcacb63e71ed2f72426cc7622be6182e496,2014-08-15 17:01:08-04:00,"MQTT: BackToBackAdapterTests: use TemporaryFolder

https://build.spring.io/browse/INT-MJATS41-38

Use `TemporaryFolder` for `BackToBackAdapterTests#testAsyncPersisted()`
to avoid concurrent builds cross-talk.

There is no need to do anything around the Paho `FileLock`, because the code looks like in the `MqttAsyncClient`:
```
this.persistence.open(clientId, serverURI);
this.comms = new ClientComms(this, this.persistence);
this.persistence.close();
```
So, the lock is released before the real connect to the Broker."
81f993f0d8f4e714055964f9feab2998c9a25ff0,2014-08-18 10:01:49-04:00,"INT-3486 SimplePool suppress InterruptedException

JIRA: https://jira.spring.io/browse/INT-3486

Previously the undesired StackTrace has been logged in case of Thread interruption, e.g. component `stop()`

Suppress `InterruptedException` in the `SimplePool#getItem()`.
Since we do the `Thread.currentThread().interrupt();` on the `catch (InterruptedException e) {` it does not make sense
to rethrow it as a `MessagingException`, because the thread is interrupted anyway."
d43b89dedcd3247b211bc78e84b56bd2167f0b80,2014-08-19 15:43:17-04:00,"INT-2791 temp-channel-transacted for AMQP Channel

JIRA: https://jira.spring.io/browse/INT-2791

* Add `template-channel-transacted` attribute for the `<amqp:channel>`s to separate configuration for
container and RabbitTemplate
* Make container's `channelTransacted` as `false` by default
* Upgrade to `S-AMQP-1.4.0`
* Add `AmqpHeaders.PUBLISH_CONFIRM_NACK_CAUSE` according to the new `RabbitTemplate.ConfirmCallback#confirm` signature

Conflicts:
	src/reference/docbook/whats-new.xml

Conflicts:
	src/reference/docbook/whats-new.xml

INT-2791: Polishing

Upgrade to S-AMQP-2.0

Fix for mock publisher confirm/return tests, since `channel` is now physically closed, if the `ConnectionFactory` isn't `CachingConnectionFactory`"
f84e7982728597d2e9f3b1c452dc39c1fcb1f514,2014-08-20 14:00:03-04:00,"INT-3370: Add `BoonJsonObjectMapper`

JIRA: https://jira.spring.io/browse/INT-3370

* Add `BoonJsonObjectMapper`
* Provide some tests
* Remove deprecations
* Polishing test according removed deprecations
* Change `JsonObjectMapper#populateJavaTypes` to get deal with `payload`, not its `class`,
since we can't (and Jackson's `TypeFactory`, too) determine generic type from `Collection`.
Use `iterators` instead to retrieve the type from the first item.

Conflicts:
	build.gradle
	spring-integration-amqp/src/test/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapperTests.java

INT-3370: Polishing according PR comments

* Apply Gary's polishing to the Docs
* Fix `RecipientListRouter` JavaDoc warn
* Fix typo in test name for `UdpUnicastEndToEndTests`
* Fix `RedisQueueOutboundChannelAdapterTests` do not use Jackson 1.x

Final Polish"
1c051416ce75e69caa202d1c9153a7f77588a87b,2014-08-21 09:23:31-04:00,"INT-3489 Reschedule Aggregator's group-timeout

JIRA: https://jira.spring.io/browse/INT-3489

* Catch `MessageDeliveryException` and reschedule `group-time out task`: `AbstractCorrelatingMessageHandler#scheduleGroupToForceComplete`
* Apply `send-timeout` for the `discardChannel`
* Mark `groupRemove = false` in case of `MessageDeliveryException`
* Improve `send-timeout` docs

INT-3489: Recalculate `groupTimeout` on each rescheduling

Add Test for Zero Timeout"
7f74c571d47cfab8aac159fe81db5cc963a55d4c,2014-08-21 10:25:59-04:00,"INT-3402-3: Channels Late Resolution #3

JIRA: https://jira.spring.io/browse/INT-3402

* Add late resolution of channel names for the `MessagingGatewaySupport`
* Implement delegate logic for internal implementations like `ContentEnricher.Gateway`"
00c404f383c1d998c0293f5f37ff5a7cdb2223d0,2014-08-23 12:25:20-04:00,"INT-3492: Deprecate `@Payload` and `@Header(s)`

JIRA: https://jira.spring.io/browse/INT-3492

Since `@Paylod` and `@Header(s)` annotations are in the Spring Framework,
there is no more need to support them in Spring Integration.

Deprecate them and leave for backward compatibility.
Will be removed in future releases.

Remove deprecated Gatewa's `#method` expression evaluation context variable

Tested `gradlew clean testall` with and without changed to the tests.

INT-3492: Add `MessagingAnnotationUtils#findMassagePartAnnotation`

Move `MessagingAnnotationUtils` to the `org.springframework.integration.util` package"
054f473287d6338dc4a5a96598c5300e2f2e1e16,2014-09-03 14:38:36-04:00,"INT-3508: HTTP: Map `MessageHeaders.CONTENT_TYPE`

JIRA: https://jira.spring.io/browse/INT-3508

Before SI 4.0 and moving `MessageHeaders` to the Spring Messaging the `MessageHeaders.CONTENT_TYPE` had a value as `content-type`,
which was mapped to the HTTP Header `Content-Type` well.
Starting with SF 4.0 `MessageHeaders.CONTENT_TYPE` has a value `contentType`. It doesn't allow to map HTTP headers properly.

* Add `contentType` mapping logic to the `DefaultHttpHeaderMapper`, to map to the `Content-Type` HTTP header and vice versa.
* Fix bug in the `DefaultHttpHeaderMapper#toHeaders`: `ObjectUtils.containsElement` -> `containsElementIgnoreCase`.
Some HTTP servers can return `Content-Type` as `Content-type` or even `content-type`, although it is `Content-Type` anyway.
* Add test-case with `<int:object-to-json-transformer/>`, when the `application/json` value from `MessageHeaders.CONTENT_TYPE` is properly
mapped to the HTTP `Content-Type`. Prior to this fix we had to remap `MessageHeaders.CONTENT_TYPE` to the `Content-Type` manually using `<header-enricher>`

Reformat code

Use only `MessageHeaders.CONTENT_TYPE` for mapping to/from SI

Move `MessageHeaders.CONTENT_TYPE` logic to the `fromHeaders`

Performance Improvements

Remove toLowerCase() calls within loop of `shouldMapHeader()`.

Pre-build lower case versions of arrays."
fa03c6f2686e9aa799c00ccb851c74cf196b9a84,2014-10-22 15:31:39-04:00,"INT-267: Implement Routing Slip Pattern

JIRA: https://jira.spring.io/browse/INT-267

The implementation looks like:
* There is the `ROUTING_SLIP` header to keep the list of bean ids;
* The `ROUTING_SLIP_INDEX` header keeps track of current `index` in the `ROUTING_SLIP` header;
* `ROUTING_SLIP` List can contain channel names or bean references for the `RoutingSlip` strategy implementations.
They are differentiated with `@` prefix;
* The `<header-enricher>` adds `<routing-slip>` sub-element to specify the comma-delimited value for desired `ROUTING_SLIP` for the downstream flow;
* The `AbstractReplyProducingMessageHandler` adds the logic to get deal with `ROUTING_SLIP` List and the algorithm is:
    - If `ROUTING_SLIP` isn't `null` we build `AtomicInteger` for the current `routingSlipIndex`;
    - the recursive `getReplyChannelFromRoutingSlip` should return a channel name or `null`;
    - if current `ROUTING_SLIP_INDEX` if for the `RoutingSlip` strategy, we check its result for `null` and `incrementAndGet()` the current index or not;
    - for the simple channel name value from `ROUTING_SLIP` list we just `incrementAndGet()` the current index and return the value;
    - the new `ROUTING_SLIP_INDEX` is populated to the headers of new reply message.
* Polishing for `AbstractMessageSplitter`

**TODO**: Docs and applying `RoutingSlip` algorithm for the `AbstractCorrelatingMessageHandler`

INT-267: Move `replyProducing` logic `ARPMH` -> `AMPH`

* Rework `AbstractCorrelatingMessageHandler` to use methods from super class
* Rework `MessageHandlerChain.ReplyForwardingMessageChannel` to use `produceReply`
* Rename `RoutingSlip` -> `RoutingSlipRouteStrategy`
* Add `ExpressionEvaluationRoutingSlipRouteStrategy`

Now `routingSlip` header can be configured like:

```
<routing-slip value=""channel1; #{@routingSlipRoutingPojo.get(request, reply)}; @routingSlipRoutingStrategy; #{request.headers[myRoutingSlipChannel]}; channel6""/>
```

Where `;` is used as delimiter, because of `,` in the method invocation from SpEL.
The simple literal (`channel1`) is just a `MessageChannel` `id`.
`@` is used for `RoutingSlipRouteStrategy` bean reference.
`#{...}` used for SpEL.
The `HeaderEnricherParserSupport` parses this `value` to the `List<String>` - a set of bean names, where any SpEL is wrapped
to the `ExpressionEvaluationRoutingSlipRouteStrategy` bean definition

INT-267: Introduce `RoutingSlip` Domain class

Rename `AbstractMessageProducingHandler` methods: `*reply` -> `*output`

Conflicts:
	src/reference/docbook/whats-new.xml

INT-267: Rework `RoutingSlip` -> `Map<List<String>, Integer>`

Since `RoutingSlip` POJO isn't scalable in the distributed multi-language environment,
it would be better to use some Java generic type for this `ROUTING_SLIP` header.

The `Collections.singletonMap(Collections.unmodifiableList(routingSlipPath), 0)` is the best candidate to be convertible to other systems
and allow to have thread-safety.

The `ROUTING_SLIP` header is recalculated now on each `nextPath`

INT-267: Introduce `RoutingSlipHeaderValueMessageProcessor`

* Rework `HeaderEnricherParserSupport` logic to get rid of SpEL parsing
and change `routingSlipPath` to the `ManagedList<String>` to get gain of `property-placehoder`
* Add `<context:property-placeholder>` stuff to the `RoutingSlipTests`

INT-267: Move inline expressions to the implicit `EERSRS` from the `RoutingSlipHeaderValueMessageProcessor`

INT-267: Fix up JavaDocs and add JDBC test-case

INT-267: Address PR comments

INT-267: Polishing according PR comments

Polishing"
ff2b15ea9e92487c558d7b66b778524b0c10daa6,2014-10-24 15:53:05-04:00,"INT-2426: Add `Idempotent Receiver` EIP

JIRA: https://jira.spring.io/browse/INT-2426

INT-2426: pushed `final` modifier fix for Java 6 compatibility

INT-2426: Rework logic to the `MetadataStore`

INT-2426: `IdempotentReceiver` -> `IdempotentReceiverInterceptor`

* Move `Idempotent Filtering` logic to the `IdempotentReceiverInterceptor`, which should be applied as a regular
AOP `Advice` to the `MessageHandler#handleMessage`
* Provide an xml component `<idempotent-receiver>`
* Introduce `IdempotentReceiverAutoProxyCreator` to get deal with `IdempotentReceiverInterceptor` and `MessageHandler`s.
The `Proxying` logic is based on the mapping between interceptor and `consumer endpoint` `ids`
* Introduce `MetadataStoreSelector` along side with `MetadataKeyStrategy` and `ExpressionMetadataKeyStrategy` implementation

INT-2426: Introduce `IdempotentReceiver` annotation

Add `IdempotentReceiverIntegrationTests` in the JMX module to be sure that all proxying works well.

INT-2426: Polishing according PR comments

* Rename `IdempotentReceiverAutoProxyCreatorInitializer`
* Add support for several `IRI` for the one `MH`
* Polishing JavaDocs

INT-2426: Add `What's New` note

Doc Polishing.

More Doc Polishing

Use Timestamp (hex) instead of Id for Value

Facilitate cleanup."
af19bbfa704d534319a1dffce3e1b539e0cf144e,2014-11-05 09:02:09-05:00,"INT-3538: Docs for Scatter-Gather

JIRA: https://jira.spring.io/browse/INT-3538

Phase #1: `Scatter-Gather`

S-G Doc Polishing

INT-3538 Add `requires-reply` to `scatter-gather`

Final S-G Doc Polish"
9f77fcd763703aac24e7662d88c0c42e2958c618,2014-11-07 16:20:22-05:00,"INT-3550: RoutingSlip Improvements

JIRA: https://jira.spring.io/browse/INT-3550

* Make `RoutingSlipRouteStrategy#getNextPath` as `Object` return type. to allow to produce `MessageChannel` result, not only `beanName`
* Make `RoutingSlipHeaderValueMessageProcessor` ctor to accept `Object... routingSlipPath` instead of just String.
It is useful from JavaConfig, when we can use `RoutingSlipRouteStrategy` `@Bean` reference.
* Add JavaConfig test case to demonstrate how `RoutingSlipRouteStrategy` can get deal with inline `FixedSubscriberChannel`
and Lambdas together with Reactor Streams.

INT-3550: Polishing according PR comments

* Fix `AbstractMessageProducingHandler` to check if `nextPath` isn't empty String
* Add `RoutingSlipHeaderValueMessageProcessor` ctor check for the `routingSlipPath` entries types
* Add `RoutingSlipRouteStrategy` JavaDocs regarding the loop of strategy invocation
* Add `Process Manager` doc

Doc Polishing."
1ac1c734b3e68bcdb0eb4463a9c1f5fb5d00d37b,2015-01-09 17:17:33+02:00,"Add Test for an Annotation Based Control Bus

http://stackoverflow.com/questions/27849211/spring-integration-control-bus-configuration-via-annotations/27850695#27850695

Remove `ThreadLocal`"
2581388cc2e1004f43fbc91be2c9f59a305f7d52,2015-01-13 15:35:58+02:00,"INT-3606: Implement Closeable/Flushable

JIRA: https://jira.spring.io/browse/INT-3606

Close the store when an (S)FTP synchronizing MessageSource is stopped.

Will need another commit on 4.2.WIP to change to `Lifecycle`.

Add dirty Flag to Properties MetadataStore

Avoid unnecessary persists.

Remove unnecessary implementation of `AbstractInboundFileSynchronizingMessageSource#getComponentType()`"
763b751f200ccb28426c7c8dd4b4482116edfc0c,2015-01-14 10:37:19-05:00,"Add JMS OG Stop/Start Tests

http://stackoverflow.com/questions/27935021/spring-batch-partitioning-with-permanent-queue-as-reply-channel/27944832#27944832"
046875de7ffc049f987040a73205f7beb120491f,2015-02-08 11:34:03-05:00,"INT-3580: fix race condition for `StompIntTests`

JIRA: https://jira.spring.io/browse/INT-3580

The test `StompIntegrationTests#handleExceptionAndSendToUser` sends `SUBSCRIBE` and `MESSAGE` messages at once.
Since Spring Websocket support relies on the `ExecutorSubscribableChannel` for `clientInboundChannel`, there is no guaranty that messages are processed
with the same order as they have been sent.
From other side `UserDestinationMessageHandler` shifts messages to the `brokerChannel`, which is an another `ExecutorSubscribableChannel` with its own `Executor`.

Hence there is some race condition when the second message can be handled before the first one.

Add `check subscription` cycle to wait until the `SUBSCRIBE` message registers its subscription to the Broker.
And only after that send the `MESSAGE` message."
e974f55eae5eb87c671435e9a6397d3ce05c0be5,2015-02-12 11:56:23-05:00,"Remove IgnoredTestSuite in JMX

https://build.spring.io/browse/INT-B41-204/test/#ignored-tests

Inflates the 'ignored tests' count in Bamboo."
b56a56e8e630295dc05a388defd775559836236e,2015-02-19 13:17:28+02:00,"INT-3650: Fix TCP Caching Factory Configuration

JIRA: https://jira.spring.io/browse/INT-3650

Don't propagate `setSingleUse` to the target factory.

* Polishing for code style
* Fix `CachingClientConnectionFactory#equals`"
45eaadd6ac587ef9adba8fcd15aa21474889213f,2015-02-20 17:59:21-05:00,"INT-3601: Use `ChannelResolver` instead of BF

JIRA: https://jira.spring.io/browse/INT-3601

* Move `setChannelResolver(DestinationResolver<MessageChannel> channelResolver)` to the `IntegrationObjectSupport`
* Introduce `IntegrationObjectSupport#getChannelResolver()`
* Change all `IntegrationObjectSupport` inheritors to use `getChannelResolver()` instead of direct `beanFactory` usage
* Fix `ServiceActivatorEndpointTests` do not fall

INT-3601: Addressing PR (JIRA) comments

Fixes failing tests

INT-3601: Address PR comments"
61e959377dad4217e9c9069f7e0a2b81601e37b4,2015-02-21 12:25:41-05:00,"INT-2230: Fix for Double Global Wire-Taps

JIRA: https://jira.spring.io/browse/INT-2230

Previously two global `<wire-tap>`s with the same `id` registered
two `GlobalChannelInterceptorWrapper` wrappers with generated names
for the same (last) `WireTap`. Hence the same `Message` has been sent to the the `wire-tap channel` twice (or more).

Fix the issue with overriding `GlobalChannelInterceptorParser#resolveId` with the `.globalChannelInterceptor` suffix.
Therefore the last `GlobalChannelInterceptorWrapper` wins overriding all others, if all our `<wire-tap>`s has the same `id`.

INT-2230: Add `id` to the global `channel-interceptor`

Polishing"
29e65e68afe0e4a90a9a5219084afee07a2e46ce,2015-02-28 14:45:06+02:00,"INT-3657: Default MaxMessPerPoll=1 for @InboundCA

JIRA: https://jira.spring.io/browse/INT-3657

With XML/DSL, the MMPP defaults to 1 (via the SPCAFB) but
@InboundChannelAdapter defaulted to -1 (infinity).

Change the annotation to be consistent with the XML/DSL.

Add missing schema docs for the `basePollerType`.

* Fix `AbstractMethodAnnotationPostProcessor` for `maxMessagesPerPollValue` override
* Change `EnableIntegrationTests#foo()` `@InboundChannelAdapter` to use `maxMessagesPerPoll = ""2""`
and modify appropriate test-case to be sure that `maxMessagesPerPoll` isn't overriden as it has been done in the original commit."
b7ba2388609bc14828a9a43ec5ca1de92ac34599,2015-03-05 12:12:49-05:00,"INT-3656: Restore PreSend Log; Avoid Access Method

JIRA: https://jira.spring.io/browse/INT-3656

The optimization (when no interceptors) inadvertently removed
the `preSend` DEBUG log.

Reinstate the DEBUG log.

Also change `ChannelInterceptorList` to a `static` class.

This avoids the access method invocation each time the channel's
`logger` is used. The only `AMC` field used was the `logger`; pass
it into the `CIL` via a constructor.

Old bytecode:

       104: aload_0
       105: getfield      #14                 // Field this$0:Lorg/springframework/integration/channel/AbstractMessageChannel;
       108: invokestatic  #60                 // Method org/springframework/integration/channel/AbstractMessageChannel.access$1:(Lorg/springframework/integration/channel/AbstractMessageChannel;)Lorg/apache/commons/logging/Log;
       111: invokeinterface #66,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
       116: ifeq          157

New bytecode:

        98: aload_0
        99: getfield      #22                 // Field logger:Lorg/apache/commons/logging/Log;
       102: invokeinterface #60,  1           // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z"
a60a8733ccce00257e39d0a59ec8156bf80a774b,2015-03-31 11:14:28+01:00,"INT-3689: Upgrade to Spring Data Fowler

JIRA: https://jira.spring.io/browse/INT-3689

Remove usage of deprecated `mongoTemplate.executeInSession`.
Since MongoDB doesn't provide the `member pinning` guarantee with `requestStart/requestDone`,
this feature has been removed in MongoDB 3.0: https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst#what-happened-to-pinning"
178c86faa4e5e43d963c45ab5ab754195da6826c,2015-07-24 16:10:05-04:00,"INT-3683: Fix typo in `schema.sql.vpp`

JIRA: https://jira.spring.io/browse/INT-3683

* In addition fix `inputs` for the Gradle `generateSql` task and regenerate all SQLs
to apply the typo fix.
The previous way to generate sql scripts doesn't work properly. It is always as `UP-TO-DATE`.
Adding `inputs` to the `generateSql` show the correct behaviour.
From other side that makes `cleanSql` task as redundant.
* Applying the Travis config fix to this commit as well.

Fix HTTP test timeout

https://build.spring.io/browse/INT-B41-346

Fix `ProducerAndConsumerAutoStartupTests`

https://build.spring.io/browse/INT-B41-346

Fix `DelayerUsageTests` `time` bean scope bug

https://build.spring.io/browse/INT-B41-347

Fix `HttpInboundGatewayParserTests.java` generics Java < 8 compiler warnings

Increase Tomcat response timeout for WebSocket tests

https://build.spring.io/browse/INT-B41-349

Increase timeout in the `AsyncMessagingTemplateTests#executionException()`

Fix `ClassCastException` for the `StandardWebSocketClient#userProperties`

Increase Delay to 2 Seconds in DelayHandlerTests"
09fb4f78c9ffce753abd035f7754764d0a61ffa4,2015-08-03 09:33:23-04:00,"INT-2166: Add SecurityContext Propagation

JIRA: https://jira.spring.io/browse/INT-2166

* Introduce `ThreadStatePropagationChannelInterceptor` based on the `ExecutorChannelInterceptor`
* Add `SecurityContextPropagationChannelInterceptor`,`SecurityContextCleanupChannelInterceptor`
* Introduce `AbstractExecutorChannel` to utilize `ExecutorChannelInterceptor` logic
* Introduce `MessageHandlingTaskDecorator` to avoid package tangle from `dispatcher` and `channel`
* Introduce `SecurityContextCleanupAdvice` for those cases when we don't get deal with `MessageChannel`s already, but want to have proper way to cleanup `SecurityContext`
* Make `GlobalChannelInterceptorProcessor` as `SmartInitializingSingleton` to avoid `phase` conflicts.
* Fix `MessagingAnnotationPostProcessor` to use `beanFactory.initializeBean(endpoint, endpointBeanName);` instead of manual `start()` invocation bypassing the `phase` logic, hence having a bug, when endpoints have been started very early
* Optimise `AbstractPollableChannel` to use `size` field from `ChannelInterceptorList` instead of `size()` from `Collection<?>`
* Fix `AnnotatedEndpointActivationTests` extracting separate component for annotation configuration instead of using test class directly. This caused very late Messaging Annotations process on that class
* Fix typo in the `spring-integration-jdbc-4.2.xsd`
* Remove some `SOUT`s throughout the project

TODO Docs

PR Comments:

* Remove redundant `AbstractExecutorChannel#executorInterceptors` and make logic based on the `super.interceptors`
 * Fix wrong imports order
 * JavaDocs for `ThreadStatePropagationChannelInterceptor`
 * Docs for `SecurityContext` propagation

INT-3593: Fix FTP PartialSuccess Tests

JIRA: https://jira.spring.io/browse/INT-3593

Sort the files for the MPUT tests.

INT-2166: Add SecurityContext Propagation

JIRA: https://jira.spring.io/browse/INT-2166

* Introduce `ThreadStatePropagationChannelInterceptor` based on the `ExecutorChannelInterceptor`
* Add `SecurityContextPropagationChannelInterceptor`,`SecurityContextCleanupChannelInterceptor`
* Introduce `AbstractExecutorChannel` to utilize `ExecutorChannelInterceptor` logic
* Introduce `MessageHandlingTaskDecorator` to avoid package tangle from `dispatcher` and `channel`
* Introduce `SecurityContextCleanupAdvice` for those cases when we don't get deal with `MessageChannel`s already, but want to have proper way to cleanup `SecurityContext`
* Make `GlobalChannelInterceptorProcessor` as `SmartInitializingSingleton` to avoid `phase` conflicts.
* Fix `MessagingAnnotationPostProcessor` to use `beanFactory.initializeBean(endpoint, endpointBeanName);` instead of manual `start()` invocation bypassing the `phase` logic, hence having a bug, when endpoints have been started very early
* Optimise `AbstractPollableChannel` to use `size` field from `ChannelInterceptorList` instead of `size()` from `Collection<?>`
* Fix `AnnotatedEndpointActivationTests` extracting separate component for annotation configuration instead of using test class directly. This caused very late Messaging Annotations process on that class
* Fix typo in the `spring-integration-jdbc-4.2.xsd`
* Remove some `SOUT`s throughout the project

TODO Docs

PR Comments:

* Remove redundant `AbstractExecutorChannel#executorInterceptors` and make logic based on the `super.interceptors`
 * Fix wrong imports order
 * JavaDocs for `ThreadStatePropagationChannelInterceptor`
 * Docs for `SecurityContext` propagation

Doc Polishing

Address PR comments

Address PR comments

* Extract `ExecutorChannelInterceptor` logic in the `PollingConsumer`
to have an ability to invoke `afterMessageHandled()` on the TaskScheduler's Thread
for example for the `SecurityContext` clean up
* Get rid of all that redundant ""clean up"" stuff
* Docs polishing

Fix `NPE` in the `PollingConsumer`

Introduce `ExecutorChannelInterceptorAware` to avoid iterators on each message

Polishing; Docs, Sonar"
f1bd6e3bac07e894a4d0910a58a79ddc5b3015d3,2015-11-13 10:56:11-05:00,"INT-3885: Fix JMS Outbound Gateway Concurrency

JIRA: https://jira.spring.io/browse/INT-3885

Possible dropped reply, causing timeout.

WARN org.springframework.integration.jms.JmsOutboundGateway#1.replyListener-1 jms.JmsOutboundGateway:1202
    - Failed to consume reply with correlationId 164a49bf-c41d-4c0b-b012-55deecf001d1_2
      java.lang.RuntimeException: No sender waiting for reply

- Reproduced by running the test in a loop
- Cleaned up test to aid debugging - capture a unique message at each stage
- Added additional debug logging to th gateway

Polishing"
b9730cd183416b0bf4eaf2a9ac9c59229abb4d90,2015-11-13 14:19:18-05:00,"INT-3882: StompSession Reconnection Logic

JIRA: https://jira.spring.io/browse/INT-3882

Add reconnect support for the StompSession:
* Introduce `recoveryInterval` for the `AbstractStompSessionManager`
* Add reconnect scheduled task
* Add handling of the `ConnectionLostException` into the `AbstractStompSessionManager`,
as well as for the `StompInboundChannelAdapter` and `StompMessageHandler`
* Cover adapters reconnection feature with tests
* Documentation polishing

Rework logic according PR comments

* Make `StompMessageHandler` as a ""lazy-load"" for the connection
* Add ""direct"" connect interaction for the `AbstractStompSessionManager`
* Polishing tests

Polishing

Fix `StompAdaptersParserTests#testStompSessionManagerReconnect()` to use ""fake"" server port

Address PR comments

The further polishing

Some further polishing

* `AbstractStompSessionManager`: `reconnectFuture.cancel(true)` on each `scheduleReconnect()` to avoid something like ""DDoS attack""
* Add reconnect feature test for the `StompInboundChannelAdapterWebSocketIntegrationTests`, closing and then refreshing again the `serverContext`"
ce594d437e9cc534c125fd9b446d4b95fb53fbbc,2016-01-12 16:42:15-05:00,"INT-3920: Handler Factory Bean Subclassing

JIRA: https://jira.spring.io/browse/INT-3920

Remove package and private protection from the message handler `FactoryBean` hierarchy.

Ease the creation of subclasses, for example, it was impossible to subclass
the `SplitterFactoryBean` to support default, expression, or file splitter here:

https://github.com/garyrussell/spring-cloud-stream-modules/commit/43c8c041d72883ae34e4a137b5effdd07c598748#diff-bb5468e093538789dcde1b222fe90693R62

* Fix JavaDocs for published methods."
884aebcb0759187cf7e2c6fa841f2cb4cafe6771,2016-01-12 18:01:08-05:00,"JIRA: INT-3856 HeaderFilter pattern-match

JIRA: https://jira.spring.io/browse/INT-3856

Allow a property placeholder in the header filter `pattern-match` attribute.

See https://github.com/spring-projects/spring-xd/issues/1804#issuecomment-148845883

Remove versions from spring XSD references"
f7c59b3b18ccad008ead795c7efa32e5f70afc2f,2016-03-22 14:08:26-04:00,"INT-3963: Add XMPP Extensions Support

JIRA: https://jira.spring.io/browse/INT-3963

* Update to Smack-4.1.6
* Introduce `stanza-filter` option for the `<int-xmpp:inbound-channel-adapter>`
* Introduce `payloadExpression` for the complex and specific `stanza` parsing, e.g. GCM packets
* Deprecate `extract-payload` in favor of `payload-expression`
* Add `ChatMessageListeningEndpointTests` test for GCM protocol
* Add `ChatMessageInboundChannelAdapterParser` test for new attributes
* Document changes

Polishing according PR comments

Extract `#extension` SpEL variable

Document the `#extension` SpEL variable"
43af472c3a9b57594dae3fb06d4173708de9be94,2016-04-01 16:18:28-04:00,"checkstyle HideUtilityClassConstructor

https://sonar.spring.io/issues/search#componentRoots=org.springframework.integration%3Aspring-integration|createdAt=2016-04-01T10%3A00%3A36%2B0000|sort=UPDATE_DATE|asc=false"
020aa019a1fe5bbdf280a440082c775f304514a9,2016-04-07 09:01:17-04:00,"Sonar Fixes after Checkstyle Updates

https://sonar.spring.io/issues/search#componentRoots=org.springframework.integration%3Aspring-integration|createdAt=2016-04-07T03%3A04%3A31%2B0000|sort=UPDATE_DATE|asc=false"
e5bf0187eb5fbc713307ba375e25526a861258d1,2016-04-12 14:35:03-04:00,"INT-3980: Don't Require @Component for Messaging

JIRA: https://jira.spring.io/browse/INT-3980

When we declare our components via `@Bean` (or `<bean>`) the requirements for
the `@Component` (`@MessageEndpoint`) looks redundant and sometimes even dangerous,
when we use `@ComponentScan`, too.

* Remove the `@Component` restriction logic from the `MessagingAnnotationPostProcessor`
* Ensure that tests pass

(We may consider to backport afterwards)

Add `requireComponentAnnotation` logic

* Introduce `spring.integration.messagingAnnotations.require.componentAnnotation` property for `spring.integration.properties` as `false` by default
* Add `MessagingAnnotationPostProcessor#setRequireComponentAnnotation()` to accept the value from the `spring.integration.messagingAnnotations.require.componentAnnotation`
 * Fix `integraton` typo everywhere
 * Document the change in the `What's New` and in the `configuration.adoc`
 * Ensure that logic works properly (no messaging endpoints populated) with the `spring.integration.messagingAnnotations.require.componentAnnotation = true` and ""unannotated"" `AnnotatedEndpoint2` in the `AnnotatedEndpointActivationTests`

This PR also fixes: https://jira.spring.io/browse/INT-3962

Fix issues according Travis report

Doc Polishing"
ae9cfc3ea5b52377901c4f71078e8218bfda2193,2016-04-16 10:03:33-04:00,"INT-3967: Sonar Issues

https://sonar.spring.io/issues/search#componentRoots=org.springframework.integration%3Aspring-integration|createdAt=2016-04-16T02%3A56%3A21%2B0000|sort=UPDATE_DATE|asc=false"
286c421c1a57dbda9cbf92f003e20bf4e0fec715,2016-04-21 17:47:20-04:00,"INT-3387: MessageGroupStore Improvements

JIRA: https://jira.spring.io/browse/INT-3387,
https://jira.spring.io/browse/INT-3806

* Introduce
```
MessageGroupStore

void addMessagesToGroup(Object groupId, Message<?>... messages);
```
And implement it in all stores.

* Use new `addMessagesToGroup` where it is reasonable, e.g. `DelayHandler`
* Optimize test-case to use a new store method (where it is possible)
* Fix timing delays in the `JdbcMessageStoreTests`
* Introduce `PersistentMessageGroup`
* Add `AbstractMessageGroupStore#proxyMessageGroupForLazyLoad` to wrap the raw `MessageGroup` to the `PersistentMessageGroup` for lazy-load
* Rework `MessageGroupMetadata` do not be `immutable` and allow to store/restore in the `AbstractKeyValueMessageStore` only the `MessageGroupMetadata`
* Refactor `ResequencingMessageHandler` and `SequenceSizeReleaseStrategy` a bit for better performance when interact with the `MessageGroup`
* Add `AbstractMessageGroupStore#setLazyLoadMessageGroups` to switch off the `lazy-load` behavior and restore the previous full `MessageGroup` logic
* Add `What's New` note and `message-store.adoc` paragraph for the lazy-load functionality

`GroupType.PERSISTENT` and not lazy by default

PR Comments

Fix `JdbcMessageStoreTests` timing issues

Address PR comments

* Add performance test to the `ConfigurableMongoDbMessageGroupStoreTests`
* Add JavaDocs for the `MessageGroupFactory` methods
* Add `log4j.properties` into the `test` MongoDB module for better traceability
* Fix `JdbcMessageStore#getOneMessageFromGroup()` over the `doPollForMessage()` delegation.
The `jdbcTemplate.queryForObject()` requires exactly one and only one raw in `resultSet`
* Add performance test results into the `message-store.adoc`"
6a9a42562cc9ba82ec6a6b5f6dc77a4e66476cd9,2016-04-26 12:31:39-04:00,"INT-4009: Support Composite Handler in Graph

JIRA: https://jira.spring.io/browse/INT-4009

Adds:

    ...
    ""handlers"" : [ {
      ""name"" : ""polledChain$child#0"",
      ""type"" : ""transformer""
    }, {
      ""name"" : ""polledChain$child#1"",
      ""type"" : ""service-activator""
    } ],
    ...

to a chain node.

INT-4010: Add Discard Flows to Object Model

JIRA: https://jira.spring.io/browse/INT-4010"
6b6a38f8cbcf26e4b6c451ce6bfed381256f6264,2016-04-28 20:00:06-04:00,"INT-4017: Fix `If-None-Match` HTTP header tests

JIRA: https://jira.spring.io/browse/INT-4017

According RFC 7232 (https://tools.ietf.org/html/rfc7232#section-2.3) the ETag headers must be in the pattern:
```
ETag       = entity-tag

     entity-tag = [ weak ] opaque-tag
     weak       = %x57.2F ; ""W/"", case-sensitive
     opaque-tag = DQUOTE *etagc DQUOTE
     etagc      = %x21 / %x23-7E / obs-text
                ; VCHAR except double quotes, plus obs-text
```
Therefore the regexp like `HttpHeaders.ETAG_HEADER_VALUE_PATTERN`"
29fc5e63806d133c4ba0812fda3fcd52ffa8d2c2,2016-05-03 09:10:13-04:00,"Fix Call Overridable Method From Ctor

https://sonar.spring.io/issues/search#componentRoots=org.springframework.integration%3Aspring-integration|createdAt=2016-05-03T02%3A58%3A49%2B0000|sort=UPDATE_DATE|asc=false"
43b83bec53dead7cc344dc99b63afff7f31eabe6,2016-05-26 11:16:28-04:00,"INT-4038: Add GPFB Gateways to Graph

JIRA: https://jira.spring.io/browse/INT-4038

General format for node name: bean.method#n

The #n is needed to disambiguate methods with the same name.

Polishing according PR comments

* Fix generic type for `Collections.unmodifiableMap` usage
* Change the gateway method logic in the `IntegrationGraphServer` to include the method signature in the node name to distinguish them as unique
* Move `MutableMessageBuilderFactoryTests` into the separate nested `mutable` package since `@IntegrationComponentScan` sees a new `@MessagingGateway` in the `IntegrationGraphServerTests`.
See https://jira.spring.io/browse/INT-4040
* Document the `@MessagingGateway` representation in the `graph.adoc`"
ae0939d55f1518b0d7f1cb207c0feb568c0d2d0d,2016-06-07 09:18:23-04:00,"GH-1824: Comment Out HeapDumper in s-i-test

Resolves #1824"
cfa00c5707b24cfbca4f8029e8087c8c068ada2f,2016-07-01 11:11:09-04:00,"INT-1463 Fix PriorityChannel#getRemainingCapacity

JIRA: https://jira.spring.io/browse/INT-1463

An existing `QueueChannel#getRemainingCapacity()` is based on the `BlockingQueue#getRemainingCapacity()` which is always `Integer.MAX_VALUE`
and doesn't reflect reality for provided `capacity`

* Fix `PriorityChannel` to return `upperBound.availablePermits()` for `getRemainingCapacity()`
* Add test for `PriorityChannel` on the matter
* Also increase `reply-timeout` for `<int-redis:queue-outbound-gateway>` in `RedisQueueGatewayIntegrationTests-context.xml` from 1 sec to 10 secs"
999644a530ae8a2acd0be227c97fc9bd83cacfe9,2016-07-21 11:04:47-04:00,"INT-4072 Fix applySequence with State Propagation

JIRA: https://jira.spring.io/browse/INT-4072

When `publishSubscribeChannel` is with `applySequence = true`, a `messageToSend` is overridden with `sequenceDetails` using `MessageBuilder`, therefore a new fresh `Message`.
In case of state propagation, e.g. `SecurityContextPropagationChannelInterceptor`, we just lost the state from the `ThreadStatePropagationChannelInterceptor.MessageWithThreadState` because of new `Message<?>`

* Add into `BroadcastingDispatcher` the logic to delegate `pushSequenceDetails` into `MessageWithThreadState` directly do not lose the `state`
* Make `ThreadStatePropagationChannelInterceptor` as `MessageBuilderFactory`-aware and use it to rebuild an `original` `Message<?>` in the `MessageWithThreadState` to populate `SequenceDetails`

**Cherry-pick to 4.2.x**

Provide an explicit order for `publishSubscribeChannel` subscribers

Fixes GH-1847 (https://github.com/spring-projects/spring-integration/issues/1847)

Fix mutation in the `ThreadStatePropagationChannelInterceptor`

Since `BroadcastingDispatcher` invokes `pushSequenceDetails` for each subscribed handler,
make `MessageWithThreadState` as immutable and return a new instance via `cloneWithSequenceDetails()` method with particular `sequenceDetails`.
Previous mutable solution ended up with the issue of concurrent modification.

* Introduce `CloneableMessage` abstraction to let any custom `Message` to return `MessageBuilder` with desired context.
* Introduce `DelegatingMessageBuilder` as an extension of the `MessageBuilder` to let custom `CloneableMessage` to return desired customization.
* Add into `MessageBuilder#fromMessage()` `if` for the `CloneableMessage`
* Add into `MutableMessageBuilder` a `warn` about `CloneableMessage`
* Revert changes in the `BroadcastingDispatcher` in favor of `CloneableMessage` in the `MessageBuilder`
* Redo `ThreadStatePropagationChannelInterceptor#MessageWithThreadState` logic to be based on the `CloneableMessage` and `DelegatingMessageBuilder` extension.

Introduce `MessageDecorator` contract

Remove `CloneableMessage` aspect and everything around
`MessageWithThreadState` is now `MessageDecorator` and `BroadcastingDispatcher` check if incoming `message` is `MessageDecorator` and performs its `decorateMessage` after `builder`"
8aa9befef62c6d6582ef89bf1587965242a075ca,2016-09-27 21:47:38-04:00,"INT-4126: Fix Redis lock to use `SET NX EX`

JIRA: https://jira.spring.io/browse/INT-4126

Looks like `WATCH` doesn't provide good isolation when the call is performed concurrently at the same time from different Threads.

* Change locking algorithm as it is recommended by Redis `SET` command: http://redis.io/commands/set:
```
SET resource-name anystring NX EX max-lock-time
```

* Add `@Repeat(10)` to the `AggregatorWithRedisLocksTests#testDistributedAggregator()` since that helped to reproduce the issue

**Cherry-pick to 4.3.x & 4.2.x**"
56b9b2401ebfa2cc4ff8ccadad4f934050e762d7,2016-09-28 12:26:35-04:00,"HTTP Inbound Javadoc Improvements

http://stackoverflow.com/questions/39741251/spring-integration-immediate-response-to-be-sent-with-asynchronous-processing/39750349#39750349"
7c12288d2eabb05da94cb10cbbfca678d87b589c,2016-10-12 11:58:33-04:00,"GH-1928: Roles: Doc Polishing

Fixes #1928 https://github.com/spring-projects/spring-integration/issues/1928"
a1f554c04d956d029230c53ad0bf2e01c0354491,2016-10-13 13:19:37-04:00,"INT-2460: Remove Message Modification Logic in MS

JIRA: https://jira.spring.io/browse/INT-2460,
https://jira.spring.io/browse/INT-4122

Since the main purpose of the `MessageStore` to persist message for durability and only,
it doesn't make sense to modify `Message` for additional headers like `SAVED` and `CREATED_DATE`.
Such a logic should be a part of metadata stored together with the message.
And it is provided by the out-of-the-box `MessageStore` implementation.
In addition we free ourselves from the reflection operations to retain `ID` and `TIMESTAMP` headers when we add `SAVED` and `CREATED_DATE`

* Control ""already saved"" logic in the `JdbcMessageStore`s via `DuplicateKeyException` on the `INSERT`.
This is much effective then additional `SELECT` in case of `SAVED` before
* Control ""already saved"" logic in the  `AbstractConfigurableMongoDbMessageStore` via `DuplicateKeyException` on the `INSERT`.
Since `MongoDbMessageStore` doesn't provide extra `messageId` field, perform extra `SELECT` before store document.
Anyway the `MongoDbMessageStore` isn't recommended for use.
We may consider to deprecate it
* Control ""already saved"" logic  in the `AbstractKeyValueMessageStore` via `putIfAbsent` operation

With this fix we persist message in the store as is without any modifications when we perform standard serialization procedure.
Any custom serializers should consider to use `MutableMessageBuilder` if there is a requirement to retain `ID` and `TIMESTAMP`

Rework `MongoDbMetadataStore.putIfAbsent()` to normal `findAndModify()` with particular `$setOnInsert`.
Technically the MongoDB query looks like:
```
db.collection.findAndModify({
  query: { _id: $key },
  update: {
    $setOnInsert: { value: $value } // perform modification only on upsert
  },
  new: false,   // don't return new doc if one is upserted
  upsert: true // insert the document if it does not exist
})
```

Move single import to the appropriate JavaDoc

Polishing after rebase
DEBUG messages in `doStoreIfAbsent()` implementations

* To keep track of the extra message information in the `MessageStore`, without `Message` modification, introduce `MessageMetadata` and `MessageHolder`
* Add `MessageStore#getMessageMetadata()`
* Modify MongoDb `MessageStore` to add extra `timestamp` for individual message
* Fix `ConcurrentAggregatorTests` race condition.
Since currently the default release strategy is `SimpleSequenceSizeReleaseStrategy` which is just based on the `MessageGroup` size, there is no guaranty which messages will complete the group in concurrent environment.
The test is really based on the `SequenceAwareMessageGroup` logic to discard the message with the same `correlationId`

Fix `@Copyright` format

Move cast to `MessageHolder` after `Assert.isInstanceOf(MessageHolder.class, messageHolder)`

Retain backward compatibility in the `AbstractKeyValueMessageStore`

Polishing"
e6c70b5cc6ab54a4b405e8f898592dda122016c5,2016-10-23 10:16:40-04:00,"File Streaming Doc Polishing

http://stackoverflow.com/questions/40135591/get-string-from-spring-ftp-streaming-inbound-channel-adapter/40136021#40136021

Show an example for removing the remote file after processing."
f070de0b7ef3df2d7e0e666c20ea661401d2b213,2016-11-18 14:08:35-05:00,"Sonar Fixes

https://sonar.spring.io/component_issues?id=org.springframework.integration%3Aspring-integration%3Amaster#resolved=false|types=BUG

In `IntegrationFlowRegistration` double check locking is ok for `inputChannel`
because we're assigning an existing object, but `MessagingTemplate` constructs
a new object for which double check locking doesn't work.

In any case, for both these items, the chance of concurrent access is extremely low
and is idempotent anyway, so remove double check locking.

Several inner classes can be static.

Other minor fixes."
c8c8160e2da9c16d3a5a0d38467e55d179b472ce,2017-01-11 10:35:56-05:00,"Sonar Fixes

https://sonar.spring.io/component_issues/index?id=org.springframework.integration%3Aspring-integration%3Amaster#resolved=false|severities=CRITICAL

Fix the only 2 code smells that Sonar deems ""critical""."
eaaa21ef5d769452587d739d99c81d8a9f8103fd,2017-01-24 19:01:32-05:00,"Fix Compiled SpEL Test

Several problems:

- Setting the system property is not enough since the `static` parser already has its configuration
- Changing the ParametersWrapper to `private` makes property accessing not compilable (the method and class must be public).
- The expression...

    #target.messageAndHeader(message, headers['number'] != null ? headers['number'] : T(org.springframework.util.Assert).isTrue(false, 'required header not available: number'))

...is not compilable anyway because the right arguent to the `!=` is not compilable because the `TypeReference.exitTypeDescriptor` is `null`.

This commit addresses the first two.

Polishing

Use a compilable method.

* Simple polishing"
c5c874f5635cb68383e3b84fac97e8f2a69e1423,2017-01-27 14:40:04-05:00,"INT-4217: SpEL Compilable for Required Header Args

JIRA: https://jira.spring.io/browse/INT-4217

Previously, SpEL method calls with required header parameters had the following form:

    #target.messageAndHeader(message, headers['number'] != null ? headers['number'] : T(org.springframework.util.Assert).isTrue(false, 'required header not available: number'))

The SpEL compiler cannot compile this because the else clause of the ternary has no `exitDescriptor` to indicate the type.

Change the expression to use a function for required headers.
Also use an Elvis operator when possible.

Some examples of new expressions:

    #target.optionalAndRequiredHeader(headers['prop'] ?: null, #requiredHeader(headers, 'num'))

    #target.optionalAndRequiredDottedHeader(headers['dot1'] != null ? headers['dot1'].foo : null,
         #requiredHeader(headers, 'dot2').baz

In the second case, we can't use an Elvis because we're accessing a `foo` property of the header.

__cherry-pick to 4.3.x__

- make `ParametersWrapper` `static`
- minor conflicts in imports
- remove the perf test

* Polishing: remove redundant annotation args for their default values usage"
63e715a685ac8f53d80629a6728b168b1faab7c0,2017-01-30 14:00:15-05:00,"DSL-140: Improve Logic for outputChannel in DSL

Fixes spring-projects/spring-integration-java-dsl#140

Allow to provide any custom `MessageProducer` impl for the `.handle()`, not only `AbstractReplyProducingMessageHandler` extension

Polishing"
9616cc72a1fe4aee7df6ebbc11e1d88e7b091cf0,2017-01-31 14:37:45-05:00,"INT-4220: Leaders: warn event publishing errors

JIRA: https://jira.spring.io/browse/INT-4220

Currently when an error is thrown from the event publishing the role granting is broken and we just go to the role revoking.

* Since it's just an event publishing it shouldn't effect the original leader election.
* `try...catch` event publishing in the `LeaderInitiator` and `logger.warn` an `Exception`
* Make `leader/Context` as `@FunctionalInterface` for simple Lambda use-case like `NULL_CONTEXT` - `() -> false`
* Remove all the internal `NullContext` implementations in favor of above mention Lambda
* In the `LockRegistryLeaderInitiator` use `CustomizableThreadFactory` instead of custom `ThreadFactory` for prefixing
* Add `zookeeper/leader/LeaderInitiator#getContext()` for external usage and consistency with other similar components
* Fix `CuratorContext.toString()` typo"
d8cbcd1310c8face04e1d6040d1ea03c92f7208c,2017-02-02 13:45:44-05:00,"INT-3923: Fix MQTT Reconnect Logic

JIRA: https://jira.spring.io/browse/INT-3923

Fixes: #2046

Previously, when connection is lost, the inbound adapter attempted to reconnect on
a schedule with a fixed delay.

If a connection was again lost, while the schedule is still running, we can end up
with another scheduled task running.

This is benign aside from the DEBUG log noise because the scheduled task tests the
connection before reconnecting.

However, if the `recoveryInterval` is short, it could consume CPU.

Change the reconnect to be a one-time scheduled task and reschedule if it fails to
reconnect.

Synchronize all access to the `connected` field.

Add a test case with a short recovery interval, before this fix, we see many logs
`Attempting reconnect`."
88238665c2f08dad63e41b27316f57cd8725ce1f,2017-02-26 13:49:15-05:00,"Add IMAP Idle Reconnect Test

http://stackoverflow.com/questions/42464630/not-able-to-reconnect-to-outlook-mailbox-using-spring-integration-and-imap-idle/42470295#42470295

Also change other tests in that class to use `BDDMockito`."
9208fa52d624ac34840b108a451f0fafc2d634aa,2017-03-08 16:27:17-05:00,"INT-4242: Don't send body for HEAD and TRACE, too

JIRA: https://jira.spring.io/browse/INT-4242
Fixes spring-projects/spring-integration#2085

According to the RFC7231 (https://tools.ietf.org/html/rfc7231), the `HEAD` is fully similar to `GET` and its body does not have sense.
The `TRACE` method can't have body at all.
The `OPTIONS` may have body, but that is already custom target server logic to parse it properly

* Modify `AbstractHttpRequestExecutingMessageHandler` do not include `payload` as a request body for `GET`, `HEAD` and `TRACE`

Also see https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-4.3-to-5.0-Migration-Guide"
515042fa0393f174783982aa8693dde9870af576,2017-03-23 13:06:12-04:00,"Gateway Error Channel Doc Polishing

http://stackoverflow.com/questions/42980410/global-error-channel-not-working/42980900#comment73054207_42980900

Clarify that you need to configure an error channel on the gateway if you don't want
exceptions propagated."
78bab07874b5fc2ac7a4d39f913aa19360c58f01,2017-03-23 13:32:41-04:00,"Java DSL polishing around `HeaderEnricherSpec`

* Make `HeaderEnricherSpec extends ConsumerEndpointSpec` to avoid extra
EIP-method with two `Consumer`s, when only one for
the `HeaderEnricherSpec` can address all the options - header enricher,
as well as target endpoint
* Move `this.endpointFactoryBean.setHandler(this.handler)` into
the `ConsumerEndpointSpec#doGet()` instead of ctor to avoid
duplicate code from the target implementations (e.g. `BarrierSpec`)"
970854fd6fb87e01bc310a2c4ee83d8bdce53467,2017-03-25 17:48:45-04:00,"GH-2100: logging-adapter.adoc: Remove channel

Fixes spring-projects/spring-integration#2100

Also add a sample how to configure logging channel adapter from Java DSL"
b06db726527fbb878ee093ded01d86ddc12c32ad,2017-03-29 09:47:45-04:00,"Http Java/DSL Configuration Docs

http://stackoverflow.com/questions/33295750/spring-integration-http-outbound-gateway-header-mapper/33305880#comment73265510_33305880"
610ad7e0e16262dc1bdc4c781f5fb6043eba67d1,2017-03-30 15:18:22-04:00,"JavaConfig/DSL Docs for Routers (Part 2) (#2104)

* JavaConfig/DSL Docs for Routers (Part 2)

Add String Expression ctor to `ExpressionEvaluatingRouter`.

* Polishing - PR Comments"
2862c449c512665326d5821fb8f0b779cf57b723,2017-03-31 14:39:08-04:00,"INT-4251: Add Initial Testing Framwork and Docs

JIRA: https://jira.spring.io/browse/INT-4251

MockIntegration PoC

Demonstrate how `MockIntegration.mockMessageSource()` can be used.
Even from the XML Config!
The same semantics can be applied for any other our mocking features we will add to the `MockIntegration`

Add `testMockMessageSourceDynamicFlow()`

Improve `MockIntegration.Context.instead()` for target bean type assertion

Some refactoring, improvements and JavaDocs

* Move `MockIntegration.Context` to its own `MockIntegrationContext` class
* Rename `@MockIntegrationTest` to `@SpringIntegrationTest` since we talk there not only about mocks, but any other possible testing feature for integration
* Add `@SpringIntegrationTest#stopEndpoints()` attribute for endpoints bean names patterns
* Add `IntegrationEndpointsInitializer` to customize `AbstractEndpoint`s according options from the `@SpringIntegrationTest`
Right now it is only about making them `autoStartup = false`

* Rename `SI-test` to `SI-test-support`
* Rename `SI-mock` to `SI-test`
* Rename `@SpringIntegrationTest#stopEndpoints()` to `noAutoStartup()`
* Fix JavaDocs according PR comments
* Increase timeouts in some sporadically failed tests
* Draft for the `testing.adoc`

Fixes spring-projects/spring-integration-java-dsl#23

Fix `testing.adoc` a bit

* Document Testing Support
* Fix a couple typos in the `xml.adoc`
* Add `package-info.java` files to `/test/` sub-packages

Improve docs according PR comments

Fix typos in `TestUtils` JavaDocs

Add `What's New` note about Java DSL and Testing support

Doc Polishing"
34db64c832762a734b08718a7d774215a50f440d,2017-04-18 15:22:40-04:00,"INT-4254: LockRegLInit: Fix unconditional unlock

JIRA: https://jira.spring.io/browse/INT-4254

The `LockRegistryLeaderInitiator#LeaderSelector` unconditional calls
`unlock()` in the `finally` block when the `Lock` might not be locked.

Another problem that `running = true` is set after submitting `LeaderSelector` task.
That might bring the problem that `LeaderSelector` won't be selected because of
`this.running` race condition

* Move `this.running = true` before submitting `LeaderSelector` task
* Move `unlock()` into the `if (this.locked)` condition

**Cherry-pick to 4.3.x**"
1dc3726e7de4c1b50ae454fe95c85e7df96d41bf,2017-04-21 20:00:34-04:00,"Make `LockRegistry#obtain` Java 8 based

This commit harmonizes `LockRegistry#obtain` logic in Zookeeper and JDBC
implementations with Redis implementation
by using Java 8 `ConcurrentMap#computeIfAbsent`

* Remove `synchronized (this.locks)` from the `expireUnusedOlderThan`
implementations because `iterator()` is thread-safe from `ConcurrentHashMap`
* Fix deprecation in the `IntegrationGraphControllerRegistrar`
* Revert Spring Security version to `4.2.2`, since `5.0 B-S` is broken"
f03356ccbcdf4394e7ab3daeeb3a7362a856e5f8,2017-05-02 14:26:04-04:00,"INT-4265: Add Java DSL .routeByError() EIP-Method

JIRA: https://jira.spring.io/browse/INT-4265

* Add `.routeByError()` EIP-method to the `IntegrationFlowDefinition`
based on the `ErrorMessageExceptionTypeRouter`
* Add missed `dynamicChannelLimit()` option to the `RouterSpec`
* Rework `RouterSpec#RouterMappingProvider` into the `ContextRefreshedEvent`
phase initialization to be sure that dependent `MappingMessageRouterManagement`
is fully initialized before applying mapping conversions

* Rename `routeByError()` to `routeByException()` to more reflect reality
of the `ErrorMessageExceptionTypeRouter` and don't mislead about
Java's `Error`
* Polish `ErrorMessageExceptionTypeRouter` JavaDocs a bit and some Java 8
code style
* Add `ApplicationContext` assertion into the
`RouterMappingProvider.onApplicationEvent()` do not trigger delegate
initialization if `ContextRefreshedEvent` is from the different app context"
7e919a4017c2760fa53c742ad91e529ee8c8e219,2017-05-10 10:31:46-04:00,"INT-4267: Add JSON (De)Serializers for Messaging

JIRA: https://jira.spring.io/browse/INT-4267
Fixes: spring-projects/spring-integration#2110

The documentation clearly point that we can simply use JSON (de)serialization
with the `RedisMessageStore`, but actually it isn't so easy

* Fix `MessageGroupMetadata`, `MessageHolder`, `MessageMetadata` for Jackson
deserialization compatibility
* Add `MessageHeaders`-based ctor to the `AdviceMessage`
* Add `MessageHeadersJacksonSerializer` to serialize `MessageHeaders`
to the `HashMap` for easier deserialization afterwards
* Add deserializer implementations for all `Message` types
* Add convenient `JsonObjectMapperProvider#jacksonMessageAwareMapper()`
factory method to build `ObjectMapper` supplied with mentioned above
(de)serializers

**Cherry-pick to 4.3.10 without `MessageHolder` and `MessageMetadata`**

Address PR comments and document the feature

Doc Polishing"
9543877c0c06aff9f9d2f17e3b3ff17e96d928f9,2017-05-10 14:02:35-04:00,"Fix `FluxMessageChannel` for Multi Sources

* Rename `ReactiveConsumer` to `ReactiveStreamsConsumer`
* Rename `FluxSubscribableChannel` to `ReactiveStreamsSubscribableChannel`
* Remove the `processor` functionality from the `FluxMessageChannel`
in favor of internal `FluxSink` as it is recommended by the Project Reactor:
> Most of the time, you should try to avoid using a Processor.
They are harder to use correctly and prone to some corner cases.

* Make connectable, upstream publishers for the `FluxMessageChannel` as
bridges to the internal `sink` via `this::send`.
This way we are able to receive data from multi sources.
When the source is completed (e.g. `Mono` in case of WebFlux response),
the downstream flow isn't completed.
* Rework `MessageChannelReactiveUtils#PollableChannelPublisherAdapter`
to be based on the `Flux.create()` and `onRequest()` to poll channel for messages
* Add one more request to the `ReactiveHttpRequestExecutingMessageHandler`
to be sure that we consume different `Mono`s by the `FluxSubscribableChannel`
properly without completion
* Upgrade to the `spring-io-plugin:0.0.7.RELEASE`

Add `IntegrationConsumer` implementation to the `ReactiveStreamsConsumer`"
079ccb84e21deabeb3867e97ed062ea243123458,2017-05-18 11:25:43-04:00,"Add `MockMessageHandler` to the Testing Framework

Fix PayloadMatcherTests for generics

Address PR comments and other improvements

* Revert `rawtypes` mode for the `PayloadMatcher`
* Make `HeaderMatcher` as `rawtypes` as well
* Make `MockMessageHandler` expect `rawtypes` for `Matcher`s.
This way we can just support `Matcher`s like `notNullValue(Message.class)`
* Rename `expect()` to `assertNext()`
* Rename `andReply()` to `thenReply()`
* Track replies are supplied in the `MockMessageHandler`
* Distinguish simple `MH` from the `MP` types in the
`MockIntegrationContext#instead()` do not let to replace simple `MH`
with fully configured `MockMessageHandler` or any other `MP` implementation.
Fail replace if types mismatch; wrap `MockMessageHandler` to simple `MH`
if it doesn't have replies when we are going to replace simple `MH`
* Wrap `MockMessageHandler` to the `Mockito.spy()` in the
`MockIntegration#mockMessageHandler()` to allow to `verify()` interaction
in the test-case

Remove wrapping `MockMH` to raw `MH` when no reply supported.
If `MockMH` isn't supplied with replies ti's safe to use it as is - no harm to target endpoint
which supposed to be last one in the flow

Some polishing and JavaDocs

More JavaDocs

Add docs for the `MockMessageHandler` and fix some JavaDocs

Make the `MockMessageHandler` with an API like:
```
MockIntegration.mockMessageHandler()
             .handleNext(Consumer<Message<?>>)
             .handleNext(Consumer<Message<?>>)
             .handleNextAndReply(Function<Message<?>, Object>)
             .handleNext(Consumer<Message<?>>)
             .handleNextAndReply(Function<Message<?>, Object>)
             .handleNextAndReply(Function<Message<?>, Object>);
```

Doc Polishing"
3daeaab1b4b20d868a8b07d6b0813023a492e56c,2017-05-25 11:23:30-04:00,"INT-4060: FTP Gateway: Add `NLST` and `workDir`

JIRA: https://jira.spring.io/browse/INT-4060

* Add `NLST` command to the `AbstractRemoteFileOutboundGateway` to perform
`listNames` on the target session.
Useful in case of server doesn't allow to perform `LS` or the names set is
sufficient for application requirements
* Add `workingDirExpression` to the `FtpOutboundGateway` to allow to perform
`FtpClient.changeWorkingDirectory()` based on the current request message
* Change `slf4j-log4j12` to the `testCompile` -
the FTP tests fail in the IDE with `ClassNotFoundException`

Address PR comments

* Add `nlst` to XSD config
* Reinstate `ls -1` test-case for the `FtpServerOutboundTests`
* wrap more commands to the `doInWorkingDirectory()`

Fix `MV` command in the `AbstractRemoteFileOutboundGateway`

* Implement `RemoteFileOperations#invoke(OperationsCallback<F, T>)`
for thread-bound `session`s
* Use a new `invoke()` for `put()` and `mPut()` commands in the `AbstractRemoteFileOutboundGateway`
* Add delegation for the `put()` and `mPut()` commands in the `FtpOutboundGateway`
* Add DSL support for the `workingDirExpression` and add `whats-new.adoc` note

Document changes

Address some PR comments:

* Add `invokeScope` variable to `execute` to track `ThreadLocal` session or not
* Check for `null` in the `getSession()` and fallback to regular
`sessionFactory.getSession()`.
Most likely the `invoke()` is called from other thread

Doc Polishing"
f112ecbb7e2233b37b3136a2054bf3a496087eb1,2017-05-31 14:28:28-04:00,"INT-4269: Add Stream & Flux Support for Splitter

JIRA: https://jira.spring.io/browse/INT-4269

* Check if `outputChannel` is `ReactiveStreamsSubscribableChannel`
to let back-pressure splitting
* Build `Flux` or `Iterator` depending in the `reactive` state
* Allow to get a size of the `iterator` if it is possible,
for example `XPathMessageSplitter`

Add tests

Fix raw type and unused import

* Add JavaDocs to the `AbstractMessageSplitter#obtainSizeIfPossible()`
* Add asserts for the `sequenceSize` populataiton in the `XPathMessageSplitter`
* Document `Stream` & `Flux` support in the splitter

Minor doc polishing"
33e9ce912fcdc4389e2f038e0b00facb053a3dde,2017-06-05 12:53:21-04:00,"INT-4284: INFO about overriding readOnly headers

JIRA: https://jira.spring.io/browse/INT-4284

Add `INFO` into the `MessageBuilder#copyHeadersIfAbsent()` when end-user
tries to populate headers which are `readOnly`

We can't throw exception on the matter since can modify `readOnlyHeaders`
and that would force end-user to add `header-filter` logic to the application.

* Document `readOnly` headers in the `message.adoc`

**Cherry-pick 4.3.x**"
bd53d8a1e0aec714436d16faba5edb7f1ef8ed43,2017-06-07 12:09:52-04:00,"SCSt-913: Fix AMQP Inbound Retry logic

Relates to spring-cloud/spring-cloud-stream#913
and https://github.com/spring-projects/spring-integration/commit/914094e51d1c70567b524bf415d26e4f736a5f0b

Also see https://github.com/spring-projects/spring-integration-kafka/pull/163

The `RetryTemplate` and `errorChannel` are mutually exclusive options:
```
Assert.state(getErrorChannel() == null, ""Cannot have an 'errorChannel' property when a 'RetryTemplate' is ""
	+ ""provided; use an 'ErrorMessageSendingRecoverer' in the 'recoveryCallback' property to ""
	+ ""send an error message when retries are exhausted"");
```
Therefore we don't have any error handling functionality if there is a retry but no `RecoveryCallback`.
So, don't add `RetryContext` to `ThreadLocal<AttributeAccessor>` if we don't have `RecoveryCallback` provided,
because that value is out of use then.

To make code more logical perform `attributesHolder.remove()` only for the non-retryable branch.
With that refactoring the missed `attributesHolder.remove()` has been observed in the `AmqpInboundGateway`
Add `attributesHolder.remove()` to the `RetryListener.close()` for retryable branch

**Cherry-pick to 4.3.x**"
99224f54c0676dadf8797e53f3c87d5d41662fcf,2017-06-14 12:35:32-04:00,"INT-4290: JacksonJsonUtils: Add Trusted Packages

JIRA: https://jira.spring.io/browse/INT-4290

See CVE-2017-4995

To disallow deserialization of unknown classes,
the `JacksonJsonUtils#messagingAwareMapper()` can now be supplied
with the `trustedPackages`.
The default list is:
```
java.util
java.lang
org.springframework.messaging.support
org.springframework.integration.support
org.springframework.integration.message
org.springframework.integration.store
```
Can be configured with `*` (asterisk) with meaning trust all

**Cherry-pick to 4.3.x**

Polishing according PR comments"
4679c9bdbed2f4e9a18ca02b7956aae9855f0592,2017-06-23 13:32:55-04:00,"INT-4302: Add `fileExistsMode()` to Java DSL

JIRA: https://jira.spring.io/browse/INT-4302

Add `RemoteFileOutboundGatewaySpec#fileExistsMode()`"
d4a99919ed78c011dc8d69bae745eedd425eb672,2017-07-20 12:19:17-04:00,"INT-4300: Add WebFlux Server Support

JIRA: https://jira.spring.io/browse/INT-4300

* Add `ReactiveHttpInboundEndpoint` based on the WebFlux foundation
* Extract `BaseHttpInboundEndpoint` for common
HTTP Inbound Channel Adapters options
* Make `spring-webmvc` and `spring-webflux` as `optional` dependencies
to let end-user to choose
* Refactor `HttpContextUtils` to include constants
for newly added WebFlux support
* Introduce `BaseHttpInboundEndpoint.setRequestPayloadTypeClass()`
for raw `Class<?>` and modify existing `setRequestPayloadType()`
for the `ResolvableType`
* Refactor existing MVC tests and XML components parsers to use
new `setRequestPayloadTypeClass()`
* Add `MessagingGatewaySupport.sendAndReceiveMessageReactive()` to get
a reply from downstream flow reactive back-pressure manner
* Add `IntegrationHandlerResultHandler` implementation to let WebFlux
infrastructure to handle the `Mono<Void>` from the `ReactiveHttpInboundEndpoint`
properly
* Fix `JdbcLockRegistryLeaderInitiatorTests` race condition to assert
the `initiator1` is elected eventually after yielding when the `initiator2`
is stopped

* Fix JavaDocs issue in the `HttpRequestHandlingMessagingGateway`
* Move all the ""hard"" logic in the `MessagingGatewaySupport#doSendAndReceiveMessageReactive`
to the `Mono` chain ensuring back-pressure when `sendAndReceiveMessageReactive()` is
called not from the Reactive Stream

Add test-case to demonstrate SSE

JIRA: https://jira.spring.io/browse/INT-3625

Some polishing and optimization for the
`MessagingGatewaySupport.doSendAndReceiveMessageReactive()`

More optimization for `MessagingGatewaySupport`

* Upgrade to Reactor 3.1 M3
* Document WebFlux-based components

Minor Doc Polishing"
f00eafb4f8ff1b59c6512503ed8fbbd2da07f05b,2017-07-31 10:52:29-04:00,"GH-152: Scanner & filters are mutually exclusive

Fix spring-projects/spring-integration-java-dsl#152

* Add Logic to the `FileInboundChannelAdapterSpec` do not populate
`FileListFilterFactoryBean` to the `FileReadingMessageSource`
when the `scanner` is provided.
Otherwise call the `FileReadingMessageSource` and rely on its logic to
refuse mutually exclusive `scanner` and `filter/locker` options"
5a259939a67da6538f5c07c89a9a003258ded777,2017-08-04 13:19:46-04:00,"Reset `AbstractMessageChannel.fullChannelName`

Fixes spring-cloud/spring-cloud-stream#983

When the `AbstractMessageChannel.getFullChannelName()` is called
before the full bean initialization, we don't have the proper name any
more lately - that is only `unknown.channel.name`

* Reset `fullChannelName` property to `null` in the end of `onInit()`,
so the next `getFullChannelName()` will build the proper component name

**Cherry-pick to 4.3.x**"
d41d70735722cc738f6683aebc66091f106015fc,2017-08-14 11:19:59-04:00,"Polishing ErrorMessageSendingRecoverer

- delegated creation of 'DefaultErrorMessageStrategy' to the
another constructor in cases where user provided null
- see https://github.com/spring-cloud/spring-cloud-stream/pull/1038#discussion_r132707905
for more details and justification

* Simple code style polishing

**Cherry-pick to 4.3.x**"
b9c8a8edf89fd127f98ef1538aa2ffa35c894fd6,2017-09-06 17:55:06-04:00,"INT-4341: RedisQueueIn: support receiveTimeout=0

JIRA: https://jira.spring.io/browse/INT-4341
Fixes spring-projects/spring-integration#2228

Add to the `RedisQueueInboundGateway` and `RedisQueueMessageDrivenEndpoint`support
for the `receiveTimeout` of 0 and block indefinitely

Added some simple tests to check if the receive timeout can be set to 0

**Cherry-pick to 4.3.x**"
5263ea6dfff72b0e2dfdd2c3387b005fc3430a7a,2017-09-11 14:24:33-04:00,"INT-4123: Add Prefix to the Key-Value MSs

Fixes spring-projects/spring-integration#2213
JIRA: https://jira.spring.io/browse/INT-4123

Fully different `MessageStore`s can be configured for the same shared
Key-Value data-base.
Since the retrieval logic is based on the keys, that may cause the
unexpected messages expiration via `MessageGroupStoreReaper`.

* To distinguish store instances on the shared store add `prefix`
option to the `AbstractKeyValueMessageStore`

* Deprecate the `GemfireMessageStore` `Cache`-based configuration - `setIgnoreJta()` and `afterPropertiesSet()`.
The `GemfireMessageStore` relies only on an externally configured `Region`.

**Cherry-pick to 4.3.x**

Doc Polishing"
f202b257752ce9687735eed5d053db9ff885ecb5,2017-10-12 11:40:55-04:00,"GH-2261: Fix ScatterGatherHandler.stop()

Fixes: spring-projects/spring-integration#2261

* Fix `ScatterGatherHandler.stop()` to call `GatherEndpoint.stop()` instead of `start()`

Adding unit test as per artembilan's suggestion

Replacing asterisk import with specific namespaces

Fixing formatting/codestyle errors shown by travis

Creating separate bean for new unit test

* Some simple polishing
* Merge the assertions for the fix into an existing test

**Cherry-pick to 4.3.x**"
bf63ef5491a3b72868fccd1354a5d470c6993e1b,2017-10-16 16:05:44-04:00,"GH-2253: Revert (S)FTP Source to DefaultDirScann

Fixes spring-projects/spring-integration#2253

For backward compatibility and use-cases when processed files are stored
in sub-directories in the `localDirectory` revert the
`AbstractInboundFileSynchronizingMessageSource` logic back to the
`DefaultDirectoryScanner`.
The `RecursiveDirectoryScanner` can be injected via `scanner` option"
bc4337ffa8adb479abfc5e671f83b972e5bcdbb9,2017-10-16 16:25:01-04:00,"GH-2071: Upgrade to S-WS-3.0 and Smack-4.2.1

Fixes: spring-projects/spring-integration#2071

* Clean up `build.gradle` for redundant excludes
* Add `javax.mail` dependency to WS module to avoid WARN about missed providers
* Refactoring for the XMPP module according changes in the latest Smack
* Polishing for the `BackToBackAdapterTests` to avoid extra wait for `null`
on the channel and some race conditions when client is closed during by the
`stop()` during publishing

Polishing `UriVariableTests` according the latest S-WS B-S

Revert excludes removal"
23137fd0cb8ad2c4f30a2186658f8aff2fc1f8cb,2017-11-10 10:50:50-05:00,"GH-2275: Fix MqttMDCA for callbacks after stop

Resolves: spring-projects/spring-integration#2275

* Remove the `MqttPahoMessageDrivenChannelAdapter` as a callback from
the `IMqttClient` during `stop()`
* Check the `isRunning()` from the `connectionLost` callback to avoid
unexpected `scheduleReconnect()` when we are not running

**Cherry-pick to 4.3.x**"
a61327766ee89250a39f6923e7687aa5766f342d,2017-11-10 11:37:47-05:00,"GH-2207: Clarify RedisMetadataStore in cluster

Resolves: spring-projects/spring-integration#2207

* Since the `WATCH` command isn't supported on clustered connections,
the `RedisMetadataStore.replace()` operation can't be used there.
Document this limitation"
7ca20e53f78688f46617775b0d45ba8266e817e1,2017-11-15 11:06:18-05:00,"GH-2268: Add RedisHeaders.MESSAGE_SOURCE header

Resolves: /spring-projects/spring-integration#2268

* To indicate the source the Redis message in the `RedisInboundChannelAdapter`
populate the `RedisHeaders.MESSAGE_SOURCE` header to the messages to produce
* Fix the `SimpleMessageConverter` to populate the provided `MessageHeaders`
to the message to produce

* Add `toMessage(T object, @Nullable Map<String, Object> headers)`
to the `InboundMessageMapper` to propagate additional header
to the message to create
* Rework all the out-of-the-box `InboundMessageMapper` implementations
to properly propagate additional headers via `toMessage()`
from the `SimpleMessageConverter`
* Provide optimizations in the `InboundMessageMapper` implementations
do not re-create messages
* Refactor `MutableMessage.toString()` to align with the `GenericMessage`

* Add more `@Nullable` to method arguments
* Increase latch wait timeout in the `EndpointParserTests`
* Address `redis.adoc` PR comment"
9414ceef869b2bcf8ba9aabdb1c0a0204e2c220f,2017-11-15 14:07:46-05:00,"Post merge polishing

JIRA: https://jira.spring.io/browse/INT-4363

* Register `HandlerMethodArgumentResolver`s in the
`IntegrationRegistrar` as `BeanDefinition`s to let them be configured by
the `BeanFactory` callback.
The direct instance doesn't call callbacks
* Use `JacksonPresent` in the `IntegrationRegistrar` instead of local
property
* Some code style polishing for the `IntegrationRegistrar`
* Add `JsonPathTests.testJsonPathOnPayloadAnnotation()` to ensure
that `PayloadExpressionArgumentResolver` is properly configured by the
`BeanFactory` and `#jsonPath()` SpEL-function is properly evaluated on
the `@Payload` for method `@ServiceActivator` method argument"
90c46f5a79894a130badad77d2ee7ede9b33f697,2017-11-27 16:56:41-05:00,"INT-4365: Improve notPropagatedHeaders function

JIRA: https://jira.spring.io/browse/INT-4365

It is much useful to configure the `notPropagatedHeaders` as a set of
patterns to match.
In this case we can filter a group of headers with the common prefix or
suffix

* Allow to configure `AbstractMessageProducingHandler.setNotPropagatedHeaders`
as simple patterns; the `*` means filter all - not copy request headers
at all - similar to `transformer` behavior
* Add `ConsumerEndpointSpec.notPropagatedHeaders()` for Java DSL
* Add `not-propagated-headers` to the `<service-activator>`

Address PR comments; some other improvements

* Fix `ConsumerEndpointSpec#notPropagatedHeaders()` log message
* Improve `AbstractMessageProducingHandler.notPropagatedHeaders() logic
so any `*` in the set of patterns eliminates all others since it has
a highest priority
* Expose `requires-reply` for the `<transformer>` as a `true` by default
* Refactor a bit `AbstractStandardMessageHandlerFactoryBean` hierarchy to
avoid duplicated code

* Fix `message.adoc`
* Add `noHeadersPropagation` flag to the `AbstractMessageProducingHandler`
* Rework logic in the `updateNotPropagatedHeaders()` to store the array
of patterns instead of `Set` to avoid extra operation on each message
* Combine `noHeadersPropagation` with the `shouldCopyRequestHeaders()`
in the `createOutputMessage()` for logic to determine if we should start
the copy-headers procedure at all

* Revert `AbstractMessageProducingHandler.selectiveHeaderPropagation`
* Optimize `AmqpOutboundGatewayParserTests` performance from 3 secs to 0.5

Fix more NPEs in the `AbstractMessageProducingHandler`"
8805dd6533a2b75037c89f4b6200a3fbb5e6e47d,2017-11-28 14:14:34-05:00,"GH-2243: Fix producer endpoint image

Fixes: spring-projects/spring-integration#2243

The Message is indeed a result of `MessageChannel` consumption, but
definitely not a part of interaction with the tarter system.
For example `FileWritingMessageHandler` obviously writes to file,
but don't produce any messages"
bd872846fb470ebc32d0d664dac82d1daa7599bf,2017-12-19 09:42:02-05:00,"GH-2300: Add Flux support in WebFluxRequestExecMH

Fixes: spring-projects/spring-integration#2300

To allow to consume a streaming HTTP response downstream expose
`replyToFlux` option on the `WebFluxRequestExecutingMessageHandler`.
This way the body of the HTTP response can be converted now to the
`Flux` for subsequent output message.
The option is `false` by default; can be changed to `true` in the `5.1`"
30450c48be3782ebff629337176bb7413bc97e2c,2018-01-11 10:59:55-05:00,"INT-4376: Upgage to Log4J 2 (#2321)

* INT-4376: Upgage to Log4J 2

JIRA: https://jira.spring.io/browse/INT-4376

* Deprecate Log4J 1.x components in favor of newly added
a `Log4j2LevelAdjuster` JUnit `@Rule`
* Update all the logging configuration to Log4J 2

* Polishing after testing"
c3b64dc1acc34db5ad6dc2026c2c6e758c742349,2018-01-19 12:34:57-05:00,"INT-4366: Fix MulticastSendingMessageHandler (#2329)

* INT-4366: Fix MulticastSendingMessageHandler

JIRA: https://jira.spring.io/browse/INT-4366

Fix race condition in the `MulticastSendingMessageHandler` around
`multicastSocket` and super `socket` properties.

* Synchronize around `this` and check for the `multicastSocket == null`.
This let the `MulticastSendingMessageHandler` to fully configure and
prepare the socket for use.
* Remove `socket.setInterface(whichNic)` since it is populated by the
`InetSocketAddress` ctor before

**Cherry-pick to 4.3.x**

* Fix thread leaks in TCP/IP tests"
a4eb4ec9b1d10e8c88b32a0aab8c8f707d2a4ad2,2018-03-13 12:25:06-04:00,"GH-2388: Fix `HeaderEnricherSpec` for adviceChain

Fixes spring-projects/spring-integration#2388

During `HeaderEnricherSpec` refactoring the `adviceChain` population
has been missed, alongside with many other `AbstractReplyProducingMessageHandler`
options from the `ConsumerEndpointSpec`

* Refactor `HeaderEnricherSpec` to build `HeaderEnricher` and an
appropriate `MessageTransformingHandler` from the ctor to be able
to pick up an `adviceChain` automatically in the `ConsumerEndpointSpec.get()`

**Cherry-pick to 5.0.x**"
b1a3ca764c73e5da4bf10eb4b6be1116375ac227,2018-03-21 16:35:01-04:00,"INT-4433: Optimize @Publisher metadata

JIRA: https://jira.spring.io/browse/INT-4433

The current `MessagePublishingInterceptor` behavior is to parse expressions
on each method invocation what is not so efficient at runtime

* Introduce `default` `Expression`-based method to the `PublisherMetadataSource`
contract and call existing String-based methods for backward compatibility.
* Deprecate String-based `PublisherMetadataSource` methods in favor of newly
introduced `Expression`-based
* Implement new `getExpressionForPayload()` and `getExpressionsForHeaders()`
in all the `PublisherMetadataSource` implementations
* Cache parsed `Expression` s during initialization in the `PublisherMetadataSource`
implementations or do that on demand in the `MethodAnnotationPublisherMetadataSource`
by provided method basis
* Introduce `MethodAnnotationPublisherMetadataSource#metadataCacheLimit` and populate
its value from the `@EnablePublisher` or `<int:annotation-configuration>`
* Implement `entrySet()` and `values()` in the `ExpressionEvalMap`

**Cherry-pick to 5.0.x**

* Add `@SuppressWarnings(""varargs"")` to avoid compilation warning

* Remove LRU cache logic - it's fine to cache all the info about methods
in the classpath"
1cd6c118080782cbed68ae3d86d416e7770e7721,2018-03-26 16:48:37-04:00,"INT-4443: Use SimpleEC for uriVariablesExpression

JIRA: https://jira.spring.io/browse/INT-4443

**cherry-pick to 5.0.x, 4.3.x**

Polishing; use data binding accessor in test evaluation contexts.

Add `.withInstanceMethods()`

See https://jira.spring.io/browse/SPR-16588?focusedCommentId=158041&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-158041

* Polishing according PR comments"
4e157725b9c048e2d00891de0fff70b6f6e37fb8,2018-04-18 13:48:44-04:00,"INT-4448, INT-4449: Fix Gateway for no-arg method (#2420)

* INT-4448, INT-4449: Fix Gateway for no-arg method

JIRA: https://jira.spring.io/browse/INT-4448
JIRA: https://jira.spring.io/browse/INT-4449

When we are not interested in the `payload` to send, we use a gateway
method without any args, but in this case for send operation (or
send-and-receive) we should specify a default `payloadExpression`

The `MessagingGatewayRegistrar` fails with `NPE` if we don't have a
any global headers and have `defaultPayloadExpression`

Also in this case the `GatewayProxyFactoryBean` fails to send
and fallbacks to receive with the meaning ""no args, not payloadExpression""

* Fix `MessagingGatewayRegistrar` to check `hasDefaultHeaders` before
processing them
* Fix `GatewayProxyFactoryBean` to consult `this.globalMethodMetadata`
if there is no `payloadExpression` for the method specific metadata

**Cherry-pick to 5.0.x and 4.3.x**

* Remove `oracle-java8-installer` since it looks like the resource
is not available anymore:

```
Location: http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz?AuthParam=1523990114_ee8c82cbe67bc87d192cb79d3b902d2f [following]
--2018-04-17 18:33:14--  http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz?AuthParam=1523990114_ee8c82cbe67bc87d192cb79d3b902d2f
Connecting to download.oracle.com (download.oracle.com)|23.53.120.105|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2018-04-17 18:35:15 ERROR 404: Not Found.
```"
7bcf6a040ad1ce820d2fc9a1e8c6002fc5e17d3e,2018-04-19 13:22:40-04:00,"INT-4446 Improve EmbeddedJsonHeadersMessageMapper (#2422)

* INT-4446 Improve EmbeddedJsonHeadersMessageMapper

JIRA: https://jira.spring.io/browse/INT-4446

* Do not recreate message if not necessarily
* Do not let to generate `id` and `timestamp` if they are not mapped
* Use `smartMatch` to allow to configure negative patterns
* Introduce `PatternMatchUtils.smartMatchIgnoreCase()` for convenience

**Cherry-pick to 5.0.x**

* * Polishing `EmbeddedJsonHeadersMessageMapper`"
2f1b55f48cad36f4b49afeaa739350dc51bac5a5,2018-04-20 11:11:05-04:00,"Upgrade to Gradle 4.7 and others, polishing build (#2423)

* Upgrade to Gradle 4.7 and others, polishing build

* Fix `MqttAdapterTests` according requirement of the latest Mockito
* Move `int-derby.properties` to the `/resources` from `/java`

* Fix Checkstyle violations"
a62832c707991716449fb1ebf390a9593ce013ab,2018-05-01 08:47:07-04:00,"INT-4458: Do not expose recursive generics API (#2432)

* INT-4458: Do not expose recursive generics API

JIRA: https://jira.spring.io/browse/INT-4458

According Kotlin generics system restrictions we can't expose API
based on the recursive generics, like we have with Java DSL for JMS

* Replace explicit recursive generics on factory method with the wildcard (`?`).
This way both Kotlin and Java are able to instantiate target object and perform
the proper chain API auto-completion
* Fix `JmsInboundChannelAdapterSpec` to deal with provided `S` type for the
`configureListenerContainer()` - the way we can configure a `JmsDefaultListenerContainerSpec`
* Add `kotlin-spring` Gradle plugin to avoid extra `open` modificator on `@Bean` methods
* Add `JmsDslKotlinTests.kt`

**Cherry-pick to 5.0.x excluding Kotlin support**

* Fix `Amqp` DSL factory for recursive generics

* Polishing for Kotlin tests"
e98738788dd85317d568f62caf5671766f30d76b,2018-05-04 12:09:00-04:00,"INT-4461: Support byte[] in #jsonPath

JIRA: https://jira.spring.io/browse/INT-4461

Convert `byte[]` to `String` using `URF-8` by default.

Add optional evaluate methods to JsonPathUtils with a Charset to use when
converting `byte[]` to `String`.

This is not currently exposed using SpEL. It can be done, but probably not worth
the effort until somebody asks for it.

**cherry-pick to 5.0.x, 4.3.x**

* Use `BAIS`"
b8d4e6b0dea7a2f7c27676f4311db1bcbe374568,2018-05-04 14:13:51-04:00,"Use Lettuce Redis client; Redis module fixes (#2435)

* Use Lettuce Redis client; Redis module fixes

The Lettuce client is based on the Netty and more stable, than Jedis
therefore we get a performance improvement for tests
(it saves us at about 30 seconds).
Also this client doesn't fail for me on Windows sporadically (very often)
 with the `ConnectionClosedException`

* After switching to the Netty-based client, we expose the interrupted
Thread issue in the `LockRegistryLeaderInitiator`.
If we interrupted (expected behavior), we try to unlock calling
`RedisLockRegistry`, but Netty client reject our request because the
thread is interrupted, therefore we never delete the lock when we yield
our leadership.
Fix the issue with shifting a `RedisTemplate.delete()` operation to the
`ExecutorService` when the current thread is interrupted
* Allow to configure such an `ExecutorService` and timeout to wait for
the `submit()` result
* Refactor `RedisAvailableRule` and all the Redis tests do not expose
the target `RedisConnectionFactory` implementation.
* Make all the test-cases based on the `connectionFactory` created by
the `RedisAvailableTests.setupConnectionFactory()`
* Tweak some unnecessary timeouts and sleeps for better tests task
throughput

* Add a `Log4j2LevelAdjuster` into the `RedisLockRegistryLeaderInitiatorTests`"
61b272dd5b8e365566624398c1fc04f4c889430b,2018-05-11 12:53:33-04:00,"Wrap non-`StandardIntegrationFlow` into Proxy (#2440)

* Wrap non-`StandardIntegrationFlow` into Proxy

In previous version all the `IntegrationFlow` beans have been replaced
by the `StandardIntegrationFlow` i the `IntegrationFlowBeanPostProcessor`
if they are lambda.
That works for Java, but doesn't with Kotlin, since lambdas i last one
are not synthetic classes.
Therefore some Java DSL definitions (especially `.subFlowMapping()`)
don't work consistently in two languages.

* Introduce `IntegrationFlowLifecycleAdvice` to wrap all the
non-`StandardIntegrationFlow`s (excluding `IntegrationFlowAdapter`)
into the `Proxy` to expose `SmartLifecycle` and `getInputChannel()`
operations and delegate them to the internal `StandardIntegrationFlow`
created by the `IntegrationFlowBeanPostProcessor`.
* This way any custom `IntegrationFlow` implementations can be used
for manual flow registration via `IntegrationFlowContext`
* Polish `RouterDslTests.kt` for the `@Bean`s for sub-flows.
* Document in the `dsl.adoc` a request-reply approach for the case
when `.subFlowMapping()` refers to an `IntegrationFlow` `@Bean`.
* Polishing for the `FlowServiceTests` since all the
non-`StandardIntegrationFlow`s and not-`IntegrationFlowAdapter`s are
wrapped now to the Proxy.
* Add missing `from()` delegations into the `IntegrationFlowAdapter`
* Polishing for the `ManualFlowTests` since all the `IntegrationFlow`
now are `Lifecycle` after wrapping to the Proxy.

* Add JavaDocs to the IntegrationFlowLifecycleAdvice and polishing for the dsl.adoc

* * Add JavaDocs for the `IntegrationFlowBeanPostProcessor.processIntegrationFlowImpl()`
* Improve JavaDoc for the `RouterSpec.subFlowMapping()`
* Assert in the `FlowServiceTests` that proxied custom flow implements
all the expected interfaces"
1b46224e412e9abb82c4367af6fba6a31c55c7c7,2018-05-15 11:18:14-04:00,"INT-4398: Replace Gemfire dependency with Geode (#2426)

* INT-4398: Replace Gemfire dependency with Geode

JIRA: https://jira.spring.io/browse/INT-4398

* Polishing `gemfire.adoc` and mention the procedure for an
exclusion/inclusion appropriate dependency

* More Docs polishing

* * Fix tests to be based on SD Geode XML namespace
* Fix Docs according PR comments

* Polishing Docs according PR comments"
97b00a065b8d0eb326e608257f2d369bfc4f45f1,2018-05-15 16:31:16-04:00,"INT-4389: Default to SimpleSeqSizeReleaseStrategy (#2444)

* INT-4389: Default to SimpleSeqSizeReleaseStrategy

JIRA: https://jira.spring.io/browse/INT-4389

An `AbstractCorrelatingMessageHandler` fallback to the
`SimpleSequenceSizeReleaseStrategy` when `releaseStrategy` isn't
provided.

* Make `ReleaseStrategyFactoryBean` to fallback to the
`SimpleSequenceSizeReleaseStrategy` for consistency.

* * Fix `ResequencerParser` to fallback to the null `releaseStrategy`.
This way a subsequent `releasePartialSequences` will set a
`SequenceSizeReleaseStrategy` as a default one

* * Fix `BarrierMessageHandler` to populate a default `CorrelationStrategy`

* * More polishing to `BarrierMessageHandler`"
470d6d880e4bd6fce8338185de2298dc6bab762b,2018-05-16 13:49:38-04:00,"INT-4397: Fix headers filtering for @Transformer (#2445)

* INT-4397: Fix headers filtering for @Transformer

JIRA: https://jira.spring.io/browse/INT-4397

The `AbstractMessageProcessingTransformer` doesn't honor a configured
`notPropagatedHeaders` and copies all the request headers to the
message to return

* Add `setNotPropagatedHeaders()` into the `AbstractMessageProcessingTransformer`
and implement there a logic to filter headers, similar to what we have
in the `AbstractMessageProducingHandler`
* Overrider `updateNotPropagatedHeaders()` in the `MessageTransformingHandler`
to propagate `notPropagatedHeaders` to the `AbstractMessageProcessingTransformer`
delegate

* * Revert `final` for the `AbstractMessageProducingHandler.updateNotPropagatedHeaders()`
* Override `addNotPropagatedHeaders()` for the `MessageTransformingHandler()`
and populate `notPropagatedHeaders` into the target `AbstractMessageProcessingTransformer`
from there
* Also populate `notPropagatedHeaders` from the `AbstractMessageProcessingTransformer.doInit()`
* Implement a `AbstractIntegrationMessageBuilder.filterAndCopyHeadersIfAbsent()`
for a general logic to filter `notPropagatedHeaders` and copy the result
headers set into the target message if they are absent
* Use an new `filterAndCopyHeadersIfAbsent()` in the `AbstractMessageProducingHandler`
and `AbstractMessageProcessingTransformer`to avoid code block duplication"
c9faf3c8ce3daedab56c46835dd48430c39b3b2e,2018-05-30 15:23:26-04:00,"Fix LockRegLeaderIn for interrupted Thread.sleep (#2455)

* Fix LockRegLeaderIn for interrupted Thread.sleep

https://build.spring.io/browse/INT-FATS5IC-517

If current thread is interrupted, the `Thread.sleep()` interrupts
immediately.
In the catch block of the main loop in the `LockRegistryLeaderInitiator`
we have such a dangerous `sleep()` and don't restart election in this
candidate any more

* Move `Thread.sleep()` to else after checking the current thread for
interrupted state
* Remove `LongRunningIntegrationTest` rule from the
`RedisLockRegistryLeaderInitiatorTests` since it now works much faster
after proper `busy-wait` handling

**Cherry-pick to master**

* Ignore interruption on the sleep i catch and move on with loop"
17e794d2c8e42ea9be23488aade5f5e0d35726b0,2018-05-31 15:25:38-04:00,"INT-4471: PubSubChannel: Add errorHandler warn (#2459)

* INT-4471: PubSubChannel: Add errorHandler warn

JIRA: https://jira.spring.io/browse/INT-4471

* When an `Executor` is not provided, log warn that the provided
`ErrorHandler` is ignored.

**Cherry-pick to 5.0.x and 4.3.x**

* * Polish warn message"
4bb1a619a9cdd4fb4cbe72ee1b41b4a7a83a6b6d,2018-06-07 12:56:33-04:00,"GH-2467: JdbcLockReg: retry on TransDataAccessExc

* GH-2467: JdbcLockRegistry should retry on DeadlockLoserDataAccessException

Fixes #2467

MySQL 5.7.15 introduced setting `innodb_deadlock_detect` (enabled by
default). As a result MySQL JDBC driver throws
`DeadlockLoserDataAccessException` when deadlock is detected.
`JdbcLockRegistry` doesn't handle it causing lock to be lost.

* Retry `doLock()` on data access deadlock instead of loosing the lock

* Use TransientDataAccessException instead of derived exceptions"
0fc8bec6454a7cb353d2a91a8c635b5121c23d42,2018-06-11 16:34:04-04:00,"GH-2464: WebFlux: Get rid of Mono.block() (#2465)

* GH-2464: WebFlux: Get rid of Mono.block()

Fixes https://github.com/spring-projects/spring-integration/issues/2464

The `WebFluxInboundEndpoint` resolves a `Principal` via `Mono.block()`
operation.
This is prohibited situation in the non-blocking thread, like Reactor
Netty

* Defer `Mono<Principal>` resolution to the message header via
deferring the whole `Message` creating via `flatMap()` operation on the
main `doHandle()` `Mono`

**Cherry-pick to 5.0.x**

* * Fix Checkstyle for the Reactive Spring Security testing utils static imports
* Add `defaultIfEmpty()`, when `exchange.getPrincipal()` is an empty `Mono`"
5a362b62ff543fdca794e8c911729e20a39493ff,2018-06-15 08:40:11-04:00,"Destroy RmiInboundGateway.RmiServiceExporter (#2481)

* Destroy RmiInboundGateway.RmiServiceExporter

The internal instance `RmiServiceExporter` of the `RmiInboundGateway`
has to be destroyed together with the outer instance to unbind `service`
from the RMI registry

* Perform some polishing for the `RmiInboundGateway` and optimize
a `AbstractInboundGatewayParser` for late channels binding

* * Polishing some tests
* Expose getters for channels on the `MessagingGatewaySupport`
* Fix RMI tests to use random port"
de9f8d7ccd2adbb3e3b5b44d32e7eccfaa8ea72e,2018-07-16 19:40:06-04:00,"INT-4501: Don't call getBean from BPP.setBFactory

JIRA: https://jira.spring.io/browse/INT-4501

The call to the `IntegrationFlowBeanPostProcessor#setBeanFactory`
happens during BPP creation.
The introduced call to `beanFactory#getBean` triggers a lot of bean
creations.
For those beans not all `BPP`s are applied.

* Obtain a `flowContext` bean in lazy-load manner

**Cherry-pick to 5.0.x**"
0d0605be783a2648d725e87e365295614c36616d,2018-07-25 13:01:22-04:00,"INT-4381: MessageSources refactoring (#2517)

* INT-4381: MessageSources refactoring

JIRA: https://jira.spring.io/browse/INT-4381

* Make all the out-of-the-box `MessageSource` implementations based
on the `AbstractMessageSource`
* Fix `JdbcPollingChannelAdapterIntegrationTests` for sporadic failure
because of `fixed-rate` for the poller

* Fix HeaderEnricherTests race condition

The `errorChannel()` expect an error in the `testErrorChannel` after
`1000` ms, but at the same time the `poller` in configured for the
`3000` ms.

* Increase all the timeouts for replies
* Decrease a `fixed-delay` on the `poller`
* Some other code style polishing for the `HeaderEnricherTests`"
55a43d37c86f02626c94e59c7e685cac8b2e2f34,2018-07-27 15:50:09-04:00,"Fix memory leak in MHistorConfig & MBeanExpHelper (#2531)

* Fix memory leak in MHistorConfig & MBeanExpHelper

The `MessageHistoryConfigurer` is a `BeanPostProcessor` which keeps a
store of the `TrackableComponent`.
Something similar we have with the `MBeanExporterHelper` and its local
stores populated by the `postProcessBeforeInitialization()`

* Implement `DestructionAwareBeanPostProcessor` in the
`MessageHistoryConfigurer` and `MBeanExporterHelper` to remove destroyed
beans from their caches

**Cherry-pick to 5.0.x**

* * Fix concurrency and checkstyle
* Apply Java 8 style for collections iterations"
4a85849bcc4fed5dcc3842f17afc1cebc8b785e0,2018-08-02 17:41:25-04:00,"INT-3364: Add batchUpdate into JdbcMessageHandler (#2534)

* INT-3364: Add batchUpdate into JdbcMessageHandler

JIRA: https://jira.spring.io/browse/INT-3364

* * Optimize items mapping with an internal `Message` implementation
* Polishing Docs and Javadocs"
26229c9862662236e5e1f2fa7066cb6a1a33c6f3,2018-08-09 15:01:41-04:00,"INT-4480: Use component type for ids in the flow (#2536)

* INT-4480: Use component type for ids in the flow

JIRA: https://jira.spring.io/browse/INT-4480

For better readability of bean names, e.g. from the metrics collectors,
generate them from the component type instead of their fully qualified
class names

* * Fix bean name for injection in the WebFluxDslTests"
5e47a6a9c4ef33ad1c335351e9a0fade6cbf14a2,2018-08-15 14:18:10-04:00,"INT-4517: Refactor beans in IntegrationRegistrar (#2537)

* INT-4517: Refactor beans in IntegrationRegistrar

JIRA: https://jira.spring.io/browse/INT-4517

The `IntegrationRegistrar` populates beans into the application context
too early and when the `allowBeanDefinitionsOverride` is disabled we
end up with the `BeanDefinitionOverrideException` just because end-user
beans are applied later.

* Move most of the bean definitions which can be overridden in the target
application from the `IntegrationRegistrar` into the
`DefaultConfiguringBeanFactoryPostProcessor`
* Revise their registration logic to be sure that some of them are
registered only once in the parent context nad others are registered
in the child context as well
* Refactor a `DslIntegrationConfigurationInitializer` do not register
an `IntegrationFlowDefinition.ReplyProducerCleaner` in the child context
one more time: it doesn't bring any local store within the current
child context
* Introduce a `NoBeansOverrideAnnotationConfigContextLoader` in tests
to ensure that in some test-cases we disallow an
`allowBeanDefinitionsOverride` as it is now in Spring Boot since it is
enabled by default in the Spring Framework

* Revernt DslIntegrationConfigurationInitializer changes

Regsiter all the required infrastructure beans in all the application
contexts to avoid class loader issue for `static` store access"
f9fe70988167ace1be399eda2808f43d754c3d22,2018-08-20 13:30:19-04:00,"Add Java DSL `.fluxTransform(Function)` operator (#2541)

* Add Java DSL `.fluxTransform(Function)` operator

For better interoperability with Reactor `Flux` from the
end-user perspective introduce an operator which could
call a target `Function` with integration data wrapped to the `Flux`
and expect a `Publisher<?>` result to continue the flow.
This way end-user just needs to implement a `Function` (or method)
to accept the `Flux` as an input and return some `Publisher`
after the sequence of reactive operators.

Such a new operator also allows a smooth integration with the
Spring Cloud Function, where it is just enough to lookup the function
in the catalog and inject it into this operator

* * Move `fluxTransform()` body to `Transformers` for cleaner context
distribution"
0545a7b0ffb12666b788e694d2d292732fc9fc8c,2018-08-20 13:44:19-04:00,"INT-4519: Improve JMS inbound-c-a receiveTimeout (#2540)

* INT-4519: Improve JMS inbound-c-a receiveTimeout

JIRA: https://jira.spring.io/browse/INT-4519

* Modify `DynamicJmsTemplate` to default for `-1` if we get
`CachingConnectionFactory` and it is with `cacheConsumers`, otherwise
1 second
* Polishing for some JMS XML parsers, in particular remove
`receiveTimeout` population

**Cherry-pick to 5.0.x**

* * Polishing according PR comments

* * Properly use a `CachingConnectionFactory` in `JmsTests`"
90e4c542102c10431d067d2c452982a3c4a1d7a2,2018-09-11 16:16:32-04:00,"INT-4317: JMS: dynamic deliverMode and timeToLive (#2561)

* INT-4317: JMS: dynamic deliverMode and timeToLive

JIRA: https://jira.spring.io/browse/INT-4317

* Add `deliveryModeExpression` and `timeToLiveExpression` properties
to the `JmsSendingMessageHandler` and expose them in the Java DSL and
XML components
* Add `setMapInboundDeliveryMode()` and `setMapInboundExpiration()`
`boolean` properties (default `false`) to the `DefaultJmsHeaderMapper`
for transferring `JMSDeliveryMode` and `JMSExpiration` into appropriate
`JmsHeaders.DELIVERY_MODE` and `JmsHeaders.EXPIRATION` headers
* Upgrade to latest Kotlin and AssertK

* Upgrade to Kotlin 1.2.61"
27353ed3933925e69dc7b9394392e22f07b3f18e,2018-09-14 10:05:00-04:00,"Add Reactive mode for AbstractPollingEndpoint (#2429)

* Add Reactive mode for AbstractPollingEndpoint

* When `SourcePollingChannelAdapter.outputChannel` is a
`ReactiveStreamsSubscribableChannel`, use `Flux.generate()` for polling
* Refactor `AbstractPollingEndpoint` to remove redundant `Poller` class
in favor of lambda
* Extract `pollForMessage()` method to handle TX states instead of
`Poller` class previously

* * Rebase and fix conflicts

* Polishing for GatewayProxyFactoryBeanTests"
54094da76bf03d3f323da5468e6b62abc4b7a974,2018-09-17 10:40:56-04:00,"INT-4523: Add DSL `convert(Class<> cls)` operator (#2556)

* INT-4523: Add DSL `convert(Class<> cls)` operator

JIRA: https://jira.spring.io/browse/INT-4523

* Change the `LambdaMessageProcessor` to rely on the `MessageConverter`
populated by the `IntegrationContextUtils.ARGUMENT_RESOLVER_MESSAGE_CONVERTER_BEAN_NAME`
This way all the Lambda-based handlers are going to work the same way
as POJO-based via `MessagingMethodInvokerHelper`
* Add `convert(Class<P> payloadType)` EIP-operator to perform similar
to POJO-based method invocation argument conversion

* * Fix `LambdaMessageProcessorTests` to inject a
`ConfigurableCompositeMessageConverter` from the mocked `BeanFactory`
* Make a `mappingJackson2MessageConverter.setStrictContentTypeMatch(true)`
* Also obtain an `ObjectMapper` from the `Jackson2JsonObjectMapper`
which is configured with the scanned possible Jackson modules.
in the `ConfigurableCompositeMessageConverter` do not try to convert
all the potential content without an appropriate JSON content-type
header"
6c379d71997769684caf9a9a39cb809c1db02e16,2018-09-17 10:50:29-04:00,"Fix a logic in the IntFlowDef.toReactivePublisher (#2553)

* Fix a logic in the IntFlowDef.toReactivePublisher

* We may consider to start a `Publisher<Message<?>>` just from one
channel.
So, and an implicit `bridge()` to meet and internal `IntegrationFlow`
 logic
* The `MessageChannelReference` and `FixedSubscriberChannelPrototype`
can't be converted to the reactive `Publisher`.
So, an implicit `bridge()` in between them and target `FluxMessageChannel`

NOTE: This maybe considered for back-port, but the workaround is
simple: just add extra `bridge()` after the mentioned channels

* * Allow `log()` before `toReactivePublisher()` and the same time fix
the problem with not resetted `implicitChannel` flag in the
`IntegrationFlowDefinition`"
585258373eb3ccc16705036671b8eb9259b79dbb,2018-09-17 11:31:26-04:00,"Add `IntegrationFlowDefinition.nullChannel()` (#2555)

* Add `IntegrationFlowDefinition.nullChannel()`

When a `NullChannel` is used in the middle of the flow, it may be not so
obvious why our flow is stopped after accidentally added the next
endpoint

* For convenient add a terminal `nullChannel()` operator into the
`IntegrationFlowDefinition`

* * Add WARN about `NullChannel` subscription from the endpoints"
8b4d1e66e55cb5986cc44a01032a491878f9962c,2018-10-02 11:37:34-04:00,"Allow Functions as Service Activators (#2575)

* Allow Functions as Service Activators

* Fix `MessagingMethodInvokerHelper` to extract canonical method for the
`Function` and `Consumer` beans
* Demonstrate in test how `Function` and `Consumer` can be configured
with the Messaging annotations

* Don't mutate method argument"
2df71fba3046aa0e259eb14a53fbd22cccc1cafa,2018-10-05 14:39:35-04:00,"INT-4537: Fix RSConsumer for MockIntegrationCtx

JIRA: https://jira.spring.io/browse/INT-4537

Fixes spring-projects/spring-integration#2582

* Rename `ReactiveStreamsConsumer.messageHandler` property to the
`handler` for consistency with other `IntegrationConsumer` s
* Do not wrap `Subscriber` into the `MessageHandler` if that one is
already a `MessageHandler`
* Fix `MockIntegrationContext` for the logic around `ReactiveStreamsConsumer`
where it is not enough just replace a `handler`, but we also need to do
that with the `subscriber`.
Luckily the `MockMessageHandler` is also a Reactive `Subscriber`
* Clean up `MockIntegrationContext.beans` in the end of `resetBeans()`
* Improve `testing.adoc`

**Cherry-pick to 5.0.x**"
9ae0eb2dbc5f5702feec5fafed827726ecf1c0ba,2018-10-08 16:26:56-04:00,"INT-4540: Use MessageHeaders in GenericHandler (#2589)

* INT-4540: Use MessageHeaders in GenericHandler

JIRA: https://jira.spring.io/browse/INT-4540

For better end-user experience use a `MessageHeaders` in the
`GenericHandler` instead of plain `Map<String, Object>`

* * Fix `IntegrationFlowEventsTests`"
ddcfa25fc49e436f648b0a76b22fbda0915ff12a,2018-10-10 12:20:13-04:00,"INT-4543: JacksonJsonObjectMapper: fix toJsonNode (#2592)

* INT-4543: JacksonJsonObjectMapper: fix toJsonNode

JIRA: https://jira.spring.io/browse/INT-4543

When inbound payload is type of `String`, `byte[]`, `File`, `URL`,
`InputStream` or `Reader`, we have to use an `ObjectMapper.readTree()`
function.
For all other types the `valueToTree()` should be used as a fallback

**Cherry-pick to 5.0.x**

* * Fallback to the `valueToTree()` if not valid JSON

* * Fallback to `valueToTree()` only for `String` and `byte[]`"
0f5cfd4314a1f8fe73ce02c224fb2eebe9fe9516,2018-10-10 14:03:40-04:00,"INT-4542: CorrMH: Use popSequenceDetails properly (#2591)

* INT-4542: CorrMH: Use popSequenceDetails properly

JIRA: https://jira.spring.io/browse/INT-4542

Perform a `MessageBuilder.popSequenceDetails()` for those
`MessageGroupProcessor` results which are not `Message`
or `Collection<Message>`

**Cherry-pick to 5.0.x**

* * Add `AbstractCorrelatingMessageHandler.popSequenceDetails` property

* * Rename property to just a `popSequence`

* * Fix JavaDocs on the `AbstractCorrelatingMessageHandler.setPopSequence()`
* Fix Docs typos and language
* finish the `RouterTests.testNestedScatterGather()`"
e3ce37ca368fdc652cc40c0f81d4f12e2de99e62,2018-10-19 09:51:25-04:00,"INT-4544: Allow runtime MBeans (un)registered (#2601)

* INT-4544: Allow runtime MBeans (un)registered

JIRA: https://jira.spring.io/browse/INT-4544

* Fix `SourcePollingChannelAdapterFactoryBean` to register an
`outputChannelName` into the `SourcePollingChannelAdapter` for late
binding, especially in case of dynamic `IntegrationFlow` registrations.
This must be back-ported to `5.0.x`
* Implement `DestructionAwareBeanPostProcessor` in the
`IntegrationMBeanExporter` for the runtime beans tracking, e.g. via
dynamic `IntegrationFlow` registrations
* Refactor `IntegrationMBeanExporter` for static and dynamic beans
registration and destruction
* Remove unused properties; introduce some new for tracking beans and
their relationship

* * Move `IntegrationMBeanExporter.registerProducer()` after
`postProcessAfterInitialization()`
* Refactor JMX test configurations to reuse MBeanServer as much as
possible and destroy the server whenever it is necessary

* * More JMX tests polishing

* * And more JMX tests polishing

* * `try...catch` in the `IntegrationMBeanExporter.postProcessAfterInitialization()`
to avoid breaking changes for the current GA phase
* Do not unregister those MBeans explicitly which weren't created at
runtime

* * Log ObjectNames in the `MBeanExporterIntegrationTests`

* * Fix `MessageMetricsAdviceTests` to rely on the application context
* Do not use a cst in the `StandardIntegrationFlowContext` for
`BeanFactory`, but an explicit `BeanDefinitionRegistry`
* Extract targets from proxies in the
`IntegrationMBeanExporter.postProcessAfterInitialization()`
* Remove logging in the `MBeanExporterIntegrationTests`

* * Fix `NotificationListeningMessageProducerTests` to reuse existing `MBeanServer`

* * Change JMX `domain` in the `DslMBeanTests` to `dsl` do not clash with
similar in the `foo` in the `MessageSourceTests`
* Use `MBeanServer` bean in the `Int2307Tests`
* Use JUnit 5ctor injection injection in the `MessageMetricsAdviceTests`

* * Fix JMX tests do not reuse existing `MBeanServer` and make them rely
on the server provided by the managed `MBeanServerFactoryBean` which
destroys a server on application context close
* Fix `StoredProcJmxManagedBeanTests-context.xml` to use `MBeanServer`
from the `<context:mbean-server>`"
495dfe6437ea0a0bb8735315df4163734d184dc6,2018-10-23 15:32:09-04:00,"GH-2500: Polish Redis Docs

Fixes spring-projects/spring-integration#2500"
90ac259da79d29e60db6c4633495ccc233fc0f10,2018-10-24 15:02:52-04:00,"INT-4520 Make IntegrationGraphServer customizable (#2608)

* INT-4520 Make IntegrationGraphServer customizable

JIRA: https://jira.spring.io/browse/INT-4520

* * Polishing according PR comments"
4bb23e2e6eb6054e6735f90498ea0139a2bdb0a5,2018-10-25 13:26:51-04:00,"INT-4459: Mention dependencies in the Docs (#2610)

* INT-4459: Mention dependencies in the Docs

JIRA: https://jira.spring.io/browse/INT-4459

* Explicitly say what Spring Integration dependency must be included
into the target project for particular protocol components

* * Fix code block wrapping in the `endpoint-summary.adoc`"
8305c6fec3459789b2904751e07075bc4e607035,2018-10-25 15:30:32-04:00,"INT-4322: Log merged global properties on startup (#2612)

* INT-4322: Log merged global properties on startup

JIRA: https://jira.spring.io/browse/INT-4322

Now we have DEBUG message in logs like this:
```
Spring Integration global properties:

spring.integration.endpoints.noAutoStartup=fooService*
spring.integration.taskScheduler.poolSize=20
spring.integration.channels.maxUnicastSubscribers=0x7fffffff
spring.integration.channels.autoCreate=true
spring.integration.channels.maxBroadcastSubscribers=0x7fffffff
spring.integration.readOnly.headers=
spring.integration.messagingTemplate.throwExceptionOnLateReply=true
```

* Also register a `mergedIntegrationGlobalProperties` bean on a first
`IntegrationContextUtils.getIntegrationProperties()` call to avoid a
new `Properties` object on each call

* * Fix `TestUtils` to register a `BeanDefinition` instead of `registerSingleton()`
and an explicit `afterPropertiesSet()` call

* * Document mentioned changes
* Some polishing for `whats-new.adoc`"
5bf6161112373d720ef2b30a2f1a6776f4e42f55,2018-11-15 14:56:14-05:00,"INT-4550: Disallow multi aggregators on same MGS (#2622)

* INT-4550: Disallow multi aggregators on same MGS

JIRA: https://jira.spring.io/browse/INT-4550

**Cherry-pick to 5.0.x**

* * Introduce `UniqueExpiryCallback`
* Use `UniqueExpiryCallback` in the `AbstractCorrelatingMessageHandler`
* Check for uniqueness in the `AbstractMessageGroupStore`
* Remove duplicate code in the `ConfigurableMongoDbMessageStore`

* * Fix tests according a new logic

* * Address PR review

* Change `Assert.isTrue` to the `logger.error` for backward compatibility
* Revert changes in tests since we don't throw exception anymore
* Fix language on doc

* * Fix Checkstyle violation in the `AbstractMessageGroupStore`

* * Ignore `testDontReapMessageOfOtherHandler()`"
d981171972d26cd1bc5aa22d3b3b64fe09818e21,2018-11-27 11:00:40-05:00,"Fix ambiguity in the `JpaExecutor` (#2640)

* Fix ambiguity in the `JpaExecutor`

Since we can't mutate a provided `ParameterSourceFactory` with the
provided `jpaParameters`, we have to reject such a combined
configuration in favor of the advice to configure params on the
provided `ParameterSourceFactory`

* Throw `IllegalStateException` when `ParameterSourceFactory` and
`jpaParameters` are configured together on the `JpaExecutor`
* Some refactoring for `JpaExecutor` to have a consistent code style
* Fix tests according new logic
* Document such an ambiguity configuration to avoid confusion

**Cherry-pick to 5.0.x**

* * Use `assertThatThrownBy()` in the `JpaExecutorTests`
* Fix ""No BeanFactory"" warning in the `JpaExecutorTests`

* * Resolve potential NPE and add `@NonNullApi` with `@Nullable` on the `poll()`"
536b6b178671418bd587d1294e1b141d95c2b5e1,2018-12-06 15:41:40-05:00,"INT-4565: Fix IntComponentScan for profiles (#2652)

* INT-4565: Fix IntComponentScan for profiles

JIRA: https://jira.spring.io/browse/INT-4565

* Propagate an `Environment` to the internal `ClassPathScanningCandidateComponentProvider`
in the `IntegrationComponentScanRegistrar` for proper profiles activation
* Ensure the logic works in the `GatewayInterfaceTests`
* Some polishing and performance improvement for the `GatewayInterfaceTests`
* Add a note about `@Profile` in the `gateway.adoc`
* Polishing for the `gateway.adoc`

**Cherry-pick to 5.0.x & 4.3.x**

* * Add not activated by profile gateway interface into the `GatewayInterfaceTests`
* More `GatewayInterfaceTests` polishing
* Fix typo in the `gateway.adoc`

* Fix Checkstyle violation"
d7356aa85d44511cda19e8e4c699145e496756e3,2018-12-13 16:14:37-05:00,"Use Context CL wherever it is applicable (#2656)

* Use Context CL wherever it is applicable

* Use `ClassUtils.getDefaultClassLoader()` in the `IntegrationManagementConfigurer`
for checking a Micrometer presence from the `afterSingletonsInstantiated()`
* Use `ClassUtils.getDefaultClassLoader()` in the `ScatterGatherHandler`
to load required class
* Refactor `HeaderEnricherParserSupport` do not use CL at all.
The `TypedStringValue` will resolve a target type later by the
`BeanFactory`.
This way we honor a property placeholder behavior for the `type` XML
attribute

* * Use `ClassUtils.getDefaultClassLoader()` in the ScatterGatherHandler ctor"
c5f29fc6ef4519f0d2f211dede5045154a3c300e,2018-12-14 11:38:38-05:00,"RedisLock: Throw exception from unlock on expire (#2661)

* RedisLock: Throw exception from unlock on expire

The lock might be expired in target Redis store in between `lock()` and
`unlock()`.
So, throw an `IllegalStateException` when lock is expired during
unlocking.
At the same time the lock lock is unlocked anyway.

**Cherry-pick to 5.0.x**

* * Create a new test for exception
* Add more info into the exception"
3dd8b63576f18d4d9abfa00ecaf7afeb1f82f188,2018-12-18 14:22:17-05:00,"INT-4569: Disallow beans override in DSL (#2664)

* INT-4569: Disallow beans override in DSL

JIRA: https://jira.spring.io/browse/INT-4569

* Thorw `BeanDefinitionOverrideException` from the
`IntegrationFlowBeanPostProcessor` when it detects existing bean and it
is not the same object we try to register from the DSL
* Document limitations about `prototype` beans
* Some polishing in the DSL chapter of the docs

* * Fix algorithm in the `IntegrationFlowBeanPostProcessor.noBeanPresentForComponent()`

* * Polishing dsl.adoc
* Call `BeanFactory.initializeBean()` for existing beans if they are
`prototype`

* * Code formatting in the `ManualFlowTests`"
271181247d8aee77819e8ed5945092cd6b68e6ba,2018-12-18 15:58:40-05:00,"Fix code smell in test and syslog modules (#2667)

* Fix code smell in test and syslog modules

* * Fix code smell in the scripting module"
8ce8bf9d7331b479e3a4a1870da69c6aa7e3e0dd,2018-12-19 12:33:47-05:00,"Fix code smell in websocket and webflux modules (#2669)

* * Fix code smell in websocket and webflux modules

* * More fixes

* * Fix NPE in the `IntegrationHandlerResultHandler`"
93d7c58b64e2bcc95f73e7fd47ccb3e8926683df,2018-12-20 19:19:47-05:00,"Enable ModifierOrderCheck Checkstyle rule (#2673)

* Enable ModifierOrderCheck Checkstyle rule

* Fix violations for `static` and `abstract` modifier
* Remove redundant code in the `TcpNioConnection`
* Mark `connectionFactoryName` as `@Nullable` in the `TcpConnectionSupport`
ctor and its inheritors
* Fix some smells according IDEA suggestions in the affected classes
* This should fix some Sonar smells as well

* * Fix `HeaderMapperTests`

* * Polishing `TcpConnection` code style and fix Javdocs"
1943c15afe24aa7e2321173fc629c8d1ed99e6a3,2018-12-21 15:27:03-05:00,"INT-4570: Add MessageCollectionCallback for Mongo (#2675)

* INT-4570: Add MessageCollectionCallback for Mongo

JIRA: https://jira.spring.io/browse/INT-4570

The `MongoDbOutboundGateway` is intended to be used with the
`requestMessage` context, however using a plain `CollectionCallback`
we don't have access to the `requestMessage`

* Deprecate `CollectionCallback` usage in favor of newly introduced
`MessageCollectionCallback` and `message-collection-callback` for XML

**Cherry-pick to 5.0.x**

* * Remove `message-collection-callback` in favor of
`MessageCollectionCallback<T> extends CollectionCallback<T>`

* * Rename a new setter to `setMessageCollectionCallback()` to avoid
reflection collision"
81b4ea1bef4ef3497a77555199455e68a7d56c97,2018-12-22 11:57:35-05:00,"Sonar fixes according latest report (#2676)

* Sonar fixes according latest report

* Fix initialization order in the `GatewayMethodInboundMessageMapper`

* Fix mock in the `DelegatingSessionFactoryTests`

* Fix `AbstractRemoteFileOutboundGateway.listFilesInRemoteDir`

* * PR comments

* * Fix `AbstractRemoteFileOutboundGateway.listFilesInRemoteDir` complexity"
6ddcfb3a8dd026901c4470e67fb471d4f3cf0a34,2019-01-10 10:52:45-05:00,"Custom Session dirty logic

Fixes spring-projects/spring-integration#2687

Allows any session to implement its dirty logic.

* License year was not updated

**Cherry-pick to 5.0.x**"
936d63bd6540cfd02fe910629a42cd92c7a0ec61,2019-01-14 13:24:25-05:00,"Update CONTRIBUTING for GH issues bug tracking (#2696)

* Update CONTRIBUTING for GH issues bug tracking

* * Still mention JIRA"
eed16f02ca916c57a696c4c4d2a5d33debc55755,2019-01-15 15:16:33-05:00,"Fix BeanFactory propagation for MMInvokerHelper (#2694)

* Fix BeanFactory propagation for MMInvokerHelper

* Remove check for `null` in the
`MessagingMethodInvokerHelper.isProvidedMessageHandlerFactoryBean()`
* Fix `RecipientListRouter` for `BeanFactory` propagation to the
`Recipient.selector`
* Fix tests for `BeanFactory` population and propagation
* Add `errorChannel` into the `TestUtils.createTestApplicationContext()`
* Fix some Sonar smell, including new reported

* * Restore NPE check for the `BeanFactory` in the
`MessagingMethodInvokerHelper` to avoid breaking changes in the current
point release
* Some other polishing and optimizations in the
`MessagingMethodInvokerHelper`"
cd8cbaa99c6fcef62eaf875564789a0e48e14972,2019-01-16 18:03:03-05:00,"GH-2699: Make expressions cache concurrent

Fixes spring-projects/spring-integration#2699

* [GH-2699] Match style

* [GH-2699] Shorten test line length

**Cherry-pick to 5.0.x**"
462dc98803f77ac5bd92c8967a699c2deac5c5c7,2019-01-17 10:44:39-05:00,"GH-2695: Add proxy option to @EnablePublisher (#2701)

* GH-2695: Add proxy option to @EnablePublisher

Fixes spring-projects/spring-integration#2695

To configure a `proxyTargetClass=true` we need declare a
`PublisherAnnotationBeanPostProcessor` bean manually, but that may cause
a confuse when `@EnablePublisher` is still present.
So, target service is proxied twice

* Expose `proxyTargetClass` and `order` into the `@EnablePublisher`
and `<enable-publisher>`
* Refactor `PublisherAnnotationBeanPostProcessor` to extend an
`AbstractBeanFactoryAwareAdvisingPostProcessor` to avoid AOP boilerplate
code altogether
* Add assertion into the `PublisherAnnotationBeanPostProcessor` to be
sure that only one of its instance is present in the application context

* * Polishing error message and Docs"
48ae91e3d9f2e45a1d81a3bbf0f9f37822f7e3dd,2019-01-17 18:12:27-05:00,"Docs: Fix File.renameTo() Expressions

https://stackoverflow.com/questions/30151642/moving-processed-files-to-another-directory-using-spring-integration-ftp-inbound/30152053?noredirect=1#comment95312701_30152053

- also fix some PDF overflows"
d37e6562d8259fb760a5c5a0e3c4f03396673e33,2019-01-22 11:04:47-05:00,"Fix DSL to deal with beanNames for handlers (#2707)

* Fix DSL to deal with beanNames for handlers

When consumer endpoint is created by the Framework, the target
`MessageHandler` gets a `componentName` from the `ConsumerEndpointFactoryBean`.
Therefore we can't rely on the `getComponentName()` when we create beans
from Java DSL.

* Introduce `NamedComponent.getBeanName()` contract; make it default
to the `getComponentName()`; implement this method from the
`IntegrationObjectSupport`
* Use this new `getBeanName()` from the `IntegrationFlowBeanPostProcessor`
and `StandardIntegrationFlowContext` for better existing beans checks
and possible reuse existing `MessageHandler` in different endpoints
* Optimize `FixedSubscriberChannel` and implement `getBeanName()` over there
* Implement `getBeanName()` in the `AbstractMessageSource`; use
`ExpressionEvalMap` to evaluate headers expressions
* Implement `getBeanName()` in `Trackable*Metrics` classes as delegation
to the `this.trackable`

* * Fix race condition around `discardChannelName` property in the `MessageFilter`"
119db815c21e659f2099cdc6a54e9e3048ffb5ec,2019-01-22 12:51:29-05:00,"* Fix new Sonar issue in the `AbstractMailReceiver` (#2709)

* * Fix new Sonar issue in the `AbstractMailReceiver`

* * Move `unlock()` to its own `finally`

* * Make `ImapMailReceiverTests.imapIdleServer` non-static to allow
recreate the mail server for each test method

https://build.spring.io/browse/INT-MASTERSPRING40-591/

* * Remove MongoDb download from Travis config

* * Fix Checkstyle violation"
9ab6779dc2ae3650298cdec4df179b51f99430d5,2019-01-24 11:55:46-05:00,"Fix new Sonar smell and some other in JMX module (#2716)

* Fix new Sonar smell and some other in JMX module

* * Fix issues after testing"
a609bd939817aed4605891b5402d28d4671fa4fb,2019-01-25 14:37:57-05:00,"Some file module Sonar fixes (#2718)

* Some file module Sonar fixes

* * Fixes after testing

* * Some further Sonar fixes for file module

* * Further Sonar fixes for file module

* * More Sonar fixes for file module

* * Fix `RemoteFileTemplate` issues

* * Fix new sonar smells after previous one

* * Review feedback"
5295a76b42812981d208e8896d720b596e07265d,2019-01-28 13:07:26-05:00,"Fix mail lock race condition & Sonar smells (#2721)

* Fix mail lock race condition & Sonar smells

https://build.spring.io/browse/INT-MASTERSPRING40-599/

* The `folderReadLock` might not be re-locked when `openFolder()`
throws an exception
* Fix all the Sonar smells for mail module
* Optimize all the dynamic `Assert` messages to `Supplier`
* Refactor `MailReceiverFactoryBean` to be based on the `AbstractFactoryBean`

* * Fix new reported Sonar smells

* * Log error during cancel idle state in the `ImapMailReceiver`
* Remove commented code in the `MailTransportUtils`"
a283ad60fb8f6983f2545c7d7b53091b93fe54d3,2019-01-29 12:27:05-05:00,"GH-2723: Handle unsupported XML properties

Fixes spring-projects/spring-integration#2723

Not all XML components support all the configuration properties.
For example Saxon HE doesn't support `XMLConstants.ACCESS_EXTERNAL_DTD`
and end up with an exception like:
`IllegalArgumentException: Unknown configuration property http://javax.xml.XMLConstants/property/accessExternalDTD`

* Change `XsltPayloadTransformer` to re-use `TransformerFactoryUtils`
from spring-ws as a centralized source of `TransformerFactory`
configuration.
* Wrap `XMLConstants.ACCESS_EXTERNAL_STYLESHEET` to the `try..catch`
and log INFO about not supported property

**Cherry-pick to 5.0.x & 4.3.x**"
020ea76d59de8e82e1744f3f2d9ba0f4e75cce25,2019-01-30 13:59:37-05:00,"Make IOS.setTaskScheduler() as public (#2725)

* Make IOS.setTaskScheduler() as public

* Make `IntegrationObjectSupport.setTaskScheduler()` as `public` and
remove all the overrides for visibility
* Fix Sonar smells for all the affected classes

* * Fix `throws Exception` for affected classes to avoid compilation errors

* * Fix ""merely rethrow"" smell
* Revert `throws Exception` for `AbstractEndpoint.destroy()`

* * Catch a couple exceptions from `destroy()`"
71fd60fda61ab2d9e919aa7e7616938282e2eda9,2019-02-06 16:21:03-05:00,"Add default expressions for ExpEvalReqHAdvice (#2738)

* Add default expressions for ExpEvalReqHAdvice

https://stackoverflow.com/questions/54546728/how-to-handle-ftpoutboundadapter-connection-exception-in-spring-integration-flow

When channels are configured for the `ExpressionEvaluatingRequestHandlerAdvice`,
but no expressions, the logic is not performed.
In other words: we can evaluate expressions, when no channels,
but we  don't send messages to channels when no expressions.

* Provide default expressions to be evaluated to `payload`, when only
channels are provided.

* * Remove asserts for expression setters"
04875b72b427aa2a686e3f176813bcd7e0a31126,2019-02-08 14:27:03-05:00,"GH-2727: Ensure JDBC queries are logged (#2730)

* GH-2727: Ensure JDBC queries are logged

Fixes: https://github.com/spring-projects/spring-integration/issues/2727

The `JdbcTemplate` logs a message for the sql to execute when it is
supplied by the `QueryProvider`.

* Refactor `JdbcPollingChannelAdapter` to use new introduced internal
`PreparedStatementCreatorWithMaxRows` with the `QueryProvider`
* Refactor `JdbcMessageHandler` to instantiate a `generatedKeysStatementCreator`
based on the `PreparedStatementCreatorFactory`
* Verify in the `JdbcOutboundGatewayParserTests` that both fixes logs
sql queries properly

* * Implement all the delegate interfaces for the `PreparedStatementCreatorWithMaxRows`"
e8aa8618dfbaa155419500df9d1d374a1da1f9a7,2019-02-11 15:08:01-05:00,"GH-2735: Add errorChannel to ScatterGatherHandler

Fixes spring-projects/spring-integration#2735

* Fix typos in Scatter-Gather JavaDocs
* Add Scatter-Gather error handling documentation

Doc polishing"
82ecd5a75df708edf5a69a87268aacf95d06da8c,2019-02-22 10:22:58-05:00,"GH-2749: Deprecate ChannelInterceptorAware (#2751)

* GH-2749: Deprecate ChannelInterceptorAware

Fixes https://github.com/spring-projects/spring-integration/issues/2749

The `org.springframework.messaging.support.InterceptableChannel` provides
exact functionality as `ChannelInterceptorAware`

* Make `ChannelInterceptorAware extends InterceptableChannel`
* Suppress deprecation warning whenever we need to keep backward
compatibility
* Fix all other places to deal with `InterceptableChannel` already

* GH-2749: Deprecate ChannelInterceptorAware

Fixes https://github.com/spring-projects/spring-integration/issues/2749

The `org.springframework.messaging.support.InterceptableChannel` provides
exact functionality as `ChannelInterceptorAware`

* Make `ChannelInterceptorAware extends InterceptableChannel`
* Suppress deprecation warning whenever we need to keep backward
compatibility
* Fix all other places to deal with `InterceptableChannel` already

* * Fix `channel.adoc` for the current version"
d2e974a6de2cc1869dbce668593c939fece28c27,2019-02-27 15:17:51-05:00,"Fix new Sonar smells (#2768)

* Fix new Sonar smells

* Fix some old Sonar smells as well
* Fix Micrometer leaks in the `PollableChannel` when we register
meters, but don't remove them.

* * Fix NPE around `MetricsCaptor` in channels

* * Fix new smells according test report

* * Further Sonar smell fixes

* * More smell fixes for `MessagingMethodInvokerHelper`
* Remove `throws Exception` from `AbstractMessageHandler.destroy()`

* * Fix complexity in the `MessagingMethodInvokerHelper.processInvokeExceptionAndFallbackToExpressionIfAny()`"
3657d0559666c30b8dd72eeff9b4d3d22826844d,2019-03-01 10:26:05-05:00,"Defer Messaging annotations process (#2769)

* Defer Messaging annotations process

The `AbstractMethodAnnotationPostProcessor` and its implementations
have a `beanFactory.getBean()` call for the `@Bean` methods with
Messaging annotations.
This is done, actually, from the
`MessagingAnnotationPostProcessor.postProcessAfterInitialization()`
which might be still too early in some scenarios, like Spring Cloud Feign
with its child application contexts being initialized from the
`FeignClientFactoryBean`, causing a `BeanCurrentlyInCreationException`

See https://stackoverflow.com/questions/54887963/beancurrentlyincreationexception-when-using-spring-integration-with-spring-cloud

* Implement a `SmartInitializingSingleton` for the `MessagingAnnotationPostProcessor`
and gather `Runnable` wrappers for newly introduced `postProcessMethodAndRegisterEndpointIfAny()`
to be called later in the `afterSingletonsInstantiated()` when context is
still in the initialization phase.
All runtime-registered beans are going to be processed normally from the
regular `postProcessAfterInitialization()`

**Cherry-pick to 5.1.x**

* * Fix unused imports in the `MessagingAnnotationsWithBeanAnnotationTests`

* * Fix `IntegrationEndpointsInitializer` in the testing framework to handle
all the possible `AbstractEndpoint` beans registration.
See its JavaDocs for more info
* Fix `AbstractCorrelatingMessageHandlerParser` and
`AbstractConsumerEndpointParser` to use bean names for `outputChannel`
and `discardChannel` instead of bean references.
Since `MessagingAnnotationPostProcessor` now registers endpoints and
beans for channels much later, than parsers, we can't rely on bean
references any more there.
* Fixes for failing tests which expected `outputChannel/discardChannel`
bean references, when it is already just their names for late binding.
* Apply some code style polishing for the affected classes.
* Add `@Nullable` for `MessageSelector` parameter in the `QueueChannel.purge()`"
e32f87731a4ef18c3f88c77aa4232ec1d36d84e7,2019-03-06 09:37:44-05:00,"URL Cleanup

This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).

# Fixed URLs

## Fixed Success
These URLs were fixed successfully.

* http://docs.oracle.com/javaee/6/api/ migrated to:
  https://docs.oracle.com/javaee/6/api/ ([https](https://docs.oracle.com/javaee/6/api/) result 200).
* http://docs.oracle.com/javase/7/docs/api/ migrated to:
  https://docs.oracle.com/javase/7/docs/api/ ([https](https://docs.oracle.com/javase/7/docs/api/) result 200).
* http://docs.spring.io/spring-amqp/docs/current/api/ migrated to:
  https://docs.spring.io/spring-amqp/docs/current/api/ ([https](https://docs.spring.io/spring-amqp/docs/current/api/) result 200).
* http://docs.spring.io/spring-data-gemfire/docs/current/api/ migrated to:
  https://docs.spring.io/spring-data-gemfire/docs/current/api/ ([https](https://docs.spring.io/spring-data-gemfire/docs/current/api/) result 200).
* http://docs.spring.io/spring-data/data-mongo/docs/current/api/ migrated to:
  https://docs.spring.io/spring-data/data-mongo/docs/current/api/ ([https](https://docs.spring.io/spring-data/data-mongo/docs/current/api/) result 200).
* http://docs.spring.io/spring-data/data-redis/docs/current/api/ migrated to:
  https://docs.spring.io/spring-data/data-redis/docs/current/api/ ([https](https://docs.spring.io/spring-data/data-redis/docs/current/api/) result 200).
* http://docs.spring.io/spring-ws/sites/2.0/apidocs/ migrated to:
  https://docs.spring.io/spring-ws/sites/2.0/apidocs/ ([https](https://docs.spring.io/spring-ws/sites/2.0/apidocs/) result 200).
* http://docs.spring.io/spring/docs/current/javadoc-api/ migrated to:
  https://docs.spring.io/spring/docs/current/javadoc-api/ ([https](https://docs.spring.io/spring/docs/current/javadoc-api/) result 200).
* http://spring.io migrated to:
  https://spring.io ([https](https://spring.io) result 200).
* http://www.apache.org/licenses/LICENSE-2.0.txt migrated to:
  https://www.apache.org/licenses/LICENSE-2.0.txt ([https](https://www.apache.org/licenses/LICENSE-2.0.txt) result 200)."
e9216287c27224eda29d59e9114e1fda15e25343,2019-03-06 16:38:04-05:00,"INT-4497: Add RateLimiterRequestHandlerAdvice (#2781)

* INT-4497: Add RateLimiterRequestHandlerAdvice

JIRA: https://jira.spring.io/browse/INT-4497

* * Remove unused property"
3006e58d31faa27a706ef7e8de40d961e7ebe260,2019-03-07 12:09:07-05:00,"INT-3459: Log exceptions in case of failOver (#2790)

* INT-3459: Log exceptions in case of failOver

JIRA: https://jira.spring.io/browse/INT-3459

When `UnicastingDispatcher` is configured with `failOver` (true by default),
it loses exceptions it caught with previous handler when the next one
processes message properly

* Add INFO logging for exceptions which are caught before going to fail
over to the next handler

* * Address PR comments

* * More PR comments
* Add a note about this logging into the `channel.adoc`"
005bc806800121122e018600ef2f3a80b1859221,2019-03-07 12:48:15-05:00,"Fix MMIHelper for reinitialization (#2786)

* Fix MMIHelper for reinitialization

If we provide a custom `MessageHandlerMethodFactory`, the
`MessagingMethodInvokerHelper` obtains its bean and reinitialize a
`handlerMethod`, but it is done only for single, explicit
and provided method.
In case of `Function` or `Consumer` we use local names for methods to
extract, but this is not populated to properties of the
`MessagingMethodInvokerHelper`

* Change an internal `MessagingMethodInvokerHelper` logic to recreate
`InvocableHandlerMethod` instances based on the `MessageHandlerMethodFactory`
bean for all the methods scanned on the target.
* Populate a `handlerMethodsList` for the purpose above even if we have
only one candidate
* Fix `AggregatorParserTests` to reflect the current logic around
`handlerMethodsList`
* Prove that new logic works well with a custom `MessageHandlerMethodFactory`
bean in the `MessagingAnnotationsWithBeanAnnotationTests`

**Cherry-pick to 5.1.x**

* * Move CTOR to the proper place"
7f806bd94c1e1479ec0774ad0bdb61f766bda6ea,2019-03-08 11:46:33-05:00,"Fix RedisAvailableRule

Prior to this commit, `RedisAvailableRule.apply()` threw an
`AssumptionViolatedException` when Redis was unavailable. That caused
the execution of the current test class and all pending test methods to
be stopped immediately. Instead, it now returns a `Statement` that
throws the exception in case Redis is unavailable which will only skip
the current test.

Resolves #2782."
b4273dd6627cce57e9b2c78ae36491432065c649,2019-03-08 12:46:19-05:00,"Fix new Sonar smells for MMIH (#2795)

* Fix new Sonar smells for MMIH

* Fix complexity smells in the `MessagingMethodInvokerHelper`
* Reuse `get()` in the `ZookeeperMetadataStore` in case of `putIfAbsent()` error
* Polishing for `ZookeeperMetadataStoreTests`
* Fix for `hasUnqualifiedMapParameter`
* Fix `findHandlerMethodsForTarget()` complexity

* * Fix typo and remove FQCN for `ClassUtils`"
d53433cad76a83806a3c4a65609ed3e0c60f0214,2019-03-13 13:34:41-04:00,"GH-2690: Add MessageHandlerMethodFactory beans (#2798)

* GH-2690: Add MessageHandlerMethodFactory beans

Fixes https://github.com/spring-projects/spring-integration/issues/2690

For more end-user flexibility and for simplicity of the `MessagingMethodInvokerHelper`
logic, add `IntegrationContextUtils.MESSAGE_HANDLER_FACTORY_BEAN_NAME` and
`IntegrationContextUtils.LIST_MESSAGE_HANDLER_FACTORY_BEAN_NAME`
infrastructure beans

* Use mentioned beans in the `MessagingMethodInvokerHelper` if any,
otherwise fallback to the locally configured `MessageHandlerMethodFactory`,
although this is necessary only for our non-Spring-based unit tests
* Relax `BeanFactory` requirement for the `EvaluationContext` since it
is going to be there in the Spring-based environment, but might not be
available in the plain unit tests
* Provide some optimization and refactoring for the `MessagingMethodInvokerHelper`
* Remove deprecated `HandlerMethodArgumentResolversHolder` and
`ARGUMENT_RESOLVERS_BEAN_NAME` & `LIST_ARGUMENT_RESOLVERS_BEAN_NAME`
bean definitions and constants for their names

* * Revert `getEvaluationContext(false)` usage.
* Fix `MessagingMethodInvokerHelper` to propagate `BeanFactory` to
argument resolvers if any"
9883b65e9419c6ca2e78f9afed15ec7d0f3cd2b0,2019-03-14 15:09:49-04:00,"INT-2277: Register ChResolver & ErrHandler beans (#2805)

* INT-2277: Register ChResolver & ErrHandler beans

JIRA: https://jira.spring.io/browse/INT-2277

To avoid extra objects at runtime and reuse a central configuration,
register `BeanFactoryChannelResolver` and `MessagePublishingErrorHandler`
bean via `DefaultConfiguringBeanFactoryPostProcessor`

* Use those beans whenever it is necessary via `IntegrationContextUtils`
factory methods against provided `BeanFactory`
* To avoid changes in the non-managed test, those new factories fall
back to a new instance if there is no an appropriate bean in the `beanFactory`

* * Add `Assert.notNull(beanFactory)` to new factory methods"
8f86ef918c0887db8800fd521d07ea44e6240bf2,2019-03-18 10:08:37-04:00,"Fix Sonar smells for HTTP & WebFlux modules (#2810)

* Fix Sonar smells for HTTP & WebFlux modules

* * Fix more HTTP Sonar smells

* * Remove unused import
* Fix complexity in the `IntegrationMBeanExporter.enhanceSourceMonitor()`

* * Remove unused `IntegrationMBeanExporter.getField()` method

* * Remove unused import in the `IntegrationMBeanExporter`"
5421574ef5e13771b092e2f0a744a0a94b5ccfc4,2019-03-18 17:15:32-04:00,"Support generics in the `JsonToObjectTransformer` (#2819)

* Support generics in the `JsonToObjectTransformer`

* Deprecate `JsonObjectMapperAdapter` if favor of `default` methods in
the `JsonObjectMapper`
* Introduce `JsonObjectMapper.fromJson(Object, ResolvableType)` to
support generics during deserialization
* Add `JsonHeaders.RESOLVABLE_TYPE` header handling for the
`ResolvableType` management
* Add `ResolvableType` argument into the `JsonToObjectTransformer`
* Change the `JsonToObjectTransformer` logic to consult request message
headers first
* Add `ResolvableType`-based factory method into the `Transformers`
* Document the change

* * Use `0` for conversion to array for headers to remove
in the `JsonToObjectTransformer`"
fd30d1b48ba7691985cd6a1cb2398a9214e89d80,2019-03-20 10:39:37-04:00,"URL Cleanup

This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).

# HTTP URLs that Could Not Be Fixed
These URLs were unable to be fixed. Please review them to see if they can be manually resolved.

* http://foo.com (301) with 1 occurrences could not be migrated:
   ([https](https://foo.com) result SSLHandshakeException).

# Fixed URLs

## Fixed But Review Recommended
These URLs were fixed, but the https status was not OK. However, the https status was the same as the http request or http redirected to an https URL, so they were migrated. Your review is recommended.

* http://diveintomark.org/ (302) with 1 occurrences migrated to:
  /ZKSXZ/ ([https](https://diveintomark.org/) result IllegalArgumentException).
* http://foo.bar.com (UnknownHostException) with 1 occurrences migrated to:
  https://foo.bar.com ([https](https://foo.bar.com) result UnknownHostException).
* http://site1.com,http://site2.com (UnknownHostException) with 1 occurrences migrated to:
  https://site1.com,http://site2.com ([https](https://site1.com,https://site2.com) result UnknownHostException).
* http://example.org/2005/04/02/atom (404) with 1 occurrences migrated to:
  https://example.org/2005/04/02/atom ([https](https://example.org/2005/04/02/atom) result 404).
* http://example.org/audio/ph34r_my_podcast.mp3 (404) with 1 occurrences migrated to:
  https://example.org/audio/ph34r_my_podcast.mp3 ([https](https://example.org/audio/ph34r_my_podcast.mp3) result 404).
* http://example.org/feed.atom (404) with 1 occurrences migrated to:
  https://example.org/feed.atom ([https](https://example.org/feed.atom) result 404).
* http://www.puppycrawl.com/dtds/configuration_1_2.dtd (404) with 1 occurrences migrated to:
  https://www.puppycrawl.com/dtds/configuration_1_2.dtd ([https](https://www.puppycrawl.com/dtds/configuration_1_2.dtd) result 404).
* http://www.puppycrawl.com/dtds/suppressions_1_1.dtd (404) with 1 occurrences migrated to:
  https://www.puppycrawl.com/dtds/suppressions_1_1.dtd ([https](https://www.puppycrawl.com/dtds/suppressions_1_1.dtd) result 404).
* http://www.springframework.org/schema/integration/jsr223/spring-integration-jsr223.xsd (404) with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/jsr223/spring-integration-jsr223.xsd ([https](https://www.springframework.org/schema/integration/jsr223/spring-integration-jsr223.xsd) result 404).
* http://www.springframework.org/schema/integration/spring-integration-ws.xsd (404) with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/spring-integration-ws.xsd ([https](https://www.springframework.org/schema/integration/spring-integration-ws.xsd) result 404).
* http://www.springframework.org/schema/integration/webflux/spring-integration-webflux.xsd (404) with 4 occurrences migrated to:
  https://www.springframework.org/schema/integration/webflux/spring-integration-webflux.xsd ([https](https://www.springframework.org/schema/integration/webflux/spring-integration-webflux.xsd) result 404).

## Fixed Success
These URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.

* http://example.org with 22 occurrences migrated to:
  https://example.org ([https](https://example.org) result 200).
* http://example.org/ with 2 occurrences migrated to:
  https://example.org/ ([https](https://example.org/) result 200).
* http://feeds.bbci.co.uk/news/rss.xml with 1 occurrences migrated to:
  https://feeds.bbci.co.uk/news/rss.xml ([https](https://feeds.bbci.co.uk/news/rss.xml) result 200).
* http://www.example.com/ with 1 occurrences migrated to:
  https://www.example.com/ ([https](https://www.example.com/) result 200).
* http://www.springframework.org/schema/aop/spring-aop.xsd with 12 occurrences migrated to:
  https://www.springframework.org/schema/aop/spring-aop.xsd ([https](https://www.springframework.org/schema/aop/spring-aop.xsd) result 200).
* http://www.springframework.org/schema/beans/spring-beans.xsd with 813 occurrences migrated to:
  https://www.springframework.org/schema/beans/spring-beans.xsd ([https](https://www.springframework.org/schema/beans/spring-beans.xsd) result 200).
* http://www.springframework.org/schema/context/spring-context.xsd with 122 occurrences migrated to:
  https://www.springframework.org/schema/context/spring-context.xsd ([https](https://www.springframework.org/schema/context/spring-context.xsd) result 200).
* http://www.springframework.org/schema/data/jpa/spring-jpa.xsd with 2 occurrences migrated to:
  https://www.springframework.org/schema/data/jpa/spring-jpa.xsd ([https](https://www.springframework.org/schema/data/jpa/spring-jpa.xsd) result 200).
* http://www.springframework.org/schema/data/mongo/spring-mongo.xsd with 18 occurrences migrated to:
  https://www.springframework.org/schema/data/mongo/spring-mongo.xsd ([https](https://www.springframework.org/schema/data/mongo/spring-mongo.xsd) result 200).
* http://www.springframework.org/schema/geode/spring-geode.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/geode/spring-geode.xsd ([https](https://www.springframework.org/schema/geode/spring-geode.xsd) result 200).
* http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd with 14 occurrences migrated to:
  https://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd ([https](https://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd) result 200).
* http://www.springframework.org/schema/integration/event/spring-integration-event.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/integration/event/spring-integration-event.xsd ([https](https://www.springframework.org/schema/integration/event/spring-integration-event.xsd) result 200).
* http://www.springframework.org/schema/integration/feed/spring-integration-feed.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/integration/feed/spring-integration-feed.xsd ([https](https://www.springframework.org/schema/integration/feed/spring-integration-feed.xsd) result 200).
* http://www.springframework.org/schema/integration/file/spring-integration-file.xsd with 27 occurrences migrated to:
  https://www.springframework.org/schema/integration/file/spring-integration-file.xsd ([https](https://www.springframework.org/schema/integration/file/spring-integration-file.xsd) result 200).
* http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd with 15 occurrences migrated to:
  https://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd ([https](https://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd) result 200).
* http://www.springframework.org/schema/integration/gemfire/spring-integration-gemfire.xsd with 6 occurrences migrated to:
  https://www.springframework.org/schema/integration/gemfire/spring-integration-gemfire.xsd ([https](https://www.springframework.org/schema/integration/gemfire/spring-integration-gemfire.xsd) result 200).
* http://www.springframework.org/schema/integration/groovy/spring-integration-groovy.xsd with 11 occurrences migrated to:
  https://www.springframework.org/schema/integration/groovy/spring-integration-groovy.xsd ([https](https://www.springframework.org/schema/integration/groovy/spring-integration-groovy.xsd) result 200).
* http://www.springframework.org/schema/integration/http/spring-integration-http.xsd with 18 occurrences migrated to:
  https://www.springframework.org/schema/integration/http/spring-integration-http.xsd ([https](https://www.springframework.org/schema/integration/http/spring-integration-http.xsd) result 200).
* http://www.springframework.org/schema/integration/ip/spring-integration-ip.xsd with 27 occurrences migrated to:
  https://www.springframework.org/schema/integration/ip/spring-integration-ip.xsd ([https](https://www.springframework.org/schema/integration/ip/spring-integration-ip.xsd) result 200).
* http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd with 47 occurrences migrated to:
  https://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd ([https](https://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd) result 200).
* http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd with 93 occurrences migrated to:
  https://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd ([https](https://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd) result 200).
* http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd with 32 occurrences migrated to:
  https://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd ([https](https://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd) result 200).
* http://www.springframework.org/schema/integration/jpa/spring-integration-jpa.xsd with 11 occurrences migrated to:
  https://www.springframework.org/schema/integration/jpa/spring-integration-jpa.xsd ([https](https://www.springframework.org/schema/integration/jpa/spring-integration-jpa.xsd) result 200).
* http://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd with 18 occurrences migrated to:
  https://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd ([https](https://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd) result 200).
* http://www.springframework.org/schema/integration/mongodb/spring-integration-mongodb.xsd with 17 occurrences migrated to:
  https://www.springframework.org/schema/integration/mongodb/spring-integration-mongodb.xsd ([https](https://www.springframework.org/schema/integration/mongodb/spring-integration-mongodb.xsd) result 200).
* http://www.springframework.org/schema/integration/mqtt/spring-integration-mqtt.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/integration/mqtt/spring-integration-mqtt.xsd ([https](https://www.springframework.org/schema/integration/mqtt/spring-integration-mqtt.xsd) result 200).
* http://www.springframework.org/schema/integration/redis/spring-integration-redis.xsd with 17 occurrences migrated to:
  https://www.springframework.org/schema/integration/redis/spring-integration-redis.xsd ([https](https://www.springframework.org/schema/integration/redis/spring-integration-redis.xsd) result 200).
* http://www.springframework.org/schema/integration/rmi/spring-integration-rmi.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/integration/rmi/spring-integration-rmi.xsd ([https](https://www.springframework.org/schema/integration/rmi/spring-integration-rmi.xsd) result 200).
* http://www.springframework.org/schema/integration/scripting/spring-integration-scripting.xsd with 14 occurrences migrated to:
  https://www.springframework.org/schema/integration/scripting/spring-integration-scripting.xsd ([https](https://www.springframework.org/schema/integration/scripting/spring-integration-scripting.xsd) result 200).
* http://www.springframework.org/schema/integration/security/spring-integration-security.xsd with 3 occurrences migrated to:
  https://www.springframework.org/schema/integration/security/spring-integration-security.xsd ([https](https://www.springframework.org/schema/integration/security/spring-integration-security.xsd) result 200).
* http://www.springframework.org/schema/integration/sftp/spring-integration-sftp.xsd with 18 occurrences migrated to:
  https://www.springframework.org/schema/integration/sftp/spring-integration-sftp.xsd ([https](https://www.springframework.org/schema/integration/sftp/spring-integration-sftp.xsd) result 200).
* http://www.springframework.org/schema/integration/spring-integration.xsd with 731 occurrences migrated to:
  https://www.springframework.org/schema/integration/spring-integration.xsd ([https](https://www.springframework.org/schema/integration/spring-integration.xsd) result 200).
* http://www.springframework.org/schema/integration/stomp/spring-integration-stomp.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/stomp/spring-integration-stomp.xsd ([https](https://www.springframework.org/schema/integration/stomp/spring-integration-stomp.xsd) result 200).
* http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd with 17 occurrences migrated to:
  https://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd ([https](https://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd) result 200).
* http://www.springframework.org/schema/integration/syslog/spring-integration-syslog.xsd with 5 occurrences migrated to:
  https://www.springframework.org/schema/integration/syslog/spring-integration-syslog.xsd ([https](https://www.springframework.org/schema/integration/syslog/spring-integration-syslog.xsd) result 200).
* http://www.springframework.org/schema/integration/websocket/spring-integration-websocket.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/websocket/spring-integration-websocket.xsd ([https](https://www.springframework.org/schema/integration/websocket/spring-integration-websocket.xsd) result 200).
* http://www.springframework.org/schema/integration/ws/spring-integration-ws.xsd with 10 occurrences migrated to:
  https://www.springframework.org/schema/integration/ws/spring-integration-ws.xsd ([https](https://www.springframework.org/schema/integration/ws/spring-integration-ws.xsd) result 200).
* http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd with 12 occurrences migrated to:
  https://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd ([https](https://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd) result 200).
* http://www.springframework.org/schema/integration/xmpp/spring-integration-xmpp.xsd with 14 occurrences migrated to:
  https://www.springframework.org/schema/integration/xmpp/spring-integration-xmpp.xsd ([https](https://www.springframework.org/schema/integration/xmpp/spring-integration-xmpp.xsd) result 200).
* http://www.springframework.org/schema/integration/zookeeper/spring-integration-zookeeper.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/zookeeper/spring-integration-zookeeper.xsd ([https](https://www.springframework.org/schema/integration/zookeeper/spring-integration-zookeeper.xsd) result 200).
* http://www.springframework.org/schema/jdbc/spring-jdbc.xsd with 52 occurrences migrated to:
  https://www.springframework.org/schema/jdbc/spring-jdbc.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc.xsd) result 200).
* http://www.springframework.org/schema/jms/spring-jms.xsd with 7 occurrences migrated to:
  https://www.springframework.org/schema/jms/spring-jms.xsd ([https](https://www.springframework.org/schema/jms/spring-jms.xsd) result 200).
* http://www.springframework.org/schema/lang/spring-lang.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/lang/spring-lang.xsd ([https](https://www.springframework.org/schema/lang/spring-lang.xsd) result 200).
* http://www.springframework.org/schema/mvc/spring-mvc.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/mvc/spring-mvc.xsd ([https](https://www.springframework.org/schema/mvc/spring-mvc.xsd) result 200).
* http://www.springframework.org/schema/rabbit/spring-rabbit.xsd with 9 occurrences migrated to:
  https://www.springframework.org/schema/rabbit/spring-rabbit.xsd ([https](https://www.springframework.org/schema/rabbit/spring-rabbit.xsd) result 200).
* http://www.springframework.org/schema/security/spring-security.xsd with 2 occurrences migrated to:
  https://www.springframework.org/schema/security/spring-security.xsd ([https](https://www.springframework.org/schema/security/spring-security.xsd) result 200).
* http://www.springframework.org/schema/task/spring-task.xsd with 44 occurrences migrated to:
  https://www.springframework.org/schema/task/spring-task.xsd ([https](https://www.springframework.org/schema/task/spring-task.xsd) result 200).
* http://www.springframework.org/schema/tool/spring-tool.xsd with 4 occurrences migrated to:
  https://www.springframework.org/schema/tool/spring-tool.xsd ([https](https://www.springframework.org/schema/tool/spring-tool.xsd) result 200).
* http://www.springframework.org/schema/tx/spring-tx.xsd with 14 occurrences migrated to:
  https://www.springframework.org/schema/tx/spring-tx.xsd ([https](https://www.springframework.org/schema/tx/spring-tx.xsd) result 200).
* http://www.springframework.org/schema/util/spring-util.xsd with 92 occurrences migrated to:
  https://www.springframework.org/schema/util/spring-util.xsd ([https](https://www.springframework.org/schema/util/spring-util.xsd) result 200).
* http://www.springframework.org/schema/websocket/spring-websocket.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/websocket/spring-websocket.xsd ([https](https://www.springframework.org/schema/websocket/spring-websocket.xsd) result 200).
* http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd with 1 occurrences migrated to:
  https://java.sun.com/xml/ns/persistence/persistence_2_0.xsd ([https](https://java.sun.com/xml/ns/persistence/persistence_2_0.xsd) result 302).

# Ignored
These URLs were intentionally ignored.

* http://java.sun.com/xml/ns/persistence with 2 occurrences
* http://localhost with 1 occurrences
* http://localhost/ with 1 occurrences
* http://localhost/test1 with 25 occurrences
* http://localhost/test1/%2f with 1 occurrences
* http://localhost/test2 with 2 occurrences
* http://localhost/test2/ with 1 occurrences
* http://localhost:18080/it/ with 3 occurrences
* http://localhost:51235/%2f/testApps?param= with 1 occurrences
* http://test with 1 occurrences
* http://test.example.org with 1 occurrences
* http://test.org with 1 occurrences
* http://testServer/test with 1 occurrences
* http://testServer/testmp with 1 occurrences
* http://www.springframework.org/schema/aop with 25 occurrences
* http://www.springframework.org/schema/beans with 1633 occurrences
* http://www.springframework.org/schema/c with 1 occurrences
* http://www.springframework.org/schema/context with 244 occurrences
* http://www.springframework.org/schema/data/jpa with 3 occurrences
* http://www.springframework.org/schema/data/mongo with 36 occurrences
* http://www.springframework.org/schema/geode with 8 occurrences
* http://www.springframework.org/schema/integration with 1465 occurrences
* http://www.springframework.org/schema/integration/amqp with 28 occurrences
* http://www.springframework.org/schema/integration/event with 8 occurrences
* http://www.springframework.org/schema/integration/feed with 8 occurrences
* http://www.springframework.org/schema/integration/file with 54 occurrences
* http://www.springframework.org/schema/integration/ftp with 30 occurrences
* http://www.springframework.org/schema/integration/gemfire with 12 occurrences
* http://www.springframework.org/schema/integration/groovy with 27 occurrences
* http://www.springframework.org/schema/integration/http with 36 occurrences
* http://www.springframework.org/schema/integration/ip with 54 occurrences
* http://www.springframework.org/schema/integration/jdbc with 94 occurrences
* http://www.springframework.org/schema/integration/jms with 186 occurrences
* http://www.springframework.org/schema/integration/jmx with 64 occurrences
* http://www.springframework.org/schema/integration/jpa with 22 occurrences
* http://www.springframework.org/schema/integration/jsr223 with 2 occurrences
* http://www.springframework.org/schema/integration/mail with 36 occurrences
* http://www.springframework.org/schema/integration/mongodb with 34 occurrences
* http://www.springframework.org/schema/integration/mqtt with 8 occurrences
* http://www.springframework.org/schema/integration/redis with 34 occurrences
* http://www.springframework.org/schema/integration/rmi with 8 occurrences
* http://www.springframework.org/schema/integration/scripting with 28 occurrences
* http://www.springframework.org/schema/integration/security with 6 occurrences
* http://www.springframework.org/schema/integration/sftp with 36 occurrences
* http://www.springframework.org/schema/integration/stomp with 2 occurrences
* http://www.springframework.org/schema/integration/stream with 34 occurrences
* http://www.springframework.org/schema/integration/syslog with 10 occurrences
* http://www.springframework.org/schema/integration/webflux with 8 occurrences
* http://www.springframework.org/schema/integration/websocket with 2 occurrences
* http://www.springframework.org/schema/integration/ws with 22 occurrences
* http://www.springframework.org/schema/integration/xml with 24 occurrences
* http://www.springframework.org/schema/integration/xmpp with 28 occurrences
* http://www.springframework.org/schema/integration/zookeeper with 2 occurrences
* http://www.springframework.org/schema/jdbc with 104 occurrences
* http://www.springframework.org/schema/jms with 13 occurrences
* http://www.springframework.org/schema/lang with 8 occurrences
* http://www.springframework.org/schema/mvc with 2 occurrences
* http://www.springframework.org/schema/p with 19 occurrences
* http://www.springframework.org/schema/rabbit with 18 occurrences
* http://www.springframework.org/schema/security with 4 occurrences
* http://www.springframework.org/schema/task with 88 occurrences
* http://www.springframework.org/schema/tool with 8 occurrences
* http://www.springframework.org/schema/tx with 28 occurrences
* http://www.springframework.org/schema/util with 184 occurrences
* http://www.springframework.org/schema/websocket with 2 occurrences
* http://www.w3.org/1999/xhtml with 1 occurrences
* http://www.w3.org/2001/XMLSchema with 1 occurrences
* http://www.w3.org/2001/XMLSchema-instance with 814 occurrences
* http://www.w3.org/2005/Atom with 1 occurrences

* Use the latest Checkstyle DTDs with their HTTPS variants"
d21e8f03499c93939b0a618ce96a026eef940ca2,2019-03-21 19:22:26-04:00,"URL Cleanup

This commit updates URLs to prefer the https protocol.
Redirects are not followed to avoid accidentally expanding intentionally
shortened URLs (i.e. if using a URL shortener).

# Fixed URLs

## Fixed Success
These URLs were switched to an https URL with a 2xx status.
While the status was successful, your review is still recommended.

* [ ] http://www.apache.org/licenses/ with 1 occurrences migrated to:
  https://www.apache.org/licenses/ ([https](https://www.apache.org/licenses/) result 200).
* [ ] http://www.apache.org/licenses/LICENSE-2.0 with 2638 occurrences migrated to:
  https://www.apache.org/licenses/LICENSE-2.0 ([https](https://www.apache.org/licenses/LICENSE-2.0) result 200)."
572dc0ec1404ed979138bf91d17c8bb83feaeb91,2019-03-27 21:18:33-04:00,"Short-circuit methods for lambdas from annotation (#2823)

* Short-circuit methods for lambdas from annotation

When we have a `@ServiceActivator` or any other messaging annotations
on `Function` or `Consumer` `@Bean`s, there is a restriction when we
can't use lambdas because of target method argument type erasure in Java.

* Use a `@Bean` method return to determine the target function argument
type and wrap the call into the `LambdaMessageProcessor`.

In this case we call the target method directly after possible payload
conversion according expected generic type for `Function` or `Consumer`.
There is just no reason to go a `MessagingMethodInvokerHelper` route
for this lambda variants

* Apply the short-circuit algorithm for Kotlin lambdas as well
* Make some refactoring and improvements to `ClassUtils`
if favor or similar API in the SF `ClassUtils`
* Fix `No beanFactory` warning for the `ExpressionCommandMessageProcessor`

* * Resolve Checkstyle violations

* * Fix `resolveAttributeToBoolean()` argument name to be generic
* Fix typo in the exception message for `IntegrationFlowDefinition.get()`

* * Revert `ClassUtils.resolvePrimitiveType()` logic: an existing in SF
does exactly opposite one"
23a73fab87565e1d2634e994441220dffae840f9,2019-04-01 15:29:39-04:00,"GH-2873: Preserve mapping order in the router (#2877)

* GH-2873: Preserve mapping order in the router

Fixes https://github.com/spring-projects/spring-integration/issues/2873

Sometime it is important to map to most specific exception instead of
its super class.

* Use `LinkedHashMap` for mapping keys in the
`ErrorMessageExceptionTypeRouter`, as well as in its
`AbstractMappingMessageRouter` superclass.
Since we don't do that internal map modification, there is no reason to
worry about concurrent access: we just replace an internal instance
atomically with a new `LinkedHashMap` every time we modify a mapping
for router

**Cherry-pick to 5.1.x**

* * Fix `RouterSpec.RouterMappingProvider` to `LinkedHashMap` as well

* * Fix `RouterTests` for proper mapping order
* Polishing for `AbstractMappingMessageRouter` hierarchy, so we don't
use `protected channelMappings` field access any more"
2e2b49a22faef6f9bd4ab00ac8e56bc95b60cda5,2019-04-02 13:08:57-04:00,"GH-2872: Parse all the multi-part files (#2878)

* GH-2872: Parse all the multi-part files

Fixes https://github.com/spring-projects/spring-integration/issues/2872

The same HTML form entry may have several files in the multi-part request.
Parse all of them in the `MultipartAwareFormHttpMessageConverter.java`
 and re-map to the result `MultiValueMap`

**Cherry-pick to 5.1.x**

* * Add test for multi-part files"
cff67ccdb4f091fbf9fb400e5a63a96eb1fcecf0,2019-04-05 13:48:47-04:00,"Fix complexity for DefaultHttpHeaderMapper (#2881)

* Fix complexity for DefaultHttpHeaderMapper

* Deprecate `DefaultHttpHeaderMapper` constants which are fully
Spring Web `HttpHeaders` constants
* Introduce lowercase constants for `getHttpHeader()` switch
* Reuse `HttpHeaders` API as much as possible
* Simplify logic in some methods to break them to smaller methods

* * Remove Java Streams from critical paths
* Rework `setHttpHeader()` for `switch`

* * Use `ObjectUtils.toObjectArray()` to simplify complexity

* * Fix complexity in `setAccept()`, `setAcceptCharset()`, `setAllow()`
& `setIfNoneMatch()` using newly extracted `valueToCollection()`"
818be4cbe80688639ebcac1c06e155d67d0e8829,2019-04-08 16:42:57-04:00,"GH-2765: Add discardChannel for splitter (#2883)

* GH-2765: Add discardChannel for splitter

Fixes https://github.com/spring-projects/spring-integration/issues/2765

When encountering empty collections, splitter should be able to send
the result to a discard channel.
Currently, when encountering an empty collection,
the splitter ends the flow.
Some use-cases may rely on a custom split function which may returns
empty collections.
These use-cases should be able to define a discard channel
so they can proceed with a possible compensation flow.

* Add `discardChannel` option to the `AbstractMessageSplitter`
* Delegate `discardChannel` population from everywhere it is possible:
DSL, XML, `AbstractMessageSplitter` extension like `FileSplitter` etc.
* Fix `FileSplitterTests` for broken charset
* Document new feature; fix some typos and out-dated code sample

* * Fix `SplitterFactoryBean` for NPE on the `discardChannelName`
propagation

* * Check `this.discardChannel` first
* `Assert.state()` in `doInit()` for mutual exclusiveness"
c05876e27322063ac28c42541ed96b13f537dd6e,2019-04-09 12:17:42-04:00,"INT-4299: Add AbstractMailReceiver.autoCloseFolder (#2887)

* INT-4299: Add AbstractMailReceiver.autoCloseFolder

JIRA: https://jira.spring.io/browse/INT-4299

* Optimize `AbstractMessageSource` do not evaluate headers when polling
result is `null`
* Optimize `MailReceivingMessageSource` do not wrap polling result to
the message: the `AbstractMessageSource` will do that later

* * Fix JavaDocs
* Document `autoCloseFolder` option"
bf21128e42cf1c4e6a59948d0dd110478a8244a0,2019-04-12 12:57:57-04:00,"GH-2792: HEnrichSpec: Add hooks for common headers (#2895)

* GH-2792: HEnrichSpec: Add hooks for common headers

Fixes https://github.com/spring-projects/spring-integration/issues/2792

* * Add more convenient hooks for common headers

* * Fixed copy/paste artefact"
38fc85a525b11f8943e92f739059678ed3ab33bc,2019-04-15 11:41:16-04:00,"Optimize DefaultSftpSessionFactory (#2896)

* Optimize DefaultSftpSessionFactory

Related to https://build.spring.io/browse/INT-MASTERSPRING40-677/

Doesn't look like `DefaultSftpSessionFactory.getSession()` needs
locking around `sharedJschSession`

* change the logic in the `getSession()` to store a `sharedJschSession`
into the local variable and if it is `null` or not connected, create a
new `JSchSessionWrapper`, connect it and store to the `sharedJschSession`
back into the `sharedJschSession` property if `this.isSharedSession`.
This way we always deal with `sharedJschSession` anyway if it is valid
or create a new fresh one if that is invalid.
Without locking we always get an actual state of the `sharedJschSession`
and don't fall into the race condition when `sharedJschSession` is invalid,
but we can't connect to the SFTP channel from the `sftpSession.connect()`

* * Wrap `sharedJschSession` initialization to the lock

* * Store `sharedJschSession` back when it is really fresh and while the lock"
7dff1d5416400da422c94507eec1a9a31b501c07,2019-04-19 12:29:08-04:00,"Add support for Kotlin JSR223 scripts (#2898)

* Add support for Kotlin JSR223 scripts

* Add required Kotlin dependencies into the `spring-integration-scripting`
module
* Introduce `KotlinScriptExecutor` to interact with the
`KotlinJsr223JvmLocalScriptEngineFactory` directly since there is no
`META-INF/services/javax.script.ScriptEngineFactory` file in the Kotlin
* Also set an `idea.use.native.fs.for.win` system property to `false` in
this class to disable check for native support on Windows.
(Might be removed in future Kotlin versions)
* Move `ScriptParser.getLanguageFromFileExtension()` logic into the
`ScriptExecutorFactory.deriveLanguageFromFileExtension()` since the same
one must be applied in the `DslScriptExecutingMessageProcessor`, too.
* Modify tests to reflect Kotlin support
* Fix some test scripts to their official extensions

* * Add JavaDocs
* Polishing according Sonar objections"
89e11f2c464bddb689ba912c20e79fcecd556603,2019-04-25 14:07:56-04:00,"Add initial support for RSockets (#2902)

* Add initial support for RSockets

* Add `spring-integration-rsocket` module and respective dependencies
* Implement `RSocketOutboundGateway` based on the Spring Messaging
`RSocketRequester`.
This component supports dynamic RSocket properties via expressions
against request message.
to handle `Publisher` for requests, it must be present in the request
message `payload` instead of `FluxMessageChannel` upstream, since the
last one just flattens events to be handled in the `MessageHandler` one
by one.
The result `Mono` is subscribed downstream in the `FluxMessageChannel`
or directly by the `AbstractReplyProducingMessageHandler`.
If result is a `Flux` it is just wrapped into the `Mono` to be processed
downstream by end-user code.
The point is that these request/replies are volatile and live in the
particular context meanwhile a `FluxMessageChannel` is long living
publisher in the application context boundaries.
* The `RSocketOutboundGatewayIntegrationTests` is an adapted copy of
`RSocketClientToServerIntegrationTests` from Spring Messaging
* Add `doOnError()` into the `Flux` created in the
`AbstractMessageProducingHandler` for `Publisher` replies

* * Use singular for the `RSocket` term
* Use no-op `Consumer` for the `strategiesConfigurer` and
`factoryConfigurer` in the `RSocketOutboundGateway` and also
`Assert.notNull()` in the appropriate setters to avoid null check during
`RSocketRequester.builder()` initialization
* Use `TcpServer.create().port(0)` in the
`RSocketOutboundGatewayIntegrationTests` to allow to select free OS port
and bind into it.
The selected port is used later for client configuration in the
`RSocketOutboundGateway` bean definition

* * Change `RSocketOutboundGatewayIntegrationTests.PORT` to lower case"
2ebbdde06dedcc9aef909648697648187db76a50,2019-04-25 14:10:16-04:00,"GH-2901: Add missed delegates into JmsInGateway (#2903)

Fixes https://github.com/spring-projects/spring-integration/issues/2901

**Cherry-pick to 5.1.x**"
e26c61d7f4c2fc7ae29eb36daac166f565dc23d5,2019-04-25 15:58:06-04:00,"Add missed options into WebFluxMessageHandlerSpec (#2904)

The recently introduced `setPublisherElementType()` and
`setPublisherElementTypeExpression()` in the
`WebFluxRequestExecutingMessageHandler` are missed in the
`WebFluxMessageHandlerSpec` as delegation options

* Add `@Nullable` for `WebClient` ctor arg in the
`WebFluxRequestExecutingMessageHandler`"
9780a6c893251dc073f5ef7a8ff6bc5441f0f55f,2019-05-01 14:11:19-04:00,"Use MergedAnnotations in MethodAnnPublisher (#2914)

* For better performance and consistency use a `MergedAnnotations` in
the `MethodAnnotationPublisherMetadataSource` instead of
`AnnotatedElementUtils`
* Remove deprecated API from the `PublisherMetadataSource` hierarchy"
444cd1e8df1be5945c22d7877dd4b492a3db4e17,2019-05-03 10:33:06-04:00,"Move SF dependencies to the latest BUILD-SNAPSHOT (#2921)

* Move SF dependencies to the latest BUILD-SNAPSHOT

To avoid class loader issues it is better to align Spring Data
dependencies with SF version we use explicitly.
This way we don't have a `ClassLoader` issue when a newly introduced
`TransactionManager` might not be visible from the previous versions

* Fix code style warnings in the `TransactionSynchronizationFactoryBean`
* Use `JavaUtils` in the `TransactionSynchronizationFactoryBean` to
decrease code complexity

* * Fix CQ Gemfire tests for upgrades compatibility"
36e7041c2688cce70c7037b51be446ddcaa38a1d,2019-05-10 17:20:19-04:00,"Add `RSocketInboundGateway`; refactoring (#2923)

* Add `RSocketInboundGateway`; refactoring

* Extract an `AbstractRSocketConnector` for common client and server connectors logic
* Introduce an `IntegrationRSocketAcceptor` and `IntegrationRSocket` for the
mapping and handling logic of RSockets and messages in between
* Introduce an `IntegrationRSocketEndpoint` marker interface for Inbound Gateway mappings
* Add `RSocketInboundGateway` implementation, which is called from the
`IntegrationRSocketAcceptor` by the `IntegrationRSocketEndpoint` mapping
* Add `RSocketConnectedEvent` to emit when the client is connected to the server.
It does not make sense in Spring Integration to delegate such a logic into the
`RSocketInboundGateway`

* * Add `ServerRSocketConnector` to represent an RSocket server and
container for connected `RSocketRequester`s from clients
* Extract `accept(ConnectionSetupPayload setupPayload, RSocket sendingRSocket)`
server logic into an internal `ServerRSocketAcceptor` extension for the
`IntegrationRSocketAcceptor`
* Address PR comments:
 - `RSocketConnectedEvent.toString()`
 - `ApplicationEventPublisherAware` into the `ServerRSocketConnector`
 - Log RSocket connection if no `this.applicationEventPublisher`
* Remove `handleConnectionSetupPayload()` from the `IntegrationRSocket`
since it is not delegated to the target handler
* Provide reasonable default `RSocketStrategies` for the
`AbstractRSocketConnector` and `RSocketInboundGateway`
* Add initial `RSocketInboundGatewayIntegrationTests`

* * Don't use `BytyBuffer` in the `RSocketConnectedEvent.toString()`
* Always `payload.retain()` when we convert `Payload` to `DataBuffer`
* Fix `IntegrationRSocketAcceptor.detectEndpoints()` stream logic
to really iterate over all the `IntegrationRSocketEndpoint` beans
* Fix test to use an explicit `ClientConfig` class for the
`@SpringJUnitConfig`: looks like JUnit 5 is OK to scan for `package
protected` classes as well
* Add request/reply tests into the `RSocketInboundGatewayIntegrationTests`
for both server and client sides

* * Remove `DataBuffer` from `RSocketConnectedEvent.toString()`

* * Fix Checkstyle violation in the RSocketInboundGatewayIntegrationTests"
30750f53b7fb1a36045a2c404aae672cccc00099,2019-05-12 11:25:59-04:00,"Polishing for RSocket channel adapter (#2928)

* Polishing for RSocket channel adapter

* Add JavaDocs
* Remove unused code

* * Fix Sonar smells"
374b4b70f1f1260125103b6651caade2bea21132,2019-05-30 14:10:00-04:00,"GH-2880: Handle `Pausable` in Control Bus (#2940)

* GH-2880: Handle `Pausable` in Control Bus

Fixes https://github.com/spring-projects/spring-integration/issues/2880

* Refactor `ControlBusMethodFilter` to handle `Pausable` managed operations
* Optimize and internal `ControlBusMethodFilter.filter()` logic to rely
on the `MergedAnnotations`
* Modify `EnableIntegrationTests` to test new functionality and document
the feature

* * `ControlBusMethodFilter` to deal with plain `Lifecycle` impls as well"
d79c06a9870cbe1b4fc19917511be96622c487bd,2019-06-19 16:14:11-04:00,"GH-2967: Fix ScatterGatherH for headers copy (#2968)

* GH-2967: Fix ScatterGatherH for headers copy

Fixes https://github.com/spring-projects/spring-integration/issues/2967

The `ChannelInterceptor` is added into the `this.gatherChannel` on each
request message making a subsequent requests for scatter-gather as
halting on reply.

* Add an interceptor into an injected `this.gatherChannel` only once
during `ScatterGatherHandler` initialization
* Introduce `ORIGINAL_REPLY_CHANNEL` and `ORIGINAL_ERROR_CHANNEL`
headers to carry a request reply and error channels from headers
* Populate `REPLY_CHANNEL` and `ERROR_CHANNEL` headers back before
sending scattering replies into gatherer
* Transfer a `GATHER_RESULT_CHANNEL` header now directly from the scatter
message to make it available in the reply from the gatherer
* Add note about those headers in the `scatter-gather.adoc`
* Modify `ScatterGatherTests` to be sure that `ScatterGatherHandler`
works for several requests

**Cherry-pick to 5.1.x**

* * Fix language in doc"
bda52217206a7809d2fb41b0c9fd7fd02089b347,2019-06-21 16:50:38-04:00,"Fix `SmartLifecycle.stop(Runnable)` usage (#2973)

* Fix `SmartLifecycle.stop(Runnable)` usage

We always have to call `callback` in the `SmartLifecycle.stop(Runnable)`
implementation independently of component state
* Fix `StandardIntegrationFlow.stop(Runnable)` for a logic when we
don't have any `this.lifecycles`
* Remove those `stop(Runnable)` which are fully equivalent of the
`default` on in the `SmartLifecycle`
* Some other simple polishing for the affected classes, e.g.
`isSingleton()` is `default` with `true` in the `InitializingBean`

**Cherry-pick to 5.1.x**

* * Fix checkstyle violation"
59cdc4ddaec15843f4dc332dc9c434c61d9ef471,2019-06-26 11:11:33-04:00,"Add validation support into WebFlux Inbound (#2977)

* Add validation support into WebFlux Inbound

See https://stackoverflow.com/questions/56729517/spring-integration-webflux-validate-input-json-body

* Introduce a `WebFluxInboundEndpoint.validator` option to validate
a request payload after conversion HTTP request into a `Publisher`
* Expose a `WebFluxInboundEndpointSpec.validator()` option
* Introduce a `IntegrationWebExchangeBindException` to extend a
`WebExchangeBindException` for Spring Integration use-case.
such an exception is used in the `ResponseStatusExceptionHandler`
extensions, like one in Spring Boot for proper response rendering
* Test and document the solution

* * Remove unused imports from IntegrationWebExchangeBindException"
c18c2e21418557e9ea2f9158d87364fc22551b63,2019-06-27 09:47:45-04:00,"Add Validation to HTTP Inbound (#2978)

* Add Validation to HTTP Inbound

* Pull a validation functionality from `WebFluxInboundEndpoint` to its
super class `BaseHttpInboundEndpoint` making a validation available for
the `HttpRequestHandlingEndpointSupport` as well
* Do the same for the `validator()` option in DSL for the
`HttpInboundEndpointSupportSpec`
* Add `validator` XML attribute for both HTTP and WebFlux inbound
endpoint XSDs
* Test parsers for a new `validator` option
* Document validation in the `http.adoc`
* Apply some polishing in the `http.adoc`, as well as in the
`HttpRequestHandlingEndpointSupport` JavaDocs
* Clarify in `webflux.adoc` that validation is applied for the
`Publisher` items before the payload is finally built for the message to
send.
* Add WebFlux into the table of endpoints in the `endpoint-summary.adoc`

* * Remove unused imports
* Fix `SimpleMessageListenerContainerSpec` for deprecated `txSize` option"
c712416b63b8a7bfc579151b5f1eb65b3c85bbda,2019-07-17 15:11:10-04:00,"GH-2748: Add bean definition info into exceptions (#2986)

* GH-2748: Add bean definition info into exceptions

Fixes https://github.com/spring-projects/spring-integration/issues/2748

In many cases Spring Integration stack traces doesn't contain any
relations to end-user code.
Just because a target project code mostly contains only a configuration
for out-of-the-box components without any custom code.
When exception is thrown from such an out-of-the-box component, it is
hard from the stack trace to determine a configuration source for those
components.

* Add a logic into the `IntegrationObjectSupport` to obtain a its own
`BeanDefinition` from the `BeanFactory` to include a `resource` and
`source` (if any) into the `toString()` representation, as well as add
a new `getBeanDescription()` to get such an info at runtime
* The `toString()` is simply used by `this` reference in the message
for `MessagingException` thrown from the `IntegrationObjectSupport`
implementations
* Modify an exception message for the `MessageTransformingHandler` and
`MessageFilter` to make it based on `this`.
The `AbstractMessageHandler` already includes `this` into its exception
message
* Modify a `AbstractConsumerEndpointParser` and
`AbstractAmqpInboundAdapterParser` (as a sample) to include a `resource`
and `source` into a `MessageHandler` `BeanDefinition`.
* Include an `IntegrationFlow` `BeanDefinition` `resource`
(`@Configuration` class) and its bean method as a `source` into all
child beans declared during flow parsing in the `IntegrationFlowBeanPostProcessor`
* Add `IntegrationFlowRegistrationBuilder.setSource()` for manually
registered flows: there is no configuration parsing phase to extract
such an info from `BeanFactory`
* Propagate that `source` into all the child beans provided by the
`IntegrationFlow`
* Modify a `LambdaMessageProcessor` exception message to include a
method info in case of `InvocationTargetException`

* Do not cast explicitly for `ConfigurableListableBeanFactory` in the
`IntegrationObjectSupport` to avoid tests modifications for mocking
directly into `ConfigurableListableBeanFactory`.
Use `instanceof` instead in the `getBeanDescription()`

* * Fix Checkstyle issues

* * Fix `IntegrationGraphServer` and  `IntegrationMBeanExporter`
to rely on the `NamedComponent` for channel names instead of
always call `toString()` which is now much more than just a bean name
* Don't describe a `componentName` if it is the same as a `beanName`
* Check for parent `BeanDefinition` in the `IntegrationFlowBeanPostProcessor`
before calling its meta-info
* Fix tests according new `IntegrationObjectSupport.toString()` behavior"
084aaf7e57206c8a6f7df64c0166260a2b488578,2019-07-22 13:59:23-04:00,"GH-2988: Use `@Config(proxyBeanMethods=false)` (#2989)

* GH-2988: Use `@Config(proxyBeanMethods=false)`

Fixes https://github.com/spring-projects/spring-integration/issues/2988

For faster startup (and possibility to compile to native code with GraalVM)
use a `proxyBeanMethods = false` on all the `@Configuration` classes
in the Framework
* Provide some other code style polishing

* * Fix Checkstyle violation"
8bb0e194c0732da40a5a669ef0e9ee4deddbd719,2019-07-22 15:10:18-04:00,"Clear lock cache in NioFileLocker (#2998)

Fixes https://github.com/spring-projects/spring-integration/issues/2980"
42d8faf11e6dc7357d777b8eb025b16207e5cb9e,2019-07-22 15:12:28-04:00,"Upgrade dependencies, including Gradle (#2997)

* `exclude group: 'org.springframework'` from all non-core Spring
dependencies to avoid CLASSPATH conflicts
* Remove suppress from from some modules which don't report compilation
warnings any more
* Fix deprecation warnings reported after upgrades"
ef1d7be020841c6dd3f66f836ff697a2079ffdf0,2019-07-29 16:27:16-04:00,"Fix nullability issue in queuechannel (#3012)

* Added inherited @Nullable to QueueChannel.doReceive

* Minor refactoring"
a756e6334dcb442c90f6c1bdbd754c20293ef55b,2019-08-28 08:58:13-04:00,"GH-3043: Add FileHeaders.REMOTE_HOST header (#3044)

* GH-3043: Add FileHeaders.REMOTE_HOST header

Fixes https://github.com/spring-projects/spring-integration/issues/3043

* Populate a `FileHeaders.REMOTE_HOST` from the
`AbstractRemoteFileStreamingMessageSource` and ""get""-based commands
in the `AbstractRemoteFileOutboundGateway`
* Extract the value from the a `Session.getHost()` contract
* The `AbstractInboundFileSynchronizingMessageSource` cannot be
addressed with this because the real message is already based on the
locally stored file
* Adjust some affected tests according our code style requirements

* * Add remote file info support into `AbstractInboundFileSynchronizingMessageSource`
* Introduce a `MetadataStore` functionality into the `AbstractInboundFileSynchronizer`
to gather a remote file info an save it in the URI style against local file
* Retrieve such an info in the `AbstractInboundFileSynchronizingMessageSource`
during local file polling
* Introduce `protocol()` contract for the `AbstractInboundFileSynchronizer`
to build a proper URI in the metadata for external readers to distinguish
remote files properly
* Document the feature

* * Fix some typos in Docs

* * Rename property and header constant to the `HOST_PORT` pair
* Fix typos in Docs
* Add  `remote-file-metadata-store` and `metadata-store-prefix` into XSD
of (S)FTP Inbound Channel Adapters
* Add `remoteFileMetadataStore` and `metadataStorePrefix` options
into `RemoteFileInboundChannelAdapterSpec` for Java DSL"
6d0757a08a75828eea408e68a9284cebb6e602fd,2019-08-28 17:13:29-04:00,"Improve ImapIdleChannelAdapter (#3045)

* Improve ImapIdleChannelAdapter

* We should not destroy a `TaskExecutor` in the `stop()`, especially
when we are going to restart eventually.
Move that logic into `destroy()`
* we should not destroy `MailReceiver` in the `stop()`; we don't
reinstate it in the `start()`.
Move the logic into `destroy()`
* Wrap `ReceivingTask` and `IdleTask` into `isRunning()` condition to
avoid task executions when we are in stopped state
* Remove `ImapMailReceiverTests.testExecShutdown()` since it is not
relevant any more and doesn't reflect `mail` module requirements

* * Add `ImapMailReceiver.cancelPing()` hook
* Also close folder for each `stop()`, as well as in the `destroy()`"
29bebdba97fdf069e371a79d627de538831f9b42,2019-09-06 13:46:16-04:00,"GH-3047: Add GatewayProxySpec for Java DSL

Fixes https://github.com/spring-projects/spring-integration/issues/3047

* Improve `GatewayProxyFactoryBean` to determine the return type of the
method call from the interface generic types, when the `serviceInterface`
is a `java.util.function.Function`
* Propagate `MethodArgsHolder` as a `rootObject` for SpEL evaluations
* Deprecate `#gatewayMethod` and `#args` evaluation context variables
in favor of `MethodArgsHolder` as root object.
They will be removed in the future release and a single
`EvaluationContext` will be used for all the gateway expressions
* Introduce an
`IntegrationFlows.from(Class<?> serviceInterface, Consumer<GatewayProxySpec> endpointConfigurer)`
to allow to configure any valid gateway proxy options similar to what
we have with the `<gateway>` and `@MessagingGateway`.
This way we are very close to consistency between different approaches

* * Remove `default` prefix from `GatewayProxySpec` options
* Document the change"
c4aceb6bb5638b7a70a9d7d24713d1598e97e9bd,2019-09-26 15:08:58-04:00,"Hide `toReactivePublisher()` from lambdas (#3065)

* Hide `toReactivePublisher()` from lambdas

When an `IntegrationFlow` is declared via lambda, it is impossible
to materialize it as a `Publisher` since we lose a Lambda context and
finish with a `NoSuchBeanException` when we would like to inject that
`Publisher`

* Make `IntegrationFlowDefinition.toReactivePublisher()` as `protected`
and expose it on the `IntegrationFlowBuilder` level
* Use `Channels` as a singleton: no reason in overhead for its instances
* Some code style polishing for `IntegrationFlowDefinition`

* Restore `Channels.super()` call"
eeb951b0da785d984416beb31a8f6bad8fe8c9cb,2019-09-29 10:28:09-04:00,"Fix new Sonar Smells

* Change `whats-new.adoc#x5.2-behavior` to point for the whole
`5.1-to-5.2-Migration-Guide`"
911cdc86b5f1dd8a2f3a612cbca0192ed79ee0ee,2019-10-14 15:31:04-04:00,"Refinement for gateway Mono processing (#3075)

* Refinement for gateway Mono processing

* Introduce a `MessagingGatewaySupport.MonoReplyChannel` instead of
`FutureReplyChannel` for better on demand handling and reusing a
`Mono` returned from the target handler
* Refactor `GatewayProxyFactoryBean` to identify a target return type
(including generics for `Function`) during initialization
* Handle a `Mono` return type via
`MessagingGatewaySupport.sendAndReceiveMessageReactive()`
* Some `@Nullable` in the `GatewayProxyFactoryBean` and `ExpressionUtils`
* Add `MonoFunction` test-case into the `FunctionsTests.kt`

* * Deprecate `GatewayProxyFactoryBean.setServiceInterface()` in favor of
ctor initialization
* Fix `GatewayProxyFactoryBean.setServiceInterface()` usage in tests"
33667884a783ad6a194a1fd2e13a4feda5cf6023,2019-10-16 15:57:33-04:00,"GH-3079: Use getMostSpecificMethod for SpEL calls (#3082)

* GH-3079: Use getMostSpecificMethod for SpEL calls

Fixes https://github.com/spring-projects/spring-integration/issues/3079

It turns out that we need to use a *most specific* method for the target
to be called reflectively from the SpEL

NOTE: We drop a *Method not found* error in case of wrong method source
since now we find a right source via `ClassUtils.getMostSpecificMethod()`

**Cherry-pick to 5.1.x**

* * `@Ignore` `MethodInvokingMessageProcessorTests.testProcessMessageMethodNotFound()`
instead of removal"
c420c414d31b114dd7f89c32bc03d6d3caa6f0c4,2019-10-17 14:52:46-04:00,"GH-3076: NioFileLocker: add file existence check

Fixes spring-projects/spring-integration#3076

* Return `null` instead of throwing an exception

* Fix license header

* Add missing `@since`

* Avoid over-engineered test logic

* Fix code style

* Test non-existent file does not get created

* Fix: remove unused import"
375f3c13173a4e5880746bb49c250314a87b1804,2019-10-21 15:19:17-04:00,"Ensure that dynamic routes are included into graph (#3085)

* Ensure that dynamic routes are included into graph

Modify an `IntegrationGraphServerTests` to be sure that dynamic routes
are included into the graph (with links) after sending a message to the
router and rebuilding a graph

* * Fix test for the actual numbers to expect"
ca56a0eb80a00620857ca5e80dfcb553e3536967,2019-10-28 10:11:15-04:00,"Extract `BaseIntegrationFlowDefinition` (#3087)

* Extract `BaseIntegrationFlowDefinition`

Kotlin inline reified functions cannot override as syntax sugar generic
Java methods.

* Extract a `BaseIntegrationFlowDefinition` with strong typed methods,
plus those which doesn't have a syntax sugar variants
* Leave in the `IntegrationFlowDefinition` only those generic methods
which are just a syntax sugar without any types requirements

This way we can write Kotlin inline reified functions as an extension
 with the same names to make a Kotlin DSL much cleaner

* * Override methods in the IntegrationFlowDefinition for bytecode compatibility
* Extract `protected` getters and setters for `BaseIntegrationFlowDefinition`
properties to allow a proper extension
* Use those getters and setters in the code

* * Add // NOSONAR for overridden methods"
977997e3bf3c7382729a2483a7314ca536e1e7e4,2019-10-30 15:41:42-04:00,"GH-3090: Add `logout() to `FtpSession.close()` (#3094)

* GH-3090: Add `logout() to `FtpSession.close()`

Fixes https://github.com/spring-projects/spring-integration/issues/3090

Without `logout()` the FTP session is not closed at all,
but just the connection is closed.
Some FTP servers close those sessions eventually anyway, but some just
leak with resources.

**Cherry-pick to 5.1.x & 4.3.x**

* * Migrate `SessionFactoryTests` to JUnit 5"
6468ecc530873e0584699959992317e7166b637b,2019-10-31 16:25:40-04:00,"GH-3089: Add AmqpInGateway.replyHeadersMappedLast (#3091)

* GH-3089: Add AmqpInGateway.replyHeadersMappedLast

Fixes https://github.com/spring-projects/spring-integration/issues/3089

In some use-case we would like to control when headers from SI message
should be populated into an AMQP message.
One of the use-case is like a `SimpleMessageConverter` and its `plain/text`
for the String reply, meanwhile we know that this content is an
`application/json`.
So, with a new `replyHeadersMappedLast` we can override the mentioned
`content-type` header, populated by the `MessageConverter` with an
actual value from the message headers populated in the flow upstream

* Introduce an `AmqpInboundGateway.replyHeadersMappedLast`; expose it
on the DSL and XML level
* Use newly introduced `MappingUtils.mapReplyMessage()`
* Optimize `DefaultAmqpHeaderMapper` to not parse JSON headers at all
when `JsonHeaders.TYPE_ID` is already present (e.g. `MessageConverter`
result)
* Also skip `JsonHeaders` when we `populateUserDefinedHeader()`

**Cherry-pick to 5.1.x**

* * Fix language and package typos
* Add missed `@param` in JavaDoc of the `AmqpBaseInboundGatewaySpec.batchingStrategy()`
* Extract a `RabbitTemplate` `MessageConverter` to use for reply messages
conversion - pursue a backward compatibility"
36c9f72a9d3f0521cb74cfa1d0b2dfa8a5ab4e93,2019-11-01 14:49:29-04:00,"Use `EmitterProcessor` for Channels adaptation (#3100)

* Use `EmitterProcessor` for Channels adaptation

Related https://github.com/spring-cloud/spring-cloud-stream/issues/1835

To honor a back-pressure after `MessageChannel` adaptation it is better
to use an `EmitterProcessor.create(1)` instead of `Flux.create()`.
This way whenever an emitter buffer is full, we block upstream producer
and don't allow it to produce more messages

**Cherry-pick to 5.1.x**

* * Wrap every new subscription into a `Flux.defer()`
* Fix `ReactiveStreamsConsumerTests` to use a new `Subscription` after
each `stop()/start()` on the `ReactiveStreamsConsumer`

* * Remove unused imports"
ad97f818cfa6612ad8ccbd639817b6e3c7e92276,2019-11-01 15:28:06-04:00,"GH-3096: Skip RESOLVABLE_TYPE header in mapping (#3098)

* GH-3096: Skip RESOLVABLE_TYPE header in mapping

Fixes https://github.com/spring-projects/spring-integration/issues/3096

When we sent an AMQP message we should not map a
`JsonHeaders.RESOLVABLE_TYPE` header which is a `ResolvableType` and
isn not compatible after converting to string

Also improve `JsonToObjectTransformer` to ignore a
`JsonHeaders.RESOLVABLE_TYPE` when it is type of String

* * Fix `obtainResolvableTypeFromHeadersIfAny()` logic"
0f5bd4a40aabcd7c485207a58bcc51e5fd936c66,2019-11-14 16:27:59-05:00,"INT-3494: Resolve dir for writing as a Resource (#3109)

* INT-3494: Resolve dir for writing as a Resource

JIRA: https://jira.spring.io/browse/INT-3494

The expression for local directory can be resolved into a `Resource`
or resource location.
* Fix `ExpressionUtils.expressionToFile()` to support `Resource` and
also use `ResourceUtils.getFile(path)` when expression result is a string
* Modify tests to ensure that resource is resolved properly
* Upgrade affected tests to JUnit 5
* Mention an new functionality in docs

* * Improve Java doc for `ExpressionUtils.expressionToFile()`
* Finish the sentence in the `file.adoc`"
42b812b71159234e29ed63359198a7f31a53cdb5,2019-12-02 14:54:37-05:00,"Introduce RSocketInteractionModel (#3110)

* Introduce RSocketInteractionModel

* Deprecate `RSocketOutboundGateway.Command` in favor of newly introduced
top level `RSocketInteractionModel`
* Deprecate setter, DSL and XML configurations for the deprecated
`RSocketOutboundGateway.Command` in favor of newly introduced configurators
for the mentioned `RSocketInteractionModel`
* Add `IntegrationRSocketEndpoint.getInteractionModels()` contract for
inbound endpoints.
This way we can restrict mapped endpoints to the particular interaction
model(s)
* Add DSL and XML configuration for inbound interaction model option
* Document changes

* * Rebased into master; fix conflicts
* Fix consistency for `RetrieveSpec` in the `RSocketOutboundGateway`
and `rsocket.adoc`

* * Fix language in JavaDos and XSD attributes"
94e08169a5fe26f690e0fbac89a2f3f2719ef23e,2019-12-03 12:19:14-05:00,"Use EmitterProcessor in the FluxMessageChannel (#3104)

* Use EmitterProcessor in the FluxMessageChannel

The `EmitterProcessor` has a good logic to block upstream producer
when its downstream subscriber cannot keep up with overproducing.

* Rework `FluxMessageChannel` logic to rely on the `EmitterProcessor`
instead of `Flux.create()`
* Cancel `FluxMessageChannel` internal subscriptions in the `destroy()`
* Fix `ReactiveStreamsTests.testFluxTransform()` for the splitter's
delimiter
* Ensure in the `FluxMessageChannelTests.testFluxMessageChannel`
that we can have several concurrent subscribers to the
`FluxMessageChannel`

* * Use `flux.onComplete()` instead of iteration over subscribers
* Change `subscribers` list into just `AtomicInteger` count marker
* fix `DefaultSplitterTests` according a new logic in the `FluxMessageChannel`

* GH-3107: Add errorOnTimeout for TcpInboundGateway

Fixes https://github.com/spring-projects/spring-integration/issues/3107

The `MessagingGatewaySupport` has an `errorOnTimeout` option to throw
a `MessageTimeoutException` when downstream reply doesn't come back in
time for configured reply timeout

* Expose an `errorOnTimeout` option as a `TcpInboundGateway` ctor
property
* Add new factory methods into a `Tcp` factory for Java DSL
* Ensure a property works as expected in the `IpIntegrationTests`
* Document a new option

* * Use `delaySubscription()` for subscribing publishers in the `FluxMessageChannel`
to wait until this one subscribed.
* Use an `EmitterProcessor` to catch subscriptions and pass them as a
signal to delayed upstream publishers
* Fix  `FluxMessageChannelTests.testFluxMessageChannelCleanUp` to
verify an actual property instead of removed.
* Fix `RSocketOutboundGatewayIntegrationTests` for the proper subscription
into a `FluxMessageChannel` before actual interaction with an RSocket
gateway.
This should help us also to avoid some race conditions in the future

* Revert ""GH-3107: Add errorOnTimeout for TcpInboundGateway""

This reverts commit fa6119ddc4e423e8b15ca3fdc9fc4c79ea9d56af.

* * Refactor `FluxMessageChannel` to use `ReplayProcessor` for `subscribedSignal`.
This one is used `delaySubscription` for the upstream publishers
* Use a `AtomicBoolean` for subscription state since `doOnSubscribe()`
is called before `EmitterProcessor` adds subscribers for its `downstreams`
* Use `publishOn(Schedulers.boundedElastic())` for upstream publishers
to avoid blocking over there when our `EmitterProcessor` doesn't have
enough demand
* Refactor reactive tests to have a subscription into the `FluxMessageChannel`
earlier than emission happens for it

* * Use `Flux.subscribe(Consumer)` instead of `doOnNext(Consumer).subscribe()`

* * Emit `subscribedSignal` value after `.subscribe(subscriber)`
instead of `doOnSubscribe`
* Check for `this.processor.hasDownstreams()` before emitting such an event

* * Use `this.processor.hasDownstreams()` as a value to emit for `subscribedSignal`.
This way we are less vulnerable race conditions when subscribers are changed
actively"
1a9fb83199c5edb38c490b730c28d28ffc5cfeef,2019-12-26 13:04:17-05:00,"GH-3129: Use VARCHAR2 for non-fixed strings (#3133)

Fixes https://github.com/spring-projects/spring-integration/issues/3129

The `CHAR` type in Oracle is for fixed length values.
If the value is not of expected length it is padded with whitespaces.
This causes wrong assumptions when we perform queries against tables.

* Change the `CHAR` into a `VARCHAR2` in those tables for Oracle
where we don't have values with a fixed length.
In fact only `MESSAGE_ID` comes with always fixed length as `36`
because it is fully based on the `UUID`"
c08f4ec5c6403a64cd04d67ca840a3fd72916d65,2019-12-26 15:41:19-05:00,"GH-3118: MessagingGW: Don't proxy default methods (#3119)

* GH-3118: MessagingGW: Don't proxy default methods

Fixes https://github.com/spring-projects/spring-integration/issues/3118

The `GatewayProxyFactoryBean` proxies all the methods in the provided interface,
including `default` and `static`.
This is not what is expected from end-users.

* Proxy only `abstract` methods from the provided interface
* Introduce a `DefaultMethodInvokingMethodInterceptor` to call `default`
method on the interface using a `MethodHandle` approach for those methods
calling

* * Introduce a `proxyDefaultMethods` option to let to
restore a previous behavior
* Handle a new property from XML, annotations & DSL configurations
* Ensure that the property works in various tests
* Document the feature

* * Fix typo in the `build.gradle`"
fab774136858ec7c6677338d298cf7d94b9f9031,2019-12-26 15:41:19-05:00,"Shorten internal component names for graph (#3128)

* Shorten internal component names for graph

The long `IntegrationContextUtils.ERROR_LOGGER_BEAN_NAME` name
is used for `errorChannel` `LoggingHandler`'s endpoint.
It is too long for endpoint node in the graph meanwhile the
`errorChannel` is good everywhere

* Change an `IntegrationGraphServer` logic to shorten internal
component names before drawing a graph
* Introduce `IntegrationUtils.obtainComponentName()` for
shortening an internal name if any
* Use `IntegrationConfigUtils.BASE_PACKAGE` in the `IntegrationMBeanExporter`
instead of its own static property
* Remove `IntegrationConfigUtils.FACTORY_BEAN_OBJECT_TYPE` in favor
of introduced in SF `FactoryBean.OBJECT_TYPE_ATTRIBUTE`
* Rework affected test classes to JUnit 5
* Remove usage of deprecated options in the `@EnableIntegrationManagement`
* Document names shortening feature for graph

* * Improve `obtainComponentName()` function"
d13752b40bb9ef9e1aeeb2b3f026950eb1088ccb,2020-01-13 08:41:41-05:00,"Infrastructure for ReactiveMessageHandler (#3137)

* Infrastructure for ReactiveMessageHandler

We have now a `ReactiveMongoDbStoringMessageHandler` which implements
a `ReactiveMessageHandler`, but not a `MessageHandler` for possible
deferred subscriptions to the returned Reactor type

We don't have a proper application context processing for this
new type of message handlers

* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`
as possible types for handler
* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`
into a `MH` for synchronous calls in the regular consumer endpoints
* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular
endpoints and unwrap for `ReactiveStreamsConsumer`
* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target
reactive streams composition (`flatMap()` on the `RMH`)
* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`
in favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`
& `doOnNext()`
* Add an `onErrorContinue()` to handle per-message errors, but don't
cancel the whole source `Publisher`
* Use `Disposable` from the `subscribe()` to cancel in the `stop()`
- recommended way in Reactor
* Use `onErrorContinue()` in the `FluxMessageChannel` instead of
`try..catch` in the `doOnNext()` - for possible `onErrorStop()`
in the provided upstream `Publisher`
* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler
as well with wrapping into `ReactiveMessageHandlerAdapter` for return.
The `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter
for the `ReactiveStreamsConsumer` anyway
* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`
* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`
comes as a transitive dependency from many places

* * Fix conflicts after rebasing to master

* * Fix typo in warn message
* Change `Assert.state()` to `Assert.isTrue()`
for `ConsumerEndpointFactoryBean.setHandler()`

* * Fix `ConsumerEndpointFactoryBean` when reactive and no advice-chain
* Fix race condition in the
`ReactiveMongoDbStoringMessageHandlerTests.testReactiveMongoMessageHandlerFromApplicationContext()`

* * Handle `ReactiveMessageHandler` in Java DSL.
Essentially request a wrapping into `ReactiveMessageHandlerAdapter`.
Describe such a requirements in the `ReactiveMessageHandlerAdapter` JavaDocs
* Some Java DSL test polishing
* Add Java DSL for `ReactiveMongoDbStoringMessageHandler`
* Propagate missed `ApplicationContext` population into an internally
created `ReactiveMongoTemplate` in the `ReactiveMongoDbStoringMessageHandler`"
f93a740065c0847c4666b0b9b54d98217e4cc7f0,2020-01-14 16:17:40-05:00,"Messaging Annotations: process ReactiveMH (#3141)

* Messaging Annotations: process ReactiveMH

* Add support for `ReactiveMessageHandler` as a `@ServiceActivator` bean
* Wrap `ReactiveMessageHandler` in the `ReactiveMessageHandlerAdapter`
in the `ServiceActivatorAnnotationPostProcessor`
* Unwrap `ReactiveMessageHandlerAdapter` in the `AbstractMethodAnnotationPostProcessor`
for `ReactiveStreamsConsumer`

* * Add documentation for the `ReactiveMessageHandler`
& Reactive MongoDb channel adapters"
442c4fa4d5b5cd6579a8a6f3e3189dde87b8506a,2020-01-15 10:16:25-05:00,"GH-3111: Document @Lazy for messaging annotations (#3142)

* GH-3111: Document @Lazy for messaging annotations

Fixes https://github.com/spring-projects/spring-integration/issues/3111
Fixes https://github.com/spring-projects/spring-integration/issues/3130

* Fix some typos in docs
* Ensure in tests that announced `@Lazy` works as expected

* Doc Polishing

Co-authored-by: Gary Russell <grussell@pivotal.io>"
89d86e1904d7f3ef450c352afa520531615b2de8,2020-01-30 15:12:39-05:00,"GH-3154: Support `UriBuilderFactory.EncodingMode` (#3162)

* GH-3154: Support `UriBuilderFactory.EncodingMode`

Fixes https://github.com/spring-projects/spring-integration/issues/3154

Spring Framework now provides a `DefaultUriBuilderFactory.EncodingMode`
for encoding URIs in the `RestTemplate` before and after uri template
enrichment with uri variables.
Therefore `encodeUri` and manual uri variables substitution is not necessary
in Spring Integration HTTP components

* Deprecate `AbstractHttpRequestExecutingMessageHandler.encodeUri` in favor of
`DefaultUriBuilderFactory.EncodingMode` and respective configuration
on the `RestTemplate` in HTTP module and `WebClient` in WebFlux module

* * Really populate `uriFactory` into an internal `RestTemplate`
* Ensure in tests that `encoding-mode` is populated properly into an internal `RestTemplate`
* Clean up affected HTTP tests for AssertJ and JUnit 5

* * Clean up formatting

* * Apply fix for WebFlux module
* Add docs for new `encoding-mode` option

* * Remove unused import in the test"
2f4394d8b527b227d0ee2ff43de0ec2a50ffefef,2020-01-31 14:17:19-05:00,"Populate a JsonHeaders.RESOLVABLE_TYPE on reply (#3163)

* Populate a JsonHeaders.RESOLVABLE_TYPE on reply

Fixes https://github.com/spring-projects/spring-integration-samples/issues/277

In the `AbstractAmqpOutboundEndpoint` the `JsonHeaders.RESOLVABLE_TYPE`
from request message is copied to reply message making inconsistency downstream.
The `JsonToObjectTransformer` consults first a `JsonHeaders.RESOLVABLE_TYPE`
and deserialize payload to wrong type

* Fix `DefaultAmqpHeaderMapper` to populate a `JsonHeaders.RESOLVABLE_TYPE`
alongside with other `JsonHeaders` populated from the reply AMQP message.
This way a `JsonHeaders.RESOLVABLE_TYPE` from request message won't have effect
* To get access to classes, supply `AbstractHeaderMapper` with a bean factory `ClassLoader`
* Introduce a couple utility methods into `JsonHeaders` for building a `ResolvableType`

**Cherry-pick to 5.2.x**

* * Fix code formatting for arguments wrapping"
867a8cf108ff60028a303e92af3f95a937f4710c,2020-02-07 13:40:39-05:00,"GH-3155: Add support for Java DSL extensions (#3167)

* GH-3155: Add support for Java DSL extensions

Fixes https://github.com/spring-projects/spring-integration/issues/3155

Provide an `IntegrationFlowExtension` for possible custom EI-operators
in the target project use-cases.

* * Move `IntegrationFlowExtension` tests ot its own test class
* Make all the `IntegrationComponentSpec` ctors as `protected` for possible custom extensions
* Make some `BaseIntegrationFlowDefinition` methods and properties as `protected` to get them
access from the `IntegrationFlowExtension` implementations
* Document the feature

* * Fix language and typos in docs

* * Add `protected` to one more `GatewayEndpointSpec` ctor
* Add JavaDocs to `GatewayEndpointSpec` methods

* * Add `protected` to one more `JmsPollableMessageChannelSpec` ctor"
8fb201867c4f5c1053ad86793f83c4b32905f617,2020-02-20 09:34:00-05:00,"Fixed broken links in Whats New

* Links used `.adoc/section` instead of `.adoc#section` causing links to not work.

* Fixed English 'effects' to 'affects'."
b38c9e16e804d0dd920c01432de3f5d1a04ff1e7,2020-02-21 08:49:45-05:00,"GH-3182: Properly reset bean in the MockIntCtx (#3190)

* GH-3182: Properly reset bean in the MockIntCtx

Fixes https://github.com/spring-projects/spring-integration/issues/3182

The `MockIntegrationContext.resetBeans()` doesn't really restore a state
of endpoint beans: the handle/source is applied only after start for that endpoint

* Stop endpoints in the `MockIntegrationContext.resetBeans()` is they are running currently
* Start them back only if their `autoStartup == true`
* Clear only those beans which names are provided for the `resetBeans()`

**Cherry-pick to 5.2.x**

* * Ensure that only provided beans are reset"
50ac603d6c14563c1c46330be5915d32c8570fa5,2020-02-21 16:47:42-05:00,"GH-3180: Add encoding-mode to WS outbound gateway (#3191)

* GH-3180: Add encoding-mode to WS outbound gateway

Fixes https://github.com/spring-projects/spring-integration/issues/3180

* Deprecate `encode-uri` in favor of newly introduced `encoding-mode`
* Add new property to XML and DSL configurations
* Fix tests according a new behavior
* Document the feature
* Fix docs for deprecated `encode-uri`
* Mention also WS from `http.adoc`

* * Fix typos in docs"
87c8e47a886c74e7e7622f8dbee22fd30c0a8a55,2020-02-25 13:01:37-05:00,"GH-3192: pub-sub DSL for broker-backed channels (#3193)

* GH-3192: pub-sub DSL for broker-backed channels

Fixes https://github.com/spring-projects/spring-integration/issues/3192

* Introduce a `BroadcastCapableChannel` abstract to indicate those `SubscribableChannel`
implementations which can provide a pub-sub functionality
* Implement a `BroadcastCapableChannel` in broker-baked channels with pub-sub option
* Introduce a `BaseIntegrationFlowDefinition.publishSubscribeChannel()` based
on the `BroadcastCapableChannel` and `BroadcastPublishSubscribeSpec` to let to
configure sub-flow subscribers in fluent manner

* * Add some JavaDocs and document new feature

* * Show the channel bean definition in the doc
* Fix typo"
bd9563bd1e1061f8aa2eb081bf1793042edeb7a5,2020-02-27 17:30:49-05:00,"disconnectCompletionTimeout Polishing

- rename from `stopCompletionTimeout`
- add to outbound adapter
- use in both places we disconnect on inbound

**cherry-pick forward to 5.2.x, master**

# Conflicts:
#	spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java"
45a91b25de34cbaad79856888908cb7251544e38,2020-03-03 11:54:29-05:00,"Add Reactive TX Manager support (#3201)

* Add Reactive TX Manager support

* Change `TransactionInterceptorBuilder` and `TransactionHandleMessageAdvice` to reply
on a generic `TransactionManager`, so we can configure reactive one as well
* Change a `<transactional>` XML element to support a generic `TransactionManager` reference,
so we can configure reactive one as well
* Support `adviceChain` configuration for the `ReactiveMessageHandler` in the `ConsumerEndpointFactoryBean`
* Attemp to apply reactive transaction for the Reactive MongoDB channel adapter

* * Revert `MongoDbTests` change -
to support transactions we need the latest MongoDb server with replica enabled
* Document reactive transactions

* * Address PR reviews"
c84d2642941e8e14ad523b883535d7d6b9d79506,2020-03-05 13:37:54-05:00,"GH-3183: Add ReactiveRequestHandlerAdvice (#3197)

* GH-3183: Add ReactiveRequestHandlerAdvice

Fixes https://github.com/spring-projects/spring-integration/issues/3183

* Introduce a `ReactiveRequestHandlerAdvice` with a `BiFunction<Message<?>, Mono<?>, Publisher<?>>`
logic to apply a `Mono.transform()` operator for a returned from the handler `Mono` reply
* Fix `WebFluxRequestExecutingMessageHandler` to return a `Mono.then()` instead of an explicit subscription -
it happens downstream anyway during reply producing with a proper error handling, too
* Demonstrate `ReactiveRequestHandlerAdvice` in the `RSocketDslTests` - without `retry()` it fails
* Add `ConsumerEndpointSpec.customizeMonoReply()` for convenience
* Document `ReactiveRequestHandlerAdvice` feature

* * Fix language in docs"
c45cc66a8443e5951e91bc431cf3ac20ea5968bb,2020-03-10 16:07:01-04:00,"GH-3207: RSocket inbound: decode each flux item (#3208)

* GH-3207: RSocket inbound: decode each flux item

Fixes https://github.com/spring-projects/spring-integration/issues/3207

Previously an incoming RSocket Publisher has been decoded as a single unit
leading to extra work on the client side, e.g. a delimiter has to be provided
to treat each payload item as independent

* To have a consistency with Spring Messaging and its `PayloadMethodArgumentResolver`
change an `RSocketInboundGateway` to process inbound payloads as `Flux` and decode
each item independently.
* Change `RSocketDslTests` to remove delimiters and make it consistent with the regular
`RSocketRequester` client

* * Add `decodeFluxAsUnit` option into `RSocketInboundGateway`
* Document the change"
36f96ec2c6c3e0c30569d6c2c8facfeef5f4ca0a,2020-03-10 16:47:41-04:00,"Document Kotlin DSL (#3210)

* Document Kotlin DSL

* Remove unused imports in `FunctionsTests.kt`

* * Fix typos in Docs"
6b82681cc0b9408706fb933538219f3023e1f34f,2020-03-10 16:50:00-04:00,"GH-3211: Add DefSftpSF.setKnownHosts(Resource) (#3212)

* GH-3211: Add DefSftpSF.setKnownHosts(Resource)

Fixes https://github.com/spring-projects/spring-integration/issues/3211

* Add `DefaultSftpSessionFactory.setKnownHosts(Resource)` to
allow to configure externally any resource for file with known_hosts content
* Deprecate an existing method in favor of new one
* The new method makes it aligned with the `setPrivateKey(Resource)`
* Fix tests do not use a deprecated method any more

**Cherry-pick to 5.2.x**

* * Rename to `setKnownHostsResource()` to avoid XML parser confusion
* Change `sftp.adoc` to reflect a new property"
92421f75755991c7bf2b1773f53ed168731153df,2020-03-17 12:56:45-04:00,"Add Kotlin wrappers for router specs (#3218)

* Add Kotlin wrappers for router specs

To avoid casting and extra logic logic in the end-user code,
it is better to provide Kotlin-specific API to let end-users to
do whatever is really dictated by API and don't think about specific types to cast

* * Fix typos; code clean up"
b6bd83d548ced9b0fd51dc2334da320e2aabcc62,2020-03-25 13:56:37-04:00,"Fix deprecation for TX; fix JMS tests; Moore-SR6

* Upgrade to Spring Data Moore-SR6
* Fix `TransactionHandleMessageAdvice` and `TransactionInterceptorBuilder`
for deprecations in the `TransactionInterceptor`
* Fix `TransactionHandleMessageAdvice` and `TransactionInterceptorBuilder`
consumers to expose new `TransactionManager`-based options and
deprecate `PlatformTransactionManager`-based
* Fix failing JMS tests to reuse an ActiveMQ Connection Factory with a
`trustedPackaged(*)`

**Cherry-pick to master**

# Conflicts:
#	build.gradle
#	spring-integration-core/src/main/java/org/springframework/integration/dsl/ConsumerEndpointSpec.java
#	spring-integration-core/src/main/java/org/springframework/integration/dsl/PollerSpec.java
#	spring-integration-core/src/main/java/org/springframework/integration/transaction/TransactionHandleMessageAdvice.java
#	spring-integration-core/src/main/java/org/springframework/integration/transaction/TransactionInterceptorBuilder.java"
9c46b3420ea674899f032027f292aee526b16805,2020-03-27 15:42:24-04:00,"Fix JsonToObjectTransformer for ClassNotFoundEx (#3228)

* Fix JsonToObjectTransformer for ClassNotFoundEx

Related to https://github.com/spring-projects/spring-integration/issues/3223

The `JsonToObjectTransformer` consults `JsonHeaders` first and tries to build
a `ResolvableType` from other type headers which may be just a string identifications.
In this case a `ClassNotFoundException` could be thrown if a `ResolvableType` cannot
be build against non-class identificators

* Add `valueTypeExpression` option to the `JsonToObjectTransformer` to let to
build a `ResolvableType` using any possible custom logic, e.g. resolving
target classes from some registry using their ids from the mentioned headers

**Cherry-pick to 5.2.x**

* * Fix English language mistakes"
6d5690fd58a0dff89ba0349e2324bd98f82d8a39,2020-03-31 16:09:07-04:00,"GH-2996: Add Resource for remote file transfer (#3231)

* GH-2996: Add Resource for remote file transfer

Fixes https://github.com/spring-projects/spring-integration/issues/2996

* Fix `RemoteFileTemplate.send()` to support a `Resource` payload
for remote file transferring content
* Code style clean up for `RemoteFileTemplate`
* Remove `volatile` for configuration properties for better performance
* Change a `charset` to the `Charset` for only once conversion from string
during configuration phase
* Fix (S)FTP tests for new functionality
* Change affected tests to JUnit 5
* Document a new feature; mention all the supported types and `FileExistsMode` constants

* * Fix language in `whats-new.adoc`"
7433e41036416533ced1dc9ef3f24cbff976aa75,2020-04-01 11:06:54-04:00,"Add more Kotlin DSL for sub-flows (#3233)

* Add more Kotlin DSL for sub-flows

* Introduce `KotlinSplitterEndpointSpec`, `KotlinEnricherSpec` &
`KotlinFilterEndpointSpec` to avoid an explicit use of `IntegrationFlow` usage
from Kotlin DSL
* Fix `AbstractKotlinRouterSpec` to extend `ConsumerEndpointSpec` for access
to more endpoint options as it is with Java DSL for similar specs
* Introduce a `KotlinIntegrationFlowDefinition.publishSubscribe()`
for a `BroadcastCapableChannel` and `vararg` of `KotlinIntegrationFlowDefinition` builders.
This allows us to not introduce a `BroadcastPublishSubscribeSpec` wrapper for Kotlin
and let us to remove `publishSubscribeChannel()` DSL methods for `PublishSubscribeSpec`
since it is covered with the `publishSubscribe(PublishSubscribeChannel())` and
respective set of sub-flows in Kotlin DSL as subscribers
* Use new Kotlin specs in the `KotlinIntegrationFlowDefinition` instead of their
Java variants

* * Mention `kotlin-dsl.adoc` in the ToC"
76e79012fe5305a75a078dae0440b13dabc2e0ea,2020-04-01 11:10:33-04:00,"GH-3219: Add `HandleMessageAdviceAdapter` (#3234)

* GH-3219: Add `HandleMessageAdviceAdapter`

Fixes https://github.com/spring-projects/spring-integration/issues/3219

* * Fix language in doc

Co-Authored-By: Gary Russell <grussell@pivotal.io>

Co-authored-by: Gary Russell <grussell@pivotal.io>"
7d7c273515122c77c13fc17bbab207f0da98ac62,2020-04-06 18:12:36-04:00,"GH-3241: MetadataStoreSelector - compare old/new (#3242)

Resolves: https://github.com/spring-projects/spring-integration/issues/3241

 * Docs and XML namespace support."
b75f1bd0da83b976accce993f3d56b3104396422,2020-04-14 15:26:14-04:00,"GH-3247: Fix `SftpSession.exists` for error code (#3248)

* GH-3247: Fix `SftpSession.exists` for error code

Fixes https://github.com/spring-projects/spring-integration/issues/3247

When there is no path on the SFTP server, a `ChannelSftp.SSH_FX_NO_SUCH_FILE`
error is returned in the thrown `SftpException`.

* Fix `SftpSession.exists()` to check for the `SSH_FX_NO_SUCH_FILE` to
return `false` and re-throw an exception otherwise
* Add mock test for `SftpSession.exists()`
* Add `org.mockito.AdditionalMatchers` to `checkstyle.xml` exclusions

**Cherry-pick to 5.2.x & 5.1.x**

* * Add exists tests against Mina embedded server"
02407f7dff320f3278c65864ca77e55fdb02d9c7,2020-04-23 15:28:16-04:00,"Add `ReactiveMessageSourceProducer` (#3254)

* Add `ReactiveMessageSourceProducer`

The `ReactiveMessageSourceProducer` wraps a provided `MessageSource`
into a `Flux` for subscription in the `subscribeToPublisher(Publisher<? extends Message<?>>)`
to make a source polling feature fully based on a reactive, on demand solution

* Introduce a `IntegrationReactiveUtils` replacing existing `MessageChannelReactiveUtils`
with more functionality
* Replace a deprecated `MessageChannelReactiveUtils` with a new `IntegrationReactiveUtils`
* Test and document the feature

* * Fix Docs typos

* * Remove unused imports from `MessageChannelReactiveUtils`

* * Fix JavaDoc copy/paste artifact"
620b9bf52da619a0cb7b49a371faee7b62a1d5e5,2020-04-27 12:37:53-04:00,"Upgrade to latest version of Asciidoctor

Upgrade to latest version of Asciidoctor because we were several
versions behind and were steadily incurring more technical debt.

* Replace project-version attribute in Asciidoctor

I had removed the project-version attribute, but the docs use it all
over, so I put it back.

* Removed unneeded repositories

It turns out that those repositories are not needed.

A cross-reference was incorrectly formatted (missing the # character)."
cfd03f89a0c81b00f8cd56582761e4dbdfc6d700,2020-04-27 15:42:45-04:00,"Use a SimpleJsonSerializer in the FileSplitter (#3262)

* Use a SimpleJsonSerializer in the FileSplitter

* To avoid extra dependency for Jackson when we
serialize `FileSplitter.FileMarker` to JSON, use
a `SimpleJsonSerializer` instead.
* Fix `SimpleJsonSerializer` to escape a `\` symbol from property values
since it is used for quoting string values in the final JSON

* * Document the change"
2d9a5f60f48330e03e5a24ddc887560d6d02b514,2020-04-28 13:03:30-04:00,"Introduce a `ReceiveMessageAdvice` (#3265)

* Introduce a `ReceiveMessageAdvice`

* Deprecate an `AbstractMessageSourceAdvice` in favor of
`default` method in the `MessageSourceMutator`
* Move a `applyReceiveOnlyAdviceChain()` logic into the `AbstractPollingEndpoint`:
now both `PollingConsumer` and `SourcePollingChannelAdapter` can use
`ReceiveMessageAdvice`
* Introduce a `SimpleActiveIdleReceiveMessageAdvice` based already
on the `ReceiveMessageAdvice` and deprecate a `SimpleActiveIdleMessageSourceAdvice`
which is fully replaceable with newly introduced `SimpleActiveIdleReceiveMessageAdvice`
* Add `@SuppressWarnings(""deprecation"")` for those out-of-the-box `ReceiveMessageAdvice`
implementation which still use an `AbstractMessageSourceAdvice` for
backward compatibility
* Document a new feature and give the `MessageSourceMutator` a new meaning

* * Fix language in the `polling-consumer.adoc`"
665f6bfb69eb811318c73137fa3cf22cbec80437,2020-05-20 14:45:45-04:00,"GH-3282: Fix JdbcMetadataStore for DuplicateKeyEx (#3285)

* GH-3282: Fix JdbcMetadataStore for DuplicateKeyEx

Fixes: https://github.com/spring-projects/spring-integration/issues/3282

The `INSERT INTO ... SELECT ... FROM ... HAVING` may fail with
`DuplicateKeyException` in between transactions.
* Catch `DuplicateKeyException` from in the `tryToPutIfAbsent()`
and return `0` as a fact of not inserted to let other logic to work
as expected.

There is no test coverage for this since it is almost impossible to
reproduce such a race condition on DB

**Cherry-pick to 5.3.x & 5.2.x**

* * Remove misleading message in the comment sentence"
38a6b8e8c73a53093d4302b29a8bbfb55b5a695c,2020-05-21 09:40:41-04:00,"GH-3286: Make FileTailingEvent#getMessage public

Fixes https://github.com/spring-projects/spring-integration/issues/3286

The `FileTailingEvent.getMessage()` is really meant to be as `public`

**Cherry-pick to 5.3.x, 5.2.x, 5.1.x & 4.3.x**"
b8e2dfe4e1d6882753dacfac599aa9adc87e8f67,2020-05-27 16:10:05-04:00,"GH-3280: NullChannel as reply for void gateways (#3292)

* GH-3280: NullChannel as reply for void gateways

Fixes https://github.com/spring-projects/spring-integration/issues/3280

To properly support a one-way gateway (`void` return type), it is
better to ignore any possible replies from downstream instead of
unexpected `no output-channel or replyChannel header available`
error

* Populate a `nullChannel` into a `replyChannel` header
for `void` gateway methods when `replyChannel` is not set explicitly
* Remove redundant `GatewayProxyFactoryBean.PARSER` in favor of
similar `EXPRESSION_PARSER` in the super class
* Test and document the feature

* * Fix language in the `whats-new.adoc`

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Fix language in gateway.adoc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
ef939a09a4ef91e2d876dcf099c9882b617d330d,2020-05-28 11:47:15-04:00,"GH-3283: HTTP Inbound handle SpEL errors (#3289)

* GH-3283: HTTP Inbound handle SpEL errors

Fixes https://github.com/spring-projects/spring-integration/issues/3283

* Process all the request message preparation exceptions
in the provided error channel to let target application
to make a decision about an appropriate HTTP status instead of
default 500 Server Error

* * Rephrase `ResponseStatusException` doc in the http.adoc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
3f5aba2cb9ee326795491e8e444dc90cac71a3dc,2020-06-17 14:00:06-04:00,"Support Java 14 (#3310)

* Support Java 14

* Provide changes to avoid deprecated Java API
and have a compatibility back to Java 8
* Change affected test classes to JUnit 5 whenever it is possible
* Ignore/Disable some TCP/IP tests which don't pass on Java 14

* Fix (some) TCP tests on JRE 14

* Fix SSL Handshake test - client side handshake is successful with java 14

- change the badClient cert to a badServer cert to force an error on the client side

Co-authored-by: artembilan <raven666>
Co-authored-by: Gary Russell <grussell@pivotal.io>"
9ad348b75f91630c0c197068033eceb4e97d8f75,2020-06-18 12:06:00-04:00,Log attempting to receive email under debug level instead of info (#3312)
896d2c43f45b6b63eec426f88ceb66cb68fbb96e,2020-06-25 11:28:31-04:00,"INTEXT-111: Allow PP for Kafka producer context

JIRA: https://jira.spring.io/browse/INTEXT-111

 - Remove hard coded names for bean names at the producer context parser
 - Fix and update tests
 - Remove the use of `BeanFactory` to get the producerConfigurations in
KakfaProducerContext and use setter to set the producerConfigurations
 - Add logic to send the message from producer configuration when there
is no header specified for the topic and single producer configuration
is used.

Add tests to verify placeholder values

Fix code review comment and formatting

Polishing code style.

Add `KafkaProducerContext#theProducerConfiguration` for single `producerConfigurations` entry to avoid iterators"
1e6e7b9bbff41387769adedada671d7085b329aa,2020-06-25 11:28:35-04:00,"INTEXT 156-157

JIRA: https://jira.spring.io/browse/INTEXT-156
https://jira.spring.io/browse/INTEXT-157

- `KafkaMessageListenerContainer#stop()` returns only after the container has been effectively stopped, i.e. no more messages are dispatched to the listeners;
- add a configurable timeout property to prevent the previous operation from blocking indefinitely;
- create separate XSDs for 1.0 and 1.1 schemas;

Corrections after review

- removed 1.0 schema
- removed time-sensitive tests

Corrections after review

- removed 1.0 schema
- removed time-sensitive tests
- removed unused logger in QueueingMessageListenerInvoker

Clear messages after stopping

Clear partitionsByBrokersMap

Polishing imports and properties order"
31439da037de67c7bd5586b07e082d604828c74d,2020-06-25 11:28:39-04:00,"Add High Level Consumer Integration Test

http://stackoverflow.com/questions/31668330/how-to-extract-the-data-from-a-kafka-inbound-message-with-spring/31681294#31681294

Polishing"
00659508300f49612c65444c25e41e1da598c3bf,2020-06-25 11:28:39-04:00,"GH-60: Get rid of `HashCodeBuilder` usage

Fixes #60 (https://github.com/spring-projects/spring-integration-kafka/issues/60)

* Upgrade to Gradle 2.5 and other dependencies"
9b49e9a673207e6683d1b8c19a300f27dd43842a,2020-06-25 11:28:40-04:00,Deprecated Connection#getLeaders() - simplify DefaultConnectionFactory tests
32715799d98ae7be4d88af7347ccff5cfa34b647,2020-06-25 11:28:41-04:00,Issue#67: fixing custom paritioner issue
d8a1115f1f03bfd7eb5a7fc485fb7e027ac1c71b,2020-06-25 11:28:42-04:00,"Kafka native offset implementation

Fixes #79 (https://github.com/spring-projects/spring-integration-kafka/pull/79)

Adds an implementation for offset management based on Kafka's own offset management support

Update copyright and use fill name in author tag.

Refactoring the native offset manager

Remove unused imports

Polishing"
079fa0356380260733e5dd999d717a79067654f5,2020-06-25 11:28:43-04:00,"Javadoc: Use the correct value ""EarliestTime""

-2 is the value for ""OffsetRequest#EarliestTime"""
f9adcbd3ec31385e81681f4bb959e2da4f868ef5,2020-06-25 11:28:45-04:00,"GH-112: Use s-k-test Utilities

Resolves #112"
66e0772da02daff58df21b039816ac52c94f80a8,2020-06-25 11:28:46-04:00,"GH-118: Update to Spring Kafka 1.0 BUILD-SNAPSHOT

Fixes #118"
a4ab7e54b1f46ed3a1bcb49433cd48cab26952c3,2020-06-25 11:28:47-04:00,"GH-130: Support KafkaNull Payloads

Fixes #130

Requires spring-kafka 1.0.3.

Upgrade to `spring-kafka-1.0.3.RELEASE`"
5bd2685a4df0abb11432c87172d8b3013ddcaf15,2020-06-25 11:28:47-04:00,"GH-135: Fix Schema

Fixes #135

Wrong type in `partition-id-expression`."
171dc9832ada0e5d60c88d72aee7f9c42b5411f2,2020-06-25 11:28:48-04:00,"GH-147: Add Payload Type to Message Driven Adapter

Resolves: #147

Send Conversion Errors to the Error Channel"
9e047e77038c7515229d51710f3613b93f4b1ce4,2020-06-25 11:28:49-04:00,"GH-158: Add record timestamp support

Fixes spring-projects/spring-integration-kafka#158

Fixing build - replaced a call to removed API in spring-kafka project

Support for timestamp expression in SI schema and SI DSL

* Polishing according PR comments"
857980349eda29f1fbbaeb3c07d576d03bc2d520,2020-06-25 11:28:51-04:00,"GH-172: Add Success and Failure Message Channels

Resolves https://github.com/spring-projects/spring-integration-kafka/issues/172

Use `ErrorMessageStrategy` to build an error message in the event of a failure.

Update to SI 4.3.12.

Polishing - PR Comments - Use standard outputChannel (if configured) for success.

Polishing - PR Comments

Javadoc Polishing

* Polishing `@since` in JavaDocs

* Upgrade to Checkstyle 8.1, SI-5.0.B-S
* Adjust `RequireThis` rule and fix vulnerabilities

# Conflicts:
#	build.gradle
#	src/test/java/org/springframework/integration/kafka/outbound/KafkaProducerMessageHandlerTests.java"
7aa04d32243ead986c6bd7e4f396321348e6212e,2020-06-25 11:28:51-04:00,"GH-175: XML Support for Error Handling

Resolves spring-projects/spring-integration-kafka#175

__cherry-pick to 2.3.x__"
f29bd3e322213ed69fc2c5cd3285894a366cb882,2020-06-25 11:28:57-04:00,"GH-212: Add ConsumerSeekAware impl to Inbounds (#213)

* GH-212: Add ConsumerSeekAware impl to Inbounds

Fixes spring-projects/spring-integration-kafka#212

**Cherry-pick to 3.0.x**

* GH-212: Add ConsumerSeekAware impl to Inbounds

Fixes spring-projects/spring-integration-kafka#212

* Introduce a new `IntegrationKafkaHeaders.CONSUMER_SEEK_CALLBACK`
header to be populated to messages for sending to the channel
* Populate that header from the `KafkaInboundGateway` and
`KafkaMessageDrivenChannelAdapter` into the message from the
`seekCallBack` property if `ListenerContainer` is single-threaded or
from the `ThreadLocal<ConsumerSeekAware.ConsumerSeekCallback>` otherwise;
and only if newly introduced `setAdditionalHeaders` is `true`
* Populate `seekCallBack` property or `ThreadLocal<?>` from the
`registerSeekCallback()` implementation from the internal listeners
* Add `setOnPartitionsAssignedSeekCallback(BiConsumer)` and
`setOnIdleSeekCallback(BiConsumer)` options to react for the appropriate
event from the underlying container and perform appropriate seek management
* Add new options to the DSL classes and cover them with tests, including
check for new `IntegrationKafkaHeaders.CONSUMER_SEEK_CALLBACK` header

**Cherry-pick to 3.0.x**

* Address PR comments: remove unnecessary API

* *Polishing `setOnPartitionsAssignedSeekCallback()` JavaDocs
*Close producers in the `KafkaProducerMessageHandlerTests`"
9b670950a5d529ae330c80d77bf4e88fa650d09c,2020-06-25 11:28:58-04:00,"URL Cleanup

This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).

# Fixed URLs

## Fixed But Review Recommended
These URLs were fixed, but the https status was not OK. However, the https status was the same as the http request or http redirected to an https URL, so they were migrated. Your review is recommended.

* http://www.puppycrawl.com/dtds/configuration_1_2.dtd (404) with 1 occurrences migrated to:
  https://www.puppycrawl.com/dtds/configuration_1_2.dtd ([https](https://www.puppycrawl.com/dtds/configuration_1_2.dtd) result 404).
* http://www.puppycrawl.com/dtds/suppressions_1_1.dtd (404) with 1 occurrences migrated to:
  https://www.puppycrawl.com/dtds/suppressions_1_1.dtd ([https](https://www.puppycrawl.com/dtds/suppressions_1_1.dtd) result 404).

## Fixed Success
These URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.

* http://www.springframework.org/schema/beans/spring-beans.xsd with 2 occurrences migrated to:
  https://www.springframework.org/schema/beans/spring-beans.xsd ([https](https://www.springframework.org/schema/beans/spring-beans.xsd) result 200).
* http://www.springframework.org/schema/context/spring-context.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/context/spring-context.xsd ([https](https://www.springframework.org/schema/context/spring-context.xsd) result 200).
* http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd with 2 occurrences migrated to:
  https://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd ([https](https://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd) result 200).
* http://www.springframework.org/schema/integration/spring-integration.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/spring-integration.xsd ([https](https://www.springframework.org/schema/integration/spring-integration.xsd) result 200).

# Ignored
These URLs were intentionally ignored.

* http://www.springframework.org/schema/beans with 4 occurrences
* http://www.springframework.org/schema/context with 2 occurrences
* http://www.springframework.org/schema/integration with 2 occurrences
* http://www.springframework.org/schema/integration/kafka with 4 occurrences
* http://www.w3.org/2001/XMLSchema-instance with 2 occurrences

* Upgrade Checkstyle and its DTDs for HTTPS"
4f54c4cab31fd9a337dd7103bc2a0835711c7fe6,2020-06-25 11:28:58-04:00,"URL Cleanup

This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).

# Fixed URLs

## Fixed But Review Recommended
These URLs were fixed, but the https status was not OK. However, the https status was the same as the http request or http redirected to an https URL, so they were migrated. Your review is recommended.

* [ ] http://help.github.com/send-pull-requests (404) with 1 occurrences migrated to:
  https://help.github.com/send-pull-requests ([https](https://help.github.com/send-pull-requests) result 404).

## Fixed Success
These URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.

* [ ] http://kafka.apache.org/ with 1 occurrences migrated to:
  https://kafka.apache.org/ ([https](https://kafka.apache.org/) result 200).
* [ ] http://www.apache.org with 1 occurrences migrated to:
  https://www.apache.org ([https](https://www.apache.org) result 200).
* [ ] http://www.springframework.org/schema/integration/spring-integration.xsd with 1 occurrences migrated to:
  https://www.springframework.org/schema/integration/spring-integration.xsd ([https](https://www.springframework.org/schema/integration/spring-integration.xsd) result 200).
* [ ] http://static.springsource.org/spring-integration/reference (301) with 1 occurrences migrated to:
  https://docs.spring.io/spring-integration/reference ([https](https://static.springsource.org/spring-integration/reference) result 301).
* [ ] http://www.springframework.org with 1 occurrences migrated to:
  https://www.springframework.org ([https](https://www.springframework.org) result 301).
* [ ] http://www.springsource.com with 2 occurrences migrated to:
  https://www.springsource.com ([https](https://www.springsource.com) result 301).

# Ignored
These URLs were intentionally ignored.

* http://www.springframework.org/schema/beans with 1 occurrences
* http://www.springframework.org/schema/integration with 2 occurrences
* http://www.springframework.org/schema/integration/kafka with 2 occurrences
* http://www.springframework.org/schema/tool with 2 occurrences
* http://www.w3.org/2001/XMLSchema with 1 occurrences"
eb7f94ae0d3bb73d4f03a8b7b7e04f467a85fa8d,2020-06-25 11:28:59-04:00,"URL Cleanup

This commit updates URLs to prefer the https protocol.
Redirects are not followed to avoid accidentally expanding intentionally
shortened URLs (i.e. if using a URL shortener).

# Fixed URLs

## Fixed Success
These URLs were switched to an https URL with a 2xx status.
While the status was successful, your review is still recommended.

* [ ] http://www.apache.org/licenses/ with 1 occurrences migrated to:
  https://www.apache.org/licenses/ ([https](https://www.apache.org/licenses/) result 200).
* [ ] http://www.apache.org/licenses/LICENSE-2.0 with 28 occurrences migrated to:
  https://www.apache.org/licenses/LICENSE-2.0 ([https](https://www.apache.org/licenses/LICENSE-2.0) result 200)."
cd6d17e4b0506404fef084610e6c5d051b8021ac,2020-06-25 11:29:01-04:00,"GH-265: Ensure assignTimeout is used when no partitions are assigned

* Refactored to rely on assignedPartitions for determining whether to
use pollTimeout or assignTimeout
* Removed redundant assigned flag

fixes #265"
d96a2d930c500f05abda87df68870bc147b85256,2020-06-25 11:29:02-04:00,"Add HTTPS entries for XSD into spring.schemas

Related to spring-projects/spring-integration#2987

**Cherry-pick to 3.1.x, 3.0.x & 2.3.x**"
4cd81fda787c9fbf6820f758d2532042f63039c7,2020-06-25 11:29:02-04:00,"Fix NPE for retryTemp!=null but recoveryCall==null

Starting with version `3.0.x`, the `KafkaInboundGateway` and
`KafkaMessageDrivenChannelAdapter` rely on the
`RetryContext.getRetryCount()` for the
`IntegrationMessageHeaderAccessor.DELIVERY_ATTEMPT` message header, but
the `RetryContext` is obtained from the `TheadLocal` `attributesHolder`,
which is populated from the `RetryListener.open()` only if
`recoveryCallback != null`

* Fix `KafkaInboundGateway` and `KafkaMessageDrivenChannelAdapter` to
populate `TheadLocal` `attributesHolder` with the `RetryContext`
from the `RetryListener.open()` when only `retryTemplate != null`

**Cherry-pick to `master` & 3.0.x**

# Conflicts:
#	src/test/java/org/springframework/integration/kafka/inbound/MessageDrivenAdapterTests.java"
c20ef851687f396d4b2e9f48db351f3ea2b9b97b,2020-06-25 11:29:03-04:00,"GH-280: Add topicPattern support to KafkaMessageSource

Fixes https://github.com/spring-projects/spring-integration-kafka/issues/280

* Refactored to topics/topicPattern to be a property to
prevent constructor telescoping

* Add support for manual partition assignment

- Cleanup after rebasing from #283
- Add additional tests

* Fix checkstyle

* Remove redundant factory methods

* Add better test for static assignment

* Use ConsumerProperties 

Fix typo where ContainerProperties was used 
instead of ConsumerProperties

* Simplify construction

* Remove unused import

* Use ObjectUtils

* Use component name for clientId

* Collapse static assignment for loop

* Fix lint warning"
27f0775fb801f86ac5a10d447a0b163144a6c141,2020-06-25 11:29:05-04:00,"Apply SI-Kotlin-DSL in tests (#292)

* Apply SI-Kotlin-DSL in tests

* Upgrade dependencies

* Upgrade to latest releases"
f62b0916b61088469371271ab4f02330571907e7,2020-07-01 15:53:35-04:00,"Fix MessagingGatewaySupport for reactive error (#3319)

* Fix MessagingGatewaySupport for reactive error

The `onErrorResume()` was in a wrong place for the
`doSendAndReceiveMessageReactive()`: we have to catch all the exceptions
from the top level `Mono`, not only a reply one as it was before.

Ensure in HTTP and WebFlux test that behavior is fixed

**Cherry-pick to `5.3.x` & `5.2.x`**

* * Remove unused imports

Co-authored-by: Artem Bilan <abilan@vmware.com>"
146b0af1f4bc2822a26b823219cee8aab1da12a5,2020-07-02 15:29:43-04:00,"GH-3320: Refine lifecycle control in StdIntFlow (#3322)

* GH-3320: Refine lifecycle control in StdIntFlow

Fixes https://github.com/spring-projects/spring-integration/issues/3320

Turns out that lifecycle control for the whole bunch of components
in one `IntegrationFlow` is useful in fields.

* Change the logic in the `StandardIntegrationFlow` to let to call
`start()` and `stop()` independently how the flow was registered in
the application context.
This way it can be autowired as a `Lifecycle` to let end-user to
avoid the search for proper component in the flow to stop or start
manually - all the components registered with the flow are going
to be stopped or started respectively

* * Add `this.` to class property usage to satisfy Checkstyle

Co-authored-by: Artem Bilan <abilan@vmware.com>"
6a865b55b9155a156feca0a43baf8a61a68ad0fd,2020-07-20 13:51:54-04:00,"GH-3344: Treat kotlin.Unit return as null in MMIH (#3346)

* GH-3344: Treat kotlin.Unit return as null in MMIH

Fixes https://github.com/spring-projects/spring-integration/issues/3344

When function lambda doesn't return anything (e.g. a `void` method call is the last one),
Kotlin produces a `kotlin.Unit` instance as a return value which is not null and produced
as a reply message payload.

* Fix `MessagingMethodInvokerHelper` to treat a `kotlin.Unit` as `null` for reply
making Kotlin lambdas working the same way as Java lambdas when we don't return anything
from from there

**Cherry-pick to `5.3.x`**

* * Introduce `ClassUtils.isKotlinUnit(Class)` API;
use it in the `MessagingMethodInvokerHelper` instead of
`.getName().equals()`

* * Fix since on new `isKotlinUnit()` API"
492f0bfee3bd8d8f8a31f193d2aad4d9456a60b5,2020-07-20 16:31:24-04:00,"GH-3334: Add ""embedded reaper"" into CorrelationMH (#3342)

* GH-3334: Add ""embedded reaper"" into CorrelationMH

Fixes https://github.com/spring-projects/spring-integration/issues/3334

* Add `expireTimeout` property into `AbstractCorrelatingMessageHandler`
to call newly introduced `purgeOrphanedGroups()` API for removing old
groups from the store
* Add `expireDuration` to perform `purgeOrphanedGroups()` task periodically

* * Add Java DSL and XML support for `expireTimeout` and `expireDuration` options
* Document the new feature

* * Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
f23f3ea63de0f37471b8f2f2b2d267b8ab22ceac,2020-07-28 16:59:35-04:00,"Add gauges for queue channel size (#3349)

* Add gauges for queue channel size

The `QueueChannel` provides a current size and remaining capacity metrics

* Add Micrometer gauges into `QueueChannel` to expose the current values
of the size and remaining capacity

**Cherry-pick to 5.3.x, 5.2.x & 5.1.x**

* * Revert `@SuppressWarnings(""unchecked"")` for test
* Document new gauges for queue channel

* * Fix IntegrationManagementConfigurer for NPE on `metricsCaptor`

* Fix wording in meter descriptions

Co-authored-by: Michel Jung <michel.jung89@gmail.com>

Co-authored-by: Michel Jung <michel.jung89@gmail.com>"
ea546c52d0c248a7ee3b5ce1102117101da2681b,2020-07-30 11:00:28-04:00,"Fix compatibility with latest Spring AMQP (#3352)

* Fix compatibility with latest Spring AMQP

* * Fix typo in the `amqp.adoc`"
217e43b19440b524d350f713daf46bf819b3a2d7,2020-08-11 09:54:34-04:00,Add NOSONAR to IntReactiveUtils#emitNext() loop
a76bb24965a3ff7b7abc666e115c4e117e892ce6,2020-08-11 15:04:02-04:00,"INT-3045: Add `ZeroMqChannel` support (#3355)

* INT-3045: Add `ZeroMqChannel` support

JIRA: https://jira.spring.io/browse/INT-3045

Provide a `SubscribableChannel` implementation for ZeroMQ

The general idea is to let to have a distributed channel implementation
where every client can connect to a single server backed by the channel.

The logic in the channel is fully transparent for end-user and there is just
enough to send message to it and subscribe for receiving on the other side.
If PUB/SUB model is used, all the subscribes (even over the network) going to
receive the same published message.
In case of PUSH/PULL only one subscriber in the whole cluster is going to get
the published message

* Use Reactor for better threading control
* JeroMQ is not interruptible-friendly: use control sockets to stop proxy loop
* Name Reactor's schedulers to avoid daemon threads

* * Use try-catch-with-resource to close sockets automatically
* Fix Checkstyle violations
* Use `Mono.handle()` to receive data from the socket

* * Optimize local for just a couple of PAIR sockets
* Implement TCP binding
* Add PUB/SUB tests

* * Fix subscriber scheduler name
* Optimize socket create logic
* Add PUSH/PULL over TCP test

* * Fix subscriber scheduler name
* Optimize socket create logic
* Add PUSH/PULL over TCP test
* Implement PUB/SUB over TCP

* * Introduce `ZeroMqProxy` - Spring-friendly component to configure and manage ZeroMq proxy
* Use this `ZeroMqProxy` logic as an external component for `ZeroMqChannel` testing

* * Fix Checkstyle
* Apply docs polishing
* Expose a capture socket on the proxy
* Implement `DisposableBean` in the `ZeroMqProxy` to destroy an internal executor service
* Add JavaDocs to `ZeroMqChannel`
* Add one more `ZeroMqChannel` to TCP test to be sure that proxy distribution works well

* * Add `hamcrest-core` dependency for Awatility

* * Add more JavaDocs to `ZeroMqProxy` and `ZeroMqChannel`
* Expose `ZeroMqChannel.setZeroMqProxy()` option for easier
configuration within the same application context
* Make `ZeroMqChannel` sockets configuration and connection
dependant on provided `ZeroMqProxy` (if any)
* Add `Consumer<ZMQ.Socket>` configuration callbacks to the `ZeroMqChannel`
* Expose `ZeroMqChannel.consumeDelay` option

* * Add docs for ZeroMQ
* Some additions into a `reactive-streams.adoc`
* Fix typo in the `xmpp.adoc`

* * Add `optional` `jackson-databind` since `ZeroMqChannel` uses it by default
* More words into docs

* * Fix language in docs according review

* Fix language in docs according review

Co-authored-by: Gary Russell <grussell@vmware.com>

* Apply suggestions from code review

Co-authored-by: Oliver <oli-ver@users.noreply.github.com>

* * Fix threading using a `publishOn()` for specific scheduler after `cache()`

* * Remove unused import

* * Change proxy port check from static `Mono.just()` to `Mono.fromCallable()`
to really evaluate the current port state on every repeat
* Add finite `100` repeat number to avoid infinite blocking when proxy is not started at all
* Add `doOnError()` for proxy `Mono` to log `ERROR` when repeat is exhausted

* * Fix Checkstyle violation

Co-authored-by: Gary Russell <grussell@vmware.com>
Co-authored-by: Oliver <oli-ver@users.noreply.github.com>"
47cae4670f73fb0842e262b00ce6f73d1c5181eb,2020-09-10 13:46:57-04:00,"GH-3370: Remove synchronized from RemoteFileUtils (#3380)

* GH-3370: Remove synchronized from RemoteFileUtils

Fixes https://github.com/spring-projects/spring-integration/issues/3370

The `synchronized` on the `RemoteFileUtils.makeDirectories()` makes an application too
 slow, especially when we deal with different paths in different sessions

* Remove the `synchronized` from that method and rework `SftpSession.mkdir()`
to return `false` when ""A file cannot be created if it already exists"" exception
is thrown from the server.
Essentially make an `exists()` call to be sure that an exception is really related
to ""file-already-exists"" answer from the server

**Cherry-pick to 5.3.x, 5.2.x & 4.3.x**

* * Re-throw an exception in the `SftpSession.mkdir()`
when error code is not `4` or remote dir does not exist

* * Check `session.mkdir()` result in the
`RemoteFileUtils` to throw an `IOException` when `false`

* * Fix mock test to return `true` for `mkdir` instead of `null`"
383af8ceb981c0324ec9cb13906edef1080f3729,2020-09-11 09:48:36-04:00,"GH-3374: Fix scan for BF propagation (#3378)

* GH-3374: Fix scan for BF propagation

Fixes https://github.com/spring-projects/spring-integration/issues/3374

An internal `ClassPathScanningCandidateComponentProvider` instance in the `IntegrationComponentScanRegistrar`
does not propagate a provided `registry`.

* Implement `getRegistry()` on the internal `ClassPathScanningCandidateComponentProvider` to propagate
a provided into the `registerBeanDefinitions()` a `BeanDefinitionRegistry`
* Add `@Conditional` on some scanned `@MessagingGateway` in the `EnableIntegrationTests`

**Cherry-pick to 5.3.x & 5.2.x**

* * Remove unused import

* Restore `unused` warning on the unused registry arg"
dbb2f9cecb305be1c2c3dbe08c187108f5446fc9,2020-09-11 15:29:16-04:00,"Revert ""GH-3366: Return null from HTTP handleNoMatch""

This reverts commit 9aa9707f3798f0f0da4f5fefd4b16e31f54bf5a1.

See https://github.com/spring-projects/spring-framework/issues/25636#issuecomment-691269516"
c36314d6eca1b218de7d4f03abf5edf23de4745b,2020-09-11 16:09:01-04:00,"GH-3366: Document HTTP request mapping limitation (#3382)

* GH-3366: Document HTTP request mapping limitation

Fixes https://github.com/spring-projects/spring-integration/issues/3366

The same path cannot be mapped both Spring Integration and MVC ways

* Doc Polishing

Co-authored-by: Gary Russell <grussell@pivotal.io>"
7a97eb6e1c1d78d74a594317f3546899220108b1,2020-09-15 12:55:09-04:00,"GH-3336: Change MongoDb Store sequence to long (#3385)

* GH-3336: Change MongoDb Store sequence to long

Fixes https://github.com/spring-projects/spring-integration/issues/3336

Turns out there are some scenarios where too many messages
are transferred through the message store, so `int` for
sequence is not enough as a type

* Change sequence to `long` to widen a sequence lifespan

* * Change MongoDb store to deal with `Number.longValue()`
instead of casting which doesn't work from `Integer` to `Long`.
This way we can keep an old sequence document with an `int`
type for value
* Documents with new `long` type for their sequence field are OK.
The `NumberToNumberConverter` has an effect converting `int` to `long`
properly."
e154067a1f260a1edcb5d6a7afb498c4716d19dc,2020-09-16 10:32:39-04:00,"GH-3376: Remove gauges on application ctx close (#3377)

* GH-3376: Remove gauges on application ctx close

Fixes https://github.com/spring-projects/spring-integration/issues/3376

The `MeterRegistry` may request meters on application shutdown.
The gauges for channels, handlers and message sources don't make sense
at the moment since all those beans are going to be destroyed.

* Remove gauges for channel, handler and message source numbers from the
`IntegrationManagementConfigurer.destroy()`

**Cherry-pick to 5.3.x & 5.2.x**

* * Add `MicrometerImportSelector` to conditionally load
a  `MicrometerMetricsCaptorConfiguration` when `MeterRegistry`
is on class path.
* Make `MicrometerMetricsCaptorConfiguration.integrationMicrometerMetricsCaptor()`
 bean dependant on the `ObjectProvider<MeterRegistry>`
* Make `IntegrationManagementConfiguration.managementConfigurer()`
dependant on the `ObjectProvider<MetricsCaptor>`.
This way the `IntegrationManagementConfigurer` is destroyed before
`MeterRegistry` when application context is closed
* Deprecate `MicrometerMetricsCaptor.loadCaptor()` in favor of
`@Import(MicrometerImportSelector.class)`

* * Add `MicrometerMetricsCaptorRegistrar` to register a `MICROMETER_CAPTOR_NAME`
bean when `MeterRegistry` is on class path and no `MICROMETER_CAPTOR_NAME` bean yet.
* Make `IntegrationManagementConfiguration.managementConfigurer()`
dependant on the `ObjectProvider<MetricsCaptor>`.
This way the `IntegrationManagementConfigurer` is destroyed before
`MeterRegistry` when application context is closed
* Deprecate `MicrometerMetricsCaptor.loadCaptor()` in favor of
`@Import(MicrometerMetricsCaptorRegistrar.class)`
* Fix test to make a `MeterRegistry` bean as `static` since
`@EnableIntegrationManagement` depends on this bean definition now"
e714310dae78c80aa512db2abb89393b59db82b3,2020-09-18 15:40:32-04:00,"GH-3386: Add method signature for gateway proxy (#3387)

* GH-3386: Add method signature for gateway proxy

Fixes https://github.com/spring-projects/spring-integration/issues/3386

All the gateway proxy method invokers are supplied with the same
bean name inherited from the proxy.

* Add method signature for proxy method bean to fine-grain the
management for those bean in the logs, message history and metrics

* * Use `Class.getSimpleName()` instead to make gateway names less verbose"
a62a7d1ddd6ddb3a23e7ec4daf3ce5d4367d0f9f,2020-09-25 13:46:01-04:00,"INT-3045: Add in & out ZeroMq channel adapters (#3388)

* INT-3045: Add in & out ZeroMq channel adapters

JIRA: https://jira.spring.io/browse/INT-3045

* Add `ZeroMqMessageHandler` to produce messages into one-way ZeroMq sockets
* Add `ZeroMqMessageProducer` to consumer messages from one-way ZeroMq sockets
* Add `ConvertingBytesMessageMapper` impl for the `BytesMessageMapper` to
delegate an actual conversion into the provided `MessageConverter`
* Add `ZeroMqHeaders` for message headers constants representing ZeroMq message attributes
* Fix `ZeroMqChannel` for the proper deferred `zeroMqProxy` evaluation
* Add more JavaDocs
* Fix `ZeroMqChannelTests.testPubSubBind()` to be sure that really all the
subscribed channels get the same message from the `PUB` socket

* * Fix typo in the `ConvertingBytesMessageMapper`
* Add `this` for `doOnError()` in the `ZeroMqChannel` & `ZeroMqMessageProducer`
* Change the bind logic in the `ZeroMqMessageProducer` to `port` and let it to
bind to random port.
The actual port is available later via `getBoundPort()`
* Introduce a `ZeroMqMessageProducer.receiveRaw()` to let received `ZMsg` to
be produce as a `payload`
* Add a logic into `ZeroMqMessageHandler` to treat `ZMsg` in the payload of
request message as is without any conversion
* Fix race condition in the `ZeroMqMessageProducer` to destroy `consumerScheduler`
when the main `Flux` is complete

* * Add Java DSL for ZeroMq components
* Extract `ReactiveMessageHandlerSpec` for `ReactiveMessageHandler` impls
* Add debug message into `EmbeddedJsonHeadersMessageMapper` when cannot `decodeNativeFormat()`
* Make `ReactiveMongoDbMessageHandlerSpec` extending `ReactiveMessageHandlerSpec`
* Make `ZeroMqProxy` `autoStartup` by default
* Add `ZeroMqDslTests` to cover all the Java DSL for ZeroMq
* Introduce a `MimeTypeSerializer`  to serialize a `MimeType` into JSON as a plain string;
use it as extra serializer in the `JacksonJsonUtils.messagingAwareMapper()`
* Fix typo for the `AllowListTypeResolverBuilder` inner class

* * Add some docs
* Fix Checkstyle violations

* * More docs

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
3e501905e37052ab1549c5f69d2e85bffea04baa,2020-10-12 17:36:22-04:00,"GH-3356: Add the way to not load mail message (#3402)

* GH-3356: Add the way to not load mail message

Fixes https://github.com/spring-projects/spring-integration/issues/3356

In some cases it is not necessary to have a whole mail message to be load
when it could be filtered out downstream

* Treat ""no eager load"" for `MimeMessage` in the `AbstractMailReceiver`
when no `headerMapper`, not `simpleContent` and no `autoCloseFolder`

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
5221ac1740b4a1857253060eeb4a1f34fadec5d9,2020-10-26 16:10:34-04:00,"Add Java DSL for R2DBC module (#3415)

* Add Java DSL for R2DBC module

* Add JavaDocs for R2DBC component setters
* Introduce a `R2dbcMessageSource.SelectCreator` to narrow
a `StatementMapper` API access from SpEL
* Add missed `package-info.java` into R2DBC packages
* Add `hamcrest-core` as test dependency into SI-R2DBC
since Awaitility doesn't work without it

* * Add `@NonNullApi` to R2DBC packages"
0331933c168f9096195999592a7f169d39f238d2,2020-11-06 13:51:03-05:00,"Rely on `MProducerSupport.active` for `Flux` (#3423)

* Rely on `MProducerSupport.active` for `Flux`

* Fix `MessageProducerSupport` to extract an `active` flag and set it before
`isRunning` - the `Flux` subscription relies on the `takeWhile()`
where in case of `autoStartup = false` we will never start consume because
it is set to `true` already after `doStart()`
* Refactor all the `MessageProducerSupport` implementation with similar
`active` state to use already one from the super class

**Cherry-pick to 5.3.x**

* * Remove `MessageProducerSupport.setActive()`
to not let to mutate it from the implementations
* Set `active` to `false` in the `destroy()`
* Clean up and fix typos in the affected `JmsMessageDrivenEndpoint`

* * Pull `active` flag down to the `AbstractEndpoint`
* Set `active = true` in the `start()` before calling `doStart()`
* Do same for `active = false` in the `stop()`
* Clean up `AbstractEndpoint` impls to not call `doStart/doStop` for nothing
* Refactor endpoints to rely on the `active` state from the `AbstractEndpoint`
not their own"
7eb07344cc4910d767900eb2a921f9fb03bec2a4,2020-11-11 11:04:24-05:00,"GH-3428: Make Kotlin dependency optional again

Fixes https://github.com/spring-projects/spring-integration/issues/3428

The Kotlin Gradle plugin starting with Kotlin `1.4` adds a standard
Kotlin lib into `compile` scope fully ignoring an `optional` variant.
See more info here: https://kotlinlang.org/docs/reference/using-gradle.html#dependency-on-the-standard-library

* Add `kotlin.stdlib.default.dependency=false` into `gradle.properties`
to rely only on the explicit dependency definitions in the project config
* Remove explicit Kotlin deps from test scope in the target modules since
it is declared globally for all the modules
* Fix author emails in the `publish-maven.gradle` to their VMware variants
* Remove usage of `org.jetbrains.annotations` in favor of `@Nullable`
from Spring Framework"
15c2d16866a72470b35c65a34e869998f5823f81,2020-12-07 15:04:50-05:00,"GH-3438: Add Build from Source into CONTRIBUTING (#3440)

* GH-3438: Add Build from Source into CONTRIBUTING

Fixes https://github.com/spring-projects/spring-integration/issues/3438

It is not clear at the moment what Java version and what build system is used
in the project from the `CONTRIBUTING.adoc`

* Add `Build from Source` section into the `CONTRIBUTING.adoc`
* Point to the `CONTRIBUTING.adoc` from the top level `README.md`
* Fix the current Java version in the `README.md`
* Mention that `Squash commits` must be avoided for subsequent commits into the PR

* * Apply suggest change for docs result
* Change Travis config to use `oraclejdk11` which is minimal already for for the project"
3bf4fd687d609e62bd94c99dafa25150fa891aca,2020-12-09 10:26:13-05:00,"More GH Actions goodies (#3441)

* More GH Actions goodies

* Add RabbitMQ, MongoDB & Redis services into GH actions
* Remove Travis

* * Add `distributionSha256Sum` into `gradle-wrapper.properties`
* Try `TERM: dumb` to see difference for Gradle output in GH action
* Add `-S` to see the reason of test failure

* * Try MQTT plugin for RabbitMQ image

* * Try `-i` for test failure in Gradle on Actions

* * Use `eclipse-mosquitto` image for MQTT on actions
* Fix `FtpServerOutboundTests` for the proper FTP file list
* Output file list for the failed session in the `RotatingServersTests`

* * Adjust SOUT in the test for Checkstyle

* * Make some change to `RotatingServersTests`.
Looks like the order for `@BeforeAll` methods is not determined
and we may start to interaction with FTP server which is not
started yet

* Fix SSL Handshake Test

- we already made this change for the NIO test, but the NET test is failing the same
  way - the cert failure switched to the server so the expected exception was not
  thrown on the client side. Due to JVM changes.

* * Fix SFTP tests for wrong host and auto-startup state
* Remove `-i` for Gradle in the GH Actions

* * Try `--no-parallel` for Gradle in the GH Actions

* * Try GH actions without Mosquitto

* * Try `cyrilix/rabbitmq-mqtt` for GH Actions

Co-authored-by: Gary Russell <grussell@pivotal.io>"
c38da2f4ee511ababc302773b95a1bb1d42a1990,2020-12-22 12:20:12-05:00,"Subscribe to Publisher in the NullChannel (#3448)

* Subscribe to Publisher in the NullChannel

If a payload of the message in the flow is a `org.reactivestreams.Publisher`,
it must be subscribed somewhere downstream to initiate reactive processing.
The `NullChannel` just ignores the message altogether and therefore `Publisher`
is lost

* Check the payload of the message in the `NullChannel` for `Publisher` type
and subscribe to it
* Verify in the test and mention this logic in the docs

**Cherry-pick to 5.4.x**

* Apply suggestions from code review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
e77d3393a48a5581561c595beadb5a78e015ec5e,2021-01-05 15:08:30-05:00,"GH-3452: Warn Publisher.onError in NullChannel (#3453)

* GH-3452: Warn Publisher.onError in NullChannel

Fixes https://github.com/spring-projects/spring-integration/issues/3452

The `NullChannel` can subscribe to the `Publisher` payload fully ignoring
the possible data according the `NullChannel` nature.
However an error thrown from the reactive stream processing is also ignored.

* Log WARN message from the `Subscriber.onError()` when `NullChannel`
subscribes to the `Publisher` produced to this channel.
* Mention the logic in the `NullChannel` docs; point to the
`ReactiveRequestHandlerAdvice` for further possible error handling in
the target application

**Cherry-pick to `5.4.x`**

* * Remove unused imports

* * Fix `PseudoTransactionalMessageSourceTests` for `LogAccessor`
from `NullChannel`"
90ca3d6ea5f0a45a9a84a65d0f851256d78f731c,2021-01-08 11:29:59-05:00,"GH-3454: From MQTT conversion error - to error ch (#3456)

* GH-3454: From MQTT conversion error - to error ch

Fixes https://github.com/spring-projects/spring-integration/issues/3454

The message converter may return null when we try to covert from the
MQTT message.
The thrown exception may also reset the client connect.

* Fix `MqttPahoMessageDrivenChannelAdapter` to catch any conversion errors
(including `null` result) and try to send an `ErrorMessage` with that info
into the provided `errorChannel`.
Otherwise re-throw it as as

**Cherry-pick to `5.4.x` & `5.3.x`**

* * Apply review language-specific changes"
478a79c74bf32cac62d630f1df7c0f520b3e65ca,2021-01-12 13:35:41-05:00,"GH-3450: Expose PubSub requireSubscribers option (#3459)

* GH-3450: Expose PubSub requireSubscribers option

Fixes https://github.com/spring-projects/spring-integration/issues/3450

* Add `PublishSubscribeChannel` ctors with the `requireSubscribers` option
with a direct delegation to the same option of underlying `BroadcastingDispatcher`
* Add factory methods to the `Channels` & `MessageChannels` to expose
this new `requireSubscribers` option
* Expose an XML `require-subscribers` attribute for the `<publish-subscribe-channel`
* Document this new `requireSubscribers` option
* Introduce a global `spring.integration.channels.error.requireSubscribers` property
for a default `errorChannel`
* Document this property and explain its default `true` in the `error-handling.adoc`
* Remove docs for `spring.integration.postProcessDynamicBeans` since it purpose was
removed since version `5.1` in favor of ""always post-process behavior"" as it was
always with all the `BeanPostProcessor`s

* * Fix language in docs according review

* * Add more docs about `requireSubscribers` and cross-links between chapters"
c003a473799a87fb910541e78c3fb6f46eaa1515,2021-01-19 17:22:05-05:00,"GH-3437: Add `MessageRecoverer` to AMQP Inbounds (#3465)

* GH-3437: Add `MessageRecoverer` to AMQP Inbounds

Fixes https://github.com/spring-projects/spring-integration/issues/3437

For better end-user experience with AMQP Inbound Endpoints, expose
a `MessageRecoverer` option
* Test the feature and document this new option

* * Fix Checkstyle & update Copyright

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
707b653d97afcfe33ce40865e924450f2c8ce1c1,2021-01-26 16:02:19-05:00,"Copy request headers when reply is not a Message (#3478)

* Copy request headers when reply is not a Message

Related to https://stackoverflow.com/questions/65887787/spring-integration-unexpected-behavior-on-error-handling-in-splitter-aggregator

Typically `AbstractMessageProducingHandler` implementation with the `shouldCopyRequestHeaders = false`
returns a `Message`(or `MessageBuilder`) as a reply, but when some request handler `Advice` is involved,
we may produce a plain payload and the reply message does not have request headers

* Improve `AbstractMessageProducingHandler` logic to copy request headers into a reply message builder,
when the original reply is not a `Message` or `MessageBuilder`.
This way we improve end-user experience and set them free from copying those headers manually
* Justify a new behavior with the `TransformerTests.testFailedTransformWithRequestHeadersCopy()`

* * Fix Checkstyle violations"
1c6cf560d7c4fede150cbdc59d44d36387146382,2021-01-28 17:12:36-05:00,"Expose `error.ignoreFailures` global property (#3481)

* Expose `error.ignoreFailures` global property

The global default `errorChannel` can have more then only one logging subscriber.
There is no guarantee in which order subscribers are called and one of them fails
the rest are not called.

* Expose `spring.integration.channels.error.ignoreFailures` global property for
default `errorChannel` and make it `true` by default for better end-user experience
when it is expected to have error being handled by all the subscribers

* * Fix language in the `whats-new.adoc`

* * Fix `JmsTests` for error channel to propagate an exception

* More language fixes for whats-new.adoc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
77a343c3cf03cf26f1f38dcdf6ddaf077e4eaa28,2021-02-01 16:53:30-05:00,"GH-3483: Fallback to RestTemplate.converters (#3485)

* GH-3483: Fallback to RestTemplate.converters

Fixes https://github.com/spring-projects/spring-integration/issues/3483

When there is no reasonable way to determine a `Content-Type`
from the request message, do not set an `application/x-java-serialized-object`
as a fallback and let the `RestTemplate` to determine the target type and
conversion through its `HttpMessageConverter` set

* Remove `application/x-java-serialized-object` fallback from the
`AbstractHttpRequestExecutingMessageHandler`
* Adjust its log messages according `LogAccessor`
* Un`@Disable` `WebFluxDslTests` since fix was done in Spring Security
* Add `HttpRequestExecutingMessageHandlerTests.testNoContentTypeAndSmartConverter()`
* Mention change in `What's New`

* Fix language in whats-new.adoc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
d070eb5783264706b30330abc4945f077179cff0,2021-02-05 10:50:17-05:00,"GH-3464: Treat 0 as special for polling endpoint (#3487)

* GH-3464: Treat 0 as special for polling endpoint

Fixes https://github.com/spring-projects/spring-integration/issues/3464

The `maxMessagePerPoll <= 0` is considered as an unbound `receive()` call.
End-users would like to have a special treatment for `0` value -
skip the `receive()` call altogether for the current polling cycle.

* Change the logic for a scheduled poller to not call `pollForMessage()`
and just log an INFO when `maxMessagePerPoll == 0`
* Fix reactive poller to deal with `maxMessagePerPoll == 0` properly
* Expose `maxMessagesPerPoll` as a `@ManagedAttribute` to let it to be
modified via Control Bus and JMX
* Test and document a new behavior

* * Fix unused imports in the test class

* Fix language in docs accoridng PR review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
b1cb9069fe04003c5325ba0f8cb7c38d10f054dd,2021-02-16 16:46:45-05:00,"Add MongoDbMessageSource UPDATE option (#3493)

* Add MongoDbMessageSource UPDATE option

* Extract `AbstractMongoDbMessageSource` with common options and methods
for both `MongoDbMessageSource` and `ReactiveMongoDbMessageSource`
* Add an `updateExpression` option into MongoDb source implementations
* Implement respective `update` logic after fetching the data from the collection
* Cover both reactive and blocking updates with tests
* Add `MongoDbMessageSourceSpec` into Java DSL for MongoDb channel adapters
* Expose an `update` XML attribute for the `<int-mongo:inbound-channel-adapter>`
* Upgrade MongoDb driver for latest Spring Data compatibility
* Document a new feature
* Upgrade `mongodb.adoc` for code block switch whenever it is appropriate

* * Add a Kotlin sample for `MongoDb.outboundGateway()` DSL

* Apply suggestions from code review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
aeb43f306943a026409dc3e89b7f3c47b39b328d,2021-02-16 17:08:24-05:00,"JMS-in-gateway: destination to requestDestination (#3494)

* JMS-in-gateway: destination to requestDestination

Related to https://stackoverflow.com/questions/66174779/what-is-the-dsl-version-of-int-jmsinbound-gateway-request-destination

In Java DSL, the `JmsInboundGatewaySpec` expose a `destination()` option which is not correlated
what we have in XML with a `request-destination` and what we have with a `replyQueue` option

* Deprecate an existing `destination()` option in the `JmsInboundGatewaySpec`
in favor of newly introduced `requestDestination()`
* Clean up a bit `jms.adoc` and add some code block-switch sections to show
Java & Kotlin DSLs along side with existing XML configs

* Fix typo.

Co-authored-by: Gary Russell <grussell@vmware.com>"
b97bedfc88a2c59f44156428303df2cb4d365f1b,2021-02-17 14:48:56-05:00,"FileInbound DSL: Add `recursive` for convenience (#3495)

* FileInbound DSL: Add `recursive` for convenience

Related to https://stackoverflow.com/questions/66171881/how-to-read-nested-txt-file-from-spring-integration-file

The `FileInboundChannelAdapterSpec` can be configured with an external `DirectoryScanner`,
but it sometimes becomes burden for end-users to extract a scanner bean and configure it
with all the required file filters

* Expose a `recursive(boolean)` option for better end-user experience
* Rework `FileTests` for JUnit 5
* Mention a new option in the docs

* * Restore accidentally removed code
* Restore special symbols in the `FileTests`
* Fix language in the docs according review"
9d8393eb3eb70d2f1ff3243fc77f660813d34ad6,2021-03-03 13:48:32-05:00,"Miscellaneous improvement for end-user experience (#3500)

* Miscellaneous improvement for end-user experience

Related to https://stackoverflow.com/questions/66428239/ineligiblemethodexception-found-more-than-one-parameter-type-candidate-spring
Related to https://stackoverflow.com/questions/66397350/spring-integration-how-do-i-call-the-spring-integration-from-spring-controller

The exception thrown from gateway method call for `null` arg is not clear that it cannot be `null`
* Improve `GatewayMethodInboundMessageMapper.mapArgumentsToMessage()` exception message to show args
and explain that it cannot be resolved to `null`

When more than one params are candidates for method invocation, the `MessagingMethodInvokerHelper`
throws an `IneligibleMethodException` which outcome is not clear what to do
* Add `@Payload` annotation recommendation into an exception message to make the reason more cleaner
* Some other code style clean up in the `MessagingMethodInvokerHelper`

* * Fix `PseudoTransactionalMessageSourceTests.testCommit()` for better coverage

* Apply suggestions from code review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
e9f234683e6ffeee15ead10795af5629989c284d,2021-03-08 12:02:31-05:00,"INT-4444: Introduce `@Reactive` & `reactive()` (#3503)

* INT-4444: Introduce `@Reactive` & `reactive()`

JIRA: https://jira.spring.io/browse/INT-4444

Right now the high-level API creates a `ReactiveStreamsConsumer`
only when the input channel is a `Publisher<?>` impl or target handler
is a `ReactiveMessageHandler`

* Add `@Reactive[] reactive()` attribute to messaging annotations
* Add `ConsumerEndpointSpec.reactive()`
Both options point to the same `ConsumerEndpointFactoryBean.setReactiveCustomizer()`
making the target endpoint always as a `ReactiveStreamsConsumer` independently of
the input channel and target handler
* Use the `Function` to customize a source `Flux` from the channel
* Test and document a new feature

* * Fix links in docs

* * Fix `ReactiveStreamsTests`

* * Rework `reactive()` attribute of messaging annotations ot a single `@Reactive` value
with default as `@Reactive(ValueConstants.DEFAULT_NONE)`
* Fix language in docs
* Fix `MessagingAnnotationUtils.resolveAttribute()` to use `requiredType.isInstance()`
instead of comparing classes since annotation instances are `Proxy` at runtime"
b2a4e67db75378359e9c306ff70d57cf3beaf796,2021-03-08 16:24:29-05:00,"INT-4377: aggregator groupTimeout as Date (#3505)

* INT-4377: aggregator groupTimeout as Date

JIRA: https://jira.spring.io/browse/INT-4377

Change the `groupTimeoutExpression` logic to let it to be evaluated to `Date`
instance for some fine-grained scheduling use-case, e.g. to determine a
scheduling moment from the group creation time (`timestamp`) instead of a
current message arrival

* Fix language in docs accoridng PR review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
43425863618b76bee70cf3a10f1f96dd33af3e5b,2021-03-16 15:06:36-04:00,"INT-4116: Introduce FileAggregator (#3511)

* INT-4116: Introduce FileAggregator

JIRA: https://jira.spring.io/browse/INT-4116

* Implement a `FileSplitter.FileMarker`-based aggregation strategies
and utilize them in a general `FileAggregator` component
* Make `HeaderAttributeCorrelationStrategy.attributeName` as `final`; add `Assert.notEmpty()`
* Fix `AggregatorFactoryBean` and `AggregatorSpec` to parse the provided processor
for possible `CorrelationStrategy` and/or `ReleaseStrategy`
* Introduce short-cut methods into Java & Kotlin DSL for an `aggregate()` configuration
* Introduce a `FileHeaders.LINE_COUNT` for header to be populated in the `FileSplitter`.
We need this info in the `FileAggregator` to avoid possible overhead with JSON deserialization
of the `FileSplitter.FileMarker` messages
* Test and document the feature
* Improve `FileSplitter` doc for code block switch (tabs)

* * Rework FileAggregator do not use Java Streams"
f07c44ba2df11a7f386e886286fdaa7dc3f83f1b,2021-03-16 17:27:01-04:00,"Add Publish Unit Test Results to GH Actions

* Upgrade dependencies
* Fix repos to not use superset to fail for
non-authorized artifacts

* * Revert Dokka plugin - too much JCenter deps
* Add `if: always()` for Test Results in GH Actions

* Add `https://repo.spring.io/release` for docs

* * Use `upload-artifact` action instead -
the `publish-unit-test-result-action` doesn't capture against PRs:
https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories
* `retention-days: 3`"
482673a15932553e7bd069c37b707ad9b701c904,2021-03-17 17:54:15-04:00,"GH-3509: Fix Memory Leak with Intercepted TCP Conn

Resolves https://github.com/spring-projects/spring-integration/issues/3509

When a connection was intercepted, the `TcpSender.add...` was called with the
interceptor, but the `removeDead...` was called with the actual connection,
causing a memory leak.

Always call the `TcpSender` with the outer-most interceptor.

# Conflicts:
#	spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/connection/TcpNetServerConnectionFactory.java
#	spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpSendingMessageHandlerTests.java"
7e9552974cd4e2533e0f00fdc7889eac43415235,2021-03-23 14:23:46-04:00,"Introduce a `MessageGroup.condition` (#3517)

* Introduce a `groupConditionSupplier` for MGS

* Add a `MessageGroup.condition` option
* Add a `MessageGroupStore.conditionSupplier` option
* Use it from the `SimpleMessageStore.addMessagesToGroup()` API
to populate `condition` (if any) into a `MessageGroup`
* Introduce a `GroupConditionProvider` contract to be implemented
on those `ReleaseStrategy` contracts which could be aware of group condition
* Populated a `GroupConditionProvider.getGroupConditionSupplier()`
into a `MessageGroupStore` from the `AbstractCorrelatingMessageHandler`
for end-user convenience
* Rework a `FileMarkerReleaseStrategy` to implement a `GroupConditionProvider`
to provide a function which produces a condition from `file_lineCount` header
of the `END` marker message
* Make the `FileMarkerReleaseStrategy` logic already based on the condition from a group
* Delegate `GroupConditionProvider` from the `FileAggregator`
* Add test for empty file aggregation

* * Implement `condition` in the `AbstractKeyValueMessageStore` and `MongoDbMessageStore`
* Test `condition` for `mongo-aggregator-config.xml` and `FileAggregatorTests` against GemFire

* * Implement `condition` in the `ConfigurableMongoDbMessageStore`

* * Implement `condition` in the `JdbcMessageStore`
* `FileAggregatorTests` against `JdbcMessageStore`
* Refactor `JdbcMessageStore` for better handling of message group metadata
* Remove unused `MARKED` column in the DDL in favor of newly introduced `CONDITION`

* * Add docs for message group condition

* * Move `conditionSupplier` option from MGS to AbstractCorrelatingMH
* Make it as a `BiFunction` to propagate existing condition alongside with the
message to consult
* Expose `groupConditionSupplier` in Java & XML DSLs

* * Fix language in docs"
67c5cf74589129c8684365c95c2ceb4ad83c409a,2021-03-24 11:12:03-04:00,"GH-3521: Delayer: schedule release task with TX (#3525)

* GH-3521: Delayer: schedule release task with TX

Fixes https://github.com/spring-projects/spring-integration/issues/3521

There is a race condition when transactional `MessageStore` is used
for `DelayHandler`, so the message is not visible for reads until after TX is
committed, but a scheduled release task may be already ready after delay

* Register a `TransactionSynchronization` with scheduling a releasing task
when TX is committed

**Cherry-pick to `5.4.x` & `5.3.x`**

* Fix language in delayer.adoc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
0549dbd102e93f1eddb45548838e53cbf293cc51,2021-03-30 15:26:06-04:00,"GH-3502: Make the framework compatible with Native (#3531)

Fixes https://github.com/spring-projects/spring-integration/issues/3502"
27e1f3a6365b7c7f7d292b341155d88fbd5073c2,2021-03-31 15:13:33-04:00,"GH-3529: Add HTTP & WebFlux extractResponseBody (#3530)

* GH-3529: Add HTTP & WebFlux extractResponseBody

Fixes https://github.com/spring-projects/spring-integration/issues/3529

* Expose a convenient `extractResponseBody` option on the HTTP client components
to let end-user to decide if the body of `ResponseEntity` must be extracted (default)
or the whole `ResponseEntity` should be produced as a reply message payload
* Remove a deprecated since `5.3` `encode-uri` option
* Document the new feature
* Rework `webflux.adoc` chapter for the code snippet switcher

* * Fix language in Docs
* Mention a default value in JavaDocs"
3f0c57894b085398bcbc02278a764b8d2eb4158d,2021-04-06 10:06:07-04:00,"GH-3502: More refactoring to avoid reflection (#3532)

* GH-3502: More refactoring to avoid reflection

Fixes https://github.com/spring-projects/spring-integration/issues/3502

* Move `ChannelInitializer` bean registration into an `AbstractIntegrationNamespaceHandler` -
it was never used for annotations and Java DSL...
* Rework `IntegrationFlows.fromSupplier()` to call a provided `Supplier` directly -
not via reflection in the `MethodInvokingMessageSource`
* Resolve new Sonar smells
* Rework `EndpointSpec` to accept an expected factory bean instance via ctor arg
instead of reflection
* Rework `Jackson2JsonObjectMapper` to use well-known module instances directly -
not via reflection from their class names

* * Revert `DefaultMethodInvokingMethodInterceptor.methodHandleCache` property definition wrap"
e7d99e994d238a16d83e9d9b9ca450a9ff97ac9d,2021-04-07 15:17:17-04:00,Rename master branch to main (#3539)
c57634f085bc0252232b04445133a0b70e4a62a9,2021-04-07 16:59:57-04:00,Properly mention Apache Kafka trademark in docs (#3540)
aa32270c5b35fa765870ba4cd9ed24da228e71ba,2021-04-09 11:57:29-04:00,"GH-3541: Properly guard when no json-path in CP (#3542)

Fixes https://github.com/spring-projects/spring-integration/issues/3541

* Fix `DefaultConfiguringBeanFactoryPostProcessor` to check for `jsonPath` bean
a `com.jayway.jsonpath.JsonPath` on CP instead of `JsonPathUtils`
which is always there since it is a part of `spring-integration-core`
* Remove `json-path` and `jackson-databind` from tests classpath
to be sure that we have coverage for the mentioned above option classpath entries
* Add `json-path` and `jackson-databind` into test classpath whenever it is necessary"
d8c7ae7b2f699ece2fd7019dedc96cb8945c22d6,2021-04-09 15:06:05-04:00,"Revise retry for `IntegrationReactiveUtils` (#3543)

Related to: https://github.com/spring-cloud/stream-applications/issues/156

The `IntegrationReactiveUtils` uses a general `Flux.retry()`
operator to always retry for all the errors.
On the other hand it has only a `.doOnError(MessagingException.class)`
which leads swallowing all the other exceptions from logs and handling.

* Replace with `retryWhen()` for the `MessagingException` predicate
failing for all other exceptions.
The end-user may add their own `retry` or error handling mechanism to
the returned `Flux` from the `IntegrationReactiveUtils`

**Cherry-pick to 5.4.x**"
3c27241d31a08e84753732fb4aaa900e7e328f66,2021-04-09 15:57:04-04:00,"Improve IMAP IDLE tests

This forces the race condition that was fixed in #3535 consistently.
Before the `IdleCanceler` was used to cancel the `idle()` call in addition to the normal flow. 
That should not be necessary any more."
c811da6dd8c5a3ea3575f6a79332d54658c5d9ae,2021-04-09 16:01:25-04:00,"Fix compatibility with Java 8 for ByteBuffer (#3545)

When we build with Java 9+ and target for Java 8,
we get an incompatible bytecode around these method for `ByteBuffer`:

```
position(int)
limit(int)
mark()
reset()
clear()
flip()
rewind()
```

The recommendation is to cast to `Buffer` when we call these methods

* Fix all the production code using `ByteBuffer` for recommended cast to `Buffer`

Related to https://build.spring.io/browse/INTEXT-AWS-306

See more info in this Jetty issue: https://github.com/eclipse/jetty.project/issues/3244"
35fd9c58098cca2fcf8720fbaba7cd72fe9d65e1,2021-04-13 17:36:01-04:00,"GH-3533: Register WebSocket endpoints at runtime (#3548)

* GH-3533: Register WebSocket endpoints at runtime

Fixes https://github.com/spring-projects/spring-integration/issues/3533

* Rework `WebSocketIntegrationConfigurationInitializer` to register beans functional way
to avoid reflection for Spring Native support
* Move `IntegrationServletWebSocketHandlerRegistry` into a separate file for better readability
* Implement `DestructionAwareBeanPostProcessor` for `IntegrationServletWebSocketHandlerRegistry`
to track runtime bean registrations and removals
* Introduce an `IntegrationDynamicWebSocketHandlerMapping` to manage runtime mapping
registrations and removals
* Add `servlet-api` dependency into `websocket` to be able to compile an
`IntegrationDynamicWebSocketHandlerMapping`
* Fix typo in the exception message of the `StandardIntegrationFlowRegistration`
* Start dynamically added beans together with associated `IntegrationFlow` in the
`StandardIntegrationFlowContext`
* Document new feature

* * Fix language in docs
* Don't start those `SmartLifecycle`s together with a dynamic flow
which are not `isAutoStartup()`

* * Fix `TomcatWebSocketTestServer` to configure servlet for `loadOnStartup = 1`
* Fix `WebSocketDslTests` to make `clientWebSocketContainer.setAutoStartup(true)`"
3c541c52b4595efb9d44094ee857742766a6a639,2021-04-21 11:01:05-04:00,"Make `@IntegrationConverter` Native compatible (#3551)

* Make `@IntegrationConverter` Native compatible

* Add `BASE_PACKAGE` into an `IntegrationContextUtils`;
deprecate similar in the `IntegrationConfigUtils`.
This fixes a package tangle between `config` and `context`
* Move `ConverterRegistrar` and `CustomConversionServiceFactoryBean`
into a `config` package since they are package protected and
created their instances in the `IntegrationConverterInitializer`
functional way instead of reflection
* Use new `IntegrationContextUtils.BASE_PACKAGE` constant instead of
deprecated one
* Make `DefaultConfiguringBeanFactoryPostProcessor` `public` to
make it available for Spring Native `trigger` option in the `@NativeHint`
declaration
* Simplify logic around `JsonPath` to just a `ClassUtils.isPresent()`
* Move the `@IntegrationConverter` processing logic into the `ConverterRegistrar`
to avoid reflection via `BeanDefinition` ctor arg manipulation
* Move the reflection logic into a `ConverterParser` which, being a part of XML
configuration, is not going to be compatible with native any way
* Mark `JsonNodeWrapperToJsonNodeConverter` with an `@IntegrationConverter`
since it is not registered via reflection any more
* Expose `MicrometerMetricsCaptorRegistrar.METER_REGISTRY_PRESENT` and use
it in the `IntegrationGraphServer`
* Extract `UnmarshallingTransformer.MIME_MESSAGE_PRESENT` for less
reflection at runtime
* Use `null` for a `ClassLoader` arg in the `ClassUtils.isPresent()`
relying on the default one internally

* * Fix Checkstyle violations"
0d7bbeaa4e1a202e9d12de5faaaea93b08412bb7,2021-04-27 16:36:54-04:00,"GH-3554: Eval remote dir on each synchToLocal (#3556)

* GH-3554: Eval remote dir on each synchToLocal

Fixes https://github.com/spring-projects/spring-integration/issues/3554

The `remoteDirectoryExpression` was introduced into an
`AbstractInboundFileSynchronizer` to let end-user to evaluate a remote directory
on each poll (essentially on each `synchronizeToLocalDirectory()` call).
The fix for the https://jira.spring.io/browse/INT-4491 introduced a regression
when such an expression was evaluated only once when we call a `setRemoteDirectory()`.
So, an original purpose of this option was lost and we don't get an actual
remote dir on each poll

* Remove `evaluateRemoteDirectory()` method and its usage since it doesn't
reflect expectation of the remote dir expression property
* Reinstate the `remoteDirectoryExpression` evaluation in the
`synchronizeToLocalDirectory()`
* Propagate the result of that expression into further methods for copying
files
* Remove setting of the `remoteDirectory` variable into a global `EvaluationContext`
of the `AbstractInboundFileSynchronizer` instance since it is not thread-safe
* Instead create an `EvaluationContext` locally for each `synchronizeToLocalDirectory()`
call and set the `remoteDirectory` variable into this scoped instances
* Generate a local file name from the `localFilenameGeneratorExpression`
against locally created `EvaluationContext` with the mentioned `remoteDirectory` variable
* Cover the expected functionality with a unit-test

**Cherry-pick to `5.4.x` & `5.3.x`**

* * Fix `testRemoteDirectoryRefreshedOnEachSynchronization` according PR review"
b6ed88eb982ea2fcbad7f5d6a922b2831f4f6f91,2021-05-05 15:55:42-04:00,"GH-3558: Kotlin DSL: propagate generics info (#3561)

Fixes https://github.com/spring-projects/spring-integration/issues/3558

Kotlin lambdas mostly used to configure endpoints in DSL manner
are not really Java lambdas, but rather anonymous classes implementing
respective Java interfaces.

While in most cases such classes carry generic info for their method impls
properly in Java, it is somehow doesn't work well for `GenericHandler`
implemented by Kotlin lambdas

* Wrap provided `GenericHandler` in the `BaseIntegrationFlowDefinition.handle()`
into a Java lambda and call `handle()` recursively to carry an expected type to
the `LambdaMessageProcessor`
* Fix `LambdaMessageProcessor` to handle `ClassUtils.isKotlinUnit()` result of
an invocation as a `null` reply

**Cherry-pick to `5.4.x` & `5.3.x`**"
b84b60c732699a4022e3221f6fb4a7f4319319fa,2021-05-05 16:56:01-04:00,"GH-3560 Parse mail FROM as comma-delimited header (#3562)

Fixes https://github.com/spring-projects/spring-integration/issues/3560

According RFC 5322 `FROM` and `REPLY-TO` received mail message can be
as an array of addresses.

* Fix `MailUtils` to present those arrays as comma-delimited strings for
Spring message headers
* Fix tests to deal already with several addresses for `FROM` mime header.

In the future we may change the logic to map those mime headers to arrays
as it states according the mentioned RFC

**Cherry-pick to `5.4.x` & `5.3.x`**"
65963c9d5685c874fd2153ddb89ab784a463fba0,2021-05-10 13:05:43-04:00,"GH-3504: Explain more an async error handling (#3563)

* GH-3504: Explain more an async error handling

Fixes https://github.com/spring-projects/spring-integration/issues/3504

The reaper for an aggregator (as we as a group timeout) are based on the
`TaskScheduler`.
If non-default `TaskScheduler` is used in the configuration, recommend to
supply it with a `MessagePublishingErrorHandler`

* Rewording changes for proper language

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
04ab9e197461c2313aecd6dc7573bb8460d21270,2021-05-11 17:38:43-04:00,"INT-1828: Docs about filter & release strategy (#3564)

* INT-1828: Docs about filter & release strategy

JIRA: https://jira.spring.io/browse/INT-1828

Document a corner case when filter endpoint is involved in
the flow logic before an aggregator with sequence size release strategy

* Fix typos in the doc changes

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
e17f267c313d6388b7bbb0ca6fab5a81e4ed774e,2021-05-13 16:00:24-04:00,"INT-2436: JMS channel: bean name for container (#3565)

JIRA: https://jira.spring.io/browse/INT-2436

The `JmsChannelFactoryBean` creates a `ListenerContainer` internally
without any `beanName` propagation.
When we rely on a default internal `Executor`, it is created with a
default thread name prefix for all the JMS channel instances.
It cause a confusion in logs

* Set `beanName` for the internal `ListenerContainer` to `this.beanName + "".container""`
making its connection with a channel it is associated with and unique thread name prefix
* Comment out `allWarningsAsErrors = true` in `build.gradle` for deprecated Kotlin
language version `1.3`.
Otherwise IDEA doesn't want to build project"
f290c340f3e06f7b97b190f96a0ecf742a8e841c,2021-05-27 12:19:02-04:00,"GH-3570: Disable the generation of the Gradle metadata

Fixes spring-projects/spring-integration#3570

The module file with the Gradle metadata cannot be published on Maven
Central, which causes issues for some people using a repository manager such
as Artifactory. If it doesn't return a 404 HTTP status, the build fails
instead of ignoring the module.

**Cherry-pick to `5.4.x` & `5.3.x`**"
3ddaad999101996c05cb3d7db7e3c96e363033b1,2021-06-10 15:54:40-04:00,"GH-3578: Fix JdbcMessageStore.getMessageGroup() (#3579)

Fixes https://github.com/spring-projects/spring-integration/issues/3578

The `JdbcTemplate.queryForMap()` extract values for columns to the closer target driver types.
For example H2 and Derby return `Long` for `BIGINT`.
Oracle for its `NUMBER(19,0)` returns `BigInteger`.
This makes the code in the `JdbcMessageStore.getMessageGroup()`
not platform independent.

* Fix `JdbcMessageStore` to map `ResultSet` to the `MessageGroupMetadata`
directly.
Mostly reinstating the previous behavior
* For that reason expose a default ctor for `MessageGroupMetadata`
and extract some setters to make code in the `JdbcMessageStore` more cleaner.
* This opens for us a possibility to implement a `MessageGroupStore.getGroupMetadata(groupId)`
for `JdbcMessageStore`
* Fix deprecation for `Flux.limitRequest()`"
6ef079819b334fc3e998ce45ce8e912cfe5b4785,2021-06-11 15:20:33-04:00,"Fix Websocket dynamic registration mapping order (#3580)

Related to https://stackoverflow.com/questions/67923303/dynamic-registration-of-websocket-output-adapter-is-not-working

By default the `AbstractHandlerMapping` comes with the `order = Ordered.LOWEST_PRECEDENCE` which sorts
added mappings to the end of chain.
At the same time Spring Boot registers a `SimpleUrlHandlerMapping` as a fallback for all not handled requests
leaving our own mapping behind consideration

* Add `order = 0` to the `IntegrationDynamicWebSocketHandlerMapping` bean registration to let it to be
consulted before `SimpleUrlHandlerMapping`
* Add a note into `web-sockets.adoc` that `@EnableWebsocket` would disable Spring Integration dynamic WebSocket
endpoints"
93743f69fea8fad4b75516164aea9774ad86a66b,2021-06-15 10:16:20-04:00,"Fix dynamic Websocket endpoints for SockJS (#3581)

* Fix dynamic Websocket endpoints for SockJS

Related to https://stackoverflow.com/questions/67971467/registration-of-dynamic-websocket-at-application-initialization-time-and-at-runt

The SockJS wrapper for dynamic endpoint is not initialized properly.
Technically we just don't map to the SockJS service if such one is requested from the `ServerWebSocketContainer` configuration

* Postpone the path mapping for the target endpoint until after the `ServerWebSocketContainer` applies all the options
into its registration to expose.
* Fix `ServerWebSocketContainer` to propagate a default `TaskScheduler` for underlying SockJS Service on the endpoint
* Fix `IntegrationDynamicWebSocketHandlerMapping` to deal with path patterns as well,  which is the case for the mentioned SockJS wrapper:
the SockJS Service is able to handle the rest of the path according its setting and request requirements

* * Fix unused imports
* Add Javadoc for new `ServerWebSocketContainer.setSockJsTaskScheduler()` API

* * Cover SockJS server configuration in the WebSocketDslTests"
dbc8af937b850573fcded02db4f15d5e48c6605e,2021-07-19 15:55:53-04:00,"GH-3591: Add `gateway()` section into `dsl.adoc` (#3593)

* GH-3591: Add `gateway()` section into `dsl.adoc`

Fixes https://github.com/spring-projects/spring-integration/issues/3591

* Apply review requested changes"
b12540d2ac563cf77c942fa8930015bb31a14a53,2021-08-09 10:32:30-04:00,"GH-3598: Fix delay in waitStopListening()

Fixes spring-projects/spring-integration#3598

`TestingUtilities.waitStopListening(serverConnectionFactory, delayArg)` actually waits 
for `delayArg * 2` milliseconds which is inconsistent with the JavaDocs.

* Fix `TestingUtilities.waitStopListening()` to sleep for `100` between attempts and 
compare `n` attempts against `delay / 100`"
c189a125a65ddf3601271f97b577fa8b06cdf2bc,2021-08-09 11:23:26-04:00,"Safely read expunged IMAP messages

If application is connected to a Domino mail server via IMAP, it can happen from time to time that a message is expunged.
This leads to a `MessageRemovedException` when calling `IMAPMessage#getSubject`.
And although debug is set to false this again leads to a `MessageException` and the whole integration flow stops.

* Check for `isExpunged()` before logging a filtered message

* Add `@author`
* Fix debug message for expunged to reflect reality
* Clean up new unit tests a bit

**Cherry-pick to `5.4.x`**"
4456caffa16d3b7c8e9838937ec0c236591e5791,2021-09-08 17:14:29-04:00,"Introduce high-level API for flows composition (#3624)

* Introduce high-level API for flows composition

For better end-user experience and more smooth integration logic
decomposition and distribution introduce an `IntegrationFlows.from(IntegrationFlow)`
to let to start the current flow from existing one.
On the other hand introduce an `BaseIntegrationFlowDefinition.to(IntegrationFlow)`
to let to continue the flow logic in the other existing one.
This way we can extract some templating logic into separate `IntegrationFlow` definitions
allowing at the same time to decompose a complex flow definition into logical reusable parts

* * Add more tests

* * Fix Checkstyle violation
* Add `@SuppressWarnings(""overloads"")` to new `from(IntegrationFlow)` and existing `from(Publisher)`.
Technically it does not make sense since `PublisherIntegrationFlow` is not a `public` class

* * Add docs
* Fix language in JavaDocs according review

* Fix language in the docs after review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
fe300ebc38e1fd6093b04f48c52e76424c6eab2a,2021-09-10 16:34:10-04:00,"GH-3614: JPA outbound components delete in batch (#3629)

* GH-3614: JPA outbound components delete in batch

Fixes https://github.com/spring-projects/spring-integration/issues/3614

Add an `Iterable` payload support for the
`JpaExecutor.executeOutboundJpaOperationOnPersistentMode(Message<?>)`
and `DELETE` persist mode

* Fix language in the docs after review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
e7c0d8dafaba8579c65b84f01cf8f1af0987c77d,2021-10-06 11:38:52-04:00,"GH-3432: Add MQTT v5 channel adapters (#3639)

* GH-3432: Add MQTT v5 channel adapters

Fixes https://github.com/spring-projects/spring-integration/issues/3432

* Add `optional` dependency for `org.eclipse.paho:org.eclipse.paho.mqttv5.client`
* Add `MqttProtocolErrorEvent` and emit it from the `mqttErrorOccurred()` callback of the MQTT v5 client
* Add `MqttHeaderMapper` since MQTT v5 has introduced user properties pair to transfer over the protocol
* Add `Mqttv5PahoMessageHandler` as one more extension of the `AbstractMqttMessageHandler`
* Add more convenient `MqttHeaders` constants for easier headers mapping configuration
* Ensure via `Mqttv5BackToBackTests` that MQTT v5 is supported by the provided components
* Change `pr-build-workflow.yml` to use `eclipse-mosquitto` container for testing all the MQTT interactions
* Change `cyrilix/rabbitmq-mqtt` service to the `rabbitmq:management` since RabbitMQ does not support MQTT v5

* * Handle manual acks
* Add `Mqttv5PahoMessageDrivenChannelAdapter.persistence` property

* * Add documentation
* Add `MosquittoContainerTest` for TestContainers support with Mosquitto image

* Fix language in the docs after review

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
a03af081af837a658dbb181b2752319b6a8fd470,2021-10-18 11:24:31-04:00,"Upgrade to Gradle 6.9.1; fork JavaCompile

Attempt to rely on the forked process for compilation
according these docs: https://docs.gradle.org/current/userguide/performance.html#compiler_daemon"
78366e7b00f44ae97e2b2b4f22dd312c8524b89b,2021-10-21 14:12:50-04:00,"GH-3647: Use remoteDirExpression in MV command (#3651)

* GH-3647: Use remoteDirExpression in MV command

Fixes https://github.com/spring-projects/spring-integration/issues/3647

To simplify a source and renameTo remote file expressions, the `remoteDirectoryExpression`
is consulted now, when they are not full paths.
This is useful when we want just to rename a remote file in some dir

* * Add JavaDoc for `getDirectoryExpressionProcessor()`
* Fix language in docs"
f520156053cc6e8abe10e1605f35f2db0f1f9f63,2021-11-01 10:25:38-04:00,"GH-3653: Improve DSL parsing performance (#3654)

* GH-3653: Improve DSL parsing performance

Fixes https://github.com/spring-projects/spring-integration/issues/3653

* Refactor `IntegrationFlowBeanPostProcessor` to perform `beanFactory.getBeansOfType()`
as less as possible
* Implement a `NamedComponent` on the `StandardIntegrationFlow` for better
bean scanning performance in the `IntegrationFlowBeanPostProcessor`

* * Skip `NamedComponent` from bean scanning if `beanName == null`"
eb4d583a176d33c2bdd6f76ff6ea99af5b2f36f9,2021-11-01 16:49:59-04:00,"Add `toReactivePublisher(autoStartOnSubscribe)` (#3657)

* Add `toReactivePublisher(autoStartOnSubscribe)`

The `IntegrationFlowBuilder.toReactivePublisher()` returns a `Publisher<Message<?>>`
which may be subscribed somewhere late in the application logic, e.g.
when WebSocket (or RSocket) subscription is initiated by the external client.
In between application context startup and that subscription moment, the `IntegrationFlow`
must not try to produce messages since there is nothing to consumer them from the
`Publisher<Message<?>>` side.
One of the way is to have a source endpoint not started automatically and control its
lifecycle from the point fo reactive subscription

* Introduce an `IntegrationFlowBuilder.toReactivePublisher(boolean autoStartOnSubscribe)`
to let the framework do a job for an `IntegrationFlow` lifecycle control.
This way end-user doesn't need to know autowire a starting endpoint and use `doOnSubscribe()`
and similar callbacks
* Change `ConsumerEndpointFactoryBean` log message about a `FixedSubscriberChannel`
to `INFO` since an `autoStartup = false` really does not have any effect and there is nothing
for end-user to worry about.
The `IntegrationFlow` knows nothing about each endpoint internals and cannot control which
mark as `autoStartup = false` and which not

* Fix languge in JavaDocs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
15520e120c5568ac7565ab8828cbacf7adb67844,2021-11-03 10:06:31-04:00,"GH-3652: File gateway: don't try delete no file

Fixes spring-projects/spring-integration#3652

Do not try to delete non-existing file in `FileExistMode.REPLACE` in the `AbstractRemoteFileOutboundGateway`

**Cherry-pick to `5.4.x` & `5.3.x`**"
de0f91b777e35134ca3093c9ecc934a9f14b34ea,2021-11-16 12:21:17-05:00,"GH-3677: Doc for URL conn customization in FeedCA (#3678)

* GH-3677: Doc for URL conn customization in FeedCA

Fixes https://github.com/spring-projects/spring-integration/issues/3677

If there is need to have a `URLConnection` customized, the `UrlResource`
has to be used instead of plain `URL` injection into the `FeedEntryMessageSource`

* * Add a sample to docs for connection customization"
2a3dac7ff3d1fa34bafa57f5f6dcce560a92f969,2021-12-14 14:41:58-05:00,"GH-3694: Resolve circular dep in PublisherAnnBPP (#3695)

* GH-3694: Resolve circular dep in PublisherAnnBPP

Fixes https://github.com/spring-projects/spring-integration/issues/3694

* Move check for `PublisherAnnotationBeanPostProcessor` bean into the
`SmartInitializingSingleton.afterSingletonsInstantiated()` to break a circular dependency revealed
in the `InitializingBean.afterPropertiesSet()`

* * Fix unused import"
2d752894cdfc6f09f967f3ab9601b8813decec65,2021-12-14 19:50:49-05:00,"Fix UNLINK/DEL logic in the RedisLockRegistry

See review: https://github.com/spring-projects/spring-integration/pull/3691#issuecomment-994124360"
67e0599a26f0a99b20e7550ada222618ae322ef0,2022-03-22 15:05:39-04:00,"Add documentation for GraphQL support (#3756)

* Add documentation for GraphQL support

* * Fix to the latest Spring for GraphQL
* Mention in the doc an `ExecutionGraphQlRequest` as a request message payload"
4b57363a05f806930b4f5fdd50bfbdaaa52c8138,2022-04-12 12:13:15-04:00,"GH-3733 Configure TxManager for DefLockRepository (#3782)

* GH-3733 Configure TxManager for DefLockRepository

Fixes https://github.com/spring-projects/spring-integration/issues/3733

The `@Transactional` resolves a primary `TransactionManager` bean
from the application context which might not be sufficient for all
the use-case.

To make it work with the custom (or specific) `TransactionManager`
we have to extend a `DefaultLockRepository` and override all those
`@Transactional` method

* Change the logic of the `DefaultLockRepository` from `@Transactional`
to the `TransactionTemplate` and use provided `TransactionManager`
or resolve one from the application context
* Adjust tests to use explicit `TransactionManager` and call
`afterSingletonsInstantiated()` to initialize a default `TransactionTemplate`
* Mention the change in the docs

* * Extracted all the `TransactionTemplate`s to the properties for caching
* Add `BeanInitializationException` for no-unique `PlatformTransactionManager`
bean in the `afterSingletonsInstantiated()`

* Fix language in the exception message

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
e454f5918054ae3005b06d20329fd2e93b467d56,2022-04-25 10:18:34-04:00,"GH-3785: Close stream for persistent collection (#3786)

* GH-3785: Close stream for persistent collection

Fixes https://github.com/spring-projects/spring-integration/issues/3785

* Fix `CollectionArgumentResolver` and `PayloadsArgumentResolver` to
close the `Stream` of message after its usage
* Rework `AbstractKeyValueMessageStore.removeMessagesFromGroup()`
to iterate input collection of messages not its stream to avoid
the mentioned problem

**Cherry-pick to `5.5.x`**

* * Add `JdbcMessageStoreTests.testMessageGroupStreamNoConnectionPoolLeak()`
to ensure that no leaks in the connection pool anymore.
* Improve `MessageGroupStore.streamMessagesForGroup()` JavaDocs about
requirements to close the `Stream` from persistent message store impls"
18e410afbe98f1f1138e95ff4a7bd69b49a655ab,2022-05-09 13:38:10-04:00,"GH-3679: Better caching for SpringIntegrationTest (#3792)

* GH-3679: Better caching for SpringIntegrationTest

Fixes https://github.com/spring-projects/spring-integration/issues/3679

The `@SpringIntegrationTest` makes a test cache key based on its attributes values
when the same application context can be used in different test classes
with different endpoints to have stopped originally.

* Rework an `IntegrationEndpointsInitializer` to the `SpringIntegrationTestExecutionListener`
which consult a `MockIntegrationContext` for endpoints to be started or not before
the test execution and definitely stopped after the test execution to have a flexibility
with the cached context
* Improve a `MockIntegrationContext` to gather `AbstractEndpoint` beans and have them
marked for stopping in the beginning of the application context.
The `SpringIntegrationTestExecutionListener` takes care about startup in its `beforeTestClass()`
* Verify different state for the `SpringIntegrationTest` with the `CachedSpringIntegrationTestAnnotationTests`

* * Improve `SpringIntegrationTestExecutionListener` performance
when no `@SpringIntegrationTest.noAutoStartup()` is configured
* Fix `CachedSpringIntegrationTestAnnotationTests` check `isRunning()`
for the endpoint under the testing instead of `isAutoStartup()`
which is changed in one test class, but not other, and the order
of their execution would matter
* Migrate `MockMessageSourceTests` to JUnit 5 as a roadmap of the whole project

* Fixes https://github.com/spring-projects/spring-integration/issues/3787"
e855f13d8e70eb1cbe280c5bdb41aa98e24ecb79,2022-06-07 10:14:53-04:00,"GH-3797: Improve batch processing in the framework (#3820)

* GH-3797: Improve batch processing in the framework

Fixes https://github.com/spring-projects/spring-integration/issues/3797

* Handle `Message` items of the `Iterable` payload properly in the `JdbcMessageHandler`.
Otherwise, they've been wrapped into an extra `Message`
* Produce a single message with a `Collection<Message<?>>` payload in the `AggregatingMessageHandler`
when the `getOutputProcessor()` is not an instance of `SimpleMessageGroupProcessor`
* Mention these changes in docs
* Point to the error handling sample from docs

* * Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
04c7a87bd9d1de3e57a6542b3bbce2cbc6790857,2022-06-22 13:23:03-04:00,"Use `lookupHost = false` by default for TCP & UDP (#3825)

* Use `lookupHost = false` by default for TCP & UDP

The applications these days more and more are deployed and managed in the containers
where DNS is not configured by default.
Having `lookupHost = true` by default leads to a bad experience when some delays happen
for reverse host lookups.

* Use `lookupHost = false` by default for both TCP & UDP to have a reliable behavior
independently of the environment.
The `hostName` is used for `connectionId` and as a header in the message -
semantically it doesn't matter for the application logic what value is present over there.

* * Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
5572c2161d97ffe830ce9743c1cb1cd95bb5782c,2022-07-28 09:32:01-04:00,"Fix deprecations around ListenableFuture (#3865)

* Fix deprecations around ListenableFuture

SF has deprecated a `ListenableFuture` and API around it

* Migrate to `CompletableFuture` everywhere a `ListenableFuture` has been used
* Suppress a deprecation for `ListenableFuture` keeping the functionality until the next version
* Resolve deprecations nad removals from the latest Spring for Apache Kafka
* Fix documentation for the `ListenableFuture` in favor of `CompletableFuture`

NOTE: the AMQP module is left as is until `ListenableFuture` deprecation is resolved in Spring AMQP

* * Restore some `ListenableFuture` test for messaging gateway"
2bfcb32628ab51279d90d52bec530b5cea2c7b62,2022-08-16 10:31:14-04:00,"Initial support for Micrometer Observation (#3845)

* Initial support for Micrometer Observation

* Add respective Observation dependencies
* Refactor an `AbstractMessageHandler` logic for potential Observation hooks
* Introduce an `ObservationPropagationChannelInterceptor` to propagate
an `Observation` from one thread to another through message channels

* Adds an example of propagation

* Fixed the user code and receiving spans

* * Clean up for Tracing unit test
* Make `micrometer-observation` as an `api` dep - non-optional for direct API usage

Co-authored-by: Marcin Grzejszczak <marcin@grzejszczak.pl>"
ca138c0c061c12ab5fef516fb97c1ade2744ba5f,2022-08-22 12:38:23-04:00,"GH-3844: Rework messaging annotation with @Bean (#3877)

* GH-3844: Rework messaging annotation with @Bean

Fixes https://github.com/spring-projects/spring-integration/issues/3844

* Make `MessagingAnnotationPostProcessor` as a `BeanDefinitionRegistryPostProcessor`
to process bean definitions as early as possible and register respective messaging
components at that early phase
* Make bean definitions parsing logic optional for AOT and native mode since beans
have bean parsed during AOT building phase
* Introduce a `BeanDefinitionPropertiesMapper` for easier mapping
of the annotation attributes to the target `BeanDefinition`
* Remove `@Bean`-related logic from method parsing process
* Change the logic for `@Bean`-based endpoint bean names:
since we don't deal with methods on the bean definition phase, then method name
does not make sense.
It even may mislead if we `@Bean` name is based on a method by default, so we end up
with duplicated word in the target endpoint bean name.
Now we don't
* Fix `configuration.adoc` respectively for a new endpoint bean name logic
* In the end the new logic in the `AbstractMethodAnnotationPostProcessor`
is similar to XML parsers: we feed annotation attributes to the
`AbstractStandardMessageHandlerFactoryBean` impls

* * Fix language in docs and exception message"
5080fc2f453e8c86d95a754e20aac024c6ef967f,2022-09-01 13:59:07-04:00,"GH-3828: Initial Spring AOT support (#3832)

* GH-3828: Initial Spring AOT support

Fixes https://github.com/spring-projects/spring-integration/issues/3828

* Provide an infrastructure based on a new Spring AOT engine in the latest Spring Framework
* Introduce `RuntimeHintsRegistrar` impls into modules which require some reflection,
resources or proxies and serialization available in the native image
* Mark some framework method with the `@Reflective` to make their reflection
info available in the native image, for example for SpEL or JMX invocations
* Add a `GatewayProxyBeanRegistrationAotProcessor` to register proxy interfaces
info for messaging gateways (either instance of the `GatewayProxyFactoryBean`)
* Rework `ConverterRegistrar` to not use a `beanFactory.getBeansWithAnnotation()`
since it is not available after AOT phase.
Instead, register an intermediate `IntegrationConverterRegistration` bean definition
from the `IntegrationConverterInitializer`
* Refactor `GlobalChannelInterceptorInitializer` a bit according to a new logic in the
`IntegrationConverterInitializer`
* Remove `JsonNodeWrapperToJsonNodeConverter` bean registration from the
`DefaultConfiguringBeanFactoryPostProcessor` - it is added by the `ConverterRegistrar`
into the target `ConversionService`
* Fix `ParentContextTests` respectively a `JsonNodeWrapperToJsonNodeConverter` bean removal
* Refactor `XsltPayloadTransformer` to not load a `ServletContextResource`, but just use its
name for the `xslResource` condition

* * Rework AOT support according latest changes and requirements
* Remove `@Bean` reflection since it is not needed any more
* Add `AotDetector.useGeneratedArtifacts()` condition to not register beans
one more time at runtime after AOT build phase
* Fix deprecation in the WebFlux test from the latest SF"
15e89c3b628ec04d2c7211fd493b7c839efd4325,2022-09-06 10:50:34-04:00,"Rework infra logic onto IntegrationProperties (#3881)

* Rework infra logic onto IntegrationProperties

The `Properties` bean has been deprecated since `5.5`

* Register a default `integrationGlobalProperties` as a `IntegrationProperties`
* Fix respective usages from the `Properties`

* * Remove unused constant from the `IntegrationContextUtils`

* * Fix language in the `whats-new.adoc`

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
5ece0e0dfdf9a865aa02ae567bada4c5a855d3b8,2022-09-15 16:41:25-04:00,"Add Apache Camel support (#3887)

* Add Apache Camel support

* Implement `CamelMessageHandler` to perform send and send-n-reply
operations to the Apache Camel routes
* Fix `AbstractMessageProducingHandler` to handle async errors even if reply is
not expected

* * Narrow Camel dependency to `api`"
8c73a2d0cd3b09201828630718119dd899eb5cb3,2022-09-19 10:22:04-04:00,"Add some infrastructure for Observation (#3879)

* Add some infrastructure for Observation

* Populate an `ObservationRegistry` bean from the `IntegrationManagementConfigurer`
into all the `IntegrationManagement` components
* Introduce `MessageReceiverContext` and `MessageSenderContext` for easier usage
in the target code
* Implement `Observation` handling in the `AbstractMessageHandler`
* Modify `ObservationPropagationChannelInterceptorTests` for new `MessageSenderContext`
* Use `BridgeHandler` to ensure that `Observation` is propagated and handled properly
* Verify that tags from the `AbstractMessageHandler` are preset on the consumer span

* * Add a `DocumentedObservation` infrastructure

* * Add `Timer` verification to the propagation test

* * Update to the latest Observation API

* * Add custom observation convention support for the `AbstractMessageHandler`
* Use more meaningful prefix for Spring Integration tags

* * Move singleton instance for `DefaultMessageReceiverObservationConvention`
into `DefaultMessageReceiverObservationConvention` per se as an `INSTANCE` constant
* Use `MeterRegistryAssert` in the `ObservationPropagationChannelInterceptorTests`
to verify meters emitted

* * And an integration test with Zipkin based on the `SampleTestRunner`"
695e1563eda7d7511cb8cfd14701b052681c51d4,2022-09-20 14:17:37-04:00,"GH-3888: Fix NPE in the `RedisLockRegistry.destroy()` (#3889)

* GH-3888: Fix NPE in the `RedisLockRegistry.destroy()`

Fixed https://github.com/spring-projects/spring-integration/issues/3888

When `RedisLockType.SPIN_LOCK` (default), the `RedisLockRegistry.destroy()`
causes an NPE on the `redisMessageListenerContainer` since pub-sub is not used
in a busy-spin mode

* Check for `redisMessageListenerContainer` before calling its `destroy()`

**Cherry-pick to 5.5.x**

* * Reset properties in the `RedisLockRegistry` after `destroy()`"
26816a3eef5d7b6ca69136bb777e49a5646dcc22,2022-09-26 17:43:37-04:00,"GH-3626: RabbitMQ Stream Support (#3895)

Resolves https://github.com/spring-projects/spring-integration/issues/3626

- spec for stream listener container
- move message handler from scst to here; add spec

* Fix test.

* Polishing and Docs.

* Fix anchors in doc.

* Don't Extend `AbstractMessageProducingHandler`"
4aa2f91bd9ae023a59cc2e9eb5622420cf0a038e,2022-09-27 13:10:11-04:00,"GH-3572: Migrate SFTP from `jsch` to `sshd-sftp` (#3892)

* GH-3572: Migrate SFTP from `jsch` to `sshd-sftp`

Fixes https://github.com/spring-projects/spring-integration/issues/3572

* Rework SFTP module from the JSch API to more modern `sshd-sftp`
* Migrate generics of most API from `ChannelSftp.LsEntry` to the `SftpClient.DirEntry`
* Rework `DefaultSftpSessionFactory` to deal with an `SshClient` and create `SftpClient`
wrapped to the `SftpSession`
* Implement a `ResourceKnownHostsServerKeyVerifier` to load `known-hosts` from any possible resource
* Implement an expected `SftpSession.list()` with just file name to take or pattern matching
* Remove some unused tests and their config
* Remove tests for custom `UserInfo` since we don't provide any custom out-of-the-box
* Test a new `ResourceKnownHostsServerKeyVerifier` against default `known-hosts` file

* * Some tests improvements

* * Improve generics handling for `FileUtils`"
6246c9f489b865d6271e65eadda070a821530b4a,2022-10-01 20:41:22-04:00,Remove superfluous space in IntegrationFlowBuilder (#3901)
0eb6ae172e3b848560ef2ac31af730d6e9c2b31b,2022-10-03 15:07:43-04:00,"Fix new classes and packages tangles (#3898)

* Fix new classes and packages tangles

* Move `MessagingAnnotationPostProcessor` and `MethodAnnotationPostProcessor` impls
out of the `config.annotation` package due to usage of the `FactoryBean` configs
* Move `GenericHandler` and `GenericTransformer` to the `core` package to break
a tangle with a `LambdaMessageProcessor`
* Clean up affected tests and docs

* * Fix Checkstyle violation for imports order"
5fadaf533d48addcf274bfd519622f18d8557c17,2022-10-04 16:03:04-04:00,"GH-3635: Add Future<Void> & Mono<Void> to gateway (#3899)

* GH-3635: Add Future<Void> & Mono<Void> to gateway

Fixes https://github.com/spring-projects/spring-integration/issues/3635

When `Future<Void>` & `Mono<Void>` is used as a messaging gateway return type,
the application hangs out on this barrier which may lead to the out of memory eventually

* Add support for the `Future<Void>` & `Mono<Void>` messaging gateway return type
and ensure an asynchronous call for the `gateway.send(Message)` operation and
its exception handling.
In case of successful call, the `Future` is fulfilled with `null` and `Mono` is completed as empty

* * Check for `void.class` as well in the `GatewayProxyFactoryBean.isVoidReturnType`

* * Allow `Future<Void>` as a reply type of the gateway request-reply operation

* * Fix  Checkstyle violations

* * Resolve `System.err.println()` in the test code

* Add `Thread.currentThread.interrupt()` to the `InterruptedException` block in the test"
f24fbd992b559fd259b800bf7fa9865128b06316,2022-10-06 12:42:26-04:00,"Add documentation for Observability (#3896)

* Add documentation for Observability

* Adapt Observation code to the latest dependencies
* Add doc generation tasks for meters and spans
* Document new Observation API features
* Include generated meters and spans docs to a general `metrics.adoc` chapter

* * Adapt `ObservationPropagationChannelInterceptorTests` for the latest `SpansAssert` API

* * Adjust to the latest Micrometer SNAPSHOT
* Make Observation doc generation tasks only as local.
We don't need ambiguous changes to source code on CI

* * Automate metrics/spans docs generation as a part of `reference` build phase
* Replace 'org.springframework.integration' content in the generated files with a 'o.s.i'
to make it easier to read, especially in the tables
* Break `DefaultMessageReceiverObservationConvention <=> IntegrationObservation` classes tangle
using literal for `KeyValues` in the `DefaultMessageReceiverObservationConvention`
instead of nested enums from the `IntegrationObservation`
* Some other minor build script clean up

* Fix indent in `build.gradle` for `micrometerVersion` property code line

* Add new line after observation section in whats-new.adoc

* * Adapt to the latest Micrometer changes

* * Use Reactor `2022.0.0-SNAPSHOT` version"
a30dc10447e8076d7cd65c55342e6955fb3cfd52,2022-10-11 10:05:23-04:00,"Improve messaging gateway mapping

The `#args` and `#gatewayMethod` SpEL variables have been deprecated for a while

* Remove their population and usage in favor of `MethodArgsHolder` `root` of the evaluation context
This change optimize a gateway mapping logic the way that there is no need in evaluation context
for every call: we can just reuse a global one
* Some other `GatewayMethodInboundMessageMapper` code style refactoring
* Fix effected test classes and their configs"
6641b1f5455f487155ac036b56c5e4de5d436368,2022-10-11 14:38:46-04:00,"GH-3664: Re-enable JavaScript support via GraalVM (#3911)

* GH-3664: Re-enable JavaScript support via GraalVM

Fixes https://github.com/spring-projects/spring-integration/issues/3664

The JavaScript JSR223 engine has been removed from Java.

Migrate JavaScript support into GraalVM Polyglot API:
* Implement `PolyglotScriptExecutor` which can also support other GraalVM languages
* Change the `ScriptExecutorFactory` to use a `PolyglotScriptExecutor` when it encounters JavaScript
* Re-enable tests for JavaScript
* Add GraalVM Polyglot support into docs

* * Reinstate `@EnabledIfSystemProperty` for GraalVM JS system property"
f7dd876be2946c54a77eee8fa37912cda67814b9,2022-10-11 14:39:29-04:00,"INT-3333: Return empty list as is from DB gateway (#3907)

* INT-3333: Return empty list as is from DB gateway

Fixes https://jira.spring.io/browse/INT-3333

In `JdbcOutboundGateway` and `JpaOutboundGateway` the empty result list
is treated as ""no reply"" and therefore `null` is returned cause
the flow to stop at this point.
It is better to return such a result as is and the target application to
decided what to do with it, e.g. a `discardChannel` on a downstream splitter
configuration.

NOTE: the `MongoDbOutboundGateway` doesn't treat an empty result as a `null`

* * Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
83f2a9c2462d45cc6bd315110bb61f780b1bf05b,2022-10-17 15:41:58-04:00,"Migrate Groovy DSL extension project (#3914)

* Migrate Groovy DSL extension project

* Upgrade to Groovy `4.0.5`
* Apply `groovy` plugin for Groovy module to be able to compile Groovy classes for DSL
* Document new feature

* * Restore `lambdaWrapper` for the `GroovyIntegrationFlowDefinition.handle()`
to be able to preserve a generic argument type

* * Migrate more Spock test methods to JUnit style

* * Add missed `assert` to Groovy tests

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Fix Copyright and `@since` in new classes
* Remove deprecated `IntegrationFlows` class mentions in the `groovy-dsl.adoc`

Co-authored-by: Gary Russell <grussell@vmware.com>"
a08713fe874131a41cb9191cd7c8d04ed0d03574,2022-10-17 16:03:37-04:00,"Migrate Cassandra extension project (#3913)

* Migrate Cassandra extension project

* Add `spring-integration-cassandra` module based on the extension project
* Add Java DSL for Cassandra module
* Add documentation
* Add `CassandraContainerTest` based on a Testcontainers

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Fix `reactive-streams.adoc` for a proper link to
the new `spring-integration-cassandra` module

Co-authored-by: Gary Russell <grussell@vmware.com>"
ff076b6a190b6ea46fcb39bb84c717b84660b1c9,2022-10-17 17:53:55-04:00,"GH-3902: Add Kotlin Coroutines Support (#3905)

* GH-3902: Add Kotlin Coroutines Support

Fixes https://github.com/spring-projects/spring-integration/issues/3902

* Add `isAsync()` propagation from the `MessagingMethodInvokerHelper`
to the `AbstractMessageProducingHandler` to set into its `async` property.
The logic is based on a `CompletableFuture`, `Publisher` or Kotlin `suspend`
return types of the POJO method
* Introduce `IntegrationMessageHandlerMethodFactory` and `IntegrationInvocableHandlerMethod`
to extend the logic to newly introduced `ContinuationHandlerMethodArgumentResolver`
and call for Kotlin suspend functions.
* Remove `MessageHandlerMethodFactoryCreatingFactoryBean` since its logic now is covered with the
`IntegrationMessageHandlerMethodFactory`
* Kotlin suspend functions are essentially reactive, so use `CoroutinesUtils.invokeSuspendingFunction()`
and existing logic in the `AbstractMessageProducingHandler` to deal with `Publisher` reply

* Fix `GroovySplitterTests` for the current code base

* Add `kotlinx.coroutines.flow.Flow` support
The `Flow` is essentially a multi-value reactive `Publisher`,
so use `ReactiveAdapterRegistry` to convert any custom reactive streams result to `Flux` and `Mono`
which we already support as reply types

* Add docs for `Kotlin Coroutines`
Rearrange the doc a bit extracting Kotlin support to individual `kotlin-functions.adoc` file

* Fix missed link to `reactive-streams.adoc` from the `index-single.adoc`
* Fix unintended Javadocs formatting in the `AbstractMessageProducingHandler`

* Add suspend functions support for Messaging Gateway
* Add convenient `CoroutinesUtils` for Coroutines types and `Continuation` argument fulfilling via `Mono`
* Treat `suspend fun` in the `GatewayProxyFactoryBean` as a `Mono` return
* Convert `Mono` to the `Continuation` resuming in the end of gateway call

* Document `suspend fun` for `@MessagingGateway`

* * Make `async` implicitly only for `suspend fun`

* * Remove unused imports

* * Verify sync and async `Flow` processing
* Mention default sync behavior in the docs

* * Improve reflection in the `CoroutinesUtils`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Rebase and revert blank lines around `include` in docs

Co-authored-by: Gary Russell <grussell@vmware.com>"
64f0e738a9c4767725652c5c913dcea27e1a09df,2022-10-17 18:32:17-04:00,"GH-3897: Deprecate `ChannelSecurityInterceptor` (#3915)

* GH-3897: Deprecate `ChannelSecurityInterceptor`

Fixes https://github.com/spring-projects/spring-integration/issues/3897

Spring Security has deprecated `AccessDecisionManager` and all its infrastructure
in favor of `AuthorizationManager`

* Deprecate and AOP `ChannelSecurityInterceptor` and all its infrastructure,
including `@SecuredChannel` and respective XML configuration.
The `AuthorizationChannelInterceptor` added to respective channels for security
or configured as a global channel interceptor fully covers the previous AOP configuration
* Fix deprecation warnings in other tests with security

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Remove `forRemoval` attr from `@Deprecated` markers for Security classes:
looks like to mark `@Deprecated` and even `@SuppressWarnings(""deprecation"")`
don't silence warnings on compilation

Co-authored-by: Gary Russell <grussell@vmware.com>"
d9545c11a5b04071d09ed093a72c174f1e8389a8,2022-10-24 13:08:15-04:00,"GH-3920: Support @Primary on @MessagingGateway (#3924)

* GH-3920: Support @Primary on @MessagingGateway

Fixes https://github.com/spring-projects/spring-integration/issues/3920

Any Spring `@Component` can also be marked with a `@Primary`.
The `@MessagingGateway` for proxying interfaces has no difference with
a standard `@Component` definition

* Modify `MessagingGatewayRegistrar` to obtain a `@Primary` marked
from the `importingClassMetadata` and pass it to the target `BeanDefinition`
* Verify the `@Primary` effect in the `GatewayInterfaceTests`
* Document this improvement

* * Fix Checkstyle violations"
e52e352e0c43c7a8a693bb2ba3fa426aed1c6cf3,2022-10-25 12:09:33-04:00,"Add generic arg to the `GatewayProxyFactoryBean` (#3925)

* Add generic arg to the `GatewayProxyFactoryBean`

Related to https://github.com/spring-projects/spring-integration/issues/3923

When gateway proxy is declared manually, a `GatewayProxyFactoryBean` is used as a `@Bean`.
In this case the info about target interface is not available on a `BeanDefinition`,
unlike with a programmatic registration via `MessagingGatewayRegistrar`.

* Expose `<T>` on a `GatewayProxyFactoryBean` to make end-user to specify the type
this gateway is going to be based on.
This allows Spring container to determine the type of the `FactoryBean` bean definition
properly
* Migrate a programmatic bean definition registration from the
`FactoryBean.OBJECT_TYPE_ATTRIBUTE` to the `targetType` property
of the `BeanDefinition` based on a `ResolvableType.forClassWithGenerics()`
to simulate generic arg for the application context
* Remove `ComponentsRegistration` from the `GatewayProxySpec` since it us out of use
* Fix affected tests for newly added generic arg on the `GatewayProxyFactoryBean`

* Fix another typo in gateway.adoc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
532692b0ec11ced810c5cdcd4c8e7c1bec8ce728,2022-10-27 10:10:05-04:00,"Fix double start for `AbstractEndpoint` (#3928)

* Fix double start for `AbstractEndpoint`

When we use POJO methods in the `IntegrationFlowAdapter`,
the `IntegrationFlowAdapter` is set as a `target` for the `MessagingMethodInvokerHelper`.
When endpoint is started by the application context, such a `start()` is propagated
down to the `MessagingMethodInvokerHelper`.
And in our case back into an `IntegrationFlowAdapter` instance.
This one, in turn, starts its `IntegrationFlow` internally which leads to the
start of the mentioned endpoint in the beginning.
Therefore, we cause a recursive `start()` call on this endpoint from itself.
The `running` flag is set when we are already done with the `doStart()` logic.
Therefore a recursive `start()` call leads to two concurrent polling tasks
in the `AbstractPollingEndpoint`.

* Check also for the `active` flag in the `AbstractEndpoint.start()`
and reset it in case of exception in the `doStart()`

**Cherry-pick to `5.5.x`**

* * Change assert for message timestamps to `isCloseTo()` with percentage

* * Change `catch` in the `AbstractEndpoint.start()` to `RuntimeException`:
the `doStart()` cannot throw unchecked exceptions by definition

* * Fix imports in `AbstractEndpoint`"
511cb7619b9ab17385afd106359ca751cc4c8fa6,2022-10-31 10:32:52-04:00,"GH-3923: Add @MessagingGateway @Import support (#3929)

* GH-3923: Add @MessagingGateway @Import support

Fixes https://github.com/spring-projects/spring-integration/issues/3923

Currently, the `@MessagingGateway` interfaces can be scanned or created
explicitly as `@Bean` definition for `AnnotationGatewayProxyFactoryBean`

* Implement a `GatewayProxyBeanDefinitionPostProcessor` which is invoked
before instantiation attempt on the `BeanDefinition`
* Verify `@Import` for `@MessagingGateway` interface in the `GatewayInterfaceTests`

* Remove supplier for `GatewayProxyInstantiationPostProcessor` bean definition

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Fix bean definition signature

Co-authored-by: Gary Russell <grussell@vmware.com>"
39bb09012a05919fb356eb44132d1bdaac8d1465,2022-11-01 10:28:07-04:00,"GH-3926: BeanNameGenerator for @MessagingGateway (#3927)

* GH-3926: BeanNameGenerator for @MessagingGateway

Fixes https://github.com/spring-projects/spring-integration/issues/3926

Current approach for generated bean name in the `MessagingGatewayRegistrar`
is to decapitalize simple class name, which is similar to standard `AnnotationBeanNameGenerator`

* Make logic in the `MessagingGatewayRegistrar` based on the provided `BeanNameGenerator`
* Expose an `@IntegrationComponentScan.nameGenerator()` attribute to allow to customize
default bean name generation strategy
* Introduce `IntegrationConfigUtils.annotationBeanNameGenerator()` to
take a provided `AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR` singleton
or fallback to the `AnnotationBeanNameGenerator.INSTANCE`
* Use this utility in the `IntegrationComponentScanRegistrar` if no custom strategy is provided
in the `@IntegrationComponentScan`
* Use same util from the `GatewayParser` since there is no custom naming strategy configuration
* Some other current Java level refactoring in the `IntegrationComponentScanRegistrar`
and `MessagingGatewayRegistrar`

* * Meta-annotate `@MessagingGateway` with a `@MessageEndpoint`
* Alias `@MessageEndpoint.value()` with a `@Component.value()`
* Alias `@MessagingGateway.name()` with a `@MessageEndpoint.value()`

* * Remove unused imports

* * Replace `MessagingGatewayRegistrar` parsing logic for annotation configuration
directly by the `GatewayProxyInstantiationPostProcessor` and `AnnotationGatewayProxyFactoryBean`.
* The `MessagingGatewayRegistrar` logic has been migrated back to the `GatewayParser`,
but only with an XML-relevant parts
* Change the logic of the `IntegrationComponentScanRegistrar` to rely on a `ClassPathBeanDefinitionScanner`
and its `scan()` functionality since this is all what we need to trigger a `GatewayProxyInstantiationPostProcessor`
for scanned components
* Fix `GatewayProxyInstantiationPostProcessor` to call an `afterPropertiesSet()` as well
* Add a `value()` alias attribute for the `@MessagingGateway` to satisfy a name resolution from a `@Component`
* Replace annotation chain resolution logic by new `MessagingAnnotationUtils.resolveMergedAttribute()` API
* Use `MergedAnnotations` API in the `AnnotationGatewayProxyFactoryBean` to preserve a logic for attribute
resolution from the annotation hierarchy
* Add expression resolution for attribute values in the `AnnotationGatewayProxyFactoryBean`
* Make a `GatewayInterfaceTests.CustomBeanNameGenerator` as an `AnnotationBeanNameGenerator`
extension to satisfy the test logic expectations: no custom name if explicit is present
* Clean up some doc typos after merge conflict

The fix in this commit essentially resolves some old JIRA ticket: https://jira.spring.io/browse/INT-4558

* * Remove redundant `MessagingAnnotationUtils.resolveMergedAttribute()`
* Optimize the logic in the `AnnotationGatewayProxyFactoryBean` around
annotation attributes to plain annotation - no adaptation to maps"
bd207ff42a7bc88b3d4797d97126f47fc4002b84,2022-11-01 15:28:54-04:00,"Add observation to inbound endpoints (#3930)

* Add observation to inbound endpoints

* * Improve `Observation` logic in the `MessageProducerSupport` and `MessagingGatewaySupport`
* Clean up Javadocs in observation support classes
* Add test for `MessagingGatewaySupport` instrumentation into `IntegrationObservabilityZipkinTests`
* Add docs for `@EnableIntegrationManagement.observationPatterns()`
* The generated docs for metrics and spans looks OK: have both `Gateway` and `Handler` section now

* * Fix Checkstyle violations

* * Fix `IntegrationMBeanExporter` to filter out a `MessageProducer` from sources.
Marking a `MessageProducerSupport` with an `IntegrationInboundManagement`
causes it to be considered as a source for JMX.
Technically it might have a reason since it is indeed a source, but that's fully different story

* * No observation instrumentation by default

* * Fix ""no observation by default"" configuration logic"
e3e55c3a85136f309fcb45bb2c85ad73185888c9,2022-11-02 10:19:58-04:00,"Add Java DSL for GraphQL (#3934)

* Add Java DSL for GraphQL

* GraphQl.outboundChannelAdapter() -> outboundGateway()

* * Add `private` ctor to `GraphQl`

* * Just `GraphQl.gateway()` - there is not going to be any other components
to handle GraphQL operations.
Also, the `outbound` in the name might confuse, where we, essentially, query a GraphQL data

* Fix typo in the doc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
eec5f4dc72de4216435c958e976870de4bd72cf1,2022-11-02 11:45:41-04:00,"Fix gateway proxy for generic interface in XML (#3935)

* Fix gateway proxy for generic interface in XML

Without a `FactoryBean.OBJECT_TYPE_ATTRIBUTE` the application context cannot determine a qualified
with generic an interface injection

* Set back `FactoryBean.OBJECT_TYPE_ATTRIBUTE` in the `GatewayParser`
when not in AOT mode.
Set a `targetType` when used in AOT

* * Remove unused import

* * Fix `GatewayParserTests` for new code base"
0b9bab313b6aacefb42d7b869f4eca015cd18e61,2022-11-03 12:18:35-04:00,"Add Java DSL for Camel module and docs (#3937)

* Add Java DSL for Camel module and docs

* Introduce a `LambdaRouteBuilder` option into the `CamelMessageHandler`
to easily provide the Camel route just in-place

* * Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
0d8e286572d8446e5a1e1b78e923afa44bc7afd3,2022-11-07 13:59:05-05:00,"GH-3903: Improve AOT for gateway proxy beans (#3904)

* GH-3903: Improve AOT for gateway proxy beans

Fixes https://github.com/spring-projects/spring-integration/issues/3903

* Fix `MessagingGatewayRegistrar` to set a `targetType` on the bean definition
instead of `FactoryBean.OBJECT_TYPE_ATTRIBUTE`
* Rework `GatewayProxyBeanRegistrationAotProcessor` to the
`GatewayProxyInitializationAotProcessor implements BeanFactoryInitializationAotProcessor`
to avoid custom code generation
* Remove tests which rely on the `FactoryBean.OBJECT_TYPE_ATTRIBUTE`

* * Add `setBeanClass(GatewayProxyFactoryBean.class)` to satisfy Spring container expectations

* * Rework `GatewayProxyInitializationAotProcessor` to deal with generics
we are exposing now on the `ProxyFactoryBean`"
053c86ab0575e613343bca68db839781cc8e2be7,2022-11-07 15:47:19-05:00,"GH-3938: Fix HTTP XML configuration for ambiguity (#3939)

* GH-3938: Fix HTTP XML configuration for ambiguity

Fixes https://github.com/spring-projects/spring-integration/issues/3938

The `encoding-mode` is a property of the `RestTemplate`.
Therefore, it cannot be set on the component configuration together with
an externally injected `rest-template`

Even if `HttpRequestExecutingMessageHandler` has an assertion for such
an ambiguity, the XML parser just ignores this `encoding-mode`
when it encounters the `rest-template`

* Fix `HttpAdapterParsingUtils.verifyNoRestTemplateAttributes()` to check for not allowed
attributes with a `encoding-mode` as well
* Remove a `default` from the `encoding-mode` to not cause an ambiguity in the parser
* Fix some typos in the `spring-integration-http.xsd`
* Rework `OutboundResponseTypeTests` to JUnit 5

**Cherry-pick to `5.5.x`**

* * Fix error handling for `encoding-mode` in the `HttpAdapterParsingUtils`
* Cover `encoding-mode` and `rest-template` ambiguity with a test against failing XML configuration

* * Improve error message for ambiguous attributes in the `HttpAdapterParsingUtils`"
da9660a7aebde5e5802eb02223d6b2f661ba565b,2022-11-14 16:28:51-05:00,"GH-3846: Document Hazelcast module (#3941)

* GH-3846: Document Hazelcast module

Fixes https://github.com/spring-projects/spring-integration/issues/3846

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
88e259ccf2c8fe5417d5e4251f98a51f0d268647,2022-11-15 14:11:12-05:00,"Add observation for message channels (#3944)

* Add observation for message channels

* Add observation for message channels

The `MessageChannel.send()` is, essentially, only the point in Spring Integration where we produce a message
and can emit a `PRODUCER` kind span.

* Implement `IntegrationObservation.PRODUCER` infrastructure based on the `MessageSenderContext`
* Implement an observation emission in the `AbstractMessageChannel` based on the mentioned `IntegrationObservation.PRODUCER`
* Build a `MutableMessage.of(message)` to be able to modify message header in the `MessageSenderContext` via tracer `Propagator`
or other tracing injection instrument
* Document which components are instrumented with an `ObservationRegistry`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
2f1c202c20f59db2873a20fb04537f9e4da42882,2022-11-15 14:47:46-05:00,"GH-3945: Fix `not eligible for getting processed` (#3947)

* GH-3945: Fix `not eligible for getting processed`

Fixes https://github.com/spring-projects/spring-integration/issues/3945

The `IntegrationManagementConfiguration` produces an `IntegrationManagementConfigurer` which is a `BeanPostProcessor`.
According to Spring recommendation this kind of infrastructure beans must be declared as `static`.
Due to an `implements ImportAware, EnvironmentAware` nature of the `IntegrationManagementConfiguration`,
we cannot use `static @Bean` method.
But since the `IntegrationManagementConfiguration` is not involved in any bean post-processing,
it is safe to follow recommendation and mark it as a `@Role(BeanDefinition.ROLE_INFRASTRUCTURE)`.

* Fix `MessagePublishingInterceptor` to initialize `MessagingTemplate` and `DestinationResolver` lazily
* Fix `AbstractMethodAnnotationPostProcessor` to initialize `DestinationResolver` lazily

**Cherry-pick to `5.5.x`**

* * Use `getChannelResolver()` internally in the `AbstractMethodAnnotationPostProcessor`
instead of direct property access which might not be initialized yet
* Use a plain `boolean` for `templateInitialized` in the `MessagePublishingInterceptor`
to avoid skips in other thread where and move on with still not initialized properties

* * Remove unused import

* * Fix `this.` prefix for `beanFactory` property reference"
e9257958fe657c6250b397c59fa38a8f2ea74d53,2022-11-16 14:19:26-05:00,"GH-3946: Revise Router channelKeyFallback option (#3948)

* GH-3946: Revise Router channelKeyFallback option

Fixes https://github.com/spring-projects/spring-integration/issues/3946

The `AbstractMappingMessageRouter` has both `resolutionRequired` and `channelKeyFallback`
as `true` by default.
End-users expects them to back off when they set a `defaultOutputChannel`.
They really want something similar to Java `switch` statement

* Change the logic in the `AbstractMappingMessageRouter` to reset `channelKeyFallback`
to `false` when `defaultOutputChannel` to avoid attempts to resolve channel from name,
but rather fallback to `defaultOutputChannel` as it states from th mentioned
Java `switch` statement experience
* Deprecate `RouterSpec.noChannelKeyFallback()` in favor of newly introduced `channelKeyFallback(boolean)`
* Call `channelKeyFallback(false)` from an overloaded `defaultOutputToParentFlow()`
to reflect the mentioned expected behavior in Java DSL as well.
* Respectively, deprecate `KotlinRouterSpec.noChannelKeyFallback()` wrapper
in favor of newly introduced `channelKeyFallback(channelKeyFallback: Boolean)`
* Remove redundant already `noChannelKeyFallback()` option in the `NoFallbackAllowedTests`
* Document the change and new behavior

* Fix `IntegrationGraphServerTests` to `setChannelKeyFallback(true)` explicitly

* Remove not relevant `default-output-channel` from the `DynamicRouterTests-context.xml`

* Reject an `AbstractMappingMessageRouter` configuration where `defaultOutputChannel` is provided
and both `channelKeyFallback` & `resolutionRequired` are set to `true`.
Such a state makes `defaultOutputChannel` as not reachable and may cause some confusions in target
applications.

* Remove `&` symbol from JavaDocs

* Fix `boolean` expression for `AbstractMappingMessageRouter` configuration check

* Fix `IntegrationGraphServerTests` for new router behavior

* Improve language in docs"
508fb167df28b70821ab7bb22a313e63074b1f18,2022-11-16 15:10:26-05:00,"GH-3555: Change logger order for errorChannel (#3949)

* GH-3555: Change logger order for errorChannel

Fixes https://github.com/spring-projects/spring-integration/issues/3555

The default global `errorChannel` has a `LoggingHandler` as a subscriber.
It is subscribed without any `order` which may lose logging messages,
when another subscriber with re-throw is present.

* Set default `LoggingHandler` on the default `errorChannel` to `Ordered.LOWEST_PRECEDENCE - 100`
to give a room for custom subscribers without an `order` and still get error logged

* Add extra note in docs about an order for custom subcribers

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
3c40b0191563f701c0fedd1df00c530f603ccf84,2022-11-18 11:26:46-05:00,"Expose more reflection hints (#3951)

* Expose more reflection hints

* Bring back `@Reflective` on `Pausable` - for possible end-user usage
* Add `ReactiveMessageHandler` hint since its method is used reflectively
in the `IntegrationRSocketMessageHandler`
* Add `@Reflective` on the `ServerRSocketMessageHandler.handleConnectionSetup()`
since it is used reflectively for a `registerHandlerMethod()`
* Add `KafkaRuntimeHints` to expose `Pausable` contract on Kafka inbound endpoints
for SpEL invocation via Control Bus
* Document native images support

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
6fd4fd3dd97a700dd82d851fa627871f7bf61bff,2022-12-07 08:56:40-05:00,"GH-3959: MqttConFailedEvent for normal disconnect (#3961)

* GH-3959: MqttConFailedEvent for normal disconnect

Fixes https://github.com/spring-projects/spring-integration/issues/3959

The `MqttCallback.disconnected(MqttDisconnectResponse)` in Paho v5 client is also
called when server initiates a disconnection.
In this case that `MqttDisconnectResponse` does not have a `cause` value

* Modify `MqttConnectionFailedEvent` to make a `cause` property optional
* Fix `Mqttv5PahoMessageDrivenChannelAdapter` & `Mqttv5PahoMessageHandler`
to not check for `cause`, but emit an `MqttConnectionFailedEvent` for any `disconnected()` calls

Unfortunately current Paho v3 client does not call `connectionLost()` for normal disconnections
and we cannot react for this callback with an `MqttConnectionFailedEvent`

**Cherry-pick to `5.5.x`**

* Fix language in doc

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
4cd00295797e5152bbfca8ee0102670f30ec6a07,2022-12-15 13:05:35-05:00,"GH-3954: Fix WebFlux XML config for ambiguity (#3973)

* GH-3954: Fix WebFlux XML config for ambiguity

Fixes https://github.com/spring-projects/spring-integration/issues/3954

When `web-client` attribute is provided for the WebFlux outbound components configuration via XML,
the `encoding-mode` is silently ignored

* Check for `encoding-mode` attribute presence in the `WebFluxOutboundChannelAdapterParser`
when `web-client` is provided and throw respective exception to reject such a config

**Cherry-pick to `5.5.x`**

* * Improve error messages in the `WebFluxOutboundChannelAdapterParser`"
d38e0d8720870e40b1f4266c24911ff584b0dd42,2022-12-20 11:46:02-05:00,"GH-3962: Support SFTP < v5 for rename (#3964)

* GH-3962: Support SFTP < v5 for rename

Fixes https://github.com/spring-projects/spring-integration/issues/3962

Turns out the `SftpClient.CopyMode` options are supported only starting SFTP v5

* Check for the version from the client and fallback to the logic we had before with JSsch:
try to rename, delete existing file if such an exception status is thrown and retry to rename

* * Fix `SftpOutboundTests` with answering an explicit SFTP version for an `SftpClient` mock"
49a9b7e314ccbb9d102fcf8a15207618faacbae5,2022-12-20 11:46:48-05:00,"Obtain observed timers in the Integration Graph (#3967)

* Obtain observed timers in the Integration Graph

The `Observation` populates slightly different Micrometer timer names and their tags

* Fix `MicrometerNodeEnhancer` to search timers in the registry according to the `Observation`
convention if the provided component is observed
* For that purpose expose an `IntegrationManagement.isObserved()` option to check
of component is instrumented with an `Observation`
* Improve the logic in the `IntegrationGraphServer` to delegate into a `Function`
to call `micrometerEnhancer.enhance()` instead of `static` property which might not
be OK in the environment where several integration applications are ran in the same JVM

* * Collect times into graph for inbound gateways & producers

* Fix language in javadoc of new `IntegrationManagement.isObserved()`

* Add `@Nullable` to `MicrometerNodeEnhancer.buildTimerStats()` param to satisfy this method contract

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
308f3fadeb46526780cf53a025e113db815883b3,2023-01-05 11:35:24-05:00,"Do not build exception instances in advance (#3983)

* Do not build exception instances in advance

When no `cause` and no clean context of the exception thrown,
the code place where an exception has been created is confusing.

* Fix `SimpleMessageStore` to create an `out of capacity` exception in the
`addMessagesToGroup()` exactly at the point where it is thrown
* Fix `FunctionExpression` and `SupplierExpression` do not pre-create `readOnlyException`:
it is unlikely these kind of expressions are going to be used in the SpEL `write` context,
so we save some time and memory not creating extra object and the plain call `throw new`
gives us a clean context what method call has ended up with such an exception

* * Extract `outOfCapacityException` to the method in the `SimpleMessageStore`
to avoid duplication.
Even if we got in the end extra line in th stack trace, it is still clear from
where it is thrown:

```
org.springframework.messaging.MessagingException: SimpleMessageStore was out of capacity (1) for group 'foo', try constructing it with a larger number.

	at org.springframework.integration.store.SimpleMessageStore.outOfCapacityException(SimpleMessageStore.java:324)
	at org.springframework.integration.store.SimpleMessageStore.addMessagesToGroup(SimpleMessageStore.java:302)
	at org.springframework.integration.store.AbstractMessageGroupStore.addMessageToGroup(AbstractMessageGroupStore.java:189)
	at org.springframework.integration.store.SimpleMessageStoreTests.shouldNotHoldMoreThanGroupCapacity(SimpleMessageStoreTests.java:128)
```"
d298df8d0fbd3eb123444d96e57bb4f05f9acaa8,2023-01-11 13:34:28-05:00,"Revise JS support for regular JVM (#3989)

* Revise JS support for regular JVM

Turns out that we just need to have `org.graalvm.sdk:graal-sdk` and `org.graalvm.js:js`
dependencies for regular JVM to enable JavaScript support for Spring Integration Scripting module

* Add respective `providedImplementation` dependencies
* Remove `@EnabledIfSystemProperty` from unit tests
* Mention those dependencies in the doc

* Rework sentence in the doc for better English

Co-authored-by: Gary Russell <grussell@vmware.com>

Co-authored-by: Gary Russell <grussell@vmware.com>"
ebba37497f9f96ffb43fc5a3b94b4d07a50abd81,2023-01-23 11:07:19-05:00,"GH-3993: Fix async race condition in TcpOutGateway (#3995)

* GH-3993: Fix async race condition in TcpOutGateway

Fixes https://github.com/spring-projects/spring-integration/issues/3993

When `TcpOutboundGateway` is in an `async` mode and `CCF` is configured
not for `singleUse` an `Semaphore` around an obtained `TcpConnection` is involved.
If we fail on `TcpConnection.send()`, resources are not clean up, including the
mentioned `Semaphore`: in async mode this happens only when we receive a reply.

* Catch an exception on the `TcpConnection.send()` and perform `cleanUp()` in async mode.
* Add `cleanUp()` into a scheduled task from the `TcpOutboundGateway.AsyncReply`
when no reply arrives in time.
* Optimize `TcpOutboundGateway.AsyncReply` behavior to cancel no-reply scheduled task
when reply arrives into a `CompletableFuture`

**Cherry-pick to `5.5.x`**

* * Call `cleanUp()` from no response scheduled task
only if `future.completeExceptionally()` is `true`"
f01e2b85533c16b9a962255cbeb6352adb4d1aa4,2023-01-23 14:22:42-05:00,"GH-3994: Register native hints for Graph model (#3996)

Fixes https://github.com/spring-projects/spring-integration/issues/3994

Essentially, migrate those hints from Spring Boot Actuator:
an `IntegrationGraphServer` can be used without Spring Boot

* Introduce `IntegrationGraphRuntimeHints` - implementation of `RuntimeHintsRegistrar`
to register reflection hints for `Graph` and top-level `IntegrationNode` types.
* Use `@ImportRuntimeHints` on the `IntegrationGraphServer` to make those hints
conditional."
841289002c0321b1610b7a4184993148488749dd,2023-02-01 14:05:20-05:00,"GH-3998: Fix gateway docs for `@Payload` (#4000)

* GH-3998: Fix gateway docs for `@Payload`

Fixes https://github.com/spring-projects/spring-integration/issues/3998

The `GatewayProxyFactoryBean` now deals only with a `MethodArgsHolder` as a root evaluation context object.
There is no `#args` and `#method` SpEL variables anymore.
However, the `gateway.adoc` still refer to those.

* Fix `gateway.adoc` for a proper expressions and actual wording

* * Cross link to `gateway-expressions` paragraph for better context"
d9d7c49aacb2bb8a71a3256d59fb478b09a29cf4,2023-02-01 14:13:40-05:00,"Propagate and Observation from Reactive context (#3999)

To propagate an `Observation` from reactive stream (e.g. WebFlux)
we have to capture its context and set it into the current thread scope.

* Add a `io.micrometer:context-propagation` dependency to support reactive context propagation
* Populate a `parentObservation` in the `IntegrationObservation.PRODUCER.observation()`
since it is not available for tracing on `Observation.onStart()`.
Might be tentative until upcoming fix in Micrometer Observation
* Populate from reactive context in the `WebFluxInboundEndpoint` where we use just `send()` operation downstream
* Populate from reactive context in the `MessagingGatewaySupport` where we use `send()` operation downstream or `FluxMessageChannel.subscribeTo()`
* Use `contextCapture()` in the `FluxMessageChannel` to gather a `ThreadLocal` info into a Reactor context
and then set back to `ThreadLocal` in the `transformDeferredContextual()` which really happens on a different thread
* Verify a trace propagation from WebFlux to an integration flow via Brave instrumentation in the `WebFluxObservationPropagationTests`"
44000b9606666a92799c4a55748d5da1307951fc,2023-02-06 11:58:41-05:00,"GH-4002: Deprecate `ConsumerStopAction` in MQTT (#4006)

Fixes https://github.com/spring-projects/spring-integration/issues/4002

Turns out the `ConsumerStopAction` was introduced in a point version to mitigate an unsubscription bug
and let to preserve a previous behaviour.

* Deprecate `ConsumerStopAction` in favor of just `cleanSession` flag in the `MqttConnectOptions`

**Cherry-pick to `5.5.x`**"
6a2ff0cd99bc2c069c959586a395a5bc96e5e05a,2023-02-06 12:20:42-05:00,"GH-4001: Doc for cooperation with some HZ objects (#4003)

* GH-4001: Doc for cooperation with some HZ objects

Fixes https://github.com/spring-projects/spring-integration/issues/4001

The `IQueue`, `ITopic` and `IExecutorService` can be used with Spring Integration
channel as is without any extra component implementations.

* Document the cooperation feature with Hazelcast objects via samples

* * Add a sample about an Inbound Channel Adapter on the `IQueue`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
b482b002cb2e7a53d98388d2743fb3ee453ad9c3,2023-02-15 17:26:12-05:00,"GH-4014: MQTT ClientManager: completion timeouts (#8552)

Fixes https://github.com/spring-projects/spring-integration/issues/4014

The `ClientManager` implementations uses by mistake a `connectionTimeout` for operations with completion wait

* Introduce `completionTimeout` and `disconnectCompletionTimeout` for `ClientManager`
abstraction to realign the logic with existing channel adapters and Paho Client by itself.
* Deprecate `DEFAULT_COMPLETION_TIMEOUT` and `DISCONNECT_COMPLETION_TIMEOUT` constants
in the `AbstractMqttMessageDrivenChannelAdapter` in favor of respective replacement in the `ClientManager`
* Pull `disconnectCompletionTimeout` property from the `MqttPahoMessageDrivenChannelAdapter` to its superclass
* Use new `disconnectCompletionTimeout` in the `Mqttv5PahoMessageDrivenChannelAdapter` for similar `disconnectForcibly()` call
* Fix Lifecycle race condition when `ClientManager` is started by the outbound channel adapter
(`Integer.MIN_VALUE` phase and auto-startup - see `DefaultLifecycleProcessor.doStart()` and logic around `dependencies`)
which is much earlier than `MessageProducerSupport` (`Integer.MAX_VALUE / 2` phase) and there a `connectComplete()` callback
might be called before the `MessageProducerSupport.start()`.
For that purpose check for an `isRunning()` in the `connectComplete()` before subscribing and set `readyToSubscribeOnStart` flag
to `subscribe()` in a `doStart()` of this `MqttMessageDrivenChannelAdapter`
* Remove redundant `MqttPahoMessageDrivenChannelAdapter.cleanSession` property in favor of
`this.clientFactory.getConnectionOptions().isCleanSession()` call

GH-8550: MQTT: Always re-subscribe on re-connect

Fixes https://github.com/spring-projects/spring-integration/issues/8550

Turns out the Paho MQTT client does not re-subscribe when connection
re-established on automatic reconnection

* Fix `AbstractMqttMessageDrivenChannelAdapter` to always subscribe to their topics
in the `connectComplete()` independently of the `reconnect` status
* Verify behavior with `MOSQUITTO_CONTAINER` image restart in Docker"
ac577e9ef7e7368643f1f654a9b90af95d612c85,2023-02-21 12:02:15-05:00,"Optional io.micrometer:context-propagation (#8556)

For better performance by default it is better to not pull
a `io.micrometer:context-propagation` a hard dependency.

* Remove `io.micrometer:context-propagation` dependency management
* It is pulled transitively by the `io.micrometer:micrometer-tracing-integration-test` in test scope
* Rework all the `ContextSnapshot` usage in the reactive code to respective recommended `handle()` API in `Flux` and `Mono`"
ee2b6b409828c531398409c580b58ffd0a1f67d9,2023-02-21 12:57:30-05:00,"Fix MQTT Inbound `readyToSubscribeOnStart` logic (#8557)

We cannot always reset `readyToSubscribeOnStart` to `false` in the `stop()`
since we may be connected to `ClientManager` and have `cleanStart` option,
so we `unsubscribe()` in the stop and then when we start there is no way to subscribe back

* Reset `readyToSubscribeOnStart` in the `AbstractMqttMessageDrivenChannelAdapter.doStop()`
only if we don't unsubscribe for a `cleanSession` reason.
* Also reset it in the `connectionLost`, so next `connectComplete` will take care about subscription
or `readyToSubscribeOnStart` state change
* Use `isActive()` instead of `isRunning()` in the `connectComplete()` since there is a race
condition when connection is established but `doStart()` has not returned yet, but already passed
`if (this.readyToSubscribeOnStart)` line"
fe9b59ea01ef91d82cd972b3e1800655149de349,2023-02-22 14:05:53-05:00,"GH-3813: ClientWebSocketContainer URI setting (#8561)

* GH-3813: ClientWebSocketContainer URI setting

Fixes https://github.com/spring-projects/spring-integration/issues/3813

Introduce a `ClientWebSocketContainer(WebSocketClient client, URI uri)` ctor
to let end-user to decide what and how should be encoded the URI for WebSocket connection

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
acd8a03d4d3d700790d3fa51e2755f1c326d2434,2023-02-22 15:23:13-05:00,"GH-3957: Add JmsInboundGateway.replyToExpression (#8560)

* GH-3957: Add JmsInboundGateway.replyToExpression

Fixes https://github.com/spring-projects/spring-integration/issues/3957

Sometimes we cannot use a standard `JmsReplyTo` property for sending replies from the server.
A `DestinationResolver` API does not have access to the request message.

* Introduce a `ChannelPublishingJmsMessageListener.replyToExpression` property to evaluate
a reply destination against request JMS `Message`
* Use this expression only of no `JmsReplyTo` property
* Expose this property on Java DSL level
* To simplify end-user experience with lambda configuration for this property, introduce a `CheckedFunction`
which essentially re-throws exception ""sneaky"" way

* Fix Javadoc for `CheckedFunction`

* * Fix language in docs
* Fix Javadocs lines length
* Regular `catch` and re-throw in the `CheckedFunction`"
ce9f7f4321a68a6734675fcf58ab6ee168253236,2023-02-28 16:34:19-05:00,"GH-8562: Fix streaming source for remote calls (#8564)

* GH-8562: Fix streaming source for remote calls

Fixes https://github.com/spring-projects/spring-integration/issues/8562

The `AbstractRemoteFileStreamingMessageSource.doReceive()` takes files first from a `toBeReceived` queue.
When `AbstractRemoteFileStreamingMessageSource.remoteFileToMessage()` fails to fetch the file content
because of interim connection issue, we reset this file from a filter and rethrow an exception.
The next `receive()` call will just go ahead to the next entry in the `toBeReceived` queue, but the
file we have just failed for will be retried only on the next list call to the remove directory.
This essentially breaks a possible in-order target application logic.

* Introduce `AbstractRemoteFileStreamingMessageSource.strictOrder` option to clear the `toBeReceived` queue
 when we fail in the `remoteFileToMessage()`, so the next `receive()`
 call would re-fetch files from remote dir, because the filter has been reset for those files.
* Fix `AbstractFileInfo.toString()` to not perform remote calls when we just log this file.
For example, we reset the file for connection failure and log the message about it,
but it fails again because we request `size` of the file which may require a remote connection.

**Cherry-pick to `6.0.x` & `5.5.x`**

* * Revert `AbstractFileInfo` changes
* Override `toString()` in `SmbFileInfo` instead -
exactly the place where connection is used to obtain
file attributes like `size` or `lastModified`"
dfe45c7c2946c076aa504ea69e58bc7795260a49,2023-02-28 17:33:31-05:00,"GH-8559: Document how to enable SOCKS for SFTP (#8565)

* GH-8559: Document how to enable SOCKS for SFTP

Fixes https://github.com/spring-projects/spring-integration/issues/8559

An out-of-the-box `SshClient` does not provide a smooth HTTP/SOCKS proxy configuration.

* Mention in the `sftp.adoc` that `JGitSshClient`, configured with SOCKS,
can be injected into a `DefaultSftpSessionFactory`
* Fix Javadocs for `DefaultSftpSessionFactory`, respectively

* Fix language in doc

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
8fbf75f42cbfc8b8d476a4df992166d1a2cef694,2023-03-15 10:10:02-04:00,"Some `LockRegistryLeaderInitiator` improvements (#8570)

* Some `LockRegistryLeaderInitiator` improvements

It is better to not go to the target lock provider at all
if the current thread is already interrupted.

* Check for the `Thread.currentThread().isInterrupted()` in the `while` loop
and `restartSelectorBecauseOfError()` immediately without checking for a lock
* Fix some other simple typos in the `LockRegistryLeaderInitiator`

**Cherry-pick to `6.0.x`**

* * Introduce a `LeaderSelector.yielding` flag
to revoke leader smoothly.
Turns out just canceling the `Future` may lead to a broken lock
where we cannot unlock it because the target lock repository may not work
with interrupted threads.
This way a new leader must wait until the lock is expired in the store"
d7150685b1db5d2d7b08fd3abeaf64a106013f91,2023-03-15 11:18:03-04:00,"RedisLockRegistry: Don't expire not acquired lock

Fix race condition, when methods `RedisLockRegistry#expireUnusedOlderThan` and `RedisLockRegistry#obtain` are executed successively. 

It's possible to delete the lock from `RedisLockRegistry#expireUnusedOlderThan` method, when lock is created but is not acquired (`RedisLock#getLockedAt = 0`)
It can lead to the situation, when `RedisLockRegistry#obtain` returns multiple locks with the same redis-key, which shouldn't happen at all.

* Skip locks from expiration when their `lockedAt == 0` - new, not acquired yet.

**Cherry-pick to `6.0.x` & `5.5.x`**"
1c90a60def2ee4bad887fddcc13d5c77df65cfa2,2023-03-20 10:56:03-04:00,"GH-8566: Fix `SftpSession.append()` for `Write` (#8576)

Fixes https://github.com/spring-projects/spring-integration/issues/8566

Turns out some SFTP servers are strict enough to not let to append into existing file
if we don't give in addition a `Write` open mode flag as well

**Cherry-pick to `6.0.x`**"
05f1fd89ba0c914cfd237e3bca3ddec940ee9bbf,2023-03-20 10:59:25-04:00,"GH-8573: Fix `KafkaMessageSource` samples in docs (#8575)

Fixes https://github.com/spring-projects/spring-integration/issues/8573

* Also add a Kotlin DSL sample

**Cherry-pick to `6.0.x` & `5.5.x`**"
8ed4e5f444798254df3350489bcca123bcf7b3e7,2023-03-20 12:52:47-04:00,"Doc for `@Gateway` in the `@MessagingGateway` (#8578)

It is not obvious from the `@MessagingGateway` Javadocs how to configure
an individual service method

* Add links and explanation about per-method `@Gateway`
annotation into the `@MessagingGateway`"
fcb06bac61317472396f3bb06f169c158fc56363,2023-03-20 13:19:19-04:00,"Warn about dropped message in filter (#8579)

* Warn about dropped message in filter

Buy default the `MessageFilter` just drops a discarded message silently.
If a request-reply gateway is used upstream, then it becomes unclear
why the flow sometimes doesn't work.

* Add a waring log ot emit for default behavior.
This still doesn't fix the request-reply problem, but at least it can
give a clue what is going on

* * Mention `nullChannel` variant to ignore even warn

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
1bec420fd1b1c0ed73672974df14ccf673630154,2023-03-21 17:43:00-04:00,"Do not block by default (#8580)

Currently, many timeouts in the project are like `-1` or other negative value
with a meaning to wait indefinitely.

According to distributed systems design and bad demo developing experience
it is not OK to block forever.

* Rework most of the timeouts in the framework to be `30` seconds.
Only one remained as `1` seconds is a `PollingConsumer` where it is
better to not block even for those 30 seconds when no messages in the queue,
but let the polling task be rescheduled.
* Remove the `MessagingGatewaySupport.replyTimeout` propagation down to the
`PollingConsumer` correlator where it was a `-1` before and blocked
the polling thread on the `Queue.poll()`.
This fixed the problem with a single thread in a pool for auto-configured `TaskScheduler`.
Now with 1 seconds wait time we are able to switch to other scheduled tasks
even with only 1 thread in the pool"
4fdbdf180eb8428f34389dee0fcc60c8389977b1,2023-03-29 10:15:47-04:00,"GH-8577: Revise `ImapIdleChannelAdapter` logic (#8588)

* GH-8577: Revise `ImapIdleChannelAdapter` logic

Fixes https://github.com/spring-projects/spring-integration/issues/8577

When we process mail messages in async manner, it is possible that we end up
in a race condition situation where the next idle cycle closes the folder.

It is possible to reopen the folder, but feels better to block the current idle
cycle until we are done with the message and therefore keep folder opened.

* Deprecate `ImapIdleChannelAdapter.sendingTaskExecutor` in favor of an `ExecutorChannel`
as an output for this channel adapter or similar async hand-off downstream.
* Make use of `shouldReconnectAutomatically` as it is advertised for this channel adapter
* Optimize the proxy creation for message sending task

* * Remove `ImapIdleChannelAdapter.sendingTaskExecutor`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
4f5250b470c86540828e07944067afa2f88d956f,2023-04-10 11:53:45-04:00,"Propagate Reactor context over headers (#8591)

* Propagate Reactor context over headers

When we do something like `Flux.from(Publisher)`
and don't compose it with the one involved in the `Subscriber` context,
we lose this context.

* Provide a mechanism to propagate a Reactor context over message header
produce within that context.
* Restore this context in the `FluxMessageChannel` for a new publisher
we use in this channel

**Cherry-pick to `6.0.x`**

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
b99729544d35267399c0c1c8501fa5ea5ae4ffb0,2023-04-13 09:16:42-04:00,"GH-8586: Deprecate IntegrationComponentSpec.get() (#8594)

* GH-8586: Deprecate IntegrationComponentSpec.get()

Fixes https://github.com/spring-projects/spring-integration/issues/8586

The `IntegrationComponentSpec` is not a plain wrapper around single component.
Sometimes it comes with several components where all of them must be registered
as beans.
If `IntegrationComponentSpec.get()` is called from end-user code, we may lose
other related components, for example filters in the `FileInboundChannelAdapterSpec`.

* Deprecate `IntegrationComponentSpec.get()` with no-op for end-user,
rather encourage to leave it as is and let the framework take care about its lifecycle
and related components registration
* Fix `IntegrationComponentSpec` logic to deal as a simple `FactoryBean` instead of
extra overhead via `AbstractFactoryBean`
* Use `IntegrationComponentSpec.getObject()` in the framework code where `get()` was called
* Fix tests to expose `IntegrationComponentSpec` as beans instead of previously called `get()`
* Some other clean up and typos fixes in the affected classes
* Document the change

* * Revert `ObjectStringMapBuilder` in the `KafkaInboundGatewaySpec.getComponentsToRegister()`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Remove trailing whitespace in the `ScriptMessageSourceSpec`

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
aaaa489f0c66bdf98de59cc38a24d5a261d99b3c,2023-04-13 12:56:45-04:00,"Optimize `MessageTriggerAction` for Java DSL (#8595)

Currently, the `MessageTriggerAction.trigger` is configured
on the `BaseIntegrationFlowDefinition` to be called via reflection
in the `MessagingMethodInvokerHelper`

* Represent a `MessageTriggerAction.trigger` as a `Consumer<Message<?>>` method reference
and use a `LambdaMessageProcessor` for direct call
* Add a `Consumer` support for `LambdaMessageProcessor`"
053cc00484bb513e931f4688003a4ba5c39f32e3,2023-04-13 17:03:39-04:00,"GH-3557: Add maxDepth, dirPredicate to FileReadMS (#8596)

* GH-3557: Add maxDepth, dirPredicate to FileReadMS

Fixes https://github.com/spring-projects/spring-integration/issues/3557

* Expose a `watchMaxDepth` on the `FileReadingMessageSource` for its `Files.walkFileTree()` API usage
* Add `watchDirPredicate` option ot the `FileReadingMessageSource` to skip sub-tree for `Files.walkFileTree()`
scanning according to some condition against directory `Path`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
feb4705e79f7cb53a001578acd12357e02487db7,2023-04-18 10:16:19-04:00,"Improve Java DSL for Rabbit Streams (#8598)

* Improve Java DSL for Rabbit Streams

* Expose simple properties for `streamName` and `superStream`
on the `RabbitStreamInboundChannelAdapterSpec`
* Add `superStream(String superStream, String name, int consumers)` option
* Add `outboundStreamAdapter(Environment environment, String streamName)` factory for
simple use-cases
* Add `RabbitStreamTests` integration test to cover Rabbit Streams support
 and demonstrate respective Java DSL
* Mention the change in the docs

* * Fix typos in code and docs"
8dd1332d0a6c969f697db21c55221599a50c50a2,2023-04-18 11:12:23-04:00,"Fix NPEs in DSL Specs (#8597)

* Fix NPEs in DSL Specs

The `BaseWsInboundGatewaySpec` and `TailAdapterSpec` don't override super methods
and when we call them we fail with NPE since `target` was not populated.

* Fix `BaseWsInboundGatewaySpec` and its inheritors to populate the `target`
from their ctors.
* Remove redundant methods from `BaseWsInboundGatewaySpec` hierarchy
* Propagate `AbstractWebServiceInboundGateway` properties directly to the target
from the `BaseWsInboundGatewaySpec` inheritors
* Override `MessageProducerSpec` methods in the `TailAdapterSpec`
to populate respective option into the `FileTailInboundChannelAdapterFactoryBean`
* Expose more missed options for producer endpoint in the `FileTailInboundChannelAdapterFactoryBean`

**Cherry-pick to `6.0.x` & `5.5.x`**

* * `acceptIfNotNull()` for `errorMessageStrategy` in the `FileTailInboundChannelAdapterFactoryBean`

* * Fix `Unmarshaller` population logic in the `MarshallingWsInboundGatewaySpec`"
1a579a6492572b9f0f342a087d56e94e11eabbea,2023-04-19 12:54:00-04:00,"GH-8600: Fix WebSocket `removeRegistration` (#8601)

* GH-8600: Fix WebSocket `removeRegistration`

Fixes https://github.com/spring-projects/spring-integration/issues/8600

When we register a dynamic WebSocket endpoint and use a `WebSocketHandlerDecoratorFactory`
such an endpoint is not removed on an `IntegrationFlow` destruction.
The actual `WebSocketHandler` is decorated, however we still use an initial one
for condition.

* Refactor `IntegrationWebSocketContainer` to expose a `protected` setter for the
`WebSocketHandler` which is called from the `ServerWebSocketContainer` after decoration

**Cherry-pick to `6.0.x` & `5.5.x`**

* Fix language in Javadocs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
212bd46d65014f8adb4c2a03fb214c0f834c59ef,2023-05-01 15:24:00-04:00,"GH-3763: Add `handleReactive()` for Java DSL (#8605)

* GH-3763: Add `handleReactive()` for Java DSL

Fixes https://github.com/spring-projects/spring-integration/issues/3763

Add a convenient terminal operator to `BaseIntegrationFlowDefinition`
based on a `ReactiveMessageHandler`.
Also add an overload like `handleReactive(ReactiveMessageHandlerSpec)`
to let end-user to choose a protocol-specific channel adapter

* * Fix `Namespace Factory` wording in the `BaseIntegrationFlowDefinition` Javadocs

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
33d13a4649b3163310ce48415bec1687e13b0d1d,2023-05-01 16:49:16-04:00,"GH-8583: Add Java & DSL samples into docs (#8608)

* GH-8583: Add Java & DSL samples into docs

Fixes https://github.com/spring-projects/spring-integration/issues/8583

When users jump into docs first thing these days they expect to see a Java DSL sample.

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Improve `router.adoc` for DSL samples
* Add links to DSL chapters

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
90bc65ea49d8830a4a754a3116616eb7fb331c78,2023-05-01 17:27:20-04:00,"GH-3866: DefLockRepository: expose query setters (#8606)

Fixes https://github.com/spring-projects/spring-integration/issues/3866

Some RDBMS vendors (or their JDBC drivers) may just log the problem
without throwing an exception.

* Expose setters for UPDATE and INSERTS queries in the `DefaultLockRepository`
to let end-user to modify them respectively, e.g. be able to add a PostgreSQL
`ON CONFLICT DO NOTHING` hint.
* Refactor `DefaultLockRepository` to `Instant` instead of `LocalDateTime`
with zone offset.
* Refactor `ttl` property to `Duration` type
* Fix `dead-lock` typo to `deadlock`"
59e676a4e9a5cb1e9ff0b46c64bcd85fc1e7b2c8,2023-05-02 11:58:55-04:00,"Demonstrate `@Publisher` with an `@EventListener` (#8603)

* Demonstrate `@Publisher` with an `@EventListener`

The `@EventListener` from Spring Framework is a good tool for POJO configuration
to subscribe to events from an `ApplicationContext`.
The `@Publisher` is an AOP tool to publish a `Message` from POJO method call.

* Add a test and docs to demonstrate how the `@Publisher` can be used together with an `@EventListener`

* Add `@Publisher` with a `@RabbitListener` sample in docs

* * Fix FQCN for `@Queue` in the `AmqpTests`"
b999ac109c240f0a6f61390e6fd393f43c6d7944,2023-05-08 10:30:41-04:00,"MH: Async by default for reactive output channel (#8612)

When we configure an output channel for the handler as a `FluxMessageChannel`,
in most cases we assume an async processing for the reply.
Especially this is critical when reply is a reactive type, so in the async
mode it is ""flattened"" by the mentioned `FluxMessageChannel`.
Therefore, it is a bit awkward to require to set async explicitly,
when we have already configured output channel as a `FluxMessageChannel`

* Remove redundant config for async from `R2dbcDslTests`
* Mention the change in the docs"
ffe50d2d303b1348bd2b718358f2e7ddb30a403c,2023-05-08 10:31:23-04:00,"GH-8613: Add JsonPropertyAccessor type for native (#8614)

Fixes https://github.com/spring-projects/spring-integration/issues/8613

If `JsonPropertyAccessor` is registered for SpEL, it would be great
to have it working in native images as well.

Since SpEL is fully based on reflection, expose
`JsonPropertyAccessor$ComparableJsonNode` and `JsonPropertyAccessor$ArrayNodeAsList`
reflection hints for their method invocations from SpEL

**Cherry-pick to `6.0.x`**"
5f1e12ea35b1b978c8f39798e5b169218896c930,2023-05-10 15:49:33-04:00,"Introduce `PartitionedChannel` (#8617)

* Introduce `PartitionedChannel`

* Implement a `PartitionedChannel` as an extension of the `AbstractExecutorChannel`
* Supply this channel with a `PartitionedDispatcher` which is an extension of the `AbstractDispatcher`
* The target partition is essentially a `UnicastingDispatcher` with a single thead executor

* * Fix language in Javadocs
* Add docs for `PartitionedChannel` into `channel.adoc`
* Pre-populate partitions in the `PartitionedDispatcher`
to ensure a thread number reflection of the partition it is used for (for default `ThreadFactory`)
* Add Javadocs to `public` methods
* Add Java DSL `PartitionedChannelSpec` and respective factory methods into `Channels`
* Use `IntegrationMessageHeaderAccessor.CORRELATION_ID` header as a default partition key

* * Fix language in Javadocs
* Fix Checkstyle violations
* Mark `PartitionedDispatcher.prePopulatedPartitions()` with `synchronized`

* * Populate partitions from `PartitionedDispatcher` ctor
and when a custom `ThreadFactory` is set

* * Clear `executors` in `populatedPartitions()`

* * Bring back `synchronized populatedPartitions()` and use it in the `dispatch()`"
09169450961a13532d664ee0d78c6406993f661e,2023-05-15 09:28:31-04:00,"GH-6827: More XSD docs for SI-ip.xsd (#8620)

Fixes https://github.com/spring-projects/spring-integration/issues/6827"
396f5fb87bf1e5d76ea0e143f402063ebb0ae5ee,2023-05-15 12:30:14-04:00,"GH-8014: Improve doc for Service Activator (#8619)

* GH-8014: Improve doc for Service Activator

Fixes https://github.com/spring-projects/spring-integration/issues/8014

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
3c0927e4acbd8780aada8c7fa8f17cf7f35b420b,2023-05-15 12:50:46-04:00,"GH-8585: Add Javadocs to Pollers & PollerFactory (#8621)

* GH-8585: Add Javadocs to Pollers & PollerFactory

Fixes https://github.com/spring-projects/spring-integration/issues/8585

* * Fix Javadoc tags order

* * One more Javadoc tags order"
191f693377d21971dd6ef4c5a0569fc7193517cf,2023-05-15 16:28:29-04:00,"Fix memory leak in the `FluxMessageChannel` (#8622)

The `FluxMessageChannel` can subscribe to any volatile `Publisher`.
For example, we can call Reactor Kafka `Sender.send()` for
input data and pass its result to the `FluxMessageChannel`
for on demand subscription.
These publishers are subscribed in the `FluxMessageChannel`
and their `Disposable` is stored in the internal `Disposable.Composite`
which currently only cleared on `destroy()`

* Extract `Disposable` from those internal `subscribe()` calls
into an `AtomicReference`.
* Use this `AtomicReference` in the `doOnTerminate()`
to remove from the `Disposable.Composite` and `dispose()`
when such a volatile `Publisher` is completed

**Cherry-pick to `6.0.x` & `5.5.x`**"
ba417de68037eb69c9f63f30a7de985bdfe77f76,2023-05-22 11:19:13-04:00,Remove deprecations from previous versions (#8628)
c70d7a6688bfcd9bccc6c0062dcf0bfbf3baac76,2023-05-22 11:47:08-04:00,"GH-8625: Add Duration support for `<poller>` (#8627)

* GH-8625: Add Duration support for `<poller>`

Fixes https://github.com/spring-projects/spring-integration/issues/8625

The duration can be represented in a ISO 8601 format, e.g. `PT10S`, `P1D` etc.
The `<poller>` and `@Poller` don't support such a format.

* Introduce a `PeriodicTriggerFactoryBean` to accept string values for
trigger options and parse them manually before creating the target `PeriodicTrigger`
* Use this `PeriodicTriggerFactoryBean` in the `PollerParser` and `AbstractMethodAnnotationPostProcessor`
where we parse options for the `PeriodicTrigger`
* Modify tests to ensure that feature works
* Document the duration option
* Add more cross-links into polling docs
* Fix typos in the affected doc files
* Add `-parameters` for compiler options since SF 6.1 does not support `-debug` anymore
for method parameter names discovery

* Fix typos

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
32e34bf2ec2b833ab669f8f6c06a127aa2ffdda4,2023-05-22 11:59:47-04:00,"GH-5871: Add missed `order` attr to XSDs (#8624)

* GH-5871: Add missed `order` attr to XSDs

Fixes https://github.com/spring-projects/spring-integration/issues/5871

* * Fix `spring-integration-xml.xsd` for duplicates"
e01d0a9cd062cf393f20e9bc69c23d7e85f1cbf9,2023-06-01 12:18:02-04:00,"Introduce HeaderFilterSpec to streamline DSL API (#8636)

* Introduce HeaderFilterSpec to streamline DSL API

The concern has been driven by the discussion from: https://github.com/spring-projects/spring-integration/issues/8625
The point is that Java method arguments are not so descriptive when we read the code.
Therefore, it is better to design DSL the way it would be cleaner from reading perspective.
Plus less choice of methods to chain would give a better end-user experience from coding.

* Add a `HeaderFilterSpec` which can accept `headersToRemove` and `patternMatch` as individual
options instead of top-level deprecated `headerFilter(headersToRemove, patternMatch)` `IntegrationFlow` method.
This way Kotlin and Groovy DSLs get a gain from their ""inner section"" style.
* Such a `Consumer<HeaderFilterSpec>` way to configure an endpoint is similar to already
existing `aggregate(Consumer<AggregatorSpec>)`, `resequence(Consumer<ResequencerSpec>)` etc.
In other words those components which has a dedicated `ConsumerEndpointSpec` extension are OK
from an idiomatic DSL style perspective
* Expose a `HeaderFilter.setHeadersToRemove()` to make it working smoothly with this new
DSL requirements
* Apply a new `headerFilter()` style into Kotlin and Groovy DSLs

This is just an initial work to surface an idea.
If it is OK, I'll slow continue with others to realign and simplify the paradox of choice.

* * Fix asterisk imports in the `KotlinIntegrationFlowDefinition`"
8b8a7a4c16661ffd62508dc782dcf8cf0388cfff,2023-06-08 09:50:32-04:00,"Fix DSL for inner bean names generation (#8639)

The `IntegrationFlowBeanPostProcessor.processIntegrationComponentSpec()`
uses a wrong `generateBeanName()` for component to register making the
provided `id` as a prefix

* Use `generateBeanName(Object instance, String prefix, @Nullable String fallbackId, boolean useFlowIdAsPrefix)`
instead to properly ""fallback"" to the provided name

**Cherry-pick to `6.1.x`**"
33f0b8ec4aa9a21006c6005d59d2504344f2e35e,2023-06-08 11:23:09-04:00,"Optimize synchronized in PartitionedDispatcher (#8640)

Even if the `PartitionedDispatcher.populatedPartitions()`
is fast, in-memory, non-blocking operation, its active call from the `dispatch()`
on every message sent to the channel may pin the virtual thread.

* Optimize the `populatedPartitions()` for double `if`
where we will step into a `synchronized` block only for first several concurrent messages

**Cherry-pick to `6.1.x`**"
81af20aabfeb35c1485175d25b79ef72376b13c7,2023-06-12 16:01:40-04:00,"Improve Delayer DSL (#8645)

* Improve Delayer DSL

Move `groupId` option from a `delay()` method arg to the `DelayerEndpointSpec`
to make it cleaner from code reading perspective
* Expose new DSL method based on just a `DelayerEndpointSpec` for Kotlin &v Groovy
* Deprecate multi-arg `delay()` methods in favor of `Consumer<DelayerEndpointSpec>`-based

* * Fix language and code style"
4db9bad50d64408146eeb303f0f524d4e7432cf7,2023-06-14 13:33:46-04:00,"GH-8642: Revise executors in the project (#8647)

* GH-8642: Revise executors in the project

Fixes https://github.com/spring-projects/spring-integration/issues/8642

* Rework some `Executors.newSingleThreadExecutor()` to `ExecutorServiceAdapter(new SimpleAsyncTaskExecutor())`
* Expose `TaskExecutor` setters; deprecate `ExecutorService`-based
* Some other code clean up in the effected classes: `LogAccessor`, no `synchronized` in critical blocks
* Give a meaningful prefix for default threads in the context of components, e.g. `SubscribableRedisChannel` - `getBeanName() + ""-""`

* * Fix `PostgresChannelMessageTableSubscriberTests` for
`PostgresSubscribableChannel` initialization to let it create
its internal `Executor`

* Use an `AsyncTaskExecutor` injection instead of `ExecutorServiceAdapter` wrapping

* Fix `LockRegistryLeaderInitiatorTests` for `taskExecutor` injection

* Bring back `LockRegistryLeaderInitiator.setExecutorService()`
as an accident after property auto-renaming"
9e9bfd0c5cab44ef725eef2067fe8d9f6085d756,2023-06-21 11:41:01-04:00,"Remove ThreadLocal from RequestHandlerRetryAdvice (#8650)

Related to https://github.com/spring-projects/spring-integration/issues/8644

With virtual threads it is recommended to stay away from `ThreadLocal`
variables to avoid memory exhausting with too many virtual threads

* Fix `RequestHandlerRetryAdvice` to transfer the message context via internal
`IntegrationRetryCallback` implementation.
* Cast to this `IntegrationRetryCallback` in a newly introduced internal `IntegrationRetryListener`
to extract `messageToTry` and set it into a `RetryContext`
`ErrorMessageUtils.FAILED_MESSAGE_CONTEXT_KEY` attribute
* Deprecate a usage of an external `RetryListener` implementation of the `RequestHandlerRetryAdvice`"
070c1c6e603e2830d7d6c6b5486faeb5cee6ac85,2023-06-26 12:01:13-04:00,"GH-8626: Provide cleaner `transform()` DSL (#8653)

* GH-8626: Provide cleaner `transform()` DSL

Fixes https://github.com/spring-projects/spring-integration/issues/8626

* Add missed `transform(String beanName, @Nullable String methodName)` API
* Introduce a `TransformerSpec` to expose a strict API to configure
transformer variants.
* Introduce `transformWith(Consumer<TransformerSpec>)` as a single point
of all possible transformer and its endpoint options
* Deprecate those `IntegrationFlowDefinition.transform()` variants
which are harder to configure as several lambda arguments

This change will make Kotlin & Groovy DSL more readable and straightforward

* * Use new `transformWith()` in tests where a deprecated API still used
* Add JavaDocs to `TransformerSpec`
* Fix generic types for `BaseIntegrationFlowDefinition.transformWith()` -
they make sense exactly on the `TransformerSpec.transformer()` only
* Apply `transformWith()` for Groovy DSL
* Introduce a new `ClassUtils.isLambda(Object candidate)`
and add a check for Groovy `Closure`
* Fix `GroovyIntegrationFlowDefinition.createConfigurerIfAny()` to propagate a `Consumer` argument
down to the `Closure`

* * Rename `TransformerSpec -> TransformerEndpointSpec` for better context
meaning of the class
* Introduce `KotlinTransformerEndpointSpec` as an extension of the `TransformerEndpointSpec`
to have an `inline fun <reified P> transformer(crossinline function: (P) -> Any)`
for Kotlin style
* Add `KotlinIntegrationFlowDefinition.transformWith(KotlinTransformerEndpointSpec)`
* Deprecate Kotlin methods which are covered by the mentioned `transformWith()`
* Fix tests to use new API
* Mentioned the change in the doc"
af95829a3fefcc74877da57a862e4fc30c18ebf0,2023-06-26 14:59:55-04:00,"GH-8654: Fix bean deps for messaging annotations (#8657)

Fixes https://github.com/spring-projects/spring-integration/issues/8654

Spring Framework has an ability to start dependant beans automatically
when we start the current one.

The `AbstractMethodAnnotationPostProcessor` is missing a bean dependency
registration causing errors in target applications when Messaging Annotations configuration is used.

* Add `registerDependentBean()` into an `AbstractMethodAnnotationPostProcessor` when we generate
and register a `ConsumerEndpointFactoryBean`
* Change one of the `ClientManagerBackToBackTests` configuration to rely on a `@ServiceActivator`
for `Mqttv5PahoMessageHandler` bean to ensure that change in the `AbstractMethodAnnotationPostProcessor`
has a proper effect

**Cherry-pick to `6.1.x` & `6.0.x`**"
65c7e5dc5f011904568813a6e88fa8f50792e19e,2023-06-26 15:11:00-04:00,"Fix Kotlin DSL delegation (#8658)

The `ConsumerEndpointSpec` extensions for Kotlin
don't delegate to the provided `endpointFactoryBean`

* Introduce `KotlinConsumerEndpointSpec` extension for `ConsumerEndpointSpec`
with the proper delegation to the provided spec
* Use `KotlinConsumerEndpointSpec` in the Kotlin-specific `Spec` classes

**Cherry-pick to `6.1.x`, `6.0.x` & `5.5.x`**"
13980af1e1f500757b142d5480ca86321f6e1985,2023-06-27 12:32:33-04:00,"GH-8611: Extract `IntegrationConfigurationReport` (#8660)

Fixes https://github.com/spring-projects/spring-integration/issues/8611

According to the latest Spring Framework requirements related to AOT the
`BeanDefinitionRegistryPostProcessor` must not do anything but only bean registrations

* Extract an `IntegrationConfigurationReport` component
and move `IntegrationProperties` printing over here out from the
`DefaultConfiguringBeanFactoryPostProcessor`
* Remove a `SmartInitializingSingleton` impl from the `DefaultConfiguringBeanFactoryPostProcessor`"
4583afe0add8dc7ef14bc5a4c436d36129ba8c2d,2023-06-28 08:59:37-04:00,"GH-8611: Extract `MessagingAnnotationBeanPostProcessor` (#8661)

Fixes https://github.com/spring-projects/spring-integration/issues/8611

According to the latest Spring Framework requirements related to AOT the
`BeanDefinitionRegistryPostProcessor` must not do anything but only bean registrations

* Extract a `MessagingAnnotationBeanPostProcessor` component with a `BeanPostProcessor` logic
from the `MessagingAnnotationPostProcessor` and leave the last one as just
a `BeanDefinitionRegistryPostProcessor` impl
* Fix tests according to a new logic"
43473836ef55e3aa4f64b11715eaf7f3657b6ef8,2023-06-28 13:40:48-04:00,"Remove unused ThreadLocal from RedisStoreMSource (#8663)

* Remove unused ThreadLocal from RedisStoreMSource

The `RedisStoreMessageSource` relies on an `IntegrationResourceHolder`
for a while already.
Its internal `ThreadLocal` is just out of use.

* Remove that `resourceHolder` property and related methods to interact with it.
* Mention the `IntegrationResourceHolder` and `store` attribute in the `redis.adoc`

* Fix language in Docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
34f901f7dba3b8fd5bd9e0d9379f3e23db06be33,2023-07-03 10:35:21-04:00,"Improve `split()` DSL (#8666)

* Introduce a `SplitterSpec` which can accept possible
splitter variants: `expression`, `function`, `ref` etc.
This way we are going to have a complex endpoint configuration
only with a single method argument.
* Use `SplitterSpec` in a newly introduced `splitWith()`
* Deprecate those `split()` methods which use `SplitterEndpointSpec`.
This method are complex enough because of their several arguments
* Refactor some common `MessageHandler` options initialization
into the `ConsumerEndpointSpec.doGet()`
* Disable failing now `MethodInvokingMessageProcessorTests.testCollectionArgument()`:
or Jackson problem, or fresh SF
* Groovy DSL will be fixed in the separate PR:
https://stackoverflow.com/questions/76595843/groovy-selects-a-defaultgroovymethods-split-instead-of-mine-one"
72fc79dbd5c442e2d33cfb7f656bbc4f2d6c30ab,2023-07-10 11:08:44-04:00,"Fix Groovy DSL for new splitter style (#8669)

* Fix Groovy DSL for new splitter style

* Introduce a new `GroovyIntegrationFlowDefinition.splitWith()`
to avoid clashing with existing method
* Deprecate all other `split()` variants, but left one without arguments
for a default splitting options
* Fix doc for new splitter style

* * Fix tab indentations in `groovy-dsl.adoc`"
9597b7addb6ee8e73cc1f901e0d86351d06d5168,2023-07-12 10:57:03-04:00,"GH-8563: Fix SFTP RENAME with unconditional DEL (#8671)

Fixes https://github.com/spring-projects/spring-integration/issues/8563

* Rework the `SftpSession.rename()` logic to be similar to what is there in the `FtpSession`, for example:
try to remove a remote target file before renaming.
* Fix `SftpSession.remove()` to check for `SftpConstants.SSH_FX_NO_SUCH_FILE` response status
to return `false`"
e4c1851c070e05ba14979851509c6312ec88d932,2023-07-12 11:00:40-04:00,"Fix ImapIdleChA for scheduling race condition (#8670)

* Fix ImapIdleChA for scheduling race condition

The IMAP IDLE is long-lived process and can be blocked
waiting for any reply from the server.
This way it is not suited to be used in a `TaskScheduler`
especially when it has only one thread in its pool in Spring Boot by default.
Another concurrent scheduled task is exactly an `ImapMailReceiver.IdleCanceller`.
With a single thread in a `TaskScheduler` pool it cannot be reached
therefore we never cancel and IDLE task and cannot react to the connection loss properly

* Rework the `ImapIdleChannelAdapter` logic to use a regular `Executor` and `while()` loop
with a `Thread.sleep()` when we lose connection
* Clean up the `ImapMailReceiverTests` from `TaskScheduler` not used anymore.
* Expose new `taskExecutor` option in the `ImapIdleChannelAdapterSpec` for Java DSL
* Enable `ImapMailReceiverTests.testIdleWithMessageMapping()` with an attempt to see
if this fix covers an unclear problem exposed before

* * The `testIdleWithMessageMapping()` still fails on GH actions"
eb944335aced379e798ada913e9e0f5ab6c41d5b,2023-07-12 14:51:24-04:00,"GH-8664: Do not use broken `observeWithContext()` (#8665)

Fixes https://github.com/spring-projects/spring-integration/issues/8664

When an `Observation` is turned to `NoopObservation`,
the `observeWithContext()` fails with `ClassCastException`
since `NoopObservation` serves just plain `Context` not the one we supplied

* Fix `MessagingGatewaySupport.sendAndReceiveWithObservation()` same way
as it is in version `6.0.x`
* Modify `IntegrationObservabilityZipkinTests` to reject some `Observation`
via `observationPredicate()` configuration

**Cherry-pick to `6.1.x`**"
20d5f628bc08a3077367a1766a81fe98ae9b7a50,2023-07-13 10:47:00-04:00,"GH-8644: WebSocketHandlerReg: Remove ThreadLocal (#8667)

Fixes https://github.com/spring-projects/spring-integration/issues/8644

* Introduce an inner `DynamicHandlerRegistrationProxy` class
to create an `IntegrationDynamicWebSocketHandlerRegistration`
and map it into a provided `WebSocketHandler` when a `dynamicHandlerMapping`
is in action.

Co-authored-by: pziobron <64628007+pziobron@users.noreply.github.com>"
d4535cab7d850ffda71767829d1be090e1c323b1,2023-07-17 14:26:39-04:00,"GH-8674: Fix ServerKeyVerifier impl for key type (#8675)

Fixes https://github.com/spring-projects/spring-integration/issues/8674

The `ResourceKnownHostsServerKeyVerifier` does not take into account that several different
keys can be present in the known hosts resource for the same host/port

* Fix `ResourceKnownHostsServerKeyVerifier` to find a list of knows host for the requested session.
Then iterate of this result to match the key type first and then compare keys and their `revoked` marker

**Cherry-pick to `6.1.x` & `6.0.x`**"
152666116aacc9cf0191ce07b0974fc6ac4893c2,2023-07-17 16:19:06-04:00,"Upgrade to MINA SSHD 2.10.0 (#8676)

* Remove trailing slashes from remote dirs to create in SFTP tests"
f4212d8df471003bf6ff54e91736ec72eb9eb1cd,2023-07-24 09:10:44-04:00,"GH-8685: Re-fetch group after setting condition (#8686)

* GH-8685: Re-fetch group after setting condition

Fixes https://github.com/spring-projects/spring-integration/issues/8685

The `AbstractCorrelatingMessageHandler` updates the group metadata in DB
not only for provided `condition`, but also a `lastModified` field.
A subsequent scheduling for group timeout takes the `lastModified`
to compare with the value in the store after re-fetching group in task.
This does not reflect reality since adding `condition` modifies the data in DB,
but in-memory state remains the same.

* Re-fetch a group from the store in the `AbstractCorrelatingMessageHandler.setGroupConditionIfAny()`.
* Verify expected behavior via new `ConfigurableMongoDbMessageGroupStoreTests.groupIsForceReleaseAfterTimeoutWhenGroupConditionIsSet()`

**Cherry-pick to `6.1.x`, `6.0.x` & `5.5.x`**

* * Fix Checkstyle violation in the test"
b6d39e429b698978aceed774a010d57136abbd87,2023-07-26 16:19:44-04:00,"GH-3696: DeserializationEx support for KafkaMS (#8689)

* GH-3696: DeserializationEx support for KafkaMS

Fixes https://github.com/spring-projects/spring-integration/issues/3696

* Add an internal logic into `KafkaMessageSource` to react properly for the
`ErrorHandlingDeserializer` configuration and re-throw `DeserializationException`

* * Use `ErrorHandlingUtils` from `spring-kafka` to determine a `deserializer` from consumer properties

* Revise the test in favor of just single `await().untilAsserted()` -
no reason to wait for assignment or check for returned record.
We just need to be sure that `DeserializationException` is thrown eventually"
7dcc0bb125eb5d72d9dc6cec0cc91bd4114336be,2023-07-28 14:47:49-04:00,"GH-8680: Check DB for table on start (#8690)

* GH-8680: Check DB for table on start

Fixes https://github.com/spring-projects/spring-integration/issues/8680

If database is not initialized properly before application start, we may lose messages
at runtime when we fail to insert data into DB

* Implement `SmartLifecycle` on `JdbcMessageStore`, `JdbcChannelMessageStore`,
`JdbcMetadataStore`, and `DefaultLockRepository` to perform `SELECT COUNT` query in `start()`
to fail fast if no required table is present.
* Refactor `AbstractJdbcChannelMessageStoreTests` into JUnit 5 and use `MySqlContainerTest`
for more coverage
* Fix newly failed tests which had DB not initialized before
* Exclude `commons-logging` from `commons-dbcp2` dependency to avoid
classpath conflict
* Document the new feature

* * Fix HTTP URL in the `DataSource-mysql-context.xml`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

* * Add `setCheckDatabaseOnStart(false)` to disable the check query for all the SI JDBC components

* Fix language in Javadocs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
e4bacc3e92592562438d581c142e7f05fb859af9,2023-08-22 14:00:34-04:00,"GH-8708: Fix concurrency around SFTP client (#8709)

Fixes https://github.com/spring-projects/spring-integration/issues/8708

According to the `org.apache.sshd.common.channel.ChannelAsyncOutputStream.writeBuffer()` JavaDocs cannot be used concurrently.

* Introduce internal `DefaultSftpSessionFactory.ConcurrentSftpClient` extension
of the `DefaultSftpClient` to set a `Lock` around `super.send(cmd, buffer);`
* Remove lock from the `SftpSession` since it now is managed by the mentioned `ConcurrentSftpClient`

**Cherry-pick to `6.1.x` & `6.0.x`**"
d85c5e3a0ae9b55c04183479e921c6ee17c8089d,2023-08-22 18:04:31-04:00,"GH-8704: Add global property for `defaultTimeout` (#8706)

* GH-8704: Add global property for `defaultTimeout`

Fixes https://github.com/spring-projects/spring-integration/issues/8704

The default timeout for requests and replies in the integration endpoints
is 30 seconds to avoid indefinite blocking in threads.
Sometime those 30 seconds is not enough.

* Introduce a `spring.integration.endpoints.defaultTimeout` global property
to allow overriding all the timeouts to desired value.
The negative number indicates an indefinite waiting time: similar to what
was there before introducing 30 seconds by default

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
b8378fc7dc7ad16c7a46d9cd0ae6d9e214b0c4fb,2023-09-06 11:03:20-04:00,"Refactor KafkaMDChA for code duplication (#8724)

Simplify a `KafkaMessageDrivenChannelAdapter.enhanceHeadersAndSaveAttributes()`
method for future maintenance avoiding code duplication"
6b8d37ba30f5ca52147fba7b7e457664ad1ea57f,2023-09-11 13:22:26-04:00,"GH-2971: Add `LockRegistry.executeLocked()` API (#8729)

* GH-2971: Add `LockRegistry.executeLocked()` API

Fixes https://github.com/spring-projects/spring-integration/issues/2971

* Following best practice and well-known patterns with `Jdbc`, `Rest` or `Jms` templates,
introduce `default` methods into `LockRegistry` interface to make it easier to perform
tasks when within a lock.
* Since all the required logic is now covered by those `LockRegistry.executeLocked()` methods,
there is no need in the dedicated abstract `WhileLockedProcessor` class.
Deprecated it for removal in the next version
* Use a new `LockRegistry.executeLocked()` API in the `FileWritingMessageHandler`
instead of just deprecated `WhileLockedProcessor`
* To satisfy Java limitations for checked lambdas, introduce `CheckedCallable` and `CheckedRunnable` utilities
similar to interfaces in the `io.micrometer.observation.Observation`
* Change existing `CheckedFunction` to expose extra generic argument for `Throwable`
* Add dedicated chapter for distributed lock into docs
* Fix some links and typos in the docs

* * Fix Javadoc for `CheckedFunction`

* Fix language in docs

Co-authored-by: Gary Russell <grussell@vmware.com>

---------

Co-authored-by: Gary Russell <grussell@vmware.com>"
df67c59f8e171fe30135e6057ecbfa8f5b4d9785,2023-09-14 12:58:07-04:00,"GH-8732 Don't remove JDBC message if other groups (#8733)

* GH-8732 Don't remove JDBC message if other groups

Fixes https://github.com/spring-projects/spring-integration/issues/8732

When same message is added into different groups,
its record in the `INT_MESSAGE` must remain until the last group is removed

* Improve `JdbcMessageStore.DELETE_MESSAGES_FROM_GROUP` SQL
to ignore those messages for removal which has other group records in the `INT_GROUP_TO_MESSAGE` table

**Cherry-pick to `6.1.x`, `6.0.x` & `5.5.x`**

* * Fix `JdbcMessageStore.removeMessage()` and `removeMessagesFromGroup()`
to remove from `INT_MESSAGE` only if there is no other records in `INT_GROUP_TO_MESSAGE`

* * Improve `MessageStore.removeMessage()` Javadoc
mentioning `MessageGroupStore` specifics"
