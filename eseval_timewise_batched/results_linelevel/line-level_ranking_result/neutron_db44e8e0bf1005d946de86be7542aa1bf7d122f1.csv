commit_id,line,line_level_label,count,line_score,row
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Try to get a specific vlan if requested or get the next vlan.""""""",0,9,1.0,1
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Try to get a specific vlan if requested or get the next vlan.""""""",1,9,1.0,2
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# there is no need to delete port in the driver (its a no-op),1,7,0.7777777777777777,3
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# To create a port a network must exists, Create a network",1,7,0.7777777777777777,4
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,5
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# get a specific vlan i.e. 5,1,6,0.6666666666666666,6
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# get a specific vlan i.e. 4,1,6,0.6666666666666666,7
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# See the License for the specific language governing permissions and,1,6,0.6666666666666666,8
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# See the License for the specific language governing permissions and,1,6,0.6666666666666666,9
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,6,0.6666666666666666,10
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# See the License for the specific language governing permissions and,1,6,0.6666666666666666,11
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,6,0.6666666666666666,12
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,13
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,6,0.6666666666666666,14
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,15
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,16
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,17
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""try to get a specific vlan if requested",1,6,0.6666666666666666,18
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shiv): need to extend the db model to include device owners,0,6,0.6666666666666666,19
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shiv): need to extend the db model to include device owners,1,6,0.6666666666666666,20
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shiv): need to extend the db model to include device owners,1,6,0.6666666666666666,21
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,22
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,23
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,6,0.6666666666666666,24
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,25
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# you may not use this file except in compliance with the License.,1,5,0.5555555555555556,26
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,27
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,28
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,29
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,30
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,31
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# You may obtain a copy of the License at,1,5,0.5555555555555556,32
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# You may obtain a copy of the License at,1,5,0.5555555555555556,33
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# you may not use this file except in compliance with the License.,1,5,0.5555555555555556,34
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# You may obtain a copy of the License at,1,5,0.5555555555555556,35
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# you may not use this file except in compliance with the License.,1,5,0.5555555555555556,36
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# get a specific vlan i.e. 7,1,5,0.5555555555555556,37
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# get a specific vlan i.e. 1900,1,5,0.5555555555555556,38
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,39
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,40
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,41
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,42
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.debug(""Returning the allocated vlan (%d) to the pool"",",1,5,0.5555555555555556,43
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,44
db44e8e0bf1005d946de86be7542aa1bf7d122f1,This call to delete the network translates to removing the,0,5,0.5555555555555556,45
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# which needs to pass context to us,0,5,0.5555555555555556,46
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# which needs to pass context to us,1,5,0.5555555555555556,47
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,48
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,49
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# which needs to pass context to us,1,5,0.5555555555555556,50
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# don't want the user to find out that they guessed the right id,1,5,0.5555555555555556,51
db44e8e0bf1005d946de86be7542aa1bf7d122f1,This call to delete the network translates to removing the,1,5,0.5555555555555556,52
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# delete the port binding and read it with the new rules,1,5,0.5555555555555556,53
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,54
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    License for the specific language governing permissions and limitations,1,5,0.5555555555555556,55
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    not use this file except in compliance with the License. You may obtain,1,5,0.5555555555555556,56
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# find the vlan for this network,1,5,0.5555555555555556,57
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,58
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All Rights Reserved.,1,4,0.4444444444444444,59
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,60
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,61
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,62
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,63
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Associates a MAC address to a port profile.""""""",1,4,0.4444444444444444,64
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All Rights Reserved.,1,4,0.4444444444444444,65
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Dissociates a MAC address from a port profile.""""""",1,4,0.4444444444444444,66
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,67
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,68
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,69
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,70
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,71
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,72
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,73
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,74
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,75
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,76
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,77
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,78
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Return the vlan to the pool.""""""",1,4,0.4444444444444444,79
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# limitations under the License.,1,4,0.4444444444444444,80
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# port_id is truncated: since the linux-bridge tap device names are,1,4,0.4444444444444444,81
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,82
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# limitations under the License.,1,4,0.4444444444444444,83
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,84
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# limitations under the License.,1,4,0.4444444444444444,85
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Port profile naming convention for Neutron networks,1,4,0.4444444444444444,86
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Port profile filter expressions,1,4,0.4444444444444444,87
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,88
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,89
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,90
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""This call to delete the network translates to removing",1,4,0.4444444444444444,91
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Return the vlan to the pool.""""""",0,4,0.4444444444444444,92
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Get port from the brocade specific db.""""""",0,4,0.4444444444444444,93
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# make it appears that the device owner is of type network,0,4,0.4444444444444444,94
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Get port from the brocade specific db.""""""",1,4,0.4444444444444444,95
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# make it appears that the device owner is of type network,1,4,0.4444444444444444,96
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,97
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,98
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,99
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,100
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Get port from the brocade specific db.""""""",1,4,0.4444444444444444,101
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# make it appears that the device owner is of type network,1,4,0.4444444444444444,102
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# now ok to delete the network,1,4,0.4444444444444444,103
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""return the vlan to the pool.""""""",1,4,0.4444444444444444,104
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,105
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,106
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,107
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,108
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All Rights Reserved.,1,4,0.4444444444444444,109
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Dissociates a MAC address from a port profile.""""""",1,4,0.4444444444444444,110
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Associates a MAC address to a port profile.""""""",1,4,0.4444444444444444,111
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,112
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Unless required by applicable law or agreed to in writing, software",1,4,0.4444444444444444,113
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,4,0.4444444444444444,114
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# port_id is truncated: since the linux-bridge tap device names are,1,4,0.4444444444444444,115
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    a copy of the License at,1,4,0.4444444444444444,116
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    under the License.,1,4,0.4444444444444444,117
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_network(self, host, username, password, net_id):",1,3,0.3333333333333333,118
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,119
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def connect(self, host, username, password):",1,3,0.3333333333333333,120
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_network(self, host, username, password, net_id):",1,3,0.3333333333333333,121
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"mgr = self.connect(host, username, password)",1,3,0.3333333333333333,122
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Creates VLAN sub-profile for port profile.""""""",1,3,0.3333333333333333,123
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def associate_mac_to_network(self, host, username, password,",1,3,0.3333333333333333,124
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,125
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def __init__(self, host, username, password):",1,3,0.3333333333333333,126
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Configure trunk mode for VLAN sub-profile (port_profile_name),1,3,0.3333333333333333,127
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if args.cmd == 'create' and numargs == 1:,1,3,0.3333333333333333,128
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Configure allowed VLANs for VLAN sub-profile,1,3,0.3333333333333333,129
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_network(self, host, username, password, net_id):",1,3,0.3333333333333333,130
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Configure L2 mode for VLAN sub-profile (port_profile_name),1,3,0.3333333333333333,131
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Create VLAN sub-profile for port-profile (port_profile_name),1,3,0.3333333333333333,132
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,133
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Creates VLAN sub-profile for port profile.""""""",1,3,0.3333333333333333,134
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def dissociate_mac_from_network(self, host, username, password,",1,3,0.3333333333333333,135
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def associate_mac_to_network(self, host, username, password,",1,3,0.3333333333333333,136
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_network(self, host, username, password, net_id):",1,3,0.3333333333333333,137
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def connect(self, host, username, password):",1,3,0.3333333333333333,138
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,139
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = get_network(context, net_id, None)",1,3,0.3333333333333333,140
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# device is same as truncated port_id,1,3,0.3333333333333333,141
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,142
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,143
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Create a network,1,3,0.3333333333333333,144
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""A Vlan Bitmap class to handle allocation/de-allocation of vlan ids.""""""",1,3,0.3333333333333333,145
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# based on truncated port id, this enables port lookups using",1,3,0.3333333333333333,146
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Release 4 and get next again,1,3,0.3333333333333333,147
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# First vlan is always 2,1,3,0.3333333333333333,148
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron import context as n_context,1,3,0.3333333333333333,149
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,3,0.3333333333333333,150
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.extensions import portbindings,1,3,0.3333333333333333,151
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,3,0.3333333333333333,152
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# based on truncated port id, this enables port lookups using",1,3,0.3333333333333333,153
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id = str(uuid.uuid4()),1,3,0.3333333333333333,154
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Test brocade specific port db.""""""",1,3,0.3333333333333333,155
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Delete the network,1,3,0.3333333333333333,156
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Get the network and verify,1,3,0.3333333333333333,157
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Test brocade specific network db.""""""",1,3,0.3333333333333333,158
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Setup a vlan bitmap for allocation/de-allocation.""""""",1,3,0.3333333333333333,159
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron import context,1,3,0.3333333333333333,160
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,3,0.3333333333333333,161
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if vlan_id in self.vlans:,1,3,0.3333333333333333,162
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if vlan not in self.vlans:,1,3,0.3333333333333333,163
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"for vlan in moves.range(min_vlan_search, max_vlan_search):",1,3,0.3333333333333333,164
db44e8e0bf1005d946de86be7542aa1bf7d122f1,max_vlan_search = (vlan_id + 1) if vlan_id else MAX_VLAN,1,3,0.3333333333333333,165
db44e8e0bf1005d946de86be7542aa1bf7d122f1,min_vlan_search = vlan_id or MIN_VLAN,1,3,0.3333333333333333,166
db44e8e0bf1005d946de86be7542aa1bf7d122f1,for net in brocade_db.get_networks(ctxt),1,3,0.3333333333333333,167
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Initialize the vlan as a set.""""""",1,3,0.3333333333333333,168
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# uses a bitmap to do this,1,3,0.3333333333333333,169
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Keep track of the vlans that have been allocated/de-allocated,1,3,0.3333333333333333,170
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""get port from the tap device.""""""",1,3,0.3333333333333333,171
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def dissociate_mac_from_network(self, host, username, password,",1,3,0.3333333333333333,172
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = sa.Column(sa.String(36)),1,3,0.3333333333333333,173
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_context import context as oslo_context,0,3,0.3333333333333333,174
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_context import context as oslo_context,0,3,0.3333333333333333,175
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# an argument to this function;,1,3,0.3333333333333333,176
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# an argument to this function;,0,3,0.3333333333333333,177
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.tests import base,1,3,0.3333333333333333,178
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"for vlan in xrange(min_vlan_search, max_vlan_search):",1,3,0.3333333333333333,179
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"for vlan in moves.xrange(min_vlan_search, max_vlan_search):",0,3,0.3333333333333333,180
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import api as db,1,3,0.3333333333333333,181
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"help=_('The address of the host to SSH to')),",0,3,0.3333333333333333,182
db44e8e0bf1005d946de86be7542aa1bf7d122f1,for port in ports:,1,3,0.3333333333333333,183
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# so  we raise not found if the policy.json file doesn't allow them,1,3,0.3333333333333333,184
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# phy_uuid as 'provider network' for STT net type,1,3,0.3333333333333333,185
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# With NVP plugin 'normal' overlay networks will have no binding,1,3,0.3333333333333333,186
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from quantum import policy,1,3,0.3333333333333333,187
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# phy_uuid as 'provider network' for STT net type,0,3,0.3333333333333333,188
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# With NVP plugin 'normal' overlay networks will have no binding,0,3,0.3333333333333333,189
db44e8e0bf1005d946de86be7542aa1bf7d122f1,or get the next vlan.,1,3,0.3333333333333333,190
db44e8e0bf1005d946de86be7542aa1bf7d122f1,A Vlan Bitmap class to handle allocation/de-allocation of vlan ids.,1,3,0.3333333333333333,191
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Initialize the vlan as a set.""""""",0,3,0.3333333333333333,192
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""A Vlan Bitmap class to handle allocation/de-allocation of vlan ids.""""""",0,3,0.3333333333333333,193
db44e8e0bf1005d946de86be7542aa1bf7d122f1,the port-profile on the physical switch.,1,3,0.3333333333333333,194
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""This call to create network translates to creation of",1,3,0.3333333333333333,195
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'''Get the rpc dispatcher for this manager.,1,3,0.3333333333333333,196
db44e8e0bf1005d946de86be7542aa1bf7d122f1,This call to create network translates to creation of port-profile on,0,3,0.3333333333333333,197
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Get the rpc dispatcher for this manager.",0,3,0.3333333333333333,198
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,199
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.openstack.common import context,1,3,0.3333333333333333,200
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""initialize the vlan as a set.""""""",1,3,0.3333333333333333,201
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.openstack.common import context,1,3,0.3333333333333333,202
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"for device in kwargs.pop('devices', [])",1,3,0.3333333333333333,203
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# process_port_create_security_group also needs port id,1,3,0.3333333333333333,204
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron import context as n_context,0,3,0.3333333333333333,205
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# save to brocade persistent db,1,3,0.3333333333333333,206
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# relinquish vlan in bitmap,1,3,0.3333333333333333,207
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# (actually: note there is no such call to the driver),1,3,0.3333333333333333,208
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# we must delete all ports in db first (foreign key constraint),1,3,0.3333333333333333,209
db44e8e0bf1005d946de86be7542aa1bf7d122f1,This call to create network translates to creation of port-profile on,1,3,0.3333333333333333,210
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Consume from all consumers in threads,1,3,0.3333333333333333,211
db44e8e0bf1005d946de86be7542aa1bf7d122f1,layer driver class that interfaces to NETCONF layer below.,1,3,0.3333333333333333,212
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# an argument to this function;,1,3,0.3333333333333333,213
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Set port status to DOWN,1,3,0.3333333333333333,214
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.info(_LI(""Allocated vlan (%d) from the pool""), vlan_id)",1,3,0.3333333333333333,215
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"help=_('The address of the host to SSH to')),",1,3,0.3333333333333333,216
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.3333333333333333,217
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.extensions import portbindings,1,3,0.3333333333333333,218
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_context import context as oslo_context,1,3,0.3333333333333333,219
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_context import context as oslo_context,1,3,0.3333333333333333,220
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import api as db,1,3,0.3333333333333333,221
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron import context as n_context,0,3,0.3333333333333333,222
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shiv) need support for security groups,1,3,0.3333333333333333,223
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.common import rpc as n_rpc,1,3,0.3333333333333333,224
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron import context as n_context,1,3,0.3333333333333333,225
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import api as db,1,3,0.3333333333333333,226
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"Returns `True` if it finds the key acceptable,",1,2,0.2222222222222222,227
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade NOS Driver implements NETCONF over SSHv2 for",1,2,0.2222222222222222,228
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron._i18n import _LE,1,2,0.2222222222222222,229
db44e8e0bf1005d946de86be7542aa1bf7d122f1,and `False` if not. This default callback for NOS always returns 'True',1,2,0.2222222222222222,230
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_utils import excutils,1,2,0.2222222222222222,231
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_log import log as logging,1,2,0.2222222222222222,232
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from ncclient import manager,1,2,0.2222222222222222,233
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade.nos import nctemplates as template,1,2,0.2222222222222222,234
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"ASSOCIATE_MAC_TO_PORT_PROFILE = """"""",1,2,0.2222222222222222,235
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All rights reserved.,1,2,0.2222222222222222,236
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"DISSOCIATE_MAC_FROM_PORT_PROFILE = """"""",1,2,0.2222222222222222,237
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Dissociate MAC address from port-profile (port_profile_name, mac_address)",1,2,0.2222222222222222,238
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Associate MAC address to port-profile (port_profile_name, mac_address)",1,2,0.2222222222222222,239
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"DEACTIVATE_PORT_PROFILE = """"""",1,2,0.2222222222222222,240
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"DELETE_PORT_PROFILE = """"""",1,2,0.2222222222222222,241
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Use the persisted NETCONF connection,1,2,0.2222222222222222,242
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"ACTIVATE_PORT_PROFILE = """"""",1,2,0.2222222222222222,243
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""NOS NETCONF interface driver for Neutron network.",1,2,0.2222222222222222,244
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.DELETE_VLAN_INTERFACE.format(vlan_id=vlan_id),1,2,0.2222222222222222,245
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Open new NETCONF connection,1,2,0.2222222222222222,246
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.debug(""Connect success to host %(host)s:%(ssh_port)d"",",1,2,0.2222222222222222,247
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deletes a port profile.""""""",1,2,0.2222222222222222,248
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"CONFIGURE_TRUNK_MODE_FOR_VLAN_PROFILE = """"""",1,2,0.2222222222222222,249
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_port_profile(self, mgr, name):",1,2,0.2222222222222222,250
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.CREATE_PORT_PROFILE.format(name=name),1,2,0.2222222222222222,251
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Creates a port profile.""""""",1,2,0.2222222222222222,252
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_port_profile(self, mgr, name):",1,2,0.2222222222222222,253
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Retrieves a port profile.""""""",1,2,0.2222222222222222,254
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_profile(self, mgr, name):",1,2,0.2222222222222222,255
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deletes a VLAN interface.""""""",1,2,0.2222222222222222,256
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_vlan_interface(self, mgr, vlan_id):",1,2,0.2222222222222222,257
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"mgr.edit_config(target='running', config=confstr)",1,2,0.2222222222222222,258
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.CREATE_VLAN_INTERFACE.format(vlan_id=vlan_id),1,2,0.2222222222222222,259
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures a VLAN interface.""""""",1,2,0.2222222222222222,260
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_vlan_interface(self, mgr, vlan_id):",1,2,0.2222222222222222,261
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Dissociates a MAC address from virtual network.""""""",1,2,0.2222222222222222,262
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Associates a MAC address to virtual network.""""""",1,2,0.2222222222222222,263
db44e8e0bf1005d946de86be7542aa1bf7d122f1,name = template.OS_PORT_PROFILE_NAME.format(id=net_id),1,2,0.2222222222222222,264
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"CONFIGURE_ALLOWED_VLANS_FOR_VLAN_PROFILE = """"""",1,2,0.2222222222222222,265
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Retrieves a port profile.""""""",1,2,0.2222222222222222,266
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"CONFIGURE_L2_MODE_FOR_VLAN_PROFILE = """"""",1,2,0.2222222222222222,267
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"CREATE_VLAN_PROFILE_FOR_PORT_PROFILE = """"""",1,2,0.2222222222222222,268
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_port_profile(self, mgr, name):",1,2,0.2222222222222222,269
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Creates a port profile.""""""",1,2,0.2222222222222222,270
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_port_profile(self, mgr, name):",1,2,0.2222222222222222,271
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def activate_port_profile(self, mgr, name):",1,2,0.2222222222222222,272
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_profile(self, mgr, name):",1,2,0.2222222222222222,273
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deletes a VLAN interface.""""""",1,2,0.2222222222222222,274
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_vlan_interface(self, mgr, vlan_id):",1,2,0.2222222222222222,275
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures a VLAN interface.""""""",1,2,0.2222222222222222,276
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_vlan_interface(self, mgr, vlan_id):",1,2,0.2222222222222222,277
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Dissociates a MAC address from virtual network.""""""",1,2,0.2222222222222222,278
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Associates a MAC address to virtual network.""""""",1,2,0.2222222222222222,279
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""NOS NETCONF interface driver for Neutron network.",1,2,0.2222222222222222,280
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Brocade NOS Driver implements NETCONF over SSHv2 for,1,2,0.2222222222222222,281
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All rights reserved.,1,2,0.2222222222222222,282
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = ML2_BrocadePort(id=port_id,",1,2,0.2222222222222222,283
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = get_port(context, port_id)",1,2,0.2222222222222222,284
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = ML2_BrocadeNetwork(id=net_id, vlan=vlan,",1,2,0.2222222222222222,285
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deletes a port profile.""""""",1,2,0.2222222222222222,286
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def activate_port_profile(self, mgr, name):",1,2,0.2222222222222222,287
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Activates a port profile.""""""",1,2,0.2222222222222222,288
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def configure_allowed_vlans_for_vlan_profile(self, mgr, name, vlan_id):",1,2,0.2222222222222222,289
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"CREATE_PORT_PROFILE = """"""",1,2,0.2222222222222222,290
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"DELETE_VLAN_INTERFACE = """"""",1,2,0.2222222222222222,291
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Delete VLAN (vlan_id),1,2,0.2222222222222222,292
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"<config xmlns:xc=""urn:ietf:params:xml:ns:netconf:base:1.0"">",1,2,0.2222222222222222,293
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"CREATE_VLAN_INTERFACE = """"""",1,2,0.2222222222222222,294
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Create VLAN (vlan_id),1,2,0.2222222222222222,295
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures allowed VLANs for VLAN sub-profile.""""""",1,2,0.2222222222222222,296
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures trunk mode for VLAN sub-profile.""""""",1,2,0.2222222222222222,297
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def deactivate_port_profile(self, mgr, name):",1,2,0.2222222222222222,298
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def configure_trunk_mode_for_vlan_profile(self, mgr, name):",1,2,0.2222222222222222,299
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures L2 mode for VLAN sub-profile.""""""",1,2,0.2222222222222222,300
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def configure_l2_mode_for_vlan_profile(self, mgr, name):",1,2,0.2222222222222222,301
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_vlan_profile_for_port_profile(self, mgr, name):",1,2,0.2222222222222222,302
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def dissociate_mac_from_port_profile(self, mgr, name, mac_address):",1,2,0.2222222222222222,303
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def associate_mac_to_port_profile(self, mgr, name, mac_address):",1,2,0.2222222222222222,304
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deactivates a port profile.""""""",1,2,0.2222222222222222,305
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.DELETE_PORT_PROFILE.format(name=name),1,2,0.2222222222222222,306
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.password = password,1,2,0.2222222222222222,307
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Activates a port profile.""""""",1,2,0.2222222222222222,308
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.ACTIVATE_PORT_PROFILE.format(name=name),1,2,0.2222222222222222,309
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Delete Port,1,2,0.2222222222222222,310
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = brocade_db.get_port(self.context, port_id)",1,2,0.2222222222222222,311
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Create Port,1,2,0.2222222222222222,312
db44e8e0bf1005d946de86be7542aa1bf7d122f1,tenant_id = str(uuid.uuid4()),1,2,0.2222222222222222,313
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id = port_id[0:11],1,2,0.2222222222222222,314
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = brocade_db.get_network(self.context, net_id)",1,2,0.2222222222222222,315
db44e8e0bf1005d946de86be7542aa1bf7d122f1,net_id = str(uuid.uuid4()),1,2,0.2222222222222222,316
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Test brocade db functionality.""""""",1,2,0.2222222222222222,317
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.tests.unit.db import test_db_base_plugin_v2 as test_plugin,1,2,0.2222222222222222,318
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade.db import models as brocade_db,1,2,0.2222222222222222,319
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.2222222222222222,320
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Copyright (c) 2013 OpenStack Foundation.,1,2,0.2222222222222222,321
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.common import constants as p_const,1,2,0.2222222222222222,322
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade.db import models as brocade_db,1,2,0.2222222222222222,323
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from six import moves,1,2,0.2222222222222222,324
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All rights reserved.,1,2,0.2222222222222222,325
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if __name__ == '__main__':,1,2,0.2222222222222222,326
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Copyright (c) 2012 OpenStack Foundation.,1,2,0.2222222222222222,327
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.2222222222222222,328
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_utils import importutils,1,2,0.2222222222222222,329
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.tests.unit import testlib_api,1,2,0.2222222222222222,330
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_network(context, net_id, vlan, segment_id, network_type, tenant_id):",1,2,0.2222222222222222,331
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = self.vbm_.get_next_vlan(1900),1,2,0.2222222222222222,332
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = self.vbm_.get_next_vlan(7),1,2,0.2222222222222222,333
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = self.vbm_.get_next_vlan(5),1,2,0.2222222222222222,334
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = self.vbm_.get_next_vlan(4),1,2,0.2222222222222222,335
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# next vlan is always 3,1,2,0.2222222222222222,336
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = self.vbm_.get_next_vlan(None),1,2,0.2222222222222222,337
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade import vlanbm as vlan_bitmap,1,2,0.2222222222222222,338
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade import NeutronPlugin as brocade_plugin,1,2,0.2222222222222222,339
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Test vlans alloc/dealloc.,1,2,0.2222222222222222,340
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.2222222222222222,341
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Copyright (c) 2013 OpenStack Foundation.,1,2,0.2222222222222222,342
db44e8e0bf1005d946de86be7542aa1bf7d122f1,_plugin_name = PLUGIN_NAME,1,2,0.2222222222222222,343
db44e8e0bf1005d946de86be7542aa1bf7d122f1,PLUGIN_NAME = ('neutron.plugins.brocade.',1,2,0.2222222222222222,344
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.tests.unit.db import test_db_base_plugin_v2 as test_plugin,1,2,0.2222222222222222,345
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.tests.unit import _test_extension_portbindings as test_bindings,1,2,0.2222222222222222,346
db44e8e0bf1005d946de86be7542aa1bf7d122f1,mac = '0050.56bf.0001',1,2,0.2222222222222222,347
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan = 1001,1,2,0.2222222222222222,348
db44e8e0bf1005d946de86be7542aa1bf7d122f1,driver = nos.NOSdriver(),1,2,0.2222222222222222,349
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.CREATE_VLAN_PROFILE_FOR_PORT_PROFILE.format(,1,2,0.2222222222222222,350
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def configure_allowed_vlans_for_vlan_profile(self, mgr, name, vlan_id):",1,2,0.2222222222222222,351
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.CONFIGURE_TRUNK_MODE_FOR_VLAN_PROFILE.format(,1,2,0.2222222222222222,352
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures trunk mode for VLAN sub-profile.""""""",1,2,0.2222222222222222,353
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def configure_trunk_mode_for_vlan_profile(self, mgr, name):",1,2,0.2222222222222222,354
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.CONFIGURE_L2_MODE_FOR_VLAN_PROFILE.format(,1,2,0.2222222222222222,355
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures L2 mode for VLAN sub-profile.""""""",1,2,0.2222222222222222,356
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def configure_l2_mode_for_vlan_profile(self, mgr, name):",1,2,0.2222222222222222,357
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_vlan_profile_for_port_profile(self, mgr, name):",1,2,0.2222222222222222,358
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.CONFIGURE_ALLOWED_VLANS_FOR_VLAN_PROFILE.format(,1,2,0.2222222222222222,359
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.DISSOCIATE_MAC_FROM_PORT_PROFILE.format(,1,2,0.2222222222222222,360
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def dissociate_mac_from_port_profile(self, mgr, name, mac_address):",1,2,0.2222222222222222,361
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.ASSOCIATE_MAC_TO_PORT_PROFILE.format(,1,2,0.2222222222222222,362
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def associate_mac_to_port_profile(self, mgr, name, mac_address):",1,2,0.2222222222222222,363
db44e8e0bf1005d946de86be7542aa1bf7d122f1,confstr = template.DEACTIVATE_PORT_PROFILE.format(name=name),1,2,0.2222222222222222,364
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deactivates a port profile.""""""",1,2,0.2222222222222222,365
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def deactivate_port_profile(self, mgr, name):",1,2,0.2222222222222222,366
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Configures allowed VLANs for VLAN sub-profile.""""""",1,2,0.2222222222222222,367
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from __future__ import print_function,1,2,0.2222222222222222,368
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Driver,1,2,0.2222222222222222,369
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _dissociate(self, net_id, mac):",1,2,0.2222222222222222,370
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def nostest(host, username, password):",1,2,0.2222222222222222,371
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade.nos import nosdriver as nos,1,2,0.2222222222222222,372
db44e8e0bf1005d946de86be7542aa1bf7d122f1,import sys,1,2,0.2222222222222222,373
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from __future__ import print_function,1,2,0.2222222222222222,374
db44e8e0bf1005d946de86be7542aa1bf7d122f1,args = parser.parse_args(),1,2,0.2222222222222222,375
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"parser = argparse.ArgumentParser(description='process args',",1,2,0.2222222222222222,376
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"usage_desc = """"""",1,2,0.2222222222222222,377
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _associate(self, net_id, mac):",1,2,0.2222222222222222,378
db44e8e0bf1005d946de86be7542aa1bf7d122f1,import argparse,1,2,0.2222222222222222,379
db44e8e0bf1005d946de86be7542aa1bf7d122f1,elif args.cmd == 'dissociate' and numargs == 2:,1,2,0.2222222222222222,380
db44e8e0bf1005d946de86be7542aa1bf7d122f1,elif args.cmd == 'associate' and numargs == 2:,1,2,0.2222222222222222,381
db44e8e0bf1005d946de86be7542aa1bf7d122f1,elif args.cmd == 'delete' and numargs == 1:,1,2,0.2222222222222222,382
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.username = username,1,2,0.2222222222222222,383
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.host = host,1,2,0.2222222222222222,384
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade.nos import nosdriver as nos,1,2,0.2222222222222222,385
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_log import log as logging,1,2,0.2222222222222222,386
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# only network_type of vlan is supported,1,2,0.2222222222222222,387
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = BrocadeNetwork(id=net_id, vlan=vlan)",1,2,0.2222222222222222,388
db44e8e0bf1005d946de86be7542aa1bf7d122f1,segment_id = sa.Column(sa.String(36)),1,2,0.2222222222222222,389
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.handlers import securitygroups_rpc,0,2,0.2222222222222222,390
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_log import log as logging,1,2,0.2222222222222222,391
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_config import cfg,1,2,0.2222222222222222,392
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# (Some parts adapted from LinuxBridge Plugin),1,2,0.2222222222222222,393
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All rights reserved.,1,2,0.2222222222222222,394
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = brocade_db.get_port(rpc_context, device[self.TAP_PREFIX_LEN:])",1,2,0.2222222222222222,395
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['device'] = device,1,2,0.2222222222222222,396
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port = brocade_db.get_port_from_device(,1,2,0.2222222222222222,397
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session = db.get_session(),1,2,0.2222222222222222,398
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Doing what other plugins are doing,1,2,0.2222222222222222,399
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# need to be fixed in:,1,2,0.2222222222222222,400
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shh) context is not being passed as,1,2,0.2222222222222222,401
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['device'] = device,0,2,0.2222222222222222,402
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port = brocade_db.get_port_from_device(,0,2,0.2222222222222222,403
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session = db.get_session(),0,2,0.2222222222222222,404
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Doing what other plugins are doing,0,2,0.2222222222222222,405
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# need to be fixed in:,0,2,0.2222222222222222,406
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shh) context is not being passed as,0,2,0.2222222222222222,407
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from oslo_utils import importutils,1,2,0.2222222222222222,408
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"from neutron._i18n import _LE, _LI",1,2,0.2222222222222222,409
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.agent import securitygroups_rpc as sg_rpc,1,2,0.2222222222222222,410
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import agents_db,1,2,0.2222222222222222,411
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import securitygroups_rpc_base as sg_db_rpc,1,2,0.2222222222222222,412
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import portbindings_base,1,2,0.2222222222222222,413
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import l3_agentschedulers_db,1,2,0.2222222222222222,414
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import extraroute_db,1,2,0.2222222222222222,415
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import external_net_db,1,2,0.2222222222222222,416
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import db_base_plugin_v2,1,2,0.2222222222222222,417
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import agentschedulers_db,1,2,0.2222222222222222,418
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.common import utils,1,2,0.2222222222222222,419
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.agentnotifiers import dhcp_rpc_agent_api,1,2,0.2222222222222222,420
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.common import topics,1,2,0.2222222222222222,421
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.common import constants as n_const,1,2,0.2222222222222222,422
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.handlers import securitygroups_rpc,1,2,0.2222222222222222,423
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.handlers import metadata_rpc,1,2,0.2222222222222222,424
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.handlers import l3_rpc,1,2,0.2222222222222222,425
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.handlers import dhcp_rpc,1,2,0.2222222222222222,426
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.agentnotifiers import l3_rpc_agent_api,1,2,0.2222222222222222,427
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = brocade_db.get_port(rpc_context, device[TAP_PREFIX_LEN:])",0,2,0.2222222222222222,428
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import l3_rpc_base,1,2,0.2222222222222222,429
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade.db import models as brocade_db,1,2,0.2222222222222222,430
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.api.rpc.handlers import l3_rpc,0,2,0.2222222222222222,431
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_qos_queues(self, context, filters=None, fields=None):",1,2,0.2222222222222222,432
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_qos_queue(self, context, id, fields=None):",1,2,0.2222222222222222,433
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(salvatore-orlando) make sure users can specify a distinct,1,2,0.2222222222222222,434
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"binding = nicira_db.get_network_binding(context.session,",1,2,0.2222222222222222,435
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _check_view_auth(self, context, resource, action):",1,2,0.2222222222222222,436
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(salvatore-orlando) make sure users can specify a distinct,0,2,0.2222222222222222,437
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"binding = nicira_db.get_network_binding(context.session,",0,2,0.2222222222222222,438
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Brocade NOS Driver Test,1,2,0.2222222222222222,439
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Brocade NOS Driver implements NETCONF over SSHv2 for,1,2,0.2222222222222222,440
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade NOS Driver implements NETCONF over SSHv2 for",0,2,0.2222222222222222,441
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port-profile on the physical switch.,1,2,0.2222222222222222,442
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'''Agent side of the linux bridge rpc API.,1,2,0.2222222222222222,443
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port-profile on the physical switch.,0,2,0.2222222222222222,444
db44e8e0bf1005d946de86be7542aa1bf7d122f1,the physical switch.,0,2,0.2222222222222222,445
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Agent side of the linux bridge rpc API.",0,2,0.2222222222222222,446
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if port is not None:,1,2,0.2222222222222222,447
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from quantum.db import agents_db,0,2,0.2222222222222222,448
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from quantum.common import constants,0,2,0.2222222222222222,449
db44e8e0bf1005d946de86be7542aa1bf7d122f1,MIN_VLAN = 2,1,2,0.2222222222222222,450
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import portbindings_base,0,2,0.2222222222222222,451
db44e8e0bf1005d946de86be7542aa1bf7d122f1,help=_('The network interface to use when creating',0,2,0.2222222222222222,452
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.tests.unit import testlib_api,0,2,0.2222222222222222,453
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"distributed = Column(Boolean, default=False, nullable=False)",1,2,0.2222222222222222,454
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port_id = sa.Column(sa.String(36), primary_key=True, default="""")",1,2,0.2222222222222222,455
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"distributed = Column(Boolean, default=False, server_default=sql.false(),",0,2,0.2222222222222222,456
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from sqlalchemy import sql,0,2,0.2222222222222222,457
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from six.moves import xrange,1,2,0.2222222222222222,458
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from six import moves,0,2,0.2222222222222222,459
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"help=_('The SSH password to use')),",0,2,0.2222222222222222,460
db44e8e0bf1005d946de86be7542aa1bf7d122f1,binding = {,0,2,0.2222222222222222,461
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"help=_('The SSH username to use')),",0,2,0.2222222222222222,462
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.exception(_(""Unable to create L3GW port on logical router  """,1,2,0.2222222222222222,463
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.exception(_(""Unable to create L3GW port on logical router """,0,2,0.2222222222222222,464
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _extend_port_dict_binding(self, context, port):",1,2,0.2222222222222222,465
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_ports(self, context, filters=None, fields=None):",1,2,0.2222222222222222,466
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = super(BrocadePluginV2, self).get_port(",1,2,0.2222222222222222,467
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port(self, context, port_id, fields=None):",1,2,0.2222222222222222,468
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.extensions import securitygroup as ext_sg,1,2,0.2222222222222222,469
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port_id = sa.Column(sa.String(36), primary_key=True, default="""",",0,2,0.2222222222222222,470
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.brocade import vlanbm as vbm,1,2,0.2222222222222222,471
db44e8e0bf1005d946de86be7542aa1bf7d122f1,mac = self.mac_reformat_62to34(interface_mac),1,2,0.2222222222222222,472
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# All rights reserved.,1,2,0.2222222222222222,473
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"mac = mac[0:4] + ""."" + mac[4:8] + ""."" + mac[8:12]",1,2,0.2222222222222222,474
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"mac = interface_mac.replace("":"", """")",1,2,0.2222222222222222,475
db44e8e0bf1005d946de86be7542aa1bf7d122f1,:returns: MAC address in the format xxxx.xxxx.xxxx,1,2,0.2222222222222222,476
db44e8e0bf1005d946de86be7542aa1bf7d122f1,:param interface_mac: MAC address in the format xx:xx:xx:xx:xx:xx,1,2,0.2222222222222222,477
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"to 3 groups of 4 hexadecimals numbers delimited by ""."".",1,2,0.2222222222222222,478
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"Transforms from 6 groups of 2 hexadecimal numbers delimited by "":""",1,2,0.2222222222222222,479
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(rkukura): Replace with new VIF security details,1,2,0.2222222222222222,480
db44e8e0bf1005d946de86be7542aa1bf7d122f1,binding = {,1,2,0.2222222222222222,481
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id = port['id'],1,2,0.2222222222222222,482
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _notify_port_updated(self, context, port):",1,2,0.2222222222222222,483
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if (original_port['fixed_ips'] != port['fixed_ips'] or,1,2,0.2222222222222222,484
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = super(BrocadePluginV2, self).update_port(",1,2,0.2222222222222222,485
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['port']['id'] = port_id,1,2,0.2222222222222222,486
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if ext_sg.SECURITYGROUPS in port['port']:,1,2,0.2222222222222222,487
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def update_port(self, context, port_id, port):",1,2,0.2222222222222222,488
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = brocade_port['vlan_id'],1,2,0.2222222222222222,489
db44e8e0bf1005d946de86be7542aa1bf7d122f1,import sqlalchemy as sa,1,2,0.2222222222222222,490
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import model_base,1,2,0.2222222222222222,491
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.db import models_v2,1,2,0.2222222222222222,492
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_network(context, net_id, fields=None):",1,2,0.2222222222222222,493
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""get a brocade specific port.""""""",1,2,0.2222222222222222,494
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port = (session.query(BrocadePort).filter_by(port_id=port_id).first()),1,2,0.2222222222222222,495
db44e8e0bf1005d946de86be7542aa1bf7d122f1,from neutron.plugins.common import constants as svc_constants,1,2,0.2222222222222222,496
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = BrocadePort(port_id=port_id,",1,2,0.2222222222222222,497
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id = port_id[0:11],1,2,0.2222222222222222,498
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Create a brocade specific port, has policy like vlan.""""""",1,2,0.2222222222222222,499
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Get brocade specific network, with vlan extension.""""""",1,2,0.2222222222222222,500
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if net is not None:,1,2,0.2222222222222222,501
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port_id = sa.Column(sa.String(36), primary_key=True, default="""",",1,2,0.2222222222222222,502
db44e8e0bf1005d946de86be7542aa1bf7d122f1,net = (session.query(BrocadeNetwork).filter_by(id=net_id).first()),1,2,0.2222222222222222,503
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Delete a brocade specific network/port-profiles.""""""",1,2,0.2222222222222222,504
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session = context.session,1,2,0.2222222222222222,505
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Create a brocade specific network/port-profiles.""""""",1,2,0.2222222222222222,506
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_network(context, net_id, vlan):",1,2,0.2222222222222222,507
db44e8e0bf1005d946de86be7542aa1bf7d122f1,tenant_id = sa.Column(sa.String(36)),1,2,0.2222222222222222,508
db44e8e0bf1005d946de86be7542aa1bf7d122f1,physical_interface = sa.Column(sa.String(36)),1,2,0.2222222222222222,509
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_port(self, context, port_id):",1,2,0.2222222222222222,510
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan = sa.Column(sa.String(10)),1,2,0.2222222222222222,511
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# convert mac format: xx:xx:xx:xx:xx:xx -> xxxx.xxxx.xxxx,1,2,0.2222222222222222,512
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def port_update(self, context, port, physical_network, vlan_id):",1,2,0.2222222222222222,513
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"target = oslo_messaging.Target(topic=topic, version='1.0')",1,2,0.2222222222222222,514
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.topic = topic,1,2,0.2222222222222222,515
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Agent side of the linux bridge rpc API.",1,2,0.2222222222222222,516
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['device'] = device,1,2,0.2222222222222222,517
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port = brocade_db.get_port_from_device(,1,2,0.2222222222222222,518
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session = db.get_session(),1,2,0.2222222222222222,519
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# need to be fixed in:,1,2,0.2222222222222222,520
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# TODO(shh) context is not being passed as,1,2,0.2222222222222222,521
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id = port['port_id'],1,2,0.2222222222222222,522
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port = self.get_port_from_device(device),1,2,0.2222222222222222,523
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port = brocade_db.get_port(rpc_context,",1,2,0.2222222222222222,524
db44e8e0bf1005d946de86be7542aa1bf7d122f1,device = kwargs.get('device'),1,2,0.2222222222222222,525
db44e8e0bf1005d946de86be7542aa1bf7d122f1,target = oslo_messaging.Target(version='1.2'),1,2,0.2222222222222222,526
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id = neutron_port['id'],1,2,0.2222222222222222,527
db44e8e0bf1005d946de86be7542aa1bf7d122f1,help=_('The network interface to use when creating ',1,2,0.2222222222222222,528
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"help=_('The SSH password to use')),",1,2,0.2222222222222222,529
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"help=_('The SSH username to use')),",1,2,0.2222222222222222,530
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def network_delete(self, context, network_id):",1,2,0.2222222222222222,531
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Doing what other plugins are doing,1,2,0.2222222222222222,532
db44e8e0bf1005d946de86be7542aa1bf7d122f1,for svc_topic in self.service_topics.values():,1,2,0.2222222222222222,533
db44e8e0bf1005d946de86be7542aa1bf7d122f1,for bport in bports:,1,2,0.2222222222222222,534
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = super(BrocadePluginV2, self).update_network(context, id,",1,2,0.2222222222222222,535
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Create logical port on the switch.""""""",1,2,0.2222222222222222,536
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session = context.session,1,2,0.2222222222222222,537
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def update_network(self, context, id, network):",1,2,0.2222222222222222,538
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_port(self, context, port):",1,2,0.2222222222222222,539
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = net['vlan'],1,2,0.2222222222222222,540
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = brocade_db.get_network(context, net_id)",1,2,0.2222222222222222,541
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Tell hw to do remove PP,1,2,0.2222222222222222,542
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = bnet['vlan'],1,2,0.2222222222222222,543
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port-profile on the physical switch.,1,2,0.2222222222222222,544
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_network(self, context, net_id):",1,2,0.2222222222222222,545
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id = self._vlan_bitmap.get_next_vlan(None),1,2,0.2222222222222222,546
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net = super(BrocadePluginV2, self).create_network(context, network)",1,2,0.2222222222222222,547
db44e8e0bf1005d946de86be7542aa1bf7d122f1,the physical switch.,1,2,0.2222222222222222,548
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_network(self, context, network):",1,2,0.2222222222222222,549
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Deactivate port-profile (port_profile_name),1,1,0.1111111111111111,550
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Activate port-profile (port_profile_name),1,1,0.1111111111111111,551
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Delete port-profile (port_profile_name),1,1,0.1111111111111111,552
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# (port_profile_name, allowed_vlan, native_vlan)",1,1,0.1111111111111111,553
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Create AMPP port-profile (port_profile_name),1,1,0.1111111111111111,554
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# AMPP Life-cycle Management Configuration Commands,1,1,0.1111111111111111,555
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</config>,1,1,0.1111111111111111,556
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,557
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,558
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deletes a virtual network.""""""",1,1,0.1111111111111111,559
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,560
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright (c) 2013 Brocade Communications Systems, Inc.",1,1,0.1111111111111111,561
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Retrieves all port profiles.""""""",1,1,0.1111111111111111,562
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_profiles(self, mgr):",1,1,0.1111111111111111,563
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net_id, mac):",1,1,0.1111111111111111,564
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class NOSdriver(object):,1,1,0.1111111111111111,565
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Creates a new virtual network.""""""",1,1,0.1111111111111111,566
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Connect via SSH and initialize the NETCONF session.""""""",1,1,0.1111111111111111,567
db44e8e0bf1005d946de86be7542aa1bf7d122f1,pass,1,1,0.1111111111111111,568
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,569
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Constants,1,1,0.1111111111111111,570
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def __init__(self):,1,1,0.1111111111111111,571
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Custom RPC Commands,1,1,0.1111111111111111,572
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def __init__(self):,1,1,0.1111111111111111,573
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"OS_PORT_PROFILE_NAME = ""openstack-profile-{id}""",1,1,0.1111111111111111,574
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"PORT_PROFILE_XPATH_FILTER = ""/port-profile""",1,1,0.1111111111111111,575
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if self.mgr:,1,1,0.1111111111111111,576
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""FAKE DRIVER, for unit tests purposes.",1,1,0.1111111111111111,577
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def close_session(self):,1,1,0.1111111111111111,578
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.error(_LE(""Connect failed to switch: %s""), e)",1,1,0.1111111111111111,579
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.mgr = manager.connect(host=host, port=SSH_PORT,",1,1,0.1111111111111111,580
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if self.mgr and self.mgr.connected:,1,1,0.1111111111111111,581
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Connect via SSH and initialize the NETCONF session.""""""",1,1,0.1111111111111111,582
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.mgr = None,1,1,0.1111111111111111,583
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Handles life-cycle management of Neutron network (leverages AMPP on NOS),1,1,0.1111111111111111,584
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class NOSdriver(object):,1,1,0.1111111111111111,585
db44e8e0bf1005d946de86be7542aa1bf7d122f1,(i.e. trusts all hosts for now).,1,1,0.1111111111111111,586
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""An unknown host callback.",1,1,0.1111111111111111,587
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def nos_unknown_host_cb(host, fingerprint):",1,1,0.1111111111111111,588
db44e8e0bf1005d946de86be7542aa1bf7d122f1,SSH_PORT = 22,1,1,0.1111111111111111,589
db44e8e0bf1005d946de86be7542aa1bf7d122f1,LOG = logging.getLogger(__name__),1,1,0.1111111111111111,590
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,591
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Neutron network life-cycle management.,1,1,0.1111111111111111,592
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,593
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,594
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright 2013 Brocade Communications System, Inc.",1,1,0.1111111111111111,595
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"PORT_PROFILE_NAME_XPATH_FILTER = ""/port-profile[name='{name}']""",1,1,0.1111111111111111,596
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Neutron network life-cycle management.,1,1,0.1111111111111111,597
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return mac,1,1,0.1111111111111111,598
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,599
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def mac_reformat_62to34(interface_mac):,1,1,0.1111111111111111,600
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"admin_state_up = sa.Column(sa.Boolean, nullable=False)",1,1,0.1111111111111111,601
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"network_id = sa.Column(sa.String(36),",1,1,0.1111111111111111,602
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Schema for brocade port.""""""",1,1,0.1111111111111111,603
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class BrocadePort(model_base.BASEV2):,1,1,0.1111111111111111,604
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Schema for brocade network.""""""",1,1,0.1111111111111111,605
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class BrocadeNetwork(model_base.BASEV2, models_v2.HasId):",1,1,0.1111111111111111,606
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade specific database schema/model.""""""",1,1,0.1111111111111111,607
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,608
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,609
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright 2013 Brocade Communications System, Inc.",1,1,0.1111111111111111,610
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return binding,1,1,0.1111111111111111,611
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,612
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'security-group' in self.supported_extension_aliases}},1,1,0.1111111111111111,613
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def _get_base_binding_dict(self):,1,1,0.1111111111111111,614
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"bport = brocade_db.get_port(context, port_id)",1,1,0.1111111111111111,615
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if port_updated:,1,1,0.1111111111111111,616
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"context, port.get(ext_sg.SECURITYGROUPS))",1,1,0.1111111111111111,617
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if original_port['admin_state_up'] != port['admin_state_up']:,1,1,0.1111111111111111,618
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"context, port_id, port)",1,1,0.1111111111111111,619
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_data = port['port'],1,1,0.1111111111111111,620
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_updated = True,1,1,0.1111111111111111,621
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Deletes a virtual network.""""""",1,1,0.1111111111111111,622
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return net,1,1,0.1111111111111111,623
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_network(context, net_id):",1,1,0.1111111111111111,624
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_networks(context, filters=None, fields=None):",1,1,0.1111111111111111,625
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Get all brocade specific networks.""""""",1,1,0.1111111111111111,626
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright 2013 Brocade Communications System, Inc.",1,1,0.1111111111111111,627
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if port:,1,1,0.1111111111111111,628
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if not port:,1,1,0.1111111111111111,629
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if net:,1,1,0.1111111111111111,630
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if not net:,1,1,0.1111111111111111,631
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class ML2_BrocadePort(model_base.BASEV2, models_v2.HasId,",1,1,0.1111111111111111,632
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network_type = sa.Column(sa.String(10)),1,1,0.1111111111111111,633
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class ML2_BrocadeNetwork(model_base.BASEV2, models_v2.HasId,",1,1,0.1111111111111111,634
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright 2014 Brocade Communications System, Inc.",1,1,0.1111111111111111,635
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Update port attributes.""""""",1,1,0.1111111111111111,636
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def update_port_state(context, port_id, admin_state_up):",1,1,0.1111111111111111,637
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_from_device(session, port_id):",1,1,0.1111111111111111,638
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""delete brocade specific port.""""""",1,1,0.1111111111111111,639
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def delete_port(context, port_id):",1,1,0.1111111111111111,640
db44e8e0bf1005d946de86be7542aa1bf7d122f1,ports = (session.query(BrocadePort).filter_by(network_id=network_id).all()),1,1,0.1111111111111111,641
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_ports(context, network_id=None):",1,1,0.1111111111111111,642
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port(context, port_id):",1,1,0.1111111111111111,643
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return port,1,1,0.1111111111111111,644
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# tap devices,1,1,0.1111111111111111,645
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def create_port(context, port_id, network_id, physical_interface,",1,1,0.1111111111111111,646
db44e8e0bf1005d946de86be7542aa1bf7d122f1,nets = session.query(BrocadeNetwork).all(),1,1,0.1111111111111111,647
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Creates a new virtual network.""""""",1,1,0.1111111111111111,648
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class TestBrocadePortsV2(test_plugin.TestPortsV2,",1,1,0.1111111111111111,649
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"net_id, mac):",1,1,0.1111111111111111,650
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# implied.,1,1,0.1111111111111111,651
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._switch = {'address': FAKE_IPADDRESS,",1,1,0.1111111111111111,652
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def mocked_brocade_init(self):,1,1,0.1111111111111111,653
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def setUp(self):,1,1,0.1111111111111111,654
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class BrocadePluginV2TestCase(test_plugin.NeutronDbPluginV2TestCase):,1,1,0.1111111111111111,655
db44e8e0bf1005d946de86be7542aa1bf7d122f1,FAKE_PHYSICAL_INTERFACE = 'em1',1,1,0.1111111111111111,656
db44e8e0bf1005d946de86be7542aa1bf7d122f1,FAKE_PASSWORD = 'password',1,1,0.1111111111111111,657
db44e8e0bf1005d946de86be7542aa1bf7d122f1,FAKE_USERNAME = 'user',1,1,0.1111111111111111,658
db44e8e0bf1005d946de86be7542aa1bf7d122f1,FAKE_IPADDRESS = '2.2.2.2',1,1,0.1111111111111111,659
db44e8e0bf1005d946de86be7542aa1bf7d122f1,NOS_DRIVER = ('neutron.plugins.brocade.',1,1,0.1111111111111111,660
db44e8e0bf1005d946de86be7542aa1bf7d122f1,import mock,1,1,0.1111111111111111,661
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,662
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class TestBrocadeDb(test_plugin.NeutronDbPluginV2TestCase):,1,1,0.1111111111111111,663
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,664
db44e8e0bf1005d946de86be7542aa1bf7d122f1,admin_state_up = False,1,1,0.1111111111111111,665
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(port['admin_state_up'], admin_state_up)",1,1,0.1111111111111111,666
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.create_port(self.context, port_id, net_id,",1,1,0.1111111111111111,667
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"physical_interface = ""em1""",1,1,0.1111111111111111,668
db44e8e0bf1005d946de86be7542aa1bf7d122f1,admin_state_up = True,1,1,0.1111111111111111,669
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# tap devices,1,1,0.1111111111111111,670
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def test_create_port(self):,1,1,0.1111111111111111,671
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.create_network(self.context, net_id, TEST_VLAN)",1,1,0.1111111111111111,672
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context = context.get_admin_context(),1,1,0.1111111111111111,673
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._driver = importutils.import_object(NOS_DRIVER),1,1,0.1111111111111111,674
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class TestBrocadeBasicGet(test_plugin.TestBasicGet,",1,1,0.1111111111111111,675
db44e8e0bf1005d946de86be7542aa1bf7d122f1,pass,1,1,0.1111111111111111,676
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class TestBrocadeV2HTTPResponse(test_plugin.TestV2HTTPResponse,",1,1,0.1111111111111111,677
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['port'][ext_sg.SECURITYGROUPS] = (,1,1,0.1111111111111111,678
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(vlan_id, 1900)",1,1,0.1111111111111111,679
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(vlan_id, 7)",1,1,0.1111111111111111,680
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Skip 6,1,1,0.1111111111111111,681
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(vlan_id, 5)",1,1,0.1111111111111111,682
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(vlan_id, 4)",1,1,0.1111111111111111,683
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(vlan_id, 3)",1,1,0.1111111111111111,684
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(vlan_id, 2)",1,1,0.1111111111111111,685
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.vbm_ = vlan_bitmap.VlanBitmap(self.context),1,1,0.1111111111111111,686
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""test vlan allocation/de-alloc.""""""",1,1,0.1111111111111111,687
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def test_vlan(self):,1,1,0.1111111111111111,688
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context = n_context.get_admin_context(),1,1,0.1111111111111111,689
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def setUp(self):,1,1,0.1111111111111111,690
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class TestVlanBitmap(testlib_api.SqlTestCase):,1,1,0.1111111111111111,691
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,692
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# implied.,1,1,0.1111111111111111,693
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,694
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,695
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class TestBrocadeNetworksV2(test_plugin.TestNetworksV2,",1,1,0.1111111111111111,696
db44e8e0bf1005d946de86be7542aa1bf7d122f1,HAS_PORT_FILTER = True,1,1,0.1111111111111111,697
db44e8e0bf1005d946de86be7542aa1bf7d122f1,VIF_TYPE = portbindings.VIF_TYPE_BRIDGE,1,1,0.1111111111111111,698
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def test_create_network(self):,1,1,0.1111111111111111,699
db44e8e0bf1005d946de86be7542aa1bf7d122f1,TEST_VLAN = 1000,1,1,0.1111111111111111,700
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_profiles(self, mgr):",1,1,0.1111111111111111,701
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def execute(self, cmd):",1,1,0.1111111111111111,702
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade NOS Driver Test.""""""",1,1,0.1111111111111111,703
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,704
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,705
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright (c) 2013 Brocade Communications Systems, Inc.",1,1,0.1111111111111111,706
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"noscli = NOSCli(args.ip, args.username, args.password)",1,1,0.1111111111111111,707
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,708
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.host, self.username, self.password, net_id, mac)",1,1,0.1111111111111111,709
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _delete(self, net_id):",1,1,0.1111111111111111,710
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def _create(self, net_id):",1,1,0.1111111111111111,711
db44e8e0bf1005d946de86be7542aa1bf7d122f1,numargs = len(args.otherargs),1,1,0.1111111111111111,712
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.driver = nos.NOSdriver(),1,1,0.1111111111111111,713
db44e8e0bf1005d946de86be7542aa1bf7d122f1,import uuid,1,1,0.1111111111111111,714
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class NOSCli(object):,1,1,0.1111111111111111,715
db44e8e0bf1005d946de86be7542aa1bf7d122f1,LOG = logging.getLogger(__name__),1,1,0.1111111111111111,716
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade NOS Driver CLI.""""""",1,1,0.1111111111111111,717
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,718
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright (c) 2013 Brocade Communications Systems, Inc.",1,1,0.1111111111111111,719
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,720
db44e8e0bf1005d946de86be7542aa1bf7d122f1,filterstr = template.PORT_PROFILE_NAME_XPATH_FILTER.format(name=name),1,1,0.1111111111111111,721
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"response = mgr.get_config(source='running',",1,1,0.1111111111111111,722
db44e8e0bf1005d946de86be7542aa1bf7d122f1,filterstr = template.PORT_PROFILE_XPATH_FILTER,1,1,0.1111111111111111,723
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Retrieves all port profiles.""""""",1,1,0.1111111111111111,724
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Neutron operations,1,1,0.1111111111111111,725
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"driver.create_network(host, username, password, vlan)",1,1,0.1111111111111111,726
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"driver.associate_mac_to_network(host, username, password, vlan, mac)",1,1,0.1111111111111111,727
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"driver.dissociate_mac_from_network(host, username, password, vlan, mac)",1,1,0.1111111111111111,728
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Unit test brocade db.,1,1,0.1111111111111111,729
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,730
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# implied.,1,1,0.1111111111111111,731
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,732
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,733
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def release_vlan(self, vlan_id):",1,1,0.1111111111111111,734
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return vlan,1,1,0.1111111111111111,735
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_next_vlan(self, vlan_id=None):",1,1,0.1111111111111111,736
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if net['vlan'],1,1,0.1111111111111111,737
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.vlans = set(int(net['vlan']),1,1,0.1111111111111111,738
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def __init__(self, ctxt):",1,1,0.1111111111111111,739
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class VlanBitmap(object):,1,1,0.1111111111111111,740
db44e8e0bf1005d946de86be7542aa1bf7d122f1,MAX_VLAN = p_const.MAX_VLAN_TAG,1,1,0.1111111111111111,741
db44e8e0bf1005d946de86be7542aa1bf7d122f1,MIN_VLAN = p_const.MIN_VLAN_TAG + 1,1,1,0.1111111111111111,742
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,743
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,744
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright 2013 Brocade Communications System, Inc.",1,1,0.1111111111111111,745
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"nostest(sys.argv[1], sys.argv[2], sys.argv[3])",1,1,0.1111111111111111,746
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"with driver.connect(host, username, password) as mgr:",1,1,0.1111111111111111,747
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# AMPP enumeration,1,1,0.1111111111111111,748
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"driver.delete_network(host, username, password, vlan)",1,1,0.1111111111111111,749
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"context,",1,1,0.1111111111111111,750
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context.session = db.get_session(),1,1,0.1111111111111111,751
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_updated = False,1,1,0.1111111111111111,752
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.extra_binding_dict = {,1,1,0.1111111111111111,753
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"PHYSICAL_INTERFACE_OPTS = [cfg.StrOpt('physical_interface', default='eth0',",0,1,0.1111111111111111,754
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"SWITCH_OPTS = [cfg.StrOpt('address', default='',",0,1,0.1111111111111111,755
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"err_msg=(_(""Unable to delete logical router '%s'""",1,1,0.1111111111111111,756
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""service %(def_l3_gw_svc)s id is correct"") %",1,1,0.1111111111111111,757
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.warning(_(""port %s not found in NVP""), port_data['id'])",1,1,0.1111111111111111,758
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"raise Exception(""Brocade plugin raised exception, check logs"")",1,1,0.1111111111111111,759
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"err_msg=(_(""Unable to delete logical router '%s' """,0,1,0.1111111111111111,760
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""service %(def_l3_gw_svc)s id is correct""),",0,1,0.1111111111111111,761
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.warning(_(""Port %s not found in NVP""), port_data['id'])",0,1,0.1111111111111111,762
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"raise Exception(_(""Brocade plugin raised exception, """,0,1,0.1111111111111111,763
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return port,1,1,0.1111111111111111,764
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_data = port['port'],0,1,0.1111111111111111,765
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'security-group' in self.supported_extension_aliases},1,1,0.1111111111111111,766
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port[portbindings.CAPABILITIES] = {,1,1,0.1111111111111111,767
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port[portbindings.VIF_TYPE] = portbindings.VIF_TYPE_BRIDGE,1,1,0.1111111111111111,768
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"ports = super(BrocadePluginV2, self).get_ports(context,",1,1,0.1111111111111111,769
db44e8e0bf1005d946de86be7542aa1bf7d122f1,res_ports = [],1,1,0.1111111111111111,770
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"context, port_id, fields)",1,1,0.1111111111111111,771
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.base_binding_dict = {,0,1,0.1111111111111111,772
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return binding,0,1,0.1111111111111111,773
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'security-group' in self.supported_extension_aliases}},0,1,0.1111111111111111,774
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def _get_base_binding_dict(self):,0,1,0.1111111111111111,775
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"SWITCH_OPTS = [cfg.StrOpt('address', default=''),",1,1,0.1111111111111111,776
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"PHYSICAL_INTERFACE_OPTS = [cfg.StrOpt('physical_interface', default='eth0')",1,1,0.1111111111111111,777
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.error(_(""Connect failed to switch: %s""), e)",0,1,0.1111111111111111,778
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.exception(_(""Connect failed to switch""))",0,1,0.1111111111111111,779
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,780
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_from_device(cls, device):",1,1,0.1111111111111111,781
db44e8e0bf1005d946de86be7542aa1bf7d122f1,TAP_PREFIX_LEN = 3,1,1,0.1111111111111111,782
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class BridgeRpcCallbacks(n_rpc.RpcCallback,",1,1,0.1111111111111111,783
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return port,0,1,0.1111111111111111,784
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['binding:vif_type'] = 'bridge',0,1,0.1111111111111111,785
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['device_owner'] = AGENT_OWNER_PREFIX,0,1,0.1111111111111111,786
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if port:,0,1,0.1111111111111111,787
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# function: securitygroup_rules_for_devices(),0,1,0.1111111111111111,788
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# file: neutron/db/securtygroups_rpc_base.py,0,1,0.1111111111111111,789
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,0,1,0.1111111111111111,790
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_from_device(cls, device):",0,1,0.1111111111111111,791
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class SecurityGroupServerRpcMixin(sg_db_rpc.SecurityGroupServerRpcMixin):,0,1,0.1111111111111111,792
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class BridgeRpcCallbacks(n_rpc.RpcCallback):,0,1,0.1111111111111111,793
db44e8e0bf1005d946de86be7542aa1bf7d122f1,TAP_PREFIX_LEN = 3,0,1,0.1111111111111111,794
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class TestVlanBitmap(base.BaseTestCase):,1,1,0.1111111111111111,795
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class TestVlanBitmap(testlib_api.SqlTestCase):,0,1,0.1111111111111111,796
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"service_router = Column(Boolean, default=False, nullable=False)",1,1,0.1111111111111111,797
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"service_router = Column(Boolean, default=False, server_default=sql.false(),",0,1,0.1111111111111111,798
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.exception(_(""Connect failed to switch""))",1,1,0.1111111111111111,799
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.error(_(""Connect failed to switch: %s""), e)",1,1,0.1111111111111111,800
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return port,0,1,0.1111111111111111,801
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.base_binding_dict = self._get_base_binding_dict(),0,1,0.1111111111111111,802
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# function: securitygroup_rules_for_devices(),1,1,0.1111111111111111,803
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Quantum network life-cycle management,1,1,0.1111111111111111,804
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,805
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,806
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade NOS Driver Test.""""""",0,1,0.1111111111111111,807
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Brocade NOS Driver CLI,1,1,0.1111111111111111,808
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,809
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade NOS Driver CLI.""""""",0,1,0.1111111111111111,810
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,811
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Quantum network life-cycle management,1,1,0.1111111111111111,812
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Quantum network life-cycle management.,0,1,0.1111111111111111,813
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,814
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"FAKE DRIVER, for unit tests purposes",1,1,0.1111111111111111,815
db44e8e0bf1005d946de86be7542aa1bf7d122f1,MAX_VLAN = 4094,1,1,0.1111111111111111,816
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,817
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Quantum network life-cycle management.,0,1,0.1111111111111111,818
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""FAKE DRIVER, for unit tests purposes.",0,1,0.1111111111111111,819
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Brocade specific database schema/model.,1,1,0.1111111111111111,820
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade specific database schema/model.""""""",0,1,0.1111111111111111,821
db44e8e0bf1005d946de86be7542aa1bf7d122f1,and db configuration.,1,1,0.1111111111111111,822
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,823
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Specify switch address and db configuration.,0,1,0.1111111111111111,824
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",0,1,0.1111111111111111,825
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"original_port = self.get_port(context, port_id)",1,1,0.1111111111111111,826
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port[portbindings.VIF_TYPE] = portbindings.VIF_TYPE_BRIDGE,0,1,0.1111111111111111,827
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port[portbindings.CAPABILITIES] = {,0,1,0.1111111111111111,828
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'security-group' in self.supported_extension_aliases},0,1,0.1111111111111111,829
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if not binding:,0,1,0.1111111111111111,830
db44e8e0bf1005d946de86be7542aa1bf7d122f1,MAX_VLAN = constants.MAX_VLAN_TAG,0,1,0.1111111111111111,831
db44e8e0bf1005d946de86be7542aa1bf7d122f1,MIN_VLAN = constants.MIN_VLAN_TAG + 1,0,1,0.1111111111111111,832
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"if not self._check_view_auth(context, {'qos_queue': []},",1,1,0.1111111111111111,833
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"if not self._check_view_auth(context, {}, ext_qos.qos_queue_get):",1,1,0.1111111111111111,834
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network[pnet.SEGMENTATION_ID] = binding.vlan_id,1,1,0.1111111111111111,835
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network[pnet.PHYSICAL_NETWORK] = binding.phy_uuid,1,1,0.1111111111111111,836
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network[pnet.NETWORK_TYPE] = binding.binding_type,1,1,0.1111111111111111,837
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if binding:,1,1,0.1111111111111111,838
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if not binding:,1,1,0.1111111111111111,839
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"if self._check_view_auth(context, network, self.provider_network_view):",1,1,0.1111111111111111,840
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"provider_network_view = ""extension:provider_network:view""",1,1,0.1111111111111111,841
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'security-group' in self.supported_extension_aliases},1,1,0.1111111111111111,842
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port[portbindings.CAPABILITIES] = {,1,1,0.1111111111111111,843
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port[portbindings.VIF_TYPE] = portbindings.VIF_TYPE_BRIDGE,1,1,0.1111111111111111,844
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"if self._check_view_auth(context, port, self.binding_view):",1,1,0.1111111111111111,845
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.binding_set = ""extension:port_binding:set""",1,1,0.1111111111111111,846
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.binding_view = ""extension:port_binding:view""",1,1,0.1111111111111111,847
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network[pnet.SEGMENTATION_ID] = binding.vlan_id,0,1,0.1111111111111111,848
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network[pnet.PHYSICAL_NETWORK] = binding.phy_uuid,0,1,0.1111111111111111,849
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network[pnet.NETWORK_TYPE] = binding.binding_type,0,1,0.1111111111111111,850
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if binding:,0,1,0.1111111111111111,851
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# file: neutron/db/securtygroups_rpc_base.py,1,1,0.1111111111111111,852
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,853
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if port:,1,1,0.1111111111111111,854
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.ctxt = n_context.get_admin_context(),1,1,0.1111111111111111,855
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.service_topics = {svc_constants.CORE: topics.PLUGIN,",1,1,0.1111111111111111,856
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# RPC support,1,1,0.1111111111111111,857
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def _setup_rpc(self):,1,1,0.1111111111111111,858
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._driver = importutils.import_object(NOS_DRIVER),1,1,0.1111111111111111,859
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._switch = {'address': cfg.CONF.SWITCH.address,",1,1,0.1111111111111111,860
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Brocade specific initialization.""""""",1,1,0.1111111111111111,861
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def brocade_init(self):,1,1,0.1111111111111111,862
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.router_scheduler = importutils.import_object(,1,1,0.1111111111111111,863
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.network_scheduler = importutils.import_object(,1,1,0.1111111111111111,864
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._vlan_bitmap = vbm.VlanBitmap(self.ctxt),1,1,0.1111111111111111,865
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.base_binding_dict = self._get_base_binding_dict(),1,1,0.1111111111111111,866
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def __init__(self, topic):",1,1,0.1111111111111111,867
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.physical_interface = (cfg.CONF.PHYSICAL_INTERFACE.,1,1,0.1111111111111111,868
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.supported_extension_aliases = [""binding"", ""security-group"",",1,1,0.1111111111111111,869
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Specify switch address and db configuration.,1,1,0.1111111111111111,870
db44e8e0bf1005d946de86be7542aa1bf7d122f1,def __init__(self):,1,1,0.1111111111111111,871
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""BrocadePluginV2 is a Neutron plugin.",1,1,0.1111111111111111,872
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"class BrocadePluginV2(db_base_plugin_v2.NeutronDbPluginV2,",1,1,0.1111111111111111,873
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cctxt = self.client.prepare(topic=self.topic_port_update, fanout=True)",1,1,0.1111111111111111,874
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cctxt = self.client.prepare(topic=self.topic_network_delete,",1,1,0.1111111111111111,875
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.topic_port_update = topics.get_topic_name(topic,",1,1,0.1111111111111111,876
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.topic_network_delete = topics.get_topic_name(topic,",1,1,0.1111111111111111,877
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.rpc_context = n_context.ContextBase('neutron', 'neutron',",1,1,0.1111111111111111,878
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.conn = n_rpc.create_connection(),1,1,0.1111111111111111,879
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.endpoints = [BridgeRpcCallbacks(),",1,1,0.1111111111111111,880
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.notifier = AgentNotifierApi(topics.AGENT),1,1,0.1111111111111111,881
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"_(""Brocade plugin raised exception, check logs""))",1,1,0.1111111111111111,882
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['device_owner'] = AGENT_OWNER_PREFIX,1,1,0.1111111111111111,883
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_port = brocade_db.get_port(context, port_id)",1,1,0.1111111111111111,884
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"neutron_port = self.get_port(context, port_id)",1,1,0.1111111111111111,885
db44e8e0bf1005d946de86be7542aa1bf7d122f1,interface_mac = neutron_port['mac_address'],1,1,0.1111111111111111,886
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"neutron_port = super(BrocadePluginV2, self).create_port(context,",1,1,0.1111111111111111,887
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"bnet = brocade_db.get_network(context, network_id)",1,1,0.1111111111111111,888
db44e8e0bf1005d946de86be7542aa1bf7d122f1,physical_interface = self.physical_interface,1,1,0.1111111111111111,889
db44e8e0bf1005d946de86be7542aa1bf7d122f1,admin_state_up = port['port']['admin_state_up'],1,1,0.1111111111111111,890
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network_id = port['port']['network_id'],1,1,0.1111111111111111,891
db44e8e0bf1005d946de86be7542aa1bf7d122f1,tenant_id = port['port']['tenant_id'],1,1,0.1111111111111111,892
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"bports = brocade_db.get_ports(context, net_id)",1,1,0.1111111111111111,893
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"result = super(BrocadePluginV2, self).delete_network(context,",1,1,0.1111111111111111,894
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return net,1,1,0.1111111111111111,895
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"raise Exception(_(""Brocade plugin raised exception, """,1,1,0.1111111111111111,896
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.exception(_LE(""Brocade NOS driver error""))",1,1,0.1111111111111111,897
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# Proper formatting,1,1,0.1111111111111111,898
db44e8e0bf1005d946de86be7542aa1bf7d122f1,switch = self._switch,1,1,0.1111111111111111,899
db44e8e0bf1005d946de86be7542aa1bf7d122f1,net_uuid = net['id'],1,1,0.1111111111111111,900
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.agent_notifiers[n_const.AGENT_TYPE_L3] = (,1,1,0.1111111111111111,901
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.agent_notifiers[n_const.AGENT_TYPE_DHCP] = (,1,1,0.1111111111111111,902
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.client = n_rpc.get_client(target),1,1,0.1111111111111111,903
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# apply any extensions,1,1,0.1111111111111111,904
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""",1,1,0.1111111111111111,905
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"PHYSICAL_INTERFACE_OPTS = [cfg.StrOpt('physical_interface', default='eth0',",1,1,0.1111111111111111,906
db44e8e0bf1005d946de86be7542aa1bf7d122f1,NOS_DRIVER = 'neutron.plugins.brocade.nos.nosdriver.NOSdriver',1,1,0.1111111111111111,907
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"AGENT_OWNER_PREFIX = ""network:""",1,1,0.1111111111111111,908
db44e8e0bf1005d946de86be7542aa1bf7d122f1,LOG = logging.getLogger(__name__),1,1,0.1111111111111111,909
db44e8e0bf1005d946de86be7542aa1bf7d122f1,import oslo_messaging,1,1,0.1111111111111111,910
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.1111111111111111,911
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#,1,1,0.1111111111111111,912
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Copyright 2013 Brocade Communications System, Inc.",1,1,0.1111111111111111,913
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context = oslo_context.get_admin_context(),1,1,0.1111111111111111,914
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context = n_context.get_admin_context(),0,1,0.1111111111111111,915
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.rpc_context = oslo_context.RequestContext('neutron', 'neutron',",1,1,0.1111111111111111,916
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.ctxt.session = db.get_session(),1,1,0.1111111111111111,917
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.ctxt = oslo_context.get_admin_context(),1,1,0.1111111111111111,918
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.rpc_context = n_context.ContextBase('neutron', 'neutron',",0,1,0.1111111111111111,919
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.ctxt = n_context.get_admin_context(),0,1,0.1111111111111111,920
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context = context.get_admin_context(),1,1,0.1111111111111111,921
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.context = oslo_context.get_admin_context(),0,1,0.1111111111111111,922
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.rpc_context = context.RequestContext('neutron', 'neutron',",1,1,0.1111111111111111,923
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.ctxt = context.get_admin_context(),1,1,0.1111111111111111,924
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.rpc_context = oslo_context.RequestContext('neutron', 'neutron',",0,1,0.1111111111111111,925
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['binding:vif_type'] = 'bridge',1,1,0.1111111111111111,926
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class AgentNotifierApi(sg_rpc.SecurityGroupAgentRpcApiMixin):,1,1,0.1111111111111111,927
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"SWITCH_OPTS = [cfg.StrOpt('address', default='',",1,1,0.1111111111111111,928
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.ctxt = oslo_context.get_admin_context(),0,1,0.1111111111111111,929
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class BridgeRpcCallbacks(object):,1,1,0.1111111111111111,930
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.debug(""%s can not be found in database"", device)",1,1,0.1111111111111111,931
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return port,1,1,0.1111111111111111,932
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"# Device names start with ""tap""",1,1,0.1111111111111111,933
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['binding:vif_type'] = 'bridge',1,1,0.1111111111111111,934
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['device_owner'] = AGENT_OWNER_PREFIX,1,1,0.1111111111111111,935
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# function: securitygroup_rules_for_devices(),1,1,0.1111111111111111,936
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# file: neutron/db/securtygroups_rpc_base.py,1,1,0.1111111111111111,937
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_port_from_device(cls, device):",1,1,0.1111111111111111,938
db44e8e0bf1005d946de86be7542aa1bf7d122f1,class SecurityGroupServerRpcMixin(sg_db_rpc.SecurityGroupServerRpcMixin):,1,1,0.1111111111111111,939
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def update_device_down(self, rpc_context, **kwargs):",1,1,0.1111111111111111,940
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_devices_details_list(self, rpc_context, **kwargs):",1,1,0.1111111111111111,941
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return port,1,1,0.1111111111111111,942
db44e8e0bf1005d946de86be7542aa1bf7d122f1,entry = {'device': device},1,1,0.1111111111111111,943
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Agent requests device details.""""""",1,1,0.1111111111111111,944
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"entry = {'device': device,",1,1,0.1111111111111111,945
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#   1.1 Support Security Group RPC,1,1,0.1111111111111111,946
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#   1.2 Support get_devices_details_list,1,1,0.1111111111111111,947
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"def get_device_details(self, rpc_context, **kwargs):",1,1,0.1111111111111111,948
db44e8e0bf1005d946de86be7542aa1bf7d122f1,# history,1,1,0.1111111111111111,949
db44e8e0bf1005d946de86be7542aa1bf7d122f1,if port:,1,1,0.1111111111111111,950
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.debug(""Device %(device)s details requested from %(agent_id)s"",",1,1,0.1111111111111111,951
db44e8e0bf1005d946de86be7542aa1bf7d122f1,agent_id = kwargs.get('agent_id'),1,1,0.1111111111111111,952
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"segment_id=segment_id,",1,0,0.0,953
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"(for use by unit tests, avoids touching any hardware)",1,0,0.0,954
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</interface>,1,0,0.0,955
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</vlan>,1,0,0.0,956
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<name>{vlan_id}</name>,1,0,0.0,957
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<vlan>,1,0,0.0,958
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<interface>,1,0,0.0,959
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"<interface-vlan xmlns=""urn:brocade.com:mgmt:brocade-interface"">",1,0,0.0,960
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Interface Configuration Commands,1,0,0.0,961
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""NOS NETCONF XML Configuration Command Templates.",1,0,0.0,962
db44e8e0bf1005d946de86be7542aa1bf7d122f1,leverages AMPP on NOS,1,0,0.0,963
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"Fake: Handles life-cycle management of Neutron network,",1,0,0.0,964
db44e8e0bf1005d946de86be7542aa1bf7d122f1,id=port_id).update({'admin_state_up': admin_state_up}),1,0,0.0,965
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</interface-vlan>,1,0,0.0,966
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network_id=network_id).all(),1,0,0.0,967
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return session.query(ML2_BrocadePort).filter_by(,1,0,0.0,968
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return session.query(ML2_BrocadePort).filter_by(id=port_id).first(),1,0,0.0,969
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return session.query(ML2_BrocadeNetwork).all(),1,0,0.0,970
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"sa.ForeignKey(""ml2_brocadenetworks.id""),",1,0,0.0,971
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return session.query(ML2_BrocadeNetwork).filter_by(id=net_id).first(),1,0,0.0,972
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"network_type='vlan',",1,0,0.0,973
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session.query(ML2_BrocadePort).filter_by(,1,0,0.0,974
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</port-profile>,1,0,0.0,975
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"<vlan operation=""delete"">",1,0,0.0,976
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<allowed>,1,0,0.0,977
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<activate/>,1,0,0.0,978
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<port-profile>,1,0,0.0,979
db44e8e0bf1005d946de86be7542aa1bf7d122f1,models_v2.HasTenant):,1,0,0.0,980
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"<port-profile-global xmlns=""urn:brocade.com:mgmt:brocade-port-profile"">",1,0,0.0,981
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"xmlns=""urn:brocade.com:mgmt:brocade-port-profile"" operation=""delete"">",1,0,0.0,982
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<port-profile,1,0,0.0,983
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</trunk>,1,0,0.0,984
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</allowed>,1,0,0.0,985
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<add>{vlan_id}</add>,1,0,0.0,986
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<trunk>,1,0,0.0,987
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"<port-profile xmlns=""urn:brocade.com:mgmt:brocade-port-profile"">",1,0,0.0,988
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</switchport>,1,0,0.0,989
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</mode>,1,0,0.0,990
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<mode>,1,0,0.0,991
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<switchport>,1,0,0.0,992
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</vlan-profile>,1,0,0.0,993
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<switchport/>,1,0,0.0,994
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<vlan-profile>,1,0,0.0,995
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<vlan-profile/>,1,0,0.0,996
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<name>{name}</name>,1,0,0.0,997
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<vlan-mode>trunk</vlan-mode>,1,0,0.0,998
db44e8e0bf1005d946de86be7542aa1bf7d122f1,server_default=''),1,0,0.0,999
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port_id=port_id).update({'admin_state_up': admin_state_up}),1,0,0.0,1000
db44e8e0bf1005d946de86be7542aa1bf7d122f1,not utils.compare_elements(,1,0,0.0,1001
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.VIF_DETAILS: {,1,0,0.0,1002
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"portbindings.VIF_TYPE: portbindings.VIF_TYPE_BRIDGE,",1,0,0.0,1003
db44e8e0bf1005d946de86be7542aa1bf7d122f1,bport.vlan_id),1,0,0.0,1004
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"bport.physical_interface,",1,0,0.0,1005
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.notifier.port_update(context, port,",1,0,0.0,1006
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._notify_port_updated(context, port)",1,0,0.0,1007
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.notifier.security_groups_member_updated(,1,0,0.0,1008
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port.get(ext_sg.SECURITYGROUPS))):,1,0,0.0,1009
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"original_port.get(ext_sg.SECURITYGROUPS),",1,0,0.0,1010
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port_data,",1,0,0.0,1011
db44e8e0bf1005d946de86be7542aa1bf7d122f1,@staticmethod,1,0,0.0,1012
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port['port'][ext_sg.SECURITYGROUPS]),1,0,0.0,1013
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._process_port_create_security_group(,1,0,0.0,1014
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._delete_port_security_group_bindings(context, port_id)",1,0,0.0,1015
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._get_security_groups_on_port(context, port))",1,0,0.0,1016
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.delete_port(context, port_id)",1,0,0.0,1017
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"super(BrocadePluginV2, self).delete_port(context, port_id)",1,0,0.0,1018
db44e8e0bf1005d946de86be7542aa1bf7d122f1,raise Exception(,1,0,0.0,1019
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<activate,1,0,0.0,1020
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._driver.dissociate_mac_from_network(switch['address'],",1,0,0.0,1021
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.CAP_PORT_FILTER:,1,0,0.0,1022
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Transform MAC address format.",1,0,0.0,1023
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session.query(BrocadePort).filter_by(,1,0,0.0,1024
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return None,1,0,0.0,1025
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session.delete(port),1,0,0.0,1026
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return ports,1,0,0.0,1027
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session.add(port),1,0,0.0,1028
db44e8e0bf1005d946de86be7542aa1bf7d122f1,tenant_id=tenant_id),1,0,0.0,1029
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"admin_state_up=admin_state_up,",1,0,0.0,1030
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"vlan_id=vlan_id,",1,0,0.0,1031
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"physical_interface=physical_interface,",1,0,0.0,1032
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"network_id=network_id,",1,0,0.0,1033
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"vlan_id, tenant_id, admin_state_up):",1,0,0.0,1034
db44e8e0bf1005d946de86be7542aa1bf7d122f1,except sa.exc.SQLAlchemyError:,1,0,0.0,1035
db44e8e0bf1005d946de86be7542aa1bf7d122f1,:type interface_mac: string,1,0,0.0,1036
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return nets,1,0,0.0,1037
db44e8e0bf1005d946de86be7542aa1bf7d122f1,try:,1,0,0.0,1038
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return (session.query(BrocadeNetwork).filter_by(id=net_id).first()),1,0,0.0,1039
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session.delete(net),1,0,0.0,1040
db44e8e0bf1005d946de86be7542aa1bf7d122f1,session.add(net),1,0,0.0,1041
db44e8e0bf1005d946de86be7542aa1bf7d122f1,with session.begin(subtransactions=True):,1,0,0.0,1042
db44e8e0bf1005d946de86be7542aa1bf7d122f1,nullable=False),1,0,0.0,1043
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"sa.ForeignKey(""brocadenetworks.id""),",1,0,0.0,1044
db44e8e0bf1005d946de86be7542aa1bf7d122f1,:rtype: string,1,0,0.0,1045
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</port-profile-global>,1,0,0.0,1046
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.driver.associate_mac_to_network(,1,0,0.0,1047
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"xmlns:nc=""urn:ietf:params:xml:ns:netconf:base:1.0"" nc:operation=""delete"" />",1,0,0.0,1048
db44e8e0bf1005d946de86be7542aa1bf7d122f1,noscli.execute(args.cmd),1,0,0.0,1049
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.assertFalse(brocade_db.get_networks(self.context)),1,0,0.0,1050
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.delete_network(self.context, net['id'])",1,0,0.0,1051
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(int(net['vlan']), TEST_VLAN)",1,0,0.0,1052
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(net['id'], net_id)",1,0,0.0,1053
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.vlans.remove(vlan_id),1,0,0.0,1054
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.vlans.add(vlan),1,0,0.0,1055
db44e8e0bf1005d946de86be7542aa1bf7d122f1,),1,0,0.0,1056
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"print(driver.get_port_profile(mgr, 'default'))",1,0,0.0,1057
db44e8e0bf1005d946de86be7542aa1bf7d122f1,print(driver.get_port_profiles(mgr)),1,0,0.0,1058
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"parser.add_argument('otherargs', nargs='*')",1,0,0.0,1059
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"TEST_VLAN, tenant_id, admin_state_up)",1,0,0.0,1060
db44e8e0bf1005d946de86be7542aa1bf7d122f1,parser.add_argument('cmd'),1,0,0.0,1061
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"parser.add_argument('--password', default='password')",1,0,0.0,1062
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"parser.add_argument('--username', default='admin')",1,0,0.0,1063
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"parser.add_argument('--ip', default='localhost')",1,0,0.0,1064
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"usage=usage_desc, epilog='foo bar help')",1,0,0.0,1065
db44e8e0bf1005d946de86be7542aa1bf7d122f1,dissociate <id> <mac>,1,0,0.0,1066
db44e8e0bf1005d946de86be7542aa1bf7d122f1,associate <id> <mac>,1,0,0.0,1067
db44e8e0bf1005d946de86be7542aa1bf7d122f1,delete <id>,1,0,0.0,1068
db44e8e0bf1005d946de86be7542aa1bf7d122f1,create <id>,1,0,0.0,1069
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"physical_interface,",1,0,0.0,1070
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(port['port_id'], port_id)",1,0,0.0,1071
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<static>,1,0,0.0,1072
db44e8e0bf1005d946de86be7542aa1bf7d122f1,},1,0,0.0,1073
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"vlan_id, tenant_id, admin_state_up)",1,0,0.0,1074
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"super(TestVlanBitmap, self).setUp()",1,0,0.0,1075
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""exercise Vlan bitmap .""""""",1,0,0.0,1076
db44e8e0bf1005d946de86be7542aa1bf7d122f1,test_bindings.PortBindingsTestCase):,1,0,0.0,1077
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"BrocadePluginV2TestCase,",1,0,0.0,1078
db44e8e0bf1005d946de86be7542aa1bf7d122f1,BrocadePluginV2TestCase):,1,0,0.0,1079
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"super(BrocadePluginV2TestCase, self).setUp(self._plugin_name)",1,0,0.0,1080
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'brocade_init', new=mocked_brocade_init):",1,0,0.0,1081
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"with mock.patch.object(brocade_plugin.BrocadePluginV2,",1,0,0.0,1082
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'password': FAKE_PASSWORD,1,0,0.0,1083
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(port['network_id'], net_id)",1,0,0.0,1084
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'username': FAKE_USERNAME,",1,0,0.0,1085
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'nos.fake_nosdriver.NOSdriver'),1,0,0.0,1086
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'NeutronPlugin.BrocadePluginV2'),1,0,0.0,1087
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.assertFalse(brocade_db.get_ports(self.context)),1,0,0.0,1088
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.delete_port(self.context, port_id)",1,0,0.0,1089
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.update_port_state(self.context, port_id, admin_state_up)",1,0,0.0,1090
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(port['tenant_id'], tenant_id)",1,0,0.0,1091
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(int(port['vlan_id']), TEST_VLAN)",1,0,0.0,1092
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.assertEqual(port['physical_interface'], physical_interface)",1,0,0.0,1093
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Command descriptions:,1,0,0.0,1094
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.driver.dissociate_mac_from_network(,1,0,0.0,1095
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.driver.delete_network(self.host, self.username, self.password,",1,0,0.0,1096
db44e8e0bf1005d946de86be7542aa1bf7d122f1,with excutils.save_and_reraise_exception():,1,0,0.0,1097
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.configure_allowed_vlans_for_vlan_profile(mgr, name, net_id)",1,0,0.0,1098
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.configure_trunk_mode_for_vlan_profile(mgr, name)",1,0,0.0,1099
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.configure_l2_mode_for_vlan_profile(mgr, name)",1,0,0.0,1100
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.create_vlan_profile_for_port_profile(mgr, name)",1,0,0.0,1101
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.create_port_profile(mgr, name)",1,0,0.0,1102
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.create_vlan_interface(mgr, net_id)",1,0,0.0,1103
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.mgr.close_session(),1,0,0.0,1104
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Close NETCONF session.""""""",1,0,0.0,1105
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"dict(host=host, ssh_port=SSH_PORT))",1,0,0.0,1106
db44e8e0bf1005d946de86be7542aa1bf7d122f1,except Exception as e:,1,0,0.0,1107
db44e8e0bf1005d946de86be7542aa1bf7d122f1,net_id),1,0,0.0,1108
db44e8e0bf1005d946de86be7542aa1bf7d122f1,unknown_host_cb=nos_unknown_host_cb),1,0,0.0,1109
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"username=username, password=password,",1,0,0.0,1110
db44e8e0bf1005d946de86be7542aa1bf7d122f1,try:,1,0,0.0,1111
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return self.mgr,1,0,0.0,1112
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return True,1,0,0.0,1113
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"xmlns:nc=""urn:ietf:params:xml:ns:netconf:base:1.0"" nc:operation=""delete"">",1,0,0.0,1114
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<static,1,0,0.0,1115
db44e8e0bf1005d946de86be7542aa1bf7d122f1,</static>,1,0,0.0,1116
db44e8e0bf1005d946de86be7542aa1bf7d122f1,<mac-address>{mac_address}</mac-address>,1,0,0.0,1117
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.activate_port_profile(mgr, name)",1,0,0.0,1118
db44e8e0bf1005d946de86be7542aa1bf7d122f1,except Exception:,1,0,0.0,1119
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"LOG.exception(_LE(""NETCONF error""))",1,0,0.0,1120
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.close_session(),1,0,0.0,1121
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.driver.create_network(self.host, self.username, self.password,",1,0,0.0,1122
db44e8e0bf1005d946de86be7542aa1bf7d122f1,exit(0),1,0,0.0,1123
db44e8e0bf1005d946de86be7542aa1bf7d122f1,print(usage_desc),1,0,0.0,1124
db44e8e0bf1005d946de86be7542aa1bf7d122f1,else:,1,0,0.0,1125
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._dissociate(args.otherargs[0], args.otherargs[1])",1,0,0.0,1126
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._associate(args.otherargs[0], args.otherargs[1])",1,0,0.0,1127
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._delete(args.otherargs[0]),1,0,0.0,1128
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._create(args.otherargs[0]),1,0,0.0,1129
db44e8e0bf1005d946de86be7542aa1bf7d122f1,#!/usr/bin/env python,1,0,0.0,1130
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"name=name, vlan_id=vlan_id)",1,0,0.0,1131
db44e8e0bf1005d946de86be7542aa1bf7d122f1,name=name),1,0,0.0,1132
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"name=name, mac_address=mac_address)",1,0,0.0,1133
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return response,1,0,0.0,1134
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"filter=('xpath', filterstr)).data_xml",1,0,0.0,1135
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.dissociate_mac_from_port_profile(mgr, name, mac)",1,0,0.0,1136
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.associate_mac_to_port_profile(mgr, name, mac)",1,0,0.0,1137
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.delete_vlan_interface(mgr, net_id)",1,0,0.0,1138
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.delete_port_profile(mgr, name)",1,0,0.0,1139
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.deactivate_port_profile(mgr, name)",1,0,0.0,1140
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return neutron_port,1,0,0.0,1141
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.CONF.register_opts(SWITCH_OPTS, ""SWITCH"")",1,0,0.0,1142
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"physical_interface,",1,0,0.0,1143
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('username', default=''),",1,0,0.0,1144
db44e8e0bf1005d946de86be7542aa1bf7d122f1,nullable=False),0,0,0.0,1145
db44e8e0bf1005d946de86be7542aa1bf7d122f1,server_default=''),0,0,0.0,1146
db44e8e0bf1005d946de86be7542aa1bf7d122f1,raise,1,0,0.0,1147
db44e8e0bf1005d946de86be7542aa1bf7d122f1,with excutils.save_and_reraise_exception():,0,0,0.0,1148
db44e8e0bf1005d946de86be7542aa1bf7d122f1,db.configure_db(),1,0,0.0,1149
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"super(NvpPluginV2, self).__init__()",0,0,0.0,1150
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"super(BrocadePluginV2, self).__init__()",0,0,0.0,1151
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('ostype', default='NOS')",1,0,0.0,1152
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('password', default='', secret=True),",1,0,0.0,1153
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'a port')),0,0,0.0,1154
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.addCleanup(db.clear_db),1,0,0.0,1155
db44e8e0bf1005d946de86be7542aa1bf7d122f1,help=_('Currently unused')),0,0,0.0,1156
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('ostype', default='NOS',",0,0,0.0,1157
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('password', default='', secret=True,",0,0,0.0,1158
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('username', default='',",0,0,0.0,1159
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""on NVP Platform"") % router_id)",1,0,0.0,1160
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""on NVP Platform""), router_id)",0,0,0.0,1161
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""check logs""))",0,0,0.0,1162
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.CAP_PORT_FILTER:,1,0,0.0,1163
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return res_ports,1,0,0.0,1164
db44e8e0bf1005d946de86be7542aa1bf7d122f1,db.configure_db(),1,0,0.0,1165
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"l3_rpc.L3RpcCallback(),",0,0,0.0,1166
db44e8e0bf1005d946de86be7542aa1bf7d122f1,fields),1,0,0.0,1167
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Implementation of Brocade Neutron Plugin.""""""",1,0,0.0,1168
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"{'device': device, 'agent_id': agent_id})",1,0,0.0,1169
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Agent callback.""""""",1,0,0.0,1170
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.CONF.register_opts(PHYSICAL_INTERFACE_OPTS, ""PHYSICAL_INTERFACE"")",1,0,0.0,1171
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'a port')),1,0,0.0,1172
db44e8e0bf1005d946de86be7542aa1bf7d122f1,],1,0,0.0,1173
db44e8e0bf1005d946de86be7542aa1bf7d122f1,help=_('Currently unused')),1,0,0.0,1174
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('ostype', default='NOS',",1,0,0.0,1175
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('password', default='', secret=True,",1,0,0.0,1176
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cfg.StrOpt('username', default='',",1,0,0.0,1177
db44e8e0bf1005d946de86be7542aa1bf7d122f1,is_admin=False),1,0,0.0,1178
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"l3_rpc_base.L3RpcCallbackMixin,",1,0,0.0,1179
db44e8e0bf1005d946de86be7542aa1bf7d122f1,is_admin=False),0,0,0.0,1180
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"sg_db_rpc.SecurityGroupServerRpcMixin,",1,0,0.0,1181
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"session, device[cls.TAP_PREFIX_LEN:])",1,0,0.0,1182
db44e8e0bf1005d946de86be7542aa1bf7d122f1,@classmethod,1,0,0.0,1183
db44e8e0bf1005d946de86be7542aa1bf7d122f1,sg_db_rpc.SecurityGroupServerRpcCallbackMixin):,1,0,0.0,1184
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"securitygroups_rpc.SecurityGroupServerRpcCallback(),",0,0,0.0,1185
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"SecurityGroupServerRpcMixin,",0,0,0.0,1186
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"session, device[TAP_PREFIX_LEN:])",0,0,0.0,1187
db44e8e0bf1005d946de86be7542aa1bf7d122f1,@classmethod,0,0,0.0,1188
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"res_ports.append(self._fields(port, fields))",1,0,0.0,1189
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"filters,",1,0,0.0,1190
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.create_port(context, port_id, network_id,",1,0,0.0,1191
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Delete network.",0,0,0.0,1192
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return policy.check(context, action, resource)",1,0,0.0,1193
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.CAP_PORT_FILTER:,1,0,0.0,1194
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network['id']),0,0,0.0,1195
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.CAP_PORT_FILTER:,0,0,0.0,1196
db44e8e0bf1005d946de86be7542aa1bf7d122f1,NOS NETCONF XML Configuration Command Templates,1,0,0.0,1197
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""NOS NETCONF XML Configuration Command Templates.",0,0,0.0,1198
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Initialize Brocade Plugin, specify switch address",1,0,0.0,1199
db44e8e0bf1005d946de86be7542aa1bf7d122f1,''',1,0,0.0,1200
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Implentation of Brocade Quantum Plugin.,1,0,0.0,1201
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Create network.",0,0,0.0,1202
db44e8e0bf1005d946de86be7542aa1bf7d122f1,raise ext_qos.QueueNotFound(id=id),1,0,0.0,1203
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Initialize Brocade Plugin.",0,0,0.0,1204
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Implentation of Brocade Quantum Plugin.""""""",0,0,0.0,1205
db44e8e0bf1005d946de86be7542aa1bf7d122f1,sg_db_rpc.SecurityGroupServerRpcMixin):,1,0,0.0,1206
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"l3_db.L3_NAT_db_mixin,",1,0,0.0,1207
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return q_rpc.PluginRpcDispatcher([self]),1,0,0.0,1208
db44e8e0bf1005d946de86be7542aa1bf7d122f1,agents_db.AgentDbMixin):,0,0,0.0,1209
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"sg_db_rpc.SecurityGroupServerRpcMixin,",0,0,0.0,1210
db44e8e0bf1005d946de86be7542aa1bf7d122f1,agents_db.AgentExtRpcCallback()]),0,0,0.0,1211
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return q_rpc.PluginRpcDispatcher([self,",0,0,0.0,1212
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network['id']),1,0,0.0,1213
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return super(NvpPluginV2, self).get_qos_queue(context, id, fields)",1,0,0.0,1214
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return self._fields(port, fields)",1,0,0.0,1215
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port_data,",0,0,0.0,1216
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._extend_port_dict_binding(context, port)",1,0,0.0,1217
db44e8e0bf1005d946de86be7542aa1bf7d122f1,with context.session.begin(subtransactions=True):,1,0,0.0,1218
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return self._extend_port_dict_binding(context, port)",1,0,0.0,1219
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return self._extend_port_dict_binding(context, neutron_port)",1,0,0.0,1220
db44e8e0bf1005d946de86be7542aa1bf7d122f1,agentschedulers_db.DhcpAgentSchedulerDbMixin):,1,0,0.0,1221
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.CAP_PORT_FILTER:,0,0,0.0,1222
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings.CAPABILITIES: {,0,0,0.0,1223
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"portbindings.VIF_TYPE: portbindings.VIF_TYPE_BRIDGE,",0,0,0.0,1224
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port),0,0,0.0,1225
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return neutron_port,0,0,0.0,1226
db44e8e0bf1005d946de86be7542aa1bf7d122f1,ext_qos.qos_queue_list):,1,0,0.0,1227
db44e8e0bf1005d946de86be7542aa1bf7d122f1,neutron_port),0,0,0.0,1228
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port['port'],",0,0,0.0,1229
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._process_portbindings_create_and_update(context,",0,0,0.0,1230
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings_base.register_port_dict_function(),0,0,0.0,1231
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings_base.PortBindingBaseMixin):,0,0,0.0,1232
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"agentschedulers_db.DhcpAgentSchedulerDbMixin,",0,0,0.0,1233
db44e8e0bf1005d946de86be7542aa1bf7d122f1,fields),1,0,0.0,1234
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"return super(NvpPluginV2, self).get_qos_queues(context, filters,",1,0,0.0,1235
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return [],1,0,0.0,1236
db44e8e0bf1005d946de86be7542aa1bf7d122f1,device[len(n_const.TAP_DEVICE_PREFIX):]),1,0,0.0,1237
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'vlan_id': port.vlan_id,",1,0,0.0,1238
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'network_id': port.network_id,",1,0,0.0,1239
db44e8e0bf1005d946de86be7542aa1bf7d122f1,metadata_rpc.MetadataRpcCallback()],1,0,0.0,1240
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"switch['username'],",1,0,0.0,1241
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._driver.create_network(switch['address'],",1,0,0.0,1242
db44e8e0bf1005d946de86be7542aa1bf7d122f1,try:,1,0,0.0,1243
db44e8e0bf1005d946de86be7542aa1bf7d122f1,with context.session.begin(subtransactions=True):,1,0,0.0,1244
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Create network.",1,0,0.0,1245
db44e8e0bf1005d946de86be7542aa1bf7d122f1,l3_rpc_agent_api.L3AgentNotifyAPI(),1,0,0.0,1246
db44e8e0bf1005d946de86be7542aa1bf7d122f1,dhcp_rpc_agent_api.DhcpAgentNotifyAPI(),1,0,0.0,1247
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.conn.consume_in_threads(),1,0,0.0,1248
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self.conn.create_consumer(svc_topic, self.endpoints, fanout=False)",1,0,0.0,1249
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"agents_db.AgentExtRpcCallback(),",1,0,0.0,1250
db44e8e0bf1005d946de86be7542aa1bf7d122f1,vlan_id),1,0,0.0,1251
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"l3_rpc.L3RpcCallback(),",1,0,0.0,1252
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"dhcp_rpc.DhcpRpcCallback(),",1,0,0.0,1253
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"securitygroups_rpc.SecurityGroupServerRpcCallback(),",1,0,0.0,1254
db44e8e0bf1005d946de86be7542aa1bf7d122f1,is_admin=False),1,0,0.0,1255
db44e8e0bf1005d946de86be7542aa1bf7d122f1,svc_constants.L3_ROUTER_NAT: topics.L3PLUGIN},1,0,0.0,1256
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'password': cfg.CONF.SWITCH.password,1,0,0.0,1257
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'username': cfg.CONF.SWITCH.username,",1,0,0.0,1258
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.start_periodic_dhcp_agent_status_check(),1,0,0.0,1259
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.brocade_init(),1,0,0.0,1260
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"switch['password'],",1,0,0.0,1261
db44e8e0bf1005d946de86be7542aa1bf7d122f1,except Exception:,1,0,0.0,1262
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'port_id': port.port_id,",1,0,0.0,1263
db44e8e0bf1005d946de86be7542aa1bf7d122f1,with session.begin(subtransactions=True):,1,0,0.0,1264
db44e8e0bf1005d946de86be7542aa1bf7d122f1,mac),1,0,0.0,1265
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"vlan_id,",1,0,0.0,1266
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._driver.associate_mac_to_network(switch['address'],",1,0,0.0,1267
db44e8e0bf1005d946de86be7542aa1bf7d122f1,neutron_port),1,0,0.0,1268
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"port['port'],",1,0,0.0,1269
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._process_portbindings_create_and_update(context,",1,0,0.0,1270
db44e8e0bf1005d946de86be7542aa1bf7d122f1,port),1,0,0.0,1271
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._process_l3_update(context, net, network['network'])",1,0,0.0,1272
db44e8e0bf1005d946de86be7542aa1bf7d122f1,network),1,0,0.0,1273
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return result,1,0,0.0,1274
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._vlan_bitmap.release_vlan(int(vlan_id)),1,0,0.0,1275
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.delete_network(context, net_id)",1,0,0.0,1276
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._driver.delete_network(switch['address'],",1,0,0.0,1277
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.delete_port(context, bport['port_id'])",1,0,0.0,1278
db44e8e0bf1005d946de86be7542aa1bf7d122f1,net_id),1,0,0.0,1279
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._process_l3_delete(context, net_id)",1,0,0.0,1280
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Delete network.",1,0,0.0,1281
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"self._process_l3_create(context, net, network['network'])",1,0,0.0,1282
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.create_network(context, net_uuid, vlan_id)",1,0,0.0,1283
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""check logs""))",1,0,0.0,1284
db44e8e0bf1005d946de86be7542aa1bf7d122f1,cfg.CONF.router_scheduler_driver,1,0,0.0,1285
db44e8e0bf1005d946de86be7542aa1bf7d122f1,cfg.CONF.network_scheduler_driver,1,0,0.0,1286
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self._setup_rpc(),1,0,0.0,1287
db44e8e0bf1005d946de86be7542aa1bf7d122f1,),1,0,0.0,1288
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"1.1 - Added get_active_networks_info, create_dhcp_port,",1,0,0.0,1289
db44e8e0bf1005d946de86be7542aa1bf7d122f1,1.0 - Initial version.,1,0,0.0,1290
db44e8e0bf1005d946de86be7542aa1bf7d122f1,API version history:,1,0,0.0,1291
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"session, device[len(n_const.TAP_DEVICE_PREFIX):])",1,0,0.0,1292
db44e8e0bf1005d946de86be7542aa1bf7d122f1,@classmethod,1,0,0.0,1293
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'exists': False},1,0,0.0,1294
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"brocade_db.update_port_state(rpc_context, port_id, False)",1,0,0.0,1295
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'exists': True},1,0,0.0,1296
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Device no longer exists on agent.""""""",1,0,0.0,1297
db44e8e0bf1005d946de86be7542aa1bf7d122f1,**kwargs,1,0,0.0,1298
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings_base.register_port_dict_function(),1,0,0.0,1299
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"device=device,",1,0,0.0,1300
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"rpc_context,",1,0,0.0,1301
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.get_device_details(,1,0,0.0,1302
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return [,1,0,0.0,1303
db44e8e0bf1005d946de86be7542aa1bf7d122f1,return entry,1,0,0.0,1304
db44e8e0bf1005d946de86be7542aa1bf7d122f1,else:,1,0,0.0,1305
db44e8e0bf1005d946de86be7542aa1bf7d122f1,},1,0,0.0,1306
db44e8e0bf1005d946de86be7542aa1bf7d122f1,'admin_state_up': port.admin_state_up,1,0,0.0,1307
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"'physical_network': port.physical_interface,",1,0,0.0,1308
db44e8e0bf1005d946de86be7542aa1bf7d122f1,and update_dhcp_port methods.,1,0,0.0,1309
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"topics.NETWORK,",1,0,0.0,1310
db44e8e0bf1005d946de86be7542aa1bf7d122f1,topics.DELETE),1,0,0.0,1311
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"topics.PORT,",1,0,0.0,1312
db44e8e0bf1005d946de86be7542aa1bf7d122f1,physical_interface),1,0,0.0,1313
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""dhcp_agent_scheduler""]",1,0,0.0,1314
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""l3_agent_scheduler"",",1,0,0.0,1315
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""extraroute"", ""agent"",",1,0,0.0,1316
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""external-net"", ""router"",",1,0,0.0,1317
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"super(BrocadePluginV2, self).__init__()",1,0,0.0,1318
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"""""""Initialize Brocade Plugin.",1,0,0.0,1319
db44e8e0bf1005d946de86be7542aa1bf7d122f1,Provides L2 Virtual Network functionality using VDX. Upper,1,0,0.0,1320
db44e8e0bf1005d946de86be7542aa1bf7d122f1,portbindings_base.PortBindingBaseMixin):,1,0,0.0,1321
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"agentschedulers_db.DhcpAgentSchedulerDbMixin,",1,0,0.0,1322
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"l3_agentschedulers_db.L3AgentSchedulerDbMixin,",1,0,0.0,1323
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"SecurityGroupServerRpcMixin,",1,0,0.0,1324
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"extraroute_db.ExtraRoute_db_mixin,",1,0,0.0,1325
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"external_net_db.External_net_db_mixin,",1,0,0.0,1326
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"physical_network=physical_network, vlan_id=vlan_id)",1,0,0.0,1327
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cctxt.cast(context, 'port_update', port=port,",1,0,0.0,1328
db44e8e0bf1005d946de86be7542aa1bf7d122f1,"cctxt.cast(context, 'network_delete', network_id=network_id)",1,0,0.0,1329
db44e8e0bf1005d946de86be7542aa1bf7d122f1,fanout=True),1,0,0.0,1330
db44e8e0bf1005d946de86be7542aa1bf7d122f1,topics.UPDATE),1,0,0.0,1331
db44e8e0bf1005d946de86be7542aa1bf7d122f1,self.vbm_.release_vlan(4),1,0,0.0,1332
