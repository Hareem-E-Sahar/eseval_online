commit_id,line,line_level_label,count,line_score,row
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add fip agent gateway port information to the router_info,1,4,1.0,1
707890ef22c203389f61ddfe8025f1b0e2afe819,# is created with the ip address of the external gateway port,1,4,1.0,2
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add floatingip agent gateway port info to router,1,4,1.0,3
707890ef22c203389f61ddfe8025f1b0e2afe819,"fip = {'id': _uuid(),",1,3,0.75,4
707890ef22c203389f61ddfe8025f1b0e2afe819,# We get the router info particular to a dvr router,1,3,0.75,5
707890ef22c203389f61ddfe8025f1b0e2afe819,# We need to fetch the floatingip agent gateway port info,1,3,0.75,6
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway port host mismatches with the agent and so the,1,3,0.75,7
707890ef22c203389f61ddfe8025f1b0e2afe819,# Mock the plugin RPC API so a known external network id is returned,1,2,0.5,8
707890ef22c203389f61ddfe8025f1b0e2afe819,# Create the first router fip with external net1,1,2,0.5,9
707890ef22c203389f61ddfe8025f1b0e2afe819,"* A ""client"" namespace (simulating a vm) with a port on router",1,2,0.5,10
707890ef22c203389f61ddfe8025f1b0e2afe819,"* A router (which creates a metadata proxy in the router namespace),",1,2,0.5,11
707890ef22c203389f61ddfe8025f1b0e2afe819,i = 0,1,2,0.5,12
707890ef22c203389f61ddfe8025f1b0e2afe819,# Verify router gateway interface is configured to receive Router Advts,1,2,0.5,13
707890ef22c203389f61ddfe8025f1b0e2afe819,port = router.get_ex_gw_port(),1,2,0.5,14
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add multiple-IPv6-prefix internal router port,1,2,0.5,15
707890ef22c203389f61ddfe8025f1b0e2afe819,# when the router updates are processed by the agent,1,2,0.5,16
707890ef22c203389f61ddfe8025f1b0e2afe819,# Verify that router gw interface is configured to receive Router,1,2,0.5,17
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = self.manage_router(self.agent, r)",1,2,0.5,18
707890ef22c203389f61ddfe8025f1b0e2afe819,# Advts from upstream router when no external gateway is configured.,1,2,0.5,19
707890ef22c203389f61ddfe8025f1b0e2afe819,'''Test dvr router lifecycle,1,2,0.5,20
707890ef22c203389f61ddfe8025f1b0e2afe819,"port = net_helpers.get_free_namespace_port(l3_constants.PROTO_NAME_TCP,",1,2,0.5,21
707890ef22c203389f61ddfe8025f1b0e2afe819,Make sure that when the agent sends notifications of router events,1,2,0.5,22
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = self.manage_router(self.agent, router_info)",1,2,0.5,23
707890ef22c203389f61ddfe8025f1b0e2afe819,ip = ip_lib.IPWrapper(namespace=namespace),1,2,0.5,24
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(ip_version=6),1,2,0.5,25
707890ef22c203389f61ddfe8025f1b0e2afe819,# Create the second router fip with external net2,1,2,0.5,26
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(,1,2,0.5,27
707890ef22c203389f61ddfe8025f1b0e2afe819,# Since by definition this is a dvr (distributed = true),1,2,0.5,28
707890ef22c203389f61ddfe8025f1b0e2afe819,"""namespace %s was found but agent is in dvr mode not dvr_snat""",1,2,0.5,29
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.dist_fip_count = 0,1,2,0.5,30
707890ef22c203389f61ddfe8025f1b0e2afe819,"snat_port_cidr = ip + ""/"" + str(prefix_len)",1,2,0.5,31
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip = snat_port[""fixed_ips""][0]['ip_address']",1,2,0.5,32
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port_cidr = ip + ""/"" + str(prefix_len)",1,2,0.5,33
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = self.manage_router(agent, r_info)",1,2,0.5,34
707890ef22c203389f61ddfe8025f1b0e2afe819,port changes while migration or when the private port host,1,2,0.5,35
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertTrue(False, "" agent not configured for dvr or dvr_snat"")",1,2,0.5,36
707890ef22c203389f61ddfe8025f1b0e2afe819,# if the agent is in dvr mode then the snat_ns_name namespace,1,2,0.5,37
707890ef22c203389f61ddfe8025f1b0e2afe819,agent = self.agent,1,2,0.5,38
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add the info to router as the first snat port,1,2,0.5,39
707890ef22c203389f61ddfe8025f1b0e2afe819,port = internal_ports[0],1,2,0.5,40
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add snat port information to the router,1,2,0.5,41
707890ef22c203389f61ddfe8025f1b0e2afe819,# Pick an ip address which is not the same as port_ip,1,2,0.5,42
707890ef22c203389f61ddfe8025f1b0e2afe819,# Get values from external gateway port,1,2,0.5,43
707890ef22c203389f61ddfe8025f1b0e2afe819,# the agent type the dvr supports. The namespace creation is,1,2,0.5,44
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(num_internal_ports=1),1,2,0.5,45
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = prepare_router_data(enable_snat=True, num_internal_ports=1)",1,2,0.5,46
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip = ex_gw_port[""fixed_ips""][0]['ip_address']",1,2,0.5,47
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = prepare_router_data(ip_version=6, dual_stack=dual_stack)",1,2,0.5,48
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(),0,2,0.5,49
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(num_internal_ports=4),0,2,0.5,50
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = l3_test_common.prepare_router_data(num_internal_ports=2,",0,2,0.5,51
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = dvr_router.DvrEdgeRouter(agent,",0,2,0.5,52
707890ef22c203389f61ddfe8025f1b0e2afe819,ri = dvr_router.DvrEdgeRouter(,0,2,0.5,53
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(num_internal_ports=2),0,2,0.5,54
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(ip_version=6),1,2,0.5,55
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = l3router.RouterInfo(id, router, **self.ri_kwargs)",1,2,0.5,56
707890ef22c203389f61ddfe8025f1b0e2afe819,id = _uuid(),1,2,0.5,57
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = prepare_router_data(ip_version=6, dual_stack=dual_stack)",0,2,0.5,58
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(num_internal_ports=2),0,2,0.5,59
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = l3router.RouterInfo(ns_id, router, **self.ri_kwargs)",0,2,0.5,60
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(ip_version=6),1,2,0.5,61
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = l3router.RouterInfo(id, router, **self.ri_kwargs)",1,2,0.5,62
707890ef22c203389f61ddfe8025f1b0e2afe819,id = _uuid(),1,2,0.5,63
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = prepare_router_data(ip_version=6, dual_stack=dual_stack)",0,2,0.5,64
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = l3router.RouterInfo(ns_id, router, **self.ri_kwargs)",0,2,0.5,65
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(enable_snat=False),1,2,0.5,66
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = dvr_router.DvrEdgeRouter(mock.sentinel.agent,",0,2,0.5,67
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(num_internal_ports=2),0,2,0.5,68
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(enable_snat=True),0,2,0.5,69
707890ef22c203389f61ddfe8025f1b0e2afe819,ri = dvr_router.DvrRouter(,1,2,0.5,70
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(enable_snat=False),0,2,0.5,71
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(),1,2,0.5,72
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent = l3_agent.L3NATAgent(HOSTNAME, self.conf)",1,2,0.5,73
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = dvr_router.DvrRouter(mock.sentinel.agent,",1,2,0.5,74
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(num_internal_ports=4),1,2,0.5,75
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = prepare_router_data(num_internal_ports=2,",1,2,0.5,76
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri = dvr_router.DvrRouter(agent,",1,2,0.5,77
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(enable_snat=True),1,2,0.5,78
707890ef22c203389f61ddfe8025f1b0e2afe819,router = prepare_router_data(num_internal_ports=2),1,2,0.5,79
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = l3_test_common.prepare_router_data(enable_snat=True,",0,2,0.5,80
707890ef22c203389f61ddfe8025f1b0e2afe819,"router = l3_test_common.prepare_router_data(ip_version=6,",0,2,0.5,81
707890ef22c203389f61ddfe8025f1b0e2afe819,router = {,1,2,0.5,82
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(num_internal_ports=1),0,2,0.5,83
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.dist_fip_count = 0,1,2,0.5,84
707890ef22c203389f61ddfe8025f1b0e2afe819,router = l3_test_common.prepare_router_data(ip_version=6),0,2,0.5,85
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port = {'id': _uuid(),",1,2,0.5,86
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_modes = [slaac_mode] * 2,1,1,0.25,87
707890ef22c203389f61ddfe8025f1b0e2afe819,# clear agent router_info as it will be after restart,1,1,0.25,88
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.router_info = {},1,1,0.25,89
707890ef22c203389f61ddfe8025f1b0e2afe819,# Synchronize the agent with the plug-in,1,1,0.25,90
707890ef22c203389f61ddfe8025f1b0e2afe819,external_network_id = _uuid(),1,1,0.25,91
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_plugin_api.get_external_network_id.return_value = (,1,1,0.25,92
707890ef22c203389f61ddfe8025f1b0e2afe819,"# deleted by the agent when it processes the updates. Otherwise,",1,1,0.25,93
707890ef22c203389f61ddfe8025f1b0e2afe819,# _process_router_if_compatible in the agent fails,1,1,0.25,94
707890ef22c203389f61ddfe8025f1b0e2afe819,r['external_gateway_info'] = {'network_id': external_network_id},1,1,0.25,95
707890ef22c203389f61ddfe8025f1b0e2afe819,for ri in deleted_routers_info:,1,1,0.25,96
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_to_keep = [],1,1,0.25,97
707890ef22c203389f61ddfe8025f1b0e2afe819,interface_name = router.get_external_device_name(port['id']),1,1,0.25,98
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted_during_resync = [],1,1,0.25,99
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(enable_ha, ip_version,",1,1,0.25,100
707890ef22c203389f61ddfe8025f1b0e2afe819,slaac = l3_constants.IPV6_SLAAC,1,1,0.25,101
707890ef22c203389f61ddfe8025f1b0e2afe819,"slaac_mode = {'ra_mode': slaac, 'address_mode': slaac}",1,1,0.25,102
707890ef22c203389f61ddfe8025f1b0e2afe819,mocked_get_routers.return_value = (routers_to_keep +,1,1,0.25,103
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted = [],1,1,0.25,104
707890ef22c203389f61ddfe8025f1b0e2afe819,new_config = router.keepalived_manager.config.get_config_str(),1,1,0.25,105
707890ef22c203389f61ddfe8025f1b0e2afe819,mocked_get_routers = self.mock_plugin_api.get_routers,1,1,0.25,106
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets = [{'id': subnet_id,",1,1,0.25,107
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add a new FIP and change the GW IP address,1,1,0.25,108
707890ef22c203389f61ddfe8025f1b0e2afe819,device_exists = functools.partial(,1,1,0.25,109
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router = copy.deepcopy(router.router),1,1,0.25,110
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_fip = '19.4.4.2',1,1,0.25,111
707890ef22c203389f61ddfe8025f1b0e2afe819,new_fip = '19.4.4.3',1,1,0.25,112
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _uuid(),1,1,0.25,113
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips = [{'ip_address': '19.4.4.10',",1,1,0.25,114
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['subnets'] = subnets,1,1,0.25,115
707890ef22c203389f61ddfe8025f1b0e2afe819,deleted_routers_info = [],1,1,0.25,116
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['fixed_ips'] = fixed_ips,1,1,0.25,117
707890ef22c203389f61ddfe8025f1b0e2afe819,# and that the GW IP address was updated.,1,1,0.25,118
707890ef22c203389f61ddfe8025f1b0e2afe819,old_gw = '0.0.0.0/0 via 19.4.4.1',1,1,0.25,119
707890ef22c203389f61ddfe8025f1b0e2afe819,new_gw = '0.0.0.0/0 via 19.4.4.5',1,1,0.25,120
707890ef22c203389f61ddfe8025f1b0e2afe819,old_external_device_ip = '19.4.4.4',1,1,0.25,121
707890ef22c203389f61ddfe8025f1b0e2afe819,new_external_device_ip = '19.4.4.10',1,1,0.25,122
707890ef22c203389f61ddfe8025f1b0e2afe819,ns_names_to_retrieve = set(),1,1,0.25,123
707890ef22c203389f61ddfe8025f1b0e2afe819,device = router.router[l3_constants.INTERFACE_KEY][-1],1,1,0.25,124
707890ef22c203389f61ddfe8025f1b0e2afe819,self.failover_agent = neutron_l3_agent.L3NATAgentWithStateReport(,1,1,0.25,125
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_versions = [4, 6] if (ip_version == 6 or dual_stack) else [4]",1,1,0.25,126
707890ef22c203389f61ddfe8025f1b0e2afe819,exists = ip_lib.device_exists_with_ips_and_mac(,1,1,0.25,127
707890ef22c203389f61ddfe8025f1b0e2afe819,get_ns_name = mock.patch.object(,1,1,0.25,128
707890ef22c203389f61ddfe8025f1b0e2afe819,"get_ns_name.return_value = ""%s%s%s"" % (",1,1,0.25,129
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info_2 = copy.deepcopy(router_info),1,1,0.25,130
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info_2[l3_constants.HA_INTERFACE_KEY] = (,1,1,0.25,131
707890ef22c203389f61ddfe8025f1b0e2afe819,"router2 = self.manage_router(self.failover_agent, router_info_2)",1,1,0.25,132
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(ip_version=6, enable_ha=True)",1,1,0.25,133
707890ef22c203389f61ddfe8025f1b0e2afe819,lladdr = ip_lib.get_ipv6_lladdr(device['mac_address']),1,1,0.25,134
707890ef22c203389f61ddfe8025f1b0e2afe819,device_name = router1.get_ha_device_name(),1,1,0.25,135
707890ef22c203389f61ddfe8025f1b0e2afe819,# when IPv6 is enabled and no IPv6 gateway is configured.,1,1,0.25,136
707890ef22c203389f61ddfe8025f1b0e2afe819,"ha_device = ip_lib.IPDevice(device_name, namespace=router1.ns_name)",1,1,0.25,137
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(enable_ha=True, ip_version=6)",1,1,0.25,138
707890ef22c203389f61ddfe8025f1b0e2afe819,config = router.keepalived_manager.config.get_config_str(),1,1,0.25,139
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs = common_utils.fixed_ip_cidrs(iface['fixed_ips']),1,1,0.25,140
707890ef22c203389f61ddfe8025f1b0e2afe819,interface_id = router.router[l3_constants.INTERFACE_KEY][0]['id'],1,1,0.25,141
707890ef22c203389f61ddfe8025f1b0e2afe819,# Add a second IPv6 subnet to the router internal interface.,1,1,0.25,142
707890ef22c203389f61ddfe8025f1b0e2afe819,"out = router_ns.netns.execute([""conntrack"", ""-L"",",1,1,0.25,143
707890ef22c203389f61ddfe8025f1b0e2afe819,"veth1, veth2 = self.useFixture(net_helpers.VethFixture()).ports",1,1,0.25,144
707890ef22c203389f61ddfe8025f1b0e2afe819,br_int_2 = self._get_agent_ovs_integration_bridge(self.failover_agent),1,1,0.25,145
707890ef22c203389f61ddfe8025f1b0e2afe819,br_int_1 = self._get_agent_ovs_integration_bridge(self.agent),1,1,0.25,146
707890ef22c203389f61ddfe8025f1b0e2afe819,self.conf = self._configure_agent('agent2'),1,1,0.25,147
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_wrapper = ip_lib.IPWrapper(namespace=router.ns_name),1,1,0.25,148
707890ef22c203389f61ddfe8025f1b0e2afe819,"ra_state = ip_wrapper.netns.execute(['sysctl', '-b',",1,1,0.25,149
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_device = ip_lib.IPDevice(external_device_name,",1,1,0.25,150
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = gateway_ip,1,1,0.25,151
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_vers = netaddr.IPAddress(expected_gateway).version,1,1,0.25,152
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_gateway = (external_device.route.get_gateway(,1,1,0.25,153
707890ef22c203389f61ddfe8025f1b0e2afe819,restarted_agent = neutron_l3_agent.L3NATAgentWithStateReport(,1,1,0.25,154
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip_cidr = self._port_first_ip_cidr(router.internal_ports[0]),1,1,0.25,155
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip = router_ip_cidr.partition('/')[0],1,1,0.25,156
707890ef22c203389f61ddfe8025f1b0e2afe819,br_int = get_ovs_bridge(self.agent.conf.ovs_integration_bridge),1,1,0.25,157
707890ef22c203389f61ddfe8025f1b0e2afe819,"src_machine, dst_machine = self.useFixture(",1,1,0.25,158
707890ef22c203389f61ddfe8025f1b0e2afe819,dst_fip = '19.4.4.10',1,1,0.25,159
707890ef22c203389f61ddfe8025f1b0e2afe819,protocol_port = net_helpers.get_free_namespace_port(,1,1,0.25,160
707890ef22c203389f61ddfe8025f1b0e2afe819,# client sends to fip,1,1,0.25,161
707890ef22c203389f61ddfe8025f1b0e2afe819,NESTED_NAMESPACE_SEPARATOR = '@',1,1,0.25,162
707890ef22c203389f61ddfe8025f1b0e2afe819,expected = self.get_expected_keepalive_configuration(router),1,1,0.25,163
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_cidr = self._port_first_ip_cidr(internal_port),1,1,0.25,164
707890ef22c203389f61ddfe8025f1b0e2afe819,netcat = net_helpers.NetcatTester(,1,1,0.25,165
707890ef22c203389f61ddfe8025f1b0e2afe819,external_port = router.get_ex_gw_port(),1,1,0.25,166
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_routes = False,1,1,0.25,167
707890ef22c203389f61ddfe8025f1b0e2afe819,"'port_id': _uuid(),",1,1,0.25,168
707890ef22c203389f61ddfe8025f1b0e2afe819,pm = external_process.ProcessManager(,1,1,0.25,169
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs = common_utils.fixed_ip_cidrs(expected_device['fixed_ips']),1,1,0.25,170
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip = port['fixed_ips'][0],1,1,0.25,171
707890ef22c203389f61ddfe8025f1b0e2afe819,"device = ip_lib.IPDevice(name_getter(target_device), namespace)",1,1,0.25,172
707890ef22c203389f61ddfe8025f1b0e2afe819,ha_device_name = router.get_ha_device_name(),1,1,0.25,173
707890ef22c203389f61ddfe8025f1b0e2afe819,ex_port_ipv6 = ip_lib.get_ipv6_lladdr(external_port['mac_address']),1,1,0.25,174
707890ef22c203389f61ddfe8025f1b0e2afe819,enable_snat = False,1,1,0.25,175
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device_name = router.get_external_device_name(,1,1,0.25,176
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device_cidr = self._port_first_ip_cidr(external_port),1,1,0.25,177
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_port = router.router[l3_constants.INTERFACE_KEY][0],1,1,0.25,178
707890ef22c203389f61ddfe8025f1b0e2afe819,int_port_ipv6 = ip_lib.get_ipv6_lladdr(internal_port['mac_address']),1,1,0.25,179
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_name = router.get_internal_device_name(,1,1,0.25,180
707890ef22c203389f61ddfe8025f1b0e2afe819,# with IP address from both the subnets.,1,1,0.25,181
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip_cidr = common_utils.ip_to_cidr(,1,1,0.25,182
707890ef22c203389f61ddfe8025f1b0e2afe819,enable_fip = False,1,1,0.25,183
707890ef22c203389f61ddfe8025f1b0e2afe819,"get_temp_file_path = functools.partial(self.get_temp_file_path,",1,1,0.25,184
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ns = ip_lib.IPWrapper(namespace=router.ns_name),1,1,0.25,185
707890ef22c203389f61ddfe8025f1b0e2afe819,METADATA_REQUEST_SLEEP = 5,1,1,0.25,186
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_ip.get_devices.return_value = [,1,1,0.25,187
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_ip_dev.addr.list.return_value = [,1,1,0.25,188
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns = ri.fip_ns,1,1,0.25,189
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import agent as neutron_l3_agent,1,1,0.25,190
707890ef22c203389f61ddfe8025f1b0e2afe819,LOG = logging.getLogger(__name__),1,1,0.25,191
707890ef22c203389f61ddfe8025f1b0e2afe819,_uuid = uuidutils.generate_uuid,1,1,0.25,192
707890ef22c203389f61ddfe8025f1b0e2afe819,METADATA_REQUEST_TIMEOUT = 60,1,1,0.25,193
707890ef22c203389f61ddfe8025f1b0e2afe819,DEVICE_OWNER_COMPUTE = l3_constants.DEVICE_OWNER_COMPUTE_PREFIX + 'fake',1,1,0.25,194
707890ef22c203389f61ddfe8025f1b0e2afe819,temp_dir = self.get_new_temp_dir(),1,1,0.25,195
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_plugin_api = mock.patch(,1,1,0.25,196
707890ef22c203389f61ddfe8025f1b0e2afe819,self.conf = self._configure_agent('agent1'),1,1,0.25,197
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent = neutron_l3_agent.L3NATAgentWithStateReport('agent1',",1,1,0.25,198
707890ef22c203389f61ddfe8025f1b0e2afe819,config = cfg.ConfigOpts(),1,1,0.25,199
707890ef22c203389f61ddfe8025f1b0e2afe819,conf = self._get_config_opts(),1,1,0.25,200
707890ef22c203389f61ddfe8025f1b0e2afe819,br_int = self.useFixture(net_helpers.OVSBridgeFixture()).bridge,1,1,0.25,201
707890ef22c203389f61ddfe8025f1b0e2afe819,br_ex = self.useFixture(net_helpers.OVSBridgeFixture()).bridge,1,1,0.25,202
707890ef22c203389f61ddfe8025f1b0e2afe819,default_gateway_ip = external_port['subnets'][0].get('gateway_ip'),1,1,0.25,203
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_subnet_cidr = external_port['extra_subnets'][0].get('cidr'),1,1,0.25,204
707890ef22c203389f61ddfe8025f1b0e2afe819,"rules = iptables_manager.get_chain(table, chain)",1,1,0.25,205
707890ef22c203389f61ddfe8025f1b0e2afe819,"called with the right resource, event, and router information.",1,1,0.25,206
707890ef22c203389f61ddfe8025f1b0e2afe819,# Get the last state reported for each router,1,1,0.25,207
707890ef22c203389f61ddfe8025f1b0e2afe819,actual_router_states = {},1,1,0.25,208
707890ef22c203389f61ddfe8025f1b0e2afe819,actual_router_states[router_id] = state,1,1,0.25,209
707890ef22c203389f61ddfe8025f1b0e2afe819,"router1 = self.manage_router(self.agent, router_info)",1,1,0.25,210
707890ef22c203389f61ddfe8025f1b0e2afe819,"router2 = self.manage_router(self.agent, router_info)",1,1,0.25,211
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test notifications for router create, update, and delete.",1,1,0.25,212
707890ef22c203389f61ddfe8025f1b0e2afe819,"for router create, update, and delete, that the correct handler is",1,1,0.25,213
707890ef22c203389f61ddfe8025f1b0e2afe819,event_handler = mock.Mock(),1,1,0.25,214
707890ef22c203389f61ddfe8025f1b0e2afe819,result = next(rule for rule in rules if predicate(rule)),1,1,0.25,215
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = self.generate_router_info(enable_ha=False),1,1,0.25,216
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_calls = [,1,1,0.25,217
707890ef22c203389f61ddfe8025f1b0e2afe819,that uses floating IP once it's disassociated.,1,1,0.25,218
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = self.generate_router_info(enable_ha=ha),1,1,0.25,219
707890ef22c203389f61ddfe8025f1b0e2afe819,client_address = '19.4.4.3',1,1,0.25,220
707890ef22c203389f61ddfe8025f1b0e2afe819,server_address = '35.4.0.4',1,1,0.25,221
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router[l3_constants.FLOATINGIP_KEY] = [],1,1,0.25,222
707890ef22c203389f61ddfe8025f1b0e2afe819,calls = (args[0][1] for args in,1,1,0.25,223
707890ef22c203389f61ddfe8025f1b0e2afe819,calls = [args[0] for args in enqueue_mock.call_args_list],1,1,0.25,224
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = self.generate_router_info(enable_ha=True),1,1,0.25,225
707890ef22c203389f61ddfe8025f1b0e2afe819,enqueue_mock = mock.patch.object(,1,1,0.25,226
707890ef22c203389f61ddfe8025f1b0e2afe819,metadata_port_filter = lambda rule: (,1,1,0.25,227
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_devices = router.router[l3_constants.INTERFACE_KEY],1,1,0.25,228
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = ip_lib.get_routing_table(4, namespace=router.ns_name)",1,1,0.25,229
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = [{'nexthop': route['nexthop'],",1,1,0.25,230
707890ef22c203389f61ddfe8025f1b0e2afe819,ns_name = namespace or router.ns_name,1,1,0.25,231
707890ef22c203389f61ddfe8025f1b0e2afe819,routes = [],1,1,0.25,232
707890ef22c203389f61ddfe8025f1b0e2afe819,"_routes = ip_lib.get_routing_table(ip_version,",1,1,0.25,233
707890ef22c203389f61ddfe8025f1b0e2afe819,routes = set(route['destination'] for route in routes),1,1,0.25,234
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_subnets = router.get_ex_gw_port()['extra_subnets'],1,1,0.25,235
707890ef22c203389f61ddfe8025f1b0e2afe819,bridge = ovs_lib.OVSBridge(bridge_name),1,1,0.25,236
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ips = router.router[l3_constants.FLOATINGIP_KEY],1,1,0.25,237
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=router.ns_name) for fip in floating_ips),1,1,0.25,238
707890ef22c203389f61ddfe8025f1b0e2afe819,device_name = router.get_ha_device_name(),1,1,0.25,239
707890ef22c203389f61ddfe8025f1b0e2afe819,"ha_device = ip_lib.IPDevice(device_name, router.ha_namespace)",1,1,0.25,240
707890ef22c203389f61ddfe8025f1b0e2afe819,return [address['cidr'] for address in,1,1,0.25,241
707890ef22c203389f61ddfe8025f1b0e2afe819,# Verify that router internal interface is present and is configured,1,1,0.25,242
707890ef22c203389f61ddfe8025f1b0e2afe819,router['gw_port']['binding:host_id'] = agent.conf.host,1,1,0.25,243
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_iface = router.router[l3_constants.INTERFACE_KEY][0],1,1,0.25,244
707890ef22c203389f61ddfe8025f1b0e2afe819,dev_mtu = self.get_device_mtu(,1,1,0.25,245
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = l3_test_common.prepare_router_data(),1,1,0.25,246
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info['distributed'] = True,1,1,0.25,247
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_neighbor = '35.4.1.10',1,1,0.25,248
707890ef22c203389f61ddfe8025f1b0e2afe819,port_data = {,1,1,0.25,249
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.plugin_rpc.get_ports_by_subnet.return_value = [port_data],1,1,0.25,250
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device = router1.get_internal_device_name(,1,1,0.25,251
707890ef22c203389f61ddfe8025f1b0e2afe819,"neighbors = ip_lib.IPDevice(internal_device, router1.ns_name).neigh",1,1,0.25,252
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test to validate the floatingip agent mismatch.",1,1,0.25,253
707890ef22c203389f61ddfe8025f1b0e2afe819,"info = iprule.rule._parse_line(4, line)",1,1,0.25,254
707890ef22c203389f61ddfe8025f1b0e2afe819,This test validates the condition where floatingip agent,1,1,0.25,255
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip = router_info['_floatingips'][0],1,1,0.25,256
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip['host'] = 'my_new_host',1,1,0.25,257
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_agent_gw_port = router_info[l3_constants.FLOATINGIP_AGENT_INTF_KEY],1,1,0.25,258
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info[l3_constants.FLOATINGIP_AGENT_INTF_KEY] = [],1,1,0.25,259
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_plugin_api.get_agent_gateway_port.return_value = (,1,1,0.25,260
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_ns = dvr_snat_ns.SnatNamespace.get_snat_ns_name(,1,1,0.25,261
707890ef22c203389f61ddfe8025f1b0e2afe819,"# Check that, when the router is set up and there are",1,1,0.25,262
707890ef22c203389f61ddfe8025f1b0e2afe819,if fip in line:,1,1,0.25,263
707890ef22c203389f61ddfe8025f1b0e2afe819,# Remove one subnet from the router internal iface,1,1,0.25,264
707890ef22c203389f61ddfe8025f1b0e2afe819,router1.router[l3_constants.FLOATINGIP_KEY] = [],1,1,0.25,265
707890ef22c203389f61ddfe8025f1b0e2afe819,fpr_router_device_created_successfully = ip_lib.device_exists(,1,1,0.25,266
707890ef22c203389f61ddfe8025f1b0e2afe819,# In the router namespace,1,1,0.25,267
707890ef22c203389f61ddfe8025f1b0e2afe819,for fip in floating_ips:,1,1,0.25,268
707890ef22c203389f61ddfe8025f1b0e2afe819,device_name = fip_ns.get_rtr_ext_device_name(router.router_id),1,1,0.25,269
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.agent_mode = 'dvr_snat',1,1,0.25,270
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = self.generate_dvr_router_info(),1,1,0.25,271
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns = router1.fip_ns.get_name(),1,1,0.25,272
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.agent_mode = 'dvr',1,1,0.25,273
707890ef22c203389f61ddfe8025f1b0e2afe819,"lines = iprule.rule._as_root([4], ['show']).splitlines()",1,1,0.25,274
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ns = router.ns_name,1,1,0.25,275
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_rule_prio_1 = self._get_fixed_ip_rule_priority(,1,1,0.25,276
707890ef22c203389f61ddfe8025f1b0e2afe819,restarted_agent = neutron_l3_agent.L3NATAgent(,1,1,0.25,277
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ips[0]['floating_ip_address'] = '21.4.4.2',1,1,0.25,278
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ips[0]['fixed_ip_address'] = '10.0.0.2',1,1,0.25,279
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_rule_prio_2 = self._get_fixed_ip_rule_priority(,1,1,0.25,280
707890ef22c203389f61ddfe8025f1b0e2afe819,iprule = ip_lib.IPRule(namespace),1,1,0.25,281
707890ef22c203389f61ddfe8025f1b0e2afe819,qg_device_created_successfully = ip_lib.device_exists(,1,1,0.25,282
707890ef22c203389f61ddfe8025f1b0e2afe819,sg_device_created_successfully = ip_lib.device_exists(,1,1,0.25,283
707890ef22c203389f61ddfe8025f1b0e2afe819,device corresponding to the router interface is removed,1,1,0.25,284
707890ef22c203389f61ddfe8025f1b0e2afe819,router2 = self._create_dvr_ha_router(self.failover_agent),1,1,0.25,285
707890ef22c203389f61ddfe8025f1b0e2afe819,ex_gw_port = router.get_ex_gw_port(),1,1,0.25,286
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_port = router.get_snat_interfaces()[0],1,1,0.25,287
707890ef22c203389f61ddfe8025f1b0e2afe819,ex_gw_port_name = router.get_external_device_name(,1,1,0.25,288
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_port_name = router._get_snat_int_device_name(,1,1,0.25,289
707890ef22c203389f61ddfe8025f1b0e2afe819,"prefix_len = ex_gw_port[""fixed_ips""][0]['prefixlen']",1,1,0.25,290
707890ef22c203389f61ddfe8025f1b0e2afe819,"prefix_len = snat_port[""fixed_ips""][0]['prefixlen']",1,1,0.25,291
707890ef22c203389f61ddfe8025f1b0e2afe819,router1 = self._create_dvr_ha_router(self.agent),1,1,0.25,292
707890ef22c203389f61ddfe8025f1b0e2afe819,ext_net_id = ext_gateway_port['network_id'],1,1,0.25,293
707890ef22c203389f61ddfe8025f1b0e2afe819,when the router interface is deleted.,1,1,0.25,294
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.create_dvr_external_gateway_on_agent = mock.Mock(),0,1,0.25,295
707890ef22c203389f61ddfe8025f1b0e2afe819,# sure that the fip namespace create is not called again.,0,1,0.25,296
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri,",0,1,0.25,297
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_agent_gw_interface') as fip_gw_port:",0,1,0.25,298
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.create_dvr_fip_interfaces = mock.Mock(),1,1,0.25,299
707890ef22c203389f61ddfe8025f1b0e2afe819,# that the fip namespace create is not called again.,1,1,0.25,300
707890ef22c203389f61ddfe8025f1b0e2afe819,fips.return_value = fake_floatingips,1,1,0.25,301
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace = router.ha_namespace,1,1,0.25,302
707890ef22c203389f61ddfe8025f1b0e2afe819,get_snat_ns_name.return_value = mocked_r_snat_ns_name,1,1,0.25,303
707890ef22c203389f61ddfe8025f1b0e2afe819,get_ns_name.return_value = mocked_r_ns_name,1,1,0.25,304
707890ef22c203389f61ddfe8025f1b0e2afe819,mocked_r_snat_ns_name) = self._mocked_dvr_ha_router(agent),1,1,0.25,305
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_internal_port = router_info[l3_constants.SNAT_ROUTER_INTF_KEY],1,1,0.25,306
707890ef22c203389f61ddfe8025f1b0e2afe819,csnat_internal_port = (,1,1,0.25,307
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_name = router1._get_snat_int_device_name(,1,1,0.25,308
707890ef22c203389f61ddfe8025f1b0e2afe819,"qg_device, sg_device = self._get_dvr_snat_namespace_device_status(",1,1,0.25,309
707890ef22c203389f61ddfe8025f1b0e2afe819,router1.router[l3_constants.INTERFACE_KEY] = [],1,1,0.25,310
707890ef22c203389f61ddfe8025f1b0e2afe819,router1.router[l3_constants.SNAT_ROUTER_INTF_KEY] = [],1,1,0.25,311
707890ef22c203389f61ddfe8025f1b0e2afe819,router_updated = self.agent.router_info[router_info['id']],1,1,0.25,312
707890ef22c203389f61ddfe8025f1b0e2afe819,"r_info = self.generate_dvr_router_info(enable_ha=True,",1,1,0.25,313
707890ef22c203389f61ddfe8025f1b0e2afe819,"r_snat_ns_name = namespaces.build_ns_name(dvr_snat_ns.SNAT_NS_PREFIX,",1,1,0.25,314
707890ef22c203389f61ddfe8025f1b0e2afe819,mocked_r_snat_ns_name = r_snat_ns_name + '@' + agent.host,1,1,0.25,315
707890ef22c203389f61ddfe8025f1b0e2afe819,"r_ns_name = namespaces.build_ns_name(namespaces.NS_PREFIX,",1,1,0.25,316
707890ef22c203389f61ddfe8025f1b0e2afe819,mocked_r_ns_name = r_ns_name + '@' + agent.host,1,1,0.25,317
707890ef22c203389f61ddfe8025f1b0e2afe819,self.failover_agent.conf.agent_mode = 'dvr_snat',1,1,0.25,318
707890ef22c203389f61ddfe8025f1b0e2afe819,"get_ns_name = mock.patch.object(namespaces.RouterNamespace,",1,1,0.25,319
707890ef22c203389f61ddfe8025f1b0e2afe819,"get_snat_ns_name = mock.patch.object(dvr_snat_ns.SnatNamespace,",1,1,0.25,320
707890ef22c203389f61ddfe8025f1b0e2afe819,device_name = fip_ns.get_int_device_name(router.router_id),1,1,0.25,321
707890ef22c203389f61ddfe8025f1b0e2afe819,fg_port_created_successfully = ip_lib.device_exists_with_ips_and_mac(,1,1,0.25,322
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns_name = fip_ns.get_name(),1,1,0.25,323
707890ef22c203389f61ddfe8025f1b0e2afe819,# only dvr and dvr_snat are applicable,1,1,0.25,324
707890ef22c203389f61ddfe8025f1b0e2afe819,agent_mode = 'dvr',1,1,0.25,325
707890ef22c203389f61ddfe8025f1b0e2afe819,"dvr_router1_kwargs = {'ip_address': '19.4.4.3',",1,1,0.25,326
707890ef22c203389f61ddfe8025f1b0e2afe819,"router1, fip1_ns = (",1,1,0.25,327
707890ef22c203389f61ddfe8025f1b0e2afe819,# Validate the fip with external net1,1,1,0.25,328
707890ef22c203389f61ddfe8025f1b0e2afe819,"dvr_router2_kwargs = {'ip_address': '19.4.5.3',",1,1,0.25,329
707890ef22c203389f61ddfe8025f1b0e2afe819,"router2, fip2_ns = (",1,1,0.25,330
707890ef22c203389f61ddfe8025f1b0e2afe819,# Validate the fip with external net2,1,1,0.25,331
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.agent_mode = 'dvr_snat' if enable_snat else 'dvr',1,1,0.25,332
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_ns_name = dvr_snat_ns.SnatNamespace.get_snat_ns_name(,1,1,0.25,333
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.network_device_mtu = custom_mtu,1,1,0.25,334
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = self.generate_dvr_router_info(,1,1,0.25,335
707890ef22c203389f61ddfe8025f1b0e2afe819,# because the whole L3PluginApi is mocked and we need the port,1,1,0.25,336
707890ef22c203389f61ddfe8025f1b0e2afe819,# The port returned needs to have the same information as,1,1,0.25,337
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_plugin_api.get_agent_gateway_port.return_value = router_info[,1,1,0.25,338
707890ef22c203389f61ddfe8025f1b0e2afe819,# get the correct fip namespace.,1,1,0.25,339
707890ef22c203389f61ddfe8025f1b0e2afe819,"# manage the router (create it, create namespaces,",1,1,0.25,340
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns = router.fip_ns.get_name(),1,1,0.25,341
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info = self.generate_dvr_router_info(**dvr_router_kwargs),1,1,0.25,342
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.agent_mode = agent_mode,1,1,0.25,343
707890ef22c203389f61ddfe8025f1b0e2afe819,SOCKET_MODE = 0o666,1,1,0.25,344
707890ef22c203389f61ddfe8025f1b0e2afe819,interfaces = copy.deepcopy(router.router.get(,1,1,0.25,345
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips, subnets = [], []",1,1,0.25,346
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router[l3_constants.INTERFACE_KEY] = interfaces,1,1,0.25,347
707890ef22c203389f61ddfe8025f1b0e2afe819,# Verify that router internal interface has a single ipaddress,1,1,0.25,348
707890ef22c203389f61ddfe8025f1b0e2afe819,self.status = status,1,1,0.25,349
707890ef22c203389f61ddfe8025f1b0e2afe819,server = utils.UnixDomainWSGIServer('metadata-fake-server'),1,1,0.25,350
707890ef22c203389f61ddfe8025f1b0e2afe819,"url = 'http://%(host)s:%(port)s' % {'host': dhcp.METADATA_DEFAULT_IP,",1,1,0.25,351
707890ef22c203389f61ddfe8025f1b0e2afe819,"cmd = 'curl', '--max-time', METADATA_REQUEST_TIMEOUT, '-D-', url",1,1,0.25,352
707890ef22c203389f61ddfe8025f1b0e2afe819,CONNECTION_REFUSED_TIMEOUT = METADATA_REQUEST_TIMEOUT // 2,1,1,0.25,353
707890ef22c203389f61ddfe8025f1b0e2afe819,raw_headers = machine.execute(cmd),1,1,0.25,354
707890ef22c203389f61ddfe8025f1b0e2afe819,* A fake metadata server,1,1,0.25,355
707890ef22c203389f61ddfe8025f1b0e2afe819,and forwarded the http request to the fake metadata server and the,1,1,0.25,356
707890ef22c203389f61ddfe8025f1b0e2afe819,machine = self.useFixture(,1,1,0.25,357
707890ef22c203389f61ddfe8025f1b0e2afe819,firstline = self._query_metadata_proxy(machine),1,1,0.25,358
707890ef22c203389f61ddfe8025f1b0e2afe819,SOCKET_MODE = 0o664,1,1,0.25,359
707890ef22c203389f61ddfe8025f1b0e2afe819,ext_gateway_port = router_info['gw_port'],1,1,0.25,360
707890ef22c203389f61ddfe8025f1b0e2afe819,"internal_ports = router.get(l3_constants.INTERFACE_KEY, [])",1,1,0.25,361
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns = self.agent.get_fip_ns(floating_ips[0]['floating_network_id']),1,1,0.25,362
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_expected_in_snat_namespace = (,1,1,0.25,363
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_subnet = port['subnets'][0],1,1,0.25,364
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_ip = str(netaddr.IPAddress(port_ip) + 5),1,1,0.25,365
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = netaddr.IPNetwork(snat_subnet['cidr']).prefixlen,1,1,0.25,366
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.SNAT_ROUTER_INTF_KEY] = [,1,1,0.25,367
707890ef22c203389f61ddfe8025f1b0e2afe819,"# if the agent is in dvr_snat mode, then we have to check",1,1,0.25,368
707890ef22c203389f61ddfe8025f1b0e2afe819,# that the correct ports and ip addresses exist in the,1,1,0.25,369
707890ef22c203389f61ddfe8025f1b0e2afe819,# if the agent is anything else the test is misconfigured,1,1,0.25,370
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_namespace_should_not_exist = (,1,1,0.25,371
707890ef22c203389f61ddfe8025f1b0e2afe819,router['distributed'] = True,1,1,0.25,372
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace = dvr_snat_ns.SnatNamespace.get_snat_ns_name(,1,1,0.25,373
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_gateway = (,1,1,0.25,374
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = external_port['subnets'][0]['gateway_ip'],1,1,0.25,375
707890ef22c203389f61ddfe8025f1b0e2afe819,"device = ip_lib.IPDevice(""fakedevice"",",1,1,0.25,376
707890ef22c203389f61ddfe8025f1b0e2afe819,# in the fip namespace:,1,1,0.25,377
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_agent_gw_port = (,1,1,0.25,378
707890ef22c203389f61ddfe8025f1b0e2afe819,external_gw_port = floating_agent_gw_port[0],1,1,0.25,379
707890ef22c203389f61ddfe8025f1b0e2afe819,# Get values from internal port,1,1,0.25,380
707890ef22c203389f61ddfe8025f1b0e2afe819,"snat_port_list = router.get(l3_constants.SNAT_ROUTER_INTF_KEY, [])",1,1,0.25,381
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid(),",1,1,0.25,382
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.FLOATINGIP_AGENT_INTF_KEY] = [,1,1,0.25,383
707890ef22c203389f61ddfe8025f1b0e2afe819,router['gw_port_host'] = agent.conf.host,1,1,0.25,384
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.rtr_fip_subnet = ri.fip_ns.local_subnets.allocate(ri.router_id),1,1,0.25,385
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip = router['_floatingips'][0],1,1,0.25,386
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip['floating_network_id'] = router['gw_port']['network_id'],1,1,0.25,387
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip['host'] = agent.conf.host,1,1,0.25,388
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip['port_id'] = internal_ports[0]['id'],1,1,0.25,389
707890ef22c203389f61ddfe8025f1b0e2afe819,floating_ip['status'] = 'ACTIVE',1,1,0.25,390
707890ef22c203389f61ddfe8025f1b0e2afe819,external_gw_port = router['gw_port'],1,1,0.25,391
707890ef22c203389f61ddfe8025f1b0e2afe819,return router,1,1,0.25,392
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_gw_port_list = router.get(,1,1,0.25,393
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip = external_gw_port['fixed_ips'][0],1,1,0.25,394
707890ef22c203389f61ddfe8025f1b0e2afe819,float_subnet = external_gw_port['subnets'][0],1,1,0.25,395
707890ef22c203389f61ddfe8025f1b0e2afe819,port_ip = fixed_ip['ip_address'],1,1,0.25,396
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_gw_port_ip = str(netaddr.IPAddress(port_ip) + 5),1,1,0.25,397
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = netaddr.IPNetwork(float_subnet['cidr']).prefixlen,1,1,0.25,398
707890ef22c203389f61ddfe8025f1b0e2afe819,"_, fip_to_rtr = ri.rtr_fip_subnet.get_pair()",1,1,0.25,399
707890ef22c203389f61ddfe8025f1b0e2afe819,SOCKET_MODE = 0o644,1,1,0.25,400
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.dist_fip_count = 1,1,1,0.25,401
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, '_set_subnet_info')",1,1,0.25,402
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_remove = mock.Mock(),1,1,0.25,403
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port = {'fixed_ips': [{'ip_address': '20.0.0.30',",1,1,0.25,404
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = self._prepare_ext_gw_test(ri)",1,1,0.25,405
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix = iface['subnet']['cidr'].split('/')[1],1,1,0.25,406
707890ef22c203389f61ddfe8025f1b0e2afe819,"source_cidr = ""%s/%s"" % (iface['fixed_ips'][0]['ip_address'],",1,1,0.25,407
707890ef22c203389f61ddfe8025f1b0e2afe819,ports[0]['subnet']['id'] = _get_subnet_id(ports[0]),1,1,0.25,408
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_agent_gw_interface'),",1,1,0.25,409
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs = common_utils.fixed_ip_cidrs(expected_device['fixed_ips']),0,1,0.25,410
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': _uuid(),",1,1,0.25,411
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip = port['fixed_ips'][0],0,1,0.25,412
707890ef22c203389f61ddfe8025f1b0e2afe819,ha_device_cidr = self._port_first_ip_cidr(router.ha_port),0,1,0.25,413
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device_cidr = self._port_first_ip_cidr(external_port),0,1,0.25,414
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_cidr = self._port_first_ip_cidr(internal_port),0,1,0.25,415
707890ef22c203389f61ddfe8025f1b0e2afe819,default_gateway_ip = external_port['subnets'][0].get('gateway_ip'),0,1,0.25,416
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=router.ns_name) for fip in floating_ips),0,1,0.25,417
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _uuid(),0,1,0.25,418
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_info = mock.Mock(),1,1,0.25,419
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.snat_ports = [{'subnet': {'cidr': '152.2.0.0/16',",1,1,0.25,420
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip_cidr = router.internal_ports[0]['ip_cidr'],1,1,0.25,421
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = 'fd01:%x:1::/64',1,1,0.25,422
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid(),",1,1,0.25,423
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_subnet = port['subnet'],1,1,0.25,424
707890ef22c203389f61ddfe8025f1b0e2afe819,fg_port_created_successfully = ip_lib.device_exists_with_ip_mac(,1,1,0.25,425
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = '35.4.%i.4',1,1,0.25,426
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = '35.4.%i.0/24',1,1,0.25,427
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = '35.4.%i.1',1,1,0.25,428
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = 'fd01:%x:1::6',1,1,0.25,429
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = 'fd01:%x:1::1',1,1,0.25,430
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = [{'destination': '8.8.8.0/24', 'nexthop': ip_addr}]",1,1,0.25,431
707890ef22c203389f61ddfe8025f1b0e2afe819,for p in interfaces]),1,1,0.25,432
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_addr = '19.4.4.4',1,1,0.25,433
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr = '19.4.4.0/24',1,1,0.25,434
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = '19.4.4.1',1,1,0.25,435
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_addr = 'fd00::4',1,1,0.25,436
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr = 'fd00::/64',1,1,0.25,437
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = 'fd00::1',1,1,0.25,438
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips = [{'ip_address': '19.4.4.10',",0,1,0.25,439
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets = [{'id': subnet_id,",0,1,0.25,440
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['subnets'] = subnets,0,1,0.25,441
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_address = 'fd00::4',0,1,0.25,442
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = 'fd01:%x:1::6',0,1,0.25,443
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = 'fd01:%x:1::/64',0,1,0.25,444
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = 64,0,1,0.25,445
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = 'fd01:%x:1::1',0,1,0.25,446
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_address = '19.4.4.4',0,1,0.25,447
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_cidr = '19.4.4.0/24',0,1,0.25,448
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = '19.4.4.1',0,1,0.25,449
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_cidr = 'fd00::/64',0,1,0.25,450
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['fixed_ips'] = fixed_ips,0,1,0.25,451
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = 'fd00::1',0,1,0.25,452
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = [{'destination': '8.8.8.0/24', 'nexthop': '19.4.4.4'}]",0,1,0.25,453
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_1 = _uuid(),0,1,0.25,454
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_2 = _uuid(),0,1,0.25,455
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.snat_ports = [{'subnets': [{'cidr': '152.2.0.0/16',",0,1,0.25,456
707890ef22c203389f61ddfe8025f1b0e2afe819,ns_id = _uuid(),0,1,0.25,457
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': _uuid(),",0,1,0.25,458
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = '35.4.%i.1',0,1,0.25,459
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = 24,0,1,0.25,460
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = '35.4.%i.0/24',0,1,0.25,461
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = '35.4.%i.4',0,1,0.25,462
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(enable_ha, ip_version,",0,1,0.25,463
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = subnet['gateway_ip'],0,1,0.25,464
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_vers = netaddr.IPAddress(expected_gateway).version,0,1,0.25,465
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_gateway = (external_device.route.get_gateway(,0,1,0.25,466
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip_cidr = self._port_first_ip_cidr(router.internal_ports[0]),0,1,0.25,467
707890ef22c203389f61ddfe8025f1b0e2afe819,float_subnet = external_gw_port['subnets'][0],0,1,0.25,468
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = netaddr.IPNetwork(float_subnet['cidr']).prefixlen,0,1,0.25,469
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid(),",0,1,0.25,470
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_subnet = port['subnets'][0],0,1,0.25,471
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = netaddr.IPNetwork(snat_subnet['cidr']).prefixlen,0,1,0.25,472
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = external_port['subnets'][0]['gateway_ip'],0,1,0.25,473
707890ef22c203389f61ddfe8025f1b0e2afe819,fg_port_created_successfully = ip_lib.device_exists_with_ips_and_mac(,0,1,0.25,474
707890ef22c203389f61ddfe8025f1b0e2afe819,for p in interfaces for subnet in p['subnets']]),0,1,0.25,475
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ips = [],0,1,0.25,476
707890ef22c203389f61ddfe8025f1b0e2afe819,subnets = [],0,1,0.25,477
707890ef22c203389f61ddfe8025f1b0e2afe819,float_subnet = external_gw_port['subnet'],1,1,0.25,478
707890ef22c203389f61ddfe8025f1b0e2afe819,device = router.router[l3_constants.HA_INTERFACE_KEY],1,1,0.25,479
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips = [{'subnet_id': subnet_id,",0,1,0.25,480
707890ef22c203389f61ddfe8025f1b0e2afe819,subnets = [],0,1,0.25,481
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid(),",0,1,0.25,482
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_subnet = port['subnets'][0],0,1,0.25,483
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = netaddr.IPNetwork(snat_subnet['cidr']).prefixlen,0,1,0.25,484
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = external_port['subnets'][0]['gateway_ip'],0,1,0.25,485
707890ef22c203389f61ddfe8025f1b0e2afe819,fg_port_created_successfully = ip_lib.device_exists_with_ips_and_mac(,0,1,0.25,486
707890ef22c203389f61ddfe8025f1b0e2afe819,for p in interfaces for subnet in p['subnets']]),0,1,0.25,487
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ips = [],0,1,0.25,488
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = '35.4.%i.4',0,1,0.25,489
707890ef22c203389f61ddfe8025f1b0e2afe819,float_subnet = external_gw_port['subnets'][0],0,1,0.25,490
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = '35.4.%i.0/24',0,1,0.25,491
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = 24,0,1,0.25,492
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = '35.4.%i.1',0,1,0.25,493
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = 'fd01:%x:1::6',0,1,0.25,494
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = 'fd01:%x:1::/64',0,1,0.25,495
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = 64,0,1,0.25,496
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = 'fd01:%x:1::1',0,1,0.25,497
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = netaddr.IPNetwork(float_subnet['cidr']).prefixlen,0,1,0.25,498
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip_cidr = self._port_first_ip_cidr(router.internal_ports[0]),0,1,0.25,499
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = external_port['subnet']['gateway_ip'],1,1,0.25,500
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=router.ns_name) for fip in floating_ips),0,1,0.25,501
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs = common_utils.fixed_ip_cidrs(expected_device['fixed_ips']),0,1,0.25,502
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.floating_ips_dict[vm_floating_ip] = FIP_PRI,1,1,0.25,503
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip = port['fixed_ips'][0],0,1,0.25,504
707890ef22c203389f61ddfe8025f1b0e2afe819,ha_device_cidr = self._port_first_ip_cidr(router.ha_port),0,1,0.25,505
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device_cidr = self._port_first_ip_cidr(external_port),0,1,0.25,506
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_cidr = self._port_first_ip_cidr(internal_port),0,1,0.25,507
707890ef22c203389f61ddfe8025f1b0e2afe819,default_gateway_ip = external_port['subnets'][0].get('gateway_ip'),0,1,0.25,508
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _uuid(),0,1,0.25,509
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_gateway = (external_device.route.get_gateway(,0,1,0.25,510
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips = [{'ip_address': '19.4.4.10',",0,1,0.25,511
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets = [{'id': subnet_id,",0,1,0.25,512
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['subnets'] = subnets,0,1,0.25,513
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['fixed_ips'] = fixed_ips,0,1,0.25,514
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(enable_ha, ip_version,",0,1,0.25,515
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = subnet['gateway_ip'],0,1,0.25,516
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_vers = netaddr.IPAddress(expected_gateway).version,0,1,0.25,517
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_address = '19.4.4.4',0,1,0.25,518
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_cidr = '19.4.4.0/24',0,1,0.25,519
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = '19.4.4.1',0,1,0.25,520
707890ef22c203389f61ddfe8025f1b0e2afe819,ha_device_cidr = router.ha_port['ip_cidr'],1,1,0.25,521
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix = subnet['cidr'].split('/')[1],0,1,0.25,522
707890ef22c203389f61ddfe8025f1b0e2afe819,"source_cidr = ""%s/%s"" % (iface['fixed_ips'][0]['ip_address'],",0,1,0.25,523
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _get_subnet_id(ports[0]),0,1,0.25,524
707890ef22c203389f61ddfe8025f1b0e2afe819,"ports[0]['subnets'] = [{'id': subnet_id,",0,1,0.25,525
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_agent_gw_interface')",0,1,0.25,526
707890ef22c203389f61ddfe8025f1b0e2afe819,orig_ext_gw_nat_rules = ri.external_gateway_nat_rules,0,1,0.25,527
707890ef22c203389f61ddfe8025f1b0e2afe819,external_gateway_nat_rules.side_effect = orig_ext_gw_nat_rules,0,1,0.25,528
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device_cidr = external_port['ip_cidr'],1,1,0.25,529
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_address = 'fd00::4',0,1,0.25,530
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_cidr = internal_port['ip_cidr'],1,1,0.25,531
707890ef22c203389f61ddfe8025f1b0e2afe819,default_gateway_ip = external_port['subnet'].get('gateway_ip'),1,1,0.25,532
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=router.ns_name) for fip in floating_ips),1,1,0.25,533
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['subnet']['gateway_ip'] = '19.4.4.5',1,1,0.25,534
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['fixed_ips'][0]['ip_address'] = '19.4.4.10',1,1,0.25,535
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(enable_ha, ip_version)",1,1,0.25,536
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_gateway = (,1,1,0.25,537
707890ef22c203389f61ddfe8025f1b0e2afe819,router['gw_port_host'] = HOSTNAME,0,1,0.25,538
707890ef22c203389f61ddfe8025f1b0e2afe819,router['distributed'] = True,0,1,0.25,539
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, dual_stack=dual_stack)",0,1,0.25,540
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = self._prepare_ext_gw_test(",0,1,0.25,541
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_cidr = 'fd00::/64',0,1,0.25,542
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = 'fd00::1',0,1,0.25,543
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = [{'destination': '8.8.8.0/24', 'nexthop': '19.4.4.4'}]",0,1,0.25,544
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_1 = _uuid(),0,1,0.25,545
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_2 = _uuid(),0,1,0.25,546
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.snat_ports = [{'subnets': [{'cidr': '152.2.0.0/16',",0,1,0.25,547
707890ef22c203389f61ddfe8025f1b0e2afe819,ns_id = _uuid(),0,1,0.25,548
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': _uuid(),",0,1,0.25,549
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_modify = mock.Mock(),0,1,0.25,550
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips = [{'subnet_id': subnet_id,",0,1,0.25,551
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_v6 = _uuid(),0,1,0.25,552
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port = {'fixed_ips': fixed_ips,",0,1,0.25,553
707890ef22c203389f61ddfe8025f1b0e2afe819,"exp_arp_calls = [mock.call(ri.ns_name, interface_name,",0,1,0.25,554
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs = ['20.0.0.30/24'],0,1,0.25,555
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ips = ['20.0.0.1'],0,1,0.25,556
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_modify = mock.Mock(),0,1,0.25,557
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _prepare_ext_gw_test(self, ri, dual_stack=False):",0,1,0.25,558
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_v6 = _uuid(),0,1,0.25,559
707890ef22c203389f61ddfe8025f1b0e2afe819,routes = [],1,1,0.25,560
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_address = kwargs.get('ip_address', '19.4.4.4')",1,1,0.25,561
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnet_cidr = kwargs.get('subnet_cidr', '19.4.4.0/24')",1,1,0.25,562
707890ef22c203389f61ddfe8025f1b0e2afe819,"gateway_ip = kwargs.get('gateway_ip', '19.4.4.1')",1,1,0.25,563
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_address = kwargs.get('ip_address', 'fd00::4')",1,1,0.25,564
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnet_cidr = kwargs.get('subnet_cidr', 'fd00::/64')",1,1,0.25,565
707890ef22c203389f61ddfe8025f1b0e2afe819,"gateway_ip = kwargs.get('gateway_ip', 'fd00::1')",1,1,0.25,566
707890ef22c203389f61ddfe8025f1b0e2afe819,router_id = _uuid(),1,1,0.25,567
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = [{'destination': '8.8.8.0/24', 'nexthop': '19.4.4.4'}]",1,1,0.25,568
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.INTERFACE_KEY] = interfaces,1,1,0.25,569
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.FLOATINGIP_KEY] = [{,1,1,0.25,570
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid(),",1,1,0.25,571
707890ef22c203389f61ddfe8025f1b0e2afe819,"'port_id': _uuid(),",1,1,0.25,572
707890ef22c203389f61ddfe8025f1b0e2afe819,router['ha'] = True,1,1,0.25,573
707890ef22c203389f61ddfe8025f1b0e2afe819,router['ha_vr_id'] = 1,1,1,0.25,574
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.HA_INTERFACE_KEY] = get_ha_interface(),1,1,0.25,575
707890ef22c203389f61ddfe8025f1b0e2afe819,router['enable_snat'] = enable_snat,1,1,0.25,576
707890ef22c203389f61ddfe8025f1b0e2afe819,"gateway_mac = kwargs.get('gateway_mac', 'ca:fe:de:ad:be:ee')",1,1,0.25,577
707890ef22c203389f61ddfe8025f1b0e2afe819,index = interfaces.index(interface),1,1,0.25,578
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = '35.4.%i.1',1,1,0.25,579
707890ef22c203389f61ddfe8025f1b0e2afe819,ipv6_subnet_modes = [subnet_mode_none] * count,1,1,0.25,580
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = 'fd01:%x:1::/64',1,1,0.25,581
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = 64,1,1,0.25,582
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = 'fd01:%x:1::1',1,1,0.25,583
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _uuid(),1,1,0.25,584
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'id': _uuid(),",1,1,0.25,585
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': _uuid(),",1,1,0.25,586
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnet_mode_none = {'ra_mode': None, 'address_mode': None}",1,1,0.25,587
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = 'fd01:%x::6',1,1,0.25,588
707890ef22c203389f61ddfe8025f1b0e2afe819,num_existing_subnets = len(subnets),1,1,0.25,589
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = 'fd01:%x::/64',1,1,0.25,590
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = 'fd01:%x::1',1,1,0.25,591
707890ef22c203389f61ddfe8025f1b0e2afe819,"interfaces = copy.deepcopy(router.get(l3_constants.INTERFACE_KEY, []))",1,1,0.25,592
707890ef22c203389f61ddfe8025f1b0e2afe819,interface = next(i for i in interfaces,1,1,0.25,593
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips, subnets = interface['fixed_ips'], interface['subnets']",1,1,0.25,594
707890ef22c203389f61ddfe8025f1b0e2afe819,interface = None,1,1,0.25,595
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips, subnets = [], []",1,1,0.25,596
707890ef22c203389f61ddfe8025f1b0e2afe819,return router,1,1,0.25,597
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_id': _uuid(),",1,1,0.25,598
707890ef22c203389f61ddfe8025f1b0e2afe819,"'name': u'L3 HA Admin port 0',",1,1,0.25,599
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns = agent.get_fip_ns(mock.sentinel.ext_net_id),1,1,0.25,600
707890ef22c203389f61ddfe8025f1b0e2afe819,"arp_table = {'ip_address': '1.5.25.15',",1,1,0.25,601
707890ef22c203389f61ddfe8025f1b0e2afe819,fake_network_id = _uuid(),1,1,0.25,602
707890ef22c203389f61ddfe8025f1b0e2afe819,agent_gateway_port = (,1,1,0.25,603
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.FLOATINGIP_AGENT_INTF_KEY] = agent_gateway_port,1,1,0.25,604
707890ef22c203389f61ddfe8025f1b0e2afe819,fake_floatingips = {'floatingips': [,1,1,0.25,605
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.FLOATINGIP_KEY] = fake_floatingips['floatingips'],1,1,0.25,606
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.iptables_manager.ipv4['nat'] = mock.MagicMock(),1,1,0.25,607
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_ns.agent_gateway_port = (,1,1,0.25,608
707890ef22c203389f61ddfe8025f1b0e2afe819,"'agent_id': _uuid(),",1,1,0.25,609
707890ef22c203389f61ddfe8025f1b0e2afe819,"stale_devlist = [FakeDev('qr-a1b2c3d4-e5'),",1,1,0.25,610
707890ef22c203389f61ddfe8025f1b0e2afe819,stale_devlist = [FakeDev('qg-a1b2c3d4-e5')],1,1,0.25,611
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.mock_ip.get_devices.return_value = [FakeDev('qr-aaaa'),",1,1,0.25,612
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.fip_ns = agent.get_fip_ns(external_net_id),1,1,0.25,613
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port = {'fixed_ips': fixed_ips,",0,1,0.25,614
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.fip_ns.agent_gateway_port = {,1,1,0.25,615
707890ef22c203389f61ddfe8025f1b0e2afe819,vm_floating_ip = '19.4.4.2',1,1,0.25,616
707890ef22c203389f61ddfe8025f1b0e2afe819,"payload = {'arp_table': arp_table, 'router_id': router['id']}",1,1,0.25,617
707890ef22c203389f61ddfe8025f1b0e2afe819,"arp_table = {'ip_address': '1.7.23.11',",1,1,0.25,618
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _get_subnet_id(router[l3_constants.INTERFACE_KEY][0]),1,1,0.25,619
707890ef22c203389f61ddfe8025f1b0e2afe819,router['distributed'] = False,1,1,0.25,620
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _prepare_ext_gw_test(self, ri, dual_stack=False):",1,1,0.25,621
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips = [{'subnet_id': subnet_id,",1,1,0.25,622
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets = [{'id': subnet_id,",1,1,0.25,623
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id_v6 = _uuid(),1,1,0.25,624
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port = {'fixed_ips': fixed_ips,",1,1,0.25,625
707890ef22c203389f61ddfe8025f1b0e2afe819,interface_name = ri.get_external_device_name(ex_gw_port['id']),1,1,0.25,626
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = self._prepare_ext_gw_test(",1,1,0.25,627
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, dual_stack=dual_stack)",1,1,0.25,628
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = self._prepare_ext_gw_test(ri)",1,1,0.25,629
707890ef22c203389f61ddfe8025f1b0e2afe819,router['distributed'] = True,1,1,0.25,630
707890ef22c203389f61ddfe8025f1b0e2afe819,"ports = ri.router.get(l3_constants.INTERFACE_KEY, [])",1,1,0.25,631
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _get_subnet_id(ports[0]),1,1,0.25,632
707890ef22c203389f61ddfe8025f1b0e2afe819,"test_ports = [{'mac_address': '00:11:22:33:44:55',",1,1,0.25,633
707890ef22c203389f61ddfe8025f1b0e2afe819,self.plugin_api.get_ports_by_subnet.return_value = test_ports,1,1,0.25,634
707890ef22c203389f61ddfe8025f1b0e2afe819,"ports[0]['subnets'] = [{'id': subnet_id,",1,1,0.25,635
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = 'fd01:%x:1::6',1,1,0.25,636
707890ef22c203389f61ddfe8025f1b0e2afe819,self.device_exists.return_value = True,1,1,0.25,637
707890ef22c203389f61ddfe8025f1b0e2afe819,prefixlen = 24,1,1,0.25,638
707890ef22c203389f61ddfe8025f1b0e2afe819,float_subnet = external_gw_port['subnet'],1,1,0.25,639
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['subnet']['gateway_ip'] = '19.4.4.5',1,1,0.25,640
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router['gw_port']['fixed_ips'][0]['ip_address'] = '19.4.4.10',1,1,0.25,641
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_info = self.generate_router_info(enable_ha, ip_version)",1,1,0.25,642
707890ef22c203389f61ddfe8025f1b0e2afe819,existing_gateway = (,1,1,0.25,643
707890ef22c203389f61ddfe8025f1b0e2afe819,expected_gateway = external_port['subnet']['gateway_ip'],1,1,0.25,644
707890ef22c203389f61ddfe8025f1b0e2afe819,device = router.router[l3_constants.HA_INTERFACE_KEY],1,1,0.25,645
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip_cidr = router.internal_ports[0]['ip_cidr'],1,1,0.25,646
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid(),",1,1,0.25,647
707890ef22c203389f61ddfe8025f1b0e2afe819,for p in interfaces]),1,1,0.25,648
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_subnet = port['subnet'],1,1,0.25,649
707890ef22c203389f61ddfe8025f1b0e2afe819,fg_port_created_successfully = ip_lib.device_exists_with_ip_mac(,1,1,0.25,650
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = '35.4.%i.4',1,1,0.25,651
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = '35.4.%i.0/24',1,1,0.25,652
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = '35.4.%i.1',1,1,0.25,653
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = 'fd01:%x:1::6',1,1,0.25,654
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = 'fd01:%x:1::/64',1,1,0.25,655
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=router.ns_name) for fip in floating_ips),1,1,0.25,656
707890ef22c203389f61ddfe8025f1b0e2afe819,default_gateway_ip = external_port['subnet'].get('gateway_ip'),1,1,0.25,657
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_device_cidr = internal_port['ip_cidr'],1,1,0.25,658
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device_cidr = external_port['ip_cidr'],1,1,0.25,659
707890ef22c203389f61ddfe8025f1b0e2afe819,"exp_arp_calls = [mock.call(ri.ns_name, interface_name,",0,1,0.25,660
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ips = ['20.0.0.1'],0,1,0.25,661
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr_pool = '35.4.%i.0/24',1,1,0.25,662
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _prepare_ext_gw_test(self, ri, dual_stack=False):",0,1,0.25,663
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = self._prepare_ext_gw_test(",0,1,0.25,664
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, dual_stack=dual_stack)",0,1,0.25,665
707890ef22c203389f61ddfe8025f1b0e2afe819,router['distributed'] = True,0,1,0.25,666
707890ef22c203389f61ddfe8025f1b0e2afe819,router['gw_port_host'] = HOSTNAME,0,1,0.25,667
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix = subnet['cidr'].split('/')[1],0,1,0.25,668
707890ef22c203389f61ddfe8025f1b0e2afe819,"source_cidr = ""%s/%s"" % (iface['fixed_ips'][0]['ip_address'],",0,1,0.25,669
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = _get_subnet_id(ports[0]),0,1,0.25,670
707890ef22c203389f61ddfe8025f1b0e2afe819,"ports[0]['subnets'] = [{'id': subnet_id,",0,1,0.25,671
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_agent_gw_interface')",0,1,0.25,672
707890ef22c203389f61ddfe8025f1b0e2afe819,orig_ext_gw_nat_rules = ri.external_gateway_nat_rules,0,1,0.25,673
707890ef22c203389f61ddfe8025f1b0e2afe819,external_gateway_nat_rules.side_effect = orig_ext_gw_nat_rules,0,1,0.25,674
707890ef22c203389f61ddfe8025f1b0e2afe819,gw_pool = 'fd01:%x:1::1',1,1,0.25,675
707890ef22c203389f61ddfe8025f1b0e2afe819,ha_device_cidr = router.ha_port['ip_cidr'],1,1,0.25,676
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_addr = '19.4.4.4',1,1,0.25,677
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_agent_gw_interface')",1,1,0.25,678
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = l3_test_common.prepare_ext_gw_test(",0,1,0.25,679
707890ef22c203389f61ddfe8025f1b0e2afe819,"self, ri, dual_stack=dual_stack)",0,1,0.25,680
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = l3_test_common.prepare_ext_gw_test(self,",0,1,0.25,681
707890ef22c203389f61ddfe8025f1b0e2afe819,subnet_id = l3_test_common.get_subnet_id(,0,1,0.25,682
707890ef22c203389f61ddfe8025f1b0e2afe819,"stale_devlist = [l3_test_common.FakeDev('qr-a1b2c3d4-e5'),",0,1,0.25,683
707890ef22c203389f61ddfe8025f1b0e2afe819,stale_devlist = [l3_test_common.FakeDev('qg-a1b2c3d4-e5')],0,1,0.25,684
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_ip.get_devices.return_value = [,0,1,0.25,685
707890ef22c203389f61ddfe8025f1b0e2afe819,self.name = name,1,1,0.25,686
707890ef22c203389f61ddfe8025f1b0e2afe819,interfaces = router[l3_constants.INTERFACE_KEY],1,1,0.25,687
707890ef22c203389f61ddfe8025f1b0e2afe819,current = sum(,1,1,0.25,688
707890ef22c203389f61ddfe8025f1b0e2afe819,for p in interfaces for subnet in p['subnets']]),1,1,0.25,689
707890ef22c203389f61ddfe8025f1b0e2afe819,mac_address = netaddr.EUI('ca:fe:de:ad:be:ef'),1,1,0.25,690
707890ef22c203389f61ddfe8025f1b0e2afe819,mac_address.dialect = netaddr.mac_unix,1,1,0.25,691
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr = '19.4.4.0/24',1,1,0.25,692
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ips = [],1,1,0.25,693
707890ef22c203389f61ddfe8025f1b0e2afe819,subnets = [],1,1,0.25,694
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_pool = '35.4.%i.4',1,1,0.25,695
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_ips'),",1,1,0.25,696
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs = ['20.0.0.30/24'],0,1,0.25,697
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, '_set_subnet_info')",1,1,0.25,698
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_info = mock.Mock(),1,1,0.25,699
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_addr = 'fd00::4',1,1,0.25,700
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri, 'get_floating_agent_gw_interface'),",1,1,0.25,701
707890ef22c203389f61ddfe8025f1b0e2afe819,cidr = 'fd00::/64',1,1,0.25,702
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = 'fd00::1',1,1,0.25,703
707890ef22c203389f61ddfe8025f1b0e2afe819,"routes = [{'destination': '8.8.8.0/24', 'nexthop': ip_addr}]",1,1,0.25,704
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.snat_ports = [{'subnet': {'cidr': '152.2.0.0/16',",1,1,0.25,705
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': _uuid(),",1,1,0.25,706
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ip = '19.4.4.1',1,1,0.25,707
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port = {'fixed_ips': [{'ip_address': '20.0.0.30',",1,1,0.25,708
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name, ex_gw_port = self._prepare_ext_gw_test(ri)",1,1,0.25,709
707890ef22c203389f61ddfe8025f1b0e2afe819,ports[0]['subnet']['id'] = _get_subnet_id(ports[0]),1,1,0.25,710
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix = iface['subnet']['cidr'].split('/')[1],1,1,0.25,711
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_remove = mock.Mock(),1,1,0.25,712
707890ef22c203389f61ddfe8025f1b0e2afe819,"source_cidr = ""%s/%s"" % (iface['fixed_ips'][0]['ip_address'],",1,1,0.25,713
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _expected_rpc_report(self, expected):",1,0,0.0,714
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual((router.router_id, 'backup'), calls[2])",1,0,0.0,715
707890ef22c203389f61ddfe8025f1b0e2afe819,"registry.subscribe(event_handler,",1,0,0.0,716
707890ef22c203389f61ddfe8025f1b0e2afe819,"resources.ROUTER, events.BEFORE_CREATE)",1,0,0.0,717
707890ef22c203389f61ddfe8025f1b0e2afe819,"resources.ROUTER, events.BEFORE_UPDATE)",1,0,0.0,718
707890ef22c203389f61ddfe8025f1b0e2afe819,"resources.ROUTER, events.AFTER_CREATE)",1,0,0.0,719
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_notifications_for_router_events(self):,1,0,0.0,720
707890ef22c203389f61ddfe8025f1b0e2afe819,"resources.ROUTER, events.AFTER_UPDATE)",1,0,0.0,721
707890ef22c203389f61ddfe8025f1b0e2afe819,"resources.ROUTER, events.BEFORE_DELETE)",1,0,0.0,722
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual((router.router_id, 'master'), calls[1])",1,0,0.0,723
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""",1,0,0.0,724
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router2.ha_state == 'master'),1,0,0.0,725
707890ef22c203389f61ddfe8025f1b0e2afe819,"{router1.router_id: 'standby', router2.router_id: 'active'}))",1,0,0.0,726
707890ef22c203389f61ddfe8025f1b0e2afe819,lambda: self._expected_rpc_report(,1,0,0.0,727
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router1.ha_state == 'backup'),1,0,0.0,728
707890ef22c203389f61ddfe8025f1b0e2afe819,self.fail_ha_router(router1),1,0,0.0,729
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_keepalived_state_change_bulk_rpc(self):,1,0,0.0,730
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent._process_updated_router(router.router),1,0,0.0,731
707890ef22c203389f61ddfe8025f1b0e2afe819,return actual_router_states == expected,1,0,0.0,732
707890ef22c203389f61ddfe8025f1b0e2afe819,"for router_id, state in six.iteritems(call):",1,0,0.0,733
707890ef22c203389f61ddfe8025f1b0e2afe819,for call in calls:,1,0,0.0,734
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.plugin_rpc.update_ha_routers_states.call_args_list),1,0,0.0,735
707890ef22c203389f61ddfe8025f1b0e2afe819,"resources.ROUTER, events.AFTER_DELETE)",1,0,0.0,736
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.call('router', 'after_delete', self.agent, router=router)]",1,0,0.0,737
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._delete_router(self.agent, router.router_id)",1,0,0.0,738
707890ef22c203389f61ddfe8025f1b0e2afe819,v6_ext_gw_with_sub=False),1,0,0.0,739
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual((router.router_id, 'backup'), calls[0])",1,0,0.0,740
707890ef22c203389f61ddfe8025f1b0e2afe819,def clean_fips(router):,1,0,0.0,741
707890ef22c203389f61ddfe8025f1b0e2afe819,''',1,0,0.0,742
707890ef22c203389f61ddfe8025f1b0e2afe819,'''Test that conntrack immediately drops stateful connection,1,0,0.0,743
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_conntrack_disassociate_fip(self, ha):",1,0,0.0,744
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_conntrack_disassociate_fip(ha=True),1,0,0.0,745
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_conntrack_disassociate_fip_ha_router(self):,1,0,0.0,746
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_conntrack_disassociate_fip(ha=False),1,0,0.0,747
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_conntrack_disassociate_fip_legacy_router(self):,1,0,0.0,748
707890ef22c203389f61ddfe8025f1b0e2afe819,self._router_lifecycle(enable_ha=True),1,0,0.0,749
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=False, dual_stack=True,",1,0,0.0,750
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.call('router', 'before_create', self.agent, router=router),",1,0,0.0,751
707890ef22c203389f61ddfe8025f1b0e2afe819,'fe80::f816:3eff:fe2e:1'),1,0,0.0,752
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.conf.set_override('ipv6_gateway',",1,0,0.0,753
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_legacy_router_lifecycle_with_no_gateway_subnet(self):,1,0,0.0,754
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=False, dual_stack=True)",1,0,0.0,755
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_legacy_router_lifecycle(self):,1,0,0.0,756
707890ef22c203389f61ddfe8025f1b0e2afe819,event_handler.assert_has_calls(expected_calls),1,0,0.0,757
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.call('router', 'before_delete', self.agent, router=router),",1,0,0.0,758
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.call('router', 'after_update', self.agent, router=router),",1,0,0.0,759
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.call('router', 'before_update', self.agent, router=router),",1,0,0.0,760
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.call('router', 'after_create', self.agent, router=router),",1,0,0.0,761
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ha_router_lifecycle(self):,1,0,0.0,762
707890ef22c203389f61ddfe8025f1b0e2afe819,"self, router, ip_versions, namespace=None):",1,0,0.0,763
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: enqueue_mock.call_count == 3),1,0,0.0,764
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router.ha_state == 'backup'),1,0,0.0,765
707890ef22c203389f61ddfe8025f1b0e2afe819,def assert_ovs_bridge_empty(bridge_name):,1,0,0.0,766
707890ef22c203389f61ddfe8025f1b0e2afe819,def _assert_interfaces_deleted_from_ovs(self):,1,0,0.0,767
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(extra_subnet, routes)",1,0,0.0,768
707890ef22c203389f61ddfe8025f1b0e2afe819,for extra_subnet in (route['cidr'] for route in extra_subnets):,1,0,0.0,769
707890ef22c203389f61ddfe8025f1b0e2afe819,routes.extend(_routes),1,0,0.0,770
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=ns_name),1,0,0.0,771
707890ef22c203389f61ddfe8025f1b0e2afe819,for ip_version in ip_versions:,1,0,0.0,772
707890ef22c203389f61ddfe8025f1b0e2afe819,def _assert_onlink_subnet_routes(,1,0,0.0,773
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(extra_route, routes)",1,0,0.0,774
707890ef22c203389f61ddfe8025f1b0e2afe819,for extra_route in router.router['routes']:,1,0,0.0,775
707890ef22c203389f61ddfe8025f1b0e2afe819,'destination': route['destination']} for route in routes],1,0,0.0,776
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_extra_routes(self, router):",1,0,0.0,777
707890ef22c203389f61ddfe8025f1b0e2afe819,"device, router.get_internal_device_name, router.ns_name))",1,0,0.0,778
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self.device_exists_with_ips_and_mac(,1,0,0.0,779
707890ef22c203389f61ddfe8025f1b0e2afe819,for device in internal_devices:,1,0,0.0,780
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(len(internal_devices)),1,0,0.0,781
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_internal_devices(self, router):",1,0,0.0,782
707890ef22c203389f61ddfe8025f1b0e2afe819,"'INPUT',",1,0,0.0,783
707890ef22c203389f61ddfe8025f1b0e2afe819,"'filter',",1,0,0.0,784
707890ef22c203389f61ddfe8025f1b0e2afe819,metadata_port_filter)),1,0,0.0,785
707890ef22c203389f61ddfe8025f1b0e2afe819,"'nat',",1,0,0.0,786
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_fip(router, client_address, fixed_address=server_address)",1,0,0.0,787
707890ef22c203389f61ddfe8025f1b0e2afe819,"'PREROUTING',",1,0,0.0,788
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(bridge.get_port_name_list()),1,0,0.0,789
707890ef22c203389f61ddfe8025f1b0e2afe819,assert_ovs_bridge_empty(self.agent.conf.ovs_integration_bridge),1,0,0.0,790
707890ef22c203389f61ddfe8025f1b0e2afe819,assert_ovs_bridge_empty(self.agent.conf.external_network_bridge),1,0,0.0,791
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertEqual(,1,0,0.0,792
707890ef22c203389f61ddfe8025f1b0e2afe819,self.fail_ha_router(router),1,0,0.0,793
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router.ha_state == 'master'),1,0,0.0,794
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent, 'enqueue_state_change').start()",1,0,0.0,795
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_keepalived_state_change_notification(self):,1,0,0.0,796
707890ef22c203389f61ddfe8025f1b0e2afe819,class L3AgentTestCase(L3AgentTestFramework):,1,0,0.0,797
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_address, self._get_addresses_on_device(namespace, interface))",1,0,0.0,798
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertIn(,1,0,0.0,799
707890ef22c203389f61ddfe8025f1b0e2afe819,"namespace, interface, ip_address):",1,0,0.0,800
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_ip_address_on_interface(self,",1,0,0.0,801
707890ef22c203389f61ddfe8025f1b0e2afe819,"[], self._get_addresses_on_device(namespace, interface))",1,0,0.0,802
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_no_ip_addresses_on_interface(self, namespace, interface):",1,0,0.0,803
707890ef22c203389f61ddfe8025f1b0e2afe819,"def floating_ips_configured(self, router):",1,0,0.0,804
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_lib.IPDevice(interface, namespace=namespace).addr.list()]",1,0,0.0,805
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _get_addresses_on_device(cls, namespace, interface):",1,0,0.0,806
707890ef22c203389f61ddfe8025f1b0e2afe819,@classmethod,1,0,0.0,807
707890ef22c203389f61ddfe8025f1b0e2afe819,ha_device.link.set_down(),1,0,0.0,808
707890ef22c203389f61ddfe8025f1b0e2afe819,"def fail_ha_router(self, router):",1,0,0.0,809
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port['mac_address'],",1,0,0.0,810
707890ef22c203389f61ddfe8025f1b0e2afe819,"['%s/32' % fip['floating_ip_address']],",1,0,0.0,811
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_external_device_name(external_port['id']),",1,0,0.0,812
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_lib.device_exists_with_ips_and_mac(,1,0,0.0,813
707890ef22c203389f61ddfe8025f1b0e2afe819,return len(floating_ips) and all(,1,0,0.0,814
707890ef22c203389f61ddfe8025f1b0e2afe819,clean_fips(router),1,0,0.0,815
707890ef22c203389f61ddfe8025f1b0e2afe819,self.generate_router_info(False)),1,0,0.0,816
707890ef22c203389f61ddfe8025f1b0e2afe819,router.process(self.agent),1,0,0.0,817
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_periodic_sync_routers_task(self):,1,0,0.0,818
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_periodic_sync_routers_task(,1,0,0.0,819
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted_during_resync.append(,1,0,0.0,820
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_periodic_sync_routers_task_routers_deleted_while_agent_sync(self):,1,0,0.0,821
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted.append(self.generate_router_info(False)),1,0,0.0,822
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_periodic_sync_routers_task_routers_deleted_while_agent_down(self):,1,0,0.0,823
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted_during_resync=[]),1,0,0.0,824
707890ef22c203389f61ddfe8025f1b0e2afe819,"routers_deleted=[],",1,0,0.0,825
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._test_periodic_sync_routers_task(routers_to_keep,",1,0,0.0,826
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_to_keep.append(self.generate_router_info(False)),1,0,0.0,827
707890ef22c203389f61ddfe8025f1b0e2afe819,for i in range(2):,1,0,0.0,828
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_router_does_not_exist(ri),1,0,0.0,829
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _router_lifecycle(self, enable_ha, ip_version=4,",1,0,0.0,830
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.router_info),1,0,0.0,831
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertNotIn(ri.router_id,",1,0,0.0,832
707890ef22c203389f61ddfe8025f1b0e2afe819,r['id'])),1,0,0.0,833
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self._namespace_exists(namespaces.NS_PREFIX +,1,0,0.0,834
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(r['id'], self.agent.router_info)",1,0,0.0,835
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent._process_router_update(),1,0,0.0,836
707890ef22c203389f61ddfe8025f1b0e2afe819,while not self.agent._queue._queue.empty():,1,0,0.0,837
707890ef22c203389f61ddfe8025f1b0e2afe819,# make sure all events are processed,1,0,0.0,838
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.router_deleted(self.agent.context, r['id'])",1,0,0.0,839
707890ef22c203389f61ddfe8025f1b0e2afe819,for r in routers_deleted_during_resync:,1,0,0.0,840
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted_during_resync=routers_deleted_during_resync),1,0,0.0,841
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_internal_interface_by_subnet(router.router,",1,0,0.0,842
707890ef22c203389f61ddfe8025f1b0e2afe819,"# while sync updates are still in the queue, higher priority",1,0,0.0,843
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_internal_device_name,",1,0,0.0,844
707890ef22c203389f61ddfe8025f1b0e2afe819,# platform) is updated to 1.2.10 (or above).,1,0,0.0,845
707890ef22c203389f61ddfe8025f1b0e2afe819,str(self.agent.conf.metadata_port) in rule.rule),1,0,0.0,846
707890ef22c203389f61ddfe8025f1b0e2afe819,"# keepalived on Ubuntu14.04 (i.e., check-neutron-dsvm-functional",1,0,0.0,847
707890ef22c203389f61ddfe8025f1b0e2afe819,# Note(SridharG): enable the assert_gateway for IPv6 once,1,0,0.0,848
707890ef22c203389f61ddfe8025f1b0e2afe819,if not (enable_ha and (ip_version == 6 or dual_stack)):,1,0,0.0,849
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_external_device(router),1,0,0.0,850
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_internal_devices(router),1,0,0.0,851
707890ef22c203389f61ddfe8025f1b0e2afe819,"lambda: self._metadata_proxy_exists(self.agent.conf, router))",1,0,0.0,852
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self._namespace_exists(router.ns_name)),1,0,0.0,853
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(device_exists),1,0,0.0,854
707890ef22c203389f61ddfe8025f1b0e2afe819,"device,",1,0,0.0,855
707890ef22c203389f61ddfe8025f1b0e2afe819,"count=2,",1,0,0.0,856
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.device_exists_with_ips_and_mac,",1,0,0.0,857
707890ef22c203389f61ddfe8025f1b0e2afe819,# device has an IP address.,1,0,0.0,858
707890ef22c203389f61ddfe8025f1b0e2afe819,# configuring everything. We verify this by waiting until the last,1,0,0.0,859
707890ef22c203389f61ddfe8025f1b0e2afe819,"# not when it ends. Thus, we have to wait until keepalived finishes",1,0,0.0,860
707890ef22c203389f61ddfe8025f1b0e2afe819,"# Keepalived notifies of a state transition when it starts,",1,0,0.0,861
707890ef22c203389f61ddfe8025f1b0e2afe819,interface_name),1,0,0.0,862
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_no_ip_addresses_on_interface(router.ns_name,",1,0,0.0,863
707890ef22c203389f61ddfe8025f1b0e2afe819,if enable_ha:,1,0,0.0,864
707890ef22c203389f61ddfe8025f1b0e2afe819,ipv6_subnet_modes=subnet_modes),1,0,0.0,865
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=6,",1,0,0.0,866
707890ef22c203389f61ddfe8025f1b0e2afe819,# router_deleted events may be added there as well,1,0,0.0,867
707890ef22c203389f61ddfe8025f1b0e2afe819,# Plug external_gateway_info in the routers that are not going to be,1,0,0.0,868
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.ns_name, router.ns_name, client_address, port,",1,0,0.0,869
707890ef22c203389f61ddfe8025f1b0e2afe819,netcat.test_connectivity(),1,0,0.0,870
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_fip(router, new_fip)",1,0,0.0,871
707890ef22c203389f61ddfe8025f1b0e2afe819,router.keepalived_manager.get_conf_on_disk()),1,0,0.0,872
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected,",1,0,0.0,873
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_keepalived_configuration(self):,1,0,0.0,874
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=True, dual_stack=True,",1,0,0.0,875
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ipv6_ha_router_lifecycle_with_no_gw_subnet_for_router_advts(self):,1,0,0.0,876
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=True, ip_version=6,",1,0,0.0,877
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ipv6_ha_router_lifecycle_with_no_gw_subnet(self):,1,0,0.0,878
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=True, ip_version=6)",1,0,0.0,879
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ipv6_ha_router_lifecycle(self):,1,0,0.0,880
707890ef22c203389f61ddfe8025f1b0e2afe819,with testtools.ExpectedException(RuntimeError):,1,0,0.0,881
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id}],1,0,0.0,882
707890ef22c203389f61ddfe8025f1b0e2afe819,assert_num_of_conntrack_rules(1),1,0,0.0,883
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(netcat.test_connectivity()),1,0,0.0,884
707890ef22c203389f61ddfe8025f1b0e2afe819,assert_num_of_conntrack_rules(0),1,0,0.0,885
707890ef22c203389f61ddfe8025f1b0e2afe819,with self.assert_max_execution_time(100):,1,0,0.0,886
707890ef22c203389f61ddfe8025f1b0e2afe819,if ha:,1,0,0.0,887
707890ef22c203389f61ddfe8025f1b0e2afe819,"n, len([line for line in out.strip().split('\n') if line]))",1,0,0.0,888
707890ef22c203389f61ddfe8025f1b0e2afe819,"""--orig-src"", client_address])",1,0,0.0,889
707890ef22c203389f61ddfe8025f1b0e2afe819,def assert_num_of_conntrack_rules(n):,1,0,0.0,890
707890ef22c203389f61ddfe8025f1b0e2afe819,self.addCleanup(netcat.stop_processes),1,0,0.0,891
707890ef22c203389f61ddfe8025f1b0e2afe819,protocol=net_helpers.NetcatTester.TCP),1,0,0.0,892
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 24,",1,0,0.0,893
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '19.4.4.0/24',",1,0,0.0,894
707890ef22c203389f61ddfe8025f1b0e2afe819,external_network_id),1,0,0.0,895
707890ef22c203389f61ddfe8025f1b0e2afe819,"routers_to_keep,",1,0,0.0,896
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.periodic_sync_routers_task(self.agent.context),1,0,0.0,897
707890ef22c203389f61ddfe8025f1b0e2afe819,return_value=ns_names_to_retrieve):,1,0,0.0,898
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(namespace_manager.NamespaceManager, 'list_all',",1,0,0.0,899
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted_during_resync),1,0,0.0,900
707890ef22c203389f61ddfe8025f1b0e2afe819,deleted_routers_info.append(ri),1,0,0.0,901
707890ef22c203389f61ddfe8025f1b0e2afe819,for r in routers_deleted + routers_deleted_during_resync:,1,0,0.0,902
707890ef22c203389f61ddfe8025f1b0e2afe819,ns_names_to_retrieve.add(ri.ns_name),1,0,0.0,903
707890ef22c203389f61ddfe8025f1b0e2afe819,for r in routers_to_keep:,1,0,0.0,904
707890ef22c203389f61ddfe8025f1b0e2afe819,routers_deleted_during_resync):,1,0,0.0,905
707890ef22c203389f61ddfe8025f1b0e2afe819,"routers_deleted,",1,0,0.0,906
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_periodic_sync_routers_task(self,",1,0,0.0,907
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.5'}],1,0,0.0,908
707890ef22c203389f61ddfe8025f1b0e2afe819,"(new_external_device_ip, external_device_name),",1,0,0.0,909
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertIn('%s/24 dev %s' %,1,0,0.0,910
707890ef22c203389f61ddfe8025f1b0e2afe819,new_config),1,0,0.0,911
707890ef22c203389f61ddfe8025f1b0e2afe819,"(old_external_device_ip, external_device_name),",1,0,0.0,912
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertNotIn('%s/24 dev %s' %,1,0,0.0,913
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(new_gw, new_config)",1,0,0.0,914
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertNotIn(old_gw, new_config)",1,0,0.0,915
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(new_fip, new_config)",1,0,0.0,916
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(existing_fip, new_config)",1,0,0.0,917
707890ef22c203389f61ddfe8025f1b0e2afe819,"# Get the updated configuration and assert that both FIPs are in,",1,0,0.0,918
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertTrue(self._get_rule(router.iptables_manager,",1,0,0.0,919
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.linux import dhcp,1,0,0.0,920
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_metadata_chains(self, router):",1,0,0.0,921
707890ef22c203389f61ddfe8025f1b0e2afe819,"'nat', 'float-snat'))",1,0,0.0,922
707890ef22c203389f61ddfe8025f1b0e2afe819,def _get_config_opts(self):,1,0,0.0,923
707890ef22c203389f61ddfe8025f1b0e2afe819,self.conf),1,0,0.0,924
707890ef22c203389f61ddfe8025f1b0e2afe819,mock.patch('neutron.agent.rpc.PluginReportStateAPI').start(),1,0,0.0,925
707890ef22c203389f61ddfe8025f1b0e2afe819,'neutron.agent.l3.agent.L3PluginApi').start().return_value,1,0,0.0,926
707890ef22c203389f61ddfe8025f1b0e2afe819,"super(L3AgentTestFramework, self).setUp()",1,0,0.0,927
707890ef22c203389f61ddfe8025f1b0e2afe819,def setUp(self):,1,0,0.0,928
707890ef22c203389f61ddfe8025f1b0e2afe819,class L3AgentTestFramework(base.BaseSudoTestCase):,1,0,0.0,929
707890ef22c203389f61ddfe8025f1b0e2afe819,return ovs_lib.OVSBridge(br_name),1,0,0.0,930
707890ef22c203389f61ddfe8025f1b0e2afe819,def get_ovs_bridge(br_name):,1,0,0.0,931
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.functional import base,1,0,0.0,932
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.functional.agent.linux import helpers,1,0,0.0,933
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.common import net_helpers,1,0,0.0,934
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.common import machine_fixtures,1,0,0.0,935
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.common import l3_test_common,1,0,0.0,936
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.common import utils as common_utils,1,0,0.0,937
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.common import constants as l3_constants,1,0,0.0,938
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.common import config as common_config,1,0,0.0,939
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.callbacks import resources,1,0,0.0,940
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.callbacks import registry,1,0,0.0,941
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.callbacks import events,1,0,0.0,942
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.linux import utils,1,0,0.0,943
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.linux import ip_lib,1,0,0.0,944
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.linux import external_process,1,0,0.0,945
707890ef22c203389f61ddfe8025f1b0e2afe819,config.register_opts(common_config.core_opts),1,0,0.0,946
707890ef22c203389f61ddfe8025f1b0e2afe819,config.register_opts(common_config.core_cli_opts),1,0,0.0,947
707890ef22c203389f61ddfe8025f1b0e2afe819,logging.register_options(config),1,0,0.0,948
707890ef22c203389f61ddfe8025f1b0e2afe819,# metadata_proxy_watch_log has no effect,1,0,0.0,949
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('agent_mode', agent_mode)",1,0,0.0,950
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('host', host)",1,0,0.0,951
707890ef22c203389f61ddfe8025f1b0e2afe819,get_temp_file_path('external/pids')),1,0,0.0,952
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('external_pids',",1,0,0.0,953
707890ef22c203389f61ddfe8025f1b0e2afe819,get_temp_file_path('ha_confs')),1,0,0.0,954
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('ha_confs_path',",1,0,0.0,955
707890ef22c203389f61ddfe8025f1b0e2afe819,get_temp_file_path('metadata_proxy')),1,0,0.0,956
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('metadata_proxy_socket',",1,0,0.0,957
707890ef22c203389f61ddfe8025f1b0e2afe819,get_temp_file_path('log_file')),1,0,0.0,958
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('log_file',",1,0,0.0,959
707890ef22c203389f61ddfe8025f1b0e2afe819,# NOTE(cbrandily): log_file or log_dir must be set otherwise,1,0,0.0,960
707890ef22c203389f61ddfe8025f1b0e2afe819,agent_config.register_process_monitor_opts(config),1,0,0.0,961
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('state_path', temp_dir.path)",1,0,0.0,962
707890ef22c203389f61ddfe8025f1b0e2afe819,root=temp_dir),1,0,0.0,963
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('external_network_bridge', br_ex.br_name)",1,0,0.0,964
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf.set_override('ovs_integration_bridge', br_int.br_name)",1,0,0.0,965
707890ef22c203389f61ddfe8025f1b0e2afe819,'neutron.agent.linux.interface.OVSInterfaceDriver'),1,0,0.0,966
707890ef22c203389f61ddfe8025f1b0e2afe819,"'interface_driver',",1,0,0.0,967
707890ef22c203389f61ddfe8025f1b0e2afe819,conf.set_override(,1,0,0.0,968
707890ef22c203389f61ddfe8025f1b0e2afe819,l3_agent_main.register_opts(conf),1,0,0.0,969
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _configure_agent(self, host, agent_mode='dvr_snat'):",1,0,0.0,970
707890ef22c203389f61ddfe8025f1b0e2afe819,return config,1,0,0.0,971
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent import l3_agent as l3_agent_main,1,0,0.0,972
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import namespaces,1,0,0.0,973
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import namespace_manager,1,0,0.0,974
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(dvr_router.LOG, 'debug') as log_debug:",1,0,0.0,975
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'cidr': vm_floating_ip + '/32'},",1,0,0.0,976
707890ef22c203389f61ddfe8025f1b0e2afe819,FakeDev(ri.fip_ns.get_ext_device_name(_uuid()))],1,0,0.0,977
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': external_net_id,",1,0,0.0,978
707890ef22c203389f61ddfe8025f1b0e2afe819,"}],",1,0,0.0,979
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id,1,0,0.0,980
707890ef22c203389f61ddfe8025f1b0e2afe819,'fixed_ips': [{,1,0,0.0,981
707890ef22c203389f61ddfe8025f1b0e2afe819,if fip_ns:,1,0,0.0,982
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_removed_ext_gw_port_and_fip(self, fip_ns=False):",1,0,0.0,983
707890ef22c203389f61ddfe8025f1b0e2afe819,FakeDev('rfp-aaaa')],1,0,0.0,984
707890ef22c203389f61ddfe8025f1b0e2afe819,FakeDev('qr-b2c3d4e5-f6')],1,0,0.0,985
707890ef22c203389f61ddfe8025f1b0e2afe819,] * 2)),1,0,0.0,986
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri.remove_floating_ip.assert_called_once_with(self.mock_ip_dev,",1,0,0.0,987
707890ef22c203389f61ddfe8025f1b0e2afe819,'address_mode': l3_constants.IPV6_SLAAC},1,0,0.0,988
707890ef22c203389f61ddfe8025f1b0e2afe819,ipv6_subnet_modes=([,1,0,0.0,989
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_subnet(router, count=2, ip_version=6,",1,0,0.0,990
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_interface(router, count=1, ip_version=6)",1,0,0.0,991
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_interface(router, count=1, ip_version=4)",1,0,0.0,992
707890ef22c203389f61ddfe8025f1b0e2afe819,"'address_mode': l3_constants.IPV6_SLAAC}],",1,0,0.0,993
707890ef22c203389f61ddfe8025f1b0e2afe819,'address_mode': l3_constants.IPV6_SLAAC}]),1,0,0.0,994
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'ra_mode': l3_constants.IPV6_SLAAC,",1,0,0.0,995
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_subnet(router, count=1, ip_version=6, ipv6_subnet_modes=[",1,0,0.0,996
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_gateway(router, v6_ext_gw_with_sub)",1,0,0.0,997
707890ef22c203389f61ddfe8025f1b0e2afe819,{'cidr': '19.4.4.1/24'}],1,0,0.0,998
707890ef22c203389f61ddfe8025f1b0e2afe819,'19.4.4.2/32'),1,0,0.0,999
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import dvr_snat_ns,1,0,0.0,1000
707890ef22c203389f61ddfe8025f1b0e2afe819,import netaddr,1,0,0.0,1001
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.common import ovs_lib,1,0,0.0,1002
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.common import config as agent_config,1,0,0.0,1003
707890ef22c203389f61ddfe8025f1b0e2afe819,import webob.exc,1,0,0.0,1004
707890ef22c203389f61ddfe8025f1b0e2afe819,import webob.dec,1,0,0.0,1005
707890ef22c203389f61ddfe8025f1b0e2afe819,import webob,1,0,0.0,1006
707890ef22c203389f61ddfe8025f1b0e2afe819,import testtools,1,0,0.0,1007
707890ef22c203389f61ddfe8025f1b0e2afe819,import six,1,0,0.0,1008
707890ef22c203389f61ddfe8025f1b0e2afe819,from oslo_utils import uuidutils,1,0,0.0,1009
707890ef22c203389f61ddfe8025f1b0e2afe819,from oslo_log import log as logging,1,0,0.0,1010
707890ef22c203389f61ddfe8025f1b0e2afe819,from oslo_config import cfg,1,0,0.0,1011
707890ef22c203389f61ddfe8025f1b0e2afe819,import time,1,0,0.0,1012
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(ri.remove_floating_ip.called),1,0,0.0,1013
707890ef22c203389f61ddfe8025f1b0e2afe819,import os.path,1,0,0.0,1014
707890ef22c203389f61ddfe8025f1b0e2afe819,import functools,1,0,0.0,1015
707890ef22c203389f61ddfe8025f1b0e2afe819,import copy,1,0,0.0,1016
707890ef22c203389f61ddfe8025f1b0e2afe819,framework.L3AgentTestFramework):,0,0,0.0,1017
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.functional.agent.l3 import framework,0,0,0.0,1018
707890ef22c203389f61ddfe8025f1b0e2afe819,FakeDev),1,0,0.0,1019
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_external_gateway_removed_ext_gw_port_and_fip(fip_ns=False),1,0,0.0,1020
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_removed_ext_gw_port_no_fip_ns(self):,1,0,0.0,1021
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_external_gateway_removed_ext_gw_port_and_fip(fip_ns=True),1,0,0.0,1022
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_removed_ext_gw_port_and_fip(self):,1,0,0.0,1023
707890ef22c203389f61ddfe8025f1b0e2afe819,return conf,1,0,0.0,1024
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _get_agent_ovs_integration_bridge(self, agent):",1,0,0.0,1025
707890ef22c203389f61ddfe8025f1b0e2afe819,return get_ovs_bridge(agent.conf.ovs_integration_bridge),1,0,0.0,1026
707890ef22c203389f61ddfe8025f1b0e2afe819,virtual_ipaddress {,1,0,0.0,1027
707890ef22c203389f61ddfe8025f1b0e2afe819,8.8.8.0/24 via 19.4.4.4,1,0,0.0,1028
707890ef22c203389f61ddfe8025f1b0e2afe819,0.0.0.0/0 via %(default_gateway_ip)s dev %(external_device_name)s,1,0,0.0,1029
707890ef22c203389f61ddfe8025f1b0e2afe819,virtual_routes {,1,0,0.0,1030
707890ef22c203389f61ddfe8025f1b0e2afe819,%(int_port_ipv6)s dev %(internal_device_name)s scope link,1,0,0.0,1031
707890ef22c203389f61ddfe8025f1b0e2afe819,%(ex_port_ipv6)s dev %(external_device_name)s scope link,1,0,0.0,1032
707890ef22c203389f61ddfe8025f1b0e2afe819,%(internal_device_cidr)s dev %(internal_device_name)s,1,0,0.0,1033
707890ef22c203389f61ddfe8025f1b0e2afe819,%(external_device_cidr)s dev %(external_device_name)s,1,0,0.0,1034
707890ef22c203389f61ddfe8025f1b0e2afe819,%(floating_ip_cidr)s dev %(external_device_name)s,1,0,0.0,1035
707890ef22c203389f61ddfe8025f1b0e2afe819,virtual_ipaddress_excluded {,1,0,0.0,1036
707890ef22c203389f61ddfe8025f1b0e2afe819,169.254.0.1/24 dev %(ha_device_name)s,1,0,0.0,1037
707890ef22c203389f61ddfe8025f1b0e2afe819,},1,0,0.0,1038
707890ef22c203389f61ddfe8025f1b0e2afe819,"}"""""" % {",1,0,0.0,1039
707890ef22c203389f61ddfe8025f1b0e2afe819,%(ha_device_name)s,1,0,0.0,1040
707890ef22c203389f61ddfe8025f1b0e2afe819,track_interface {,1,0,0.0,1041
707890ef22c203389f61ddfe8025f1b0e2afe819,advert_int 2,1,0,0.0,1042
707890ef22c203389f61ddfe8025f1b0e2afe819,nopreempt,1,0,0.0,1043
707890ef22c203389f61ddfe8025f1b0e2afe819,garp_master_refresh 10,1,0,0.0,1044
707890ef22c203389f61ddfe8025f1b0e2afe819,garp_master_repeat 5,1,0,0.0,1045
707890ef22c203389f61ddfe8025f1b0e2afe819,priority 50,1,0,0.0,1046
707890ef22c203389f61ddfe8025f1b0e2afe819,virtual_router_id 1,1,0,0.0,1047
707890ef22c203389f61ddfe8025f1b0e2afe819,interface %(ha_device_name)s,1,0,0.0,1048
707890ef22c203389f61ddfe8025f1b0e2afe819,state BACKUP,1,0,0.0,1049
707890ef22c203389f61ddfe8025f1b0e2afe819,%(extra_subnet_cidr)s dev %(external_device_name)s scope link,1,0,0.0,1050
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ha_device_name': ha_device_name,",1,0,0.0,1051
707890ef22c203389f61ddfe8025f1b0e2afe819,router.get_floating_ips()[0]['floating_ip_address']),1,0,0.0,1052
707890ef22c203389f61ddfe8025f1b0e2afe819,# If the namespace assertion succeeds,1,0,0.0,1053
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_floating_ip_chains(self, router):",1,0,0.0,1054
707890ef22c203389f61ddfe8025f1b0e2afe819,"'nat', 'POSTROUTING'))",1,0,0.0,1055
707890ef22c203389f61ddfe8025f1b0e2afe819,"'nat', 'snat'))",1,0,0.0,1056
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(router.iptables_manager.is_chain_empty(,1,0,0.0,1057
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_snat_chains(self, router):",1,0,0.0,1058
707890ef22c203389f61ddfe8025f1b0e2afe819,"lambda: not self._metadata_proxy_exists(self.agent.conf, router))",1,0,0.0,1059
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(,1,0,0.0,1060
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(self._namespace_exists(router.ns_name)),1,0,0.0,1061
707890ef22c203389f61ddfe8025f1b0e2afe819,# so there's no need to check that explicitly.,1,0,0.0,1062
707890ef22c203389f61ddfe8025f1b0e2afe819,"# then the devices and iptable rules have also been deleted,",1,0,0.0,1063
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_router_does_not_exist(self, router):",1,0,0.0,1064
707890ef22c203389f61ddfe8025f1b0e2afe819,"'external_device_name': external_device_name,",1,0,0.0,1065
707890ef22c203389f61ddfe8025f1b0e2afe819,return result,1,0,0.0,1066
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _get_rule(self, iptables_manager, table, chain, predicate):",1,0,0.0,1067
707890ef22c203389f61ddfe8025f1b0e2afe819,"'extra_subnet_cidr': extra_subnet_cidr,",1,0,0.0,1068
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ex_port_ipv6': ex_port_ipv6,",1,0,0.0,1069
707890ef22c203389f61ddfe8025f1b0e2afe819,"'int_port_ipv6': int_port_ipv6,",1,0,0.0,1070
707890ef22c203389f61ddfe8025f1b0e2afe819,"'default_gateway_ip': default_gateway_ip,",1,0,0.0,1071
707890ef22c203389f61ddfe8025f1b0e2afe819,"'floating_ip_cidr': floating_ip_cidr,",1,0,0.0,1072
707890ef22c203389f61ddfe8025f1b0e2afe819,"'internal_device_cidr': internal_device_cidr,",1,0,0.0,1073
707890ef22c203389f61ddfe8025f1b0e2afe819,"'internal_device_name': internal_device_name,",1,0,0.0,1074
707890ef22c203389f61ddfe8025f1b0e2afe819,"'external_device_cidr': external_device_cidr,",1,0,0.0,1075
707890ef22c203389f61ddfe8025f1b0e2afe819,"return """"""vrrp_instance VR_1 {",1,0,0.0,1076
707890ef22c203389f61ddfe8025f1b0e2afe819,internal_port['id']),1,0,0.0,1077
707890ef22c203389f61ddfe8025f1b0e2afe819,"def generate_router_info(self, enable_ha, ip_version=4, extra_routes=True,",1,0,0.0,1078
707890ef22c203389f61ddfe8025f1b0e2afe819,"def manage_router(self, agent, router):",1,0,0.0,1079
707890ef22c203389f61ddfe8025f1b0e2afe819,'host': host},1,0,0.0,1080
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ip_address': fixed_address,",1,0,0.0,1081
707890ef22c203389f61ddfe8025f1b0e2afe819,"'floating_ip_address': fip_address,",1,0,0.0,1082
707890ef22c203389f61ddfe8025f1b0e2afe819,host=None):,1,0,0.0,1083
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _add_fip(self, router, fip_address, fixed_address='10.0.0.2',",1,0,0.0,1084
707890ef22c203389f61ddfe8025f1b0e2afe819,agent._router_removed(router_id),1,0,0.0,1085
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _delete_router(self, agent, router_id):",1,0,0.0,1086
707890ef22c203389f61ddfe8025f1b0e2afe819,return agent.router_info[router['id']],1,0,0.0,1087
707890ef22c203389f61ddfe8025f1b0e2afe819,agent._process_added_router(router),1,0,0.0,1088
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.addCleanup(agent._safe_router_removed, router['id'])",1,0,0.0,1089
707890ef22c203389f61ddfe8025f1b0e2afe819,v6_ext_gw_with_sub)),1,0,0.0,1090
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _add_internal_interface_by_subnet(self, router, count=1,",1,0,0.0,1091
707890ef22c203389f61ddfe8025f1b0e2afe819,v6_ext_gw_with_sub=(,1,0,0.0,1092
707890ef22c203389f61ddfe8025f1b0e2afe819,"dual_stack=dual_stack,",1,0,0.0,1093
707890ef22c203389f61ddfe8025f1b0e2afe819,"extra_routes=extra_routes,",1,0,0.0,1094
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_ha=enable_ha,",1,0,0.0,1095
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_floating_ip=enable_fip,",1,0,0.0,1096
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_snat=enable_snat,",1,0,0.0,1097
707890ef22c203389f61ddfe8025f1b0e2afe819,"return l3_test_common.prepare_router_data(ip_version=ip_version,",1,0,0.0,1098
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 6 and not dual_stack:,1,0,0.0,1099
707890ef22c203389f61ddfe8025f1b0e2afe819,"dual_stack=False, v6_ext_gw_with_sub=True):",1,0,0.0,1100
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_fip=True, enable_snat=True,",1,0,0.0,1101
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router[l3_constants.FLOATINGIP_KEY].append(fip),1,0,0.0,1102
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=4,",1,0,0.0,1103
707890ef22c203389f61ddfe8025f1b0e2afe819,external_port['id']),1,0,0.0,1104
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace):,1,0,0.0,1105
707890ef22c203389f61ddfe8025f1b0e2afe819,"def get_expected_keepalive_configuration(self, router):",1,0,0.0,1106
707890ef22c203389f61ddfe8025f1b0e2afe819,return device.link.mtu,1,0,0.0,1107
707890ef22c203389f61ddfe8025f1b0e2afe819,"def get_device_mtu(self, target_device, name_getter, namespace):",1,0,0.0,1108
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip['prefixlen']),1,0,0.0,1109
707890ef22c203389f61ddfe8025f1b0e2afe819,"return common_utils.ip_to_cidr(fixed_ip['ip_address'],",1,0,0.0,1110
707890ef22c203389f61ddfe8025f1b0e2afe819,def _port_first_ip_cidr(port):,1,0,0.0,1111
707890ef22c203389f61ddfe8025f1b0e2afe819,@staticmethod,1,0,0.0,1112
707890ef22c203389f61ddfe8025f1b0e2afe819,"expected_device['mac_address'], namespace)",1,0,0.0,1113
707890ef22c203389f61ddfe8025f1b0e2afe819,"name_getter(expected_device['id']), ip_cidrs,",1,0,0.0,1114
707890ef22c203389f61ddfe8025f1b0e2afe819,return ip_lib.device_exists_with_ips_and_mac(,1,0,0.0,1115
707890ef22c203389f61ddfe8025f1b0e2afe819,"def device_exists_with_ips_and_mac(self, expected_device, name_getter,",1,0,0.0,1116
707890ef22c203389f61ddfe8025f1b0e2afe819,"ipv6_subnet_modes=None,",1,0,0.0,1117
707890ef22c203389f61ddfe8025f1b0e2afe819,return pm.active,1,0,0.0,1118
707890ef22c203389f61ddfe8025f1b0e2afe819,router.ns_name),1,0,0.0,1119
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.router_id,",1,0,0.0,1120
707890ef22c203389f61ddfe8025f1b0e2afe819,"conf,",1,0,0.0,1121
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _metadata_proxy_exists(self, conf, router):",1,0,0.0,1122
707890ef22c203389f61ddfe8025f1b0e2afe819,return ip.netns.exists(namespace),1,0,0.0,1123
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _namespace_exists(self, namespace):",1,0,0.0,1124
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version, ipv6_subnet_modes, interface_id)",1,0,0.0,1125
707890ef22c203389f61ddfe8025f1b0e2afe819,"return l3_test_common.router_append_subnet(router, count,",1,0,0.0,1126
707890ef22c203389f61ddfe8025f1b0e2afe819,interface_id=None):,1,0,0.0,1127
707890ef22c203389f61ddfe8025f1b0e2afe819,# For more details: https://review.openstack.org/#/c/151284/,1,0,0.0,1128
707890ef22c203389f61ddfe8025f1b0e2afe819,"# that the server did not send it, since the interface has been",1,0,0.0,1129
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self.floating_ips_configured(router)),1,0,0.0,1130
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_snat_chains(router),1,0,0.0,1131
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_gw_port['mac_address'],",1,0,0.0,1132
707890ef22c203389f61ddfe8025f1b0e2afe819,"[self._port_first_ip_cidr(external_gw_port)],",1,0,0.0,1133
707890ef22c203389f61ddfe8025f1b0e2afe819,"fip_ns.get_ext_device_name(external_gw_port['id']),",1,0,0.0,1134
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(floating_agent_gw_port),1,0,0.0,1135
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router[l3_constants.FLOATINGIP_AGENT_INTF_KEY]),1,0,0.0,1136
707890ef22c203389f61ddfe8025f1b0e2afe819,# from the router_info,1,0,0.0,1137
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(floating_ips),1,0,0.0,1138
707890ef22c203389f61ddfe8025f1b0e2afe819,# Check that the fg-<port-id> (floatingip_agent_gateway),1,0,0.0,1139
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_dvr_floating_ips(self, router):",1,0,0.0,1140
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(self._namespace_exists(namespace)),1,0,0.0,1141
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_snat_namespace_does_not_exist(self, router):",1,0,0.0,1142
707890ef22c203389f61ddfe8025f1b0e2afe819,"device, ""192.168.0.1"", 0))",1,0,0.0,1143
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertIsNone(router._delete_gateway_device_if_exists(,1,0,0.0,1144
707890ef22c203389f61ddfe8025f1b0e2afe819,# Assert that no exception is thrown for this case,1,0,0.0,1145
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_removal_of_already_deleted_gateway_device(self, router):",1,0,0.0,1146
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device.route.get_gateway().get('gateway')),1,0,0.0,1147
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=namespace),1,0,0.0,1148
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_dvr_snat_gateway(self, router):",1,0,0.0,1149
707890ef22c203389f61ddfe8025f1b0e2afe819,if snat_namespace_should_not_exist:,1,0,0.0,1150
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.agent_mode == 'dvr',1,0,0.0,1151
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_removal_of_already_deleted_gateway_device(router),1,0,0.0,1152
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_dvr_snat_gateway(router),1,0,0.0,1153
707890ef22c203389f61ddfe8025f1b0e2afe819,if gateway_expected_in_snat_namespace:,1,0,0.0,1154
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=fip_ns_name),1,0,0.0,1155
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(fg_port_created_successfully),1,0,0.0,1156
707890ef22c203389f61ddfe8025f1b0e2afe819,# Check fpr-router device has been created,1,0,0.0,1157
707890ef22c203389f61ddfe8025f1b0e2afe819,for line in lines:,1,0,0.0,1158
707890ef22c203389f61ddfe8025f1b0e2afe819,neighbors.show(ip_version=4).split()[0]),1,0,0.0,1159
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_neighbor,",1,0,0.0,1160
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info['_interfaces'][0]['id']),1,0,0.0,1161
707890ef22c203389f61ddfe8025f1b0e2afe819,'device_owner': DEVICE_OWNER_COMPUTE,1,0,0.0,1162
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'fa:3e:aa:bb:cc:dd',",1,0,0.0,1163
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': expected_neighbor}],",1,0,0.0,1164
707890ef22c203389f61ddfe8025f1b0e2afe819,# cache is properly populated.,1,0,0.0,1165
707890ef22c203389f61ddfe8025f1b0e2afe819,"# existing ports on the uplinked subnet, the ARP",1,0,0.0,1166
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_add_internal_network_set_arp_cache(self):,1,0,0.0,1167
707890ef22c203389f61ddfe8025f1b0e2afe819,return info['priority'],1,0,0.0,1168
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _get_fixed_ip_rule_priority(self, namespace, fip):",1,0,0.0,1169
707890ef22c203389f61ddfe8025f1b0e2afe819,"device_name, namespace=fip_ns_name)",1,0,0.0,1170
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertNotEqual(fip_rule_prio_1, fip_rule_prio_2)",1,0,0.0,1171
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.manage_router(restarted_agent, router_info)",1,0,0.0,1172
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_ns, floating_ips[0]['fixed_ip_address'])",1,0,0.0,1173
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_add_fips_on_restarted_agent(self):,1,0,0.0,1174
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_dvr_snat_gateway(router1),1,0,0.0,1175
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_rem_fips_on_restarted_agent(self):,1,0,0.0,1176
707890ef22c203389f61ddfe8025f1b0e2afe819,"device_name, namespace=router.ns_name))",1,0,0.0,1177
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ip_lib.device_exists(,1,0,0.0,1178
707890ef22c203389f61ddfe8025f1b0e2afe819,# Check rfp-<router-id> is created correctly,1,0,0.0,1179
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(fpr_router_device_created_successfully),1,0,0.0,1180
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.conf.agent_mode == 'dvr_snat',1,0,0.0,1181
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_dvr_gateway(self, router):",1,0,0.0,1182
707890ef22c203389f61ddfe8025f1b0e2afe819,# we force a test failure with message,1,0,0.0,1183
707890ef22c203389f61ddfe8025f1b0e2afe819,# dependent on the agent_type.,1,0,0.0,1184
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': l3_constants.DEVICE_OWNER_AGENT_GW,",1,0,0.0,1185
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': external_gw_port['network_id'],",1,0,0.0,1186
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': fixed_ip['subnet_id']}],",1,0,0.0,1187
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': float_subnet['gateway_ip'],",1,0,0.0,1188
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'cidr': float_subnet['cidr'],",1,0,0.0,1189
707890ef22c203389f61ddfe8025f1b0e2afe819,{'subnets': [,1,0,0.0,1190
707890ef22c203389f61ddfe8025f1b0e2afe819,if not fip_gw_port_list and external_gw_port:,1,0,0.0,1191
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_constants.FLOATINGIP_AGENT_INTF_KEY, [])",1,0,0.0,1192
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _add_fip_agent_gw_port_info_to_router(self, router, external_gw_port):",1,0,0.0,1193
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_fip_agent_gw_port_info_to_router(router, external_gw_port)",1,0,0.0,1194
707890ef22c203389f61ddfe8025f1b0e2afe819,# the snat_port info and fip_agent_gw_port_info irrespective of,1,0,0.0,1195
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': self.agent.conf.host,",1,0,0.0,1196
707890ef22c203389f61ddfe8025f1b0e2afe819,# FIP has a dependency on external gateway. So we need to create,1,0,0.0,1197
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_snat_port_info_to_router(router, internal_ports)",1,0,0.0,1198
707890ef22c203389f61ddfe8025f1b0e2afe819,**kwargs),1,0,0.0,1199
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_floating_ip=True,",1,0,0.0,1200
707890ef22c203389f61ddfe8025f1b0e2afe819,if not agent:,1,0,0.0,1201
707890ef22c203389f61ddfe8025f1b0e2afe819,**kwargs):,1,0,0.0,1202
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent=None,",1,0,0.0,1203
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_snat=False,",1,0,0.0,1204
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_ha=False,",1,0,0.0,1205
707890ef22c203389f61ddfe8025f1b0e2afe819,"def generate_dvr_router_info(self,",1,0,0.0,1206
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'fa:16:3e:80:8d:89',",1,0,0.0,1207
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",1,0,0.0,1208
707890ef22c203389f61ddfe8025f1b0e2afe819,),1,0,0.0,1209
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_dvr_external_device(self, router):",1,0,0.0,1210
707890ef22c203389f61ddfe8025f1b0e2afe819,% (str(snat_ns_name)),1,0,0.0,1211
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._namespace_exists(snat_ns_name),",1,0,0.0,1212
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(,1,0,0.0,1213
707890ef22c203389f61ddfe8025f1b0e2afe819,elif self.agent.conf.agent_mode == 'dvr':,1,0,0.0,1214
707890ef22c203389f61ddfe8025f1b0e2afe819,# should not be present at all:,1,0,0.0,1215
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_ns_name),1,0,0.0,1216
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_external_device_name,",1,0,0.0,1217
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port,",1,0,0.0,1218
707890ef22c203389f61ddfe8025f1b0e2afe819,if self.agent.conf.agent_mode == 'dvr_snat':,1,0,0.0,1219
707890ef22c203389f61ddfe8025f1b0e2afe819,# snat_ns_name namespace,1,0,0.0,1220
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': snat_ip,",1,0,0.0,1221
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': fip_gw_port_ip,",1,0,0.0,1222
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': l3_constants.DEVICE_OWNER_ROUTER_SNAT,",1,0,0.0,1223
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': port['network_id'],",1,0,0.0,1224
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': snat_subnet['gateway_ip'],",1,0,0.0,1225
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'cidr': snat_subnet['cidr'],",1,0,0.0,1226
707890ef22c203389f61ddfe8025f1b0e2afe819,# in the list of snat ports,1,0,0.0,1227
707890ef22c203389f61ddfe8025f1b0e2afe819,if not snat_port_list and internal_ports:,1,0,0.0,1228
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _add_snat_port_info_to_router(self, router, internal_ports):",1,0,0.0,1229
707890ef22c203389f61ddfe8025f1b0e2afe819,],1,0,0.0,1230
707890ef22c203389f61ddfe8025f1b0e2afe819,'device_id': _uuid()},1,0,0.0,1231
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': prefixlen}],",1,0,0.0,1232
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_rfp_fpr_mtu(self, router, expected_mtu=1500):",1,0,0.0,1233
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.router_id, router.fip_ns.get_rtr_ext_device_name,",1,0,0.0,1234
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_mtu, dev_mtu)",1,0,0.0,1235
707890ef22c203389f61ddfe8025f1b0e2afe819,ex_gw_port_cidr),1,0,0.0,1236
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_ip_addresses_in_dvr_ha_snat_namespace(router1),1,0,0.0,1237
707890ef22c203389f61ddfe8025f1b0e2afe819,self._setup_dvr_ha_bridges(),1,0,0.0,1238
707890ef22c203389f61ddfe8025f1b0e2afe819,self._setup_dvr_ha_agents(),1,0,0.0,1239
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_ha_router_failover(self):,1,0,0.0,1240
707890ef22c203389f61ddfe8025f1b0e2afe819,ex_gw_port_name),1,0,0.0,1241
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_port_name),1,0,0.0,1242
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_no_ip_addresses_on_interface(namespace,",1,0,0.0,1243
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_no_ip_addresses_in_dvr_ha_snat_namespace(self, router):",1,0,0.0,1244
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_port_cidr),1,0,0.0,1245
707890ef22c203389f61ddfe8025f1b0e2afe819,"snat_port_name,",1,0,0.0,1246
707890ef22c203389f61ddfe8025f1b0e2afe819,"ex_gw_port_name,",1,0,0.0,1247
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_ip_addresses_in_dvr_ha_snat_namespace(router2),1,0,0.0,1248
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_ip_address_on_interface(namespace,",1,0,0.0,1249
707890ef22c203389f61ddfe8025f1b0e2afe819,snat_port['id']),1,0,0.0,1250
707890ef22c203389f61ddfe8025f1b0e2afe819,ex_gw_port['id']),1,0,0.0,1251
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_ip_addresses_in_dvr_ha_snat_namespace(self, router):",1,0,0.0,1252
707890ef22c203389f61ddfe8025f1b0e2afe819,"mocked_r_ns_name,",1,0,0.0,1253
707890ef22c203389f61ddfe8025f1b0e2afe819,"(r_info,",1,0,0.0,1254
707890ef22c203389f61ddfe8025f1b0e2afe819,'get_snat_ns_name').start(),1,0,0.0,1255
707890ef22c203389f61ddfe8025f1b0e2afe819,'_get_ns_name').start(),1,0,0.0,1256
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _create_dvr_ha_router(self, agent):",1,0,0.0,1257
707890ef22c203389f61ddfe8025f1b0e2afe819,def _setup_dvr_ha_bridges(self):,1,0,0.0,1258
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_no_ip_addresses_in_dvr_ha_snat_namespace(router2),1,0,0.0,1259
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_no_ip_addresses_in_dvr_ha_snat_namespace(router1),1,0,0.0,1260
707890ef22c203389f61ddfe8025f1b0e2afe819,"return r_info, mocked_r_ns_name, mocked_r_snat_ns_name",1,0,0.0,1261
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.create_dvr_fip_interfaces(ex_gw_port),1,0,0.0,1262
707890ef22c203389f61ddfe8025f1b0e2afe819,) as fip_gw_port:,1,0,0.0,1263
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(ri, 'get_floating_agent_gw_interface'",1,0,0.0,1264
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(ri, 'get_floating_ips') as fips, \",1,0,0.0,1265
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(2, ri.fip_ns.create_rtr_2_fip_link.call_count)",1,0,0.0,1266
707890ef22c203389f61ddfe8025f1b0e2afe819,# Calling create_dvr_fip_interfaces again to make sure,1,0,0.0,1267
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(0, ri.dist_fip_count)",1,0,0.0,1268
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(1, ri.dist_fip_count)",1,0,0.0,1269
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(fips.called),1,0,0.0,1270
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.create_dvr_fip_interfaces(ext_gw_port),1,0,0.0,1271
707890ef22c203389f61ddfe8025f1b0e2afe819,"'create') as create_fip, \",1,0,0.0,1272
707890ef22c203389f61ddfe8025f1b0e2afe819,'get_floating_agent_gw_interface') as fip_gw_port:,0,0,0.0,1273
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_fip_namespace_deleted(self, ext_gateway_port):",1,0,0.0,1274
707890ef22c203389f61ddfe8025f1b0e2afe819,with mock.patch.object(,0,0,0.0,1275
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(1, ri.fip_ns.create_rtr_2_fip_link.call_count)",0,0,0.0,1276
707890ef22c203389f61ddfe8025f1b0e2afe819,# Calling create_dvr_external_gateway_interfaces again to make,0,0,0.0,1277
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ri.rtr_fip_connect),0,0,0.0,1278
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.connect_rtr_2_fip(),0,0,0.0,1279
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.create_dvr_external_gateway_on_agent(ext_gw_port),0,0,0.0,1280
707890ef22c203389f61ddfe8025f1b0e2afe819,"'create') as create_fip, \",0,0,0.0,1281
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.create_dvr_external_gateway_on_agent(ex_gw_port),0,0,0.0,1282
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.context, ext_net_id)",1,0,0.0,1283
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent.fipnamespace_delete_on_ext_net(,1,0,0.0,1284
707890ef22c203389f61ddfe8025f1b0e2afe819,def _setup_dvr_ha_agents(self):,1,0,0.0,1285
707890ef22c203389f61ddfe8025f1b0e2afe819,r_info['id']),1,0,0.0,1286
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.router_id, router.fip_ns.get_int_device_name,",1,0,0.0,1287
707890ef22c203389f61ddfe8025f1b0e2afe819,This test validates the condition where floatingip private,1,0,0.0,1288
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Function returns the internal and external device status.""""""",1,0,0.0,1289
707890ef22c203389f61ddfe8025f1b0e2afe819,"self, router, internal_dev_name=None):",1,0,0.0,1290
707890ef22c203389f61ddfe8025f1b0e2afe819,def _get_dvr_snat_namespace_device_status(,1,0,0.0,1291
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self._namespace_exists(namespace)),1,0,0.0,1292
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_snat_namespace_exists(self, router):",1,0,0.0,1293
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_agent_gw_port[0]),1,0,0.0,1294
707890ef22c203389f61ddfe8025f1b0e2afe819,# host binding.,1,0,0.0,1295
707890ef22c203389f61ddfe8025f1b0e2afe819,"# that the server did not create the port, since there was no valid",1,0,0.0,1296
707890ef22c203389f61ddfe8025f1b0e2afe819,"# Now let us not pass the FLOATINGIP_AGENT_INTF_KEY, to emulate",1,0,0.0,1297
707890ef22c203389f61ddfe8025f1b0e2afe819,binding is done later after floatingip association.,1,0,0.0,1298
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test to validate the floatingip migration or latebinding.",1,0,0.0,1299
707890ef22c203389f61ddfe8025f1b0e2afe819,"internal_dev_name, namespace=snat_ns)",1,0,0.0,1300
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_fip_late_binding(self):,1,0,0.0,1301
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_snat_namespace_does_not_exist(router1),1,0,0.0,1302
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(self._namespace_exists(fip_ns)),1,0,0.0,1303
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self._namespace_exists(router1.ns_name)),1,0,0.0,1304
707890ef22c203389f61ddfe8025f1b0e2afe819,# This is also like there is no current binding.,1,0,0.0,1305
707890ef22c203389f61ddfe8025f1b0e2afe819,# should not create the floatingip namespace on the given agent.,1,0,0.0,1306
707890ef22c203389f61ddfe8025f1b0e2afe819,# In this case the floatingip binding is different and so it,1,0,0.0,1307
707890ef22c203389f61ddfe8025f1b0e2afe819,binding will not be there.,1,0,0.0,1308
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_fip_agent_mismatch(self):,1,0,0.0,1309
707890ef22c203389f61ddfe8025f1b0e2afe819,router.fip_ns.get_name()),1,0,0.0,1310
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_device_name, namespace=snat_ns)",1,0,0.0,1311
707890ef22c203389f61ddfe8025f1b0e2afe819,"return qg_device_created_successfully, sg_device_created_successfully",1,0,0.0,1312
707890ef22c203389f61ddfe8025f1b0e2afe819,agent=agent),1,0,0.0,1313
707890ef22c203389f61ddfe8025f1b0e2afe819,"# Now let us not pass INTERFACE_KEY, to emulate",1,0,0.0,1314
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_snat=True,",1,0,0.0,1315
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _mocked_dvr_ha_router(self, agent):",1,0,0.0,1316
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(sg_device),1,0,0.0,1317
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_updated, internal_dev_name=internal_device_name)",1,0,0.0,1318
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_snat_namespace_exists(router_updated),1,0,0.0,1319
707890ef22c203389f61ddfe8025f1b0e2afe819,self.agent._process_updated_router(router1.router),1,0,0.0,1320
707890ef22c203389f61ddfe8025f1b0e2afe819,# removed.,1,0,0.0,1321
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_subnet(router, count=len(ipv6_subnet_modes),",1,0,0.0,1322
707890ef22c203389f61ddfe8025f1b0e2afe819,"# Now let us not pass the SNAT_ROUTER_INTF_KEY, to emulate",1,0,0.0,1323
707890ef22c203389f61ddfe8025f1b0e2afe819,# the interface has been removed.,1,0,0.0,1324
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(router1.snat_ports, snat_internal_port)",1,0,0.0,1325
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_snat_namespace_with_interface_remove(self):,1,0,0.0,1326
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(sg_device),1,0,0.0,1327
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(qg_device),1,0,0.0,1328
707890ef22c203389f61ddfe8025f1b0e2afe819,"router1, internal_dev_name=internal_device_name)",1,0,0.0,1329
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_snat_namespace_exists(router1),1,0,0.0,1330
707890ef22c203389f61ddfe8025f1b0e2afe819,csnat_internal_port[0]['id']),1,0,0.0,1331
707890ef22c203389f61ddfe8025f1b0e2afe819,# Now save the internal device name to verify later,1,0,0.0,1332
707890ef22c203389f61ddfe8025f1b0e2afe819,router1.router[l3_constants.SNAT_ROUTER_INTF_KEY]),1,0,0.0,1333
707890ef22c203389f61ddfe8025f1b0e2afe819,and internal devices. It also validates if the internal,1,0,0.0,1334
707890ef22c203389f61ddfe8025f1b0e2afe819,This test validates the snat namespace for all the external,1,0,0.0,1335
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test to validate the snat namespace with interface remove.",1,0,0.0,1336
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_fip_namespace_deleted(ext_gateway_port),1,0,0.0,1337
707890ef22c203389f61ddfe8025f1b0e2afe819,"router, ip_versions, snat_ns_name)",1,0,0.0,1338
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_onlink_subnet_routes(,1,0,0.0,1339
707890ef22c203389f61ddfe8025f1b0e2afe819,"'qrouter-' + router_info['id'],",1,0,0.0,1340
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _check_lla_status(router, expected):",1,0,0.0,1341
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router1.radvd.enabled),1,0,0.0,1342
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ha_router_ipv6_radvd_status(self):,1,0,0.0,1343
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router2.ha_state == 'backup'),1,0,0.0,1344
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: router1.ha_state == 'master'),1,0,0.0,1345
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.NESTED_NAMESPACE_SEPARATOR, self.failover_agent.host)",1,0,0.0,1346
707890ef22c203389f61ddfe8025f1b0e2afe819,"namespaces.RouterNamespace._get_ns_name(router_info_2['id']),",1,0,0.0,1347
707890ef22c203389f61ddfe8025f1b0e2afe819,mac='22:22:22:22:22:22')),1,0,0.0,1348
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_test_common.get_ha_interface(ip='169.254.192.2',",1,0,0.0,1349
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.NESTED_NAMESPACE_SEPARATOR, self.agent.host)",1,0,0.0,1350
707890ef22c203389f61ddfe8025f1b0e2afe819,"namespaces.RouterNamespace, '_get_ns_name').start()",1,0,0.0,1351
707890ef22c203389f61ddfe8025f1b0e2afe819,"device['mac_address'], router.ns_name)",1,0,0.0,1352
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ha_router_failover(self):,1,0,0.0,1353
707890ef22c203389f61ddfe8025f1b0e2afe819,br_int_2.add_port(veth2.name),1,0,0.0,1354
707890ef22c203389f61ddfe8025f1b0e2afe819,br_int_1.add_port(veth1.name),1,0,0.0,1355
707890ef22c203389f61ddfe8025f1b0e2afe819,"'agent2', self.conf)",1,0,0.0,1356
707890ef22c203389f61ddfe8025f1b0e2afe819,"super(L3HATestFramework, self).setUp()",1,0,0.0,1357
707890ef22c203389f61ddfe8025f1b0e2afe819,class L3HATestFramework(L3AgentTestFramework):,1,0,0.0,1358
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.external_gateway_removed(port, interface_name)",1,0,0.0,1359
707890ef22c203389f61ddfe8025f1b0e2afe819,# The purpose of the test is to simply make sure no exception is raised,1,0,0.0,1360
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_delete_external_gateway_on_standby_router(self):,1,0,0.0,1361
707890ef22c203389f61ddfe8025f1b0e2afe819,"dst_fip, protocol_port,",1,0,0.0,1362
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_internal_device_name(device['id']), [lladdr],",1,0,0.0,1363
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected, exists)",1,0,0.0,1364
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_constants.PROTO_NAME_TCP, dst_machine.namespace)",1,0,0.0,1365
707890ef22c203389f61ddfe8025f1b0e2afe819,"verify_ip_in_keepalived_config(router, internal_iface)",1,0,0.0,1366
707890ef22c203389f61ddfe8025f1b0e2afe819,"def __call__(self, req):",1,0,0.0,1367
707890ef22c203389f61ddfe8025f1b0e2afe819,@webob.dec.wsgify(),1,0,0.0,1368
707890ef22c203389f61ddfe8025f1b0e2afe819,"def __init__(self, status):",1,0,0.0,1369
707890ef22c203389f61ddfe8025f1b0e2afe819,class MetadataFakeProxyHandler(object):,1,0,0.0,1370
707890ef22c203389f61ddfe8025f1b0e2afe819,L3AgentTestFramework):,1,0,0.0,1371
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(1, len(internal_iface['fixed_ips']))",1,0,0.0,1372
707890ef22c203389f61ddfe8025f1b0e2afe819,"interfaces[0].update({'fixed_ips': fixed_ips, 'subnets': subnets})",1,0,0.0,1373
707890ef22c203389f61ddfe8025f1b0e2afe819,subnets.append(interfaces[0]['subnets'][0]),1,0,0.0,1374
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ips.append(interfaces[0]['fixed_ips'][0]),1,0,0.0,1375
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_constants.INTERFACE_KEY, []))",1,0,0.0,1376
707890ef22c203389f61ddfe8025f1b0e2afe819,# Verify that keepalived config is properly updated.,1,0,0.0,1377
707890ef22c203389f61ddfe8025f1b0e2afe819,"_check_lla_status(router1, True)",1,0,0.0,1378
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(2, len(internal_iface['fixed_ips']))",1,0,0.0,1379
707890ef22c203389f61ddfe8025f1b0e2afe819,interface_id=interface_id),1,0,0.0,1380
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=6, ipv6_subnet_modes=[slaac_mode],",1,0,0.0,1381
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_internal_interface_by_subnet(router.router, count=1,",1,0,0.0,1382
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(ip_addr, config)",1,0,0.0,1383
707890ef22c203389f61ddfe8025f1b0e2afe819,for ip_addr in ip_cidrs:,1,0,0.0,1384
707890ef22c203389f61ddfe8025f1b0e2afe819,"def verify_ip_in_keepalived_config(router, iface):",1,0,0.0,1385
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ha_router_process_ipv6_subnets_to_existing_port(self):,1,0,0.0,1386
707890ef22c203389f61ddfe8025f1b0e2afe819,"_check_lla_status(router1, False)",1,0,0.0,1387
707890ef22c203389f61ddfe8025f1b0e2afe819,"utils.wait_until_true(lambda: not router1.radvd.enabled, timeout=10)",1,0,0.0,1388
707890ef22c203389f61ddfe8025f1b0e2afe819,"src_machine.namespace, dst_machine.namespace,",1,0,0.0,1389
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_fip(router, dst_fip, fixed_address=dst_machine.ip)",1,0,0.0,1390
707890ef22c203389f61ddfe8025f1b0e2afe819,class MetadataL3AgentTestCase(L3AgentTestFramework):,1,0,0.0,1391
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_router_does_not_exist(router),1,0,0.0,1392
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._gateway_check(self.agent.conf.ipv6_gateway,",1,0,0.0,1393
707890ef22c203389f61ddfe8025f1b0e2afe819,if not v6_ext_gw_with_sub:,1,0,0.0,1394
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._gateway_check(subnet['gateway_ip'], external_device)",1,0,0.0,1395
707890ef22c203389f61ddfe8025f1b0e2afe819,for subnet in external_port['subnets']:,1,0,0.0,1396
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace=router.ns_name),1,0,0.0,1397
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_gateway(self, router, v6_ext_gw_with_sub=True):",1,0,0.0,1398
707890ef22c203389f61ddfe8025f1b0e2afe819,router.ns_name)),1,0,0.0,1399
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port, router.get_external_device_name,",1,0,0.0,1400
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_external_device(self, router):",1,0,0.0,1401
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(router.keepalived_manager.get_process().active),1,0,0.0,1402
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_interfaces_deleted_from_ovs(),1,0,0.0,1403
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _gateway_check(self, gateway_ip, external_device):",1,0,0.0,1404
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(router.keepalived_manager.get_process().active),1,0,0.0,1405
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_ha_device(router),1,0,0.0,1406
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual('2', ra_state)",1,0,0.0,1407
707890ef22c203389f61ddfe8025f1b0e2afe819,'net.ipv6.conf.%s.accept_ra' % external_device_name]),1,0,0.0,1408
707890ef22c203389f61ddfe8025f1b0e2afe819,if not self.agent.conf.ipv6_gateway:,1,0,0.0,1409
707890ef22c203389f61ddfe8025f1b0e2afe819,if router.use_ipv6 and not v6_ext_gw_with_sub:,1,0,0.0,1410
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_metadata_chains(router),1,0,0.0,1411
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_onlink_subnet_routes(router, ip_versions)",1,0,0.0,1412
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_extra_routes(router),1,0,0.0,1413
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_floating_ip_chains(router),1,0,0.0,1414
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device),1,0,0.0,1415
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_version=ip_vers).get('gateway')),1,0,0.0,1416
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip)).machines,1,0,0.0,1417
707890ef22c203389f61ddfe8025f1b0e2afe819,self._get_addresses_on_device(,1,0,0.0,1418
707890ef22c203389f61ddfe8025f1b0e2afe819,"net_helpers.increment_ip_cidr(router_ip_cidr),",1,0,0.0,1419
707890ef22c203389f61ddfe8025f1b0e2afe819,"br_int,",1,0,0.0,1420
707890ef22c203389f61ddfe8025f1b0e2afe819,machine_fixtures.PeerMachines(,1,0,0.0,1421
707890ef22c203389f61ddfe8025f1b0e2afe819,go through the router.,1,0,0.0,1422
707890ef22c203389f61ddfe8025f1b0e2afe819,In other words it confirms that return packets surely,1,0,0.0,1423
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip on the same subnet of the source fixed_ip.,1,0,0.0,1424
707890ef22c203389f61ddfe8025f1b0e2afe819,'''Test connection to floatingip which is associated with,1,0,0.0,1425
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_fip_connection_from_same_subnet(self):,1,0,0.0,1426
707890ef22c203389f61ddfe8025f1b0e2afe819,router1.get_ha_device_name())),1,0,0.0,1427
707890ef22c203389f61ddfe8025f1b0e2afe819,"router1.ns_name,",1,0,0.0,1428
707890ef22c203389f61ddfe8025f1b0e2afe819,"router1._get_primary_vip(),",1,0,0.0,1429
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_gateway, existing_gateway)",1,0,0.0,1430
707890ef22c203389f61ddfe8025f1b0e2afe819,utils.wait_until_true(lambda: self.floating_ips_configured(router1)),1,0,0.0,1431
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.manage_router(restarted_agent, router1.router)",1,0,0.0,1432
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.host, self.agent.conf)",1,0,0.0,1433
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._add_fip(router1, '192.168.111.12')",1,0,0.0,1434
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_ha_router_conf_on_restarted_agent(self):,1,0,0.0,1435
707890ef22c203389f61ddfe8025f1b0e2afe819,"ha_router_dev_name_getter, router.ns_name))",1,0,0.0,1436
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.router[l3_constants.HA_INTERFACE_KEY],",1,0,0.0,1437
707890ef22c203389f61ddfe8025f1b0e2afe819,return router.get_ha_device_name(),1,0,0.0,1438
707890ef22c203389f61ddfe8025f1b0e2afe819,def ha_router_dev_name_getter(not_used):,1,0,0.0,1439
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _assert_ha_device(self, router):",1,0,0.0,1440
707890ef22c203389f61ddfe8025f1b0e2afe819,return webob.Response(status=self.status),1,0,0.0,1441
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _create_metadata_fake_server(self, status):",1,0,0.0,1442
707890ef22c203389f61ddfe8025f1b0e2afe819,router.router_id),1,0,0.0,1443
707890ef22c203389f61ddfe8025f1b0e2afe819,"return router, fip_ns",1,0,0.0,1444
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent_mode, **dvr_router1_kwargs))",1,0,0.0,1445
707890ef22c203389f61ddfe8025f1b0e2afe819,self._helper_create_dvr_router_fips_for_ext_network(,1,0,0.0,1446
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_mac': 'ca:fe:de:ab:cd:ef'},1,0,0.0,1447
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '19.4.4.1',",1,0,0.0,1448
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_cidr': '19.4.4.0/24',",1,0,0.0,1449
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_fips_for_multiple_ext_networks(self):,1,0,0.0,1450
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_snat_namespace_does_not_exist(router),1,0,0.0,1451
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_dvr_floating_ips(router),1,0,0.0,1452
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self._namespace_exists(fip_ns)),1,0,0.0,1453
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _validate_fips_for_external_network(self, router, fip_ns):",1,0,0.0,1454
707890ef22c203389f61ddfe8025f1b0e2afe819,router_info['_floatingips'][0]['floating_network_id']),1,0,0.0,1455
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_cidr': '19.4.5.0/24',",1,0,0.0,1456
707890ef22c203389f61ddfe8025f1b0e2afe819,"self, agent_mode, **dvr_router_kwargs):",1,0,0.0,1457
707890ef22c203389f61ddfe8025f1b0e2afe819,def _helper_create_dvr_router_fips_for_ext_network(,1,0,0.0,1458
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._dvr_router_lifecycle(enable_ha=True, enable_snat=True)",1,0,0.0,1459
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_lifecycle_ha_with_snat_with_fips(self):,1,0,0.0,1460
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._dvr_router_lifecycle(enable_ha=False, enable_snat=True)",1,0,0.0,1461
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_lifecycle_without_ha_with_snat_with_fips(self):,1,0,0.0,1462
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._dvr_router_lifecycle(enable_ha=False, enable_snat=False)",1,0,0.0,1463
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_dvr_router_lifecycle_without_ha_without_snat_with_fips(self):,1,0,0.0,1464
707890ef22c203389f61ddfe8025f1b0e2afe819,class TestDvrRouter(L3AgentTestFramework):,1,0,0.0,1465
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.conf.set_override('metadata_proxy_group', '65534')",1,0,0.0,1466
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._validate_fips_for_external_network(router1, fip1_ns)",1,0,0.0,1467
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '19.4.5.1',",1,0,0.0,1468
707890ef22c203389f61ddfe8025f1b0e2afe819,why we use its gid.,1,0,0.0,1469
707890ef22c203389f61ddfe8025f1b0e2afe819,# gateway_port information before the l3_agent will create it.,1,0,0.0,1470
707890ef22c203389f61ddfe8025f1b0e2afe819,if enable_snat:,1,0,0.0,1471
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_rfp_fpr_mtu(router, custom_mtu)",1,0,0.0,1472
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_dvr_gateway(router),1,0,0.0,1473
707890ef22c203389f61ddfe8025f1b0e2afe819,self._assert_dvr_external_device(router),1,0,0.0,1474
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._assert_no_ip_addresses_on_interface(router.ha_namespace,",1,0,0.0,1475
707890ef22c203389f61ddfe8025f1b0e2afe819,"# attach interfaces, etc...)",1,0,0.0,1476
707890ef22c203389f61ddfe8025f1b0e2afe819,# With all that set we can now ask the l3_agent to,1,0,0.0,1477
707890ef22c203389f61ddfe8025f1b0e2afe819,# We also need to mock the get_external_network_id method to,1,0,0.0,1478
707890ef22c203389f61ddfe8025f1b0e2afe819,'gw_port'],1,0,0.0,1479
707890ef22c203389f61ddfe8025f1b0e2afe819,# router_info['gw_port'],1,0,0.0,1480
707890ef22c203389f61ddfe8025f1b0e2afe819,# We need to mock the get_agent_gateway_port return value,1,0,0.0,1481
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_mac': 'ca:fe:de:ab:cd:fe'},1,0,0.0,1482
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_ha, enable_snat)",1,0,0.0,1483
707890ef22c203389f61ddfe8025f1b0e2afe819,"# The value of agent_mode can be dvr, dvr_snat, or legacy.",1,0,0.0,1484
707890ef22c203389f61ddfe8025f1b0e2afe819,to  set the  agent_mode.,1,0,0.0,1485
707890ef22c203389f61ddfe8025f1b0e2afe819,:param enable_snat:  the value of enable_snat is used,1,0,0.0,1486
707890ef22c203389f61ddfe8025f1b0e2afe819,:param enable_ha: sets the ha value for the router.,1,0,0.0,1487
707890ef22c203389f61ddfe8025f1b0e2afe819,dual_stack=False):,1,0,0.0,1488
707890ef22c203389f61ddfe8025f1b0e2afe819,"custom_mtu=2000,",1,0,0.0,1489
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _dvr_router_lifecycle(self, enable_ha=False, enable_snat=False,",1,0,0.0,1490
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._validate_fips_for_external_network(router2, fip2_ns)",1,0,0.0,1491
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent_mode, **dvr_router2_kwargs))",1,0,0.0,1492
707890ef22c203389f61ddfe8025f1b0e2afe819,"super(UnprivilegedUserGroupMetadataL3AgentTestCase, self).setUp()",1,0,0.0,1493
707890ef22c203389f61ddfe8025f1b0e2afe819,"Its group has gid=65534 and is commonly named 'nobody' or 'nogroup', that's",1,0,0.0,1494
707890ef22c203389f61ddfe8025f1b0e2afe819,self.addCleanup(server.stop),1,0,0.0,1495
707890ef22c203389f61ddfe8025f1b0e2afe819,while i <= CONNECTION_REFUSED_TIMEOUT:,1,0,0.0,1496
707890ef22c203389f61ddfe8025f1b0e2afe819,if i > CONNECTION_REFUSED_TIMEOUT:,1,0,0.0,1497
707890ef22c203389f61ddfe8025f1b0e2afe819,'on %s before timeout' % url),1,0,0.0,1498
707890ef22c203389f61ddfe8025f1b0e2afe819,self.fail('metadata proxy unreachable ',1,0,0.0,1499
707890ef22c203389f61ddfe8025f1b0e2afe819,else:,1,0,0.0,1500
707890ef22c203389f61ddfe8025f1b0e2afe819,i += METADATA_REQUEST_SLEEP,1,0,0.0,1501
707890ef22c203389f61ddfe8025f1b0e2afe819,time.sleep(METADATA_REQUEST_SLEEP),1,0,0.0,1502
707890ef22c203389f61ddfe8025f1b0e2afe819,if 'Connection refused' in str(e):,1,0,0.0,1503
707890ef22c203389f61ddfe8025f1b0e2afe819,except RuntimeError as e:,1,0,0.0,1504
707890ef22c203389f61ddfe8025f1b0e2afe819,break,1,0,0.0,1505
707890ef22c203389f61ddfe8025f1b0e2afe819,try:,1,0,0.0,1506
707890ef22c203389f61ddfe8025f1b0e2afe819,'port': dhcp.METADATA_PORT},1,0,0.0,1507
707890ef22c203389f61ddfe8025f1b0e2afe819,return raw_headers.splitlines()[0],1,0,0.0,1508
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _query_metadata_proxy(self, machine):",1,0,0.0,1509
707890ef22c203389f61ddfe8025f1b0e2afe819,"workers=0, backlog=4096, mode=self.SOCKET_MODE)",1,0,0.0,1510
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.conf.metadata_proxy_socket,",1,0,0.0,1511
707890ef22c203389f61ddfe8025f1b0e2afe819,"server.start(MetadataFakeProxyHandler(status),",1,0,0.0,1512
707890ef22c203389f61ddfe8025f1b0e2afe819,"os.path.dirname(self.agent.conf.metadata_proxy_socket), 0o555))",1,0,0.0,1513
707890ef22c203389f61ddfe8025f1b0e2afe819,helpers.RecursivePermDirFixture(,1,0,0.0,1514
707890ef22c203389f61ddfe8025f1b0e2afe819,self.useFixture(,1,0,0.0,1515
707890ef22c203389f61ddfe8025f1b0e2afe819,# users,1,0,0.0,1516
707890ef22c203389f61ddfe8025f1b0e2afe819,# permissions but metadata_proxy_socket folder must be readable by all,1,0,0.0,1517
707890ef22c203389f61ddfe8025f1b0e2afe819,# NOTE(cbrandily): TempDir fixture creates a folder with 0o700,1,0,0.0,1518
707890ef22c203389f61ddfe8025f1b0e2afe819,self.fail('Timed out waiting metadata proxy to become available'),1,0,0.0,1519
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_access_to_metadata_proxy(self):,1,0,0.0,1520
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test metadata proxy with least privileged user/group.",1,0,0.0,1521
707890ef22c203389f61ddfe8025f1b0e2afe819,# Query metadata proxy,1,0,0.0,1522
707890ef22c203389f61ddfe8025f1b0e2afe819,class UnprivilegedUserGroupMetadataL3AgentTestCase(MetadataL3AgentTestCase):,1,0,0.0,1523
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.conf.set_override('metadata_proxy_watch_log', False)",1,0,0.0,1524
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.agent.conf.set_override('metadata_proxy_user', '65534')",1,0,0.0,1525
707890ef22c203389f61ddfe8025f1b0e2afe819,"super(UnprivilegedUserMetadataL3AgentTestCase, self).setUp()",1,0,0.0,1526
707890ef22c203389f61ddfe8025f1b0e2afe819,"not always, that's why we use its uid.",1,0,0.0,1527
707890ef22c203389f61ddfe8025f1b0e2afe819,The least privileged user has uid=65534 and is commonly named 'nobody' but,1,0,0.0,1528
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test metadata proxy with least privileged user.",1,0,0.0,1529
707890ef22c203389f61ddfe8025f1b0e2afe819,class UnprivilegedUserMetadataL3AgentTestCase(MetadataL3AgentTestCase):,1,0,0.0,1530
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertIn(str(webob.exc.HTTPOk.code), firstline.split())",1,0,0.0,1531
707890ef22c203389f61ddfe8025f1b0e2afe819,# Check status code,1,0,0.0,1532
707890ef22c203389f61ddfe8025f1b0e2afe819,router_ip_cidr.partition('/')[0])),1,0,0.0,1533
707890ef22c203389f61ddfe8025f1b0e2afe819,"""""""Test access to the l3-agent metadata proxy.",1,0,0.0,1534
707890ef22c203389f61ddfe8025f1b0e2afe819,machine_fixtures.FakeMachine(,1,0,0.0,1535
707890ef22c203389f61ddfe8025f1b0e2afe819,# Create and configure client namespace,1,0,0.0,1536
707890ef22c203389f61ddfe8025f1b0e2afe819,self._create_metadata_fake_server(webob.exc.HTTPOk.code),1,0,0.0,1537
707890ef22c203389f61ddfe8025f1b0e2afe819,"response to the ""client"" namespace.",1,0,0.0,1538
707890ef22c203389f61ddfe8025f1b0e2afe819,the X-Forwarded-For and X-Neutron-Router-Id headers to the request,1,0,0.0,1539
707890ef22c203389f61ddfe8025f1b0e2afe819,http://169.254.169.254 and asserts that the metadata proxy added,1,0,0.0,1540
707890ef22c203389f61ddfe8025f1b0e2afe819,"The test queries from the ""client"" namespace the metadata proxy on",1,0,0.0,1541
707890ef22c203389f61ddfe8025f1b0e2afe819,internal subnet.,1,0,0.0,1542
707890ef22c203389f61ddfe8025f1b0e2afe819,* A l3-agent metadata service:,1,0,0.0,1543
707890ef22c203389f61ddfe8025f1b0e2afe819,The test creates:,1,0,0.0,1544
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=6, ipv6_subnet_modes=ipv6_subnet_modes)",1,0,0.0,1545
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': fip_gw_port_ip}],",1,0,0.0,1546
707890ef22c203389f61ddfe8025f1b0e2afe819,addr_mode=addr_mode),1,0,0.0,1547
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_interface(router, count=1, ip_version=6, ra_mode=ra_mode,",1,0,0.0,1548
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace):,0,0,0.0,1549
707890ef22c203389f61ddfe8025f1b0e2afe819,"def device_exists_with_ips_and_mac(self, expected_device, name_getter,",0,0,0.0,1550
707890ef22c203389f61ddfe8025f1b0e2afe819,dual_stack=dual_stack),0,0,0.0,1551
707890ef22c203389f61ddfe8025f1b0e2afe819,"extra_routes=extra_routes,",0,0,0.0,1552
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 6 and not dual_stack:,0,0,0.0,1553
707890ef22c203389f61ddfe8025f1b0e2afe819,dual_stack=False):,0,0,0.0,1554
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_fip=True, enable_snat=True,",0,0,0.0,1555
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '20.0.0.30', 'subnet_id': _uuid()",1,0,0.0,1556
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(orig_nat_rules, new_nat_rules)",1,0,0.0,1557
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(external_gateway_nat_rules.called),1,0,0.0,1558
707890ef22c203389f61ddfe8025f1b0e2afe819,# There should be no change with the NAT rules,1,0,0.0,1559
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_ipv6_only_gw(self):,1,0,0.0,1560
707890ef22c203389f61ddfe8025f1b0e2afe819,sub_info):,1,0,0.0,1561
707890ef22c203389f61ddfe8025f1b0e2afe819,"fip_gw_port,",1,0,0.0,1562
707890ef22c203389f61ddfe8025f1b0e2afe819,mock.patch.object(,1,0,0.0,1563
707890ef22c203389f61ddfe8025f1b0e2afe819,"[{'fixed_ips': [{'ip_address': '20.0.0.30',",1,0,0.0,1564
707890ef22c203389f61ddfe8025f1b0e2afe819,'ip_cidr': '20.0.0.30/24'}],1,0,0.0,1565
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': fake_network_id,",1,0,0.0,1566
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': 'myhost',",1,0,0.0,1567
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info(ports[0]),1,0,0.0,1568
707890ef22c203389f61ddfe8025f1b0e2afe819,'fixed_ips': [{'ip_address': '1.2.3.4'}]}],1,0,0.0,1569
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': _get_subnet_id(ports[0]),",1,0,0.0,1570
707890ef22c203389f61ddfe8025f1b0e2afe819,source_cidrs.append(source_cidr),1,0,0.0,1571
707890ef22c203389f61ddfe8025f1b0e2afe819,return ip_lib.device_exists_with_ips_and_mac(,0,0,0.0,1572
707890ef22c203389f61ddfe8025f1b0e2afe819,"name_getter(expected_device['id']), ip_cidrs,",0,0,0.0,1573
707890ef22c203389f61ddfe8025f1b0e2afe819,@staticmethod,0,0,0.0,1574
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '19.4.4.0/24',",0,0,0.0,1575
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.router[l3_constants.HA_INTERFACE_KEY],",0,0,0.0,1576
707890ef22c203389f61ddfe8025f1b0e2afe819,return router.get_ha_device_name(),0,0,0.0,1577
707890ef22c203389f61ddfe8025f1b0e2afe819,def ha_router_dev_name_getter(not_used):,0,0,0.0,1578
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_gateway, existing_gateway)",0,0,0.0,1579
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_version=ip_vers).get('gateway')),0,0,0.0,1580
707890ef22c203389f61ddfe8025f1b0e2afe819,for subnet in external_port['subnets']:,0,0,0.0,1581
707890ef22c203389f61ddfe8025f1b0e2afe819,if not (enable_ha and (ip_version == 6 or dual_stack)):,0,0,0.0,1582
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.device_exists_with_ips_and_mac,",0,0,0.0,1583
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _router_lifecycle(self, enable_ha, ip_version=4, dual_stack=False):",0,0,0.0,1584
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.5'}],0,0,0.0,1585
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id}],0,0,0.0,1586
707890ef22c203389f61ddfe8025f1b0e2afe819,def _port_first_ip_cidr(port):,0,0,0.0,1587
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 24,",0,0,0.0,1588
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=False, dual_stack=True)",0,0,0.0,1589
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port['mac_address'],",0,0,0.0,1590
707890ef22c203389f61ddfe8025f1b0e2afe819,"['%s/32' % fip['floating_ip_address']],",0,0,0.0,1591
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_external_device_name(external_port['id']),",0,0,0.0,1592
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_lib.device_exists_with_ips_and_mac(,0,0,0.0,1593
707890ef22c203389f61ddfe8025f1b0e2afe819,return len(floating_ips) and all(,0,0,0.0,1594
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self.device_exists_with_ips_and_mac(,0,0,0.0,1595
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip['prefixlen']),0,0,0.0,1596
707890ef22c203389f61ddfe8025f1b0e2afe819,"return common_utils.ip_to_cidr(fixed_ip['ip_address'],",0,0,0.0,1597
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix),1,0,0.0,1598
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.send_arp.assert_called_once_with(ri.ns_name, interface_name,",1,0,0.0,1599
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_updated(self):,1,0,0.0,1600
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': ip_addr,",1,0,0.0,1601
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'subnet': {'cidr': '152.10.0.0/16',",1,0,0.0,1602
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.2.0.13'}],",1,0,0.0,1603
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_cidr': '152.2.0.13/16',",1,0,0.0,1604
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.2.0.1',",1,0,0.0,1605
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid()},",1,0,0.0,1606
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '169.254.255.254',",1,0,0.0,1607
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': '169.254.192.0/18',",1,0,0.0,1608
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_version=ip_version),1,0,0.0,1609
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': gateway_ip}},1,0,0.0,1610
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': cidr,",1,0,0.0,1611
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_routes=False):,1,0,0.0,1612
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_cidr': '152.10.0.13/16',",1,0,0.0,1613
707890ef22c203389f61ddfe8025f1b0e2afe819,'ipv6_address_mode': addr_mode}}),1,0,0.0,1614
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ipv6_ra_mode': ra_mode,",1,0,0.0,1615
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': gw_pool % i,",1,0,0.0,1616
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': cidr_pool % i,",1,0,0.0,1617
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': _uuid()}],",1,0,0.0,1618
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': ip_pool % i,",1,0,0.0,1619
707890ef22c203389f61ddfe8025f1b0e2afe819,[netaddr.IPNetwork(p['subnet']['cidr']).version == ip_version,1,0,0.0,1620
707890ef22c203389f61ddfe8025f1b0e2afe819,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",1,0,0.0,1621
707890ef22c203389f61ddfe8025f1b0e2afe819,else:,1,0,0.0,1622
707890ef22c203389f61ddfe8025f1b0e2afe819,elif ip_version == 6:,1,0,0.0,1623
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.10.0.1',",1,0,0.0,1624
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.10.0.13'}],",1,0,0.0,1625
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _prepare_ext_gw_test(self, ri):",1,0,0.0,1626
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_remove.assert_called_with(,1,0,0.0,1627
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port,",1,0,0.0,1628
707890ef22c203389f61ddfe8025f1b0e2afe819,"['20.0.0.30/24'],",1,0,0.0,1629
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway': '20.0.0.1',",1,0,0.0,1630
707890ef22c203389f61ddfe8025f1b0e2afe819,"'20.0.0.30', mock.ANY)",1,0,0.0,1631
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name,",1,0,0.0,1632
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.send_arp.assert_called_once_with(ri.ns_name,",1,0,0.0,1633
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_action(self, action, router):",1,0,0.0,1634
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.get_internal_device_name(port['id'])),1,0,0.0,1635
707890ef22c203389f61ddfe8025f1b0e2afe819,"port,",1,0,0.0,1636
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port['fixed_ips'][0]['ip_address'],",1,0,0.0,1637
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port['ip_cidr'],",1,0,0.0,1638
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': '19.4.4.0/24',",1,0,0.0,1639
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info.assert_called_once_with(port),1,0,0.0,1640
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(ri._set_subnet_info.call_count, 1)",1,0,0.0,1641
707890ef22c203389f61ddfe8025f1b0e2afe819,'ip_cidr': '20.0.0.30/24'},1,0,0.0,1642
707890ef22c203389f61ddfe8025f1b0e2afe819,'ip_cidr': '20.0.0.31/24'},1,0,0.0,1643
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'ca:fe:de:ad:be:ef',",1,0,0.0,1644
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'gateway_ip': '20.0.0.1'},",1,0,0.0,1645
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'},1,0,0.0,1646
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_cidr': '99.0.1.9/24',",1,0,0.0,1647
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ri.ns_name.endswith(id)),1,0,0.0,1648
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.1'}},1,0,0.0,1649
707890ef22c203389f61ddfe8025f1b0e2afe819,"ha_router_dev_name_getter, router.ns_name))",0,0,0.0,1650
707890ef22c203389f61ddfe8025f1b0e2afe819,{'subnets': [,0,0,0.0,1651
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': float_subnet['gateway_ip'],",0,0,0.0,1652
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': [{'id': subnet_id}]},0,0,0.0,1653
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '20.0.0.30',",0,0,0.0,1654
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_action(self, action, router, dual_stack=False):",0,0,0.0,1655
707890ef22c203389f61ddfe8025f1b0e2afe819,is_add=False),0,0,0.0,1656
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri.get_internal_device_name(port['id']),",0,0,0.0,1657
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port, port,",0,0,0.0,1658
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_modify.assert_called_with(,0,0,0.0,1659
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port['fixed_ips'],",0,0,0.0,1660
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info.assert_called_once_with(subnet_id),0,0,0.0,1661
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'},0,0,0.0,1662
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'gateway_ip': '20.0.0.1'}],",0,0,0.0,1663
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 24}],",0,0,0.0,1664
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '20.0.0.0/24',",0,0,0.0,1665
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': subnet_id,",0,0,0.0,1666
707890ef22c203389f61ddfe8025f1b0e2afe819,"return '%s/%s' % (fixed_ip['ip_address'], fixed_ip['prefixlen'])",0,0,0.0,1667
707890ef22c203389f61ddfe8025f1b0e2afe819,def _fixed_ip_cidr(fixed_ip):,0,0,0.0,1668
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 24}]},0,0,0.0,1669
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '99.0.1.9',",0,0,0.0,1670
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'ca:fe:de:ad:be:ef',",0,0,0.0,1671
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ri.ns_name.endswith(ns_id)),0,0,0.0,1672
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.1'}]},0,0,0.0,1673
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'id': subnet_id,",0,0,0.0,1674
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.10.0.13',",0,0,0.0,1675
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 24}],0,0,0.0,1676
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '20.0.0.1'}],0,0,0.0,1677
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id_2}],",0,0,0.0,1678
707890ef22c203389f61ddfe8025f1b0e2afe819,self.send_arp.assert_has_calls(exp_arp_calls),0,0,0.0,1679
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_updated_dual_stack(self):,0,0,0.0,1680
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_external_gateway_updated(),0,0,0.0,1681
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_updated(self):,0,0,0.0,1682
707890ef22c203389f61ddfe8025f1b0e2afe819,"'2001:192:168:100::2', mock.ANY)]",0,0,0.0,1683
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_updated(self, dual_stack=False):",0,0,0.0,1684
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port, sn_port,",0,0,0.0,1685
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_cidrs,",0,0,0.0,1686
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ips': gateway_ips,",0,0,0.0,1687
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ips.append('2001:192:168:100::1'),0,0,0.0,1688
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs.append('2001:192:168:100::2/64'),0,0,0.0,1689
707890ef22c203389f61ddfe8025f1b0e2afe819,mock.ANY)],0,0,0.0,1690
707890ef22c203389f61ddfe8025f1b0e2afe819,if dual_stack:,0,0,0.0,1691
707890ef22c203389f61ddfe8025f1b0e2afe819,"'2001:192:168:100::2',",0,0,0.0,1692
707890ef22c203389f61ddfe8025f1b0e2afe819,"exp_arp_calls += [mock.call(ri.ns_name, interface_name,",0,0,0.0,1693
707890ef22c203389f61ddfe8025f1b0e2afe819,"'20.0.0.30', mock.ANY)]",0,0,0.0,1694
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': subnets,",0,0,0.0,1695
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '2001:192:168:100::1'}),0,0,0.0,1696
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '2001:192:168:100::/64',",0,0,0.0,1697
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets.append({'id': subnet_id_v6,",0,0,0.0,1698
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 64}),0,0,0.0,1699
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '2001:192:168:100::2',",0,0,0.0,1700
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'subnet_id': subnet_id_v6,",0,0,0.0,1701
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': subnet_id_2,",0,0,0.0,1702
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.10.0.1',",0,0,0.0,1703
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': fixed_ip['subnet_id']}],",0,0,0.0,1704
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': snat_ip,",0,0,0.0,1705
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': subnet_id,",0,0,0.0,1706
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'ip_address': ip_pool % i,",0,0,0.0,1707
707890ef22c203389f61ddfe8025f1b0e2afe819,continue,0,0,0.0,1708
707890ef22c203389f61ddfe8025f1b0e2afe819,else:,0,0,0.0,1709
707890ef22c203389f61ddfe8025f1b0e2afe819,elif loop_version == 6 and (ip_version == 6 or dual_stack):,0,0,0.0,1710
707890ef22c203389f61ddfe8025f1b0e2afe819,if loop_version == 4 and (ip_version == 4 or dual_stack):,0,0,0.0,1711
707890ef22c203389f61ddfe8025f1b0e2afe819,"for loop_version in (4, 6):",0,0,0.0,1712
707890ef22c203389f61ddfe8025f1b0e2afe819,[netaddr.IPNetwork(subnet['cidr']).version == ip_version,0,0,0.0,1713
707890ef22c203389f61ddfe8025f1b0e2afe819,"addr_mode=None, dual_stack=False):",0,0,0.0,1714
707890ef22c203389f61ddfe8025f1b0e2afe819,"[self._port_first_ip_cidr(external_gw_port)],",0,0,0.0,1715
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:router_centralized_snat',",0,0,0.0,1716
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets.append({'id': subnet_id,",0,0,0.0,1717
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': port['network_id'],",0,0,0.0,1718
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': snat_subnet['gateway_ip'],",0,0,0.0,1719
707890ef22c203389f61ddfe8025f1b0e2afe819,'device_id': _uuid()},0,0,0.0,1720
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': prefixlen}],",0,0,0.0,1721
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': fip_gw_port_ip,",0,0,0.0,1722
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",0,0,0.0,1723
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': self.agent.conf.host,",0,0,0.0,1724
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'fa:16:3e:80:8d:89',",0,0,0.0,1725
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:floatingip_agent_gateway',",0,0,0.0,1726
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': external_gw_port['network_id'],",0,0,0.0,1727
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': prefixlen}),0,0,0.0,1728
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': cidr_pool % i,",0,0,0.0,1729
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'subnets': [{'cidr': '152.10.0.0/16',",0,0,0.0,1730
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=ip_version, dual_stack=dual_stack)",0,0,0.0,1731
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 16}],",0,0,0.0,1732
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.2.0.13',",0,0,0.0,1733
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': subnet_id_1,",0,0,0.0,1734
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id_1}],",0,0,0.0,1735
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.2.0.1',",0,0,0.0,1736
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id}],",0,0,0.0,1737
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '169.254.255.254',",0,0,0.0,1738
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'cidr': '169.254.192.0/18',",0,0,0.0,1739
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': subnet_id}],",0,0,0.0,1740
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 18,",0,0,0.0,1741
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': subnets},0,0,0.0,1742
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': gw_pool % i,",0,0,0.0,1743
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': gateway_ip}),0,0,0.0,1744
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': subnet_cidr,",0,0,0.0,1745
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'ip_address': ip_address,",0,0,0.0,1746
707890ef22c203389f61ddfe8025f1b0e2afe819,"extra_routes=False, dual_stack=False):",0,0,0.0,1747
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': subnets}),0,0,0.0,1748
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': fixed_ips,",0,0,0.0,1749
707890ef22c203389f61ddfe8025f1b0e2afe819,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",0,0,0.0,1750
707890ef22c203389f61ddfe8025f1b0e2afe819,if not fixed_ips:,0,0,0.0,1751
707890ef22c203389f61ddfe8025f1b0e2afe819,'ipv6_address_mode': addr_mode}),0,0,0.0,1752
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ipv6_ra_mode': ra_mode,",0,0,0.0,1753
707890ef22c203389f61ddfe8025f1b0e2afe819,addr_mode=None):,1,0,0.0,1754
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_gw_port['ip_cidr'],",1,0,0.0,1755
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': snat_ip}],",1,0,0.0,1756
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ipv6_ra_mode': ra_mode,",0,0,0.0,1757
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': subnets},0,0,0.0,1758
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': gateway_ip}),0,0,0.0,1759
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': subnet_cidr,",0,0,0.0,1760
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'ip_address': ip_address,",0,0,0.0,1761
707890ef22c203389f61ddfe8025f1b0e2afe819,"extra_routes=False, dual_stack=False):",0,0,0.0,1762
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': subnets}),0,0,0.0,1763
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': fixed_ips,",0,0,0.0,1764
707890ef22c203389f61ddfe8025f1b0e2afe819,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",0,0,0.0,1765
707890ef22c203389f61ddfe8025f1b0e2afe819,if not fixed_ips:,0,0,0.0,1766
707890ef22c203389f61ddfe8025f1b0e2afe819,'ipv6_address_mode': addr_mode}),0,0,0.0,1767
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': gw_pool % i,",0,0,0.0,1768
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 18,",0,0,0.0,1769
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': cidr_pool % i,",0,0,0.0,1770
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets.append({'id': subnet_id,",0,0,0.0,1771
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': prefixlen}),0,0,0.0,1772
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': subnet_id,",0,0,0.0,1773
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'ip_address': ip_pool % i,",0,0,0.0,1774
707890ef22c203389f61ddfe8025f1b0e2afe819,continue,0,0,0.0,1775
707890ef22c203389f61ddfe8025f1b0e2afe819,else:,0,0,0.0,1776
707890ef22c203389f61ddfe8025f1b0e2afe819,elif loop_version == 6 and (ip_version == 6 or dual_stack):,0,0,0.0,1777
707890ef22c203389f61ddfe8025f1b0e2afe819,if loop_version == 4 and (ip_version == 4 or dual_stack):,0,0,0.0,1778
707890ef22c203389f61ddfe8025f1b0e2afe819,"for loop_version in (4, 6):",0,0,0.0,1779
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=ip_version, dual_stack=dual_stack)",0,0,0.0,1780
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': subnet_id}],",0,0,0.0,1781
707890ef22c203389f61ddfe8025f1b0e2afe819,"addr_mode=None, dual_stack=False):",0,0,0.0,1782
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.10.0.13',",0,0,0.0,1783
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 24}],",0,0,0.0,1784
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': subnet_id,",0,0,0.0,1785
707890ef22c203389f61ddfe8025f1b0e2afe819,"return '%s/%s' % (fixed_ip['ip_address'], fixed_ip['prefixlen'])",0,0,0.0,1786
707890ef22c203389f61ddfe8025f1b0e2afe819,def _fixed_ip_cidr(fixed_ip):,0,0,0.0,1787
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 24}]},0,0,0.0,1788
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '99.0.1.9',",0,0,0.0,1789
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'ca:fe:de:ad:be:ef',",0,0,0.0,1790
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ri.ns_name.endswith(ns_id)),0,0,0.0,1791
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.1'}]},0,0,0.0,1792
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'id': subnet_id,",0,0,0.0,1793
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': subnet_id_2,",0,0,0.0,1794
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'cidr': '169.254.192.0/18',",0,0,0.0,1795
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id_2}],",0,0,0.0,1796
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.10.0.1',",0,0,0.0,1797
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'subnets': [{'cidr': '152.10.0.0/16',",0,0,0.0,1798
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 16}],",0,0,0.0,1799
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.2.0.13',",0,0,0.0,1800
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': subnet_id_1,",0,0,0.0,1801
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id_1}],",0,0,0.0,1802
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.2.0.1',",0,0,0.0,1803
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id}],",0,0,0.0,1804
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '169.254.255.254',",0,0,0.0,1805
707890ef22c203389f61ddfe8025f1b0e2afe819,[netaddr.IPNetwork(subnet['cidr']).version == ip_version,0,0,0.0,1806
707890ef22c203389f61ddfe8025f1b0e2afe819,"[self._port_first_ip_cidr(external_gw_port)],",0,0,0.0,1807
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'gateway_ip': '20.0.0.1'}],",0,0,0.0,1808
707890ef22c203389f61ddfe8025f1b0e2afe819,"return common_utils.ip_to_cidr(fixed_ip['ip_address'],",0,0,0.0,1809
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id}],0,0,0.0,1810
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 24,",0,0,0.0,1811
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._router_lifecycle(enable_ha=False, dual_stack=True)",0,0,0.0,1812
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port['mac_address'],",0,0,0.0,1813
707890ef22c203389f61ddfe8025f1b0e2afe819,"['%s/32' % fip['floating_ip_address']],",0,0,0.0,1814
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_external_device_name(external_port['id']),",0,0,0.0,1815
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_lib.device_exists_with_ips_and_mac(,0,0,0.0,1816
707890ef22c203389f61ddfe8025f1b0e2afe819,return len(floating_ips) and all(,0,0,0.0,1817
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self.device_exists_with_ips_and_mac(,0,0,0.0,1818
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ip['prefixlen']),0,0,0.0,1819
707890ef22c203389f61ddfe8025f1b0e2afe819,def _port_first_ip_cidr(port):,0,0,0.0,1820
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.5'}],0,0,0.0,1821
707890ef22c203389f61ddfe8025f1b0e2afe819,@staticmethod,0,0,0.0,1822
707890ef22c203389f61ddfe8025f1b0e2afe819,"name_getter(expected_device['id']), ip_cidrs,",0,0,0.0,1823
707890ef22c203389f61ddfe8025f1b0e2afe819,return ip_lib.device_exists_with_ips_and_mac(,0,0,0.0,1824
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace):,0,0,0.0,1825
707890ef22c203389f61ddfe8025f1b0e2afe819,"def device_exists_with_ips_and_mac(self, expected_device, name_getter,",0,0,0.0,1826
707890ef22c203389f61ddfe8025f1b0e2afe819,dual_stack=dual_stack),0,0,0.0,1827
707890ef22c203389f61ddfe8025f1b0e2afe819,"extra_routes=extra_routes,",0,0,0.0,1828
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 6 and not dual_stack:,0,0,0.0,1829
707890ef22c203389f61ddfe8025f1b0e2afe819,dual_stack=False):,0,0,0.0,1830
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_fip=True, enable_snat=True,",0,0,0.0,1831
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '19.4.4.0/24',",0,0,0.0,1832
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _router_lifecycle(self, enable_ha, ip_version=4, dual_stack=False):",0,0,0.0,1833
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': snat_ip,",0,0,0.0,1834
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': external_gw_port['network_id'],",0,0,0.0,1835
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:router_centralized_snat',",0,0,0.0,1836
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': port['network_id'],",0,0,0.0,1837
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': snat_subnet['gateway_ip'],",0,0,0.0,1838
707890ef22c203389f61ddfe8025f1b0e2afe819,'device_id': _uuid()},0,0,0.0,1839
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': prefixlen}],",0,0,0.0,1840
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': fip_gw_port_ip,",0,0,0.0,1841
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",0,0,0.0,1842
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': self.agent.conf.host,",0,0,0.0,1843
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'fa:16:3e:80:8d:89',",0,0,0.0,1844
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:floatingip_agent_gateway',",0,0,0.0,1845
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': fixed_ip['subnet_id']}],",0,0,0.0,1846
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.device_exists_with_ips_and_mac,",0,0,0.0,1847
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': float_subnet['gateway_ip'],",0,0,0.0,1848
707890ef22c203389f61ddfe8025f1b0e2afe819,{'subnets': [,0,0,0.0,1849
707890ef22c203389f61ddfe8025f1b0e2afe819,"ha_router_dev_name_getter, router.ns_name))",0,0,0.0,1850
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.router[l3_constants.HA_INTERFACE_KEY],",0,0,0.0,1851
707890ef22c203389f61ddfe8025f1b0e2afe819,return router.get_ha_device_name(),0,0,0.0,1852
707890ef22c203389f61ddfe8025f1b0e2afe819,def ha_router_dev_name_getter(not_used):,0,0,0.0,1853
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_gateway, existing_gateway)",0,0,0.0,1854
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_version=ip_vers).get('gateway')),0,0,0.0,1855
707890ef22c203389f61ddfe8025f1b0e2afe819,for subnet in external_port['subnets']:,0,0,0.0,1856
707890ef22c203389f61ddfe8025f1b0e2afe819,if not (enable_ha and (ip_version == 6 or dual_stack)):,0,0,0.0,1857
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': [{'id': subnet_id}]},0,0,0.0,1858
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'},0,0,0.0,1859
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:router_centralized_snat',",1,0,0.0,1860
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_process_ipv6_only_or_dual_stack_gw(),0,0,0.0,1861
707890ef22c203389f61ddfe8025f1b0e2afe819,"name_getter(expected_device['id']), expected_device['ip_cidr'],",1,0,0.0,1862
707890ef22c203389f61ddfe8025f1b0e2afe819,return ip_lib.device_exists_with_ip_mac(,1,0,0.0,1863
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace):,1,0,0.0,1864
707890ef22c203389f61ddfe8025f1b0e2afe819,"def device_exists_with_ip_mac(self, expected_device, name_getter,",1,0,0.0,1865
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_routes=extra_routes),1,0,0.0,1866
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 6:,1,0,0.0,1867
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_fip=True, enable_snat=True):",1,0,0.0,1868
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id,0,0,0.0,1869
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_process_ipv6_only_or_dual_stack_gw(dual_stack=True),0,0,0.0,1870
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_dual_stack_gw(self):,0,0,0.0,1871
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_ipv6_only_gw(self):,0,0,0.0,1872
707890ef22c203389f61ddfe8025f1b0e2afe819,return len(floating_ips) and all(ip_lib.device_exists_with_ip_mac(,1,0,0.0,1873
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(orig_nat_rules, new_nat_rules)",0,0,0.0,1874
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(external_gateway_nat_rules.called),0,0,0.0,1875
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertNotEqual(orig_nat_rules, new_nat_rules)",0,0,0.0,1876
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(external_gateway_nat_rules.called),0,0,0.0,1877
707890ef22c203389f61ddfe8025f1b0e2afe819,# NAT rules should only change for dual_stack operation,0,0,0.0,1878
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_process_ipv6_only_or_dual_stack_gw(self, dual_stack=False):",0,0,0.0,1879
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_gw_port):,0,0,0.0,1880
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'id': subnet_id,",0,0,0.0,1881
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': [,0,0,0.0,1882
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'ip_address': '20.0.0.30',",0,0,0.0,1883
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self.device_exists_with_ip_mac(,1,0,0.0,1884
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_external_device_name(external_port['id']),",1,0,0.0,1885
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'}],0,0,0.0,1886
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': float_subnet['gateway_ip'],",1,0,0.0,1887
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': port['network_id'],",1,0,0.0,1888
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': snat_subnet['gateway_ip'],",1,0,0.0,1889
707890ef22c203389f61ddfe8025f1b0e2afe819,'device_id': _uuid()},1,0,0.0,1890
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': fip_gw_port_ip}],",1,0,0.0,1891
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",1,0,0.0,1892
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': self.agent.conf.host,",1,0,0.0,1893
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'fa:16:3e:80:8d:89',",1,0,0.0,1894
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:floatingip_agent_gateway',",1,0,0.0,1895
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': external_gw_port['network_id'],",1,0,0.0,1896
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': fixed_ip['subnet_id']},",1,0,0.0,1897
707890ef22c203389f61ddfe8025f1b0e2afe819,{'subnet':,1,0,0.0,1898
707890ef22c203389f61ddfe8025f1b0e2afe819,"'%s/32' % fip['floating_ip_address'],",1,0,0.0,1899
707890ef22c203389f61ddfe8025f1b0e2afe819,"device['mac_address'], router.ns_name))",1,0,0.0,1900
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_ha_device_name(), device['ip_cidr'],",1,0,0.0,1901
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ip_lib.device_exists_with_ip_mac(,1,0,0.0,1902
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_gateway, existing_gateway)",1,0,0.0,1903
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device.route.get_gateway().get('gateway')),1,0,0.0,1904
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 4:,1,0,0.0,1905
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.device_exists_with_ip_mac,",1,0,0.0,1906
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _router_lifecycle(self, enable_ha, ip_version=4):",1,0,0.0,1907
707890ef22c203389f61ddfe8025f1b0e2afe819,self._router_lifecycle(enable_ha=False),1,0,0.0,1908
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port['mac_address'],",1,0,0.0,1909
707890ef22c203389f61ddfe8025f1b0e2afe819,[{'fixed_ips': [,0,0,0.0,1910
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': fake_network_id,",0,0,0.0,1911
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info.assert_called_once_with(subnet_id),0,0,0.0,1912
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'subnet_id': subnet_id_v6,",0,0,0.0,1913
707890ef22c203389f61ddfe8025f1b0e2afe819,mock.ANY)],0,0,0.0,1914
707890ef22c203389f61ddfe8025f1b0e2afe819,"'2001:192:168:100::2',",0,0,0.0,1915
707890ef22c203389f61ddfe8025f1b0e2afe819,"exp_arp_calls += [mock.call(ri.ns_name, interface_name,",0,0,0.0,1916
707890ef22c203389f61ddfe8025f1b0e2afe819,"'20.0.0.30', mock.ANY)]",0,0,0.0,1917
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': subnets,",0,0,0.0,1918
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '2001:192:168:100::1'}),0,0,0.0,1919
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '2001:192:168:100::/64',",0,0,0.0,1920
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets.append({'id': subnet_id_v6,",0,0,0.0,1921
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 64}),0,0,0.0,1922
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '2001:192:168:100::2',",0,0,0.0,1923
707890ef22c203389f61ddfe8025f1b0e2afe819,if dual_stack:,0,0,0.0,1924
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_cidrs.append('2001:192:168:100::2/64'),0,0,0.0,1925
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '20.0.0.1'}],0,0,0.0,1926
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '20.0.0.0/24',",0,0,0.0,1927
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 24}],0,0,0.0,1928
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '20.0.0.30',",0,0,0.0,1929
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_action(self, action, router, dual_stack=False):",0,0,0.0,1930
707890ef22c203389f61ddfe8025f1b0e2afe819,is_add=False),0,0,0.0,1931
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri.get_internal_device_name(port['id']),",0,0,0.0,1932
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port, port,",0,0,0.0,1933
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_modify.assert_called_with(,0,0,0.0,1934
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port['fixed_ips'],",0,0,0.0,1935
707890ef22c203389f61ddfe8025f1b0e2afe819,self.send_arp.assert_has_calls(exp_arp_calls),0,0,0.0,1936
707890ef22c203389f61ddfe8025f1b0e2afe819,gateway_ips.append('2001:192:168:100::1'),0,0,0.0,1937
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': 'myhost',",0,0,0.0,1938
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_remove_external_gateway_dual_stack(self):,0,0,0.0,1939
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '20.0.0.1'}],",0,0,0.0,1940
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info(subnet_id),0,0,0.0,1941
707890ef22c203389f61ddfe8025f1b0e2afe819,'cidr': '1.2.3.0/24'}],0,0,0.0,1942
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id}]}],0,0,0.0,1943
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': '1.2.3.4',",0,0,0.0,1944
707890ef22c203389f61ddfe8025f1b0e2afe819,source_cidrs.append(source_cidr),0,0,0.0,1945
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix),0,0,0.0,1946
707890ef22c203389f61ddfe8025f1b0e2afe819,for subnet in iface['subnets']:,0,0,0.0,1947
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_remove_external_gateway_dist_dual_stack(self):,0,0,0.0,1948
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._test_external_gateway_action('remove', router, dual_stack=True)",0,0,0.0,1949
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_add_external_gateway_dist_dual_stack(self):,0,0,0.0,1950
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ips': gateway_ips,",0,0,0.0,1951
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._test_external_gateway_action('add', router, dual_stack=True)",0,0,0.0,1952
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_add_external_gateway_dual_stack(self):,0,0,0.0,1953
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_external_gateway_updated(dual_stack=True),0,0,0.0,1954
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_updated_dual_stack(self):,0,0,0.0,1955
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_external_gateway_updated(),0,0,0.0,1956
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_updated(self):,0,0,0.0,1957
707890ef22c203389f61ddfe8025f1b0e2afe819,"'2001:192:168:100::2', mock.ANY)]",0,0,0.0,1958
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_updated(self, dual_stack=False):",0,0,0.0,1959
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port, sn_port,",0,0,0.0,1960
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_cidrs,",0,0,0.0,1961
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_external_gateway_updated(dual_stack=True),0,0,0.0,1962
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_add_external_gateway_dual_stack(self):,0,0,0.0,1963
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._test_external_gateway_action('add', router, dual_stack=True)",0,0,0.0,1964
707890ef22c203389f61ddfe8025f1b0e2afe819,except StopIteration:,1,0,0.0,1965
707890ef22c203389f61ddfe8025f1b0e2afe819,'ipv6_address_mode': ipv6_subnet_modes[i]['address_mode']}),1,0,0.0,1966
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ipv6_ra_mode': ipv6_subnet_modes[i]['ra_mode'],",1,0,0.0,1967
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': gw_pool % (i + num_existing_subnets),",1,0,0.0,1968
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': cidr_pool % (i + num_existing_subnets),",1,0,0.0,1969
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'id': subnet_id,",1,0,0.0,1970
707890ef22c203389f61ddfe8025f1b0e2afe819,subnets.append(,1,0,0.0,1971
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'ip_address': ip_pool % (i + num_existing_subnets),",1,0,0.0,1972
707890ef22c203389f61ddfe8025f1b0e2afe819,fixed_ips.append(,1,0,0.0,1973
707890ef22c203389f61ddfe8025f1b0e2afe819,for i in moves.range(count):,1,0,0.0,1974
707890ef22c203389f61ddfe8025f1b0e2afe819,"raise ValueError(""interface_id not found"")",1,0,0.0,1975
707890ef22c203389f61ddfe8025f1b0e2afe819,if i['id'] == interface_id),1,0,0.0,1976
707890ef22c203389f61ddfe8025f1b0e2afe819,# Update old interface,1,0,0.0,1977
707890ef22c203389f61ddfe8025f1b0e2afe819,try:,1,0,0.0,1978
707890ef22c203389f61ddfe8025f1b0e2afe819,if interface_id:,1,0,0.0,1979
707890ef22c203389f61ddfe8025f1b0e2afe819,elif ip_version == 6:,1,0,0.0,1980
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 4:,1,0,0.0,1981
707890ef22c203389f61ddfe8025f1b0e2afe819,count)]),1,0,0.0,1982
707890ef22c203389f61ddfe8025f1b0e2afe819,"moves.range(len(ipv6_subnet_modes),",1,0,0.0,1983
707890ef22c203389f61ddfe8025f1b0e2afe819,ipv6_subnet_modes.extend([subnet_mode_none for i in,1,0,0.0,1984
707890ef22c203389f61ddfe8025f1b0e2afe819,elif len(ipv6_subnet_modes) != count:,1,0,0.0,1985
707890ef22c203389f61ddfe8025f1b0e2afe819,if not ipv6_subnet_modes:,1,0,0.0,1986
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 6:,1,0,0.0,1987
707890ef22c203389f61ddfe8025f1b0e2afe819,if interface:,1,0,0.0,1988
707890ef22c203389f61ddfe8025f1b0e2afe819,"interfaces[index].update({'fixed_ips': fixed_ips, 'subnets': subnets})",1,0,0.0,1989
707890ef22c203389f61ddfe8025f1b0e2afe819,"def router_append_subnet(router, count=1, ip_version=4,",1,0,0.0,1990
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': subnets},1,0,0.0,1991
707890ef22c203389f61ddfe8025f1b0e2afe819,'fixed_ip_address': '10.0.0.1'}],1,0,0.0,1992
707890ef22c203389f61ddfe8025f1b0e2afe819,"'floating_ip_address': '19.4.4.2',",1,0,0.0,1993
707890ef22c203389f61ddfe8025f1b0e2afe819,"'status': 'DOWN',",1,0,0.0,1994
707890ef22c203389f61ddfe8025f1b0e2afe819,if enable_floating_ip:,1,0,0.0,1995
707890ef22c203389f61ddfe8025f1b0e2afe819,'gw_port': ex_gw_port},1,0,0.0,1996
707890ef22c203389f61ddfe8025f1b0e2afe819,"'routes': routes,",1,0,0.0,1997
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_constants.INTERFACE_KEY: [],",1,0,0.0,1998
707890ef22c203389f61ddfe8025f1b0e2afe819,"'distributed': False,",1,0,0.0,1999
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': router_id,",1,0,0.0,2000
707890ef22c203389f61ddfe8025f1b0e2afe819,if extra_routes:,1,0,0.0,2001
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': gateway_mac,",1,0,0.0,2002
707890ef22c203389f61ddfe8025f1b0e2afe819,# New interface appended to interfaces list,1,0,0.0,2003
707890ef22c203389f61ddfe8025f1b0e2afe819,if not fixed_ips and v6_ext_gw_with_sub:,1,0,0.0,2004
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': gateway_ip}),1,0,0.0,2005
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': subnet_cidr,",1,0,0.0,2006
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'ip_address': ip_address,",1,0,0.0,2007
707890ef22c203389f61ddfe8025f1b0e2afe819,v6_ext_gw_with_sub):,1,0,0.0,2008
707890ef22c203389f61ddfe8025f1b0e2afe819,elif (loop_version == 6 and (ip_version == 6 or dual_stack) and,1,0,0.0,2009
707890ef22c203389f61ddfe8025f1b0e2afe819,"v6_ext_gw_with_sub=True, **kwargs):",1,0,0.0,2010
707890ef22c203389f61ddfe8025f1b0e2afe819,"extra_routes=False, dual_stack=False,",1,0,0.0,2011
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_floating_ip=False, enable_ha=False,",1,0,0.0,2012
707890ef22c203389f61ddfe8025f1b0e2afe819,"def prepare_router_data(ip_version=4, enable_snat=None, num_internal_ports=1,",1,0,0.0,2013
707890ef22c203389f61ddfe8025f1b0e2afe819,"ipv6_subnet_modes=None, interface_id=None):",1,0,0.0,2014
707890ef22c203389f61ddfe8025f1b0e2afe819,mac_address.value += 1,1,0,0.0,2015
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=ip_version, dual_stack=dual_stack)",1,0,0.0,2016
707890ef22c203389f61ddfe8025f1b0e2afe819,* 2)),0,0,0.0,2017
707890ef22c203389f61ddfe8025f1b0e2afe819,from six import moves,1,0,0.0,2018
707890ef22c203389f61ddfe8025f1b0e2afe819,l3_test_common.FakeDev),0,0,0.0,2019
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(ri.remove_floating_ip.called),0,0,0.0,2020
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_removed_ext_gw_port_no_fip_ns(self):,0,0,0.0,2021
707890ef22c203389f61ddfe8025f1b0e2afe819,l3_test_common.FakeDev('rfp-aaaa')],0,0,0.0,2022
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_test_common.FakeDev('qr-aaaa'),",0,0,0.0,2023
707890ef22c203389f61ddfe8025f1b0e2afe819,num_internal_ports=1),0,0,0.0,2024
707890ef22c203389f61ddfe8025f1b0e2afe819,l3_test_common.FakeDev('qr-b2c3d4e5-f6')],0,0,0.0,2025
707890ef22c203389f61ddfe8025f1b0e2afe819,'debug') as log_debug:,0,0,0.0,2026
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(dvr_local_router.LOG,",0,0,0.0,2027
707890ef22c203389f61ddfe8025f1b0e2afe819,'address_mode': l3_constants.IPV6_SLAAC}],0,0,0.0,2028
707890ef22c203389f61ddfe8025f1b0e2afe819,class FakeDev(object):,1,0,0.0,2029
707890ef22c203389f61ddfe8025f1b0e2afe819,"ipv6_subnet_modes=([{'ra_mode': l3_constants.IPV6_SLAAC,",0,0,0.0,2030
707890ef22c203389f61ddfe8025f1b0e2afe819,"router, count=2, ip_version=6,",0,0,0.0,2031
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_test_common.router_append_interface(router, count=1, ip_version=6)",0,0,0.0,2032
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_test_common.router_append_interface(router, count=1, ip_version=4)",0,0,0.0,2033
707890ef22c203389f61ddfe8025f1b0e2afe819,"'address_mode': l3_constants.IPV6_SLAAC}],",0,0,0.0,2034
707890ef22c203389f61ddfe8025f1b0e2afe819,ipv6_subnet_modes=[,0,0,0.0,2035
707890ef22c203389f61ddfe8025f1b0e2afe819,'address_mode': l3_constants.IPV6_SLAAC}]),0,0,0.0,2036
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'ra_mode': l3_constants.IPV6_SLAAC,",0,0,0.0,2037
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=6, ipv6_subnet_modes=[",0,0,0.0,2038
707890ef22c203389f61ddfe8025f1b0e2afe819,"router, count=1,",0,0,0.0,2039
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import dvr_router,1,0,0.0,2040
707890ef22c203389f61ddfe8025f1b0e2afe819,"def __init__(self, name):",1,0,0.0,2041
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': subnets}),1,0,0.0,2042
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets.append({'id': subnet_id,",1,0,0.0,2043
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': str(mac_address),",1,0,0.0,2044
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': fixed_ips,",1,0,0.0,2045
707890ef22c203389f61ddfe8025f1b0e2afe819,"'admin_state_up': True,",1,0,0.0,2046
707890ef22c203389f61ddfe8025f1b0e2afe819,interfaces.append(,1,0,0.0,2047
707890ef22c203389f61ddfe8025f1b0e2afe819,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",1,0,0.0,2048
707890ef22c203389f61ddfe8025f1b0e2afe819,if not fixed_ips:,1,0,0.0,2049
707890ef22c203389f61ddfe8025f1b0e2afe819,'ipv6_address_mode': addr_mode}),1,0,0.0,2050
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ipv6_ra_mode': ra_mode,",1,0,0.0,2051
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': gw_pool % i,",1,0,0.0,2052
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': cidr_pool % i,",1,0,0.0,2053
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': prefixlen}),1,0,0.0,2054
707890ef22c203389f61ddfe8025f1b0e2afe819,"def router_append_interface(router, count=1, ip_version=4, ra_mode=None,",1,0,0.0,2055
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': subnet_id,",1,0,0.0,2056
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'ip_address': ip_pool % i,",1,0,0.0,2057
707890ef22c203389f61ddfe8025f1b0e2afe819,continue,1,0,0.0,2058
707890ef22c203389f61ddfe8025f1b0e2afe819,else:,1,0,0.0,2059
707890ef22c203389f61ddfe8025f1b0e2afe819,elif loop_version == 6 and (ip_version == 6 or dual_stack):,1,0,0.0,2060
707890ef22c203389f61ddfe8025f1b0e2afe819,if loop_version == 4 and (ip_version == 4 or dual_stack):,1,0,0.0,2061
707890ef22c203389f61ddfe8025f1b0e2afe819,"for loop_version in (4, 6):",1,0,0.0,2062
707890ef22c203389f61ddfe8025f1b0e2afe819,"for i in range(current, current + count):",1,0,0.0,2063
707890ef22c203389f61ddfe8025f1b0e2afe819,[netaddr.IPNetwork(subnet['cidr']).version == ip_version,1,0,0.0,2064
707890ef22c203389f61ddfe8025f1b0e2afe819,"addr_mode=None, dual_stack=False):",1,0,0.0,2065
707890ef22c203389f61ddfe8025f1b0e2afe819,"router_append_interface(router, count=num_internal_ports,",1,0,0.0,2066
707890ef22c203389f61ddfe8025f1b0e2afe819,if enable_ha:,1,0,0.0,2067
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=6,",0,0,0.0,2068
707890ef22c203389f61ddfe8025f1b0e2afe819,"'foo_router_id',",1,0,0.0,2069
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_ip_dev.neigh.delete.assert_called_once_with(,1,0,0.0,2070
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent.del_arp_entry(None, payload)",1,0,0.0,2071
707890ef22c203389f61ddfe8025f1b0e2afe819,# now delete it,1,0,0.0,2072
707890ef22c203389f61ddfe8025f1b0e2afe819,# first add the entry,1,0,0.0,2073
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': '00:44:33:22:11:55',",1,0,0.0,2074
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_del_arp_entry(self):,1,0,0.0,2075
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(f.call_count),1,0,0.0,2076
707890ef22c203389f61ddfe8025f1b0e2afe819,"ri._update_arp_entry(mock.ANY, mock.ANY, 'foo_subnet_id', 'add')",1,0,0.0,2077
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(l3_agent.ip_lib, 'IPDevice') as f:",1,0,0.0,2078
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'distributed': True, 'gw_port_host': HOSTNAME},",1,0,0.0,2079
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.sentinel.agent,",1,0,0.0,2080
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_get_floating_agent_gw_interfaces(self):,1,0,0.0,2081
707890ef22c203389f61ddfe8025f1b0e2afe819,def test__update_arp_entry_with_no_subnet(self):,1,0,0.0,2082
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_add_arp_entry_no_routerinfo(self):,1,0,0.0,2083
707890ef22c203389f61ddfe8025f1b0e2afe819,"'1.7.23.11', '00:11:22:33:44:55')",1,0,0.0,2084
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent.router_deleted(None, router['id'])",1,0,0.0,2085
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent.add_arp_entry(None, payload)",1,0,0.0,2086
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent._router_added(router['id'], router)",1,0,0.0,2087
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id},1,0,0.0,2088
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': '00:11:22:33:44:55',",1,0,0.0,2089
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_add_arp_entry(self):,1,0,0.0,2090
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_ip_dev.neigh.add.never_called(),1,0,0.0,2091
707890ef22c203389f61ddfe8025f1b0e2afe819,"'1.5.25.15', '00:44:33:22:11:55')",1,0,0.0,2092
707890ef22c203389f61ddfe8025f1b0e2afe819,"[{'fixed_ips': [{'ip_address': '20.0.0.30',",1,0,0.0,2093
707890ef22c203389f61ddfe8025f1b0e2afe819,"'1.2.3.4', '00:11:22:33:44:55')",1,0,0.0,2094
707890ef22c203389f61ddfe8025f1b0e2afe819,"'host': HOSTNAME,",1,0,0.0,2095
707890ef22c203389f61ddfe8025f1b0e2afe819,router_append_interface(router),1,0,0.0,2096
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'fixed_ips': [{'ip_address': '20.0.0.30',",1,0,0.0,2097
707890ef22c203389f61ddfe8025f1b0e2afe819,'port_id': _uuid()}]},1,0,0.0,2098
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ip_address': '192.168.0.10',",1,0,0.0,2099
707890ef22c203389f61ddfe8025f1b0e2afe819,"'floating_ip_address': '15.1.2.4',",1,0,0.0,2100
707890ef22c203389f61ddfe8025f1b0e2afe819,"'host': 'some-other-host',",1,0,0.0,2101
707890ef22c203389f61ddfe8025f1b0e2afe819,"'port_id': _uuid()},",1,0,0.0,2102
707890ef22c203389f61ddfe8025f1b0e2afe819,"'floating_network_id': mock.sentinel.ext_net_id,",1,0,0.0,2103
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ip_address': '192.168.0.1',",1,0,0.0,2104
707890ef22c203389f61ddfe8025f1b0e2afe819,"'floating_ip_address': '15.1.2.3',",1,0,0.0,2105
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_router_dist_floating_ip_add(self):,1,0,0.0,2106
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'id': subnet_id,",1,0,0.0,2107
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(ri, 'get_floating_ips') as fips,\",1,0,0.0,2108
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.get_floating_agent_gw_interface(fake_network_id)),1,0,0.0,2109
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent_gateway_port[0],",1,0,0.0,2110
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertEqual(,1,0,0.0,2111
707890ef22c203389f61ddfe8025f1b0e2afe819,),1,0,0.0,2112
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'}],1,0,0.0,2113
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': fake_network_id,",1,0,0.0,2114
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:floatingip_agent_gateway',",1,0,0.0,2115
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': 'myhost',",1,0,0.0,2116
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '20.0.0.1'}],",1,0,0.0,2117
707890ef22c203389f61ddfe8025f1b0e2afe819,# Test negative case,1,0,0.0,2118
707890ef22c203389f61ddfe8025f1b0e2afe819,self.mock_ip_dev.neigh.add.assert_called_once_with(,1,0,0.0,2119
707890ef22c203389f61ddfe8025f1b0e2afe819,if enable_snat is not None:,1,0,0.0,2120
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': mac,",1,0,0.0,2121
707890ef22c203389f61ddfe8025f1b0e2afe819,"router,",1,0,0.0,2122
707890ef22c203389f61ddfe8025f1b0e2afe819,"router['id'],",1,0,0.0,2123
707890ef22c203389f61ddfe8025f1b0e2afe819,"HOSTNAME,",1,0,0.0,2124
707890ef22c203389f61ddfe8025f1b0e2afe819,'priority': 1},1,0,0.0,2125
707890ef22c203389f61ddfe8025f1b0e2afe819,"'agent_host': 'aaa',",1,0,0.0,2126
707890ef22c203389f61ddfe8025f1b0e2afe819,"'tenant_id': '',",1,0,0.0,2127
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': subnet_id}],",1,0,0.0,2128
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '169.254.255.254',",1,0,0.0,2129
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': [{'cidr': '169.254.192.0/18',",1,0,0.0,2130
707890ef22c203389f61ddfe8025f1b0e2afe819,"'status': u'ACTIVE',",1,0,0.0,2131
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': subnet_id}],",1,0,0.0,2132
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '20.0.0.30',",1,0,0.0,2133
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 18,",1,0,0.0,2134
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': ip,",1,0,0.0,2135
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:router_ha_interface',",1,0,0.0,2136
707890ef22c203389f61ddfe8025f1b0e2afe819,"return {'admin_state_up': True,",1,0,0.0,2137
707890ef22c203389f61ddfe8025f1b0e2afe819,"def get_ha_interface(ip='169.254.192.1', mac='12:34:56:78:2b:5d'):",1,0,0.0,2138
707890ef22c203389f61ddfe8025f1b0e2afe819,# neutron/tests/common/).,1,0,0.0,2139
707890ef22c203389f61ddfe8025f1b0e2afe819,"# and the functional tests, and should be moved elsewhere (probably",1,0,0.0,2140
707890ef22c203389f61ddfe8025f1b0e2afe819,#TODO(jschwarz): This is a shared function with both the unit tests,1,0,0.0,2141
707890ef22c203389f61ddfe8025f1b0e2afe819,return port['fixed_ips'][0]['subnet_id'],1,0,0.0,2142
707890ef22c203389f61ddfe8025f1b0e2afe819,def _get_subnet_id(port):,1,0,0.0,2143
707890ef22c203389f61ddfe8025f1b0e2afe819,**self.ri_kwargs),1,0,0.0,2144
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 24}],1,0,0.0,2145
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info(subnet_id),1,0,0.0,2146
707890ef22c203389f61ddfe8025f1b0e2afe819,"return interface_name, ex_gw_port",1,0,0.0,2147
707890ef22c203389f61ddfe8025f1b0e2afe819,'cidr': '1.2.3.0/24'}],1,0,0.0,2148
707890ef22c203389f61ddfe8025f1b0e2afe819,# Test basic case,1,0,0.0,2149
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id}]}],1,0,0.0,2150
707890ef22c203389f61ddfe8025f1b0e2afe819,"'prefixlen': 24,",1,0,0.0,2151
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': '1.2.3.4',",1,0,0.0,2152
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:dhcp',",1,0,0.0,2153
707890ef22c203389f61ddfe8025f1b0e2afe819,"agent, HOSTNAME, router['id'], router, **self.ri_kwargs)",1,0,0.0,2154
707890ef22c203389f61ddfe8025f1b0e2afe819,def test__set_subnet_arp_info(self):,1,0,0.0,2155
707890ef22c203389f61ddfe8025f1b0e2afe819,'fixed_ips': [{'subnet_id': _get_subnet_id(,1,0,0.0,2156
707890ef22c203389f61ddfe8025f1b0e2afe819,v6_ext_gw_with_sub=False),1,0,0.0,2157
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'},1,0,0.0,2158
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '20.0.0.0/24',",1,0,0.0,2159
707890ef22c203389f61ddfe8025f1b0e2afe819,"'extra_subnets': [{'cidr': '172.16.0.0/24'}],",1,0,0.0,2160
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnets': subnets,",1,0,0.0,2161
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '2001:192:168:100::1'}),1,0,0.0,2162
707890ef22c203389f61ddfe8025f1b0e2afe819,"'cidr': '2001:192:168:100::/64',",1,0,0.0,2163
707890ef22c203389f61ddfe8025f1b0e2afe819,"subnets.append({'id': subnet_id_v6,",1,0,0.0,2164
707890ef22c203389f61ddfe8025f1b0e2afe819,'prefixlen': 64}),1,0,0.0,2165
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '2001:192:168:100::2',",1,0,0.0,2166
707890ef22c203389f61ddfe8025f1b0e2afe819,"fixed_ips.append({'subnet_id': subnet_id_v6,",1,0,0.0,2167
707890ef22c203389f61ddfe8025f1b0e2afe819,if dual_stack:,1,0,0.0,2168
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '20.0.0.1'}],1,0,0.0,2169
707890ef22c203389f61ddfe8025f1b0e2afe819,ipv6_subnet_modes=ipv6_subnet_modes),0,0,0.0,2170
707890ef22c203389f61ddfe8025f1b0e2afe819,"count=len(ipv6_subnet_modes),",0,0,0.0,2171
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_add_external_gateway_dist_dual_stack(self):,0,0,0.0,2172
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': snat_ip}],",1,0,0.0,2173
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': gw_pool % i,",1,0,0.0,2174
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': cidr_pool % i,",1,0,0.0,2175
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': _uuid()}],",1,0,0.0,2176
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': ip_pool % i,",1,0,0.0,2177
707890ef22c203389f61ddfe8025f1b0e2afe819,[netaddr.IPNetwork(p['subnet']['cidr']).version == ip_version,1,0,0.0,2178
707890ef22c203389f61ddfe8025f1b0e2afe819,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",1,0,0.0,2179
707890ef22c203389f61ddfe8025f1b0e2afe819,else:,1,0,0.0,2180
707890ef22c203389f61ddfe8025f1b0e2afe819,elif ip_version == 6:,1,0,0.0,2181
707890ef22c203389f61ddfe8025f1b0e2afe819,addr_mode=None):,1,0,0.0,2182
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_gw_port['ip_cidr'],",1,0,0.0,2183
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:router_centralized_snat',",1,0,0.0,2184
707890ef22c203389f61ddfe8025f1b0e2afe819,'ipv6_address_mode': addr_mode}}),1,0,0.0,2185
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': port['network_id'],",1,0,0.0,2186
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': snat_subnet['gateway_ip'],",1,0,0.0,2187
707890ef22c203389f61ddfe8025f1b0e2afe819,'device_id': _uuid()},1,0,0.0,2188
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",1,0,0.0,2189
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': self.agent.conf.host,",1,0,0.0,2190
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'fa:16:3e:80:8d:89',",1,0,0.0,2191
707890ef22c203389f61ddfe8025f1b0e2afe819,"'device_owner': 'network:floatingip_agent_gateway',",1,0,0.0,2192
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': external_gw_port['network_id'],",1,0,0.0,2193
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': fixed_ip['subnet_id']},",1,0,0.0,2194
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': float_subnet['gateway_ip'],",1,0,0.0,2195
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ipv6_ra_mode': ra_mode,",1,0,0.0,2196
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_routes=False):,1,0,0.0,2197
707890ef22c203389f61ddfe8025f1b0e2afe819,"device['mac_address'], router.ns_name))",1,0,0.0,2198
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_cidr': '152.10.0.13/16',",1,0,0.0,2199
707890ef22c203389f61ddfe8025f1b0e2afe819,'ip_cidr': '20.0.0.30/24'},1,0,0.0,2200
707890ef22c203389f61ddfe8025f1b0e2afe819,'ip_cidr': '20.0.0.31/24'},1,0,0.0,2201
707890ef22c203389f61ddfe8025f1b0e2afe819,"'mac_address': 'ca:fe:de:ad:be:ef',",1,0,0.0,2202
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'gateway_ip': '20.0.0.1'},",1,0,0.0,2203
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'},1,0,0.0,2204
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_cidr': '99.0.1.9/24',",1,0,0.0,2205
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ri.ns_name.endswith(id)),1,0,0.0,2206
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': '19.4.4.1'}},1,0,0.0,2207
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': '19.4.4.0/24',",1,0,0.0,2208
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.10.0.13'}],",1,0,0.0,2209
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.10.0.1',",1,0,0.0,2210
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': ip_addr,",1,0,0.0,2211
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'subnet': {'cidr': '152.10.0.0/16',",1,0,0.0,2212
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '152.2.0.13'}],",1,0,0.0,2213
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_cidr': '152.2.0.13/16',",1,0,0.0,2214
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '152.2.0.1',",1,0,0.0,2215
707890ef22c203389f61ddfe8025f1b0e2afe819,"'id': _uuid()},",1,0,0.0,2216
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '169.254.255.254',",1,0,0.0,2217
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': '169.254.192.0/18',",1,0,0.0,2218
707890ef22c203389f61ddfe8025f1b0e2afe819,ip_version=ip_version),1,0,0.0,2219
707890ef22c203389f61ddfe8025f1b0e2afe819,'gateway_ip': gateway_ip}},1,0,0.0,2220
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet': {'cidr': cidr,",1,0,0.0,2221
707890ef22c203389f61ddfe8025f1b0e2afe819,{'subnet':,1,0,0.0,2222
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_ha_device_name(), device['ip_cidr'],",1,0,0.0,2223
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info.assert_called_once_with(port),1,0,0.0,2224
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': 'myhost',",0,0,0.0,2225
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(external_gateway_nat_rules.called),0,0,0.0,2226
707890ef22c203389f61ddfe8025f1b0e2afe819,# NAT rules should only change for dual_stack operation,0,0,0.0,2227
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_process_ipv6_only_or_dual_stack_gw(self, dual_stack=False):",0,0,0.0,2228
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_gw_port):,0,0,0.0,2229
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'id': subnet_id,",0,0,0.0,2230
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnets': [,0,0,0.0,2231
707890ef22c203389f61ddfe8025f1b0e2afe819,"{'ip_address': '20.0.0.30',",0,0,0.0,2232
707890ef22c203389f61ddfe8025f1b0e2afe819,[{'fixed_ips': [,0,0,0.0,2233
707890ef22c203389f61ddfe8025f1b0e2afe819,'mac_address': 'ca:fe:de:ad:be:ef'}],0,0,0.0,2234
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': fake_network_id,",0,0,0.0,2235
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway_ip': '20.0.0.1'}],",0,0,0.0,2236
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(external_gateway_nat_rules.called),0,0,0.0,2237
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info(subnet_id),0,0,0.0,2238
707890ef22c203389f61ddfe8025f1b0e2afe819,'cidr': '1.2.3.0/24'}],0,0,0.0,2239
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id}]}],0,0,0.0,2240
707890ef22c203389f61ddfe8025f1b0e2afe819,"'fixed_ips': [{'ip_address': '1.2.3.4',",0,0,0.0,2241
707890ef22c203389f61ddfe8025f1b0e2afe819,source_cidrs.append(source_cidr),0,0,0.0,2242
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix),0,0,0.0,2243
707890ef22c203389f61ddfe8025f1b0e2afe819,for subnet in iface['subnets']:,0,0,0.0,2244
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_remove_external_gateway_dist_dual_stack(self):,0,0,0.0,2245
707890ef22c203389f61ddfe8025f1b0e2afe819,"self._test_external_gateway_action('remove', router, dual_stack=True)",0,0,0.0,2246
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_agent_remove_external_gateway_dual_stack(self):,0,0,0.0,2247
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertNotEqual(orig_nat_rules, new_nat_rules)",0,0,0.0,2248
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(orig_nat_rules, new_nat_rules)",0,0,0.0,2249
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(ip_lib.device_exists_with_ip_mac(,1,0,0.0,2250
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertTrue(self.device_exists_with_ip_mac(,1,0,0.0,2251
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(expected_gateway, existing_gateway)",1,0,0.0,2252
707890ef22c203389f61ddfe8025f1b0e2afe819,external_device.route.get_gateway().get('gateway')),1,0,0.0,2253
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 4:,1,0,0.0,2254
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.device_exists_with_ip_mac,",1,0,0.0,2255
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _router_lifecycle(self, enable_ha, ip_version=4):",1,0,0.0,2256
707890ef22c203389f61ddfe8025f1b0e2afe819,self._router_lifecycle(enable_ha=False),1,0,0.0,2257
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_port['mac_address'],",1,0,0.0,2258
707890ef22c203389f61ddfe8025f1b0e2afe819,"'%s/32' % fip['floating_ip_address'],",1,0,0.0,2259
707890ef22c203389f61ddfe8025f1b0e2afe819,"router.get_external_device_name(external_port['id']),",1,0,0.0,2260
707890ef22c203389f61ddfe8025f1b0e2afe819,return len(floating_ips) and all(ip_lib.device_exists_with_ip_mac(,1,0,0.0,2261
707890ef22c203389f61ddfe8025f1b0e2afe819,"name_getter(expected_device['id']), expected_device['ip_cidr'],",1,0,0.0,2262
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_ipv6_only_gw(self):,0,0,0.0,2263
707890ef22c203389f61ddfe8025f1b0e2afe819,return ip_lib.device_exists_with_ip_mac(,1,0,0.0,2264
707890ef22c203389f61ddfe8025f1b0e2afe819,namespace):,1,0,0.0,2265
707890ef22c203389f61ddfe8025f1b0e2afe819,"def device_exists_with_ip_mac(self, expected_device, name_getter,",1,0,0.0,2266
707890ef22c203389f61ddfe8025f1b0e2afe819,extra_routes=extra_routes),1,0,0.0,2267
707890ef22c203389f61ddfe8025f1b0e2afe819,if ip_version == 6:,1,0,0.0,2268
707890ef22c203389f61ddfe8025f1b0e2afe819,"enable_fip=True, enable_snat=True):",1,0,0.0,2269
707890ef22c203389f61ddfe8025f1b0e2afe819,'subnet_id': subnet_id,0,0,0.0,2270
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_process_ipv6_only_or_dual_stack_gw(dual_stack=True),0,0,0.0,2271
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_dual_stack_gw(self):,0,0,0.0,2272
707890ef22c203389f61ddfe8025f1b0e2afe819,self._test_process_ipv6_only_or_dual_stack_gw(),0,0,0.0,2273
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(ri._set_subnet_info.call_count, 1)",1,0,0.0,2274
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port['ip_cidr'],",1,0,0.0,2275
707890ef22c203389f61ddfe8025f1b0e2afe819,l3_test_common.router_append_subnet(,0,0,0.0,2276
707890ef22c203389f61ddfe8025f1b0e2afe819,") as (fips,",1,0,0.0,2277
707890ef22c203389f61ddfe8025f1b0e2afe819,"external_gateway_removed,",1,0,0.0,2278
707890ef22c203389f61ddfe8025f1b0e2afe819,"internal_network_added,",1,0,0.0,2279
707890ef22c203389f61ddfe8025f1b0e2afe819,") as (internal_network_removed,",1,0,0.0,2280
707890ef22c203389f61ddfe8025f1b0e2afe819,'external_gateway_added'),1,0,0.0,2281
707890ef22c203389f61ddfe8025f1b0e2afe819,"'external_gateway_removed'),",1,0,0.0,2282
707890ef22c203389f61ddfe8025f1b0e2afe819,"'internal_network_added'),",1,0,0.0,2283
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(ri,",1,0,0.0,2284
707890ef22c203389f61ddfe8025f1b0e2afe819,"'internal_network_removed'),",1,0,0.0,2285
707890ef22c203389f61ddfe8025f1b0e2afe819,with contextlib.nested(mock.patch.object(,1,0,0.0,2286
707890ef22c203389f61ddfe8025f1b0e2afe819,fip_gw_port):,1,0,0.0,2287
707890ef22c203389f61ddfe8025f1b0e2afe819,mock.patch.object(,1,0,0.0,2288
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(self.handler, '_get_ports_for_remote_address'),",1,0,0.0,2289
707890ef22c203389f61ddfe8025f1b0e2afe819,"'get_floating_ips'),",1,0,0.0,2290
707890ef22c203389f61ddfe8025f1b0e2afe819,"with contextlib.nested(mock.patch.object(ri,",1,0,0.0,2291
707890ef22c203389f61ddfe8025f1b0e2afe819,):,1,0,0.0,2292
707890ef22c203389f61ddfe8025f1b0e2afe819,"rpc_mock, prepare_mock",1,0,0.0,2293
707890ef22c203389f61ddfe8025f1b0e2afe819,) as (,1,0,0.0,2294
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(proxy.client, 'prepare'),",1,0,0.0,2295
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(proxy.client, 'call'),",1,0,0.0,2296
707890ef22c203389f61ddfe8025f1b0e2afe819,with contextlib.nested(,1,0,0.0,2297
707890ef22c203389f61ddfe8025f1b0e2afe819,import contextlib,1,0,0.0,2298
707890ef22c203389f61ddfe8025f1b0e2afe819,return_value=networks,0,0,0.0,2299
707890ef22c203389f61ddfe8025f1b0e2afe819,external_gateway_added):,1,0,0.0,2300
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(self.handler, '_get_router_networks')",1,0,0.0,2301
707890ef22c203389f61ddfe8025f1b0e2afe819,return_value=expected,0,0,0.0,2302
707890ef22c203389f61ddfe8025f1b0e2afe819,**self.ri_kwargs),0,0,0.0,2303
707890ef22c203389f61ddfe8025f1b0e2afe819,addr_mode=addr_mode),0,0,0.0,2304
707890ef22c203389f61ddfe8025f1b0e2afe819,"ip_version=6, ra_mode=ra_mode,",0,0,0.0,2305
707890ef22c203389f61ddfe8025f1b0e2afe819,"l3_test_common.router_append_interface(router, count=1,",0,0,0.0,2306
707890ef22c203389f61ddfe8025f1b0e2afe819,dual_stack=dual_stack),0,0,0.0,2307
707890ef22c203389f61ddfe8025f1b0e2afe819,l3_test_common.router_append_interface(router),0,0,0.0,2308
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(ri, 'get_floating_ips') as fips, \",0,0,0.0,2309
707890ef22c203389f61ddfe8025f1b0e2afe819,router[l3_constants.INTERFACE_KEY][0]),0,0,0.0,2310
707890ef22c203389f61ddfe8025f1b0e2afe819,'fixed_ips': [{'subnet_id': l3_test_common.get_subnet_id(,0,0,0.0,2311
707890ef22c203389f61ddfe8025f1b0e2afe819,v6_ext_gw_with_sub=False),0,0,0.0,2312
707890ef22c203389f61ddfe8025f1b0e2afe819,ri),0,0,0.0,2313
707890ef22c203389f61ddfe8025f1b0e2afe819,"router,",0,0,0.0,2314
707890ef22c203389f61ddfe8025f1b0e2afe819,") as (mock_get_ip_addr, mock_get_router_networks):",1,0,0.0,2315
707890ef22c203389f61ddfe8025f1b0e2afe819,"router['id'],",0,0,0.0,2316
707890ef22c203389f61ddfe8025f1b0e2afe819,"HOSTNAME,",0,0,0.0,2317
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.tests.common import l3_test_common,0,0,0.0,2318
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import dvr_local_router,0,0,0.0,2319
707890ef22c203389f61ddfe8025f1b0e2afe819,from neutron.agent.l3 import dvr_edge_router as dvr_router,0,0,0.0,2320
707890ef22c203389f61ddfe8025f1b0e2afe819,return_value=networks),1,0,0.0,2321
707890ef22c203389f61ddfe8025f1b0e2afe819,"'_get_router_networks',",1,0,0.0,2322
707890ef22c203389f61ddfe8025f1b0e2afe819,"return_value=expected),",1,0,0.0,2323
707890ef22c203389f61ddfe8025f1b0e2afe819,"'_get_ports_for_remote_address',",1,0,0.0,2324
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(self.handler,",1,0,0.0,2325
707890ef22c203389f61ddfe8025f1b0e2afe819,"'_get_router_networks',",0,0,0.0,2326
707890ef22c203389f61ddfe8025f1b0e2afe819,"'_get_ports_for_remote_address',",0,0,0.0,2327
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._snat_redirect_remove.assert_called_with(,1,0,0.0,2328
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_external_gateway_updated(self):,1,0,0.0,2329
707890ef22c203389f61ddfe8025f1b0e2afe819,"[{'fixed_ips': [{'ip_address': '20.0.0.30',",1,0,0.0,2330
707890ef22c203389f61ddfe8025f1b0e2afe819,'ip_cidr': '20.0.0.30/24'}],1,0,0.0,2331
707890ef22c203389f61ddfe8025f1b0e2afe819,"'network_id': fake_network_id,",1,0,0.0,2332
707890ef22c203389f61ddfe8025f1b0e2afe819,"'binding:host_id': 'myhost',",1,0,0.0,2333
707890ef22c203389f61ddfe8025f1b0e2afe819,ri._set_subnet_arp_info(ports[0]),1,0,0.0,2334
707890ef22c203389f61ddfe8025f1b0e2afe819,'fixed_ips': [{'ip_address': '1.2.3.4'}]}],1,0,0.0,2335
707890ef22c203389f61ddfe8025f1b0e2afe819,"'subnet_id': _get_subnet_id(ports[0]),",1,0,0.0,2336
707890ef22c203389f61ddfe8025f1b0e2afe819,source_cidrs.append(source_cidr),1,0,0.0,2337
707890ef22c203389f61ddfe8025f1b0e2afe819,prefix),1,0,0.0,2338
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.send_arp.assert_called_once_with(ri.ns_name, interface_name,",1,0,0.0,2339
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _prepare_ext_gw_test(self, ri):",1,0,0.0,2340
707890ef22c203389f61ddfe8025f1b0e2afe819,"fip_gw_port,",1,0,0.0,2341
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port,",1,0,0.0,2342
707890ef22c203389f61ddfe8025f1b0e2afe819,"['20.0.0.30/24'],",1,0,0.0,2343
707890ef22c203389f61ddfe8025f1b0e2afe819,"'gateway': '20.0.0.1',",1,0,0.0,2344
707890ef22c203389f61ddfe8025f1b0e2afe819,"'20.0.0.30', mock.ANY)",1,0,0.0,2345
707890ef22c203389f61ddfe8025f1b0e2afe819,"interface_name,",1,0,0.0,2346
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.send_arp.assert_called_once_with(ri.ns_name,",1,0,0.0,2347
707890ef22c203389f61ddfe8025f1b0e2afe819,"def _test_external_gateway_action(self, action, router):",1,0,0.0,2348
707890ef22c203389f61ddfe8025f1b0e2afe819,ri.get_internal_device_name(port['id'])),1,0,0.0,2349
707890ef22c203389f61ddfe8025f1b0e2afe819,"port,",1,0,0.0,2350
707890ef22c203389f61ddfe8025f1b0e2afe819,"sn_port['fixed_ips'][0]['ip_address'],",1,0,0.0,2351
707890ef22c203389f61ddfe8025f1b0e2afe819,mock.patch.object(,1,0,0.0,2352
707890ef22c203389f61ddfe8025f1b0e2afe819,sub_info):,1,0,0.0,2353
707890ef22c203389f61ddfe8025f1b0e2afe819,) as mock_get_router_networks:,0,0,0.0,2354
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(ri, 'internal_network_added'",0,0,0.0,2355
707890ef22c203389f61ddfe8025f1b0e2afe819,'_get_router_networks',0,0,0.0,2356
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(self.handler,",0,0,0.0,2357
707890ef22c203389f61ddfe8025f1b0e2afe819,") as mock_get_ip_addr,\",0,0,0.0,2358
707890ef22c203389f61ddfe8025f1b0e2afe819,'_get_ports_for_remote_address',0,0,0.0,2359
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(self.handler,",0,0,0.0,2360
707890ef22c203389f61ddfe8025f1b0e2afe819,) as external_gateway_added:,0,0,0.0,2361
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(ri, 'external_gateway_added'",0,0,0.0,2362
707890ef22c203389f61ddfe8025f1b0e2afe819,") as external_gateway_removed,\",0,0,0.0,2363
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(ri, 'external_gateway_removed'",0,0,0.0,2364
707890ef22c203389f61ddfe8025f1b0e2afe819,") as internal_network_added,\",0,0,0.0,2365
707890ef22c203389f61ddfe8025f1b0e2afe819,") as internal_network_removed,\",0,0,0.0,2366
707890ef22c203389f61ddfe8025f1b0e2afe819,def test_process_ipv6_only_gw(self):,1,0,0.0,2367
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(ri, 'internal_network_removed'",0,0,0.0,2368
707890ef22c203389f61ddfe8025f1b0e2afe819,) as fip_gw_port:,0,0,0.0,2369
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(ri, 'get_floating_agent_gw_interface'",0,0,0.0,2370
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(ri, 'get_floating_ips') as fips,\",0,0,0.0,2371
707890ef22c203389f61ddfe8025f1b0e2afe819,"mock.patch.object(proxy.client, 'prepare') as prepare_mock:",0,0,0.0,2372
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(proxy.client, 'call') as rpc_mock,\",0,0,0.0,2373
707890ef22c203389f61ddfe8025f1b0e2afe819,"'ip_address': '20.0.0.30', 'subnet_id': _uuid()",1,0,0.0,2374
707890ef22c203389f61ddfe8025f1b0e2afe819,"self.assertEqual(orig_nat_rules, new_nat_rules)",1,0,0.0,2375
707890ef22c203389f61ddfe8025f1b0e2afe819,self.assertFalse(external_gateway_nat_rules.called),1,0,0.0,2376
707890ef22c203389f61ddfe8025f1b0e2afe819,# There should be no change with the NAT rules,1,0,0.0,2377
707890ef22c203389f61ddfe8025f1b0e2afe819,"with mock.patch.object(ri, 'get_floating_ips') as fips,\",1,0,0.0,2378
