commit_id,line,line_level_label,count,line_score,row
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.error(_(""Unable to execute %(cmd)s. Exception: %(exception)s""),",1,3,1.0,1
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.error(_LE(""Unable to execute %(cmd)s. Exception: """,0,2,0.6666666666666666,2
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.error(_(""Unable to execute %(cmd)s. """,1,2,0.6666666666666666,3
aa85a97ca2dcb06996ed133d864705f1dca722b1,# native gives a more specific exception than vsctl,1,2,0.6666666666666666,4
aa85a97ca2dcb06996ed133d864705f1dca722b1,"tools.setup_mock_calls(self.execute, expected_calls_and_values)",1,2,0.6666666666666666,5
aa85a97ca2dcb06996ed133d864705f1dca722b1,"tools.verify_mock_calls(self.execute, expected_calls_and_values)",1,2,0.6666666666666666,6
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.error(_LE(""Unable to execute %(cmd)s. """,0,2,0.6666666666666666,7
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""list-ports"", self.BR_NAME), RuntimeError()),",1,1,0.3333333333333333,8
aa85a97ca2dcb06996ed133d864705f1dca722b1,tunnel_csum = False,1,1,0.3333333333333333,9
aa85a97ca2dcb06996ed133d864705f1dca722b1,"expected = {'2ab72a72-4407-4ef3-806a-b2172f3e4dc7': 2, 'patch-tun': 1}",1,1,0.3333333333333333,10
aa85a97ca2dcb06996ed133d864705f1dca722b1,# A vif port on this bridge:,1,1,0.3333333333333333,11
aa85a97ca2dcb06996ed133d864705f1dca722b1,# A vif port on this bridge not yet configured,1,1,0.3333333333333333,12
aa85a97ca2dcb06996ed133d864705f1dca722b1,"# than one vif is described in data, the rest must be declared",1,1,0.3333333333333333,13
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""list"", ""Interface"", ""tap99""), RuntimeError()),",1,1,0.3333333333333333,14
aa85a97ca2dcb06996ed133d864705f1dca722b1,br = 'br-int',1,1,0.3333333333333333,15
aa85a97ca2dcb06996ed133d864705f1dca722b1,"# Only the last information list in 'data' is used, so if more",1,1,0.3333333333333333,16
aa85a97ca2dcb06996ed133d864705f1dca722b1,expected_calls_and_values = [,1,1,0.3333333333333333,17
aa85a97ca2dcb06996ed133d864705f1dca722b1,"br = ovs_lib.OVSBridge(""foo"")",1,1,0.3333333333333333,18
aa85a97ca2dcb06996ed133d864705f1dca722b1,dont_fragment = False,1,1,0.3333333333333333,19
aa85a97ca2dcb06996ed133d864705f1dca722b1,# Another vif port on this bridge not yet configured,1,1,0.3333333333333333,20
aa85a97ca2dcb06996ed133d864705f1dca722b1,"# Each element is a tuple of (expected mock call, return_value)",1,1,0.3333333333333333,21
aa85a97ca2dcb06996ed133d864705f1dca722b1,"expected = {'2ab72a72-4407-4ef3-806a-b2172f3e4dc7': 2, 'patch-tun': 1}",1,1,0.3333333333333333,22
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""Exception: %(exception)s""),",0,1,0.3333333333333333,23
aa85a97ca2dcb06996ed133d864705f1dca722b1,cmd = self._vsctl_args(*args),1,1,0.3333333333333333,24
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""Exception: %(exception)s""),",1,1,0.3333333333333333,25
aa85a97ca2dcb06996ed133d864705f1dca722b1,ports = self.br.get_vif_ports(),0,1,0.3333333333333333,26
aa85a97ca2dcb06996ed133d864705f1dca722b1,ports = self.br.get_vif_ports(),1,1,0.3333333333333333,27
aa85a97ca2dcb06996ed133d864705f1dca722b1,"expected = {'2ab72a72-4407-4ef3-806a-b2172f3e4dc7': 2, 'patch-tun': 1}",0,1,0.3333333333333333,28
aa85a97ca2dcb06996ed133d864705f1dca722b1,from neutron.tests import tools,1,1,0.3333333333333333,29
aa85a97ca2dcb06996ed133d864705f1dca722b1,"# direct vsctl commands, need to ensure that ovsdb_interface = 'vsctl'",1,1,0.3333333333333333,30
aa85a97ca2dcb06996ed133d864705f1dca722b1,"cmd = ['ovs-vsctl', self.TO, '--oneline', '--format=json', '--']",1,1,0.3333333333333333,31
aa85a97ca2dcb06996ed133d864705f1dca722b1,cmd += args,1,1,0.3333333333333333,32
aa85a97ca2dcb06996ed133d864705f1dca722b1,return cmd,1,1,0.3333333333333333,33
aa85a97ca2dcb06996ed133d864705f1dca722b1,"u'qr-76d9e6b6-21': 1,",1,0,0.0,34
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['tape1400310-e6', 1],",1,0,0.0,35
aa85a97ca2dcb06996ed133d864705f1dca722b1,"u'patch-tun': [],",1,0,0.0,36
aa85a97ca2dcb06996ed133d864705f1dca722b1,"{u'int-br-eth2': [],",1,0,0.0,37
aa85a97ca2dcb06996ed133d864705f1dca722b1,"port_tags,",1,0,0.0,38
aa85a97ca2dcb06996ed133d864705f1dca722b1,port_tags = self.br.get_port_tag_dict(),1,0,0.0,39
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""--columns=name,tag"", ""list"", ""Port""),",1,0,0.0,40
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'\\n'.join((iface for iface, tag in data))),",1,0,0.0,41
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""list-ports"", self.BR_NAME),",1,0,0.0,42
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_port_tag_dict(self):,1,0,0.0,43
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['tapce5318ff-78', 1],",1,0,0.0,44
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['qr-76d9e6b6-21', 1],",1,0,0.0,45
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['patch-tun', set()],",1,0,0.0,46
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['int-br-eth2', set()],",1,0,0.0,47
aa85a97ca2dcb06996ed133d864705f1dca722b1,"headings = ['name', 'tag']",1,0,0.0,48
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""list-ports"", self.BR_NAME), 'tap99\n'),",1,0,0.0,49
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_set_list_interface_error(self):,1,0,0.0,50
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertRaises(RuntimeError, self.br.get_vif_port_set)",1,0,0.0,51
aa85a97ca2dcb06996ed133d864705f1dca722b1,u'tape1400310-e6': 1},1,0,0.0,52
aa85a97ca2dcb06996ed133d864705f1dca722b1,"u'tapce5318ff-78': 1,",1,0,0.0,53
aa85a97ca2dcb06996ed133d864705f1dca722b1,new_timeout = 5,1,0,0.0,54
aa85a97ca2dcb06996ed133d864705f1dca722b1,),1,0,0.0,55
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._verify_vsctl_mock(""iface-to-br"", iface)",1,0,0.0,56
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.assertIsNone(self.br.get_bridge_for_iface(iface)),1,0,0.0,57
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.side_effect = Exception,1,0,0.0,58
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_iface_to_br_handles_ovs_vsctl_exception(self):,1,0,0.0,59
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_iface_to_br(new_timeout),1,0,0.0,60
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertRaises(RuntimeError, self.br.get_vif_ports)",1,0,0.0,61
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_iface_to_br_non_default_timeout(self):,1,0,0.0,62
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_iface_to_br(),1,0,0.0,63
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_iface_to_br(self):,1,0,0.0,64
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(self.br.get_bridge_for_iface(iface), br)",1,0,0.0,65
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_clear_db_attribute(self):,1,0,0.0,66
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.return_value = 'br-int',1,0,0.0,67
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.vsctl_timeout = exp_timeout,1,0,0.0,68
aa85a97ca2dcb06996ed133d864705f1dca722b1,if exp_timeout:,1,0,0.0,69
aa85a97ca2dcb06996ed133d864705f1dca722b1,iface = 'tap0',1,0,0.0,70
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _test_iface_to_br(self, exp_timeout=None):",1,0,0.0,71
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._verify_vsctl_mock(""clear"", ""Port"", pname, ""tag"")",1,0,0.0,72
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.br.clear_db_attribute(""Port"", pname, ""tag"")",1,0,0.0,73
aa85a97ca2dcb06996ed133d864705f1dca722b1,"pname = ""tap77""",1,0,0.0,74
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_set_list_ports_error(self):,1,0,0.0,75
aa85a97ca2dcb06996ed133d864705f1dca722b1,id_key = 'iface-id',1,0,0.0,76
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_ports_list_ports_error(self):,1,0,0.0,77
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_add_vxlan_csum_tunnel_port(self):,1,0,0.0,78
aa85a97ca2dcb06996ed133d864705f1dca722b1,tos = 8,1,0,0.0,79
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_add_vxlan_tos_tunnel_port(self):,1,0,0.0,80
aa85a97ca2dcb06996ed133d864705f1dca722b1,"dont_fragment, tunnel_csum),",1,0,0.0,81
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:csum=true""])",1,0,0.0,82
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:out_key=flow"",",1,0,0.0,83
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:df_default=true"",",1,0,0.0,84
aa85a97ca2dcb06996ed133d864705f1dca722b1,tunnel_csum = True,1,0,0.0,85
aa85a97ca2dcb06996ed133d864705f1dca722b1,dont_fragment = True,1,0,0.0,86
aa85a97ca2dcb06996ed133d864705f1dca722b1,"dont_fragment),",1,0,0.0,87
aa85a97ca2dcb06996ed133d864705f1dca722b1,"dont_fragment, tunnel_csum, tos),",1,0,0.0,88
aa85a97ca2dcb06996ed133d864705f1dca722b1,"constants.TYPE_VXLAN, vxlan_udp_port,",1,0,0.0,89
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.br.add_tunnel_port(pname, remote_ip, local_ip,",1,0,0.0,90
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:df_default=false"",",1,0,0.0,91
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:dst_port="" + vxlan_udp_port,",1,0,0.0,92
aa85a97ca2dcb06996ed133d864705f1dca722b1,"command.extend([""type="" + constants.TYPE_VXLAN,",1,0,0.0,93
aa85a97ca2dcb06996ed133d864705f1dca722b1,"command = [""--may-exist"", ""add-port"", self.BR_NAME, pname]",1,0,0.0,94
aa85a97ca2dcb06996ed133d864705f1dca722b1,"vxlan_udp_port = ""9999""",1,0,0.0,95
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_add_vxlan_fragmented_tunnel_port(self):,1,0,0.0,96
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:tos="" + str(tos)])",1,0,0.0,97
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_to_ofport_map(self):,1,0,0.0,98
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(set(['tap99id']), port_set)",1,0,0.0,99
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['set', []]],",1,0,0.0,100
aa85a97ca2dcb06996ed133d864705f1dca722b1,port_set = self.br.get_vif_port_set(),1,0,0.0,101
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._encode_ovs_json(headings, data)),",1,0,0.0,102
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""list"", ""Interface"", 'tap99', 'tun22'),",1,0,0.0,103
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""--columns=name,external_ids,ofport"",",1,0,0.0,104
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""--if-exists"",",1,0,0.0,105
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""list-ports"", self.BR_NAME), 'tap99\\ntun22'),",1,0,0.0,106
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['bogus', {}, 2],",1,0,0.0,107
aa85a97ca2dcb06996ed133d864705f1dca722b1,# Non-vif port on this bridge:,1,0,0.0,108
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['tap97', {id_key: 'tap97id', 'attached-mac': 'tap97mac'},",1,0,0.0,109
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.return_value = OVSLIST_WITH_UNSET_PORT,1,0,0.0,110
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['tap98', {id_key: 'tap98id', 'attached-mac': 'tap98mac'}, []],",1,0,0.0,111
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['tap99', {id_key: 'tap99id', 'attached-mac': 'tap99mac'}, 1],",1,0,0.0,112
aa85a97ca2dcb06996ed133d864705f1dca722b1,data = [,1,0,0.0,113
aa85a97ca2dcb06996ed133d864705f1dca722b1,"headings = ['name', 'external_ids', 'ofport']",1,0,0.0,114
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertRaises(RuntimeError, self.br.delete_ports, all_ports=False)",1,0,0.0,115
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_set(self):,1,0,0.0,116
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(expected, results)",1,0,0.0,117
aa85a97ca2dcb06996ed133d864705f1dca722b1,results = self.br.get_vif_port_to_ofport_map(),1,0,0.0,118
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_delete_neutron_ports_list_error(self):,1,0,0.0,119
aa85a97ca2dcb06996ed133d864705f1dca722b1,if not br_name:,1,0,0.0,120
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_bridges_not_default_timeout(self):,1,0,0.0,121
aa85a97ca2dcb06996ed133d864705f1dca722b1,"bridges = ['br-int', 'br-ex']",1,0,0.0,122
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.vsctl_timeout = 1,1,0,0.0,123
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._assert_vif_port(vif_port, ofport=1337, mac=""de:ad:be:ef:13:37"")",1,0,0.0,124
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'tap99id', data, extra_calls_and_values=extra_calls_and_values)",1,0,0.0,125
aa85a97ca2dcb06996ed133d864705f1dca722b1,vif_port = self._test_get_vif_port_by_id(,1,0,0.0,126
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""iface-to-br"", ""dummytap""), ""br-ext"")]",1,0,0.0,127
aa85a97ca2dcb06996ed133d864705f1dca722b1,extra_calls_and_values = [,1,0,0.0,128
aa85a97ca2dcb06996ed133d864705f1dca722b1,"[[""map"", external_ids], ""tap99"", 1337]]",1,0,0.0,129
aa85a97ca2dcb06996ed133d864705f1dca722b1,"data = [[[""map"", external_ids], ""dummytap"", 1],",1,0,0.0,130
aa85a97ca2dcb06996ed133d864705f1dca722b1,"[""attached-mac"", ""de:ad:be:ef:13:37""]]",1,0,0.0,131
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_by_port_id_multiple_vifs(self):,1,0,0.0,132
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""br-ext""))",1,0,0.0,133
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertIsNone(self._test_get_vif_port_by_id('tap99id', data,",1,0,0.0,134
aa85a97ca2dcb06996ed133d864705f1dca722b1,"data = [[[""map"", external_ids], ""tap99"", 1]]",1,0,0.0,135
aa85a97ca2dcb06996ed133d864705f1dca722b1,"[""iface-status"", ""active""]]",1,0,0.0,136
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_by_port_id_different_bridge(self):,1,0,0.0,137
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertIsNone(self._test_get_vif_port_by_id('whatever', []))",1,0,0.0,138
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_by_port_id_with_no_data(self):,1,0,0.0,139
aa85a97ca2dcb06996ed133d864705f1dca722b1,"ofport=-1, mac=""aa:bb:cc:dd:ee:ff"")",1,0,0.0,140
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_by_port_id_with_invalid_ofport(self):,1,0,0.0,141
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_default_cookie(self):,1,0,0.0,142
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.br = ovs_lib.OVSBridge(""br-tun"")",1,0,0.0,143
aa85a97ca2dcb06996ed133d864705f1dca722b1,uuid_stamp1 = self.br.default_cookie,1,0,0.0,144
aa85a97ca2dcb06996ed133d864705f1dca722b1,with ovs_lib.DeferredOVSBridge(self.br) as deferred_br:,1,0,0.0,145
aa85a97ca2dcb06996ed133d864705f1dca722b1,deferred.apply_flows(),1,0,0.0,146
aa85a97ca2dcb06996ed133d864705f1dca722b1,"deferred.add_flow(in_port=1, actions='drop')",1,0,0.0,147
aa85a97ca2dcb06996ed133d864705f1dca722b1,"with mock.patch.object(utils, ""execute"", spec=utils.execute) as mexec:",1,0,0.0,148
aa85a97ca2dcb06996ed133d864705f1dca722b1,deferred = br.deferred(use_bundle=True),1,0,0.0,149
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_add_flow_with_bundle(self):,1,0,0.0,150
aa85a97ca2dcb06996ed133d864705f1dca722b1,f.assert_has_calls(expected_calls),1,0,0.0,151
aa85a97ca2dcb06996ed133d864705f1dca722b1,deferred_br.mod_flow(actions='drop'),1,0,0.0,152
aa85a97ca2dcb06996ed133d864705f1dca722b1,deferred_br.add_flow(actions='drop'),1,0,0.0,153
aa85a97ca2dcb06996ed133d864705f1dca722b1,"with mock.patch.object(self.br, 'run_ofctl') as f:",1,0,0.0,154
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(uuid_stamp1, self.br.default_cookie)",1,0,0.0,155
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'cookie=' + stamp + ',actions=drop')",1,0,0.0,156
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mock.call('mod-flows', ['-'],",1,0,0.0,157
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'cookie=' + stamp + ',actions=drop'),",1,0,0.0,158
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'hard_timeout=0,idle_timeout=0,priority=1,'",1,0,0.0,159
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mock.call('add-flows', ['-'],",1,0,0.0,160
aa85a97ca2dcb06996ed133d864705f1dca722b1,expected_calls = [,1,0,0.0,161
aa85a97ca2dcb06996ed133d864705f1dca722b1,stamp = str(self.br.default_cookie),1,0,0.0,162
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_cookie_passed_to_addmod(self):,1,0,0.0,163
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._test_get_vif_port_by_id_with_data(mac=""aa:bb:cc:dd:ee:ff"")",1,0,0.0,164
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_by_port_id_without_ofport(self):,1,0,0.0,165
aa85a97ca2dcb06996ed133d864705f1dca722b1,"ofport=1, mac=""aa:bb:cc:dd:ee:ff"")",1,0,0.0,166
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'external_ids:iface-id=%s' % iface_id,",1,0,0.0,167
aa85a97ca2dcb06996ed133d864705f1dca722b1,expected_calls_and_values.extend(extra_calls_and_values),1,0,0.0,168
aa85a97ca2dcb06996ed133d864705f1dca722b1,if extra_calls_and_values:,1,0,0.0,169
aa85a97ca2dcb06996ed133d864705f1dca722b1,# in the argument 'expected_calls_and_values'.,1,0,0.0,170
aa85a97ca2dcb06996ed133d864705f1dca722b1,br_name = self.BR_NAME,1,0,0.0,171
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.br.add_tunnel_port(pname, remote_ip, local_ip),",1,0,0.0,172
aa85a97ca2dcb06996ed133d864705f1dca722b1,if data:,1,0,0.0,173
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._encode_ovs_json(headings, data))]",1,0,0.0,174
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'external_ids:attached-mac!=""""'),",1,0,0.0,175
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""Interface"",",1,0,0.0,176
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""iface-to-br"",",1,0,0.0,177
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""--columns=external_ids,name,ofport"", ""find"",",1,0,0.0,178
aa85a97ca2dcb06996ed133d864705f1dca722b1,"headings = ['external_ids', 'name', 'ofport']",1,0,0.0,179
aa85a97ca2dcb06996ed133d864705f1dca722b1,extra_calls_and_values=None):,1,0,0.0,180
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _test_get_vif_port_by_id(self, iface_id, data, br_name=None,",1,0,0.0,181
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._verify_vsctl_mock(""list-br"")",1,0,0.0,182
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(self.br.get_bridges(), bridges)",1,0,0.0,183
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.return_value = 'br-int\\nbr-ex\n',1,0,0.0,184
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.vsctl_timeout = 5,1,0,0.0,185
aa85a97ca2dcb06996ed133d864705f1dca722b1,expected_calls_and_values.append(,1,0,0.0,186
aa85a97ca2dcb06996ed133d864705f1dca722b1,"data[-1][headings.index('name')]), br_name))",1,0,0.0,187
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_get_vif_port_by_id_with_data(,1,0,0.0,188
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _test_get_vif_port_by_id_with_data(self, ofport=None, mac=None):",1,0,0.0,189
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_by_port_id_with_ofport(self):,1,0,0.0,190
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._assert_vif_port(vif_port, ofport, mac)",1,0,0.0,191
aa85a97ca2dcb06996ed133d864705f1dca722b1,"vif_port = self._test_get_vif_port_by_id('tap99id', data)",1,0,0.0,192
aa85a97ca2dcb06996ed133d864705f1dca722b1,"ofport if ofport else [""set"", []]]]",1,0,0.0,193
aa85a97ca2dcb06996ed133d864705f1dca722b1,"data = [[[""map"", external_ids], ""tap99"",",1,0,0.0,194
aa85a97ca2dcb06996ed133d864705f1dca722b1,"[""attached-mac"", mac]]",1,0,0.0,195
aa85a97ca2dcb06996ed133d864705f1dca722b1,"[""iface-status"", ""active""],",1,0,0.0,196
aa85a97ca2dcb06996ed133d864705f1dca722b1,"external_ids = [[""iface-id"", ""tap99id""],",1,0,0.0,197
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ofport, vif_port.ofport)",1,0,0.0,198
aa85a97ca2dcb06996ed133d864705f1dca722b1,vif_port = self.br.get_vif_port_by_id(iface_id),1,0,0.0,199
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual('tap99', vif_port.port_name)",1,0,0.0,200
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(mac, vif_port.vif_mac)",1,0,0.0,201
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual('tap99id', vif_port.vif_id)",1,0,0.0,202
aa85a97ca2dcb06996ed133d864705f1dca722b1,return,1,0,0.0,203
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertIsNone(vif_port, ""Got %s"" % vif_port)",1,0,0.0,204
aa85a97ca2dcb06996ed133d864705f1dca722b1,if not ofport or ofport == -1 or not mac:,1,0,0.0,205
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _assert_vif_port(self, vif_port, ofport=None, mac=None):",1,0,0.0,206
aa85a97ca2dcb06996ed133d864705f1dca722b1,return vif_port,1,0,0.0,207
aa85a97ca2dcb06996ed133d864705f1dca722b1,ofport),1,0,0.0,208
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_add_tunnel_port(self):,1,0,0.0,209
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.assertEqual(,1,0,0.0,210
aa85a97ca2dcb06996ed133d864705f1dca722b1,],1,0,0.0,211
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].vif_mac, mac)",1,0,0.0,212
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].vif_id, vif_id)",1,0,0.0,213
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].ofport, ofport)",1,0,0.0,214
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].port_name, pname)",1,0,0.0,215
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(1, len(ports))",1,0,0.0,216
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.get_xapi_iface_id = mock.Mock(return_value=vif_id),1,0,0.0,217
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'name': pname, 'ofport': ofport, 'external_ids': external_ids}])",1,0,0.0,218
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.get_ports_attributes = mock.Mock(return_value=[{,1,0,0.0,219
aa85a97ca2dcb06996ed133d864705f1dca722b1,"external_ids = {""attached-mac"": mac, id_field: vif_id}",1,0,0.0,220
aa85a97ca2dcb06996ed133d864705f1dca722b1,id_field = 'xs-vif-uuid' if is_xen else 'iface-id',1,0,0.0,221
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mac = ""ca:fe:de:ad:be:ef""",1,0,0.0,222
aa85a97ca2dcb06996ed133d864705f1dca722b1,vif_id = uuidutils.generate_uuid(),1,0,0.0,223
aa85a97ca2dcb06996ed133d864705f1dca722b1,ofport = 6,1,0,0.0,224
aa85a97ca2dcb06996ed133d864705f1dca722b1,"pname = ""tap99""",1,0,0.0,225
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _test_get_vif_ports(self, is_xen=False):",1,0,0.0,226
aa85a97ca2dcb06996ed133d864705f1dca722b1,id_key = 'iface-id',0,0,0.0,227
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_set(self):,0,0,0.0,228
aa85a97ca2dcb06996ed133d864705f1dca722b1,if_exists=True),0,0,0.0,229
aa85a97ca2dcb06996ed133d864705f1dca722b1,"columns=['name', 'external_ids', 'ofport'],",0,0,0.0,230
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].switch.br_name, self.BR_NAME)",1,0,0.0,231
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.get_ports_attributes.assert_called_once_with(,1,0,0.0,232
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'Interface',",1,0,0.0,233
aa85a97ca2dcb06996ed133d864705f1dca722b1,get_xapi_iface_id.assert_called_once_with('tap99id'),1,0,0.0,234
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_get_vif_ports(is_xen=True),1,0,0.0,235
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_ports_xen(self):,1,0,0.0,236
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_get_vif_ports(is_xen=False),1,0,0.0,237
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_ports_nonxen(self):,1,0,0.0,238
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(expected, results)",1,0,0.0,239
aa85a97ca2dcb06996ed133d864705f1dca722b1,results = self.br.get_vif_port_to_ofport_map(),1,0,0.0,240
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.return_value = OVSLIST_WITH_UNSET_PORT,1,0,0.0,241
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_to_ofport_map(self):,1,0,0.0,242
aa85a97ca2dcb06996ed133d864705f1dca722b1,get_xapi_iface_id.return_value = 'tap99id',1,0,0.0,243
aa85a97ca2dcb06996ed133d864705f1dca722b1,"columns=['name', 'external_ids', 'ofport'],",1,0,0.0,244
aa85a97ca2dcb06996ed133d864705f1dca722b1,'get_xapi_iface_id').start(),1,0,0.0,245
aa85a97ca2dcb06996ed133d864705f1dca722b1,"get_xapi_iface_id = mock.patch.object(self.br,",1,0,0.0,246
aa85a97ca2dcb06996ed133d864705f1dca722b1,id_key = 'iface-id',1,0,0.0,247
aa85a97ca2dcb06996ed133d864705f1dca722b1,else:,1,0,0.0,248
aa85a97ca2dcb06996ed133d864705f1dca722b1,id_key = 'xs-vif-uuid',1,0,0.0,249
aa85a97ca2dcb06996ed133d864705f1dca722b1,if is_xen:,1,0,0.0,250
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _test_get_vif_port_set(self, is_xen):",1,0,0.0,251
aa85a97ca2dcb06996ed133d864705f1dca722b1,if_exists=True),1,0,0.0,252
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'Interface',",0,0,0.0,253
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.get_ports_attributes.assert_called_once_with(,0,0,0.0,254
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].switch.br_name, self.BR_NAME)",0,0,0.0,255
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_LE(""Unable to retrieve bridges. Exception: %s""), e)",0,0,0.0,256
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_(""OVS flows could not be applied on bridge %s""),",1,0,0.0,257
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.warn(_(""Found failed openvswitch port: %s""), row)",1,0,0.0,258
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.warn(_(""Found not yet ready openvswitch port: %s""), row)",1,0,0.0,259
aa85a97ca2dcb06996ed133d864705f1dca722b1,'installed.')),1,0,0.0,260
aa85a97ca2dcb06996ed133d864705f1dca722b1,'that an openvswitch version that supports VXLAN is ',1,0,0.0,261
aa85a97ca2dcb06996ed133d864705f1dca722b1,LOG.error(_('Unable to create VXLAN tunnel port. Please ensure ',1,0,0.0,262
aa85a97ca2dcb06996ed133d864705f1dca722b1,"from neutron.openstack.common.gettextutils import _LI, _LW",1,0,0.0,263
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_LE(""Bridge %s not found.""), bridge)",0,0,0.0,264
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_LE(""Interface %s not found.""), iface)",0,0,0.0,265
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_(""Unable to retrieve bridges. Exception: %s""), e)",1,0,0.0,266
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_LE(""OVS flows could not be applied on bridge %s""),",0,0,0.0,267
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.warn(_LW(""Found failed openvswitch port: %s""), row)",0,0,0.0,268
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.warn(_LW(""Found not yet ready openvswitch port: %s""), row)",0,0,0.0,269
aa85a97ca2dcb06996ed133d864705f1dca722b1,'installed.')),0,0,0.0,270
aa85a97ca2dcb06996ed133d864705f1dca722b1,'that an openvswitch version that supports VXLAN is ',0,0,0.0,271
aa85a97ca2dcb06996ed133d864705f1dca722b1,LOG.error(_LE('Unable to create VXLAN tunnel port. Please ensure ',0,0,0.0,272
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""%(exception)s""),",0,0,0.0,273
aa85a97ca2dcb06996ed133d864705f1dca722b1,"from neutron.openstack.common.gettextutils import _LE, _LI, _LW",0,0,0.0,274
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_(""Interface %s not found.""), iface)",1,0,0.0,275
aa85a97ca2dcb06996ed133d864705f1dca722b1,"LOG.exception(_(""Bridge %s not found.""), bridge)",1,0,0.0,276
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].vif_mac, mac)",0,0,0.0,277
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mac = ""ca:fe:de:ad:be:ef""",0,0,0.0,278
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].vif_id, vif_id)",0,0,0.0,279
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].ofport, ofport)",0,0,0.0,280
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(ports[0].port_name, pname)",0,0,0.0,281
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(1, len(ports))",0,0,0.0,282
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'name': pname, 'ofport': ofport, 'external_ids': external_ids}])",0,0,0.0,283
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.get_ports_attributes = mock.Mock(return_value=[{,0,0,0.0,284
aa85a97ca2dcb06996ed133d864705f1dca722b1,"external_ids = {""attached-mac"": mac, id_field: vif_id}",0,0,0.0,285
aa85a97ca2dcb06996ed133d864705f1dca722b1,id_field = 'iface-id',0,0,0.0,286
aa85a97ca2dcb06996ed133d864705f1dca722b1,vif_id = uuidutils.generate_uuid(),0,0,0.0,287
aa85a97ca2dcb06996ed133d864705f1dca722b1,from oslo.utils import excutils,0,0,0.0,288
aa85a97ca2dcb06996ed133d864705f1dca722b1,ofport = 6,0,0,0.0,289
aa85a97ca2dcb06996ed133d864705f1dca722b1,"pname = ""tap99""",0,0,0.0,290
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_ports(self):,0,0,0.0,291
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(expected, results)",0,0,0.0,292
aa85a97ca2dcb06996ed133d864705f1dca722b1,results = self.br.get_vif_port_to_ofport_map(),0,0,0.0,293
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.return_value = OVSLIST_WITH_UNSET_PORT,0,0,0.0,294
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_to_ofport_map(self):,0,0,0.0,295
aa85a97ca2dcb06996ed133d864705f1dca722b1,from neutron.openstack.common import excutils,1,0,0.0,296
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_set_nonxen(self):,1,0,0.0,297
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_get_vif_port_set(False),1,0,0.0,298
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_vif_port_set_xen(self):,1,0,0.0,299
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_ofctl_of_version_use_highest(self):,1,0,0.0,300
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.reset_mock(),1,0,0.0,301
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.use_at_least_protocol(p_const.OPENFLOW12),1,0,0.0,302
aa85a97ca2dcb06996ed133d864705f1dca722b1,]),1,0,0.0,303
aa85a97ca2dcb06996ed133d864705f1dca722b1,run_as_root=mock.ANY),1,0,0.0,304
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mock.ANY, '-'], process_input=mock.ANY,",1,0,0.0,305
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mock.call(['ovs-ofctl', 'add-flows', '-O', p_const.OPENFLOW10,",1,0,0.0,306
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.assert_has_calls([,1,0,0.0,307
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.br.add_flow(in_port=1, actions=""drop"")",1,0,0.0,308
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(self.br.get_port_mac(pname), expected_result)",1,0,0.0,309
aa85a97ca2dcb06996ed133d864705f1dca722b1,"run_as_root=mock.ANY),",1,0,0.0,310
aa85a97ca2dcb06996ed133d864705f1dca722b1,expected_result = '00:01:02:03:04:05',1,0,0.0,311
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['mac_in_use'], [['00:01:02:03:04:05']])",1,0,0.0,312
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_port_mac(self):,1,0,0.0,313
aa85a97ca2dcb06996ed133d864705f1dca722b1,ovs_lib.INVALID_OFPORT),1,0,0.0,314
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._test_get_port_ofport(ovs_lib.INVALID_OFPORT,",1,0,0.0,315
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_port_ofport_returns_invalid_for_invalid(self):,1,0,0.0,316
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._test_get_port_ofport([], ovs_lib.INVALID_OFPORT)",1,0,0.0,317
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_port_ofport_returns_invalid_ofport_for_non_int(self):,1,0,0.0,318
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mock.call(['ovs-ofctl', 'add-flows', '-O', p_const.OPENFLOW12,",1,0,0.0,319
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_ofctl_of_version_keep_highest(self):,1,0,0.0,320
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_get_port_ofport_succeeds_for_valid_ofport(self):,1,0,0.0,321
aa85a97ca2dcb06996ed133d864705f1dca722b1,"command.extend([""--"", ""set"", ""Interface"", pname])",1,0,0.0,322
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._encode_ovs_json(['ofport'], [[ofport]])),",1,0,0.0,323
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(""--columns=ofport"", ""list"", ""Interface"", pname),",1,0,0.0,324
aa85a97ca2dcb06996ed133d864705f1dca722b1,"(self._vsctl_mock(*command), None),",1,0,0.0,325
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:out_key=flow""])",1,0,0.0,326
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:in_key=flow"",",1,0,0.0,327
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:local_ip="" + local_ip,",1,0,0.0,328
aa85a97ca2dcb06996ed133d864705f1dca722b1,"""options:remote_ip="" + remote_ip,",1,0,0.0,329
aa85a97ca2dcb06996ed133d864705f1dca722b1,"command.extend([""type=gre"", ""options:df_default=true"",",1,0,0.0,330
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.BR_NAME, pname]",1,0,0.0,331
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.use_at_least_protocol(p_const.OPENFLOW13),1,0,0.0,332
aa85a97ca2dcb06996ed133d864705f1dca722b1,"command = [""--may-exist"", ""add-port"",",1,0,0.0,333
aa85a97ca2dcb06996ed133d864705f1dca722b1,ofport = 6,1,0,0.0,334
aa85a97ca2dcb06996ed133d864705f1dca722b1,"remote_ip = ""9.9.9.9""",1,0,0.0,335
aa85a97ca2dcb06996ed133d864705f1dca722b1,"local_ip = ""1.1.1.1""",1,0,0.0,336
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.br.use_at_least_protocol(""OpenFlow42"")",1,0,0.0,337
aa85a97ca2dcb06996ed133d864705f1dca722b1,with testtools.ExpectedException(Exception):,1,0,0.0,338
aa85a97ca2dcb06996ed133d864705f1dca722b1,def test_ofctl_of_version_use_unknown(self):,1,0,0.0,339
aa85a97ca2dcb06996ed133d864705f1dca722b1,"mock.call(['ovs-ofctl', 'add-flows', '-O', p_const.OPENFLOW13,",1,0,0.0,340
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._test_get_port_ofport(6, 6)",1,0,0.0,341
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self._verify_vsctl_mock(""--columns=ofport"", ""list"", ""Interface"", pname)",1,0,0.0,342
aa85a97ca2dcb06996ed133d864705f1dca722b1,self._test_get_vif_port_set(True),1,0,0.0,343
aa85a97ca2dcb06996ed133d864705f1dca722b1,OVSLIST_WITH_UNSET_PORT = (,1,0,0.0,344
aa85a97ca2dcb06996ed133d864705f1dca722b1,# NOTE(ivasilevskaya) as long as some tests rely heavily on mocking,1,0,0.0,345
aa85a97ca2dcb06996ed133d864705f1dca722b1,def vsctl_only(f):,1,0,0.0,346
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'l_ids"",""ofport""]}')",1,0,0.0,347
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'cf""],[""iface-status"",""active""]]],[""set"",[]]]],""headings"":[""name"",""externa'",1,0,0.0,348
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'mac"",""fa:16:3e:02:f5:91""],[""iface-id"",""6b108774-1559-45e9-a7c3-b714f11722'",1,0,0.0,349
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'c7""],[""iface-status"",""active""]]],2],[""tap6b108774-15"",[""map"",[[""attached-'",1,0,0.0,350
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'mac"",""fa:16:3e:b0:f8:38""],[""iface-id"",""2ab72a72-4407-4ef3-806a-b2172f3e4d'",1,0,0.0,351
aa85a97ca2dcb06996ed133d864705f1dca722b1,"'{""data"":[[""patch-tun"",[""map"",[]],1],[""tap2ab72a72-44"",[""map"",[[""attached-'",1,0,0.0,352
aa85a97ca2dcb06996ed133d864705f1dca722b1,# some test data for get_vif_port_to_ofport_map that exhibited bug 1444269,1,0,0.0,353
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def wrapper(*args, **kwargs):",1,0,0.0,354
aa85a97ca2dcb06996ed133d864705f1dca722b1,"OVS_LINUX_KERN_VERS_WITHOUT_VXLAN = ""3.12.0""",1,0,0.0,355
aa85a97ca2dcb06996ed133d864705f1dca722b1,from neutron.conf.agent import common as config,1,0,0.0,356
aa85a97ca2dcb06996ed133d864705f1dca722b1,from neutron_lib import constants,1,0,0.0,357
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.ovs.vsctl_timeout * 1000),1,0,0.0,358
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.ovsdb_timeout = 1,0,0,0.0,359
aa85a97ca2dcb06996ed133d864705f1dca722b1,mock.patch('neutron.agent.ovsdb.impl_idl.api_factory').start(),0,0,0.0,360
aa85a97ca2dcb06996ed133d864705f1dca722b1,# Don't attempt to connect to ovsdb,0,0,0.0,361
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.ovs.ovsdb_timeout * 1000),0,0,0.0,362
aa85a97ca2dcb06996ed133d864705f1dca722b1,# TODO(ivasilevskaya) introduce alternative tests for native interface?,1,0,0.0,363
aa85a97ca2dcb06996ed133d864705f1dca722b1,"config.cfg.CONF.set_override(""ovsdb_interface"", ""vsctl"", group=""OVS"")",1,0,0.0,364
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertEqual(self.br.get_port_ofport(pname), expected_result)",1,0,0.0,365
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.execute.assert_called_once_with(cmd, run_as_root=True,",1,0,0.0,366
aa85a97ca2dcb06996ed133d864705f1dca722b1,"['ofport'], [[ofport]])",1,0,0.0,367
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.execute.return_value = self._encode_ovs_json(,1,0,0.0,368
aa85a97ca2dcb06996ed133d864705f1dca722b1,self.br.vsctl_timeout = 0  # Don't waste precious time retrying,1,0,0.0,369
aa85a97ca2dcb06996ed133d864705f1dca722b1,"pname = ""tap99""",1,0,0.0,370
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _test_get_port_ofport(self, ofport, expected_result):",1,0,0.0,371
aa85a97ca2dcb06996ed133d864705f1dca722b1,"return ""--timeout=%d"" % exp_timeout if exp_timeout else self.TO",1,0,0.0,372
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _build_timeout_opt(self, exp_timeout):",1,0,0.0,373
aa85a97ca2dcb06996ed133d864705f1dca722b1,log_fail_as_error=False),1,0,0.0,374
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _verify_vsctl_mock(self, *args):",1,0,0.0,375
aa85a97ca2dcb06996ed133d864705f1dca722b1,"return f(*args, **kwargs)",1,0,0.0,376
aa85a97ca2dcb06996ed133d864705f1dca722b1,"return mock.call(cmd, run_as_root=True, log_fail_as_error=False)",1,0,0.0,377
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _vsctl_mock(self, *args):",1,0,0.0,378
aa85a97ca2dcb06996ed133d864705f1dca722b1,"def _vsctl_args(self, *args):",1,0,0.0,379
aa85a97ca2dcb06996ed133d864705f1dca722b1,"return ""--timeout=%s"" % self.br.vsctl_timeout",1,0,0.0,380
aa85a97ca2dcb06996ed133d864705f1dca722b1,def TO(self):,1,0,0.0,381
aa85a97ca2dcb06996ed133d864705f1dca722b1,@property,1,0,0.0,382
aa85a97ca2dcb06996ed133d864705f1dca722b1,@vsctl_only,1,0,0.0,383
aa85a97ca2dcb06996ed133d864705f1dca722b1,return wrapper,1,0,0.0,384
aa85a97ca2dcb06996ed133d864705f1dca722b1,"self.assertIn('--bundle', mexec.call_args[0][0])",1,0,0.0,385
