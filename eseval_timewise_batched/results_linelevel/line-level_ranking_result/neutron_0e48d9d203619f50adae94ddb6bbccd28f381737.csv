commit_id,line,line_level_label,count,line_score,row
0e48d9d203619f50adae94ddb6bbccd28f381737,"_LI('Eventlet backdoor listening on %(port)s for process %(pid)d'),",1,7,1.0,1
0e48d9d203619f50adae94ddb6bbccd28f381737,"# Could not get the fileno for stdout, so we must be a daemon.",1,7,1.0,2
0e48d9d203619f50adae94ddb6bbccd28f381737,"# In the case of backdoor port being zero, a port number is assigned by",1,6,0.8571428571428571,3
0e48d9d203619f50adae94ddb6bbccd28f381737,# Allow the process to be killed again and die from natural causes,1,6,0.8571428571428571,4
0e48d9d203619f50adae94ddb6bbccd28f381737,# Parent signals with SIGTERM when it wants us to go away.,1,6,0.8571428571428571,5
0e48d9d203619f50adae94ddb6bbccd28f381737,# be run on the default interval to avoid running too,1,6,0.8571428571428571,6
0e48d9d203619f50adae94ddb6bbccd28f381737,# The process group for a foreground process will match the,1,5,0.7142857142857142,7
0e48d9d203619f50adae94ddb6bbccd28f381737,"# not match, or ioctl() fails on the stdout file handle, we assume",1,5,0.7142857142857142,8
0e48d9d203619f50adae94ddb6bbccd28f381737,# the process is running in the background as a daemon.,1,5,0.7142857142857142,9
0e48d9d203619f50adae94ddb6bbccd28f381737,# Block SIGINT and let the parent send us a SIGTERM,1,5,0.7142857142857142,10
0e48d9d203619f50adae94ddb6bbccd28f381737,#    License for the specific language governing permissions and limitations,1,4,0.5714285714285714,11
0e48d9d203619f50adae94ddb6bbccd28f381737,# NOTE(sirp): The `if` is necessary to allow the decorator to be used with,1,4,0.5714285714285714,12
0e48d9d203619f50adae94ddb6bbccd28f381737,"Eg if last run was 10 and spacing was 7, the new last run could be: 17, 24,",1,4,0.5714285714285714,13
0e48d9d203619f50adae94ddb6bbccd28f381737,0% to 5% of the spacing value will be added to this value to ensure tasks,1,4,0.5714285714285714,14
0e48d9d203619f50adae94ddb6bbccd28f381737,#    not use this file except in compliance with the License. You may obtain,1,4,0.5714285714285714,15
0e48d9d203619f50adae94ddb6bbccd28f381737,#    License for the specific language governing permissions and limitations,1,4,0.5714285714285714,16
0e48d9d203619f50adae94ddb6bbccd28f381737,# Limit ourselves to one process a second (over the period of,1,4,0.5714285714285714,17
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Loop waiting on children to die and respawning as necessary.""""""",1,4,0.5714285714285714,18
0e48d9d203619f50adae94ddb6bbccd28f381737,#    not use this file except in compliance with the License. You may obtain,1,4,0.5714285714285714,19
0e48d9d203619f50adae94ddb6bbccd28f381737,#    License for the specific language governing permissions and limitations,1,4,0.5714285714285714,20
0e48d9d203619f50adae94ddb6bbccd28f381737,"argument is provided and has a value of 'True', the first run of the",1,4,0.5714285714285714,21
0e48d9d203619f50adae94ddb6bbccd28f381737,# Create greenthread to watch for parent to close pipe,1,4,0.5714285714285714,22
0e48d9d203619f50adae94ddb6bbccd28f381737,#    not use this file except in compliance with the License. You may obtain,1,4,0.5714285714285714,23
0e48d9d203619f50adae94ddb6bbccd28f381737,"""is in use); and <start>:<end> results in listening on the smallest """,1,4,0.5714285714285714,24
0e48d9d203619f50adae94ddb6bbccd28f381737,"{'func_name': self.f, 'delay': delay})",1,4,0.5714285714285714,25
0e48d9d203619f50adae94ddb6bbccd28f381737,#    not use this file except in compliance with the License. You may obtain,1,4,0.5714285714285714,26
0e48d9d203619f50adae94ddb6bbccd28f381737,"""in listening on a random tcp port number; <port> results in listening """,1,4,0.5714285714285714,27
0e48d9d203619f50adae94ddb6bbccd28f381737,"""on the specified port number (and not enabling backdoor if that port """,1,4,0.5714285714285714,28
0e48d9d203619f50adae94ddb6bbccd28f381737,#    License for the specific language governing permissions and limitations,1,4,0.5714285714285714,29
0e48d9d203619f50adae94ddb6bbccd28f381737,"# the last expression and set it to __builtin__._, which overwrites",1,4,0.5714285714285714,30
0e48d9d203619f50adae94ddb6bbccd28f381737,#    not use this file except in compliance with the License. You may obtain,1,4,0.5714285714285714,31
0e48d9d203619f50adae94ddb6bbccd28f381737,#    License for the specific language governing permissions and limitations,1,4,0.5714285714285714,32
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.warning(_LW('task %(func_name)r run outlasted ',1,4,0.5714285714285714,33
0e48d9d203619f50adae94ddb6bbccd28f381737,"'interval by %(delay).2f sec'),",1,4,0.5714285714285714,34
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.exception(_LE(""Error during %(full_task_name)s""),",1,3,0.42857142857142855,35
0e48d9d203619f50adae94ddb6bbccd28f381737,# be bad for a child to spawn more children.,1,3,0.42857142857142855,36
0e48d9d203619f50adae94ddb6bbccd28f381737,# Copyright 2010 United States Government as represented by the,1,3,0.42857142857142855,37
0e48d9d203619f50adae94ddb6bbccd28f381737,# Administrator of the National Aeronautics and Space Administration.,1,3,0.42857142857142855,38
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Unless required by applicable law or agreed to in writing, software",1,3,0.42857142857142855,39
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,3,0.42857142857142855,40
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Generic Node base class for all workers that run on hosts.""""""",1,3,0.42857142857142855,41
0e48d9d203619f50adae94ddb6bbccd28f381737,# process group of the controlling terminal. If those values do,1,3,0.42857142857142855,42
0e48d9d203619f50adae94ddb6bbccd28f381737,"# Avoid checking if we are a daemon, because the signal isn't",1,3,0.42857142857142855,43
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Launch one or more services and wait for them to complete.""""""",1,3,0.42857142857142855,44
0e48d9d203619f50adae94ddb6bbccd28f381737,# This will block until the write end is closed when the parent,1,3,0.42857142857142855,45
0e48d9d203619f50adae94ddb6bbccd28f381737,"# Each service has performed cleanup, now signal that the run_service",1,3,0.42857142857142855,46
0e48d9d203619f50adae94ddb6bbccd28f381737,# Reopen the eventlet hub to make sure we don't share an epoll,1,3,0.42857142857142855,47
0e48d9d203619f50adae94ddb6bbccd28f381737,# number of workers * 1 second). This will allow workers to,1,3,0.42857142857142855,48
0e48d9d203619f50adae94ddb6bbccd28f381737,# Sleep for a short time to avoid excessive CPU usage,1,3,0.42857142857142855,49
0e48d9d203619f50adae94ddb6bbccd28f381737,# Wait for children to die,1,3,0.42857142857142855,50
0e48d9d203619f50adae94ddb6bbccd28f381737,# signal that the service is done shutting itself down:,1,3,0.42857142857142855,51
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Unless required by applicable law or agreed to in writing, software",1,3,0.42857142857142855,52
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,3,0.42857142857142855,53
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common._i18n import _LE,1,3,0.42857142857142855,54
0e48d9d203619f50adae94ddb6bbccd28f381737,"# In case of graceful=True, wait for all threads to be",1,3,0.42857142857142855,55
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(_LE('Error waiting on ThreadGroup.')),1,3,0.42857142857142855,56
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Add a periodic task to the list of periodic tasks.",1,3,0.42857142857142855,57
0e48d9d203619f50adae94ddb6bbccd28f381737,# NOTE(sirp): if the attribute is not present then we must be the base,1,3,0.42857142857142855,58
0e48d9d203619f50adae94ddb6bbccd28f381737,:param wait_interval: The interval to sleep for between checks,1,3,0.42857142857142855,59
0e48d9d203619f50adae94ddb6bbccd28f381737,"# In the 'without-parenthesis' case, the original function will be passed",1,3,0.42857142857142855,60
0e48d9d203619f50adae94ddb6bbccd28f381737,# Administrator of the National Aeronautics and Space Administration.,1,3,0.42857142857142855,61
0e48d9d203619f50adae94ddb6bbccd28f381737,# to return a decorator function since the interpreter will invoke it like:,1,3,0.42857142857142855,62
0e48d9d203619f50adae94ddb6bbccd28f381737,# Administrator of the National Aeronautics and Space Administration.,1,3,0.42857142857142855,63
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Unless required by applicable law or agreed to in writing, software",1,3,0.42857142857142855,64
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,3,0.42857142857142855,65
0e48d9d203619f50adae94ddb6bbccd28f381737,"""unused port number within the specified range of port numbers.  The """,1,3,0.42857142857142855,66
0e48d9d203619f50adae94ddb6bbccd28f381737,"'exit': _dont_use_this,      # So we don't exit the entire process",1,3,0.42857142857142855,67
0e48d9d203619f50adae94ddb6bbccd28f381737,"'quit': _dont_use_this,      # So we don't exit the entire process",1,3,0.42857142857142855,68
0e48d9d203619f50adae94ddb6bbccd28f381737,"# since it won't interact poorly with gettext, and it's easier to",1,3,0.42857142857142855,69
0e48d9d203619f50adae94ddb6bbccd28f381737,# read the output too.,1,3,0.42857142857142855,70
0e48d9d203619f50adae94ddb6bbccd28f381737,"# listen().  In any case, pull the port number out here.",1,3,0.42857142857142855,71
0e48d9d203619f50adae94ddb6bbccd28f381737,# Copyright 2010 United States Government as represented by the,1,3,0.42857142857142855,72
0e48d9d203619f50adae94ddb6bbccd28f381737,# the __builtin__._ that gettext sets. Let's switch to using pprint,1,3,0.42857142857142855,73
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Unless required by applicable law or agreed to in writing, software",1,3,0.42857142857142855,74
0e48d9d203619f50adae94ddb6bbccd28f381737,task runs will be approximately N seconds after the task scheduler,1,3,0.42857142857142855,75
0e48d9d203619f50adae94ddb6bbccd28f381737,The poll-function passed to LoopingCallBase can raise this exception to,1,3,0.42857142857142855,76
0e48d9d203619f50adae94ddb6bbccd28f381737,An optional return-value can be included as the argument to the exception;,1,3,0.42857142857142855,77
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Unless required by applicable law or agreed to in writing, software",1,3,0.42857142857142855,78
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,3,0.42857142857142855,79
0e48d9d203619f50adae94ddb6bbccd28f381737,"1. Without arguments '@periodic_task', this will be run on the default",1,3,0.42857142857142855,80
0e48d9d203619f50adae94ddb6bbccd28f381737,negative the periodic task will be disabled. If the run_immediately,1,3,0.42857142857142855,81
0e48d9d203619f50adae94ddb6bbccd28f381737,"run_immediately is omitted or set to 'False', the first time the",1,3,0.42857142857142855,82
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,3,0.42857142857142855,83
0e48d9d203619f50adae94ddb6bbccd28f381737,# doesn't fallback into the loop spawning children. It would,1,2,0.2857142857142857,84
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Reload config files and restart service.",1,2,0.2857142857142857,85
0e48d9d203619f50adae94ddb6bbccd28f381737,# Setup child signal handlers differently,1,2,0.2857142857142857,86
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGTERM, signal.SIG_DFL)",1,2,0.2857142857142857,87
0e48d9d203619f50adae94ddb6bbccd28f381737,# NOTE(johannes): All exceptions are caught to ensure this,1,2,0.2857142857142857,88
0e48d9d203619f50adae94ddb6bbccd28f381737,# No signal means that stop was called.  Don't clean up here.,1,2,0.2857142857142857,89
0e48d9d203619f50adae94ddb6bbccd28f381737,# Close write to ensure only parent has it open,1,2,0.2857142857142857,90
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Child %(pid)d killed by signal %(sig)d'),",1,2,0.2857142857142857,91
0e48d9d203619f50adae94ddb6bbccd28f381737,# Yield to other threads if no children have exited,1,2,0.2857142857142857,92
0e48d9d203619f50adae94ddb6bbccd28f381737,# Assume we are a daemon because there is no terminal.,1,2,0.2857142857142857,93
0e48d9d203619f50adae94ddb6bbccd28f381737,for pid in self.children:,1,2,0.2857142857142857,94
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Load and start the given service.",1,2,0.2857142857142857,95
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.2857142857142857,96
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common import threadgroup,1,2,0.2857142857142857,97
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common import systemd,1,2,0.2857142857142857,98
0e48d9d203619f50adae94ddb6bbccd28f381737,"from neutron.openstack.common._i18n import _LE, _LI, _LW",1,2,0.2857142857142857,99
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common import eventlet_backdoor,1,2,0.2857142857142857,100
0e48d9d203619f50adae94ddb6bbccd28f381737,from oslo_config import cfg,1,2,0.2857142857142857,101
0e48d9d203619f50adae94ddb6bbccd28f381737,from eventlet import event,1,2,0.2857142857142857,102
0e48d9d203619f50adae94ddb6bbccd28f381737,import signal,1,2,0.2857142857142857,103
0e48d9d203619f50adae94ddb6bbccd28f381737,import io,1,2,0.2857142857142857,104
0e48d9d203619f50adae94ddb6bbccd28f381737,#    under the License.,1,2,0.2857142857142857,105
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,2,0.2857142857142857,106
0e48d9d203619f50adae94ddb6bbccd28f381737,#    a copy of the License at,1,2,0.2857142857142857,107
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Waiting on %d children to exit'), len(self.children))",1,2,0.2857142857142857,108
0e48d9d203619f50adae94ddb6bbccd28f381737,from oslo_service import service as common_service,0,2,0.2857142857142857,109
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Terminate child processes and wait on each.""""""",1,2,0.2857142857142857,110
0e48d9d203619f50adae94ddb6bbccd28f381737,from eventlet import greenpool,1,2,0.2857142857142857,111
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Service object for binaries running on hosts.""""""",1,2,0.2857142857142857,112
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Wrapper around a greenthread, that holds a reference to the",1,2,0.2857142857142857,113
0e48d9d203619f50adae94ddb6bbccd28f381737,except Exception:,1,2,0.2857142857142857,114
0e48d9d203619f50adae94ddb6bbccd28f381737,except Exception as ex:,1,2,0.2857142857142857,115
0e48d9d203619f50adae94ddb6bbccd28f381737,"* In case of graceful=True, wait for all threads to be finished.",1,2,0.2857142857142857,116
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(_LE('Error stopping timer.')),1,2,0.2857142857142857,117
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(_LE('Error stopping thread.')),1,2,0.2857142857142857,118
0e48d9d203619f50adae94ddb6bbccd28f381737,except Exception:,1,2,0.2857142857142857,119
0e48d9d203619f50adae94ddb6bbccd28f381737,# don't kill the current thread.,1,2,0.2857142857142857,120
0e48d9d203619f50adae94ddb6bbccd28f381737,# modify the list while we're iterating,1,2,0.2857142857142857,121
0e48d9d203619f50adae94ddb6bbccd28f381737,* keep track of timers and greenthreads (making it easier to stop them,1,2,0.2857142857142857,122
0e48d9d203619f50adae94ddb6bbccd28f381737,it has done so it can be removed from the threads list.,1,2,0.2857142857142857,123
0e48d9d203619f50adae94ddb6bbccd28f381737,:class:`ThreadGroup`. The Thread will notify the :class:`ThreadGroup` when,1,2,0.2857142857142857,124
0e48d9d203619f50adae94ddb6bbccd28f381737,Calls the :class:`ThreadGroup` to notify if.,1,2,0.2857142857142857,125
0e48d9d203619f50adae94ddb6bbccd28f381737,# NOTE(Fengqian): docs for Event.reset() recommend against using it,1,2,0.2857142857142857,126
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Callback function to be passed to GreenThread.link() when we spawn()",1,2,0.2857142857142857,127
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common import loopingcall,1,2,0.2857142857142857,128
0e48d9d203619f50adae94ddb6bbccd28f381737,#    under the License.,1,2,0.2857142857142857,129
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,2,0.2857142857142857,130
0e48d9d203619f50adae94ddb6bbccd28f381737,#    a copy of the License at,1,2,0.2857142857142857,131
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.2857142857142857,132
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common import service as common_service,1,2,0.2857142857142857,133
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common import loopingcall,1,2,0.2857142857142857,134
0e48d9d203619f50adae94ddb6bbccd28f381737,:param done: event to wait on until a shutdown is triggered,1,2,0.2857142857142857,135
0e48d9d203619f50adae94ddb6bbccd28f381737,:param service: service to run,1,2,0.2857142857142857,136
0e48d9d203619f50adae94ddb6bbccd28f381737,# wait for graceful shutdown of services:,1,2,0.2857142857142857,137
0e48d9d203619f50adae94ddb6bbccd28f381737,from oslo_service import loopingcall,0,2,0.2857142857142857,138
0e48d9d203619f50adae94ddb6bbccd28f381737,"do not synchronize. This jitter is rounded to the nearest second, this",1,2,0.2857142857142857,139
0e48d9d203619f50adae94ddb6bbccd28f381737,"{""full_task_name"": full_task_name})",1,2,0.2857142857142857,140
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.2857142857142857,141
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.debug('Dynamic looping call %(func_name)r sleeping ',1,2,0.2857142857142857,142
0e48d9d203619f50adae94ddb6bbccd28f381737,The function called should return how long to sleep for before being,1,2,0.2857142857142857,143
0e48d9d203619f50adae94ddb6bbccd28f381737,except Exception:,1,2,0.2857142857142857,144
0e48d9d203619f50adae94ddb6bbccd28f381737,delay = end - start - interval,1,2,0.2857142857142857,145
0e48d9d203619f50adae94ddb6bbccd28f381737,break out of the loop normally. This is somewhat analogous to,1,2,0.2857142857142857,146
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Exception to break out and stop a LoopingCallBase.",1,2,0.2857142857142857,147
0e48d9d203619f50adae94ddb6bbccd28f381737,#              during unittests.,1,2,0.2857142857142857,148
0e48d9d203619f50adae94ddb6bbccd28f381737,#              with time.time() called in the standard logging module,1,2,0.2857142857142857,149
0e48d9d203619f50adae94ddb6bbccd28f381737,# NOTE(zyluo): This lambda function was declared to avoid mocking collisions,1,2,0.2857142857142857,150
0e48d9d203619f50adae94ddb6bbccd28f381737,"from neutron.openstack.common._i18n import _LE, _LW",1,2,0.2857142857142857,151
0e48d9d203619f50adae94ddb6bbccd28f381737,from eventlet import greenthread,1,2,0.2857142857142857,152
0e48d9d203619f50adae94ddb6bbccd28f381737,from eventlet import event,1,2,0.2857142857142857,153
0e48d9d203619f50adae94ddb6bbccd28f381737,#    under the License.,1,2,0.2857142857142857,154
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,2,0.2857142857142857,155
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.2857142857142857,156
0e48d9d203619f50adae94ddb6bbccd28f381737,# NOTE(johannes): The standard sys.displayhook will print the value of,1,2,0.2857142857142857,157
0e48d9d203619f50adae94ddb6bbccd28f381737,"""chosen port is displayed in the service's log file."")",1,2,0.2857142857142857,158
0e48d9d203619f50adae94ddb6bbccd28f381737,from neutron.openstack.common._i18n import _LI,1,2,0.2857142857142857,159
0e48d9d203619f50adae94ddb6bbccd28f381737,from oslo_config import cfg,1,2,0.2857142857142857,160
0e48d9d203619f50adae94ddb6bbccd28f381737,from __future__ import print_function,1,2,0.2857142857142857,161
0e48d9d203619f50adae94ddb6bbccd28f381737,#    under the License.,1,2,0.2857142857142857,162
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,2,0.2857142857142857,163
0e48d9d203619f50adae94ddb6bbccd28f381737,#    a copy of the License at,1,2,0.2857142857142857,164
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.2857142857142857,165
0e48d9d203619f50adae94ddb6bbccd28f381737,"for task_name, task in self._periodic_tasks:",1,2,0.2857142857142857,166
0e48d9d203619f50adae94ddb6bbccd28f381737,"{'func_name': self.f, 'idle': idle})",1,2,0.2857142857142857,167
0e48d9d203619f50adae94ddb6bbccd28f381737,#    a copy of the License at,1,2,0.2857142857142857,168
0e48d9d203619f50adae94ddb6bbccd28f381737,#    a copy of the License at,1,2,0.2857142857142857,169
0e48d9d203619f50adae94ddb6bbccd28f381737,"# in as the first argument, like:",1,2,0.2857142857142857,170
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Tasks to be run at a periodic interval.""""""",1,2,0.2857142857142857,171
0e48d9d203619f50adae94ddb6bbccd28f381737,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,2,0.2857142857142857,172
0e48d9d203619f50adae94ddb6bbccd28f381737,"for name, task in self._periodic_tasks:",1,2,0.2857142857142857,173
0e48d9d203619f50adae94ddb6bbccd28f381737,# Add up to 5% jitter,1,2,0.2857142857142857,174
0e48d9d203619f50adae94ddb6bbccd28f381737,spacing with the last run as an offset.,1,2,0.2857142857142857,175
0e48d9d203619f50adae94ddb6bbccd28f381737,# then we're a subclass so make a copy of it so we don't step on our,1,2,0.2857142857142857,176
0e48d9d203619f50adae94ddb6bbccd28f381737,"# class, so, go ahead an initialize it. If the attribute is present,",1,2,0.2857142857142857,177
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Metaclass that allows us to collect decorated periodic tasks.""""""",1,2,0.2857142857142857,178
0e48d9d203619f50adae94ddb6bbccd28f381737,# A periodic spacing of zero indicates that this task should,1,2,0.2857142857142857,179
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.info(_LI('Skipping periodic task %(task)s because ',1,2,0.2857142857142857,180
0e48d9d203619f50adae94ddb6bbccd28f381737,The task should already be decorated by @periodic_task.,1,2,0.2857142857142857,181
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Find nearest boundary which is in the past, which is a multiple of the",1,2,0.2857142857142857,182
0e48d9d203619f50adae94ddb6bbccd28f381737,"# In the 'with-parenthesis' case (with kwargs present), this function needs",1,2,0.2857142857142857,183
0e48d9d203619f50adae94ddb6bbccd28f381737,# and without parenthesis.,1,2,0.2857142857142857,184
0e48d9d203619f50adae94ddb6bbccd28f381737,# Control if run at all,1,2,0.2857142857142857,185
0e48d9d203619f50adae94ddb6bbccd28f381737,# Test for old style invocation,1,2,0.2857142857142857,186
0e48d9d203619f50adae94ddb6bbccd28f381737,task will be shortly after task scheduler starts.  If,1,2,0.2857142857142857,187
0e48d9d203619f50adae94ddb6bbccd28f381737,this will be run on approximately every N seconds. If this number is,1,2,0.2857142857142857,188
0e48d9d203619f50adae94ddb6bbccd28f381737,from oslo_config import cfg,1,2,0.2857142857142857,189
0e48d9d203619f50adae94ddb6bbccd28f381737,"message = _(""Unexpected argument for periodic task creation: %(arg)s."")",1,2,0.2857142857142857,190
0e48d9d203619f50adae94ddb6bbccd28f381737,#    under the License.,1,2,0.2857142857142857,191
0e48d9d203619f50adae94ddb6bbccd28f381737,help='Some periodic tasks can be run in a separate process. ',1,2,0.2857142857142857,192
0e48d9d203619f50adae94ddb6bbccd28f381737,"from neutron.openstack.common._i18n import _, _LE, _LI",1,2,0.2857142857142857,193
0e48d9d203619f50adae94ddb6bbccd28f381737,for handler in cls._signal_handlers_set:,1,1,0.14285714285714285,194
0e48d9d203619f50adae94ddb6bbccd28f381737,of child process exit.,1,1,0.14285714285714285,195
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Waits until all services have been stopped, and then returns.",1,1,0.14285714285714285,196
0e48d9d203619f50adae94ddb6bbccd28f381737,except SystemExit as exc:,1,1,0.14285714285714285,197
0e48d9d203619f50adae94ddb6bbccd28f381737,except SignalExit as exc:,1,1,0.14285714285714285,198
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Initialize the service launcher.",1,1,0.14285714285714285,199
0e48d9d203619f50adae94ddb6bbccd28f381737,# dies unexpectedly,1,1,0.14285714285714285,200
0e48d9d203619f50adae94ddb6bbccd28f381737,"# fd with parent and/or siblings, which would be bad",1,1,0.14285714285714285,201
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Parent process has died unexpectedly, exiting'))",1,1,0.14285714285714285,202
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGHUP, signal.SIG_DFL)",1,1,0.14285714285714285,203
0e48d9d203619f50adae94ddb6bbccd28f381737,except BaseException:,1,1,0.14285714285714285,204
0e48d9d203619f50adae94ddb6bbccd28f381737,pid = os.fork(),1,1,0.14285714285714285,205
0e48d9d203619f50adae94ddb6bbccd28f381737,# Reseed random number generator,1,1,0.14285714285714285,206
0e48d9d203619f50adae94ddb6bbccd28f381737,# start up quickly but ensure we don't fork off children that,1,1,0.14285714285714285,207
0e48d9d203619f50adae94ddb6bbccd28f381737,# die instantly too quickly.,1,1,0.14285714285714285,208
0e48d9d203619f50adae94ddb6bbccd28f381737,"signals = {signal.SIGTERM: 'SIGTERM',",1,1,0.14285714285714285,209
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGTERM, handler)",1,1,0.14285714285714285,210
0e48d9d203619f50adae94ddb6bbccd28f381737,import time,1,1,0.14285714285714285,211
0e48d9d203619f50adae94ddb6bbccd28f381737,# SIGHUP.,1,1,0.14285714285714285,212
0e48d9d203619f50adae94ddb6bbccd28f381737,import eventlet,1,1,0.14285714285714285,213
0e48d9d203619f50adae94ddb6bbccd28f381737,return pid,1,1,0.14285714285714285,214
0e48d9d203619f50adae94ddb6bbccd28f381737,import errno,1,1,0.14285714285714285,215
0e48d9d203619f50adae94ddb6bbccd28f381737,import logging,1,1,0.14285714285714285,216
0e48d9d203619f50adae94ddb6bbccd28f381737,import os,1,1,0.14285714285714285,217
0e48d9d203619f50adae94ddb6bbccd28f381737,import random,1,1,0.14285714285714285,218
0e48d9d203619f50adae94ddb6bbccd28f381737,import sys,1,1,0.14285714285714285,219
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG = logging.getLogger(__name__),1,1,0.14285714285714285,220
0e48d9d203619f50adae94ddb6bbccd28f381737,if not (_sighup_supported() and signo == signal.SIGHUP):,1,1,0.14285714285714285,221
0e48d9d203619f50adae94ddb6bbccd28f381737,# http://www.gnu.org/software/bash/manual/bashref.html#Job-Control-Basics,1,1,0.14285714285714285,222
0e48d9d203619f50adae94ddb6bbccd28f381737,is_daemon = os.getpgrp() != os.tcgetpgrp(sys.stdout.fileno()),1,1,0.14285714285714285,223
0e48d9d203619f50adae94ddb6bbccd28f381737,except io.UnsupportedOperation:,1,1,0.14285714285714285,224
0e48d9d203619f50adae94ddb6bbccd28f381737,is_daemon = True,1,1,0.14285714285714285,225
0e48d9d203619f50adae94ddb6bbccd28f381737,except OSError as err:,1,1,0.14285714285714285,226
0e48d9d203619f50adae94ddb6bbccd28f381737,return is_daemon,1,1,0.14285714285714285,227
0e48d9d203619f50adae94ddb6bbccd28f381737,if pid == 0:,1,1,0.14285714285714285,228
0e48d9d203619f50adae94ddb6bbccd28f381737,# Iterate over a copy of self.threads so thread_done doesn't,1,1,0.14285714285714285,229
0e48d9d203619f50adae94ddb6bbccd28f381737,while self.running and len(wrap.children) < wrap.workers:,1,1,0.14285714285714285,230
0e48d9d203619f50adae94ddb6bbccd28f381737,for x in self.threads[:]:,1,1,0.14285714285714285,231
0e48d9d203619f50adae94ddb6bbccd28f381737,import eventlet,1,1,0.14285714285714285,232
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG = logging.getLogger(__name__),1,1,0.14285714285714285,233
0e48d9d203619f50adae94ddb6bbccd28f381737,self.thread = thread,1,1,0.14285714285714285,234
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""The point of the ThreadGroup class is to:",1,1,0.14285714285714285,235
0e48d9d203619f50adae94ddb6bbccd28f381737,* provide an easy API to add timers.,1,1,0.14285714285714285,236
0e48d9d203619f50adae94ddb6bbccd28f381737,"timer = loopingcall.DynamicLoopingCall(callback, *args, **kwargs)",1,1,0.14285714285714285,237
0e48d9d203619f50adae94ddb6bbccd28f381737,except eventlet.greenlet.GreenletExit:,1,1,0.14285714285714285,238
0e48d9d203619f50adae94ddb6bbccd28f381737,import logging,1,1,0.14285714285714285,239
0e48d9d203619f50adae94ddb6bbccd28f381737,for x in self.timers:,1,1,0.14285714285714285,240
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""stop function has the option of graceful=True/False.",1,1,0.14285714285714285,241
0e48d9d203619f50adae94ddb6bbccd28f381737,"# finished, never kill threads",1,1,0.14285714285714285,242
0e48d9d203619f50adae94ddb6bbccd28f381737,"# In case of graceful=False(Default), kill threads",1,1,0.14285714285714285,243
0e48d9d203619f50adae94ddb6bbccd28f381737,# immediately,1,1,0.14285714285714285,244
0e48d9d203619f50adae94ddb6bbccd28f381737,#,1,1,0.14285714285714285,245
0e48d9d203619f50adae94ddb6bbccd28f381737,import threading,1,1,0.14285714285714285,246
0e48d9d203619f50adae94ddb6bbccd28f381737,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.14285714285714285,247
0e48d9d203619f50adae94ddb6bbccd28f381737,# Don't block if no child processes have exited,1,1,0.14285714285714285,248
0e48d9d203619f50adae94ddb6bbccd28f381737,except eventlet.greenlet.GreenletExit:,1,1,0.14285714285714285,249
0e48d9d203619f50adae94ddb6bbccd28f381737,except OSError as exc:,1,1,0.14285714285714285,250
0e48d9d203619f50adae94ddb6bbccd28f381737,if pid not in self.children:,1,1,0.14285714285714285,251
0e48d9d203619f50adae94ddb6bbccd28f381737,# (see bug #1095346),1,1,0.14285714285714285,252
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Caught %s, stopping children'), signame)",1,1,0.14285714285714285,253
0e48d9d203619f50adae94ddb6bbccd28f381737,for service in set(,1,1,0.14285714285714285,254
0e48d9d203619f50adae94ddb6bbccd28f381737,[wrap.service for wrap in self.children.values()]):,1,1,0.14285714285714285,255
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI(""Wait called after thread killed. Cleaning up.""))",1,1,0.14285714285714285,256
0e48d9d203619f50adae94ddb6bbccd28f381737,#,1,1,0.14285714285714285,257
0e48d9d203619f50adae94ddb6bbccd28f381737,# Signal that service cleanup is done:,1,1,0.14285714285714285,258
0e48d9d203619f50adae94ddb6bbccd28f381737,for service in self.services:,1,1,0.14285714285714285,259
0e48d9d203619f50adae94ddb6bbccd28f381737,# wrapper threads can now die:,1,1,0.14285714285714285,260
0e48d9d203619f50adae94ddb6bbccd28f381737,# reap threads:,1,1,0.14285714285714285,261
0e48d9d203619f50adae94ddb6bbccd28f381737,for restart_service in self.services:,1,1,0.14285714285714285,262
0e48d9d203619f50adae94ddb6bbccd28f381737,"# Copyright 2012 Red Hat, Inc.",1,1,0.14285714285714285,263
0e48d9d203619f50adae94ddb6bbccd28f381737,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.14285714285714285,264
0e48d9d203619f50adae94ddb6bbccd28f381737,:param service: The service you would like to start.,1,1,0.14285714285714285,265
0e48d9d203619f50adae94ddb6bbccd28f381737,# All Rights Reserved.,1,1,0.14285714285714285,266
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG = logging.getLogger(__name__),1,1,0.14285714285714285,267
0e48d9d203619f50adae94ddb6bbccd28f381737,msg = ('Invalid backdoor_port configuration %(range)s: %(ex)s. ',1,1,0.14285714285714285,268
0e48d9d203619f50adae94ddb6bbccd28f381737,"return [o for o in gc.get_objects() if isinstance(o, t)]",1,1,0.14285714285714285,269
0e48d9d203619f50adae94ddb6bbccd28f381737,"for i, gt in enumerate(_find_objects(greenlet.greenlet)):",1,1,0.14285714285714285,270
0e48d9d203619f50adae94ddb6bbccd28f381737,"for threadId, stack in sys._current_frames().items():",1,1,0.14285714285714285,271
0e48d9d203619f50adae94ddb6bbccd28f381737,except ValueError as ex:,1,1,0.14285714285714285,272
0e48d9d203619f50adae94ddb6bbccd28f381737,except socket.error as exc:,1,1,0.14285714285714285,273
0e48d9d203619f50adae94ddb6bbccd28f381737,try_port += 1,1,1,0.14285714285714285,274
0e48d9d203619f50adae94ddb6bbccd28f381737,port = sock.getsockname()[1],1,1,0.14285714285714285,275
0e48d9d203619f50adae94ddb6bbccd28f381737,return port,1,1,0.14285714285714285,276
0e48d9d203619f50adae94ddb6bbccd28f381737,# Copyright 2011 Justin Santa Barbara,1,1,0.14285714285714285,277
0e48d9d203619f50adae94ddb6bbccd28f381737,# All Rights Reserved.,1,1,0.14285714285714285,278
0e48d9d203619f50adae94ddb6bbccd28f381737,#,1,1,0.14285714285714285,279
0e48d9d203619f50adae94ddb6bbccd28f381737,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.14285714285714285,280
0e48d9d203619f50adae94ddb6bbccd28f381737,import logging,1,1,0.14285714285714285,281
0e48d9d203619f50adae94ddb6bbccd28f381737,import sys,1,1,0.14285714285714285,282
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Entry point for oslo-config-generator.",1,1,0.14285714285714285,283
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG = logging.getLogger(__name__),1,1,0.14285714285714285,284
0e48d9d203619f50adae94ddb6bbccd28f381737,"""Acceptable values are 0, <port>, and <start>:<end>, where 0 results """,1,1,0.14285714285714285,285
0e48d9d203619f50adae94ddb6bbccd28f381737,import errno,1,1,0.14285714285714285,286
0e48d9d203619f50adae94ddb6bbccd28f381737,# Copyright (c) 2012 OpenStack Foundation.,1,1,0.14285714285714285,287
0e48d9d203619f50adae94ddb6bbccd28f381737,# Copyright 2011 Justin Santa Barbara,1,1,0.14285714285714285,288
0e48d9d203619f50adae94ddb6bbccd28f381737,# All Rights Reserved.,1,1,0.14285714285714285,289
0e48d9d203619f50adae94ddb6bbccd28f381737,#,1,1,0.14285714285714285,290
0e48d9d203619f50adae94ddb6bbccd28f381737,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.14285714285714285,291
0e48d9d203619f50adae94ddb6bbccd28f381737,import copy,1,1,0.14285714285714285,292
0e48d9d203619f50adae94ddb6bbccd28f381737,import gc,1,1,0.14285714285714285,293
0e48d9d203619f50adae94ddb6bbccd28f381737,import greenlet,1,1,0.14285714285714285,294
0e48d9d203619f50adae94ddb6bbccd28f381737,import logging,1,1,0.14285714285714285,295
0e48d9d203619f50adae94ddb6bbccd28f381737,import pprint,1,1,0.14285714285714285,296
0e48d9d203619f50adae94ddb6bbccd28f381737,import socket,1,1,0.14285714285714285,297
0e48d9d203619f50adae94ddb6bbccd28f381737,import sys,1,1,0.14285714285714285,298
0e48d9d203619f50adae94ddb6bbccd28f381737,import traceback,1,1,0.14285714285714285,299
0e48d9d203619f50adae94ddb6bbccd28f381737,import eventlet.backdoor,1,1,0.14285714285714285,300
0e48d9d203619f50adae94ddb6bbccd28f381737,import time,1,1,0.14285714285714285,301
0e48d9d203619f50adae94ddb6bbccd28f381737,import os,1,1,0.14285714285714285,302
0e48d9d203619f50adae94ddb6bbccd28f381737,this return-value will be returned by LoopingCallBase.wait(),1,1,0.14285714285714285,303
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Decorator to indicate that a method is a periodic task.",1,1,0.14285714285714285,304
0e48d9d203619f50adae94ddb6bbccd28f381737,"starts. If name is not provided, __name__ of function is used.",1,1,0.14285714285714285,305
0e48d9d203619f50adae94ddb6bbccd28f381737,if f._periodic_external_ok and not CONF.run_external_periodic_tasks:,1,1,0.14285714285714285,306
0e48d9d203619f50adae94ddb6bbccd28f381737,# Control frequency,1,1,0.14285714285714285,307
0e48d9d203619f50adae94ddb6bbccd28f381737,return f,1,1,0.14285714285714285,308
0e48d9d203619f50adae94ddb6bbccd28f381737,"#   periodic_task(*args, **kwargs)(f)",1,1,0.14285714285714285,309
0e48d9d203619f50adae94ddb6bbccd28f381737,#   periodic_task(f),1,1,0.14285714285714285,310
0e48d9d203619f50adae94ddb6bbccd28f381737,:return: whether task was actually enabled,1,1,0.14285714285714285,311
0e48d9d203619f50adae94ddb6bbccd28f381737,name = task._periodic_name,1,1,0.14285714285714285,312
0e48d9d203619f50adae94ddb6bbccd28f381737,"'its interval is negative'),",1,1,0.14285714285714285,313
0e48d9d203619f50adae94ddb6bbccd28f381737,# parent's toes.,1,1,0.14285714285714285,314
0e48d9d203619f50adae94ddb6bbccd28f381737,except AttributeError:,1,1,0.14285714285714285,315
0e48d9d203619f50adae94ddb6bbccd28f381737,for value in cls.__dict__.values():,1,1,0.14285714285714285,316
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.debug(""Running periodic task %(full_task_name)s"",",1,1,0.14285714285714285,317
0e48d9d203619f50adae94ddb6bbccd28f381737,self.f = f,1,1,0.14285714285714285,318
0e48d9d203619f50adae94ddb6bbccd28f381737,"# Check if due, if not skip",1,1,0.14285714285714285,319
0e48d9d203619f50adae94ddb6bbccd28f381737,interval of 60 seconds.,1,1,0.14285714285714285,320
0e48d9d203619f50adae94ddb6bbccd28f381737,# frequently.,1,1,0.14285714285714285,321
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Entry point for oslo-config-generator.""""""",1,1,0.14285714285714285,322
0e48d9d203619f50adae94ddb6bbccd28f381737,import logging,1,1,0.14285714285714285,323
0e48d9d203619f50adae94ddb6bbccd28f381737,greenthread.sleep(-delay if delay < 0 else 0),1,1,0.14285714285714285,324
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""A fixed interval looping call.""""""",1,1,0.14285714285714285,325
0e48d9d203619f50adae94ddb6bbccd28f381737,except LoopingCallDone as e:,1,1,0.14285714285714285,326
0e48d9d203619f50adae94ddb6bbccd28f381737,#,1,1,0.14285714285714285,327
0e48d9d203619f50adae94ddb6bbccd28f381737,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.14285714285714285,328
0e48d9d203619f50adae94ddb6bbccd28f381737,import copy,1,1,0.14285714285714285,329
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""A looping call which sleeps until the next known event.",1,1,0.14285714285714285,330
0e48d9d203619f50adae94ddb6bbccd28f381737,if delay > 0:,1,1,0.14285714285714285,331
0e48d9d203619f50adae94ddb6bbccd28f381737,import time,1,1,0.14285714285714285,332
0e48d9d203619f50adae94ddb6bbccd28f381737,import six,1,1,0.14285714285714285,333
0e48d9d203619f50adae94ddb6bbccd28f381737,"'Should we run them here?'),",1,1,0.14285714285714285,334
0e48d9d203619f50adae94ddb6bbccd28f381737,import random,1,1,0.14285714285714285,335
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG = logging.getLogger(__name__),1,1,0.14285714285714285,336
0e48d9d203619f50adae94ddb6bbccd28f381737,status = 2,1,0,0.0,337
0e48d9d203619f50adae94ddb6bbccd28f381737,status = 0,1,0,0.0,338
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher.wait(),1,0,0.0,339
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Child caught %s, exiting'), signame)",1,0,0.0,340
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(_LE('Unhandled exception')),1,0,0.0,341
0e48d9d203619f50adae94ddb6bbccd28f381737,eventlet.spawn_n(self._pipe_watcher),1,0,0.0,342
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher.stop(),1,0,0.0,343
0e48d9d203619f50adae94ddb6bbccd28f381737,self._child_process_handle_signal(),1,0,0.0,344
0e48d9d203619f50adae94ddb6bbccd28f381737,eventlet.hubs.use_hub(),1,0,0.0,345
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _child_wait_for_exit_or_signal(self, launcher):",1,0,0.0,346
0e48d9d203619f50adae94ddb6bbccd28f381737,os.close(self.writepipe),1,0,0.0,347
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _child_process(self, service):",1,0,0.0,348
0e48d9d203619f50adae94ddb6bbccd28f381737,def _child_process_handle_signal(self):,1,0,0.0,349
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGINT, signal.SIG_IGN)",1,0,0.0,350
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGHUP, _sighup)",1,0,0.0,351
0e48d9d203619f50adae94ddb6bbccd28f381737,raise SignalExit(signal.SIGHUP),1,0,0.0,352
0e48d9d203619f50adae94ddb6bbccd28f381737,def _sighup(*args):,1,0,0.0,353
0e48d9d203619f50adae94ddb6bbccd28f381737,self._signal_handlers_set.add(self._handle_signal),1,0,0.0,354
0e48d9d203619f50adae94ddb6bbccd28f381737,sys.exit(1),1,0,0.0,355
0e48d9d203619f50adae94ddb6bbccd28f381737,self.readpipe.read(1),1,0,0.0,356
0e48d9d203619f50adae94ddb6bbccd28f381737,def _pipe_watcher(self):,1,0,0.0,357
0e48d9d203619f50adae94ddb6bbccd28f381737,self.running = False,1,0,0.0,358
0e48d9d203619f50adae94ddb6bbccd28f381737,self.sigcaught = signo,1,0,0.0,359
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher = Launcher(),1,0,0.0,360
0e48d9d203619f50adae94ddb6bbccd28f381737,_set_signals_handler(self._handle_class_signals),1,0,0.0,361
0e48d9d203619f50adae94ddb6bbccd28f381737,random.seed(),1,0,0.0,362
0e48d9d203619f50adae94ddb6bbccd28f381737,wrap.children.add(pid),1,0,0.0,363
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher.launch_service(service),1,0,0.0,364
0e48d9d203619f50adae94ddb6bbccd28f381737,self.children[pid] = wrap,1,0,0.0,365
0e48d9d203619f50adae94ddb6bbccd28f381737,sig = os.WTERMSIG(status),1,0,0.0,366
0e48d9d203619f50adae94ddb6bbccd28f381737,"rfd, self.writepipe = os.pipe()",1,0,0.0,367
0e48d9d203619f50adae94ddb6bbccd28f381737,if os.WIFSIGNALED(status):,1,0,0.0,368
0e48d9d203619f50adae94ddb6bbccd28f381737,"if exc.errno not in (errno.EINTR, errno.ECHILD):",1,0,0.0,369
0e48d9d203619f50adae94ddb6bbccd28f381737,return None,1,0,0.0,370
0e48d9d203619f50adae94ddb6bbccd28f381737,if not pid:,1,0,0.0,371
0e48d9d203619f50adae94ddb6bbccd28f381737,"pid, status = os.waitpid(0, os.WNOHANG)",1,0,0.0,372
0e48d9d203619f50adae94ddb6bbccd28f381737,def _wait_child(self):,1,0,0.0,373
0e48d9d203619f50adae94ddb6bbccd28f381737,self._start_child(wrap),1,0,0.0,374
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Starting %d workers'), wrap.workers)",1,0,0.0,375
0e48d9d203619f50adae94ddb6bbccd28f381737,"wrap = ServiceWrapper(service, workers)",1,0,0.0,376
0e48d9d203619f50adae94ddb6bbccd28f381737,"def launch_service(self, service, workers=1):",1,0,0.0,377
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Started child %d'), pid)",1,0,0.0,378
0e48d9d203619f50adae94ddb6bbccd28f381737,return launcher,1,0,0.0,379
0e48d9d203619f50adae94ddb6bbccd28f381737,os._exit(status),1,0,0.0,380
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher.restart(),1,0,0.0,381
0e48d9d203619f50adae94ddb6bbccd28f381737,break,1,0,0.0,382
0e48d9d203619f50adae94ddb6bbccd28f381737,"status, signo = self._child_wait_for_exit_or_signal(launcher)",1,0,0.0,383
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher = self._child_process(wrap.service),1,0,0.0,384
0e48d9d203619f50adae94ddb6bbccd28f381737,wrap.forktimes.append(time.time()),1,0,0.0,385
0e48d9d203619f50adae94ddb6bbccd28f381737,wrap.forktimes.pop(0),1,0,0.0,386
0e48d9d203619f50adae94ddb6bbccd28f381737,time.sleep(1),1,0,0.0,387
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Forking too fast, sleeping'))",1,0,0.0,388
0e48d9d203619f50adae94ddb6bbccd28f381737,if time.time() - wrap.forktimes[0] < wrap.workers:,1,0,0.0,389
0e48d9d203619f50adae94ddb6bbccd28f381737,if len(wrap.forktimes) > wrap.workers:,1,0,0.0,390
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _start_child(self, wrap):",1,0,0.0,391
0e48d9d203619f50adae94ddb6bbccd28f381737,"self.readpipe = eventlet.greenio.GreenPipe(rfd, 'r')",1,0,0.0,392
0e48d9d203619f50adae94ddb6bbccd28f381737,if ready_callback:,1,0,0.0,393
0e48d9d203619f50adae94ddb6bbccd28f381737,self.wait_interval = wait_interval,1,0,0.0,394
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _handle_signal(self, signo, frame):",1,0,0.0,395
0e48d9d203619f50adae94ddb6bbccd28f381737,"super(ServiceLauncher, self).wait()",1,0,0.0,396
0e48d9d203619f50adae94ddb6bbccd28f381737,ready_callback(),1,0,0.0,397
0e48d9d203619f50adae94ddb6bbccd28f381737,code = os.WEXITSTATUS(status),1,0,0.0,398
0e48d9d203619f50adae94ddb6bbccd28f381737,"CONF.log_opt_values(LOG, logging.DEBUG)",1,0,0.0,399
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.debug('Full set of CONF:'),1,0,0.0,400
0e48d9d203619f50adae94ddb6bbccd28f381737,signo = 0,1,0,0.0,401
0e48d9d203619f50adae94ddb6bbccd28f381737,status = None,1,0,0.0,402
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _wait_for_exit_or_signal(self, ready_callback=None):",1,0,0.0,403
0e48d9d203619f50adae94ddb6bbccd28f381737,_set_signals_handler(self._handle_signal),1,0,0.0,404
0e48d9d203619f50adae94ddb6bbccd28f381737,def handle_signal(self):,1,0,0.0,405
0e48d9d203619f50adae94ddb6bbccd28f381737,raise SignalExit(signo),1,0,0.0,406
0e48d9d203619f50adae94ddb6bbccd28f381737,_set_signals_handler(signal.SIG_DFL),1,0,0.0,407
0e48d9d203619f50adae94ddb6bbccd28f381737,class ServiceLauncher(Launcher):,1,0,0.0,408
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Caught %s, exiting'), signame)",1,0,0.0,409
0e48d9d203619f50adae94ddb6bbccd28f381737,self.signo = signo,1,0,0.0,410
0e48d9d203619f50adae94ddb6bbccd28f381737,"super(SignalExit, self).__init__(exccode)",1,0,0.0,411
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, signo, exccode=1):",1,0,0.0,412
0e48d9d203619f50adae94ddb6bbccd28f381737,class SignalExit(SystemExit):,1,0,0.0,413
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services.restart(),1,0,0.0,414
0e48d9d203619f50adae94ddb6bbccd28f381737,cfg.CONF.reload_config_files(),1,0,0.0,415
0e48d9d203619f50adae94ddb6bbccd28f381737,def restart(self):,1,0,0.0,416
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services.wait(),1,0,0.0,417
0e48d9d203619f50adae94ddb6bbccd28f381737,def wait(self):,1,0,0.0,418
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services.stop(),1,0,0.0,419
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Stop all services which are currently running.",1,0,0.0,420
0e48d9d203619f50adae94ddb6bbccd28f381737,def stop(self):,1,0,0.0,421
0e48d9d203619f50adae94ddb6bbccd28f381737,signame = _signo_to_signame(exc.signo),1,0,0.0,422
0e48d9d203619f50adae94ddb6bbccd28f381737,status = exc.code,1,0,0.0,423
0e48d9d203619f50adae94ddb6bbccd28f381737,self.running = True,1,0,0.0,424
0e48d9d203619f50adae94ddb6bbccd28f381737,self.service = service,1,0,0.0,425
0e48d9d203619f50adae94ddb6bbccd28f381737,self.sigcaught = None,1,0,0.0,426
0e48d9d203619f50adae94ddb6bbccd28f381737,self.children = {},1,0,0.0,427
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Constructor.",1,0,0.0,428
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, wait_interval=0.01):",1,0,0.0,429
0e48d9d203619f50adae94ddb6bbccd28f381737,"handler(*args, **kwargs)",1,0,0.0,430
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _handle_class_signals(cls, *args, **kwargs):",1,0,0.0,431
0e48d9d203619f50adae94ddb6bbccd28f381737,@classmethod,1,0,0.0,432
0e48d9d203619f50adae94ddb6bbccd28f381737,_signal_handlers_set = set(),1,0,0.0,433
0e48d9d203619f50adae94ddb6bbccd28f381737,class ProcessLauncher(object):,1,0,0.0,434
0e48d9d203619f50adae94ddb6bbccd28f381737,self.forktimes = [],1,0,0.0,435
0e48d9d203619f50adae94ddb6bbccd28f381737,self.children = set(),1,0,0.0,436
0e48d9d203619f50adae94ddb6bbccd28f381737,self.workers = workers,1,0,0.0,437
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, service, workers):",1,0,0.0,438
0e48d9d203619f50adae94ddb6bbccd28f381737,signo = exc.signo,1,0,0.0,439
0e48d9d203619f50adae94ddb6bbccd28f381737,class ServiceWrapper(object):,1,0,0.0,440
0e48d9d203619f50adae94ddb6bbccd28f381737,self.restart(),1,0,0.0,441
0e48d9d203619f50adae94ddb6bbccd28f381737,return status,1,0,0.0,442
0e48d9d203619f50adae94ddb6bbccd28f381737,if not _is_sighup_and_daemon(signo):,1,0,0.0,443
0e48d9d203619f50adae94ddb6bbccd28f381737,"status, signo = self._wait_for_exit_or_signal(ready_callback)",1,0,0.0,444
0e48d9d203619f50adae94ddb6bbccd28f381737,self.handle_signal(),1,0,0.0,445
0e48d9d203619f50adae94ddb6bbccd28f381737,while True:,1,0,0.0,446
0e48d9d203619f50adae94ddb6bbccd28f381737,systemd.notify_once(),1,0,0.0,447
0e48d9d203619f50adae94ddb6bbccd28f381737,"def wait(self, ready_callback=None):",1,0,0.0,448
0e48d9d203619f50adae94ddb6bbccd28f381737,"return status, signo",1,0,0.0,449
0e48d9d203619f50adae94ddb6bbccd28f381737,self.stop(),1,0,0.0,450
0e48d9d203619f50adae94ddb6bbccd28f381737,finally:,1,0,0.0,451
0e48d9d203619f50adae94ddb6bbccd28f381737,"dict(pid=pid, sig=sig))",1,0,0.0,452
0e48d9d203619f50adae94ddb6bbccd28f381737,self._done.send(),1,0,0.0,453
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.info(_LI('Child %(pid)s exited with status %(code)d'),",1,0,0.0,454
0e48d9d203619f50adae94ddb6bbccd28f381737,class ThreadGroup(object):,1,0,0.0,455
0e48d9d203619f50adae94ddb6bbccd28f381737,"*args, **kwargs):",1,0,0.0,456
0e48d9d203619f50adae94ddb6bbccd28f381737,"def add_timer(self, interval, callback, initial_delay=None,",1,0,0.0,457
0e48d9d203619f50adae94ddb6bbccd28f381737,self.timers.append(timer),1,0,0.0,458
0e48d9d203619f50adae94ddb6bbccd28f381737,periodic_interval_max=periodic_interval_max),1,0,0.0,459
0e48d9d203619f50adae94ddb6bbccd28f381737,"timer.start(initial_delay=initial_delay,",1,0,0.0,460
0e48d9d203619f50adae94ddb6bbccd28f381737,"periodic_interval_max=None, *args, **kwargs):",1,0,0.0,461
0e48d9d203619f50adae94ddb6bbccd28f381737,"def add_dynamic_timer(self, callback, initial_delay=None,",1,0,0.0,462
0e48d9d203619f50adae94ddb6bbccd28f381737,self.timers = [],1,0,0.0,463
0e48d9d203619f50adae94ddb6bbccd28f381737,self.threads = [],1,0,0.0,464
0e48d9d203619f50adae94ddb6bbccd28f381737,self.pool = greenpool.GreenPool(thread_pool_size),1,0,0.0,465
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, thread_pool_size=10):",1,0,0.0,466
0e48d9d203619f50adae94ddb6bbccd28f381737,when need be).,1,0,0.0,467
0e48d9d203619f50adae94ddb6bbccd28f381737,"self.thread.link(func, *args, **kwargs)",1,0,0.0,468
0e48d9d203619f50adae94ddb6bbccd28f381737,"launcher.launch_service(service, workers=workers)",1,0,0.0,469
0e48d9d203619f50adae94ddb6bbccd28f381737,"def link(self, func, *args, **kwargs):",1,0,0.0,470
0e48d9d203619f50adae94ddb6bbccd28f381737,return self.thread.wait(),1,0,0.0,471
0e48d9d203619f50adae94ddb6bbccd28f381737,def wait(self):,1,0,0.0,472
0e48d9d203619f50adae94ddb6bbccd28f381737,self.thread.kill(),1,0,0.0,473
0e48d9d203619f50adae94ddb6bbccd28f381737,def stop(self):,1,0,0.0,474
0e48d9d203619f50adae94ddb6bbccd28f381737,"self.thread.link(_thread_done, group=group, thread=self)",1,0,0.0,475
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, thread, group):",1,0,0.0,476
0e48d9d203619f50adae94ddb6bbccd28f381737,class Thread(object):,1,0,0.0,477
0e48d9d203619f50adae94ddb6bbccd28f381737,kwargs['group'].thread_done(kwargs['thread']),1,0,0.0,478
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""",1,0,0.0,479
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _thread_done(gt, *args, **kwargs):",1,0,0.0,480
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher = common_service.ProcessLauncher(wait_interval=1.0),1,0,0.0,481
0e48d9d203619f50adae94ddb6bbccd28f381737,"pulse = loopingcall.FixedIntervalLoopingCall(callback, *args, **kwargs)",1,0,0.0,482
0e48d9d203619f50adae94ddb6bbccd28f381737,"pulse.start(interval=interval,",1,0,0.0,483
0e48d9d203619f50adae94ddb6bbccd28f381737,initial_delay=initial_delay),1,0,0.0,484
0e48d9d203619f50adae94ddb6bbccd28f381737,self.timers.append(pulse),1,0,0.0,485
0e48d9d203619f50adae94ddb6bbccd28f381737,service.backdoor_port = self.backdoor_port,1,0,0.0,486
0e48d9d203619f50adae94ddb6bbccd28f381737,x.wait(),1,0,0.0,487
0e48d9d203619f50adae94ddb6bbccd28f381737,self._stop_threads(),1,0,0.0,488
0e48d9d203619f50adae94ddb6bbccd28f381737,else:,1,0,0.0,489
0e48d9d203619f50adae94ddb6bbccd28f381737,self.wait(),1,0,0.0,490
0e48d9d203619f50adae94ddb6bbccd28f381737,if graceful:,1,0,0.0,491
0e48d9d203619f50adae94ddb6bbccd28f381737,self.stop_timers(),1,0,0.0,492
0e48d9d203619f50adae94ddb6bbccd28f381737,"* In case of graceful=False, kill threads immediately.",1,0,0.0,493
0e48d9d203619f50adae94ddb6bbccd28f381737,Never kill threads.,1,0,0.0,494
0e48d9d203619f50adae94ddb6bbccd28f381737,"def stop(self, graceful=False):",1,0,0.0,495
0e48d9d203619f50adae94ddb6bbccd28f381737,def stop_timers(self):,1,0,0.0,496
0e48d9d203619f50adae94ddb6bbccd28f381737,pass,1,0,0.0,497
0e48d9d203619f50adae94ddb6bbccd28f381737,x.stop(),1,0,0.0,498
0e48d9d203619f50adae94ddb6bbccd28f381737,try:,1,0,0.0,499
0e48d9d203619f50adae94ddb6bbccd28f381737,continue,1,0,0.0,500
0e48d9d203619f50adae94ddb6bbccd28f381737,if x is current:,1,0,0.0,501
0e48d9d203619f50adae94ddb6bbccd28f381737,current = threading.current_thread(),1,0,0.0,502
0e48d9d203619f50adae94ddb6bbccd28f381737,def _stop_threads(self):,1,0,0.0,503
0e48d9d203619f50adae94ddb6bbccd28f381737,self.threads.remove(thread),1,0,0.0,504
0e48d9d203619f50adae94ddb6bbccd28f381737,"def thread_done(self, thread):",1,0,0.0,505
0e48d9d203619f50adae94ddb6bbccd28f381737,return th,1,0,0.0,506
0e48d9d203619f50adae94ddb6bbccd28f381737,self.threads.append(th),1,0,0.0,507
0e48d9d203619f50adae94ddb6bbccd28f381737,"th = Thread(gt, self)",1,0,0.0,508
0e48d9d203619f50adae94ddb6bbccd28f381737,"gt = self.pool.spawn(callback, *args, **kwargs)",1,0,0.0,509
0e48d9d203619f50adae94ddb6bbccd28f381737,"def add_thread(self, callback, *args, **kwargs):",1,0,0.0,510
0e48d9d203619f50adae94ddb6bbccd28f381737,class RpcWorker(object):,1,0,0.0,511
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher = ProcessLauncher(),1,0,0.0,512
0e48d9d203619f50adae94ddb6bbccd28f381737,"dict(pid=pid, code=code))",1,0,0.0,513
0e48d9d203619f50adae94ddb6bbccd28f381737,signame = _signo_to_signame(self.sigcaught),1,0,0.0,514
0e48d9d203619f50adae94ddb6bbccd28f381737,self._done = event.Event(),1,0,0.0,515
0e48d9d203619f50adae94ddb6bbccd28f381737,self.tg = threadgroup.ThreadGroup(threads),1,0,0.0,516
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, threads=1000):",1,0,0.0,517
0e48d9d203619f50adae94ddb6bbccd28f381737,class Service(object):,1,0,0.0,518
0e48d9d203619f50adae94ddb6bbccd28f381737,self._wait_child(),1,0,0.0,519
0e48d9d203619f50adae94ddb6bbccd28f381737,while self.children:,1,0,0.0,520
0e48d9d203619f50adae94ddb6bbccd28f381737,if self.children:,1,0,0.0,521
0e48d9d203619f50adae94ddb6bbccd28f381737,if exc.errno != errno.ESRCH:,1,0,0.0,522
0e48d9d203619f50adae94ddb6bbccd28f381737,"os.kill(pid, signal.SIGTERM)",1,0,0.0,523
0e48d9d203619f50adae94ddb6bbccd28f381737,"os.kill(pid, signal.SIGHUP)",1,0,0.0,524
0e48d9d203619f50adae94ddb6bbccd28f381737,service.reset(),1,0,0.0,525
0e48d9d203619f50adae94ddb6bbccd28f381737,if not _is_sighup_and_daemon(self.sigcaught):,1,0,0.0,526
0e48d9d203619f50adae94ddb6bbccd28f381737,return,1,0,0.0,527
0e48d9d203619f50adae94ddb6bbccd28f381737,launcher = ServiceLauncher(),1,0,0.0,528
0e48d9d203619f50adae94ddb6bbccd28f381737,if not self.sigcaught:,1,0,0.0,529
0e48d9d203619f50adae94ddb6bbccd28f381737,self._respawn_children(),1,0,0.0,530
0e48d9d203619f50adae94ddb6bbccd28f381737,continue,1,0,0.0,531
0e48d9d203619f50adae94ddb6bbccd28f381737,eventlet.greenthread.sleep(self.wait_interval),1,0,0.0,532
0e48d9d203619f50adae94ddb6bbccd28f381737,if not wrap:,1,0,0.0,533
0e48d9d203619f50adae94ddb6bbccd28f381737,wrap = self._wait_child(),1,0,0.0,534
0e48d9d203619f50adae94ddb6bbccd28f381737,while self.running:,1,0,0.0,535
0e48d9d203619f50adae94ddb6bbccd28f381737,def _respawn_children(self):,1,0,0.0,536
0e48d9d203619f50adae94ddb6bbccd28f381737,return wrap,1,0,0.0,537
0e48d9d203619f50adae94ddb6bbccd28f381737,wrap.children.remove(pid),1,0,0.0,538
0e48d9d203619f50adae94ddb6bbccd28f381737,wrap = self.children.pop(pid),1,0,0.0,539
0e48d9d203619f50adae94ddb6bbccd28f381737,"LOG.warning(_LW('pid %d not in child list'), pid)",1,0,0.0,540
0e48d9d203619f50adae94ddb6bbccd28f381737,def reset(self):,1,0,0.0,541
0e48d9d203619f50adae94ddb6bbccd28f381737,def start(self):,1,0,0.0,542
0e48d9d203619f50adae94ddb6bbccd28f381737,pass,1,0,0.0,543
0e48d9d203619f50adae94ddb6bbccd28f381737,"def stop(self, graceful=False):",1,0,0.0,544
0e48d9d203619f50adae94ddb6bbccd28f381737,if workers is None or workers == 1:,1,0,0.0,545
0e48d9d203619f50adae94ddb6bbccd28f381737,"def launch(service, workers=1):",1,0,0.0,546
0e48d9d203619f50adae94ddb6bbccd28f381737,done.wait(),1,0,0.0,547
0e48d9d203619f50adae94ddb6bbccd28f381737,service.start(),1,0,0.0,548
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""Service start wrapper.",1,0,0.0,549
0e48d9d203619f50adae94ddb6bbccd28f381737,"def run_service(service, done):",1,0,0.0,550
0e48d9d203619f50adae94ddb6bbccd28f381737,@staticmethod,1,0,0.0,551
0e48d9d203619f50adae94ddb6bbccd28f381737,"self.tg.add_thread(self.run_service, restart_service, self.done)",1,0,0.0,552
0e48d9d203619f50adae94ddb6bbccd28f381737,restart_service.reset(),1,0,0.0,553
0e48d9d203619f50adae94ddb6bbccd28f381737,self.tg.stop(),1,0,0.0,554
0e48d9d203619f50adae94ddb6bbccd28f381737,self.done.send(),1,0,0.0,555
0e48d9d203619f50adae94ddb6bbccd28f381737,if not self.done.ready():,1,0,0.0,556
0e48d9d203619f50adae94ddb6bbccd28f381737,service.wait(),1,0,0.0,557
0e48d9d203619f50adae94ddb6bbccd28f381737,service.stop(),1,0,0.0,558
0e48d9d203619f50adae94ddb6bbccd28f381737,"self.tg.add_thread(self.run_service, service, self.done)",1,0,0.0,559
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services.append(service),1,0,0.0,560
0e48d9d203619f50adae94ddb6bbccd28f381737,"def add(self, service):",1,0,0.0,561
0e48d9d203619f50adae94ddb6bbccd28f381737,self.done = event.Event(),1,0,0.0,562
0e48d9d203619f50adae94ddb6bbccd28f381737,self.tg = threadgroup.ThreadGroup(),1,0,0.0,563
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services = [],1,0,0.0,564
0e48d9d203619f50adae94ddb6bbccd28f381737,class Services(object):,1,0,0.0,565
0e48d9d203619f50adae94ddb6bbccd28f381737,self._done.wait(),1,0,0.0,566
0e48d9d203619f50adae94ddb6bbccd28f381737,if not self._done.ready():,1,0,0.0,567
0e48d9d203619f50adae94ddb6bbccd28f381737,self.tg.wait(),1,0,0.0,568
0e48d9d203619f50adae94ddb6bbccd28f381737,self.tg.stop(graceful),1,0,0.0,569
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services.add(service),1,0,0.0,570
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""",1,0,0.0,571
0e48d9d203619f50adae94ddb6bbccd28f381737,"def launch_service(self, service):",1,0,0.0,572
0e48d9d203619f50adae94ddb6bbccd28f381737,self.args = args,1,0,0.0,573
0e48d9d203619f50adae94ddb6bbccd28f381737,if initial_delay:,1,0,0.0,574
0e48d9d203619f50adae94ddb6bbccd28f381737,def _inner():,1,0,0.0,575
0e48d9d203619f50adae94ddb6bbccd28f381737,done = event.Event(),1,0,0.0,576
0e48d9d203619f50adae94ddb6bbccd28f381737,self._running = True,1,0,0.0,577
0e48d9d203619f50adae94ddb6bbccd28f381737,"def start(self, interval, initial_delay=None):",1,0,0.0,578
0e48d9d203619f50adae94ddb6bbccd28f381737,class FixedIntervalLoopingCall(LoopingCallBase):,1,0,0.0,579
0e48d9d203619f50adae94ddb6bbccd28f381737,return self.done.wait(),1,0,0.0,580
0e48d9d203619f50adae94ddb6bbccd28f381737,def wait(self):,1,0,0.0,581
0e48d9d203619f50adae94ddb6bbccd28f381737,def stop(self):,1,0,0.0,582
0e48d9d203619f50adae94ddb6bbccd28f381737,self.done = None,1,0,0.0,583
0e48d9d203619f50adae94ddb6bbccd28f381737,self._running = False,1,0,0.0,584
0e48d9d203619f50adae94ddb6bbccd28f381737,self.kw = kw,1,0,0.0,585
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, f=None, *args, **kw):",1,0,0.0,586
0e48d9d203619f50adae94ddb6bbccd28f381737,sys.displayhook = displayhook,1,0,0.0,587
0e48d9d203619f50adae94ddb6bbccd28f381737,class LoopingCallBase(object):,1,0,0.0,588
0e48d9d203619f50adae94ddb6bbccd28f381737,self.retvalue = retvalue,1,0,0.0,589
0e48d9d203619f50adae94ddb6bbccd28f381737,""""""":param retvalue: Value that LoopingCallBase.wait() should return.""""""",1,0,0.0,590
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, retvalue=True):",1,0,0.0,591
0e48d9d203619f50adae94ddb6bbccd28f381737,StopIteration.,1,0,0.0,592
0e48d9d203619f50adae94ddb6bbccd28f381737,class LoopingCallDone(Exception):,1,0,0.0,593
0e48d9d203619f50adae94ddb6bbccd28f381737,_ts = lambda: time.time(),1,0,0.0,594
0e48d9d203619f50adae94ddb6bbccd28f381737,locals=backdoor_locals),1,0,0.0,595
0e48d9d203619f50adae94ddb6bbccd28f381737,"eventlet.spawn_n(eventlet.backdoor.backdoor_server, sock,",1,0,0.0,596
0e48d9d203619f50adae94ddb6bbccd28f381737,),1,0,0.0,597
0e48d9d203619f50adae94ddb6bbccd28f381737,"{'port': port, 'pid': os.getpid()}",1,0,0.0,598
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.info(,1,0,0.0,599
0e48d9d203619f50adae94ddb6bbccd28f381737,greenthread.sleep(initial_delay),1,0,0.0,600
0e48d9d203619f50adae94ddb6bbccd28f381737,try:,1,0,0.0,601
0e48d9d203619f50adae94ddb6bbccd28f381737,while self._running:,1,0,0.0,602
0e48d9d203619f50adae94ddb6bbccd28f381737,start = _ts(),1,0,0.0,603
0e48d9d203619f50adae94ddb6bbccd28f381737,periodic_opts = [,1,0,0.0,604
0e48d9d203619f50adae94ddb6bbccd28f381737,greenthread.spawn(_inner),1,0,0.0,605
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(_LE('in dynamic looping call')),1,0,0.0,606
0e48d9d203619f50adae94ddb6bbccd28f381737,greenthread.sleep(idle),1,0,0.0,607
0e48d9d203619f50adae94ddb6bbccd28f381737,"'for %(idle).02f seconds',",1,0,0.0,608
0e48d9d203619f50adae94ddb6bbccd28f381737,"idle = min(idle, periodic_interval_max)",1,0,0.0,609
0e48d9d203619f50adae94ddb6bbccd28f381737,if periodic_interval_max is not None:,1,0,0.0,610
0e48d9d203619f50adae94ddb6bbccd28f381737,"idle = self.f(*self.args, **self.kw)",1,0,0.0,611
0e48d9d203619f50adae94ddb6bbccd28f381737,"def start(self, initial_delay=None, periodic_interval_max=None):",1,0,0.0,612
0e48d9d203619f50adae94ddb6bbccd28f381737,called again.,1,0,0.0,613
0e48d9d203619f50adae94ddb6bbccd28f381737,class DynamicLoopingCall(LoopingCallBase):,1,0,0.0,614
0e48d9d203619f50adae94ddb6bbccd28f381737,return self.done,1,0,0.0,615
0e48d9d203619f50adae94ddb6bbccd28f381737,greenthread.spawn_n(_inner),1,0,0.0,616
0e48d9d203619f50adae94ddb6bbccd28f381737,self.done = done,1,0,0.0,617
0e48d9d203619f50adae94ddb6bbccd28f381737,done.send(True),1,0,0.0,618
0e48d9d203619f50adae94ddb6bbccd28f381737,else:,1,0,0.0,619
0e48d9d203619f50adae94ddb6bbccd28f381737,return,1,0,0.0,620
0e48d9d203619f50adae94ddb6bbccd28f381737,done.send_exception(*sys.exc_info()),1,0,0.0,621
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(_LE('in fixed duration looping call')),1,0,0.0,622
0e48d9d203619f50adae94ddb6bbccd28f381737,done.send(e.retvalue),1,0,0.0,623
0e48d9d203619f50adae94ddb6bbccd28f381737,self.stop(),1,0,0.0,624
0e48d9d203619f50adae94ddb6bbccd28f381737,break,1,0,0.0,625
0e48d9d203619f50adae94ddb6bbccd28f381737,if not self._running:,1,0,0.0,626
0e48d9d203619f50adae94ddb6bbccd28f381737,end = _ts(),1,0,0.0,627
0e48d9d203619f50adae94ddb6bbccd28f381737,"self.f(*self.args, **self.kw)",1,0,0.0,628
0e48d9d203619f50adae94ddb6bbccd28f381737,"sock = _listen('localhost', start_port, end_port, eventlet.listen)",1,0,0.0,629
0e48d9d203619f50adae94ddb6bbccd28f381737,pprint.pprint(val),1,0,0.0,630
0e48d9d203619f50adae94ddb6bbccd28f381737,"default=True,",1,0,0.0,631
0e48d9d203619f50adae94ddb6bbccd28f381737,"{'range': port_range, 'ex': ex, 'help': help_msg})",1,0,0.0,632
0e48d9d203619f50adae94ddb6bbccd28f381737,traceback.print_stack(stack),1,0,0.0,633
0e48d9d203619f50adae94ddb6bbccd28f381737,print(threadId),1,0,0.0,634
0e48d9d203619f50adae94ddb6bbccd28f381737,def _print_nativethreads():,1,0,0.0,635
0e48d9d203619f50adae94ddb6bbccd28f381737,print(),1,0,0.0,636
0e48d9d203619f50adae94ddb6bbccd28f381737,traceback.print_stack(gt.gr_frame),1,0,0.0,637
0e48d9d203619f50adae94ddb6bbccd28f381737,"print(i, gt)",1,0,0.0,638
0e48d9d203619f50adae94ddb6bbccd28f381737,def _print_greenthreads():,1,0,0.0,639
0e48d9d203619f50adae94ddb6bbccd28f381737,def _find_objects(t):,1,0,0.0,640
0e48d9d203619f50adae94ddb6bbccd28f381737,"print(""Don't use this, just disconnect instead"")",1,0,0.0,641
0e48d9d203619f50adae94ddb6bbccd28f381737,def _dont_use_this():,1,0,0.0,642
0e48d9d203619f50adae94ddb6bbccd28f381737,self.port_range = port_range,1,0,0.0,643
0e48d9d203619f50adae94ddb6bbccd28f381737,"super(EventletBackdoorConfigValueError, self).__init__(msg)",1,0,0.0,644
0e48d9d203619f50adae94ddb6bbccd28f381737,'%(help)s' %,1,0,0.0,645
0e48d9d203619f50adae94ddb6bbccd28f381737,if val is not None:,1,0,0.0,646
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(self, port_range, help_msg, ex):",1,0,0.0,647
0e48d9d203619f50adae94ddb6bbccd28f381737,class EventletBackdoorConfigValueError(Exception):,1,0,0.0,648
0e48d9d203619f50adae94ddb6bbccd28f381737,"return [(None, copy.deepcopy(eventlet_backdoor_opts))]",1,0,0.0,649
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""",1,0,0.0,650
0e48d9d203619f50adae94ddb6bbccd28f381737,def list_opts():,1,0,0.0,651
0e48d9d203619f50adae94ddb6bbccd28f381737,CONF.register_opts(eventlet_backdoor_opts),1,0,0.0,652
0e48d9d203619f50adae94ddb6bbccd28f381737,CONF = cfg.CONF,1,0,0.0,653
0e48d9d203619f50adae94ddb6bbccd28f381737,],1,0,0.0,654
0e48d9d203619f50adae94ddb6bbccd28f381737,"help=""Enable eventlet backdoor.  %s"" % help_for_backdoor_port)",1,0,0.0,655
0e48d9d203619f50adae94ddb6bbccd28f381737,"cfg.StrOpt('backdoor_port',",1,0,0.0,656
0e48d9d203619f50adae94ddb6bbccd28f381737,eventlet_backdoor_opts = [,1,0,0.0,657
0e48d9d203619f50adae94ddb6bbccd28f381737,help_for_backdoor_port = (,1,0,0.0,658
0e48d9d203619f50adae94ddb6bbccd28f381737,def _parse_port_range(port_range):,1,0,0.0,659
0e48d9d203619f50adae94ddb6bbccd28f381737,if ':' not in port_range:,1,0,0.0,660
0e48d9d203619f50adae94ddb6bbccd28f381737,"start, end = port_range, port_range",1,0,0.0,661
0e48d9d203619f50adae94ddb6bbccd28f381737,else:,1,0,0.0,662
0e48d9d203619f50adae94ddb6bbccd28f381737,def displayhook(val):,1,0,0.0,663
0e48d9d203619f50adae94ddb6bbccd28f381737,"start_port, end_port = _parse_port_range(str(CONF.backdoor_port))",1,0,0.0,664
0e48d9d203619f50adae94ddb6bbccd28f381737,return None,1,0,0.0,665
0e48d9d203619f50adae94ddb6bbccd28f381737,if CONF.backdoor_port is None:,1,0,0.0,666
0e48d9d203619f50adae94ddb6bbccd28f381737,},1,0,0.0,667
0e48d9d203619f50adae94ddb6bbccd28f381737,"'pnt': _print_nativethreads,",1,0,0.0,668
0e48d9d203619f50adae94ddb6bbccd28f381737,"'pgt': _print_greenthreads,",1,0,0.0,669
0e48d9d203619f50adae94ddb6bbccd28f381737,"'fo': _find_objects,",1,0,0.0,670
0e48d9d203619f50adae94ddb6bbccd28f381737,backdoor_locals = {,1,0,0.0,671
0e48d9d203619f50adae94ddb6bbccd28f381737,def initialize_if_enabled():,1,0,0.0,672
0e48d9d203619f50adae94ddb6bbccd28f381737,raise,1,0,0.0,673
0e48d9d203619f50adae94ddb6bbccd28f381737,try_port >= end_port):,1,0,0.0,674
0e48d9d203619f50adae94ddb6bbccd28f381737,if (exc.errno != errno.EADDRINUSE or,1,0,0.0,675
0e48d9d203619f50adae94ddb6bbccd28f381737,"return listen_func((host, try_port))",1,0,0.0,676
0e48d9d203619f50adae94ddb6bbccd28f381737,while True:,1,0,0.0,677
0e48d9d203619f50adae94ddb6bbccd28f381737,try_port = start_port,1,0,0.0,678
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _listen(host, start_port, end_port, listen_func):",1,0,0.0,679
0e48d9d203619f50adae94ddb6bbccd28f381737,help_for_backdoor_port),1,0,0.0,680
0e48d9d203619f50adae94ddb6bbccd28f381737,"raise EventletBackdoorConfigValueError(port_range, ex,",1,0,0.0,681
0e48d9d203619f50adae94ddb6bbccd28f381737,"return start, end",1,0,0.0,682
0e48d9d203619f50adae94ddb6bbccd28f381737,raise ValueError,1,0,0.0,683
0e48d9d203619f50adae94ddb6bbccd28f381737,if end < start:,1,0,0.0,684
0e48d9d203619f50adae94ddb6bbccd28f381737,"start, end = int(start), int(end)",1,0,0.0,685
0e48d9d203619f50adae94ddb6bbccd28f381737,try:,1,0,0.0,686
0e48d9d203619f50adae94ddb6bbccd28f381737,"start, end = port_range.split(':', 1)",1,0,0.0,687
0e48d9d203619f50adae94ddb6bbccd28f381737,"cfg.BoolOpt('run_external_periodic_tasks',",1,0,0.0,688
0e48d9d203619f50adae94ddb6bbccd28f381737,],1,0,0.0,689
0e48d9d203619f50adae94ddb6bbccd28f381737,self.backdoor_port = eventlet_backdoor.initialize_if_enabled(),1,0,0.0,690
0e48d9d203619f50adae94ddb6bbccd28f381737,spacing = self._periodic_spacing[task_name],1,0,0.0,691
0e48d9d203619f50adae94ddb6bbccd28f381737,raise,1,0,0.0,692
0e48d9d203619f50adae94ddb6bbccd28f381737,if raise_on_error:,1,0,0.0,693
0e48d9d203619f50adae94ddb6bbccd28f381737,"task(self, context)",1,0,0.0,694
0e48d9d203619f50adae94ddb6bbccd28f381737,"last_run, spacing)",1,0,0.0,695
0e48d9d203619f50adae94ddb6bbccd28f381737,self._periodic_last_run[task_name] = _nearest_boundary(,1,0,0.0,696
0e48d9d203619f50adae94ddb6bbccd28f381737,continue,1,0,0.0,697
0e48d9d203619f50adae94ddb6bbccd28f381737,"idle_for = min(idle_for, delta)",1,0,0.0,698
0e48d9d203619f50adae94ddb6bbccd28f381737,if delta > 0:,1,0,0.0,699
0e48d9d203619f50adae94ddb6bbccd28f381737,delta = last_run + spacing - time.time(),1,0,0.0,700
0e48d9d203619f50adae94ddb6bbccd28f381737,if last_run is not None:,1,0,0.0,701
0e48d9d203619f50adae94ddb6bbccd28f381737,"idle_for = min(idle_for, spacing)",1,0,0.0,702
0e48d9d203619f50adae94ddb6bbccd28f381737,last_run = self._periodic_last_run[task_name],1,0,0.0,703
0e48d9d203619f50adae94ddb6bbccd28f381737,"full_task_name = '.'.join([self.__class__.__name__, task_name])",1,0,0.0,704
0e48d9d203619f50adae94ddb6bbccd28f381737,jitter = int(spacing * (random.random() / 20)),1,0,0.0,705
0e48d9d203619f50adae94ddb6bbccd28f381737,idle_for = DEFAULT_INTERVAL,1,0,0.0,706
0e48d9d203619f50adae94ddb6bbccd28f381737,"def run_periodic_tasks(self, context, raise_on_error=False):",1,0,0.0,707
0e48d9d203619f50adae94ddb6bbccd28f381737,task._periodic_last_run),1,0,0.0,708
0e48d9d203619f50adae94ddb6bbccd28f381737,self._periodic_last_run[task._periodic_name] = (,1,0,0.0,709
0e48d9d203619f50adae94ddb6bbccd28f381737,if self.__class__._add_periodic_task(task):,1,0,0.0,710
0e48d9d203619f50adae94ddb6bbccd28f381737,"def add_periodic_task(self, task):",1,0,0.0,711
0e48d9d203619f50adae94ddb6bbccd28f381737,self._periodic_last_run[name] = task._periodic_last_run,1,0,0.0,712
0e48d9d203619f50adae94ddb6bbccd28f381737,self._periodic_last_run = {},1,0,0.0,713
0e48d9d203619f50adae94ddb6bbccd28f381737,"super(PeriodicTasks, self).__init__()",1,0,0.0,714
0e48d9d203619f50adae94ddb6bbccd28f381737,def __init__(self):,1,0,0.0,715
0e48d9d203619f50adae94ddb6bbccd28f381737,class PeriodicTasks(object):,1,0,0.0,716
0e48d9d203619f50adae94ddb6bbccd28f381737,@six.add_metaclass(_PeriodicTasksMeta),1,0,0.0,717
0e48d9d203619f50adae94ddb6bbccd28f381737,time.sleep(0),1,0,0.0,718
0e48d9d203619f50adae94ddb6bbccd28f381737,return idle_for,1,0,0.0,719
0e48d9d203619f50adae94ddb6bbccd28f381737,class RpcWorker(common_service.ServiceBase):,0,0,0.0,720
0e48d9d203619f50adae94ddb6bbccd28f381737,"launcher = common_service.ProcessLauncher(cfg.CONF,",0,0,0.0,721
0e48d9d203619f50adae94ddb6bbccd28f381737,self.services = Services(),1,0,0.0,722
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""",1,0,0.0,723
0e48d9d203619f50adae94ddb6bbccd28f381737,:returns: None,1,0,0.0,724
0e48d9d203619f50adae94ddb6bbccd28f381737,def __init__(self):,1,0,0.0,725
0e48d9d203619f50adae94ddb6bbccd28f381737,class Launcher(object):,1,0,0.0,726
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGHUP, handler)",1,0,0.0,727
0e48d9d203619f50adae94ddb6bbccd28f381737,"signal.signal(signal.SIGINT, handler)",1,0,0.0,728
0e48d9d203619f50adae94ddb6bbccd28f381737,def _set_signals_handler(handler):,1,0,0.0,729
0e48d9d203619f50adae94ddb6bbccd28f381737,return signals[signo],1,0,0.0,730
0e48d9d203619f50adae94ddb6bbccd28f381737,signals[signal.SIGHUP] = 'SIGHUP',1,0,0.0,731
0e48d9d203619f50adae94ddb6bbccd28f381737,if _sighup_supported():,1,0,0.0,732
0e48d9d203619f50adae94ddb6bbccd28f381737,signal.SIGINT: 'SIGINT'},1,0,0.0,733
0e48d9d203619f50adae94ddb6bbccd28f381737,def _signo_to_signame(signo):,1,0,0.0,734
0e48d9d203619f50adae94ddb6bbccd28f381737,return _is_daemon(),1,0,0.0,735
0e48d9d203619f50adae94ddb6bbccd28f381737,return False,1,0,0.0,736
0e48d9d203619f50adae94ddb6bbccd28f381737,def _is_sighup_and_daemon(signo):,1,0,0.0,737
0e48d9d203619f50adae94ddb6bbccd28f381737,raise,1,0,0.0,738
0e48d9d203619f50adae94ddb6bbccd28f381737,else:,1,0,0.0,739
0e48d9d203619f50adae94ddb6bbccd28f381737,if err.errno == errno.ENOTTY:,1,0,0.0,740
0e48d9d203619f50adae94ddb6bbccd28f381737,try:,1,0,0.0,741
0e48d9d203619f50adae94ddb6bbccd28f381737,def _is_daemon():,1,0,0.0,742
0e48d9d203619f50adae94ddb6bbccd28f381737,"return hasattr(signal, 'SIGHUP')",1,0,0.0,743
0e48d9d203619f50adae94ddb6bbccd28f381737,def _sighup_supported():,1,0,0.0,744
0e48d9d203619f50adae94ddb6bbccd28f381737,CONF = cfg.CONF,1,0,0.0,745
0e48d9d203619f50adae94ddb6bbccd28f381737,wait_interval=1.0),0,0,0.0,746
0e48d9d203619f50adae94ddb6bbccd28f381737,return current_time - offset + jitter,1,0,0.0,747
0e48d9d203619f50adae94ddb6bbccd28f381737,offset = delta % spacing,1,0,0.0,748
0e48d9d203619f50adae94ddb6bbccd28f381737,CONF = cfg.CONF,1,0,0.0,749
0e48d9d203619f50adae94ddb6bbccd28f381737,raise InvalidPeriodicTaskArg(arg='ticks_between_runs'),1,0,0.0,750
0e48d9d203619f50adae94ddb6bbccd28f381737,if kwargs:,1,0,0.0,751
0e48d9d203619f50adae94ddb6bbccd28f381737,f._periodic_last_run = time.time(),1,0,0.0,752
0e48d9d203619f50adae94ddb6bbccd28f381737,f._periodic_last_run = None,1,0,0.0,753
0e48d9d203619f50adae94ddb6bbccd28f381737,if f._periodic_immediate:,1,0,0.0,754
0e48d9d203619f50adae94ddb6bbccd28f381737,"f._periodic_immediate = kwargs.pop('run_immediately', False)",1,0,0.0,755
0e48d9d203619f50adae94ddb6bbccd28f381737,"f._periodic_spacing = kwargs.pop('spacing', 0)",1,0,0.0,756
0e48d9d203619f50adae94ddb6bbccd28f381737,"f._periodic_name = kwargs.pop('name', f.__name__)",1,0,0.0,757
0e48d9d203619f50adae94ddb6bbccd28f381737,"f._periodic_enabled = kwargs.pop('enabled', True)",1,0,0.0,758
0e48d9d203619f50adae94ddb6bbccd28f381737,else:,1,0,0.0,759
0e48d9d203619f50adae94ddb6bbccd28f381737,f._periodic_enabled = False,1,0,0.0,760
0e48d9d203619f50adae94ddb6bbccd28f381737,"f._periodic_external_ok = kwargs.pop('external_process_ok', False)",1,0,0.0,761
0e48d9d203619f50adae94ddb6bbccd28f381737,f._periodic_task = True,1,0,0.0,762
0e48d9d203619f50adae94ddb6bbccd28f381737,if 'ticks_between_runs' in kwargs:,1,0,0.0,763
0e48d9d203619f50adae94ddb6bbccd28f381737,delta = current_time - last_run,1,0,0.0,764
0e48d9d203619f50adae94ddb6bbccd28f381737,def decorator(f):,1,0,0.0,765
0e48d9d203619f50adae94ddb6bbccd28f381737,"""""""",1,0,0.0,766
0e48d9d203619f50adae94ddb6bbccd28f381737,"[, name=[None|""string""])",1,0,0.0,767
0e48d9d203619f50adae94ddb6bbccd28f381737,"@periodic_task(spacing=N [, run_immediately=[True|False]]",1,0,0.0,768
0e48d9d203619f50adae94ddb6bbccd28f381737,2. With arguments:,1,0,0.0,769
0e48d9d203619f50adae94ddb6bbccd28f381737,This decorator can be used in two ways:,1,0,0.0,770
0e48d9d203619f50adae94ddb6bbccd28f381737,"def periodic_task(*args, **kwargs):",1,0,0.0,771
0e48d9d203619f50adae94ddb6bbccd28f381737,class InvalidPeriodicTaskArg(Exception):,1,0,0.0,772
0e48d9d203619f50adae94ddb6bbccd28f381737,"return [(None, copy.deepcopy(periodic_opts))]",1,0,0.0,773
0e48d9d203619f50adae94ddb6bbccd28f381737,def list_opts():,1,0,0.0,774
0e48d9d203619f50adae94ddb6bbccd28f381737,DEFAULT_INTERVAL = 60.0,1,0,0.0,775
0e48d9d203619f50adae94ddb6bbccd28f381737,CONF.register_opts(periodic_opts),1,0,0.0,776
0e48d9d203619f50adae94ddb6bbccd28f381737,return decorator,1,0,0.0,777
0e48d9d203619f50adae94ddb6bbccd28f381737,return decorator(args[0]),1,0,0.0,778
0e48d9d203619f50adae94ddb6bbccd28f381737,class _PeriodicTasksMeta(type):,1,0,0.0,779
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _add_periodic_task(cls, task):",1,0,0.0,780
0e48d9d203619f50adae94ddb6bbccd28f381737,return current_time,1,0,0.0,781
0e48d9d203619f50adae94ddb6bbccd28f381737,if last_run is None:,1,0,0.0,782
0e48d9d203619f50adae94ddb6bbccd28f381737,current_time = time.time(),1,0,0.0,783
0e48d9d203619f50adae94ddb6bbccd28f381737,means that spacings smaller than 20 seconds will not have jitter.,1,0,0.0,784
0e48d9d203619f50adae94ddb6bbccd28f381737,"31, 38...",1,0,0.0,785
0e48d9d203619f50adae94ddb6bbccd28f381737,"def _nearest_boundary(last_run, spacing):",1,0,0.0,786
0e48d9d203619f50adae94ddb6bbccd28f381737,cls._add_periodic_task(value),1,0,0.0,787
0e48d9d203619f50adae94ddb6bbccd28f381737,"if getattr(value, '_periodic_task', False):",1,0,0.0,788
0e48d9d203619f50adae94ddb6bbccd28f381737,cls._periodic_spacing = {},1,0,0.0,789
0e48d9d203619f50adae94ddb6bbccd28f381737,cls._periodic_spacing = cls._periodic_spacing.copy(),1,0,0.0,790
0e48d9d203619f50adae94ddb6bbccd28f381737,cls._periodic_tasks = [],1,0,0.0,791
0e48d9d203619f50adae94ddb6bbccd28f381737,cls._periodic_tasks = cls._periodic_tasks[:],1,0,0.0,792
0e48d9d203619f50adae94ddb6bbccd28f381737,try:,1,0,0.0,793
0e48d9d203619f50adae94ddb6bbccd28f381737,"super(_PeriodicTasksMeta, cls).__init__(names, bases, dict_)",1,0,0.0,794
0e48d9d203619f50adae94ddb6bbccd28f381737,"def __init__(cls, names, bases, dict_):",1,0,0.0,795
0e48d9d203619f50adae94ddb6bbccd28f381737,return True,1,0,0.0,796
0e48d9d203619f50adae94ddb6bbccd28f381737,cls._periodic_spacing[name] = task._periodic_spacing,1,0,0.0,797
0e48d9d203619f50adae94ddb6bbccd28f381737,"cls._periodic_tasks.append((name, task))",1,0,0.0,798
0e48d9d203619f50adae94ddb6bbccd28f381737,task._periodic_spacing = DEFAULT_INTERVAL,1,0,0.0,799
0e48d9d203619f50adae94ddb6bbccd28f381737,if task._periodic_spacing == 0:,1,0,0.0,800
0e48d9d203619f50adae94ddb6bbccd28f381737,"'it is disabled'),",1,0,0.0,801
0e48d9d203619f50adae94ddb6bbccd28f381737,if not task._periodic_enabled:,1,0,0.0,802
0e48d9d203619f50adae94ddb6bbccd28f381737,return False,1,0,0.0,803
0e48d9d203619f50adae94ddb6bbccd28f381737,{'task': name}),1,0,0.0,804
0e48d9d203619f50adae94ddb6bbccd28f381737,if task._periodic_spacing < 0:,1,0,0.0,805
0e48d9d203619f50adae94ddb6bbccd28f381737,LOG.exception(ex),1,0,0.0,806
