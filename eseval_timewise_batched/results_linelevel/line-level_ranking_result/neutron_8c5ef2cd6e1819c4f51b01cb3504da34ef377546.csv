commit_id,line,line_level_label,count,line_score,row
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"help=_(""Set new timeout in seconds for new rpc calls after """,0,8,1.0,1
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"help=_(""Set new timeout in seconds for new rpc calls after """,1,8,1.0,2
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""agent receives SIGTERM. If value is set to 0, rpc """,1,8,1.0,3
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""agent receives SIGTERM. If value is set to 0, rpc """,0,8,1.0,4
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param quitting_rpc_timeout: timeout in seconds for rpc calls after,1,5,0.625,5
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"help=_(""The number of seconds the agent will wait between """,0,3,0.375,6
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""timeout won't be changed"")),",0,3,0.375,7
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"help=_(""The number of seconds the agent will wait between """,1,3,0.375,8
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""timeout won't be changed"")),",1,3,0.375,9
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent, 'set_rpc_timeout') as mock_set_rpc:",1,3,0.375,10
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# sleep till end of polling interval,1,2,0.25,11
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, manager, polling_interval,",1,2,0.25,12
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param polling_interval: interval (secs) to poll DB.,1,2,0.25,13
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param agent_type: Specifies the type of the agent,1,2,0.25,14
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param agent_binary: The agent binary string,1,2,0.25,15
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""LinuxBridge Agent RPC Daemon Started!""))",1,2,0.25,16
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"for rpc_client in (self.agent.plugin_rpc.client,",1,2,0.25,17
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.debug(""Loop iteration exceeded interval """,1,2,0.25,18
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def set_rpc_timeout(self, timeout):",1,2,0.25,19
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent = CommonAgentLoop(manager, polling_interval, quitting_rpc_timeout,",1,2,0.25,20
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_set_rpc_timeout(self):,1,2,0.25,21
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Save and reinitialize the set variable that the port_update RPC uses.,1,2,0.25,22
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_set_rpc_timeout_no_value(self):,1,2,0.25,23
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent = ca.CommonAgentLoop(manager, polling_interval, quitting_rpc_timeout,",0,2,0.25,24
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# work when a device is new and updated in the same polling iteration.,1,2,0.25,25
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, bridge_mappings, interface_mappings, polling_interval,",1,2,0.25,26
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.IntOpt('quitting_rpc_timeout', default=10,",1,2,0.25,27
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent = CommonAgentLoop(manager, polling_interval, quitting_rpc_timeout,",0,2,0.25,28
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,""" does not exist. Agent terminated!""),",0,2,0.25,29
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, bridge_mappings, interface_mappings, polling_interval,",0,2,0.25,30
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.IntOpt('quitting_rpc_timeout', default=10,",0,2,0.25,31
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""to this agent from spoofing, it doesn't protect them """,0,2,0.25,32
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""this flag set to True). Spoofing rules will not be """,0,2,0.25,33
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, interface_mappings, polling_interval,",1,2,0.25,34
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""to this agent from spoofing, it doesn't protect them """,1,2,0.25,35
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""this flag set to True). Spoofing rules will not be """,1,2,0.25,36
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, manager, polling_interval,",0,2,0.25,37
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param agent_type: Specifies the type of the agent,0,2,0.25,38
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param agent_binary: The agent binary string,0,2,0.25,39
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# stores all configured ports on agent,1,1,0.125,40
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def setup_rpc(self):,1,1,0.125,41
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# flag to do a sync after revival,1,1,0.125,42
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def stop(self, graceful=True):",1,1,0.125,43
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.set_rpc_timeout(self.quitting_rpc_timeout),1,1,0.125,44
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def reset(self):,1,1,0.125,45
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def _report_state(self):,1,1,0.125,46
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def _validate_rpc_endpoints(self):,1,1,0.125,47
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""RPC Callback class must inherit from """,1,1,0.125,48
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""CommonAgentManagerRpcCallBackBase to ensure """,1,1,0.125,49
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def process_network_devices(self, device_info):",1,1,0.125,50
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# RPC network init,1,1,0.125,51
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Handle updates from service,1,1,0.125,52
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Define the listening consumers for the agent,1,1,0.125,53
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def init_extension_manager(self, connection):",1,1,0.125,54
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _clean_network_ports(self, device):",1,1,0.125,55
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _update_network_ports(self, network_id, port_id, device):",1,1,0.125,56
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# admin_state_up may have changed. The set union prevents duplicating,1,1,0.125,57
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# If one of the above operations fails => resync with plugin,1,1,0.125,58
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def treat_devices_added_updated(self, devices):",1,1,0.125,59
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""CommonAgentManagerBase to ensure CommonAgent """,1,1,0.125,60
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def start(self):,1,1,0.125,61
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"polling_interval,",1,1,0.125,62
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Manager class must inherit from """,1,1,0.125,63
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.set_default('quitting_rpc_timeout', 10, 'AGENT')",1,1,0.125,64
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# - admin_state_down: set tap device stae to down,1,1,0.125,65
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent = LinuxBridgeNeutronAgentRPC(bridge_mappings,",1,1,0.125,66
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# - admin_state_down: set tap device state to down,1,1,0.125,67
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"manager, 0, 10, 'fake_agent', 'foo-binary')",0,1,0.125,68
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent, ""daemon_loop""):",0,1,0.125,69
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_plug_interface(self):,0,1,0.125,70
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _test_ensure_port_admin_state(self, admin_state):",0,1,0.125,71
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_port_admin_state_up(self):,0,1,0.125,72
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_port_admin_state_down(self):,0,1,0.125,73
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{}, {}, 0, cfg.CONF.AGENT.quitting_rpc_timeout)",1,1,0.125,74
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def _validate_manager_class(self):,1,1,0.125,75
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent, ""daemon_loop""),\",1,1,0.125,76
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _test_ensure_port_admin_state(self, admin_state):",1,1,0.125,77
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_port_admin_state_up(self):,1,1,0.125,78
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_port_admin_state_down(self):,1,1,0.125,79
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_add_interface(self):,1,1,0.125,80
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.agent import rpc as agent_rpc,1,1,0.125,81
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param manager: the manager object containing the impl specifics,1,1,0.125,82
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,stop is called.,1,1,0.125,83
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.quitting_rpc_timeout = quitting_rpc_timeout,1,1,0.125,84
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# - admin_state_up: set tap device state to up,1,1,0.125,85
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_removed_with_existed_device(self):,1,1,0.125,86
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"#     1) Create the tap device, set its MAC and MTU",1,1,0.125,87
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_added_updated_no_local_interface(self):,1,1,0.125,88
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_added_removed(self):,1,1,0.125,89
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_removed_retried_on_sync(self):,1,1,0.125,90
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_vanished_removed_on_sync(self):,1,1,0.125,91
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_updated(self):,1,1,0.125,92
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_updated_non_existing(self):,1,1,0.125,93
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_updated_deleted_concurrently(self):,1,1,0.125,94
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_updated_on_sync(self):,1,1,0.125,95
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_with_prevent_arp_spoofing_true(self):,1,1,0.125,96
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_process_network_devices(self):,1,1,0.125,97
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_added_updated_admin_state_up_true(self):,1,1,0.125,98
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _test_scan_devices(self, previous, updated,",1,1,0.125,99
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_added_updated_prevent_arp_spoofing_true(self):,1,1,0.125,100
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.sg_plugin_rpc.client,",1,1,0.125,101
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.state_rpc.client):,1,1,0.125,102
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,rpc_client.timeout),1,1,0.125,103
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.quitting_rpc_timeout = None,1,1,0.125,104
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertFalse(mock_set_rpc.called),1,1,0.125,105
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_report_state_revived(self):,1,1,0.125,106
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_update_network_ports(self):,1,1,0.125,107
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_clean_network_ports(self):,1,1,0.125,108
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_scan_devices_no_changes(self):,1,1,0.125,109
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_removed_with_prevent_arp_spoofing_true(self):,1,1,0.125,110
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#     3) Set the tap online,1,1,0.125,111
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _device_info_has_changes(self, device_info):",1,1,0.125,112
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"#   A race could occur, if the lb agent removes the tap device",1,1,0.125,113
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#   right after step 1). Then libvirt will add it to the bridge,1,1,0.125,114
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#   state to down right after step 2). In step 3) libvirt,1,1,0.125,115
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#   might set it to up again.,1,1,0.125,116
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# set the tap device up again.,1,1,0.125,117
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# 2) The new code is much more readable,1,1,0.125,118
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def treat_devices_removed(self, devices):",1,1,0.125,119
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def scan_devices(self, previous, sync):",1,1,0.125,120
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# clear any orphaned ARP spoofing rules (e.g. interface was,1,1,0.125,121
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def daemon_loop(self):,1,1,0.125,122
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_removed_failed(self):,1,1,0.125,123
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.exception(_LE(""Error in agent loop. Devices info: %s""),",1,1,0.125,124
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,rpc_api.client.timeout = timeout,1,1,0.125,125
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def setUp(self):,1,1,0.125,126
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.set_override('report_interval', 0, 'AGENT')",1,1,0.125,127
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"manager, 0, 10, 'fake_agent', 'foo-binary')",1,1,0.125,128
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent, ""daemon_loop""):",1,1,0.125,129
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def setup_linux_bridge(self, bridge_mappings, interface_mappings):",1,1,0.125,130
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent = self.agent,1,1,0.125,131
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_treat_devices_removed_with_not_existed_device(self):,1,1,0.125,132
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def _ensure_port_admin_state(self, port_id, admin_state_up):",1,1,0.125,133
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"# Updated devices are processed the same as new ones, as their",1,1,0.125,134
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Unable to obtain MAC address for unique ID. """,1,1,0.125,135
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""they originate. Note: This prevents the VMs attached """,0,1,0.125,136
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def remove_port_binding(self, network_id, interface_id):",1,1,0.125,137
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent = LinuxBridgeNeutronAgentRPC(interface_mappings,",1,1,0.125,138
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{}, {}, 0, cfg.CONF.AGENT.quitting_rpc_timeout)",0,1,0.125,139
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_get_existing_bridge_name(self):,0,1,0.125,140
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_flat_bridge_with_existed_brq(self):,0,1,0.125,141
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_vlan_bridge_with_existed_brq(self):,0,1,0.125,142
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_local_bridge_with_existed_brq(self):,0,1,0.125,143
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_ensure_physical_in_bridge_with_existed_brq(self):,0,1,0.125,144
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_remove_empty_bridges_with_existed_brq(self):,0,1,0.125,145
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def tap_count_side_effect(*args):,0,1,0.125,146
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_network_delete_with_existed_brq(self):,0,1,0.125,147
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{}, 0, cfg.CONF.AGENT.quitting_rpc_timeout)",1,1,0.125,148
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent, ""daemon_loop""),\",0,1,0.125,149
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_local_ip_validation_with_valid_ip(self):,0,1,0.125,150
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def test_local_ip_validation_with_invalid_ip(self):,0,1,0.125,151
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent, ""daemon_loop""):",1,1,0.125,152
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from oslo_config import cfg,0,1,0.125,153
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# TODO(kevinbenton): The following opt is duplicated between the OVS agent,0,1,0.125,154
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# and the Linuxbridge agent to make it easy to back-port. These shared opts,0,1,0.125,155
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# should be moved into a common agent config options location as part of,0,1,0.125,156
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"help=_(""Enable suppression of ARP responses that don't match """,0,1,0.125,157
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def setup_linux_bridge(self, interface_mappings):",1,1,0.125,158
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_local_bridge(self, network_id):",1,1,0.125,159
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_flat_bridge(self, network_id, physical_interface):",1,1,0.125,160
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_local_bridge(self, network_id, phy_bridge_name):",0,1,0.125,161
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def setup_rpc(self, physical_interfaces):",1,1,0.125,162
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from oslo_service import service,0,1,0.125,163
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.openstack.common import service,1,1,0.125,164
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, bridge_mappings, interface_mappings):",0,1,0.125,165
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def validate_bridge_mappings(self):,0,1,0.125,166
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def get_existing_bridge_name(self, physical_network):",0,1,0.125,167
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_vlan_bridge(self, network_id, phy_bridge_name,",0,1,0.125,168
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return interface,0,1,0.125,169
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_flat_bridge(self, network_id, phy_bridge_name,",0,1,0.125,170
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# NOTE(nick-ma-z): Obtain mappings of physical bridge and interfaces,0,1,0.125,171
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return interface,1,1,0.125,172
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""No bridge or interface mappings""",0,1,0.125,173
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,""" for physical network %s""),",0,1,0.125,174
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Physical network %s is defined in """,0,1,0.125,175
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param bridge_mappings: dict mapping physical_networks to,0,1,0.125,176
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def setup_linux_bridge(self, bridge_mappings, interface_mappings):",0,1,0.125,177
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def remove_port_binding(self, network_id, physical_network, interface_id):",0,1,0.125,178
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Parsing bridge_mappings failed: %s. """,0,1,0.125,179
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, interface_mappings):",1,1,0.125,180
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_vlan_bridge(self, network_id, physical_interface, vlan_id):",1,1,0.125,181
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""an IP address that belongs to the port from which """,0,1,0.125,182
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent = LinuxBridgeNeutronAgentRPC(bridge_mappings,",0,1,0.125,183
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""from other devices which have the capability to spoof """,0,1,0.125,184
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def ensure_port_admin_state(self, tap_name, admin_state_up):",0,1,0.125,185
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def delete_arp_spoofing_protection(self, devices):",0,1,0.125,186
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def delete_unreferenced_arp_protection(self, current_devices):",0,1,0.125,187
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def get_extension_driver_type(self):,0,1,0.125,188
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface = self.agent.mgr.get_vxlan_device_name(,0,1,0.125,189
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param manager: the manager object containing the impl specifics,0,1,0.125,190
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def _validate_manager_class(self):,0,1,0.125,191
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Manager class must inherit from """,0,1,0.125,192
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""CommonAgentManagerBase to ensure CommonAgent """,0,1,0.125,193
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def _validate_rpc_endpoints(self):,0,1,0.125,194
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""RPC Callback class must inherit from """,0,1,0.125,195
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""CommonAgentManagerRpcCallBackBase to ensure """,0,1,0.125,196
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# - admin_state_down: set tap device state to down,0,1,0.125,197
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, network_type, physical_network, segmentation_id):",1,1,0.125,198
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def add_interface(self, network_id, network_type, physical_network,",1,1,0.125,199
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def get_tap_devices(self):,1,1,0.125,200
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def __init__(self, context, agent, sg_agent):",1,1,0.125,201
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent = agent,1,1,0.125,202
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface = self.agent.br_mgr.get_vxlan_device_name(,1,1,0.125,203
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""(e.g. bare metal or VMs attached to agents without """,0,1,0.125,204
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param bridge_mappings: dict mapping physical_networks to,1,1,0.125,205
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,:param interface_mappings: dict mapping physical_networks to,1,1,0.125,206
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def setup_arp_spoofing_protection(self, device, device_details):",0,1,0.125,207
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def setup_rpc(self):,0,1,0.125,208
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def get_rpc_consumers(self):,0,1,0.125,209
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""(e.g. bare metal or VMs attached to agents without """,1,1,0.125,210
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""For LinuxBridge, this requires ebtables. For OVS, it """,0,1,0.125,211
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""requires a version that supports matching ARP """,0,1,0.125,212
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def get_rpc_callbacks(self, context, agent, sg_agent):",0,1,0.125,213
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# TODO(kevinbenton): The following opt is duplicated between the OVS agent,1,1,0.125,214
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# and the Linuxbridge agent to make it easy to back-port. These shared opts,1,1,0.125,215
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"help=_(""Enable suppression of ARP responses that don't match """,1,1,0.125,216
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""an IP address that belongs to the port from which """,1,1,0.125,217
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""they originate. Note: This prevents the VMs attached """,1,1,0.125,218
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""from other devices which have the capability to spoof """,1,1,0.125,219
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# should be moved into a common agent config options location as part of,1,1,0.125,220
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""added to any ports that have port security disabled. """,1,1,0.125,221
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def get_all_devices(self):,0,1,0.125,222
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def get_agent_configurations(self):,0,1,0.125,223
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Unable to obtain MAC address for unique ID. """,0,1,0.125,224
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,def get_agent_id(self):,0,1,0.125,225
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""added to any ports that have port security disabled. """,0,1,0.125,226
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""For LinuxBridge, this requires ebtables. For OVS, it """,1,1,0.125,227
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""requires a version that supports matching ARP """,1,1,0.125,228
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"def plug_interface(self, network_id, network_segment, tap_name,",0,1,0.125,229
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.sg_agent.setup_port_filters(device_info.get('added'),",1,0,0.0,230
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""port_id"": port_id,",1,0,0.0,231
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_b = False,1,0,0.0,232
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_a = False,1,0,0.0,233
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,}),1,0,0.0,234
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""device"": device",1,0,0.0,235
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.network_ports[network_id].append({,1,0,0.0,236
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,for port_data in ports_list:,1,0,0.0,237
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._clean_network_ports(device),1,0,0.0,238
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if device == port_data['device']:,1,0,0.0,239
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.network_ports.pop(netid),1,0,0.0,240
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if ports_list == []:,1,0,0.0,241
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ports_list.remove(port_data),1,0,0.0,242
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return port_data['port_id'],1,0,0.0,243
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return (resync_a | resync_b),1,0,0.0,244
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info.get('updated')),1,0,0.0,245
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices_added_updated = (set(device_info.get('added')),1,0,0.0,246
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,| set(device_info.get('updated'))),1,0,0.0,247
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if devices_added_updated:,1,0,0.0,248
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_a = self.treat_devices_added_updated(devices_added_updated),1,0,0.0,249
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if device_info.get('removed'):,1,0,0.0,250
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_b = self.treat_devices_removed(device_info['removed']),1,0,0.0,251
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices_details_list = self.plugin_rpc.get_devices_details_list(,1,0,0.0,252
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.context, devices, self.agent_id)",1,0,0.0,253
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.exception(_LE(""Unable to get port details for %s""), devices)",1,0,0.0,254
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# resync is needed,1,0,0.0,255
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,for device_details in devices_details_list:,1,0,0.0,256
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"connection, self.mgr.get_extension_driver_type())",1,0,0.0,257
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return True,1,0,0.0,258
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"for netid, ports_list in self.network_ports.items():",1,0,0.0,259
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""CommonAgent works properly.""))",1,0,0.0,260
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.ext_manager.initialize(,1,0,0.0,261
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ext_manager.AgentExtensionsManager(cfg.CONF)),1,0,0.0,262
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,LOG.info(_LI('Agent has just been revived. ',1,0,0.0,263
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.debug(""Port %s added"", device)",1,0,0.0,264
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'Doing a full sync.')),1,0,0.0,265
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.fullsync = True,1,0,0.0,266
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent_state.pop('start_flag', None)",1,0,0.0,267
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,except Exception:,1,0,0.0,268
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.exception(_LE(""Failed reporting state!""))",1,0,0.0,269
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if not isinstance(self.endpoints[0],",1,0,0.0,270
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,amb.CommonAgentManagerRpcCallBackBase):,1,0,0.0,271
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.plugin_rpc = agent_rpc.PluginApi(topics.PLUGIN),1,0,0.0,272
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_plugin_rpc = sg_rpc.SecurityGroupServerRpcApi(topics.PLUGIN),1,0,0.0,273
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_agent = sg_rpc.SecurityGroupAgentRpc(,1,0,0.0,274
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.context, self.sg_plugin_rpc, defer_refresh_firewall=True)",1,0,0.0,275
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_id = self.mgr.get_agent_id(),1,0,0.0,276
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""RPC agent_id: %s""), self.agent_id)",1,0,0.0,277
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.topic = topics.AGENT,1,0,0.0,278
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.state_rpc = agent_rpc.PluginReportStateAPI(topics.REPORTS),1,0,0.0,279
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.rpc_callbacks = self.mgr.get_rpc_callbacks(self.context, self,",1,0,0.0,280
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_agent),1,0,0.0,281
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.endpoints = [self.rpc_callbacks],1,0,0.0,282
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._validate_rpc_endpoints(),1,0,0.0,283
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,consumers = self.mgr.get_rpc_consumers(),1,0,0.0,284
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.connection = agent_rpc.create_consumers(self.endpoints,",1,0,0.0,285
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.topic,",1,0,0.0,286
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,consumers),1,0,0.0,287
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ext_manager.register_opts(cfg.CONF),1,0,0.0,288
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.ext_manager = (,1,0,0.0,289
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device = device_details['device'],1,0,0.0,290
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,else:,1,0,0.0,291
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if 'port_id' in device_details:,1,0,0.0,292
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self._update_network_ports(device_details['network_id'],",1,0,0.0,293
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# This refactoring is recommended for the following reasons:,1,0,0.0,294
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# 1) An existing race with libvirt caused by the behavior of,1,0,0.0,295
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#    the old implementation. See Bug #1312016,1,0,0.0,296
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if interface_plugged:,1,0,0.0,297
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.ensure_port_admin_state(,1,0,0.0,298
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device,",1,0,0.0,299
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details['admin_state_up']),1,0,0.0,300
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# update plugin about port status if admin_state is up,1,0,0.0,301
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if device_details['admin_state_up']:,1,0,0.0,302
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.plugin_rpc.update_device_up(self.context,",1,0,0.0,303
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent_id,",1,0,0.0,304
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,cfg.CONF.host),1,0,0.0,305
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.plugin_rpc.update_device_down(self.context,",1,0,0.0,306
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details['port_id'],",1,0,0.0,307
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# This is not an issue if an instance is booted with a port,1,0,0.0,308
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details['device']),1,0,0.0,309
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.ext_manager.handle_port(self.context, device_details)",1,0,0.0,310
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Device %s not defined on plugin""), device)",1,0,0.0,311
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# no resync is needed,1,0,0.0,312
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return False,1,0,0.0,313
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync = False,1,0,0.0,314
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_agent.remove_devices_filter(devices),1,0,0.0,315
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,for device in devices:,1,0,0.0,316
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Attachment %s removed""), device)",1,0,0.0,317
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,details = None,1,0,0.0,318
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"details = self.plugin_rpc.update_device_down(self.context,",1,0,0.0,319
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.exception(_LE(""Error occurred while removing port %s""),",1,0,0.0,320
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,True),1,0,0.0,321
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# configured with admin_state_up = True. Libvirt would just,1,0,0.0,322
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#   The race could occur if the lb-agent sets the taps device,1,0,0.0,323
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Port %(device)s updated. Details: %(details)s""),",1,0,0.0,324
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device, device_details['device_owner'])",1,0,0.0,325
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{'device': device, 'details': device_details})",1,0,0.0,326
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if self.prevent_arp_spoofing:,1,0,0.0,327
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.mgr.setup_arp_spoofing_protection(device,",1,0,0.0,328
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details),1,0,0.0,329
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment = amb.NetworkSegment(,1,0,0.0,330
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details.get('network_type'),",1,0,0.0,331
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details['physical_network'],",1,0,0.0,332
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details.get('segmentation_id'),1,0,0.0,333
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,),1,0,0.0,334
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,network_id = device_details['network_id'],1,0,0.0,335
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.rpc_callbacks.add_network(network_id, segment)",1,0,0.0,336
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface_plugged = self.mgr.plug_interface(,1,0,0.0,337
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"network_id, segment,",1,0,0.0,338
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# REVISIT(scheuran): Changed the way how ports admin_state_up,1,0,0.0,339
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#   again in step 2).,1,0,0.0,340
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# is implemented.,1,0,0.0,341
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#,1,0,0.0,342
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Old lb implementation:,1,0,0.0,343
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# - admin_state_up: ensure that tap is plugged into bridge,1,0,0.0,344
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# - admin_state_down: remove tap from bridge,1,0,0.0,345
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# New lb implementation:,1,0,0.0,346
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# However both approaches could result in races with,1,0,0.0,347
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# nova/libvirt and therefore to an invalid system state in the,1,0,0.0,348
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"# scenario, where an instance is booted with a port configured",1,0,0.0,349
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# with admin_state_up = False:,1,0,0.0,350
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Libvirt does the following actions in exactly,1,0,0.0,351
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# this order (see libvirt virnetdevtap.c),1,0,0.0,352
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#     2) Plug the tap into the bridge,1,0,0.0,353
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if agent_status == constants.AGENT_REVIVED:,1,0,0.0,354
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.get_devices = self.get_devices_p.start(),1,0,0.0,355
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent_state,",1,0,0.0,356
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,),1,0,0.0,357
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,de_arp.assert_called_with(fake_current),1,0,0.0,358
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.br_mgr = mock.Mock(),1,0,0.0,359
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.br_mgr.add_interface.return_value = True,1,0,0.0,360
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_needed = agent.treat_devices_added_updated(set(['tap1'])),1,0,0.0,361
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertFalse(resync_needed),1,0,0.0,362
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.br_mgr.add_interface.assert_called_with(,1,0,0.0,363
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'net123', 'vlan', 'physnet1',",1,0,0.0,364
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"100, 'port123',",1,0,0.0,365
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,constants.DEVICE_OWNER_NETWORK_PREFIX),1,0,0.0,366
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(agent.plugin_rpc.update_device_up.called),1,0,0.0,367
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(agent.ext_manager.handle_port.called),1,0,0.0,368
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(,1,0,0.0,369
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_port_data in agent.network_ports[mock_details['network_id']],1,0,0.0,370
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_name = constants.TAP_DEVICE_PREFIX + mock_details['port_id'],1,0,0.0,371
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.br_mgr = get_linuxbridge_manager(,1,0,0.0,372
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.br_mgr.get_tap_device_name.return_value = tap_name,1,0,0.0,373
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"set_arp.assert_called_with(tap_name, mock_details)",1,0,0.0,374
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_id = 'fake_id',1,0,0.0,375
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(ip_lib, 'IPDevice') as dev_mock:",1,0,0.0,376
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent._ensure_port_admin_state(port_id, admin_state)",1,0,0.0,377
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_name = self.agent.br_mgr.get_tap_device_name(port_id),1,0,0.0,378
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(admin_state,",1,0,0.0,379
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,dev_mock(tap_name).link.set_up.called),1,0,0.0,380
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertNotEqual(admin_state,",1,0,0.0,381
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,dev_mock(tap_name).link.set_down.called),1,0,0.0,382
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._test_ensure_port_admin_state(True),1,0,0.0,383
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._test_ensure_port_admin_state(False),1,0,0.0,384
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.add_interface(""123"", p_const.TYPE_VLAN, ""physnet-1"",",1,0,0.0,385
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self._test_scan_devices(previous, updated, fake_current, expected,",1,0,0.0,386
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'delete_unreferenced_arp_protection') as de_arp:,1,0,0.0,387
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.updated_devices = updated,1,0,0.0,388
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.br_mgr.get_tap_devices.return_value = fake_current,1,0,0.0,389
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment.segmentation_id = 1,0,0,0.0,390
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lb_rpc.network_map['net_id'] = segment,0,0,0.0,391
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lb_rpc.network_map = {NETWORK_ID: mock_net},0,0,0.0,392
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.lb_rpc.agent.mgr,",0,0,0.0,393
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(self.lb_rpc.agent.mgr,",0,0,0.0,394
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(set([DEVICE_1]), self.lb_rpc.updated_devices)",0,0,0.0,395
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lb_rpc.network_map = {'123': mock_net},0,0,0.0,396
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.plugins.ml2.drivers.linuxbridge.agent import arp_protect,1,0,0.0,397
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class TestLinuxBridgeAgent(base.BaseTestCase):,1,0,0.0,398
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(TestLinuxBridgeAgent, self).setUp()",1,0,0.0,399
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.get_devices_p = mock.patch.object(ip_lib.IPWrapper, 'get_devices')",1,0,0.0,400
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync = True,1,0,0.0,401
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.get_devices.return_value = [ip_lib.IPDevice('eth77')],1,0,0.0,402
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.get_mac_p = mock.patch('neutron.agent.linux.utils.',1,0,0.0,403
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'get_interface_mac'),1,0,0.0,404
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.get_mac = self.get_mac_p.start(),1,0,0.0,405
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.get_mac.return_value = '00:00:00:00:00:01',1,0,0.0,406
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(ip_lib.IPWrapper,",1,0,0.0,407
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'get_device_by_ip',",1,0,0.0,408
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return_value=FAKE_DEFAULT_DEV):,1,0,0.0,409
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent = linuxbridge_neutron_agent.LinuxBridgeNeutronAgentRPC(,1,0,0.0,410
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock.patch.object(,1,0,0.0,411
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"linuxbridge_neutron_agent.LinuxBridgeManager,",1,0,0.0,412
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'check_vxlan_support'):,1,0,0.0,413
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent._ensure_port_admin_state = mock.Mock(),1,0,0.0,414
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(arp_protect,",1,0,0.0,415
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.br_mgr = mock.Mock(),1,0,0.0,416
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""1"", ""234"",",1,0,0.0,417
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.br_mgr.vxlan_mode = lconst.VXLAN_UCAST,1,0,0.0,418
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent_status = self.state_rpc.report_state(self.context,",1,0,0.0,419
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'agent_type': self.agent_type,",1,0,0.0,420
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.prevent_arp_spoofing = cfg.CONF.AGENT.prevent_arp_spoofing,1,0,0.0,421
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.network_ports = collections.defaultdict(list),1,0,0.0,422
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.fullsync = False,1,0,0.0,423
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.context = context.get_admin_context_without_session(),1,0,0.0,424
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.setup_rpc(),1,0,0.0,425
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.init_extension_manager(self.connection),1,0,0.0,426
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations = {'extensions': self.ext_manager.names()},1,0,0.0,427
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations.update(self.mgr.get_agent_configurations()),1,0,0.0,428
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_state = {,1,0,0.0,429
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'binary': self.agent_binary,",1,0,0.0,430
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'host': cfg.CONF.host,",1,0,0.0,431
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'topic': constants.L2_AGENT_TOPIC,",1,0,0.0,432
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'configurations': configurations,",1,0,0.0,433
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'start_flag': True},1,0,0.0,434
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment = mock.Mock(),1,0,0.0,435
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,report_interval = cfg.CONF.AGENT.report_interval,1,0,0.0,436
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if report_interval:,1,0,0.0,437
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,heartbeat = loopingcall.FixedIntervalLoopingCall(,1,0,0.0,438
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._report_state),1,0,0.0,439
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,heartbeat.start(interval=report_interval),1,0,0.0,440
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.daemon_loop(),1,0,0.0,441
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Stopping %s agent.""), self.agent_type)",1,0,0.0,442
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if graceful and self.quitting_rpc_timeout:,1,0,0.0,443
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(CommonAgentLoop, self).stop(graceful)",1,0,0.0,444
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,common_config.setup_logging(),1,0,0.0,445
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,try:,1,0,0.0,446
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices = len(self.mgr.get_all_devices()),1,0,0.0,447
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_state.get('configurations')['devices'] = devices,1,0,0.0,448
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sys.exit(1),1,0,0.0,449
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""works properly.""))",1,0,0.0,450
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,amb.CommonAgentManagerBase):,1,0,0.0,451
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if not isinstance(self.mgr,",1,0,0.0,452
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment.network_type = 'vxlan',1,0,0.0,453
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment.segmentation_id = 1,1,0,0.0,454
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.br_mgr.network_map['net_id'] = segment,1,0,0.0,455
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.updated_devices = set(),1,0,0.0,456
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lb_rpc.agent.br_mgr.network_map = {NETWORK_ID: mock_net},1,0,0.0,457
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.lb_rpc.agent.br_mgr,",1,0,0.0,458
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(self.lb_rpc.agent.br_mgr,",1,0,0.0,459
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(set([DEVICE_1]), self.lb_rpc.agent.updated_devices)",1,0,0.0,460
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lb_rpc.agent.br_mgr.network_map = {'123': mock_net},1,0,0.0,461
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.plugins.ml2.drivers.agent import _common_agent as ca,0,0,0.0,462
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"constants.AGENT_TYPE_LINUXBRIDGE,",0,0,0.0,463
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,LB_AGENT_BINARY),0,0,0.0,464
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,import collections,1,0,0.0,465
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,import time,1,0,0.0,466
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from oslo_service import loopingcall,1,0,0.0,467
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.agent.l2.extensions import manager as ext_manager,1,0,0.0,468
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron import context,1,0,0.0,469
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class CommonAgentLoop(service.Service):,1,0,0.0,470
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"quitting_rpc_timeout, agent_type, agent_binary):",1,0,0.0,471
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""""""Constructor.",1,0,0.0,472
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""""""",1,0,0.0,473
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(CommonAgentLoop, self).__init__()",1,0,0.0,474
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr = manager,1,0,0.0,475
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._validate_manager_class(),1,0,0.0,476
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.polling_interval = polling_interval,1,0,0.0,477
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_type = agent_type,1,0,0.0,478
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_binary = agent_binary,1,0,0.0,479
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device),1,0,0.0,480
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.prevent_arp_spoofing = True,1,0,0.0,481
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if details and details['exists']:,1,0,0.0,482
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.treat_devices_added_updated = mock.Mock(return_value=False),1,0,0.0,483
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._test_scan_devices(,1,0,0.0,484
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"previous, updated, fake_current, expected, sync=False",1,0,0.0,485
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'updated': set([1, 2]),",1,0,0.0,486
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'added': set([1, 2]),",1,0,0.0,487
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.prevent_arp_spoofing = True,1,0,0.0,488
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,previous = None,1,0,0.0,489
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr.delete_unreferenced_arp_protection.assert_called_with(,1,0,0.0,490
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,fake_current),1,0,0.0,491
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_info = {'current': set(),",1,0,0.0,492
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'added': set(['tap3', 'tap4']),",1,0,0.0,493
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'updated': set(['tap2', 'tap3']),",1,0,0.0,494
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'removed': set(['tap1'])},1,0,0.0,495
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.sg_agent.setup_port_filters = mock.Mock(),1,0,0.0,496
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.treat_devices_removed = mock.Mock(return_value=False),1,0,0.0,497
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'current': set([1]),",1,0,0.0,498
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.process_network_devices(device_info),1,0,0.0,499
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.sg_agent.setup_port_filters.assert_called_with(,1,0,0.0,500
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_info['added'],",1,0,0.0,501
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['updated']),1,0,0.0,502
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent.treat_devices_added_updated.assert_called_with(set(['tap2',",1,0,0.0,503
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'tap3',",1,0,0.0,504
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'tap4'])),1,0,0.0,505
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.treat_devices_removed.assert_called_with(set(['tap1'])),1,0,0.0,506
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock_details = {'device': 'dev123',",1,0,0.0,507
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'port_id': 'port123',",1,0,0.0,508
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'network_id': 'net123',",1,0,0.0,509
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'admin_state_up': True,",1,0,0.0,510
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'network_type': 'vlan',",1,0,0.0,511
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'removed': set([2]),1,0,0.0,512
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,expected = {,1,0,0.0,513
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"previous = {'current': set([1, 2]),",1,0,0.0,514
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sync=True),1,0,0.0,515
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'added': set(),",1,0,0.0,516
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'removed': set()},1,0,0.0,517
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"fake_current = set([1, 2])",1,0,0.0,518
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated = set(),1,0,0.0,519
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"expected = {'current': set([1, 2]),",1,0,0.0,520
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self._test_scan_devices(previous, updated, fake_current, expected,",1,0,0.0,521
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sync=False),1,0,0.0,522
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"fake_current = set([2, 3])",1,0,0.0,523
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"expected = {'current': set([2, 3]),",1,0,0.0,524
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'added': set([3]),",1,0,0.0,525
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'removed': set([1])},1,0,0.0,526
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"previous = {'current': set([2, 3]),",1,0,0.0,527
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'added': set([2, 3]),",1,0,0.0,528
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Device 2 disappeared.,1,0,0.0,529
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated = set([2]),1,0,0.0,530
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,fake_current = set([3]),1,0,0.0,531
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Device 1 should be retried.,1,0,0.0,532
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"expected = {'current': set([3]),",1,0,0.0,533
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'removed': set([1, 2])}",1,0,0.0,534
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated = set([1]),1,0,0.0,535
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'updated': set([1]),",1,0,0.0,536
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated = set([3]),1,0,0.0,537
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,previous = {,1,0,0.0,538
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'current': set([1, 2]),",1,0,0.0,539
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'removed': set(),1,0,0.0,540
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,},1,0,0.0,541
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,fake_current = set([1]),1,0,0.0,542
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Device 2 got an concurrent update via network_update,1,0,0.0,543
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'segmentation_id': 100,",1,0,0.0,544
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'physical_network': 'physnet1',",1,0,0.0,545
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'device_owner': constants.DEVICE_OWNER_NETWORK_PREFIX},1,0,0.0,546
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#check update port:,1,0,0.0,547
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.agent.state_rpc,",1,0,0.0,548
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""report_state"") as report_st:",1,0,0.0,549
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,report_st.return_value = constants.AGENT_REVIVED,1,0,0.0,550
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent._report_state(),1,0,0.0,551
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(self.agent.fullsync),1,0,0.0,552
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_1_data = PORT_DATA,1,0,0.0,553
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,NETWORK_2_ID = 'fake_second_network',1,0,0.0,554
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_2_data = {,1,0,0.0,555
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'port_id': 'fake_port_2',",1,0,0.0,556
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'device': 'fake_port_2_device_name',1,0,0.0,557
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.network_ports[NETWORK_ID].append(,1,0,0.0,558
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_1_data,1,0,0.0,559
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_2_data,1,0,0.0,560
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent._update_network_ports(,1,0,0.0,561
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.ext_manager = mock.Mock(),1,0,0.0,562
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"NETWORK_2_ID, port_2_data['port_id'], port_2_data['device']",1,0,0.0,563
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_2_data not in self.agent.network_ports[NETWORK_ID],1,0,0.0,564
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_2_data in self.agent.network_ports[NETWORK_2_ID],1,0,0.0,565
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#check removing port from network when other ports are still there:,1,0,0.0,566
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,cleaned_port_id = self.agent._clean_network_ports(DEVICE_1),1,0,0.0,567
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,NETWORK_ID in self.agent.network_ports.keys(),1,0,0.0,568
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_1_data not in self.agent.network_ports[NETWORK_ID],1,0,0.0,569
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_2_data in self.agent.network_ports[NETWORK_ID],1,0,0.0,570
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(PORT_1, cleaned_port_id)",1,0,0.0,571
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#and now remove last port from network:,1,0,0.0,572
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,cleaned_port_id = self.agent._clean_network_ports(,1,0,0.0,573
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_2_data['device'],1,0,0.0,574
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,NETWORK_ID not in self.agent.network_ports.keys(),1,0,0.0,575
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(cfg.CONF.AGENT.quitting_rpc_timeout,",1,0,0.0,576
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.stop(),1,0,0.0,577
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"set_arp.assert_called_with(mock_details['device'], mock_details)",1,0,0.0,578
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'setup_arp_spoofing_protection') as set_arp:,1,0,0.0,579
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.plugin_rpc = mock.Mock(),1,0,0.0,580
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.plugin_rpc.get_devices_details_list.return_value = [mock_details],1,0,0.0,581
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr = mock.Mock(),1,0,0.0,582
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.plug_interface.return_value = False,1,0,0.0,583
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.treat_devices_added_updated(set(['tap1'])),1,0,0.0,584
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertFalse(agent.mgr.ensure_port_admin_state.called),1,0,0.0,585
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_port_data = {,1,0,0.0,586
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'port_id': mock_details['port_id'],",1,0,0.0,587
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'device': mock_details['device'],1,0,0.0,588
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.plug_interface.return_value = True,1,0,0.0,589
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock_segment = amb.NetworkSegment(mock_details['network_type'],",1,0,0.0,590
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock_details['physical_network'],",1,0,0.0,591
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_details['segmentation_id']),1,0,0.0,592
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,with mock.patch('neutron.plugins.ml2.drivers.agent.',1,0,0.0,593
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'_agent_manager_base.NetworkSegment',",1,0,0.0,594
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return_value=mock_segment):,1,0,0.0,595
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_needed = agent.treat_devices_added_updated(set(['tap1'])),1,0,0.0,596
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertFalse(resync_needed),1,0,0.0,597
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent.rpc_callbacks.add_network.assert_called_with('net123',",1,0,0.0,598
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_segment),1,0,0.0,599
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.plug_interface.assert_called_with(,1,0,0.0,600
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'net123', mock_segment, 'dev123',",1,0,0.0,601
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,constants.DEVICE_OWNER_NETWORK_PREFIX),1,0,0.0,602
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(agent.plugin_rpc.update_device_up.called),1,0,0.0,603
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(agent.ext_manager.handle_port.called),1,0,0.0,604
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(mock_port_data in agent.network_ports[,1,0,0.0,605
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_details['network_id']],1,0,0.0,606
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'updated': set(),",1,0,0.0,607
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(expected, results)",1,0,0.0,608
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Port %s updated.""), device)",1,0,0.0,609
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_info = self.scan_devices(previous=device_info, sync=sync)",1,0,0.0,610
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['added'] = current_devices - previous['current'],1,0,0.0,611
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['removed'] = previous['current'] - current_devices,1,0,0.0,612
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['updated'] = updated_devices & current_devices,1,0,0.0,613
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return device_info,1,0,0.0,614
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return (device_info.get('added'),1,0,0.0,615
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,or device_info.get('updated'),1,0,0.0,616
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,or device_info.get('removed')),1,0,0.0,617
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info = None,1,0,0.0,618
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sync = True,1,0,0.0,619
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,while True:,1,0,0.0,620
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,start = time.time(),1,0,0.0,621
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if self.fullsync:,1,0,0.0,622
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Agent out of sync with plugin!""))",1,0,0.0,623
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sync = False,1,0,0.0,624
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['updated'] = (previous['updated'] | updated_devices,1,0,0.0,625
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if (self._device_info_has_changes(device_info),1,0,0.0,626
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,or self.sg_agent.firewall_refresh_needed()):,1,0,0.0,627
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.debug(""Agent loop found changes! %s"", device_info)",1,0,0.0,628
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sync = self.process_network_devices(device_info),1,0,0.0,629
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info),1,0,0.0,630
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,elapsed = (time.time() - start),1,0,0.0,631
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if (elapsed < self.polling_interval):,1,0,0.0,632
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,time.sleep(self.polling_interval - elapsed),1,0,0.0,633
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""(%(polling_interval)s vs. %(elapsed)s)!"",",1,0,0.0,634
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{'polling_interval': self.polling_interval,",1,0,0.0,635
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'elapsed': elapsed}),1,0,0.0,636
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"for rpc_api in (self.plugin_rpc, self.sg_plugin_rpc,",1,0,0.0,637
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.state_rpc):,1,0,0.0,638
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,& current_devices),1,0,0.0,639
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Only update devices that currently exist.,1,0,0.0,640
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"results = self.agent.scan_devices(previous, sync)",1,0,0.0,641
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"previous = {'added': set(),",1,0,0.0,642
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.debug(""Device %s not defined on plugin"", device)",1,0,0.0,643
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_id = self._clean_network_ports(device),1,0,0.0,644
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.ext_manager.delete_port(self.context,",1,0,0.0,645
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{'device': device,",1,0,0.0,646
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'port_id': port_id}),1,0,0.0,647
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.delete_arp_spoofing_protection(devices),1,0,0.0,648
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return resync,1,0,0.0,649
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info = {},1,0,0.0,650
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated_devices = self.rpc_callbacks.get_and_clear_updated_devices(),1,0,0.0,651
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,current_devices = self.mgr.get_all_devices(),1,0,0.0,652
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['current'] = current_devices,1,0,0.0,653
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if previous is None:,1,0,0.0,654
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# This is the first iteration of daemon_loop().,1,0,0.0,655
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'current': set(),",1,0,0.0,656
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# And any that were updated since the previous iteration.,1,0,0.0,657
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'updated': set(),",1,0,0.0,658
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'removed': set()},1,0,0.0,659
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# manually deleted),1,0,0.0,660
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.delete_unreferenced_arp_protection(current_devices),1,0,0.0,661
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if sync:,1,0,0.0,662
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"# This is the first iteration, or the previous one had a problem.",1,0,0.0,663
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Re-add all existing devices.,1,0,0.0,664
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['added'] = current_devices,1,0,0.0,665
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Retry cleaning devices that may not have been cleaned properly.,1,0,0.0,666
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# And clean any that disappeared since the previous iteration.,1,0,0.0,667
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_info['removed'] = (previous['removed'] | previous['current'],1,0,0.0,668
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,- current_devices),1,0,0.0,669
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Retry updating devices that may not have been updated properly.,1,0,0.0,670
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"constants.AGENT_TYPE_LINUXBRIDGE,",1,0,0.0,671
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,LB_AGENT_BINARY),1,0,0.0,672
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class TestCommonAgentLoop(base.BaseTestCase):,1,0,0.0,673
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(1, log.call_count)",1,0,0.0,674
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(linuxbridge_neutron_agent.LOG,",1,0,0.0,675
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'info') as log:,1,0,0.0,676
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync = agent.treat_devices_removed(devices),1,0,0.0,677
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(2, log.call_count)",1,0,0.0,678
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertFalse(resync),1,0,0.0,679
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(fn_udd.called),1,0,0.0,680
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(fn_rdf.called),1,0,0.0,681
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(ext_mgr_delete_port.called),1,0,0.0,682
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(,1,0,0.0,683
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,PORT_DATA not in agent.network_ports[NETWORK_ID],1,0,0.0,684
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,),1,0,0.0,685
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'exists': False},1,0,0.0,686
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'debug') as log:,1,0,0.0,687
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,fn_udd.side_effect = Exception(),1,0,0.0,688
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(TestCommonAgentLoop, self).setUp()",1,0,0.0,689
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(resync),1,0,0.0,690
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment = mock.Mock(),0,0,0.0,691
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent._ensure_port_admin_state = mock.Mock(),1,0,0.0,692
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""remove_devices_filter""):",1,0,0.0,693
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(agent.mgr,",1,0,0.0,694
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'delete_arp_spoofing_protection') as de_arp:,1,0,0.0,695
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.treat_devices_removed(devices),1,0,0.0,696
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,de_arp.assert_called_with(devices),1,0,0.0,697
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"fake_current, expected, sync):",1,0,0.0,698
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr = mock.Mock(),1,0,0.0,699
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr.get_all_devices.return_value = fake_current,1,0,0.0,700
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.rpc_callbacks.get_and_clear_updated_devices.return_value =\,1,0,0.0,701
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated,1,0,0.0,702
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'exists': True},1,0,0.0,703
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"fn_udd.return_value = {'device': DEVICE_1,",1,0,0.0,704
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""delete_port"") as ext_mgr_delete_port:",1,0,0.0,705
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(agent.ext_manager,",1,0,0.0,706
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# disable setting up periodic state reporting,1,0,0.0,707
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.set_override('prevent_arp_spoofing', False, 'AGENT')",1,0,0.0,708
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.set_default('firewall_driver',",1,0,0.0,709
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'neutron.agent.firewall.NoopFirewallDriver',",1,0,0.0,710
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,group='SECURITYGROUP'),1,0,0.0,711
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.set_override('local_ip', LOCAL_IP, 'VXLAN')",1,0,0.0,712
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.get_bridge_names_p = mock.patch.object(bridge_lib,",1,0,0.0,713
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'get_bridge_names'),1,0,0.0,714
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.get_bridge_names = self.get_bridge_names_p.start(),1,0,0.0,715
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.get_bridge_names.return_value = [""br-int"", ""brq1""]",1,0,0.0,716
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager = mock.Mock(),1,0,0.0,717
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager.get_all_devices.return_value = [],1,0,0.0,718
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager.get_agent_configurations.return_value = {},1,0,0.0,719
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager.get_rpc_consumers.return_value = [],1,0,0.0,720
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(linuxbridge_neutron_agent.CommonAgentLoop,",1,0,0.0,721
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'_validate_manager_class'), \",1,0,0.0,722
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(linuxbridge_neutron_agent.CommonAgentLoop,",1,0,0.0,723
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'_validate_rpc_endpoints'):,1,0,0.0,724
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent = linuxbridge_neutron_agent.CommonAgentLoop(,1,0,0.0,725
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.start(),1,0,0.0,726
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.ensure_port_admin_state = mock.Mock(),1,0,0.0,727
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices = [DEVICE_1],1,0,0.0,728
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.network_ports[NETWORK_ID].append(PORT_DATA),1,0,0.0,729
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(agent.plugin_rpc,",1,0,0.0,730
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""update_device_down"") as fn_udd,\",1,0,0.0,731
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(agent.sg_agent,",1,0,0.0,732
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""remove_devices_filter"") as fn_rdf,\",1,0,0.0,733
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment.network_type = 'vxlan',0,0,0.0,734
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'interface_mappings': self.interface_mappings,",1,0,0.0,735
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.vxlan_mode = lconst.VXLAN_UCAST,0,0,0.0,736
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"linuxbridge_neutron_agent.LinuxBridgeManager,",0,0,0.0,737
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,br_list[1:3]),1,0,0.0,738
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_flat_bridge(""123"", ""eth0""),",1,0,0.0,739
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(self.lbm.ensure_vlan_bridge(""123"", ""eth0"", ""1""),",1,0,0.0,740
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_local_bridge(""54321"")",1,0,0.0,741
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"en_fn.assert_called_with(""123"")",1,0,0.0,742
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.br_mgr = (linuxbridge_neutron_agent.,1,0,0.0,743
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,LinuxBridgeManager({'physnet1': 'eth1'})),1,0,0.0,744
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,import sys,0,0,0.0,745
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,FAKE_DEFAULT_DEV = mock.Mock(),0,0,0.0,746
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,FAKE_DEFAULT_DEV.name = 'eth1',0,0,0.0,747
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'get_device_by_ip', return_value=FAKE_DEFAULT_DEV),\",0,0,0.0,748
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return_value=True),\",0,0,0.0,749
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock.patch.object(,0,0,0.0,750
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'check_vxlan_support'):,0,0,0.0,751
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.interface_mappings = {'physnet1': 'eth1'},1,0,0.0,752
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'get_device_by_ip',",0,0,0.0,753
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return_value=FAKE_DEFAULT_DEV):,0,0,0.0,754
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return_value=FAKE_DEFAULT_DEV),\",0,0,0.0,755
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(ip_lib.IPWrapper,",0,0,0.0,756
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,result = self.lbm.get_local_ip_device(LOCAL_IP),0,0,0.0,757
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(FAKE_DEFAULT_DEV, result)",0,0,0.0,758
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return_value=None),\",0,0,0.0,759
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(sys, 'exit') as exit,\",0,0,0.0,760
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(linuxbridge_neutron_agent.LOG,",0,0,0.0,761
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'error') as log:,0,0,0.0,762
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lbm.get_local_ip_device(LOCAL_IP),0,0,0.0,763
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(1, log.call_count)",0,0,0.0,764
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,exit.assert_called_once_with(1),0,0,0.0,765
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.interface_mappings),1,0,0.0,766
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent.remove_port_binding.assert_called_with('net123', 'port123')",1,0,0.0,767
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""physnet9"", ""1"")",0,0,0.0,768
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(2, del_br_fn.call_count)",0,0,0.0,769
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"en_fn.assert_called_with(""123"", None)",0,0,0.0,770
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_mappings = {},0,0,0.0,771
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phy_net = mock.Mock(),0,0,0.0,772
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phy_net.physical_network = 'physnet0',0,0,0.0,773
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.network_map = {'net1': mock.Mock(),",0,0,0.0,774
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'net2': mock.Mock(),",0,0,0.0,775
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'net3': phy_net},0,0,0.0,776
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return 0,0,0,0.0,777
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.lbm, ""delete_bridge"") as del_br_fn,\",0,0,0.0,778
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(self.lbm,",0,0,0.0,779
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""get_tap_devices_count"",",0,0,0.0,780
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,side_effect=tap_count_side_effect):,0,0,0.0,781
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lbm.remove_empty_bridges(),0,0,0.0,782
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.br_mgr = (,0,0,0.0,783
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface_mappings),1,0,0.0,784
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,linuxbridge_neutron_agent.LinuxBridgeManager(,0,0,0.0,785
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"BRIDGE_MAPPINGS,",0,0,0.0,786
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,INTERFACE_MAPPINGS)),0,0,0.0,787
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_net = mock.Mock(),0,0,0.0,788
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_net.physical_network = None,0,0,0.0,789
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lb_rpc.agent.br_mgr.network_map = {'123': mock_net},0,0,0.0,790
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_net.physical_network = 'physnet0',0,0,0.0,791
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(linuxbridge_neutron_agent.LOG, 'info') as log,\",0,0,0.0,792
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(self.lb_rpc.agent.br_mgr,",0,0,0.0,793
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""delete_bridge"") as del_fn:",0,0,0.0,794
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lb_rpc.network_delete(""anycontext"", network_id=""123"")",0,0,0.0,795
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(0, del_fn.call_count)",0,0,0.0,796
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface_mappings = {'physnet1': 'eth1'},1,0,0.0,797
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(ip_lib, 'device_exists',",0,0,0.0,798
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'get_device_by_ip', return_value=None),\",1,0,0.0,799
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return_value=True):,1,0,0.0,800
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mac = utils.get_interface_mac(self.bridge_mappings.values[0]),0,0,0.0,801
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.register_opts(agent_opts, ""AGENT"")",1,0,0.0,802
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,config.register_agent_state_opts_helper(cfg.CONF),1,0,0.0,803
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.plugins.ml2.drivers.agent import _agent_manager_base as amb,0,0,0.0,804
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.plugins.ml2.drivers.agent import config as cagt_config  # noqa,0,0,0.0,805
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,LB_AGENT_BINARY = 'neutron-linuxbridge-agent',0,0,0.0,806
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class LinuxBridgeManager(amb.CommonAgentManagerBase):,0,0,0.0,807
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(LinuxBridgeManager, self).__init__()",0,0,0.0,808
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_owner):,0,0,0.0,809
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return self.add_tap_interface(network_id, network_segment.network_type,",0,0,0.0,810
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"network_segment.physical_network,",0,0,0.0,811
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"network_segment.segmentation_id,",0,0,0.0,812
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"tap_name, device_owner)",0,0,0.0,813
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if self.bridge_mappings:,0,0,0.0,814
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,else:,0,0,0.0,815
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'get_device_by_ip', return_value=None):",1,0,0.0,816
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices = ip_lib.IPWrapper().get_devices(True),0,0,0.0,817
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if devices:,0,0,0.0,818
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mac = utils.get_interface_mac(devices[0].name),0,0,0.0,819
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""Agent terminated!""))",0,0,0.0,820
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sys.exit(1),0,0,0.0,821
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return 'lb%s' % mac.replace("":"", """")",0,0,0.0,822
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"configurations = {'bridge_mappings': self.bridge_mappings,",0,0,0.0,823
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'interface_mappings': self.interface_mappings,0,0,0.0,824
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,},0,0,0.0,825
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if self.vxlan_mode != lconst.VXLAN_NONE:,0,0,0.0,826
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations['tunneling_ip'] = self.local_ip,0,0,0.0,827
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations['tunnel_types'] = [p_const.TYPE_VXLAN],0,0,0.0,828
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations['l2_population'] = cfg.CONF.VXLAN.l2_population,0,0,0.0,829
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,],1,0,0.0,830
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""headers.""))",1,0,0.0,831
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.BoolOpt('prevent_arp_spoofing', default=True,",1,0,0.0,832
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# the deduplication work.,1,0,0.0,833
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(ip_lib, 'device_exists',",1,0,0.0,834
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Copyright (c) 2016 IBM Corp.,0,0,0.0,835
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#,0,0,0.0,836
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# All Rights Reserved.,0,0,0.0,837
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,0,0.0,838
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#    not use this file except in compliance with the License. You may obtain,0,0,0.0,839
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#    a copy of the License at,0,0,0.0,840
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#         http://www.apache.org/licenses/LICENSE-2.0,0,0,0.0,841
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"#    Unless required by applicable law or agreed to in writing, software",0,0,0.0,842
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,0,0.0,843
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,0,0.0,844
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#    License for the specific language governing permissions and limitations,0,0,0.0,845
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,#    under the License.,0,0,0.0,846
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.agent.common import config,0,0,0.0,847
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent_opts = [,0,0,0.0,848
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.IntOpt('polling_interval', default=2,",0,0,0.0,849
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""polling for local device changes."")),",0,0,0.0,850
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# the deduplication work.,0,0,0.0,851
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.BoolOpt('prevent_arp_spoofing', default=True,",0,0,0.0,852
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""headers.""))",0,0,0.0,853
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,],0,0,0.0,854
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.CONF.register_opts(agent_opts, ""AGENT"")",0,0,0.0,855
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,config.register_agent_state_opts_helper(cfg.CONF),0,0,0.0,856
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.agent.common import config,1,0,0.0,857
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent_opts = [,1,0,0.0,858
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"cfg.IntOpt('polling_interval', default=2,",1,0,0.0,859
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""polling for local device changes."")),",1,0,0.0,860
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(1, log.call_count)",0,0,0.0,861
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_physical_in_bridge(""123"", p_const.TYPE_FLAT,",0,0,0.0,862
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr = get_linuxbridge_manager(,0,0,0.0,863
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phynet = self.agent.br_mgr.network_map[network_id].physical_network,0,0,0.0,864
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if not physical_bridge and not physical_interface:,0,0,0.0,865
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return self.ensure_flat_bridge(network_id, physical_bridge,",0,0,0.0,866
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_interface),0,0,0.0,867
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return self.ensure_vlan_bridge(network_id, physical_bridge,",0,0,0.0,868
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"physical_interface,",0,0,0.0,869
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if physical_network:,0,0,0.0,870
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.get_existing_bridge_name(physical_network),0,0,0.0,871
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.ensure_local_bridge(network_id, bridge_name)",0,0,0.0,872
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# NOTE(nick-ma-z): Don't remove pre-existing user-defined bridges,0,0,0.0,873
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phy_net = self.network_map[network_id].physical_network,0,0,0.0,874
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if phy_net and phy_net in self.bridge_mappings:,0,0,0.0,875
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,continue,0,0,0.0,876
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if network_id in self.agent.br_mgr.network_map:,0,0,0.0,877
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if phynet and phynet in self.agent.br_mgr.bridge_mappings:,0,0,0.0,878
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = phy_bridge_name,0,0,0.0,879
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""bridge_mappings and cannot be deleted.""),",0,0,0.0,880
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,network_id),0,0,0.0,881
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return,0,0,0.0,882
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Network %s is not available.""), network_id)",0,0,0.0,883
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_bridges.,0,0,0.0,884
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.setup_linux_bridge(self.bridge_mappings, self.interface_mappings)",0,0,0.0,885
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"configurations = {'bridge_mappings': self.bridge_mappings,",0,0,0.0,886
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'interface_mappings': self.interface_mappings},0,0,0.0,887
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.br_mgr = LinuxBridgeManager(bridge_mappings, interface_mappings)",0,0,0.0,888
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.br_mgr.get_existing_bridge_name(,0,0,0.0,889
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_network),0,0,0.0,890
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.br_mgr.get_bridge_name(network_id),0,0,0.0,891
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_network = device_details['physical_network'],0,0,0.0,892
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_bridge = self.get_existing_bridge_name(physical_network),0,0,0.0,893
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return physical_interface,0,0,0.0,894
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(linuxbridge_neutron_agent.LOG, 'error') as log:",0,0,0.0,895
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return self.bridge_mappings.get(physical_network),0,0,0.0,896
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from oslo_service import loopingcall,0,0,0.0,897
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"launcher = service.launch(cfg.CONF, agent)",0,0,0.0,898
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.openstack.common import loopingcall,1,0,0.0,899
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,launcher = service.launch(agent),1,0,0.0,900
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.bridge_mappings = bridge_mappings,0,0,0.0,901
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.validate_bridge_mappings(),0,0,0.0,902
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"for physnet, bridge in self.bridge_mappings.items():",0,0,0.0,903
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if not ip_lib.device_exists(bridge):,0,0,0.0,904
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""Bridge %(brq)s for physical network %(net)s""",0,0,0.0,905
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"{'brq': bridge, 'net': physnet})",0,0,0.0,906
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sys.exit(1),0,0,0.0,907
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if not physical_network:,0,0,0.0,908
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return None,0,0,0.0,909
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# NOTE(nick-ma-z): Add pre-existing user-defined bridges,0,0,0.0,910
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,gateway):,0,0,0.0,911
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,for bridge_name in self.bridge_mappings.values():,0,0,0.0,912
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if bridge_name not in neutron_bridge_list:,0,0,0.0,913
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,neutron_bridge_list.append(bridge_name),0,0,0.0,914
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"physical_interface, vlan_id):",0,0,0.0,915
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if phy_bridge_name:,0,0,0.0,916
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return self.ensure_bridge(phy_bridge_name),0,0,0.0,917
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,else:,0,0,0.0,918
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.get_bridge_name(network_id),0,0,0.0,919
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ips, gateway = self.get_interface_details(interface)",0,0,0.0,920
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if self.ensure_bridge(bridge_name, interface, ips, gateway):",0,0,0.0,921
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_interface):,0,0,0.0,922
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ips, gateway = self.get_interface_details(physical_interface)",0,0,0.0,923
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if self.ensure_bridge(bridge_name, physical_interface, ips,",0,0,0.0,924
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"physical_network,",0,0,0.0,925
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,try:,0,0,0.0,926
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_mappings = n_utils.parse_mappings(,0,0,0.0,927
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,None)),0,0,0.0,928
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual('br-eth2',",0,0,0.0,929
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.lbm.get_existing_bridge_name(phy_net)),0,0,0.0,930
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phy_net = '',0,0,0.0,931
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(None,",0,0,0.0,932
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,result = br_list[1:3],0,0,0.0,933
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,result.append('br-eth2'),0,0,0.0,934
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,result),0,0,0.0,935
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_flat_bridge(""123"", None, ""eth0""),",0,0,0.0,936
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.lbm, 'ensure_bridge') as ens:",0,0,0.0,937
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ens.return_value = ""br-eth2""",0,0,0.0,938
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(""br-eth2"",",0,0,0.0,939
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_flat_bridge(""123"",",0,0,0.0,940
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""br-eth2"",",0,0,0.0,941
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ens.assert_called_with(""br-eth2"")",0,0,0.0,942
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,cfg.CONF.LINUX_BRIDGE.bridge_mappings),0,0,0.0,943
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(self.lbm.ensure_vlan_bridge(""123"",",0,0,0.0,944
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"None,",0,0,0.0,945
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""eth0"",",0,0,0.0,946
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""1""),",0,0,0.0,947
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.lbm, 'ensure_vlan') as ens_vl_fn,\",0,0,0.0,948
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(self.lbm, 'ensure_bridge') as ens:",0,0,0.0,949
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ens_vl_fn.return_value = None,0,0,0.0,950
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_vlan_bridge(""123"",",0,0,0.0,951
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_local_bridge(""54321"", None)",0,0,0.0,952
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(self.lbm, 'ensure_bridge') as ens_fn:",0,0,0.0,953
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ens_fn.return_value = ""br-eth2""",0,0,0.0,954
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_local_bridge(""54321"", 'br-eth2')",0,0,0.0,955
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ens_fn.assert_called_once_with(""br-eth2"")",0,0,0.0,956
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phy_net = 'physnet0',0,0,0.0,957
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.bridge_mappings, self.interface_mappings)",0,0,0.0,958
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.bridge_mappings = BRIDGE_MAPPINGS,0,0,0.0,959
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.interface_mappings = INTERFACE_MAPPINGS,0,0,0.0,960
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,except ValueError as e:,0,0,0.0,961
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""Agent terminated!""), e)",0,0,0.0,962
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Bridge mappings: %s""), bridge_mappings)",0,0,0.0,963
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"interface_mappings,",0,0,0.0,964
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.get_bridge_name(network_id),1,0,0.0,965
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ips, gateway = self.get_interface_details(interface)",1,0,0.0,966
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if self.ensure_bridge(bridge_name, interface, ips, gateway):",1,0,0.0,967
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ips, gateway = self.get_interface_details(physical_interface)",1,0,0.0,968
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if self.ensure_bridge(bridge_name, physical_interface, ips, gateway):",1,0,0.0,969
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return physical_interface,1,0,0.0,970
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if not physical_interface:,1,0,0.0,971
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.error(_LE(""No mapping for physical network %s""),",1,0,0.0,972
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return self.ensure_flat_bridge(network_id, physical_interface)",1,0,0.0,973
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return self.ensure_vlan_bridge(network_id, physical_interface,",1,0,0.0,974
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.ensure_local_bridge(network_id),1,0,0.0,975
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.setup_linux_bridge(self.interface_mappings),1,0,0.0,976
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations = {'interface_mappings': self.interface_mappings},1,0,0.0,977
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.br_mgr = LinuxBridgeManager(interface_mappings),1,0,0.0,978
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.br_mgr.get_bridge_name(network_id),1,0,0.0,979
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,BRIDGE_MAPPINGS = {'physnet0': 'br-eth2'},0,0,0.0,980
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,INTERFACE_MAPPINGS = {'physnet1': 'eth1'},0,0,0.0,981
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface_mappings = INTERFACE_MAPPINGS,0,0,0.0,982
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_mappings = BRIDGE_MAPPINGS,0,0,0.0,983
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"bridge_mappings, interface_mappings)",0,0,0.0,984
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent.remove_port_binding.assert_called_with('net123',",0,0,0.0,985
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'physnet1',",0,0,0.0,986
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'port123'),0,0,0.0,987
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return configurations,0,0,0.0,988
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return LinuxBridgeRpcCallbacks(context, agent, sg_agent)",0,0,0.0,989
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"consumers = [[topics.PORT, topics.UPDATE],",0,0,0.0,990
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ip_lib.IPDevice(tap_name).link.set_up(),1,0,0.0,991
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_agent)],1,0,0.0,992
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"consumers = [[topics.PORT, topics.UPDATE],",1,0,0.0,993
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"[topics.NETWORK, topics.DELETE],",1,0,0.0,994
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"[topics.NETWORK, topics.UPDATE],",1,0,0.0,995
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"[topics.SECURITY_GROUP, topics.UPDATE]]",1,0,0.0,996
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if cfg.CONF.VXLAN.l2_population:,1,0,0.0,997
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"consumers.append([topics.L2POPULATION, topics.UPDATE])",1,0,0.0,998
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"connection, lconst.EXTENSION_DRIVER_TYPE)",1,0,0.0,999
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.br_mgr = LinuxBridgeManager(bridge_mappings, interface_mappings)",1,0,0.0,1000
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.debug(""Setting admin_state_up to %s for port %s"",",1,0,0.0,1001
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"admin_state_up, port_id)",1,0,0.0,1002
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_name = self.br_mgr.get_tap_device_name(port_id),1,0,0.0,1003
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if admin_state_up:,1,0,0.0,1004
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ip_lib.IPDevice(tap_name).link.set_down(),1,0,0.0,1005
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent_id = '%s%s' % ('lb', (mac.replace("":"", """")))",1,0,0.0,1006
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port = self.br_mgr.get_tap_device_name(,1,0,0.0,1007
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details['port_id']),1,0,0.0,1008
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"arp_protect.setup_arp_spoofing_protection(port,",1,0,0.0,1009
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details),1,0,0.0,1010
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# create the networking for the port,1,0,0.0,1011
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,network_type = device_details.get('network_type'),1,0,0.0,1012
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segmentation_id = device_details.get('segmentation_id'),1,0,0.0,1013
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_in_bridge = self.br_mgr.add_interface(,1,0,0.0,1014
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details['network_id'], network_type,",1,0,0.0,1015
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details['physical_network'], segmentation_id,",1,0,0.0,1016
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details['port_id'], device_details['device_owner'])",1,0,0.0,1017
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self._ensure_port_admin_state(device_details['port_id'],",1,0,0.0,1018
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details['admin_state_up']),1,0,0.0,1019
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.endpoints = [LinuxBridgeRpcCallbacks(self.context, self,",1,0,0.0,1020
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,sys.exit(1),1,0,0.0,1021
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"[topics.NETWORK, topics.DELETE],",0,0,0.0,1022
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if self.br_mgr.vxlan_mode != lconst.VXLAN_NONE:,1,0,0.0,1023
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_interfaces.,1,0,0.0,1024
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(LinuxBridgeNeutronAgentRPC, self).__init__()",1,0,0.0,1025
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.interface_mappings = interface_mappings,1,0,0.0,1026
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.bridge_mappings = bridge_mappings,1,0,0.0,1027
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.setup_linux_bridge(self.bridge_mappings, self.interface_mappings)",1,0,0.0,1028
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# stores received port_updates and port_deletes for,1,0,0.0,1029
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# processing by the main loop,1,0,0.0,1030
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.updated_devices = set(),1,0,0.0,1031
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.setup_rpc(self.interface_mappings.values()),1,0,0.0,1032
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations = {,1,0,0.0,1033
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'bridge_mappings': self.bridge_mappings,",1,0,0.0,1034
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'extensions': self.ext_manager.names(),1,0,0.0,1035
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,},1,0,0.0,1036
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations['tunneling_ip'] = self.br_mgr.local_ip,1,0,0.0,1037
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""Agent terminated!""))",1,0,0.0,1038
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations['tunnel_types'] = [p_const.TYPE_VXLAN],1,0,0.0,1039
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations['l2_population'] = cfg.CONF.VXLAN.l2_population,1,0,0.0,1040
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'binary': 'neutron-linuxbridge-agent',",1,0,0.0,1041
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'agent_type': constants.AGENT_TYPE_LINUXBRIDGE,",1,0,0.0,1042
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Stopping linuxbridge agent.""))",1,0,0.0,1043
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(LinuxBridgeNeutronAgentRPC, self).stop(graceful)",1,0,0.0,1044
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices = len(self.br_mgr.get_tap_devices()),1,0,0.0,1045
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if physical_interfaces:,1,0,0.0,1046
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mac = utils.get_interface_mac(physical_interfaces[0]),1,0,0.0,1047
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,else:,1,0,0.0,1048
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices = ip_lib.IPWrapper().get_devices(True),1,0,0.0,1049
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if devices:,1,0,0.0,1050
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mac = utils.get_interface_mac(devices[0].name),1,0,0.0,1051
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if tap_in_bridge:,1,0,0.0,1052
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,arp_protect.delete_arp_spoofing_protection(devices),1,0,0.0,1053
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# This should be thread-safe as the greenthread should not yield,1,0,0.0,1054
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_details['network_id']],0,0,0.0,1055
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,with mock.patch('neutron.plugins.ml2.drivers.agent.',0,0,0.0,1056
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'_agent_manager_base.NetworkSegment',",0,0,0.0,1057
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return_value=mock_segment):,0,0,0.0,1058
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,resync_needed = agent.treat_devices_added_updated(set(['tap1'])),0,0,0.0,1059
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertFalse(resync_needed),0,0,0.0,1060
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"agent.rpc_callbacks.add_network.assert_called_with('net123',",0,0,0.0,1061
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_segment),0,0,0.0,1062
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.plug_interface.assert_called_with(,0,0,0.0,1063
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'net123', mock_segment, 'dev123',",0,0,0.0,1064
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,constants.DEVICE_OWNER_NETWORK_PREFIX),0,0,0.0,1065
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(agent.plugin_rpc.update_device_up.called),0,0,0.0,1066
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(agent.ext_manager.handle_port.called),0,0,0.0,1067
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.assertTrue(mock_port_data in agent.network_ports[,0,0,0.0,1068
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,),0,0,0.0,1069
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# between these two statements.,1,0,0.0,1070
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"set_arp.assert_called_with(mock_details['device'], mock_details)",0,0,0.0,1071
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"segment = amb.NetworkSegment(p_const.TYPE_VLAN, ""physnet-1"", ""1"")",0,0,0.0,1072
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.plug_interface(""123"", segment, ""tap234"",",0,0,0.0,1073
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,port_id = 'fake_id',0,0,0.0,1074
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(ip_lib, 'IPDevice') as dev_mock:",0,0,0.0,1075
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.lbm.ensure_port_admin_state(port_id, admin_state)",0,0,0.0,1076
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_name = self.lbm.get_tap_device_name(port_id),0,0,0.0,1077
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(admin_state,",0,0,0.0,1078
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,dev_mock(tap_name).link.set_up.called),0,0,0.0,1079
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertNotEqual(admin_state,",0,0,0.0,1080
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,dev_mock(tap_name).link.set_down.called),0,0,0.0,1081
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._test_ensure_port_admin_state(True),0,0,0.0,1082
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._test_ensure_port_admin_state(False),0,0,0.0,1083
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,mock_details['segmentation_id']),0,0,0.0,1084
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock_details['physical_network'],",0,0,0.0,1085
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock_segment = amb.NetworkSegment(mock_details['network_type'],",0,0,0.0,1086
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.plug_interface.return_value = True,0,0,0.0,1087
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated_devices = self.updated_devices,1,0,0.0,1088
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,current_devices = self.br_mgr.get_tap_devices(),1,0,0.0,1089
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,arp_protect.delete_unreferenced_arp_protection(current_devices),1,0,0.0,1090
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"interface_mappings,",1,0,0.0,1091
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,quitting_rpc_timeout),1,0,0.0,1092
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,from neutron.plugins.ml2.drivers.agent import _agent_manager_base as amb,0,0,0.0,1093
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class TestCommonAgentLoop(base.BaseTestCase):,0,0,0.0,1094
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(TestCommonAgentLoop, self).setUp()",0,0,0.0,1095
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager = mock.Mock(),0,0,0.0,1096
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager.get_all_devices.return_value = [],0,0,0.0,1097
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager.get_agent_configurations.return_value = {},0,0,0.0,1098
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,manager.get_rpc_consumers.return_value = [],0,0,0.0,1099
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(linuxbridge_neutron_agent.CommonAgentLoop,",0,0,0.0,1100
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'_validate_manager_class'), \",0,0,0.0,1101
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"mock.patch.object(linuxbridge_neutron_agent.CommonAgentLoop,",0,0,0.0,1102
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,'_validate_rpc_endpoints'):,0,0,0.0,1103
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent = linuxbridge_neutron_agent.CommonAgentLoop(,0,0,0.0,1104
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr.ensure_port_admin_state = mock.Mock(),0,0,0.0,1105
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"with mock.patch.object(agent.mgr,",0,0,0.0,1106
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr = mock.Mock(),0,0,0.0,1107
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr.get_all_devices.return_value = fake_current,0,0,0.0,1108
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.rpc_callbacks.get_and_clear_updated_devices.return_value =\,0,0,0.0,1109
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated,0,0,0.0,1110
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self._test_scan_devices(previous, updated, fake_current, expected,",0,0,0.0,1111
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr.delete_unreferenced_arp_protection.assert_called_with(,0,0,0.0,1112
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,fake_current),0,0,0.0,1113
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,agent.mgr = mock.Mock(),0,0,0.0,1114
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,physical_bridges.,1,0,0.0,1115
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,quitting_rpc_timeout):,1,0,0.0,1116
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class LinuxBridgeNeutronAgentRPC(service.Service):,1,0,0.0,1117
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""works properly.""))",0,0,0.0,1118
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface),0,0,0.0,1119
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.mgr.remove_fdb_entries(agent_ip,",0,0,0.0,1120
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.mgr.add_fdb_ip_entry(mac, ip, interface)",0,0,0.0,1121
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.mgr.remove_fdb_ip_entry(mac, ip, interface)",0,0,0.0,1122
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class CommonAgentLoop(service.Service):,0,0,0.0,1123
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"quitting_rpc_timeout, agent_type, agent_binary):",0,0,0.0,1124
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(CommonAgentLoop, self).__init__()",0,0,0.0,1125
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr = manager,0,0,0.0,1126
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._validate_manager_class(),0,0,0.0,1127
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_type = agent_type,0,0,0.0,1128
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_binary = agent_binary,0,0,0.0,1129
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if not isinstance(self.mgr,",0,0,0.0,1130
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,amb.CommonAgentManagerBase):,0,0,0.0,1131
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.setup_rpc(),0,0,0.0,1132
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,consumers = self.mgr.get_rpc_consumers(),0,0,0.0,1133
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations = {'extensions': self.ext_manager.names()},0,0,0.0,1134
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,configurations.update(self.mgr.get_agent_configurations()),0,0,0.0,1135
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'binary': self.agent_binary,",0,0,0.0,1136
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"'agent_type': self.agent_type,",0,0,0.0,1137
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.info(_LI(""Stopping %s agent.""), self.agent_type)",0,0,0.0,1138
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(CommonAgentLoop, self).stop(graceful)",0,0,0.0,1139
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,devices = len(self.mgr.get_all_devices()),0,0,0.0,1140
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"if not isinstance(self.endpoints[0],",0,0,0.0,1141
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"""CommonAgent works properly.""))",0,0,0.0,1142
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent_id = self.mgr.get_agent_id(),0,0,0.0,1143
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.rpc_callbacks = self.mgr.get_rpc_callbacks(self.context, self,",0,0,0.0,1144
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_agent),0,0,0.0,1145
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.endpoints = [self.rpc_callbacks],0,0,0.0,1146
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ports,",0,0,0.0,1147
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.mgr.add_fdb_entries(agent_ip,",0,0,0.0,1148
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if agent_ip == self.agent.mgr.local_ip:,0,0,0.0,1149
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment = self.network_map.get(network_id),0,0,0.0,1150
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"[topics.NETWORK, topics.UPDATE],",0,0,0.0,1151
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"[topics.SECURITY_GROUP, topics.UPDATE]]",0,0,0.0,1152
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if cfg.CONF.VXLAN.l2_population:,0,0,0.0,1153
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"consumers.append([topics.L2POPULATION, topics.UPDATE])",0,0,0.0,1154
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return consumers,0,0,0.0,1155
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"LOG.debug(""Setting admin_state_up to %s for device %s"",",0,0,0.0,1156
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"admin_state_up, tap_name)",0,0,0.0,1157
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if admin_state_up:,0,0,0.0,1158
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ip_lib.IPDevice(tap_name).link.set_up(),0,0,0.0,1159
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,ip_lib.IPDevice(tap_name).link.set_down(),0,0,0.0,1160
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"arp_protect.setup_arp_spoofing_protection(device, device_details)",0,0,0.0,1161
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,arp_protect.delete_arp_spoofing_protection(devices),0,0,0.0,1162
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,arp_protect.delete_unreferenced_arp_protection(current_devices),0,0,0.0,1163
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,return lconst.EXTENSION_DRIVER_TYPE,0,0,0.0,1164
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class LinuxBridgeRpcCallbacks(,0,0,0.0,1165
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"sg_rpc.SecurityGroupAgentRpcCallbackMixin,",0,0,0.0,1166
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"l2pop_rpc.L2populationRpcCallBackMixin,",0,0,0.0,1167
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,amb.CommonAgentManagerRpcCallBackBase):,0,0,0.0,1168
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if network_id in self.network_map:,0,0,0.0,1169
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phynet = self.network_map[network_id].physical_network,0,0,0.0,1170
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if phynet and phynet in self.agent.mgr.bridge_mappings:,0,0,0.0,1171
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.agent.mgr.get_bridge_name(network_id),0,0,0.0,1172
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.mgr.delete_bridge(bridge_name),0,0,0.0,1173
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_name = self.agent.mgr.get_tap_device_name(port_id),0,0,0.0,1174
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Put the device name in the updated_devices set.,0,0,0.0,1175
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.updated_devices.add(device_name),0,0,0.0,1176
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.updated_devices.add(port_data['device']),0,0,0.0,1177
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self._validate_rpc_endpoints(),0,0,0.0,1178
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"connection, self.mgr.get_extension_driver_type())",0,0,0.0,1179
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.br_mgr.remove_fdb_ip_entry(mac, ip, interface)",1,0,0.0,1180
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,phynet = self.agent.br_mgr.network_map[network_id].physical_network,1,0,0.0,1181
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.network_map[network_id] = NetworkSegment(network_type,",1,0,0.0,1182
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"physical_network,",1,0,0.0,1183
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segmentation_id),1,0,0.0,1184
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_device_name = self.get_tap_device_name(port_id),1,0,0.0,1185
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"return self.add_tap_interface(network_id, network_type,",1,0,0.0,1186
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"physical_network, segmentation_id,",1,0,0.0,1187
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"tap_device_name, device_owner)",1,0,0.0,1188
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"class LinuxBridgeRpcCallbacks(sg_rpc.SecurityGroupAgentRpcCallbackMixin,",1,0,0.0,1189
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,l2pop_rpc.L2populationRpcCallBackMixin):,1,0,0.0,1190
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"super(LinuxBridgeRpcCallbacks, self).__init__()",1,0,0.0,1191
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.context = context,1,0,0.0,1192
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.sg_agent = sg_agent,1,0,0.0,1193
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if network_id in self.agent.br_mgr.network_map:,1,0,0.0,1194
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if phynet and phynet in self.agent.br_mgr.bridge_mappings:,1,0,0.0,1195
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.mgr.setup_arp_spoofing_protection(device,",0,0,0.0,1196
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,bridge_name = self.agent.br_mgr.get_bridge_name(network_id),1,0,0.0,1197
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.br_mgr.delete_bridge(bridge_name),1,0,0.0,1198
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,tap_name = self.agent.br_mgr.get_tap_device_name(port_id),1,0,0.0,1199
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Put the tap name in the updated_devices set.,1,0,0.0,1200
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.updated_devices.add(tap_name),1,0,0.0,1201
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.agent.updated_devices.add(port_data['device']),1,0,0.0,1202
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment = self.agent.br_mgr.network_map.get(network_id),1,0,0.0,1203
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if agent_ip == self.agent.br_mgr.local_ip:,1,0,0.0,1204
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.br_mgr.add_fdb_entries(agent_ip,",1,0,0.0,1205
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"ports,",1,0,0.0,1206
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface),1,0,0.0,1207
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.br_mgr.remove_fdb_entries(agent_ip,",1,0,0.0,1208
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.agent.br_mgr.add_fdb_ip_entry(mac, ip, interface)",1,0,0.0,1209
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"segmentation_id, port_id, device_owner):",1,0,0.0,1210
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.network_map = {},1,0,0.0,1211
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# Store network mapping to segments,1,0,0.0,1212
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class LinuxBridgeManager(object):,1,0,0.0,1213
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details),0,0,0.0,1214
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,segment = amb.NetworkSegment(,0,0,0.0,1215
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details.get('network_type'),",0,0,0.0,1216
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device_details['physical_network'],",0,0,0.0,1217
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details.get('segmentation_id'),0,0,0.0,1218
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,),0,0,0.0,1219
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,network_id = device_details['network_id'],0,0,0.0,1220
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.rpc_callbacks.add_network(network_id, segment)",0,0,0.0,1221
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,interface_plugged = self.mgr.plug_interface(,0,0,0.0,1222
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"network_id, segment,",0,0,0.0,1223
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device, device_details['device_owner'])",0,0,0.0,1224
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.ensure_port_admin_state(,0,0,0.0,1225
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"device,",0,0,0.0,1226
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,device_details['admin_state_up']),0,0,0.0,1227
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,if interface_plugged:,0,0,0.0,1228
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,# no resync is needed,0,0,0.0,1229
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.delete_arp_spoofing_protection(devices),0,0,0.0,1230
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,updated_devices = self.rpc_callbacks.get_and_clear_updated_devices(),0,0,0.0,1231
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,current_devices = self.mgr.get_all_devices(),0,0,0.0,1232
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.mgr.delete_unreferenced_arp_protection(current_devices),0,0,0.0,1233
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"manager = LinuxBridgeManager(bridge_mappings, interface_mappings)",0,0,0.0,1234
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"constants.AGENT_TYPE_LINUXBRIDGE,",0,0,0.0,1235
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,LB_AGENT_BINARY),0,0,0.0,1236
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,class NetworkSegment(object):,1,0,0.0,1237
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.network_type = network_type,1,0,0.0,1238
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.physical_network = physical_network,1,0,0.0,1239
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,self.segmentation_id = segmentation_id,1,0,0.0,1240
8c5ef2cd6e1819c4f51b01cb3504da34ef377546,"self.assertEqual(port_2_data['port_id'], cleaned_port_id)",1,0,0.0,1241
