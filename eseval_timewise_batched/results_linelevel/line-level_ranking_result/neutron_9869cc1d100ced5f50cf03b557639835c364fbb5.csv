commit_id,line,line_level_label,count,line_score,row
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron import context,1,4,1.0,1
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron import manager,1,3,0.75,2
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo.utils import importutils,0,3,0.75,3
9869cc1d100ced5f50cf03b557639835c364fbb5,"test cases, so call the super class setup, but pass in the",1,3,0.75,4
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests.unit import _test_extension_portbindings as test_bindings,1,3,0.75,5
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.common import constants as svc_constants,1,3,0.75,6
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron import manager,1,3,0.75,7
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.common import constants,1,3,0.75,8
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_utils import importutils,1,3,0.75,9
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo.utils import importutils,1,3,0.75,10
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_utils import importutils,0,3,0.75,11
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.openstack.common import importutils,1,3,0.75,12
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.common import utils,1,2,0.5,13
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.db import n1kv_db_v2,1,2,0.5,14
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import config as c_conf,1,2,0.5,15
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,2,0.5,16
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import cisco_constants as c_const,1,2,0.5,17
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.extensions import portbindings,1,2,0.5,18
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.n1kv import n1kv_client,1,2,0.5,19
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.api.v2 import attributes,1,2,0.5,20
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.api import extensions as neutron_extensions,1,2,0.5,21
9869cc1d100ced5f50cf03b557639835c364fbb5,:param context: neutron api request context,1,2,0.5,22
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve all the policy profiles from the VSM when the plugin,1,2,0.5,23
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.common import utils,1,2,0.5,24
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.db import network_db_v2 as cdb,1,2,0.5,25
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.db import n1kv_models_v2,1,2,0.5,26
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.n1kv import n1kv_neutron_plugin,1,2,0.5,27
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco import extensions,1,2,0.5,28
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.extensions import n1kv,1,2,0.5,29
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.extensions import network_profile,1,2,0.5,30
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.extensions import policy_profile,1,2,0.5,31
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.n1kv import n1kv_client,1,2,0.5,32
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.db import network_db_v2,1,2,0.5,33
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests import tools,1,2,0.5,34
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests.unit.api.v2 import test_base,1,2,0.5,35
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests.unit.db import test_db_base_plugin_v2 as test_plugin,1,2,0.5,36
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests.unit.extensions import test_l3,1,2,0.5,37
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests.unit.plugins.cisco.n1kv import fake_client,1,2,0.5,38
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.tests.unit.scheduler import test_l3_agent_scheduler,1,2,0.5,39
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test whether VMNetwork is cleaned up from db on last port delete.""""""",1,2,0.5,40
9869cc1d100ced5f50cf03b557639835c364fbb5,# Patch the Client class with the TestClient class,1,2,0.5,41
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.extensions import n1kv,1,2,0.5,42
9869cc1d100ced5f50cf03b557639835c364fbb5,import neutron.db.api as db,1,2,0.5,43
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.db import n1kv_db_v2,1,2,0.5,44
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.common import exceptions as n_exc,1,2,0.5,45
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo.utils import excutils,0,2,0.5,46
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import config as c_conf,1,2,0.5,47
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_config import cfg as q_conf,0,2,0.5,48
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_utils import excutils,0,2,0.5,49
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo.config import cfg as q_conf,1,2,0.5,50
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo.utils import excutils,1,2,0.5,51
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_config import cfg as o_conf,1,2,0.5,52
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_log import log as logging,1,2,0.5,53
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_utils import excutils,1,2,0.5,54
9869cc1d100ced5f50cf03b557639835c364fbb5,from oslo_utils import uuidutils,1,2,0.5,55
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.api.rpc.agentnotifiers import dhcp_rpc_agent_api,1,2,0.5,56
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.api.rpc.handlers import dhcp_rpc,1,2,0.5,57
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.api.rpc.handlers import metadata_rpc,1,2,0.5,58
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.api.v2 import attributes,1,2,0.5,59
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.openstack.common import excutils,1,2,0.5,60
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.common import rpc as n_rpc,1,2,0.5,61
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.db.quota import driver,1,2,0.5,62
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.common import topics,1,2,0.5,63
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import cisco_credentials_v2 as c_cred,1,2,0.5,64
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import cisco_constants as c_const,1,2,0.5,65
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.i18n import _LW,1,2,0.5,66
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.extensions import providernet,1,2,0.5,67
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.extensions import portbindings,1,2,0.5,68
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.plugins.cisco.common import cisco_exceptions,1,2,0.5,69
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.db import external_net_db,1,2,0.5,70
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.db import db_base_plugin_v2,1,2,0.5,71
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.db import agentschedulers_db,1,2,0.5,72
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.db import portbindings_db,1,2,0.5,73
9869cc1d100ced5f50cf03b557639835c364fbb5,from neutron.db import agents_db,1,2,0.5,74
9869cc1d100ced5f50cf03b557639835c364fbb5,# initialize the main API router which extends,1,1,0.25,75
9869cc1d100ced5f50cf03b557639835c364fbb5,class TestN1kvNetworkProfiles(N1kvPluginTestCase):,1,1,0.25,76
9869cc1d100ced5f50cf03b557639835c364fbb5,"class TestN1kvPorts(test_plugin.TestPortsV2,",1,1,0.25,77
9869cc1d100ced5f50cf03b557639835c364fbb5,"class TestN1kvHTTPResponse(test_plugin.TestV2HTTPResponse,",1,1,0.25,78
9869cc1d100ced5f50cf03b557639835c364fbb5,pass,1,1,0.25,79
9869cc1d100ced5f50cf03b557639835c364fbb5,"class TestN1kvBasicGet(test_plugin.TestBasicGet,",1,1,0.25,80
9869cc1d100ced5f50cf03b557639835c364fbb5,First step is to define an acceptable response from the VSM to,1,1,0.25,81
9869cc1d100ced5f50cf03b557639835c364fbb5,"# running in the unit tests, we need to 'fake' it by patching the HTTP",1,1,0.25,82
9869cc1d100ced5f50cf03b557639835c364fbb5,"extra, please define your own setUp() function in your test class,",1,1,0.25,83
9869cc1d100ced5f50cf03b557639835c364fbb5,Setup method for n1kv plugin tests.,1,1,0.25,84
9869cc1d100ced5f50cf03b557639835c364fbb5,class N1kvPluginTestCase(test_plugin.NeutronDbPluginV2TestCase):,1,1,0.25,85
9869cc1d100ced5f50cf03b557639835c364fbb5,class PolicyProfileTestExtensionManager(object):,1,1,0.25,86
9869cc1d100ced5f50cf03b557639835c364fbb5,# Explicit stop of failure response mock from controller required,1,1,0.25,87
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.skipTest(""Unsupported test case"")",1,1,0.25,88
9869cc1d100ced5f50cf03b557639835c364fbb5,Test restricted policy profile retrieval.,1,1,0.25,89
9869cc1d100ced5f50cf03b557639835c364fbb5,# for network object clean up to succeed.,1,1,0.25,90
9869cc1d100ced5f50cf03b557639835c364fbb5,# Verify VMNetwork is cleaned up from the database on port delete.,1,1,0.25,91
9869cc1d100ced5f50cf03b557639835c364fbb5,class TestN1kvPolicyProfiles(N1kvPluginTestCase):,1,1,0.25,92
9869cc1d100ced5f50cf03b557639835c364fbb5,plugin = manager.NeutronManager.get_plugin(),1,1,0.25,93
9869cc1d100ced5f50cf03b557639835c364fbb5,Test unrestricted policy profile retrieval.,1,1,0.25,94
9869cc1d100ced5f50cf03b557639835c364fbb5,Test getting policy profiles using the normal unrestricted,1,1,0.25,95
9869cc1d100ced5f50cf03b557639835c364fbb5,Test getting policy profiles using the restricted behavior.,1,1,0.25,96
9869cc1d100ced5f50cf03b557639835c364fbb5,"class TestN1kvNetworks(test_plugin.TestNetworksV2,",1,1,0.25,97
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Regular test case of network deletion. Should return successful.""""""",1,1,0.25,98
9869cc1d100ced5f50cf03b557639835c364fbb5,"class TestN1kvSubnets(test_plugin.TestSubnetsV2,",1,1,0.25,99
9869cc1d100ced5f50cf03b557639835c364fbb5,# Test with network auto-scheduling disabled,1,1,0.25,100
9869cc1d100ced5f50cf03b557639835c364fbb5,class TestN1kvL3Test(test_l3.L3NatExtensionTestCase):,1,1,0.25,101
9869cc1d100ced5f50cf03b557639835c364fbb5,class TestN1kvL3SchedulersTest(,1,1,0.25,102
9869cc1d100ced5f50cf03b557639835c364fbb5,This object is returned by mocked requests lib instead of normal response.,1,1,0.25,103
9869cc1d100ced5f50cf03b557639835c364fbb5,class NetworkProfileTestExtensionManager(object):,1,1,0.25,104
9869cc1d100ced5f50cf03b557639835c364fbb5,# Creating a mock HTTP connection object for requests lib. The N1KV,1,1,0.25,105
9869cc1d100ced5f50cf03b557639835c364fbb5,class FakeResponse(object):,1,1,0.25,106
9869cc1d100ced5f50cf03b557639835c364fbb5,:param vm_network: VM network object with which the port is associated,1,1,0.25,107
9869cc1d100ced5f50cf03b557639835c364fbb5,import webob.exc,1,1,0.25,108
9869cc1d100ced5f50cf03b557639835c364fbb5,"class N1kvNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,",1,1,0.25,109
9869cc1d100ced5f50cf03b557639835c364fbb5,# This attribute specifies whether the plugin supports or not,1,1,0.25,110
9869cc1d100ced5f50cf03b557639835c364fbb5,self.network_scheduler = importutils.import_object(,1,1,0.25,111
9869cc1d100ced5f50cf03b557639835c364fbb5,# Consume from all consumers in threads,1,1,0.25,112
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Start a green thread to pull policy profiles from VSM.""""""",1,1,0.25,113
9869cc1d100ced5f50cf03b557639835c364fbb5,import eventlet,1,1,0.25,114
9869cc1d100ced5f50cf03b557639835c364fbb5,from the VSM. Hence we associate the policy profiles with fake,1,1,0.25,115
9869cc1d100ced5f50cf03b557639835c364fbb5,# Fetch policy profiles from VSM,1,1,0.25,116
9869cc1d100ced5f50cf03b557639835c364fbb5,# Delete profiles from database if profiles were deleted in VSM,1,1,0.25,117
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.warning(_LW('No policy profile populated from VSM')),1,1,0.25,118
9869cc1d100ced5f50cf03b557639835c364fbb5,session = context.session,1,1,0.25,119
9869cc1d100ced5f50cf03b557639835c364fbb5,:param policy_profile: object of type policy profile,1,1,0.25,120
9869cc1d100ced5f50cf03b557639835c364fbb5,:param port: port object which is to be deleted,1,1,0.25,121
9869cc1d100ced5f50cf03b557639835c364fbb5,Populate all the policy profiles from VSM.,1,1,0.25,122
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: network object,1,1,0.25,123
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: updated subnet object,1,1,0.25,124
9869cc1d100ced5f50cf03b557639835c364fbb5,import mock,1,1,0.25,125
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: updated network object,1,1,0.25,126
9869cc1d100ced5f50cf03b557639835c364fbb5,:param network_profile: dictionary containing network profile object,1,1,0.25,127
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: deleted network profile object,1,1,0.25,128
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: deleted subnet object,1,1,0.25,129
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: network profile object,1,1,0.25,130
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: subnet object,1,1,0.25,131
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: updated port object,1,1,0.25,132
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: port object,1,1,0.25,133
9869cc1d100ced5f50cf03b557639835c364fbb5,and router interface. Default policy profile name is configured in the,1,1,0.25,134
9869cc1d100ced5f50cf03b557639835c364fbb5,Create neutron port.,1,1,0.25,135
9869cc1d100ced5f50cf03b557639835c364fbb5,# the network_binding record is deleted via cascade from,1,1,0.25,136
9869cc1d100ced5f50cf03b557639835c364fbb5,data['network_profile'].pop('sub_type'),1,0,0.0,137
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_vlan(self):,1,0,0.0,138
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_overlay_missing_subtype(self):,1,0,0.0,139
9869cc1d100ced5f50cf03b557639835c364fbb5,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY),1,0,0.0,140
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_overlay(self):,1,0,0.0,141
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, 201)",1,0,0.0,142
9869cc1d100ced5f50cf03b557639835c364fbb5,res = net_p_req.get_response(self.ext_api),1,0,0.0,143
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p_req = self.new_create_request('network_profiles', data)",1,0,0.0,144
9869cc1d100ced5f50cf03b557639835c364fbb5,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_VLAN),1,0,0.0,145
9869cc1d100ced5f50cf03b557639835c364fbb5,netp['multicast_ip_range'] = (mcast_ip_range or,1,0,0.0,146
9869cc1d100ced5f50cf03b557639835c364fbb5,return data,1,0,0.0,147
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {""network_profile"": netp}",1,0,0.0,148
9869cc1d100ced5f50cf03b557639835c364fbb5,netp['sub_type'] = c_const.NETWORK_TYPE_VLAN,1,0,0.0,149
9869cc1d100ced5f50cf03b557639835c364fbb5,elif segment_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,150
9869cc1d100ced5f50cf03b557639835c364fbb5,"""224.1.1.1-224.1.1.10"")",1,0,0.0,151
9869cc1d100ced5f50cf03b557639835c364fbb5,netp['sub_type'] = sub_type or 'enhanced',1,0,0.0,152
9869cc1d100ced5f50cf03b557639835c364fbb5,netp['segment_range'] = segment_range or '10000-10010',1,0,0.0,153
9869cc1d100ced5f50cf03b557639835c364fbb5,elif segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,154
9869cc1d100ced5f50cf03b557639835c364fbb5,netp['physical_network'] = PHYS_NET,1,0,0.0,155
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, 400)",1,0,0.0,156
9869cc1d100ced5f50cf03b557639835c364fbb5,"data,",1,0,0.0,157
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_trunk(self):,1,0,0.0,158
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'name': 'netp2'}},1,0,0.0,159
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p_req = self.new_update_request('network_profiles',",1,0,0.0,160
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'physical_network': PHYS_NET}},1,0,0.0,161
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p = self._make_test_profile(name='netp1'),1,0,0.0,162
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_profile_physical_network_fail(self):,1,0,0.0,163
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(update_res.status_int, 200)",1,0,0.0,164
9869cc1d100ced5f50cf03b557639835c364fbb5,update_res = update_req.get_response(self.ext_api),1,0,0.0,165
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p['network_profile']['id']),1,0,0.0,166
9869cc1d100ced5f50cf03b557639835c364fbb5,if segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,167
9869cc1d100ced5f50cf03b557639835c364fbb5,"update_req = self.new_update_request('network_profiles',",1,0,0.0,168
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p_req.get_response(self.ext_api)),1,0,0.0,169
9869cc1d100ced5f50cf03b557639835c364fbb5,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_TRUNK),1,0,0.0,170
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p = self.deserialize(self.fmt,",1,0,0.0,171
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p_req = self.new_create_request('network_profiles', net_p_dict)",1,0,0.0,172
9869cc1d100ced5f50cf03b557639835c364fbb5,_prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY)),1,0,0.0,173
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p_dict = (self.,1,0,0.0,174
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_profile_plugin(self):,1,0,0.0,175
9869cc1d100ced5f50cf03b557639835c364fbb5,segment_range='10000-1000000001'),1,0,0.0,176
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,177
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_overlay_unreasonable_seg_range(self):,1,0,0.0,178
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_trunk_missing_subtype(self):,1,0,0.0,179
9869cc1d100ced5f50cf03b557639835c364fbb5,netp['segment_range'] = segment_range or '100-110',1,0,0.0,180
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv.EXTENDED_ATTRIBUTES_2_0[""networks""])",1,0,0.0,181
9869cc1d100ced5f50cf03b557639835c364fbb5,'tenant_id': self.tenant_id},1,0,0.0,182
9869cc1d100ced5f50cf03b557639835c364fbb5,"new=lambda self: ""127.0.0.1"").start()",1,0,0.0,183
9869cc1d100ced5f50cf03b557639835c364fbb5,# Return a dummy VSM IP address,1,0,0.0,184
9869cc1d100ced5f50cf03b557639835c364fbb5,# in the background.,1,0,0.0,185
9869cc1d100ced5f50cf03b557639835c364fbb5,"# These help us move along, without having to mock up even more systems",1,0,0.0,186
9869cc1d100ced5f50cf03b557639835c364fbb5,# Patch some internal functions in a few other parts of the system.,1,0,0.0,187
9869cc1d100ced5f50cf03b557639835c364fbb5,self.resp_headers)),1,0,0.0,188
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.DEFAULT_RESP_BODY,",1,0,0.0,189
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.DEFAULT_RESP_CODE,",1,0,0.0,190
9869cc1d100ced5f50cf03b557639835c364fbb5,FakeHttpConnection.return_value = (FakeResponse(,1,0,0.0,191
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.resp_headers = {""content-type"": ""application/json""}",1,0,0.0,192
9869cc1d100ced5f50cf03b557639835c364fbb5,# on any instance of the fake HTTP connection class.,1,0,0.0,193
9869cc1d100ced5f50cf03b557639835c364fbb5,# Now define the return values for a few functions that may be called,1,0,0.0,194
9869cc1d100ced5f50cf03b557639835c364fbb5,FakeHttpConnection = http_patcher.start(),1,0,0.0,195
9869cc1d100ced5f50cf03b557639835c364fbb5,"http_patcher = mock.patch(n1kv_client.requests.__name__ + "".request"")",1,0,0.0,196
9869cc1d100ced5f50cf03b557639835c364fbb5,# Using __name__ to avoid having to enter the full module path.,1,0,0.0,197
9869cc1d100ced5f50cf03b557639835c364fbb5,# library itself. We install a patch for a fake HTTP connection class.,1,0,0.0,198
9869cc1d100ced5f50cf03b557639835c364fbb5,# client interacts with the VSM via HTTP. Since we don't have a VSM,1,0,0.0,199
9869cc1d100ced5f50cf03b557639835c364fbb5,},1,0,0.0,200
9869cc1d100ced5f50cf03b557639835c364fbb5,"""id"": ""some-uuid-3""}},",1,0,0.0,201
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_profile_segment_type_fail(self):,1,0,0.0,202
9869cc1d100ced5f50cf03b557639835c364fbb5,"mock.patch(n1kv_client.__name__ + "".Client._get_vsm_hosts"",",1,0,0.0,203
9869cc1d100ced5f50cf03b557639835c364fbb5,# Return dummy user profiles,1,0,0.0,204
9869cc1d100ced5f50cf03b557639835c364fbb5,"netp = {'name': 'netp1',",1,0,0.0,205
9869cc1d100ced5f50cf03b557639835c364fbb5,"mock.patch(cdb.__name__ + "".get_credential_name"",",1,0,0.0,206
9869cc1d100ced5f50cf03b557639835c364fbb5,mcast_ip_range=None):,1,0,0.0,207
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment_range=None,",1,0,0.0,208
9869cc1d100ced5f50cf03b557639835c364fbb5,"sub_type=None,",1,0,0.0,209
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment_type,",1,0,0.0,210
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _prepare_net_profile_data(self,",1,0,0.0,211
9869cc1d100ced5f50cf03b557639835c364fbb5,self._make_test_policy_profile(),1,0,0.0,212
9869cc1d100ced5f50cf03b557639835c364fbb5,self._make_test_profile(),1,0,0.0,213
9869cc1d100ced5f50cf03b557639835c364fbb5,# Create some of the database entries that we require.,1,0,0.0,214
9869cc1d100ced5f50cf03b557639835c364fbb5,ext_mgr=ext_mgr),1,0,0.0,215
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(N1kvPluginTestCase, self).setUp(self._plugin_name,",1,0,0.0,216
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv.EXTENDED_ATTRIBUTES_2_0[""ports""])",1,0,0.0,217
9869cc1d100ced5f50cf03b557639835c364fbb5,"attributes.RESOURCE_ATTRIBUTE_MAP[""ports""].update(",1,0,0.0,218
9869cc1d100ced5f50cf03b557639835c364fbb5,"attributes.RESOURCE_ATTRIBUTE_MAP[""networks""].update(",1,0,0.0,219
9869cc1d100ced5f50cf03b557639835c364fbb5,# Update the RESOURCE_ATTRIBUTE_MAP with n1kv specific extended attrs.,1,0,0.0,220
9869cc1d100ced5f50cf03b557639835c364fbb5,self.useFixture(tools.AttributeMapMemento()),1,0,0.0,221
9869cc1d100ced5f50cf03b557639835c364fbb5,neutron_extensions.append_api_extensions_path(extensions.__path__),1,0,0.0,222
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kv_neutron_plugin.N1kvNeutronPluginV2._setup_vsm = _fake_setup_vsm,1,0,0.0,223
9869cc1d100ced5f50cf03b557639835c364fbb5,"""password"": ""admin_password""}).start()",1,0,0.0,224
9869cc1d100ced5f50cf03b557639835c364fbb5,"new=lambda self: {""user_name"": ""admin"",",1,0,0.0,225
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p['id']),1,0,0.0,226
9869cc1d100ced5f50cf03b557639835c364fbb5,"client_patch = mock.patch(n1kv_client.__name__ + "".Client"",",1,0,0.0,227
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {,1,0,0.0,228
9869cc1d100ced5f50cf03b557639835c364fbb5,client_patch.start(),1,0,0.0,229
9869cc1d100ced5f50cf03b557639835c364fbb5,"""id"": ""some-uuid-2""}},",1,0,0.0,230
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test rollback of profile binding if network profile create fails.""""""",1,0,0.0,231
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_rollback_profile_binding(self):,1,0,0.0,232
9869cc1d100ced5f50cf03b557639835c364fbb5,vlan),1,0,0.0,233
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete('network_profiles', net_p['network_profile']['id'])",1,0,0.0,234
9869cc1d100ced5f50cf03b557639835c364fbb5,VLAN_MIN)),1,0,0.0,235
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_delete_network_profile_deallocate_vlan_segment_pool(self):,1,0,0.0,236
9869cc1d100ced5f50cf03b557639835c364fbb5,expected_code=409),1,0,0.0,237
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete('network_profiles', net_p['id'],",1,0,0.0,238
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_delete_network_profile_with_network_fail(self):,1,0,0.0,239
9869cc1d100ced5f50cf03b557639835c364fbb5,VLAN_MAX + 1),1,0,0.0,240
9869cc1d100ced5f50cf03b557639835c364fbb5,VLAN_MIN - 1),1,0,0.0,241
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session,",1,0,0.0,242
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.get_vlan_allocation,",1,0,0.0,243
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertRaises(c_exc.VlanIDNotFound,",1,0,0.0,244
9869cc1d100ced5f50cf03b557639835c364fbb5,vlan).allocated),1,0,0.0,245
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertFalse(n1kv_db_v2.get_vlan_allocation(db_session,",1,0,0.0,246
9869cc1d100ced5f50cf03b557639835c364fbb5,vlan)),1,0,0.0,247
9869cc1d100ced5f50cf03b557639835c364fbb5,"PHYS_NET,",1,0,0.0,248
9869cc1d100ced5f50cf03b557639835c364fbb5,new=fake_client.TestClientInvalidResponse),1,0,0.0,249
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.new_create_request('network_profiles', net_p_dict)",1,0,0.0,250
9869cc1d100ced5f50cf03b557639835c364fbb5,"for vlan in range(VLAN_MIN, VLAN_MAX + 1):",1,0,0.0,251
9869cc1d100ced5f50cf03b557639835c364fbb5,bindings = (db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,0,0.0,252
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(tenant2),1,0,0.0,253
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(tenant1),1,0,0.0,254
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(tenant_id),1,0,0.0,255
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant2 = n1kv_db_v2.get_profile_binding(db_session, 'tenant2',",1,0,0.0,256
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant1 = n1kv_db_v2.get_profile_binding(db_session, 'tenant1',",1,0,0.0,257
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant_id = n1kv_db_v2.get_profile_binding(db_session, self.tenant_id,",1,0,0.0,258
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(201, res.status_int)",1,0,0.0,259
9869cc1d100ced5f50cf03b557639835c364fbb5,is_admin=True),1,0,0.0,260
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.tenant_id,",1,0,0.0,261
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p_req.environ['neutron.context'] = context.Context('',",1,0,0.0,262
9869cc1d100ced5f50cf03b557639835c364fbb5,del data['network_profile']['tenant_id'],1,0,0.0,263
9869cc1d100ced5f50cf03b557639835c364fbb5,"data['network_profile'][c_const.ADD_TENANTS] = ['tenant1', 'tenant2']",1,0,0.0,264
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_multi_tenants(self):,1,0,0.0,265
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(400, res.status_int)",1,0,0.0,266
9869cc1d100ced5f50cf03b557639835c364fbb5,data['network_profile']['add_tenant'] = 'tenant1',1,0,0.0,267
9869cc1d100ced5f50cf03b557639835c364fbb5,data = self._prepare_net_profile_data('vlan'),1,0,0.0,268
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_with_old_add_tenant_fail(self):,1,0,0.0,269
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(3, bindings.count())",1,0,0.0,270
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_type=""network""))",1,0,0.0,271
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertIsNotNone(n1kv_db_v2.get_vlan_allocation(db_session,",1,0,0.0,272
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.deserialize(self.fmt,",1,0,0.0,273
9869cc1d100ced5f50cf03b557639835c364fbb5,'segment_type': c_const.NETWORK_TYPE_OVERLAY}},1,0,0.0,274
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_wrong_split_multicast_fail(self):,1,0,0.0,275
9869cc1d100ced5f50cf03b557639835c364fbb5,NETWORK_SUBTYPE_NATIVE_VXLAN)),1,0,0.0,276
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_no_multicast_fail(self):,1,0,0.0,277
9869cc1d100ced5f50cf03b557639835c364fbb5,mcast_ip_range='1.1.1.1'),1,0,0.0,278
9869cc1d100ced5f50cf03b557639835c364fbb5,"NETWORK_SUBTYPE_NATIVE_VXLAN),",1,0,0.0,279
9869cc1d100ced5f50cf03b557639835c364fbb5,sub_type=(c_const.,1,0,0.0,280
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_invalid_multicast_fail(self):,1,0,0.0,281
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(update_res.status_int, 409)",1,0,0.0,282
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'segment_range': '300-310'}},1,0,0.0,283
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(network_res.status_int, 201)",1,0,0.0,284
9869cc1d100ced5f50cf03b557639835c364fbb5,network_res = network_req.get_response(self.api),1,0,0.0,285
9869cc1d100ced5f50cf03b557639835c364fbb5,"network_req = self.new_create_request('networks', net_data)",1,0,0.0,286
9869cc1d100ced5f50cf03b557639835c364fbb5,'tenant_id': 'some_tenant'}},1,0,0.0,287
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv.PROFILE_ID: net_p['id'],",1,0,0.0,288
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_data = {'network': {'name': 'net1',",1,0,0.0,289
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'segment_range': '200-210'}},1,0,0.0,290
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_profiles_with_networks_fail(self):,1,0,0.0,291
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(update_res.status_int, 400)",1,0,0.0,292
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'sub_type': c_const.NETWORK_TYPE_VLAN}},1,0,0.0,293
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_profile_sub_type_fail(self):,1,0,0.0,294
9869cc1d100ced5f50cf03b557639835c364fbb5,data['network_profile']['multicast_ip_range'] = '',1,0,0.0,295
9869cc1d100ced5f50cf03b557639835c364fbb5,mcast_ip_range=,1,0,0.0,296
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p_dict = self._prepare_net_profile_data(c_const.NETWORK_TYPE_VLAN),1,0,0.0,297
9869cc1d100ced5f50cf03b557639835c364fbb5,'224.1.1.1.224.1.1.3'),1,0,0.0,298
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_profile_populate_vlan_segment_pool(self):,1,0,0.0,299
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_trunk_network_profile_multicast_fail(self):,1,0,0.0,300
9869cc1d100ced5f50cf03b557639835c364fbb5,'100-200'}},1,0,0.0,301
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'segment_range':,1,0,0.0,302
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_trunk_network_profile_segment_range_fail(self):,1,0,0.0,303
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_vlan_network_profile_multicast_fail(self):,1,0,0.0,304
9869cc1d100ced5f50cf03b557639835c364fbb5,'224.0.0.11-224.0.0.111'}},1,0,0.0,305
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_overlay_network_profile_reservedip_multicast_fail(self):,1,0,0.0,306
9869cc1d100ced5f50cf03b557639835c364fbb5,'224.0.0.100-224.0.1.100'),1,0,0.0,307
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_reservedip_multicast_fail(self):,1,0,0.0,308
9869cc1d100ced5f50cf03b557639835c364fbb5,'224.0.1.0-224.0.1.100'}},1,0,0.0,309
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {'multicast_ip_range':,1,0,0.0,310
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p = self.deserialize(self.fmt, res)",1,0,0.0,311
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_overlay_network_profile_correct_multicast_pass(self):,1,0,0.0,312
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_correct_multicast_pass(self):,1,0,0.0,313
9869cc1d100ced5f50cf03b557639835c364fbb5,'224.1.1.1-20.0.0.1'),1,0,0.0,314
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_invalid_maxip_multicast_fail(self):,1,0,0.0,315
9869cc1d100ced5f50cf03b557639835c364fbb5,'10.0.0.1-224.1.1.3'),1,0,0.0,316
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_overlay_network_profile_invalid_minip_multicast_fail(self):,1,0,0.0,317
9869cc1d100ced5f50cf03b557639835c364fbb5,"""dhcp_pp"": {""properties"": {""name"": ""dhcp_pp"",",1,0,0.0,318
9869cc1d100ced5f50cf03b557639835c364fbb5,self._populate_policy_profiles(),1,0,0.0,319
9869cc1d100ced5f50cf03b557639835c364fbb5,"""havana_pp"": {""properties"": {""name"": ""havana_pp"",",1,0,0.0,320
9869cc1d100ced5f50cf03b557639835c364fbb5,"self).create_network_profile(context,",1,0,0.0,321
9869cc1d100ced5f50cf03b557639835c364fbb5,self._replace_fake_tenant_id_with_real(context),1,0,0.0,322
9869cc1d100ced5f50cf03b557639835c364fbb5,the previously stored fake tenant-id in tenant-profile bindings.,1,0,0.0,323
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile, we retrieve the admin tenant-id which we use to replace",1,0,0.0,324
9869cc1d100ced5f50cf03b557639835c364fbb5,belonging to one type (VLAN or Overlay). On creation of network,1,0,0.0,325
9869cc1d100ced5f50cf03b557639835c364fbb5,"Create a network profile, which represents a pool of networks",1,0,0.0,326
9869cc1d100ced5f50cf03b557639835c364fbb5,Create a network profile.,1,0,0.0,327
9869cc1d100ced5f50cf03b557639835c364fbb5,"def create_network_profile(self, context, network_profile):",1,0,0.0,328
9869cc1d100ced5f50cf03b557639835c364fbb5,"return [self._fields(subnet, fields) for subnet in subnets]",1,0,0.0,329
9869cc1d100ced5f50cf03b557639835c364fbb5,"filters,",1,0,0.0,330
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnets = super(N1kvNeutronPluginV2, self).get_subnets(context,",1,0,0.0,331
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Get subnets"")",1,0,0.0,332
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: list of dictionaries of subnets,1,0,0.0,333
9869cc1d100ced5f50cf03b557639835c364fbb5,subnet object. Values in this dictiontary are an,1,0,0.0,334
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve a list of subnets.,1,0,0.0,335
9869cc1d100ced5f50cf03b557639835c364fbb5,"def get_subnets(self, context, filters=None, fields=None):",1,0,0.0,336
9869cc1d100ced5f50cf03b557639835c364fbb5,"return self._fields(subnet, fields)",1,0,0.0,337
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnet = super(N1kvNeutronPluginV2, self).get_subnet(context, id,",1,0,0.0,338
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Get subnet: %s"", id)",1,0,0.0,339
9869cc1d100ced5f50cf03b557639835c364fbb5,:params fields: a list of strings that are valid keys in a subnet,1,0,0.0,340
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p = super(N1kvNeutronPluginV2,",1,0,0.0,341
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profile),1,0,0.0,342
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve a subnet.,1,0,0.0,343
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_create_logical_network_request(net_p,",1,0,0.0,344
9869cc1d100ced5f50cf03b557639835c364fbb5,#,1,0,0.0,345
9869cc1d100ced5f50cf03b557639835c364fbb5,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,346
9869cc1d100ced5f50cf03b557639835c364fbb5,self._send_update_network_profile_request(net_p),1,0,0.0,347
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profile)),1,0,0.0,348
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_profile_id,",1,0,0.0,349
9869cc1d100ced5f50cf03b557639835c364fbb5,"update_network_profile(context,",1,0,0.0,350
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p = (super(N1kvNeutronPluginV2, self).",1,0,0.0,351
9869cc1d100ced5f50cf03b557639835c364fbb5,:param net_profile_id: UUID of the network profile to update,1,0,0.0,352
9869cc1d100ced5f50cf03b557639835c364fbb5,Update a network profile.,1,0,0.0,353
9869cc1d100ced5f50cf03b557639835c364fbb5,"def update_network_profile(self, context, net_profile_id, network_profile):",1,0,0.0,354
9869cc1d100ced5f50cf03b557639835c364fbb5,self._send_delete_network_profile_request(net_p),1,0,0.0,355
9869cc1d100ced5f50cf03b557639835c364fbb5,"self).delete_network_profile(context, id)",1,0,0.0,356
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID of the network profile to delete,1,0,0.0,357
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete a network profile.,1,0,0.0,358
9869cc1d100ced5f50cf03b557639835c364fbb5,"def delete_network_profile(self, context, id):",1,0,0.0,359
9869cc1d100ced5f50cf03b557639835c364fbb5,return net_p,1,0,0.0,360
9869cc1d100ced5f50cf03b557639835c364fbb5,self._send_delete_logical_network_request(net_p),1,0,0.0,361
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_create_network_profile_request(context, net_p)",1,0,0.0,362
9869cc1d100ced5f50cf03b557639835c364fbb5,"self).delete_network_profile(context, net_p['id'])",1,0,0.0,363
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing subnet to retrieve,1,0,0.0,364
9869cc1d100ced5f50cf03b557639835c364fbb5,"def get_subnet(self, context, id, fields=None):",1,0,0.0,365
9869cc1d100ced5f50cf03b557639835c364fbb5,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,366
9869cc1d100ced5f50cf03b557639835c364fbb5,Create subnet for a given network.,1,0,0.0,367
9869cc1d100ced5f50cf03b557639835c364fbb5,"return [self._fields(port, fields) for port in ports]",1,0,0.0,368
9869cc1d100ced5f50cf03b557639835c364fbb5,for port in ports:,1,0,0.0,369
9869cc1d100ced5f50cf03b557639835c364fbb5,"ports = super(N1kvNeutronPluginV2, self).get_ports(context, filters,",1,0,0.0,370
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Get ports"")",1,0,0.0,371
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: list of port dictionaries,1,0,0.0,372
9869cc1d100ced5f50cf03b557639835c364fbb5,:params fields: a list of strings that are valid keys in a port,1,0,0.0,373
9869cc1d100ced5f50cf03b557639835c364fbb5,port object. Values in this dictiontary are an,1,0,0.0,374
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve a list of ports.,1,0,0.0,375
9869cc1d100ced5f50cf03b557639835c364fbb5,"def get_ports(self, context, filters=None, fields=None):",1,0,0.0,376
9869cc1d100ced5f50cf03b557639835c364fbb5,"return self._fields(port, fields)",1,0,0.0,377
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_port_dict_profile(context, port)",1,0,0.0,378
9869cc1d100ced5f50cf03b557639835c364fbb5,"port = super(N1kvNeutronPluginV2, self).get_port(context, id, None)",1,0,0.0,379
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Get port: %s"", id)",1,0,0.0,380
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: port dictionary,1,0,0.0,381
9869cc1d100ced5f50cf03b557639835c364fbb5,:param fields: a list of strings that are valid keys in a port,1,0,0.0,382
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing the port to retrieve,1,0,0.0,383
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve a port.,1,0,0.0,384
9869cc1d100ced5f50cf03b557639835c364fbb5,"def get_port(self, context, id, fields=None):",1,0,0.0,385
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(N1kvNeutronPluginV2, self).delete_port(context, port['id'])",1,0,0.0,386
9869cc1d100ced5f50cf03b557639835c364fbb5,"def create_subnet(self, context, subnet):",1,0,0.0,387
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.debug('Create subnet'),1,0,0.0,388
9869cc1d100ced5f50cf03b557639835c364fbb5,"return super(N1kvNeutronPluginV2, self).delete_subnet(context, id)",1,0,0.0,389
9869cc1d100ced5f50cf03b557639835c364fbb5,"sub = super(N1kvNeutronPluginV2, self).create_subnet(context, subnet)",1,0,0.0,390
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_delete_subnet_request(context, subnet)",1,0,0.0,391
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnet = self.get_subnet(context, id)",1,0,0.0,392
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('Delete subnet: %s', id)",1,0,0.0,393
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing subnet to delete,1,0,0.0,394
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete a subnet.,1,0,0.0,395
9869cc1d100ced5f50cf03b557639835c364fbb5,"def delete_subnet(self, context, id):",1,0,0.0,396
9869cc1d100ced5f50cf03b557639835c364fbb5,self._send_update_subnet_request(sub),1,0,0.0,397
9869cc1d100ced5f50cf03b557639835c364fbb5,subnet),1,0,0.0,398
9869cc1d100ced5f50cf03b557639835c364fbb5,"id,",1,0,0.0,399
9869cc1d100ced5f50cf03b557639835c364fbb5,"sub = super(N1kvNeutronPluginV2, self).update_subnet(context,",1,0,0.0,400
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.debug('Update subnet'),1,0,0.0,401
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing subnet to update,1,0,0.0,402
9869cc1d100ced5f50cf03b557639835c364fbb5,Update a subnet.,1,0,0.0,403
9869cc1d100ced5f50cf03b557639835c364fbb5,"def update_subnet(self, context, id, subnet):",1,0,0.0,404
9869cc1d100ced5f50cf03b557639835c364fbb5,return sub,1,0,0.0,405
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Created subnet: %s"", sub['id'])",1,0,0.0,406
9869cc1d100ced5f50cf03b557639835c364fbb5,"self).delete_subnet(context, sub['id'])",1,0,0.0,407
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(N1kvNeutronPluginV2,",1,0,0.0,408
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_create_subnet_request(context, sub)",1,0,0.0,409
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,410
9869cc1d100ced5f50cf03b557639835c364fbb5,#    a copy of the License at,1,0,0.0,411
9869cc1d100ced5f50cf03b557639835c364fbb5,"""id"": ""some-uuid-1""}},",1,0,0.0,412
9869cc1d100ced5f50cf03b557639835c364fbb5,profile['sub_type'] = 'unicast',1,0,0.0,413
9869cc1d100ced5f50cf03b557639835c364fbb5,'segment_range': segment_range},1,0,0.0,414
9869cc1d100ced5f50cf03b557639835c364fbb5,"'tenant_id': self.tenant_id,",1,0,0.0,415
9869cc1d100ced5f50cf03b557639835c364fbb5,"'segment_type': segment_type,",1,0,0.0,416
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile = {'name': name,",1,0,0.0,417
9869cc1d100ced5f50cf03b557639835c364fbb5,db_session = db.get_session(),1,0,0.0,418
9869cc1d100ced5f50cf03b557639835c364fbb5,profile.,1,0,0.0,419
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment_range: string representing the segment range for network,1,0,0.0,420
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment_type: string representing the type of network segment.,1,0,0.0,421
9869cc1d100ced5f50cf03b557639835c364fbb5,:param name: string representing the name of the network profile to,1,0,0.0,422
9869cc1d100ced5f50cf03b557639835c364fbb5,Create a profile record for testing purposes.,1,0,0.0,423
9869cc1d100ced5f50cf03b557639835c364fbb5,segment_range='386-400'):,1,0,0.0,424
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment_type=c_const.NETWORK_TYPE_VLAN,",1,0,0.0,425
9869cc1d100ced5f50cf03b557639835c364fbb5,"name='default_network_profile',",1,0,0.0,426
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _make_test_profile(self,",1,0,0.0,427
9869cc1d100ced5f50cf03b557639835c364fbb5,return n1kv_db_v2.create_policy_profile(profile),1,0,0.0,428
9869cc1d100ced5f50cf03b557639835c364fbb5,'name': name},1,0,0.0,429
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile = {'id': uuid,",1,0,0.0,430
9869cc1d100ced5f50cf03b557639835c364fbb5,uuid = test_base._uuid(),1,0,0.0,431
9869cc1d100ced5f50cf03b557639835c364fbb5,default name specified in config.py file.,1,0,0.0,432
9869cc1d100ced5f50cf03b557639835c364fbb5,if segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,433
9869cc1d100ced5f50cf03b557639835c364fbb5,profile['multicast_ip_range'] = '0.0.0.0',1,0,0.0,434
9869cc1d100ced5f50cf03b557639835c364fbb5,:param name: string representing the name of the policy profile to,1,0,0.0,435
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p = n1kv_db_v2.create_network_profile(db_session, profile)",1,0,0.0,436
9869cc1d100ced5f50cf03b557639835c364fbb5,"""icehouse-pp"": {""properties"": {""name"": ""icehouse-pp"",",1,0,0.0,437
9869cc1d100ced5f50cf03b557639835c364fbb5,self.DEFAULT_RESP_BODY = {,1,0,0.0,438
9869cc1d100ced5f50cf03b557639835c364fbb5,if not self.DEFAULT_RESP_BODY:,1,0,0.0,439
9869cc1d100ced5f50cf03b557639835c364fbb5,"a value already, it will not be overwritten by this code.",1,0,0.0,440
9869cc1d100ced5f50cf03b557639835c364fbb5,setUp() of the super-function (this one here). If you have set,1,0,0.0,441
9869cc1d100ced5f50cf03b557639835c364fbb5,and set your DEFAULT_RESPONSE value also BEFORE calling the,1,0,0.0,442
9869cc1d100ced5f50cf03b557639835c364fbb5,This default here works for many cases. If you need something,1,0,0.0,443
9869cc1d100ced5f50cf03b557639835c364fbb5,of the super-class is called.,1,0,0.0,444
9869cc1d100ced5f50cf03b557639835c364fbb5,our requests. This needs to be done BEFORE the setUp() function,1,0,0.0,445
9869cc1d100ced5f50cf03b557639835c364fbb5,"def setUp(self, ext_mgr=NetworkProfileTestExtensionManager()):",1,0,0.0,446
9869cc1d100ced5f50cf03b557639835c364fbb5,return net_p,1,0,0.0,447
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.create_profile_binding(db_session, TENANT_TEST,",1,0,0.0,448
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.create_profile_binding(db_session, TENANT_NOT_ADMIN,",1,0,0.0,449
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p['id'], c_const.NETWORK)",1,0,0.0,450
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.create_profile_binding(db_session, self.tenant_id,",1,0,0.0,451
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.sync_vlan_allocations(db_session, net_p)",1,0,0.0,452
9869cc1d100ced5f50cf03b557639835c364fbb5,profile['physical_network'] = PHYS_NET,1,0,0.0,453
9869cc1d100ced5f50cf03b557639835c364fbb5,elif segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,454
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.sync_vxlan_allocations(db_session, net_p)",1,0,0.0,455
9869cc1d100ced5f50cf03b557639835c364fbb5,create. Default argument value chosen to correspond to the,1,0,0.0,456
9869cc1d100ced5f50cf03b557639835c364fbb5,Create a policy profile record for testing purpose.,1,0,0.0,457
9869cc1d100ced5f50cf03b557639835c364fbb5,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,458
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Fake establish Communication with Cisco Nexus1000V VSM.""""""",1,0,0.0,459
9869cc1d100ced5f50cf03b557639835c364fbb5,return self.buffer,1,0,0.0,460
9869cc1d100ced5f50cf03b557639835c364fbb5,"def json(self, *args, **kwargs):",1,0,0.0,461
9869cc1d100ced5f50cf03b557639835c364fbb5,self.headers = headers,1,0,0.0,462
9869cc1d100ced5f50cf03b557639835c364fbb5,self.status_code = status,1,0,0.0,463
9869cc1d100ced5f50cf03b557639835c364fbb5,self.buffer = response_text,1,0,0.0,464
9869cc1d100ced5f50cf03b557639835c364fbb5,"def __init__(self, status, response_text, headers):",1,0,0.0,465
9869cc1d100ced5f50cf03b557639835c364fbb5,return.,1,0,0.0,466
9869cc1d100ced5f50cf03b557639835c364fbb5,"Initialize it with the status code, header and buffer contents you wish to",1,0,0.0,467
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""",1,0,0.0,468
9869cc1d100ced5f50cf03b557639835c364fbb5,TENANT_TEST = 'test',1,0,0.0,469
9869cc1d100ced5f50cf03b557639835c364fbb5,TENANT_NOT_ADMIN = 'not_admin',1,0,0.0,470
9869cc1d100ced5f50cf03b557639835c364fbb5,VLAN_MAX = 110,1,0,0.0,471
9869cc1d100ced5f50cf03b557639835c364fbb5,VLAN_MIN = 100,1,0,0.0,472
9869cc1d100ced5f50cf03b557639835c364fbb5,PHYS_NET = 'some-phys-net',1,0,0.0,473
9869cc1d100ced5f50cf03b557639835c364fbb5,#    under the License.,1,0,0.0,474
9869cc1d100ced5f50cf03b557639835c364fbb5,#    License for the specific language governing permissions and limitations,1,0,0.0,475
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,476
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,0,0.0,477
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,478
9869cc1d100ced5f50cf03b557639835c364fbb5,def _fake_setup_vsm(self):,1,0,0.0,479
9869cc1d100ced5f50cf03b557639835c364fbb5,self.agent_vsm = True,1,0,0.0,480
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _make_test_policy_profile(self, name='service_profile'):",1,0,0.0,481
9869cc1d100ced5f50cf03b557639835c364fbb5,net_p = self.test_create_network_profile_multi_tenants(),1,0,0.0,482
9869cc1d100ced5f50cf03b557639835c364fbb5,"fmt = ""json""",1,0,0.0,483
9869cc1d100ced5f50cf03b557639835c364fbb5,"DEFAULT_CONTENT_TYPE = """"",1,0,0.0,484
9869cc1d100ced5f50cf03b557639835c364fbb5,DEFAULT_RESP_CODE = 200,1,0,0.0,485
9869cc1d100ced5f50cf03b557639835c364fbb5,"DEFAULT_RESP_BODY = """"",1,0,0.0,486
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant_id = ""some_tenant""",1,0,0.0,487
9869cc1d100ced5f50cf03b557639835c364fbb5,'n1kv_neutron_plugin.N1kvNeutronPluginV2'),1,0,0.0,488
9869cc1d100ced5f50cf03b557639835c364fbb5,_plugin_name = ('neutron.plugins.cisco.n1kv.',1,0,0.0,489
9869cc1d100ced5f50cf03b557639835c364fbb5,return policy_profile.Policy_profile.get_resources(),1,0,0.0,490
9869cc1d100ced5f50cf03b557639835c364fbb5,policy_profile.RESOURCE_ATTRIBUTE_MAP),1,0,0.0,491
9869cc1d100ced5f50cf03b557639835c364fbb5,def get_request_extensions(self):,1,0,0.0,492
9869cc1d100ced5f50cf03b557639835c364fbb5,return [],1,0,0.0,493
9869cc1d100ced5f50cf03b557639835c364fbb5,def get_actions(self):,1,0,0.0,494
9869cc1d100ced5f50cf03b557639835c364fbb5,return network_profile.Network_profile.get_resources(),1,0,0.0,495
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profile.RESOURCE_ATTRIBUTE_MAP),1,0,0.0,496
9869cc1d100ced5f50cf03b557639835c364fbb5,attributes.RESOURCE_ATTRIBUTE_MAP.update(,1,0,0.0,497
9869cc1d100ced5f50cf03b557639835c364fbb5,# the global attribute map,1,0,0.0,498
9869cc1d100ced5f50cf03b557639835c364fbb5,# This is done here as the setup process won't,1,0,0.0,499
9869cc1d100ced5f50cf03b557639835c364fbb5,# Add the resources to the global attribute map,1,0,0.0,500
9869cc1d100ced5f50cf03b557639835c364fbb5,def get_resources(self):,1,0,0.0,501
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_profile_multi_tenants(self):,1,0,0.0,502
9869cc1d100ced5f50cf03b557639835c364fbb5,port_req.get_response(self.api)),1,0,0.0,503
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network_profile': {c_const.ADD_TENANTS:,1,0,0.0,504
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_set_not_shared_multi_tenants2_returns_409(self):,1,0,0.0,505
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_delete_request('networks', net_id)",1,0,0.0,506
9869cc1d100ced5f50cf03b557639835c364fbb5,net_id = subnet['subnet']['network_id'],1,0,0.0,507
9869cc1d100ced5f50cf03b557639835c364fbb5,with self.subnet() as subnet:,1,0,0.0,508
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Network deletion fails when a subnet is present on the network.""""""",1,0,0.0,509
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_delete_network_with_subnet(self):,1,0,0.0,510
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, webob.exc.HTTPNoContent.code)",1,0,0.0,511
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_delete_request('networks', network['network']['id'])",1,0,0.0,512
9869cc1d100ced5f50cf03b557639835c364fbb5,"network = self.deserialize(self.fmt, res)",1,0,0.0,513
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_network(self.fmt, name='net', admin_state_up=True)",1,0,0.0,514
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_delete_network(self):,1,0,0.0,515
9869cc1d100ced5f50cf03b557639835c364fbb5,10000).allocated),1,0,0.0,516
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertFalse(n1kv_db_v2.get_vxlan_allocation(db_session,",1,0,0.0,517
9869cc1d100ced5f50cf03b557639835c364fbb5,'10000-10001'),1,0,0.0,518
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,519
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_obj = self._make_test_profile('test_np',",1,0,0.0,520
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test overlay segment deallocation on network create failure.""""""",1,0,0.0,521
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_rollback_deallocate_overlay_segment(self):,1,0,0.0,522
9869cc1d100ced5f50cf03b557639835c364fbb5,20).allocated),1,0,0.0,523
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.new_create_request('networks', data)",1,0,0.0,524
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, webob.exc.HTTPBadRequest.code)",1,0,0.0,525
9869cc1d100ced5f50cf03b557639835c364fbb5,"Verifies that updating a network which cannot be shared,",1,0,0.0,526
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_obj = self._make_test_profile(name='test_profile',",1,0,0.0,527
9869cc1d100ced5f50cf03b557639835c364fbb5,returns a conflict error.,1,0,0.0,528
9869cc1d100ced5f50cf03b557639835c364fbb5,'test_create_subnets_bulk_emulated_plugin_failure'),1,0,0.0,529
9869cc1d100ced5f50cf03b557639835c364fbb5,"'test_create_subnets_bulk_emulated',",1,0,0.0,530
9869cc1d100ced5f50cf03b557639835c364fbb5,"'test_delete_network',",1,0,0.0,531
9869cc1d100ced5f50cf03b557639835c364fbb5,_unsupported = (,1,0,0.0,532
9869cc1d100ced5f50cf03b557639835c364fbb5,webob.exc.HTTPCreated.code),1,0,0.0,533
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_port(self.fmt, net_id,",1,0,0.0,534
9869cc1d100ced5f50cf03b557639835c364fbb5,net_id = network['network']['id'],1,0,0.0,535
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_network(self.fmt, name='net1', admin_state_up=True)",1,0,0.0,536
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Verify that a network with a port attached cannot be removed.""""""",1,0,0.0,537
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_delete_network_if_port_exists(self):,1,0,0.0,538
9869cc1d100ced5f50cf03b557639835c364fbb5,"port = self.deserialize(self.fmt, res)",1,0,0.0,539
9869cc1d100ced5f50cf03b557639835c364fbb5,webob.exc.HTTPConflict.code),1,0,0.0,540
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(req.get_response(self.api).status_int,",1,0,0.0,541
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_update_request('networks', data,",1,0,0.0,542
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network': {'shared': False}},1,0,0.0,543
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant_id='somebody_else',",1,0,0.0,544
9869cc1d100ced5f50cf03b557639835c364fbb5,"webob.exc.HTTPCreated.code,",1,0,0.0,545
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_port(self.fmt, network['network']['id'],",1,0,0.0,546
9869cc1d100ced5f50cf03b557639835c364fbb5,with self.network(shared=True) as network:,1,0,0.0,547
9869cc1d100ced5f50cf03b557639835c364fbb5,segment_range='20-23'),1,0,0.0,548
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test vlan segment deallocation on network create failure.""""""",1,0,0.0,549
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(TestN1kvSubnets, self).setUp()",1,0,0.0,550
9869cc1d100ced5f50cf03b557639835c364fbb5,"return {'network': {'name': 'net1',",1,0,0.0,551
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertIn('tenant_id', body['networks'][0])",1,0,0.0,552
9869cc1d100ced5f50cf03b557639835c364fbb5,"body = self.deserialize('json', res)",1,0,0.0,553
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, 200)",1,0,0.0,554
9869cc1d100ced5f50cf03b557639835c364fbb5,res = req.get_response(self.api),1,0,0.0,555
9869cc1d100ced5f50cf03b557639835c364fbb5,"req.environ['neutron.context'] = context.Context('', self.tenant_id)",1,0,0.0,556
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_list_request('networks', params=""fields=tenant_id"")",1,0,0.0,557
9869cc1d100ced5f50cf03b557639835c364fbb5,set_context=True),1,0,0.0,558
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant_id=self.tenant_id,",1,0,0.0,559
9869cc1d100ced5f50cf03b557639835c364fbb5,"True,",1,0,0.0,560
9869cc1d100ced5f50cf03b557639835c364fbb5,"'some_net',",1,0,0.0,561
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._make_network('json',",1,0,0.0,562
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_plugin(self):,1,0,0.0,563
9869cc1d100ced5f50cf03b557639835c364fbb5,"""name"")",1,0,0.0,564
9869cc1d100ced5f50cf03b557639835c364fbb5,"instance._get_policy_profile_by_name,",1,0,0.0,565
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertRaises(c_exc.PolicyProfileNameNotFound,",1,0,0.0,566
9869cc1d100ced5f50cf03b557639835c364fbb5,profile['id']),1,0,0.0,567
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual('00000000-0000-0000-0000-000000000001',",1,0,0.0,568
9869cc1d100ced5f50cf03b557639835c364fbb5,profile = instance._get_policy_profile_by_name('pp-1'),1,0,0.0,569
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_get_policy_profiles_by_name(self):,1,0,0.0,570
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _prepare_net_data(self, net_profile_id):",1,0,0.0,571
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv.PROFILE_ID: net_profile_id,",1,0,0.0,572
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_rollback_deallocate_vlan_segment(self):,1,0,0.0,573
9869cc1d100ced5f50cf03b557639835c364fbb5,'tenant_id': self.tenant_id}},1,0,0.0,574
9869cc1d100ced5f50cf03b557639835c364fbb5,# Network update should fail to update network profile id.,1,0,0.0,575
9869cc1d100ced5f50cf03b557639835c364fbb5,res = network_req.get_response(self.api),1,0,0.0,576
9869cc1d100ced5f50cf03b557639835c364fbb5,"network_req = self.new_update_request('networks',",1,0,0.0,577
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'network': {n1kv.PROFILE_ID: 'some-profile-uuid'}},1,0,0.0,578
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test network update failure while updating network profile id.""""""",1,0,0.0,579
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_network_with_n1kv_network_profile_id(self):,1,0,0.0,580
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(network['network'][n1kv.PROFILE_ID],",1,0,0.0,581
9869cc1d100ced5f50cf03b557639835c364fbb5,network_req.get_response(self.api)),1,0,0.0,582
9869cc1d100ced5f50cf03b557639835c364fbb5,"network = self.deserialize(self.fmt,",1,0,0.0,583
9869cc1d100ced5f50cf03b557639835c364fbb5,"network_req = self.new_create_request('networks', data)",1,0,0.0,584
9869cc1d100ced5f50cf03b557639835c364fbb5,data = self._prepare_net_data(profile_obj.id),1,0,0.0,585
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_obj = self._make_test_profile(name='test_profile'),1,0,0.0,586
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test network create with network profile id.""""""",1,0,0.0,587
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_with_n1kv_network_profile_id(self):,1,0,0.0,588
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(np['name'], 'default_network_profile')",1,0,0.0,589
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, network['network'][n1kv.PROFILE_ID])",1,0,0.0,590
9869cc1d100ced5f50cf03b557639835c364fbb5,np = n1kv_db_v2.get_network_profile(,1,0,0.0,591
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test network create without passing network profile id.""""""",1,0,0.0,592
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_network_with_default_n1kv_network_profile_id(self):,1,0,0.0,593
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.skipTest(""Unsupported test"")",1,0,0.0,594
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_port_prevents_network_deletion(self):,1,0,0.0,595
9869cc1d100ced5f50cf03b557639835c364fbb5,# Request the list using non-admin and verify it returns no data,1,0,0.0,596
9869cc1d100ced5f50cf03b557639835c364fbb5,"'subnet_id': subnet1['subnet']['id']}, ips)",1,0,0.0,597
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(len(ips), 2)",1,0,0.0,598
9869cc1d100ced5f50cf03b557639835c364fbb5,ips = port3['port']['fixed_ips'],1,0,0.0,599
9869cc1d100ced5f50cf03b557639835c364fbb5,"port3 = self.deserialize(self.fmt, res)",1,0,0.0,600
9869cc1d100ced5f50cf03b557639835c364fbb5,{'subnet_id': subnet2['subnet']['id']}]},1,0,0.0,601
9869cc1d100ced5f50cf03b557639835c364fbb5,"kwargs = {""fixed_ips"": [{'subnet_id': subnet1['subnet']['id']},",1,0,0.0,602
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnet2 = self.deserialize(self.fmt, res)",1,0,0.0,603
9869cc1d100ced5f50cf03b557639835c364fbb5,"ip_version=6,",1,0,0.0,604
9869cc1d100ced5f50cf03b557639835c364fbb5,"cidr='2607:f0d0:1002:51::/124',",1,0,0.0,605
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_id=net_id,",1,0,0.0,606
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnet1 = self.deserialize(self.fmt, res)",1,0,0.0,607
9869cc1d100ced5f50cf03b557639835c364fbb5,gateway_ip=attributes.ATTR_NOT_SPECIFIED),1,0,0.0,608
9869cc1d100ced5f50cf03b557639835c364fbb5,"ip_version=4,",1,0,0.0,609
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_id=net_id, cidr='10.0.0.0/24',",1,0,0.0,610
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_subnet(self.fmt, tenant_id='tenant1',",1,0,0.0,611
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_requested_subnet_id_v4_and_v6(self):,1,0,0.0,612
9869cc1d100ced5f50cf03b557639835c364fbb5,'ip_address': '10.0.0.1'}]},1,0,0.0,613
9869cc1d100ced5f50cf03b557639835c364fbb5,# Check when fixed IP is gateway,1,0,0.0,614
9869cc1d100ced5f50cf03b557639835c364fbb5,# delete the port,1,0,0.0,615
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, webob.exc.HTTPCreated.code)",1,0,0.0,616
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertIn({'ip_address': '10.0.0.2',",1,0,0.0,617
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertIn({'ip_address': '2607:f0d0:1002:51::2',",1,0,0.0,618
9869cc1d100ced5f50cf03b557639835c364fbb5,'ip_address': '10.0.0.10'}]},1,0,0.0,619
9869cc1d100ced5f50cf03b557639835c364fbb5,"'subnet_id': subnet2['subnet']['id']}, ips)",1,0,0.0,620
9869cc1d100ced5f50cf03b557639835c364fbb5,"test_l3_agent_scheduler.L3SchedulerTestCaseMixin,",1,0,0.0,621
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(1, mock_method.call_count)",1,0,0.0,622
9869cc1d100ced5f50cf03b557639835c364fbb5,with self.subnet():,1,0,0.0,623
9869cc1d100ced5f50cf03b557639835c364fbb5,# Subnet creation should trigger scheduling for networks,1,0,0.0,624
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_conf.CONF.set_override('network_auto_schedule', False)",1,0,0.0,625
9869cc1d100ced5f50cf03b557639835c364fbb5,'schedule_network') as mock_method:,1,0,0.0,626
9869cc1d100ced5f50cf03b557639835c364fbb5,"with mock.patch.object(n1kv_neutron_plugin.N1kvNeutronPluginV2,",1,0,0.0,627
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test invocation of explicit scheduling for networks.""""""",1,0,0.0,628
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_schedule_network_with_subnet_create(self):,1,0,0.0,629
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_delete_request('subnets', subnet2['subnet']['id'])",1,0,0.0,630
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_delete_request('subnets', subnet1['subnet']['id'])",1,0,0.0,631
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete('ports', port4['port']['id'])",1,0,0.0,632
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete('ports', port3['port']['id'])",1,0,0.0,633
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertIn({'ip_address': '2607:f0d0:1002:51::3',",1,0,0.0,634
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertIn({'ip_address': '10.0.0.3',",1,0,0.0,635
9869cc1d100ced5f50cf03b557639835c364fbb5,ips = port4['port']['fixed_ips'],1,0,0.0,636
9869cc1d100ced5f50cf03b557639835c364fbb5,# Check that a v4 and a v6 address are allocated,1,0,0.0,637
9869cc1d100ced5f50cf03b557639835c364fbb5,"port4 = self.deserialize(self.fmt, res)",1,0,0.0,638
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_port(self.fmt, net_id=net_id)",1,0,0.0,639
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._create_port(self.fmt, net_id=net_id, **kwargs)",1,0,0.0,640
9869cc1d100ced5f50cf03b557639835c364fbb5,"kwargs = {""fixed_ips"": [{'subnet_id': subnet['subnet']['id'],",1,0,0.0,641
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.skipTest(""plugin does not return standard conflict code"")",1,0,0.0,642
9869cc1d100ced5f50cf03b557639835c364fbb5,'nexthop': '10.0.2.3'}],1,0,0.0,643
9869cc1d100ced5f50cf03b557639835c364fbb5,"'nexthop': '10.0.2.2'},",1,0,0.0,644
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnet = self.deserialize(self.fmt, req.get_response(self.api))",1,0,0.0,645
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_create_request('subnets', data)",1,0,0.0,646
9869cc1d100ced5f50cf03b557639835c364fbb5,'tenant_id': network['network']['tenant_id']}},1,0,0.0,647
9869cc1d100ced5f50cf03b557639835c364fbb5,"'host_routes': host_routes,",1,0,0.0,648
9869cc1d100ced5f50cf03b557639835c364fbb5,"'dns_nameservers': ['192.168.0.1'],",1,0,0.0,649
9869cc1d100ced5f50cf03b557639835c364fbb5,"'ip_version': 4,",1,0,0.0,650
9869cc1d100ced5f50cf03b557639835c364fbb5,"'cidr': '10.0.2.0/24',",1,0,0.0,651
9869cc1d100ced5f50cf03b557639835c364fbb5,'nexthop': '10.0.2.2'}],1,0,0.0,652
9869cc1d100ced5f50cf03b557639835c364fbb5,"host_routes = [{'destination': '172.16.0.0/24',",1,0,0.0,653
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_subnet_adding_additional_host_routes_and_dns(self):,1,0,0.0,654
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(subnet_resp.status_int, 400)",1,0,0.0,655
9869cc1d100ced5f50cf03b557639835c364fbb5,# Subnet creation should fail due to invalid network name,1,0,0.0,656
9869cc1d100ced5f50cf03b557639835c364fbb5,subnet_resp = subnet_req.get_response(self.api),1,0,0.0,657
9869cc1d100ced5f50cf03b557639835c364fbb5,"subnet_req = self.new_create_request('subnets', data)",1,0,0.0,658
9869cc1d100ced5f50cf03b557639835c364fbb5,"'cidr': ""10.0.0.0/24""}}",1,0,0.0,659
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'subnet': {'network_id': network['network']['id'],",1,0,0.0,660
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test subnet creation with invalid parameters sent to the VSM""""""",1,0,0.0,661
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_subnet_with_invalid_parameters(self):,1,0,0.0,662
9869cc1d100ced5f50cf03b557639835c364fbb5,"{'destination': '192.168.0.0/24',",1,0,0.0,663
9869cc1d100ced5f50cf03b557639835c364fbb5,"dns_nameservers = ['192.168.0.1', '192.168.0.2']",1,0,0.0,664
9869cc1d100ced5f50cf03b557639835c364fbb5,# Check fixed IP not in allocation range,1,0,0.0,665
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'subnet': {'host_routes': host_routes,",1,0,0.0,666
9869cc1d100ced5f50cf03b557639835c364fbb5,'end': '10.0.0.120'}]}},1,0,0.0,667
9869cc1d100ced5f50cf03b557639835c364fbb5,"'allocation_pools': [{'start': '10.0.0.100',",1,0,0.0,668
9869cc1d100ced5f50cf03b557639835c364fbb5,"'tenant_id': network['network']['tenant_id'],",1,0,0.0,669
9869cc1d100ced5f50cf03b557639835c364fbb5,"'gateway_ip': '10.0.0.1',",1,0,0.0,670
9869cc1d100ced5f50cf03b557639835c364fbb5,"'cidr': '10.0.0.0/24',",1,0,0.0,671
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'subnet': {'network_id': net_id,",1,0,0.0,672
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_subnet_with_allocation_range(self):,1,0,0.0,673
9869cc1d100ced5f50cf03b557639835c364fbb5,webob.exc.HTTPNoContent.code),1,0,0.0,674
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_delete_request('subnets', subnet['subnet']['id'])",1,0,0.0,675
9869cc1d100ced5f50cf03b557639835c364fbb5,# In N1K we need to delete the subnet before the network,1,0,0.0,676
9869cc1d100ced5f50cf03b557639835c364fbb5,sorted(dns_nameservers)),1,0,0.0,677
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(sorted(subnet['subnet']['dns_nameservers']),",1,0,0.0,678
9869cc1d100ced5f50cf03b557639835c364fbb5,"sorted(host_routes, key=utils.safe_sort_key))",1,0,0.0,679
9869cc1d100ced5f50cf03b557639835c364fbb5,"key=utils.safe_sort_key),",1,0,0.0,680
9869cc1d100ced5f50cf03b557639835c364fbb5,"sorted(subnet['subnet']['host_routes'],",1,0,0.0,681
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertEqual(,1,0,0.0,682
9869cc1d100ced5f50cf03b557639835c364fbb5,subnet['subnet']['id']),1,0,0.0,683
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_update_request('subnets', data,",1,0,0.0,684
9869cc1d100ced5f50cf03b557639835c364fbb5,'dns_nameservers': dns_nameservers}},1,0,0.0,685
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._test_get_policy_profiles(expected_profiles=[], admin=False)",1,0,0.0,686
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_conf.CONF.set_override('restrict_policy_profiles', True,",1,0,0.0,687
9869cc1d100ced5f50cf03b557639835c364fbb5,"['tenant1', 'tenant3']}}",1,0,0.0,688
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_obj.id),1,0,0.0,689
9869cc1d100ced5f50cf03b557639835c364fbb5,if vm_network['port_count'] == 0:,1,0,0.0,690
9869cc1d100ced5f50cf03b557639835c364fbb5,"port = self.deserialize(self.fmt,",1,0,0.0,691
9869cc1d100ced5f50cf03b557639835c364fbb5,"port_req = self.new_create_request('ports', data)",1,0,0.0,692
9869cc1d100ced5f50cf03b557639835c364fbb5,'network_id': network['network']['id']}},1,0,0.0,693
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'port': {n1kv.PROFILE_ID: profile_obj.id,",1,0,0.0,694
9869cc1d100ced5f50cf03b557639835c364fbb5,with self.network() as network:,1,0,0.0,695
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_obj = self._make_test_policy_profile(name='test_profile'),1,0,0.0,696
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test port create with policy profile id.""""""",1,0,0.0,697
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_port_with_n1kv_policy_profile_id(self):,1,0,0.0,698
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(pp['name'], 'service_profile')",1,0,0.0,699
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, port['port'][n1kv.PROFILE_ID])",1,0,0.0,700
9869cc1d100ced5f50cf03b557639835c364fbb5,pp = n1kv_db_v2.get_policy_profile(,1,0,0.0,701
9869cc1d100ced5f50cf03b557639835c364fbb5,with self.port() as port:,1,0,0.0,702
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test port create without passing policy profile id.""""""",1,0,0.0,703
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_port_with_default_n1kv_policy_profile_id(self):,1,0,0.0,704
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(TestN1kvPorts, self).setUp()",1,0,0.0,705
9869cc1d100ced5f50cf03b557639835c364fbb5,if self._testMethodName in self._unsupported:,1,0,0.0,706
9869cc1d100ced5f50cf03b557639835c364fbb5,def setUp(self):,1,0,0.0,707
9869cc1d100ced5f50cf03b557639835c364fbb5,'test_requested_subnet_id_v4_and_v6'),1,0,0.0,708
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(port['port'][n1kv.PROFILE_ID],",1,0,0.0,709
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete('ports', port['port']['id'])",1,0,0.0,710
9869cc1d100ced5f50cf03b557639835c364fbb5,HAS_PORT_FILTER = False,1,0,0.0,711
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_update_port_with_n1kv_policy_profile_id(self):,1,0,0.0,712
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_first_port_rollback_vmnetwork(self):,1,0,0.0,713
9869cc1d100ced5f50cf03b557639835c364fbb5,'network_id': port['port']['network_id']}},1,0,0.0,714
9869cc1d100ced5f50cf03b557639835c364fbb5,"'tenant_id': port['port']['tenant_id'],",1,0,0.0,715
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'port': {n1kv.PROFILE_ID: port['port']['n1kv:profile_id'],",1,0,0.0,716
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test parameters for subsequent port create sent to the VSM.""""""",1,0,0.0,717
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_next_port_invalid_parameters_fail(self):,1,0,0.0,718
9869cc1d100ced5f50cf03b557639835c364fbb5,client_patch.stop(),1,0,0.0,719
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(res.status_int, 500)",1,0,0.0,720
9869cc1d100ced5f50cf03b557639835c364fbb5,}},1,0,0.0,721
9869cc1d100ced5f50cf03b557639835c364fbb5,"'network_id': network['network']['id'],",1,0,0.0,722
9869cc1d100ced5f50cf03b557639835c364fbb5,new=fake_client.TestClientInvalidRequest),1,0,0.0,723
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test parameters for first port create sent to the VSM.""""""",1,0,0.0,724
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_first_port_invalid_parameters_fail(self):,1,0,0.0,725
9869cc1d100ced5f50cf03b557639835c364fbb5,# Port update should fail to update policy profile id.,1,0,0.0,726
9869cc1d100ced5f50cf03b557639835c364fbb5,res = port_req.get_response(self.api),1,0,0.0,727
9869cc1d100ced5f50cf03b557639835c364fbb5,port['port']['id']),1,0,0.0,728
9869cc1d100ced5f50cf03b557639835c364fbb5,"port_req = self.new_update_request('ports',",1,0,0.0,729
9869cc1d100ced5f50cf03b557639835c364fbb5,data = {'port': {n1kv.PROFILE_ID: 'some-profile-uuid'}},1,0,0.0,730
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test port update failure while updating policy profile id.""""""",1,0,0.0,731
9869cc1d100ced5f50cf03b557639835c364fbb5,"_unsupported = ('test_delete_network_if_port_exists',",1,0,0.0,732
9869cc1d100ced5f50cf03b557639835c364fbb5,VIF_TYPE = portbindings.VIF_TYPE_OVS,1,0,0.0,733
9869cc1d100ced5f50cf03b557639835c364fbb5,new=fake_client.,1,0,0.0,734
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant_id='tenant1',",1,0,0.0,735
9869cc1d100ced5f50cf03b557639835c364fbb5,'CISCO_N1K'),1,0,0.0,736
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_conf.CONF.set_override('restrict_network_profiles', True,",1,0,0.0,737
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_get_network_profile_restricted(self):,1,0,0.0,738
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(tenant4),1,0,0.0,739
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant4 = n1kv_db_v2.get_profile_binding(db_session, 'tenant4',",1,0,0.0,740
9869cc1d100ced5f50cf03b557639835c364fbb5,['tenant4']}},1,0,0.0,741
9869cc1d100ced5f50cf03b557639835c364fbb5,# are not deleted.,1,0,0.0,742
9869cc1d100ced5f50cf03b557639835c364fbb5,# Add new tenant4 to network profile and make sure existing tenants,1,0,0.0,743
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, 'tenant1',",1,0,0.0,744
9869cc1d100ced5f50cf03b557639835c364fbb5,'tenant1']}},1,0,0.0,745
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'network_profile': {c_const.REMOVE_TENANTS: [self.tenant_id,",1,0,0.0,746
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(tenant3),1,0,0.0,747
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant3 = n1kv_db_v2.get_profile_binding(db_session, 'tenant3',",1,0,0.0,748
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, 'tenant4',",1,0,0.0,749
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.get_profile_binding,",1,0,0.0,750
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertRaises(c_exc.ProfileTenantBindingNotFound,",1,0,0.0,751
9869cc1d100ced5f50cf03b557639835c364fbb5,# current tenant_id should always present,1,0,0.0,752
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(200, update_res.status_int)",1,0,0.0,753
9869cc1d100ced5f50cf03b557639835c364fbb5,"update_req.environ['neutron.context'] = context.Context('',",1,0,0.0,754
9869cc1d100ced5f50cf03b557639835c364fbb5,"ctx1 = context.Context(user_id='admin',",1,0,0.0,755
9869cc1d100ced5f50cf03b557639835c364fbb5,sess1 = db.get_session(),1,0,0.0,756
9869cc1d100ced5f50cf03b557639835c364fbb5,test_bindings.PortBindingsTestCase):,1,0,0.0,757
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.create_profile_binding(sess1, ctx1.tenant_id,",1,0,0.0,758
9869cc1d100ced5f50cf03b557639835c364fbb5,"N1kvPluginTestCase,",1,0,0.0,759
9869cc1d100ced5f50cf03b557639835c364fbb5,N1kvPluginTestCase):,1,0,0.0,760
9869cc1d100ced5f50cf03b557639835c364fbb5,#not bound to tenant of sess2,1,0,0.0,761
9869cc1d100ced5f50cf03b557639835c364fbb5,#network profile will be returned even though the profile is,1,0,0.0,762
9869cc1d100ced5f50cf03b557639835c364fbb5,ctx2.tenant_id),1,0,0.0,763
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile = n1kv_db_v2.get_network_profile(sess2, net_p['id'],",1,0,0.0,764
9869cc1d100ced5f50cf03b557639835c364fbb5,# network profile binding with creator tenant should always exist,1,0,0.0,765
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_conf.CONF.set_override('restrict_network_profiles', False,",1,0,0.0,766
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_get_network_profile_unrestricted(self):,1,0,0.0,767
9869cc1d100ced5f50cf03b557639835c364fbb5,"sess2, net_p['id'], ctx2.tenant_id)",1,0,0.0,768
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.get_network_profile,",1,0,0.0,769
9869cc1d100ced5f50cf03b557639835c364fbb5,sess2 = db.get_session(),1,0,0.0,770
9869cc1d100ced5f50cf03b557639835c364fbb5,is_admin=False),1,0,0.0,771
9869cc1d100ced5f50cf03b557639835c364fbb5,"tenant_id='tenant2',",1,0,0.0,772
9869cc1d100ced5f50cf03b557639835c364fbb5,"ctx2 = context.Context(user_id='non_admin',",1,0,0.0,773
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(profile),1,0,0.0,774
9869cc1d100ced5f50cf03b557639835c364fbb5,ctx1.tenant_id),1,0,0.0,775
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile = n1kv_db_v2.get_network_profile(sess1, net_p['id'],",1,0,0.0,776
9869cc1d100ced5f50cf03b557639835c364fbb5,#network profile binding with creator tenant should always exist,1,0,0.0,777
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test whether VMNetwork is cleaned up if port create fails on VSM.""""""",1,0,0.0,778
9869cc1d100ced5f50cf03b557639835c364fbb5,TestClientInvalidResponse),1,0,0.0,779
9869cc1d100ced5f50cf03b557639835c364fbb5,should work for admin and fail for non-admin.,1,0,0.0,780
9869cc1d100ced5f50cf03b557639835c364fbb5,else:,1,0,0.0,781
9869cc1d100ced5f50cf03b557639835c364fbb5,if admin:,1,0,0.0,782
9869cc1d100ced5f50cf03b557639835c364fbb5,resource = 'policy_profiles',1,0,0.0,783
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _test_get_policy_profiles(self, expected_profiles, admin):",1,0,0.0,784
9869cc1d100ced5f50cf03b557639835c364fbb5,],1,0,0.0,785
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, '00000000-0000-0000-0000-000000000001'),",1,0,0.0,786
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kv_db_v2.get_policy_profile(,1,0,0.0,787
9869cc1d100ced5f50cf03b557639835c364fbb5,return [,1,0,0.0,788
9869cc1d100ced5f50cf03b557639835c364fbb5,new=fake_client.TestClient).start(),1,0,0.0,789
9869cc1d100ced5f50cf03b557639835c364fbb5,"mock.patch(n1kv_client.__name__ + "".Client"",",1,0,0.0,790
9869cc1d100ced5f50cf03b557639835c364fbb5,# Get the profiles,1,0,0.0,791
9869cc1d100ced5f50cf03b557639835c364fbb5,def _init_get_policy_profiles(self):,1,0,0.0,792
9869cc1d100ced5f50cf03b557639835c364fbb5,'00000000-0000-0000-0000-000000000003'),1,0,0.0,793
9869cc1d100ced5f50cf03b557639835c364fbb5,# Verify that the third policy profile is deleted,1,0,0.0,794
9869cc1d100ced5f50cf03b557639835c364fbb5,obj_inst.return_value = 2,1,0,0.0,795
9869cc1d100ced5f50cf03b557639835c364fbb5,# Return 2 policy profiles,1,0,0.0,796
9869cc1d100ced5f50cf03b557639835c364fbb5,'00000000-0000-0000-0000-000000000004'),1,0,0.0,797
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.get_policy_profile,",1,0,0.0,798
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertRaises(c_exc.PolicyProfileIdNotFound,",1,0,0.0,799
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual('pp-3', profile['name'])",1,0,0.0,800
9869cc1d100ced5f50cf03b557639835c364fbb5,"ctx = context.Context(user_id='admin',",1,0,0.0,801
9869cc1d100ced5f50cf03b557639835c364fbb5,"ctx = context.Context(user_id='non_admin',",1,0,0.0,802
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual('pp-2', profile['name'])",1,0,0.0,803
9869cc1d100ced5f50cf03b557639835c364fbb5,"res = self._list(resource, neutron_context=ctx)",1,0,0.0,804
9869cc1d100ced5f50cf03b557639835c364fbb5,We set the flag and attempt to retrieve the port profiles. It,1,0,0.0,805
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_get_profiles_restricted(self):,1,0,0.0,806
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._test_get_policy_profiles(expected_profiles=profiles, admin=True)",1,0,0.0,807
9869cc1d100ced5f50cf03b557639835c364fbb5,# Request the list using admin and verify it returns,1,0,0.0,808
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._test_get_policy_profiles(expected_profiles=profiles, admin=False)",1,0,0.0,809
9869cc1d100ced5f50cf03b557639835c364fbb5,# Request the list using non-admin and verify it returns,1,0,0.0,810
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_conf.CONF.set_override('restrict_policy_profiles', False,",1,0,0.0,811
9869cc1d100ced5f50cf03b557639835c364fbb5,# Set the restriction flag,1,0,0.0,812
9869cc1d100ced5f50cf03b557639835c364fbb5,profiles = self._init_get_policy_profiles(),1,0,0.0,813
9869cc1d100ced5f50cf03b557639835c364fbb5,profiles. It should work for both admin and non-admin.,1,0,0.0,814
9869cc1d100ced5f50cf03b557639835c364fbb5,behavior. We set the flag and attempt to retrieve the port,1,0,0.0,815
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_get_profiles_unrestricted(self):,1,0,0.0,816
9869cc1d100ced5f50cf03b557639835c364fbb5,profiles[i]['name']),1,0,0.0,817
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(expected_profiles[i].name,",1,0,0.0,818
9869cc1d100ced5f50cf03b557639835c364fbb5,profiles[i]['id']),1,0,0.0,819
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(expected_profiles[i].id,",1,0,0.0,820
9869cc1d100ced5f50cf03b557639835c364fbb5,for i in range(len(profiles)):,1,0,0.0,821
9869cc1d100ced5f50cf03b557639835c364fbb5,"profiles = sorted(res[resource], key=utils.safe_sort_key)",1,0,0.0,822
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(len(expected_profiles), len(res[resource]))",1,0,0.0,823
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, '00000000-0000-0000-0000-000000000003')",1,0,0.0,824
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, '00000000-0000-0000-0000-000000000002')",1,0,0.0,825
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.new_create_request('ports', data)",1,0,0.0,826
9869cc1d100ced5f50cf03b557639835c364fbb5,req.get_response(self.api),1,0,0.0,827
9869cc1d100ced5f50cf03b557639835c364fbb5,pt['network_id'])),1,0,0.0,828
9869cc1d100ced5f50cf03b557639835c364fbb5,"get_vm_network(db_session,",1,0,0.0,829
9869cc1d100ced5f50cf03b557639835c364fbb5,self.assertIsNotNone(n1kv_db_v2.,1,0,0.0,830
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_delete_last_port_vmnetwork_cleanup(self):,1,0,0.0,831
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual(old_vmn.port_count, new_vmn.port_count)",1,0,0.0,832
9869cc1d100ced5f50cf03b557639835c364fbb5,"new_vmn = n1kv_db_v2.get_vm_network(db_session,",1,0,0.0,833
9869cc1d100ced5f50cf03b557639835c364fbb5,'network_id': pt['network_id']}},1,0,0.0,834
9869cc1d100ced5f50cf03b557639835c364fbb5,"'tenant_id': pt['tenant_id'],",1,0,0.0,835
9869cc1d100ced5f50cf03b557639835c364fbb5,"data = {'port': {n1kv.PROFILE_ID: pt['n1kv:profile_id'],",1,0,0.0,836
9869cc1d100ced5f50cf03b557639835c364fbb5,pt['network_id']),1,0,0.0,837
9869cc1d100ced5f50cf03b557639835c364fbb5,"pt['n1kv:profile_id'],",1,0,0.0,838
9869cc1d100ced5f50cf03b557639835c364fbb5,"old_vmn = n1kv_db_v2.get_vm_network(db_session,",1,0,0.0,839
9869cc1d100ced5f50cf03b557639835c364fbb5,pt = port['port'],1,0,0.0,840
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Test whether VMNetwork count if port create fails on VSM.""""""",1,0,0.0,841
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_create_next_port_rollback_vmnetwork_count(self):,1,0,0.0,842
9869cc1d100ced5f50cf03b557639835c364fbb5,network['network']['id']),1,0,0.0,843
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_obj.id,",1,0,0.0,844
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.get_vm_network,",1,0,0.0,845
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertRaises(c_exc.VMNetworkNotFound,",1,0,0.0,846
9869cc1d100ced5f50cf03b557639835c364fbb5,"req = self.new_delete_request('ports', port['port']['id'])",1,0,0.0,847
9869cc1d100ced5f50cf03b557639835c364fbb5,Setup function for policy profile tests.,1,0,0.0,848
9869cc1d100ced5f50cf03b557639835c364fbb5,# Verify that DB contains only 3 policy profiles,1,0,0.0,849
9869cc1d100ced5f50cf03b557639835c364fbb5,We need to use the policy profile extension manager for these,1,0,0.0,850
9869cc1d100ced5f50cf03b557639835c364fbb5,plugin._populate_policy_profiles(),1,0,0.0,851
9869cc1d100ced5f50cf03b557639835c364fbb5,obj_inst.return_value = 3,1,0,0.0,852
9869cc1d100ced5f50cf03b557639835c364fbb5,# Return 3 policy profiles,1,0,0.0,853
9869cc1d100ced5f50cf03b557639835c364fbb5,'.TestClient._get_total_profiles') as obj_inst:,1,0,0.0,854
9869cc1d100ced5f50cf03b557639835c364fbb5,with mock.patch(fake_client.__name__ +,1,0,0.0,855
9869cc1d100ced5f50cf03b557639835c364fbb5,# Patch the _get_total_profiles() method to return a custom value,1,0,0.0,856
9869cc1d100ced5f50cf03b557639835c364fbb5,new=fake_client.TestClient):,1,0,0.0,857
9869cc1d100ced5f50cf03b557639835c364fbb5,"with mock.patch(n1kv_client.__name__ + "".Client"",",1,0,0.0,858
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_populate_policy_profile_delete(self):,1,0,0.0,859
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.assertEqual('pp-1', profile['name'])",1,0,0.0,860
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, '00000000-0000-0000-0000-000000000001')",1,0,0.0,861
9869cc1d100ced5f50cf03b557639835c364fbb5,profile = n1kv_db_v2.get_policy_profile(,1,0,0.0,862
9869cc1d100ced5f50cf03b557639835c364fbb5,instance._populate_policy_profiles(),1,0,0.0,863
9869cc1d100ced5f50cf03b557639835c364fbb5,instance = n1kv_neutron_plugin.N1kvNeutronPluginV2(),1,0,0.0,864
9869cc1d100ced5f50cf03b557639835c364fbb5,new=fake_client.TestClient),1,0,0.0,865
9869cc1d100ced5f50cf03b557639835c364fbb5,def test_populate_policy_profile(self):,1,0,0.0,866
9869cc1d100ced5f50cf03b557639835c364fbb5,ext_mgr=PolicyProfileTestExtensionManager()),1,0,0.0,867
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(TestN1kvPolicyProfiles, self).setUp(",1,0,0.0,868
9869cc1d100ced5f50cf03b557639835c364fbb5,policy profile extension manager.,1,0,0.0,869
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.delete_vm_network(context.session,",1,0,0.0,870
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('Create port: profile_id=%s', profile_id)",1,0,0.0,871
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network['port_count']),1,0,0.0,872
9869cc1d100ced5f50cf03b557639835c364fbb5,elif oper == n1kv.SEGMENT_DEL:,1,0,0.0,873
9869cc1d100ced5f50cf03b557639835c364fbb5,if oper == n1kv.SEGMENT_ADD:,1,0,0.0,874
9869cc1d100ced5f50cf03b557639835c364fbb5,trunk_list.append(member_dict),1,0,0.0,875
9869cc1d100ced5f50cf03b557639835c364fbb5,'dot1qtag': dot1qtag},1,0,0.0,876
9869cc1d100ced5f50cf03b557639835c364fbb5,"member_dict = {'segment': net['name'],",1,0,0.0,877
9869cc1d100ced5f50cf03b557639835c364fbb5,"for (segment, dot1qtag) in segment_pairs:",1,0,0.0,878
9869cc1d100ced5f50cf03b557639835c364fbb5,trunk_list = [],1,0,0.0,879
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_populate_member_segments %s', segment_pairs)",1,0,0.0,880
9869cc1d100ced5f50cf03b557639835c364fbb5,:param oper: Operation to be performed,1,0,0.0,881
9869cc1d100ced5f50cf03b557639835c364fbb5,that needs to be trunked,1,0,0.0,882
9869cc1d100ced5f50cf03b557639835c364fbb5,:param network: Dictionary containing the trunk network information,1,0,0.0,883
9869cc1d100ced5f50cf03b557639835c364fbb5,Populate trunk network dict with member segments.,1,0,0.0,884
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _populate_member_segments(self, context, network, segment_pairs, oper):",1,0,0.0,885
9869cc1d100ced5f50cf03b557639835c364fbb5,return member_list,1,0,0.0,886
9869cc1d100ced5f50cf03b557639835c364fbb5,member_list.append(member_dict),1,0,0.0,887
9869cc1d100ced5f50cf03b557639835c364fbb5,member_dict['dot1q'] = dot1qtag,1,0,0.0,888
9869cc1d100ced5f50cf03b557639835c364fbb5,member_dict['bridgeDomain'] = (net['name'] +,1,0,0.0,889
9869cc1d100ced5f50cf03b557639835c364fbb5,member_dict = {},1,0,0.0,890
9869cc1d100ced5f50cf03b557639835c364fbb5,"(segment, dot1qtag) = pair",1,0,0.0,891
9869cc1d100ced5f50cf03b557639835c364fbb5,for pair in segment_pairs:,1,0,0.0,892
9869cc1d100ced5f50cf03b557639835c364fbb5,network['add_segment_list'] = trunk_list,1,0,0.0,893
9869cc1d100ced5f50cf03b557639835c364fbb5,network['del_segment_list'] = trunk_list,1,0,0.0,894
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment_pairs: List of segments that need to be bridged,1,0,0.0,895
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _parse_multi_segments(self, context, attrs, param):",1,0,0.0,896
9869cc1d100ced5f50cf03b557639835c364fbb5,segment2),1,0,0.0,897
9869cc1d100ced5f50cf03b557639835c364fbb5,"binding2 = n1kv_db_v2.get_network_binding(context.session,",1,0,0.0,898
9869cc1d100ced5f50cf03b557639835c364fbb5,segment1),1,0,0.0,899
9869cc1d100ced5f50cf03b557639835c364fbb5,"binding1 = n1kv_db_v2.get_network_binding(context.session,",1,0,0.0,900
9869cc1d100ced5f50cf03b557639835c364fbb5,uuidutils.is_uuid_like(segment2)):,1,0,0.0,901
9869cc1d100ced5f50cf03b557639835c364fbb5,if (uuidutils.is_uuid_like(segment1) and,1,0,0.0,902
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment1, sep, segment2 = pair.partition(':')",1,0,0.0,903
9869cc1d100ced5f50cf03b557639835c364fbb5,"for pair in segments.split(','):",1,0,0.0,904
9869cc1d100ced5f50cf03b557639835c364fbb5,return pair_list,1,0,0.0,905
9869cc1d100ced5f50cf03b557639835c364fbb5,if not attributes.is_attr_set(segments):,1,0,0.0,906
9869cc1d100ced5f50cf03b557639835c364fbb5,segments = attrs.get(param),1,0,0.0,907
9869cc1d100ced5f50cf03b557639835c364fbb5,c_const.NETWORK_TYPE_OVERLAY],1,0,0.0,908
9869cc1d100ced5f50cf03b557639835c364fbb5,"valid_seg_types = [c_const.NETWORK_TYPE_VLAN,",1,0,0.0,909
9869cc1d100ced5f50cf03b557639835c364fbb5,pair_list = [],1,0,0.0,910
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: List of segment UUIDs in set pairs,1,0,0.0,911
9869cc1d100ced5f50cf03b557639835c364fbb5,or del operation,1,0,0.0,912
9869cc1d100ced5f50cf03b557639835c364fbb5,:param param: Additional parameter indicating an add,1,0,0.0,913
9869cc1d100ced5f50cf03b557639835c364fbb5,:param attrs: Attributes of the network,1,0,0.0,914
9869cc1d100ced5f50cf03b557639835c364fbb5,Parse the multi-segment network attributes.,1,0,0.0,915
9869cc1d100ced5f50cf03b557639835c364fbb5,member_list = [],1,0,0.0,916
9869cc1d100ced5f50cf03b557639835c364fbb5,Get the list of segments in encapsulation profile format.,1,0,0.0,917
9869cc1d100ced5f50cf03b557639835c364fbb5,binding2.network_type not in valid_seg_types or,1,0,0.0,918
9869cc1d100ced5f50cf03b557639835c364fbb5,mapping_dict = {},1,0,0.0,919
9869cc1d100ced5f50cf03b557639835c364fbb5,'delMappings': []},1,0,0.0,920
9869cc1d100ced5f50cf03b557639835c364fbb5,"'addMappings': [],",1,0,0.0,921
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_dict = {'name': encap_profile,",1,0,0.0,922
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_dict = encap_dict[encap_profile],1,0,0.0,923
9869cc1d100ced5f50cf03b557639835c364fbb5,if encap_profile in encap_dict:,1,0,0.0,924
9869cc1d100ced5f50cf03b557639835c364fbb5,if encap_profile is not None:,1,0,0.0,925
9869cc1d100ced5f50cf03b557639835c364fbb5,online_clusters),1,0,0.0,926
9869cc1d100ced5f50cf03b557639835c364fbb5,"encap_profile = self._get_cluster(segment1, segment2,",1,0,0.0,927
9869cc1d100ced5f50cf03b557639835c364fbb5,"for (segment1, segment2) in segment_pairs:",1,0,0.0,928
9869cc1d100ced5f50cf03b557639835c364fbb5,online_clusters.append(cluster),1,0,0.0,929
9869cc1d100ced5f50cf03b557639835c364fbb5,len(mapping[c_const.SEGMENTS])),1,0,0.0,930
9869cc1d100ced5f50cf03b557639835c364fbb5,cluster['size'] += (,1,0,0.0,931
9869cc1d100ced5f50cf03b557639835c364fbb5,cluster['size'] = 0,1,0,0.0,932
9869cc1d100ced5f50cf03b557639835c364fbb5,if cluster[c_const.STATE] == c_const.ONLINE:,1,0,0.0,933
9869cc1d100ced5f50cf03b557639835c364fbb5,cluster = cluster[c_const.PROPERTIES],1,0,0.0,934
9869cc1d100ced5f50cf03b557639835c364fbb5,for cluster in clusters['body'][c_const.SET]:,1,0,0.0,935
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_dict = {},1,0,0.0,936
9869cc1d100ced5f50cf03b557639835c364fbb5,online_clusters = [],1,0,0.0,937
9869cc1d100ced5f50cf03b557639835c364fbb5,clusters = n1kvclient.get_clusters(),1,0,0.0,938
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_dict[encap_profile] = profile_dict,1,0,0.0,939
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_mapping_dict(context,",1,0,0.0,940
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _get_encap_segments(self, context, segment_pairs):",1,0,0.0,941
9869cc1d100ced5f50cf03b557639835c364fbb5,"mapping_dict, segment1)",1,0,0.0,942
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_dict['delMappings'].append(mapping_dict),1,0,0.0,943
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_profile = binding['encap_profile_name'],1,0,0.0,944
9869cc1d100ced5f50cf03b557639835c364fbb5,segment2))),1,0,0.0,945
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.get_multi_segment_network_binding(session, net_id,",1,0,0.0,946
9869cc1d100ced5f50cf03b557639835c364fbb5,binding = (,1,0,0.0,947
9869cc1d100ced5f50cf03b557639835c364fbb5,whose bridging needs to be removed,1,0,0.0,948
9869cc1d100ced5f50cf03b557639835c364fbb5,Send Delete multi-segment network request to VSM.,1,0,0.0,949
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_del_multi_segment_request(self, context, net_id, segment_pairs):",1,0,0.0,950
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_dict[profile]),1,0,0.0,951
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.update_encapsulation_profile(context, profile,",1,0,0.0,952
9869cc1d100ced5f50cf03b557639835c364fbb5,for profile in encap_dict:,1,0,0.0,953
9869cc1d100ced5f50cf03b557639835c364fbb5,raise cisco_exceptions.NoClusterFound(),1,0,0.0,954
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_profile),1,0,0.0,955
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment2),",1,0,0.0,956
9869cc1d100ced5f50cf03b557639835c364fbb5,"(segment1,",1,0,0.0,957
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_id,",1,0,0.0,958
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.add_multi_segment_encap_profile_name(session,",1,0,0.0,959
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_dict['addMappings'].append(mapping_dict),1,0,0.0,960
9869cc1d100ced5f50cf03b557639835c364fbb5,"mapping_dict, segment2)",1,0,0.0,961
9869cc1d100ced5f50cf03b557639835c364fbb5,if (binding1.network_type not in valid_seg_types or,1,0,0.0,962
9869cc1d100ced5f50cf03b557639835c364fbb5,binding1.network_type == binding2.network_type):,1,0,0.0,963
9869cc1d100ced5f50cf03b557639835c364fbb5,that need to be bridged,1,0,0.0,964
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_create_logical_network_request(self, network_profile, tenant_id):",1,0,0.0,965
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""n1kv:profile_id does not exist"")",1,0,0.0,966
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id = attrs.get(n1kv.PROFILE_ID),1,0,0.0,967
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Validates whether policy profile exists.""""""",1,0,0.0,968
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _process_policy_profile(self, context, attrs):",1,0,0.0,969
9869cc1d100ced5f50cf03b557639835c364fbb5,return profile_id,1,0,0.0,970
9869cc1d100ced5f50cf03b557639835c364fbb5,network['n1kv:profile_id'] = profile_id,1,0,0.0,971
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id = net_p['id'],1,0,0.0,972
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_name),1,0,0.0,973
9869cc1d100ced5f50cf03b557639835c364fbb5,"net_p = self._get_network_profile_by_name(context.session,",1,0,0.0,974
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_name = c_conf.CISCO_N1K.default_network_profile,1,0,0.0,975
9869cc1d100ced5f50cf03b557639835c364fbb5,if not profile_id_set:,1,0,0.0,976
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id_set = attributes.is_attr_set(profile_id),1,0,0.0,977
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id = network.get(n1kv.PROFILE_ID),1,0,0.0,978
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Validate network profile exists.""""""",1,0,0.0,979
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _process_network_profile(self, context, network):",1,0,0.0,980
9869cc1d100ced5f50cf03b557639835c364fbb5,port[n1kv.PROFILE_ID] = binding.profile_id,1,0,0.0,981
9869cc1d100ced5f50cf03b557639835c364fbb5,port['id']),1,0,0.0,982
9869cc1d100ced5f50cf03b557639835c364fbb5,"binding = n1kv_db_v2.get_port_binding(context.session,",1,0,0.0,983
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Add the extended parameter port profile to the port.""""""",1,0,0.0,984
9869cc1d100ced5f50cf03b557639835c364fbb5,if not self._policy_profile_exists(profile_id):,1,0,0.0,985
9869cc1d100ced5f50cf03b557639835c364fbb5,Send create logical network request to VSM.,1,0,0.0,986
9869cc1d100ced5f50cf03b557639835c364fbb5,network[n1kv.PROFILE_ID] = binding.profile_id,1,0,0.0,987
9869cc1d100ced5f50cf03b557639835c364fbb5,:param network_profile: network profile dictionary,1,0,0.0,988
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_delete_network_profile_request(self, profile):",1,0,0.0,989
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.update_network_segment_pool(profile),1,0,0.0,990
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_update_network_profile_request: %s', profile['id'])",1,0,0.0,991
9869cc1d100ced5f50cf03b557639835c364fbb5,Send update network profile request to VSM.,1,0,0.0,992
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_update_network_profile_request(self, profile):",1,0,0.0,993
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.create_network_segment_pool(profile, context.tenant_id)",1,0,0.0,994
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_create_network_profile_request: %s', profile['id'])",1,0,0.0,995
9869cc1d100ced5f50cf03b557639835c364fbb5,:param profile: network profile dictionary,1,0,0.0,996
9869cc1d100ced5f50cf03b557639835c364fbb5,Send create network profile request to VSM.,1,0,0.0,997
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_create_network_profile_request(self, context, profile):",1,0,0.0,998
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.delete_logical_network(logical_network_name),1,0,0.0,999
9869cc1d100ced5f50cf03b557639835c364fbb5,c_const.LOGICAL_NETWORK_SUFFIX),1,0,0.0,1000
9869cc1d100ced5f50cf03b557639835c364fbb5,logical_network_name = (network_profile['id'] +,1,0,0.0,1001
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.debug('_send_delete_logical_network'),1,0,0.0,1002
9869cc1d100ced5f50cf03b557639835c364fbb5,Send delete logical network request to VSM.,1,0,0.0,1003
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_delete_logical_network_request(self, network_profile):",1,0,0.0,1004
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.create_logical_network(network_profile, tenant_id)",1,0,0.0,1005
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.debug('_send_create_logical_network'),1,0,0.0,1006
9869cc1d100ced5f50cf03b557639835c364fbb5,:param tenant_id: UUID representing the tenant,1,0,0.0,1007
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _extend_port_dict_profile(self, context, port):",1,0,0.0,1008
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Add the extended parameter network profile to the network.""""""",1,0,0.0,1009
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Invalid pairing supplied"")",1,0,0.0,1010
9869cc1d100ced5f50cf03b557639835c364fbb5,if not physical_network:,1,0,0.0,1011
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Cannot add vlan segment '%s' as a member of """,1,0,0.0,1012
9869cc1d100ced5f50cf03b557639835c364fbb5,if sub_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1013
9869cc1d100ced5f50cf03b557639835c364fbb5,"""another trunk segment"") % segment",1,0,0.0,1014
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Cannot add a trunk segment '%s' as a member of """,1,0,0.0,1015
9869cc1d100ced5f50cf03b557639835c364fbb5,if binding.network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1016
9869cc1d100ced5f50cf03b557639835c364fbb5,segment),1,0,0.0,1017
9869cc1d100ced5f50cf03b557639835c364fbb5,if uuidutils.is_uuid_like(segment):,1,0,0.0,1018
9869cc1d100ced5f50cf03b557639835c364fbb5,dot1qtag = '',1,0,0.0,1019
9869cc1d100ced5f50cf03b557639835c364fbb5,if sub_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1020
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment, sep, dot1qtag = pair.partition(':')",1,0,0.0,1021
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: List of segment UUIDs and dot1qtag (for vxlan) in set pairs,1,0,0.0,1022
9869cc1d100ced5f50cf03b557639835c364fbb5,:param sub_type: Sub-type of the trunk segment,1,0,0.0,1023
9869cc1d100ced5f50cf03b557639835c364fbb5,:param physical_network: Physical network of the trunk segment,1,0,0.0,1024
9869cc1d100ced5f50cf03b557639835c364fbb5,Parse the trunk network attributes.,1,0,0.0,1025
9869cc1d100ced5f50cf03b557639835c364fbb5,sub_type):,1,0,0.0,1026
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _parse_trunk_segments(self, context, attrs, param, physical_network,",1,0,0.0,1027
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Invalid UUID supplied"")",1,0,0.0,1028
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('Invalid UUID supplied in %s', pair)",1,0,0.0,1029
9869cc1d100ced5f50cf03b557639835c364fbb5,"pair_list.append((segment1, segment2))",1,0,0.0,1030
9869cc1d100ced5f50cf03b557639835c364fbb5,"""a vxlan trunk segment"") % segment",1,0,0.0,1031
9869cc1d100ced5f50cf03b557639835c364fbb5,physical_network = binding.physical_network,1,0,0.0,1032
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _extend_network_dict_profile(self, context, network):",1,0,0.0,1033
9869cc1d100ced5f50cf03b557639835c364fbb5,elif physical_network != binding.physical_network:,1,0,0.0,1034
9869cc1d100ced5f50cf03b557639835c364fbb5,network[n1kv.MEMBER_SEGMENTS] = members,1,0,0.0,1035
9869cc1d100ced5f50cf03b557639835c364fbb5,"members = n1kv_db_v2.get_multi_segment_members(context.session,",1,0,0.0,1036
9869cc1d100ced5f50cf03b557639835c364fbb5,"members = n1kv_db_v2.get_trunk_members(context.session,",1,0,0.0,1037
9869cc1d100ced5f50cf03b557639835c364fbb5,members = [],1,0,0.0,1038
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Add the extended parameter member segments to the network.""""""",1,0,0.0,1039
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _extend_network_dict_member_segments(self, context, network):",1,0,0.0,1040
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""'%s' is not a valid UUID"") % segment",1,0,0.0,1041
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('%s is not a valid uuid', segment)",1,0,0.0,1042
9869cc1d100ced5f50cf03b557639835c364fbb5,"pair_list.append((segment, dot1qtag))",1,0,0.0,1043
9869cc1d100ced5f50cf03b557639835c364fbb5,"""value"") % dot1qtag",1,0,0.0,1044
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Vlan tag '%s' is not an integer """,1,0,0.0,1045
9869cc1d100ced5f50cf03b557639835c364fbb5,except ValueError:,1,0,0.0,1046
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Vlan tag '%s' is out of range"") % dot1qtag",1,0,0.0,1047
9869cc1d100ced5f50cf03b557639835c364fbb5,if not utils.is_valid_vlan_tag(int(dot1qtag)):,1,0,0.0,1048
9869cc1d100ced5f50cf03b557639835c364fbb5,"""a vlan trunk segment"") % segment",1,0,0.0,1049
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Cannot add vxlan segment '%s' as a member of """,1,0,0.0,1050
9869cc1d100ced5f50cf03b557639835c364fbb5,elif binding.network_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1051
9869cc1d100ced5f50cf03b557639835c364fbb5,"""physical network"") % segment",1,0,0.0,1052
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Network UUID '%s' belongs to a different """,1,0,0.0,1053
9869cc1d100ced5f50cf03b557639835c364fbb5,if not segment_pairs:,1,0,0.0,1054
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment_pairs: List of segments in UUID pairs,1,0,0.0,1055
9869cc1d100ced5f50cf03b557639835c364fbb5,"vm_network['name'],",1,0,0.0,1056
9869cc1d100ced5f50cf03b557639835c364fbb5,self.agent_vsm = True,1,0,0.0,1057
9869cc1d100ced5f50cf03b557639835c364fbb5,policy profile updates.,1,0,0.0,1058
9869cc1d100ced5f50cf03b557639835c364fbb5,is instantiated for the first time and then continue to poll for,1,0,0.0,1059
9869cc1d100ced5f50cf03b557639835c364fbb5,Setup Cisco Nexus 1000V related parameters and pull policy profiles.,1,0,0.0,1060
9869cc1d100ced5f50cf03b557639835c364fbb5,def _setup_vsm(self):,1,0,0.0,1061
9869cc1d100ced5f50cf03b557639835c364fbb5,self.conn.consume_in_threads(),1,0,0.0,1062
9869cc1d100ced5f50cf03b557639835c364fbb5,self.dhcp_agent_notifier = dhcp_rpc_agent_api.DhcpAgentNotifyAPI(),1,0,0.0,1063
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.conn.create_consumer(svc_topic, self.endpoints, fanout=False)",1,0,0.0,1064
9869cc1d100ced5f50cf03b557639835c364fbb5,for svc_topic in self.service_topics.values():,1,0,0.0,1065
9869cc1d100ced5f50cf03b557639835c364fbb5,metadata_rpc.MetadataRpcCallback()],1,0,0.0,1066
9869cc1d100ced5f50cf03b557639835c364fbb5,"agents_db.AgentExtRpcCallback(),",1,0,0.0,1067
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.endpoints = [dhcp_rpc.DhcpRpcCallback(),",1,0,0.0,1068
9869cc1d100ced5f50cf03b557639835c364fbb5,self.conn = n_rpc.create_connection(new=True),1,0,0.0,1069
9869cc1d100ced5f50cf03b557639835c364fbb5,self.service_topics = {svc_constants.CORE: topics.PLUGIN},1,0,0.0,1070
9869cc1d100ced5f50cf03b557639835c364fbb5,# RPC support,1,0,0.0,1071
9869cc1d100ced5f50cf03b557639835c364fbb5,def _setup_rpc(self):,1,0,0.0,1072
9869cc1d100ced5f50cf03b557639835c364fbb5,self.start_periodic_dhcp_agent_status_check(),1,0,0.0,1073
9869cc1d100ced5f50cf03b557639835c364fbb5,),1,0,0.0,1074
9869cc1d100ced5f50cf03b557639835c364fbb5,o_conf.CONF.network_scheduler_driver,1,0,0.0,1075
9869cc1d100ced5f50cf03b557639835c364fbb5,self._setup_rpc(),1,0,0.0,1076
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.debug('_setup_vsm'),1,0,0.0,1077
9869cc1d100ced5f50cf03b557639835c364fbb5,# Poll VSM for create/delete of policy profile.,1,0,0.0,1078
9869cc1d100ced5f50cf03b557639835c364fbb5,c_cred.Store.initialize(),1,0,0.0,1079
9869cc1d100ced5f50cf03b557639835c364fbb5,eventlet.spawn(self._poll_policy_profiles),1,0,0.0,1080
9869cc1d100ced5f50cf03b557639835c364fbb5,for profile in n1kv_db_v2.get_policy_profiles():,1,0,0.0,1081
9869cc1d100ced5f50cf03b557639835c364fbb5,# Fetch policy profiles previously populated,1,0,0.0,1082
9869cc1d100ced5f50cf03b557639835c364fbb5,vsm_profiles[profile_id] = profile_name,1,0,0.0,1083
9869cc1d100ced5f50cf03b557639835c364fbb5,[profile_name][c_const.PROPERTIES][c_const.ID]),1,0,0.0,1084
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id = (policy_profiles,1,0,0.0,1085
9869cc1d100ced5f50cf03b557639835c364fbb5,for profile_name in policy_profiles:,1,0,0.0,1086
9869cc1d100ced5f50cf03b557639835c364fbb5,plugin_profiles_set = set(),1,0,0.0,1087
9869cc1d100ced5f50cf03b557639835c364fbb5,vsm_profiles = {},1,0,0.0,1088
9869cc1d100ced5f50cf03b557639835c364fbb5,policy_profiles = n1kvclient.list_port_profiles(),1,0,0.0,1089
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient = n1kv_client.Client(),1,0,0.0,1090
9869cc1d100ced5f50cf03b557639835c364fbb5,try:,1,0,0.0,1091
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG.debug('_populate_policy_profiles'),1,0,0.0,1092
9869cc1d100ced5f50cf03b557639835c364fbb5,tenant-ids.,1,0,0.0,1093
9869cc1d100ced5f50cf03b557639835c364fbb5,The tenant id is not available when the policy profiles are polled,1,0,0.0,1094
9869cc1d100ced5f50cf03b557639835c364fbb5,def _populate_policy_profiles(self):,1,0,0.0,1095
9869cc1d100ced5f50cf03b557639835c364fbb5,eventlet.sleep(c_conf.CISCO_N1K.poll_duration),1,0,0.0,1096
9869cc1d100ced5f50cf03b557639835c364fbb5,self._populate_policy_profiles(),1,0,0.0,1097
9869cc1d100ced5f50cf03b557639835c364fbb5,while True:,1,0,0.0,1098
9869cc1d100ced5f50cf03b557639835c364fbb5,def _poll_policy_profiles(self):,1,0,0.0,1099
9869cc1d100ced5f50cf03b557639835c364fbb5,self._setup_vsm(),1,0,0.0,1100
9869cc1d100ced5f50cf03b557639835c364fbb5,network_db_v2.delete_all_n1kv_credentials(),1,0,0.0,1101
9869cc1d100ced5f50cf03b557639835c364fbb5,vsm_profiles_set = set(vsm_profiles),1,0,0.0,1102
9869cc1d100ced5f50cf03b557639835c364fbb5,Implement the Neutron abstractions using Cisco Nexus1000V.,1,0,0.0,1103
9869cc1d100ced5f50cf03b557639835c364fbb5,driver.DbQuotaDriver):,1,0,0.0,1104
9869cc1d100ced5f50cf03b557639835c364fbb5,"agentschedulers_db.DhcpAgentSchedulerDbMixin,",1,0,0.0,1105
9869cc1d100ced5f50cf03b557639835c364fbb5,"network_db_v2.Credential_db_mixin,",1,0,0.0,1106
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.PolicyProfile_db_mixin,",1,0,0.0,1107
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.NetworkProfile_db_mixin,",1,0,0.0,1108
9869cc1d100ced5f50cf03b557639835c364fbb5,"portbindings_db.PortBindingMixin,",1,0,0.0,1109
9869cc1d100ced5f50cf03b557639835c364fbb5,"external_net_db.External_net_db_mixin,",1,0,0.0,1110
9869cc1d100ced5f50cf03b557639835c364fbb5,LOG = logging.getLogger(__name__),1,0,0.0,1111
9869cc1d100ced5f50cf03b557639835c364fbb5,#    under the License.,1,0,0.0,1112
9869cc1d100ced5f50cf03b557639835c364fbb5,#    License for the specific language governing permissions and limitations,1,0,0.0,1113
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,1114
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,0,0.0,1115
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,1116
9869cc1d100ced5f50cf03b557639835c364fbb5,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,1117
9869cc1d100ced5f50cf03b557639835c364fbb5,#    a copy of the License at,1,0,0.0,1118
9869cc1d100ced5f50cf03b557639835c364fbb5,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,1119
9869cc1d100ced5f50cf03b557639835c364fbb5,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,1120
9869cc1d100ced5f50cf03b557639835c364fbb5,#,1,0,0.0,1121
9869cc1d100ced5f50cf03b557639835c364fbb5,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,1122
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""",1,0,0.0,1123
9869cc1d100ced5f50cf03b557639835c364fbb5,"Refer README file for the architecture, new features, and",1,0,0.0,1124
9869cc1d100ced5f50cf03b557639835c364fbb5,'security-group' in self.supported_extension_aliases}},1,0,0.0,1125
9869cc1d100ced5f50cf03b557639835c364fbb5,workflow,1,0,0.0,1126
9869cc1d100ced5f50cf03b557639835c364fbb5,portbindings.CAP_PORT_FILTER:,1,0,0.0,1127
9869cc1d100ced5f50cf03b557639835c364fbb5,# TODO(rkukura): Replace with new VIF security details,1,0,0.0,1128
9869cc1d100ced5f50cf03b557639835c364fbb5,portbindings.VIF_DETAILS: {,1,0,0.0,1129
9869cc1d100ced5f50cf03b557639835c364fbb5,"portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,",1,0,0.0,1130
9869cc1d100ced5f50cf03b557639835c364fbb5,self.base_binding_dict = {,1,0,0.0,1131
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(N1kvNeutronPluginV2, self).__init__()",1,0,0.0,1132
9869cc1d100ced5f50cf03b557639835c364fbb5,4. Establish communication with Cisco Nexus1000V,1,0,0.0,1133
9869cc1d100ced5f50cf03b557639835c364fbb5,3. Initialize Nexus1000v and Credential DB,1,0,0.0,1134
9869cc1d100ced5f50cf03b557639835c364fbb5,2. clear N1kv credential,1,0,0.0,1135
9869cc1d100ced5f50cf03b557639835c364fbb5,1. Initialize VIF type to OVS,1,0,0.0,1136
9869cc1d100ced5f50cf03b557639835c364fbb5,Initialize Nexus1000V Neutron plugin.,1,0,0.0,1137
9869cc1d100ced5f50cf03b557639835c364fbb5,"def __init__(self, configfile=None):",1,0,0.0,1138
9869cc1d100ced5f50cf03b557639835c364fbb5,"""dhcp_agent_scheduler""]",1,0,0.0,1139
9869cc1d100ced5f50cf03b557639835c364fbb5,"""binding"", ""credential"", ""quotas"",",1,0,0.0,1140
9869cc1d100ced5f50cf03b557639835c364fbb5,"""policy_profile"", ""external-net"",",1,0,0.0,1141
9869cc1d100ced5f50cf03b557639835c364fbb5,"""n1kv"", ""network_profile"",",1,0,0.0,1142
9869cc1d100ced5f50cf03b557639835c364fbb5,"supported_extension_aliases = [""provider"", ""agent"",",1,0,0.0,1143
9869cc1d100ced5f50cf03b557639835c364fbb5,__native_bulk_support = False,1,0,0.0,1144
9869cc1d100ced5f50cf03b557639835c364fbb5,# bulk operations.,1,0,0.0,1145
9869cc1d100ced5f50cf03b557639835c364fbb5,plugin_profiles_set.add(profile.id),1,0,0.0,1146
9869cc1d100ced5f50cf03b557639835c364fbb5,# Update database if the profile sets differ.,1,0,0.0,1147
9869cc1d100ced5f50cf03b557639835c364fbb5,:param net_id: UUID of the multi-segment network,1,0,0.0,1148
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _get_cluster(self, segment1, segment2, clusters):",1,0,0.0,1149
9869cc1d100ced5f50cf03b557639835c364fbb5,# TBD : Need to handle provider network updates,1,0,0.0,1150
9869cc1d100ced5f50cf03b557639835c364fbb5,return,1,0,0.0,1151
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Handle Provider network updates.""""""",1,0,0.0,1152
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _check_provider_update(self, context, attrs):",1,0,0.0,1153
9869cc1d100ced5f50cf03b557639835c364fbb5,"return (network_type, physical_network, segmentation_id)",1,0,0.0,1154
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""provider:physical_network required"")",1,0,0.0,1155
9869cc1d100ced5f50cf03b557639835c364fbb5,physical_network),1,0,0.0,1156
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = (_(""Unknown provider:physical_network %s""),",1,0,0.0,1157
9869cc1d100ced5f50cf03b557639835c364fbb5,break,1,0,0.0,1158
9869cc1d100ced5f50cf03b557639835c364fbb5,'physical_network']:,1,0,0.0,1159
9869cc1d100ced5f50cf03b557639835c364fbb5,if physical_network == network_profile[,1,0,0.0,1160
9869cc1d100ced5f50cf03b557639835c364fbb5,for network_profile in network_profiles:,1,0,0.0,1161
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profiles = n1kv_db_v2.get_network_profiles(),1,0,0.0,1162
9869cc1d100ced5f50cf03b557639835c364fbb5,if network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1163
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""provider:network_type %s not supported""), network_type",1,0,0.0,1164
9869cc1d100ced5f50cf03b557639835c364fbb5,"""(5000+)"")",1,0,0.0,1165
9869cc1d100ced5f50cf03b557639835c364fbb5,if segmentation_id < 5000:,1,0,0.0,1166
9869cc1d100ced5f50cf03b557639835c364fbb5,physical_network = None,1,0,0.0,1167
9869cc1d100ced5f50cf03b557639835c364fbb5,else:,1,0,0.0,1168
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Plugin does not support updating provider attributes"")",1,0,0.0,1169
9869cc1d100ced5f50cf03b557639835c364fbb5,Returns a cluster to apply the segment mapping,1,0,0.0,1170
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""provider:physical_network specified for Overlay """,1,0,0.0,1171
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment1: UUID of segment to be mapped,1,0,0.0,1172
9869cc1d100ced5f50cf03b557639835c364fbb5,Send Add multi-segment network request to VSM.,1,0,0.0,1173
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_add_multi_segment_request(self, context, net_id, segment_pairs):",1,0,0.0,1174
9869cc1d100ced5f50cf03b557639835c364fbb5,c_const.BRIDGE_DOMAIN_SUFFIX),1,0,0.0,1175
9869cc1d100ced5f50cf03b557639835c364fbb5,mapping_dict['bridgeDomain'] = (net['name'] +,1,0,0.0,1176
9869cc1d100ced5f50cf03b557639835c364fbb5,mapping_dict['dot1q'] = str(net[providernet.SEGMENTATION_ID]),1,0,0.0,1177
9869cc1d100ced5f50cf03b557639835c364fbb5,if net[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1178
9869cc1d100ced5f50cf03b557639835c364fbb5,"net = self.get_network(context, segment)",1,0,0.0,1179
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment: id of the segment being populated,1,0,0.0,1180
9869cc1d100ced5f50cf03b557639835c364fbb5,:param mapping_dict: dictionary to populate values,1,0,0.0,1181
9869cc1d100ced5f50cf03b557639835c364fbb5,Extend a mapping dictionary with dot1q tag and bridge-domain name.,1,0,0.0,1182
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _extend_mapping_dict(self, context, mapping_dict, segment):",1,0,0.0,1183
9869cc1d100ced5f50cf03b557639835c364fbb5,return cluster['encapProfileName'],1,0,0.0,1184
9869cc1d100ced5f50cf03b557639835c364fbb5,cluster['size'] += 2,1,0,0.0,1185
9869cc1d100ced5f50cf03b557639835c364fbb5,if segment1 in segment or segment2 in segment:,1,0,0.0,1186
9869cc1d100ced5f50cf03b557639835c364fbb5,for segment in mapping[c_const.SEGMENTS]:,1,0,0.0,1187
9869cc1d100ced5f50cf03b557639835c364fbb5,for mapping in cluster[c_const.MAPPINGS]:,1,0,0.0,1188
9869cc1d100ced5f50cf03b557639835c364fbb5,"for cluster in sorted(clusters, key=lambda k: k['size']):",1,0,0.0,1189
9869cc1d100ced5f50cf03b557639835c364fbb5,:param clusters: List of clusters,1,0,0.0,1190
9869cc1d100ced5f50cf03b557639835c364fbb5,:param segment2: UUID of segment to be mapped,1,0,0.0,1191
9869cc1d100ced5f50cf03b557639835c364fbb5,"""network"")",1,0,0.0,1192
9869cc1d100ced5f50cf03b557639835c364fbb5,if physical_network_set:,1,0,0.0,1193
9869cc1d100ced5f50cf03b557639835c364fbb5,if vsm_profiles_set ^ plugin_profiles_set:,1,0,0.0,1194
9869cc1d100ced5f50cf03b557639835c364fbb5,network[providernet.SEGMENTATION_ID] = None,1,0,0.0,1195
9869cc1d100ced5f50cf03b557639835c364fbb5,network[providernet.PHYSICAL_NETWORK] = binding.physical_network,1,0,0.0,1196
9869cc1d100ced5f50cf03b557639835c364fbb5,elif binding.network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1197
9869cc1d100ced5f50cf03b557639835c364fbb5,network[n1kv.MULTICAST_IP] = binding.multicast_ip,1,0,0.0,1198
9869cc1d100ced5f50cf03b557639835c364fbb5,network[providernet.SEGMENTATION_ID] = binding.segmentation_id,1,0,0.0,1199
9869cc1d100ced5f50cf03b557639835c364fbb5,network[providernet.PHYSICAL_NETWORK] = None,1,0,0.0,1200
9869cc1d100ced5f50cf03b557639835c364fbb5,if binding.network_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1201
9869cc1d100ced5f50cf03b557639835c364fbb5,network[providernet.NETWORK_TYPE] = binding.network_type,1,0,0.0,1202
9869cc1d100ced5f50cf03b557639835c364fbb5,network['id']),1,0,0.0,1203
9869cc1d100ced5f50cf03b557639835c364fbb5,"binding = n1kv_db_v2.get_network_binding(context.session,",1,0,0.0,1204
9869cc1d100ced5f50cf03b557639835c364fbb5,"""""""Add extended network parameters.""""""",1,0,0.0,1205
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _extend_network_dict_provider(self, context, network):",1,0,0.0,1206
9869cc1d100ced5f50cf03b557639835c364fbb5,cisco_exceptions.VSMConnectionFailed):,1,0,0.0,1207
9869cc1d100ced5f50cf03b557639835c364fbb5,"except (cisco_exceptions.VSMError,",1,0,0.0,1208
9869cc1d100ced5f50cf03b557639835c364fbb5,self._remove_all_fake_policy_profiles(),1,0,0.0,1209
9869cc1d100ced5f50cf03b557639835c364fbb5,self._delete_policy_profile(pid),1,0,0.0,1210
9869cc1d100ced5f50cf03b557639835c364fbb5,for pid in plugin_profiles_set - vsm_profiles_set:,1,0,0.0,1211
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._add_policy_profile(vsm_profiles[pid], pid)",1,0,0.0,1212
9869cc1d100ced5f50cf03b557639835c364fbb5,for pid in vsm_profiles_set - plugin_profiles_set:,1,0,0.0,1213
9869cc1d100ced5f50cf03b557639835c364fbb5,# Add profiles in database if new profiles were created in VSM,1,0,0.0,1214
9869cc1d100ced5f50cf03b557639835c364fbb5,elif binding.network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1215
9869cc1d100ced5f50cf03b557639835c364fbb5,network[n1kv.MULTICAST_IP] = None,1,0,0.0,1216
9869cc1d100ced5f50cf03b557639835c364fbb5,elif network_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1217
9869cc1d100ced5f50cf03b557639835c364fbb5,elif binding.network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,0,0.0,1218
9869cc1d100ced5f50cf03b557639835c364fbb5,"""(1 through 4094)"")",1,0,0.0,1219
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""provider:segmentation_id out of range """,1,0,0.0,1220
9869cc1d100ced5f50cf03b557639835c364fbb5,if segmentation_id < 1 or segmentation_id > 4094:,1,0,0.0,1221
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""provider:segmentation_id required"")",1,0,0.0,1222
9869cc1d100ced5f50cf03b557639835c364fbb5,if not segmentation_id_set:,1,0,0.0,1223
9869cc1d100ced5f50cf03b557639835c364fbb5,elif network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1224
9869cc1d100ced5f50cf03b557639835c364fbb5,raise n_exc.InvalidInput(error_message=msg),1,0,0.0,1225
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""provider:network_type required"")",1,0,0.0,1226
9869cc1d100ced5f50cf03b557639835c364fbb5,if not network_type_set:,1,0,0.0,1227
9869cc1d100ced5f50cf03b557639835c364fbb5,"return (None, None, None)",1,0,0.0,1228
9869cc1d100ced5f50cf03b557639835c364fbb5,segmentation_id_set):,1,0,0.0,1229
9869cc1d100ced5f50cf03b557639835c364fbb5,if not (network_type_set or physical_network_set or,1,0,0.0,1230
9869cc1d100ced5f50cf03b557639835c364fbb5,segmentation_id_set = attributes.is_attr_set(segmentation_id),1,0,0.0,1231
9869cc1d100ced5f50cf03b557639835c364fbb5,physical_network_set = attributes.is_attr_set(physical_network),1,0,0.0,1232
9869cc1d100ced5f50cf03b557639835c364fbb5,network_type_set = attributes.is_attr_set(network_type),1,0,0.0,1233
9869cc1d100ced5f50cf03b557639835c364fbb5,segmentation_id = attrs.get(providernet.SEGMENTATION_ID),1,0,0.0,1234
9869cc1d100ced5f50cf03b557639835c364fbb5,physical_network = attrs.get(providernet.PHYSICAL_NETWORK),1,0,0.0,1235
9869cc1d100ced5f50cf03b557639835c364fbb5,network_type = attrs.get(providernet.NETWORK_TYPE),1,0,0.0,1236
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _process_provider_create(self, context, attrs):",1,0,0.0,1237
9869cc1d100ced5f50cf03b557639835c364fbb5,Send delete network profile request to VSM.,1,0,0.0,1238
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_delete_network_profile_request: %s',",1,0,0.0,1239
9869cc1d100ced5f50cf03b557639835c364fbb5,profile['name']),1,0,0.0,1240
9869cc1d100ced5f50cf03b557639835c364fbb5,"super(N1kvNeutronPluginV2, self).delete_network(context, id)",1,0,0.0,1241
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.release_vlan(session, binding.physical_network,",1,0,0.0,1242
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.release_vxlan(session, binding.segmentation_id)",1,0,0.0,1243
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _delete_network_db(self, context, id):",1,0,0.0,1244
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Deleted network: %s"", id)",1,0,0.0,1245
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_delete_network_request(context, network)",1,0,0.0,1246
9869cc1d100ced5f50cf03b557639835c364fbb5,"# the network record, so explicit removal is not necessary",1,0,0.0,1247
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete_network_db(context, id)",1,0,0.0,1248
9869cc1d100ced5f50cf03b557639835c364fbb5,"""multi-segment network"") % network['name']",1,0,0.0,1249
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Cannot delete network '%s' that is a member of a """,1,0,0.0,1250
9869cc1d100ced5f50cf03b557639835c364fbb5,"if n1kv_db_v2.is_multi_segment_member(session, id):",1,0,0.0,1251
9869cc1d100ced5f50cf03b557639835c364fbb5,"""that is member of a trunk segment"") % network['name']",1,0,0.0,1252
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Cannot delete network '%s' """,1,0,0.0,1253
9869cc1d100ced5f50cf03b557639835c364fbb5,"if n1kv_db_v2.is_trunk_member(session, id):",1,0,0.0,1254
9869cc1d100ced5f50cf03b557639835c364fbb5,"""delete the associated subnet first"") % network['name']",1,0,0.0,1255
9869cc1d100ced5f50cf03b557639835c364fbb5,"msg = _(""Cannot delete network '%s', """,1,0,0.0,1256
9869cc1d100ced5f50cf03b557639835c364fbb5,if network['subnets']:,1,0,0.0,1257
9869cc1d100ced5f50cf03b557639835c364fbb5,"network = self.get_network(context, id)",1,0,0.0,1258
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing the network to delete,1,0,0.0,1259
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete a network.,1,0,0.0,1260
9869cc1d100ced5f50cf03b557639835c364fbb5,binding.segmentation_id),1,0,0.0,1261
9869cc1d100ced5f50cf03b557639835c364fbb5,"def get_network(self, context, id, fields=None):",1,0,0.0,1262
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Updated network: %s"", net['id'])",1,0,0.0,1263
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve a Network.,1,0,0.0,1264
9869cc1d100ced5f50cf03b557639835c364fbb5,"nets = super(N1kvNeutronPluginV2, self).get_networks(context, filters,",1,0,0.0,1265
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Get networks"")",1,0,0.0,1266
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: list of network dictionaries.,1,0,0.0,1267
9869cc1d100ced5f50cf03b557639835c364fbb5,dictionary. Only these fields will be returned.,1,0,0.0,1268
9869cc1d100ced5f50cf03b557639835c364fbb5,:params fields: a list of strings that are valid keys in a network,1,0,0.0,1269
9869cc1d100ced5f50cf03b557639835c364fbb5,values for each key in filters,1,0,0.0,1270
9869cc1d100ced5f50cf03b557639835c364fbb5,returned by this function will have matched one of the,1,0,0.0,1271
9869cc1d100ced5f50cf03b557639835c364fbb5,exact match comparison for that value. Each result,1,0,0.0,1272
9869cc1d100ced5f50cf03b557639835c364fbb5,iterable containing values that will be used for an,1,0,0.0,1273
9869cc1d100ced5f50cf03b557639835c364fbb5,network object. Values in this dictiontary are an,1,0,0.0,1274
9869cc1d100ced5f50cf03b557639835c364fbb5,:param filters: a dictionary with keys that are valid keys for a,1,0,0.0,1275
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve a list of networks.,1,0,0.0,1276
9869cc1d100ced5f50cf03b557639835c364fbb5,"def get_networks(self, context, filters=None, fields=None):",1,0,0.0,1277
9869cc1d100ced5f50cf03b557639835c364fbb5,"return self._fields(net, fields)",1,0,0.0,1278
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_network_dict_member_segments(context, net)",1,0,0.0,1279
9869cc1d100ced5f50cf03b557639835c364fbb5,"net = super(N1kvNeutronPluginV2, self).get_network(context, id, None)",1,0,0.0,1280
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Get network: %s"", id)",1,0,0.0,1281
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: requested network dictionary,1,0,0.0,1282
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing the network to fetch,1,0,0.0,1283
9869cc1d100ced5f50cf03b557639835c364fbb5,"def delete_network(self, context, id):",1,0,0.0,1284
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_update_network_request(context, net, add_segments,",1,0,0.0,1285
9869cc1d100ced5f50cf03b557639835c364fbb5,for net in nets:,1,0,0.0,1286
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._check_provider_update(context, network['network'])",1,0,0.0,1287
9869cc1d100ced5f50cf03b557639835c364fbb5,Update network parameters.,1,0,0.0,1288
9869cc1d100ced5f50cf03b557639835c364fbb5,"def update_network(self, context, id, network):",1,0,0.0,1289
9869cc1d100ced5f50cf03b557639835c364fbb5,return net,1,0,0.0,1290
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Created network: %s"", net['id'])",1,0,0.0,1291
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete_network_db(context, net['id'])",1,0,0.0,1292
9869cc1d100ced5f50cf03b557639835c364fbb5,with excutils.save_and_reraise_exception():,1,0,0.0,1293
9869cc1d100ced5f50cf03b557639835c364fbb5,"except(cisco_exceptions.VSMError,",1,0,0.0,1294
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_create_network_request(context, net, segment_pairs)",1,0,0.0,1295
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_add_multi_segment_request(context, net['id'],",1,0,0.0,1296
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_network_dict_profile(context, net)",1,0,0.0,1297
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_network_dict_provider(context, net)",1,0,0.0,1298
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._process_l3_create(context, net, network['network'])",1,0,0.0,1299
9869cc1d100ced5f50cf03b557639835c364fbb5,segment_pairs),1,0,0.0,1300
9869cc1d100ced5f50cf03b557639835c364fbb5,"multicast_ip,",1,0,0.0,1301
9869cc1d100ced5f50cf03b557639835c364fbb5,"segmentation_id,",1,0,0.0,1302
9869cc1d100ced5f50cf03b557639835c364fbb5,"network_type,",1,0,0.0,1303
9869cc1d100ced5f50cf03b557639835c364fbb5,"net['id'],",1,0,0.0,1304
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.add_network_binding(session,",1,0,0.0,1305
9869cc1d100ced5f50cf03b557639835c364fbb5,network),1,0,0.0,1306
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing the network to update,1,0,0.0,1307
9869cc1d100ced5f50cf03b557639835c364fbb5,add_segments = [],1,0,0.0,1308
9869cc1d100ced5f50cf03b557639835c364fbb5,if binding.network_type != c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,0,0.0,1309
9869cc1d100ced5f50cf03b557639835c364fbb5,del_segments = [],1,0,0.0,1310
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.del_trunk_segment_binding(session,",1,0,0.0,1311
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv.SEGMENT_DEL,",1,0,0.0,1312
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.add_trunk_segment_binding(session,",1,0,0.0,1313
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profile['sub_type'])),1,0,0.0,1314
9869cc1d100ced5f50cf03b557639835c364fbb5,"binding.physical_network,",1,0,0.0,1315
9869cc1d100ced5f50cf03b557639835c364fbb5,binding.profile_id),1,0,0.0,1316
9869cc1d100ced5f50cf03b557639835c364fbb5,"net['id'], del_segments)",1,0,0.0,1317
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.del_multi_segment_binding(session,",1,0,0.0,1318
9869cc1d100ced5f50cf03b557639835c364fbb5,del_segments),1,0,0.0,1319
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_del_multi_segment_request(context, net['id'],",1,0,0.0,1320
9869cc1d100ced5f50cf03b557639835c364fbb5,add_segments),1,0,0.0,1321
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kv.SEGMENT_DEL)),1,0,0.0,1322
9869cc1d100ced5f50cf03b557639835c364fbb5,del_segments = (,1,0,0.0,1323
9869cc1d100ced5f50cf03b557639835c364fbb5,"net['id'], add_segments)",1,0,0.0,1324
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.add_multi_segment_binding(session,",1,0,0.0,1325
9869cc1d100ced5f50cf03b557639835c364fbb5,add_segments = (,1,0,0.0,1326
9869cc1d100ced5f50cf03b557639835c364fbb5,if binding.network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,0,0.0,1327
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._process_l3_update(context, net, network['network'])",1,0,0.0,1328
9869cc1d100ced5f50cf03b557639835c364fbb5,"net = super(N1kvNeutronPluginV2, self).update_network(context, id,",1,0,0.0,1329
9869cc1d100ced5f50cf03b557639835c364fbb5,None),1,0,0.0,1330
9869cc1d100ced5f50cf03b557639835c364fbb5,"return [self._fields(net, fields) for net in nets]",1,0,0.0,1331
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.delete_network_segment_pool(profile['id']),1,0,0.0,1332
9869cc1d100ced5f50cf03b557639835c364fbb5,return self._l3plugin,1,0,0.0,1333
9869cc1d100ced5f50cf03b557639835c364fbb5,@property,1,0,0.0,1334
9869cc1d100ced5f50cf03b557639835c364fbb5,return updated_port,1,0,0.0,1335
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_port_dict_profile(context, updated_port)",1,0,0.0,1336
9869cc1d100ced5f50cf03b557639835c364fbb5,updated_port),1,0,0.0,1337
9869cc1d100ced5f50cf03b557639835c364fbb5,"self).update_port(context, id, port)",1,0,0.0,1338
9869cc1d100ced5f50cf03b557639835c364fbb5,"updated_port = super(N1kvNeutronPluginV2,",1,0,0.0,1339
9869cc1d100ced5f50cf03b557639835c364fbb5,with context.session.begin(subtransactions=True):,1,0,0.0,1340
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Update port: %s"", id)",1,0,0.0,1341
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing the port to update,1,0,0.0,1342
9869cc1d100ced5f50cf03b557639835c364fbb5,Update port parameters.,1,0,0.0,1343
9869cc1d100ced5f50cf03b557639835c364fbb5,"def update_port(self, context, id, port):",1,0,0.0,1344
9869cc1d100ced5f50cf03b557639835c364fbb5,return pt,1,0,0.0,1345
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug(""Created port: %s"", pt)",1,0,0.0,1346
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete_port_db(context, pt, vm_network)",1,0,0.0,1347
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network_name),1,0,0.0,1348
9869cc1d100ced5f50cf03b557639835c364fbb5,"p_profile,",1,0,0.0,1349
9869cc1d100ced5f50cf03b557639835c364fbb5,"pt,",1,0,0.0,1350
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_create_port_request(context,",1,0,0.0,1351
9869cc1d100ced5f50cf03b557639835c364fbb5,"p_profile = n1kv_db_v2.get_policy_profile(session, profile_id)",1,0,0.0,1352
9869cc1d100ced5f50cf03b557639835c364fbb5,def l3plugin(self):,1,0,0.0,1353
9869cc1d100ced5f50cf03b557639835c364fbb5,except AttributeError:,1,0,0.0,1354
9869cc1d100ced5f50cf03b557639835c364fbb5,# Extract policy profile for VM network create in VSM.,1,0,0.0,1355
9869cc1d100ced5f50cf03b557639835c364fbb5,self._l3plugin = manager.NeutronManager.get_service_plugins().get(,1,0,0.0,1356
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network['port_count'] -= 1,1,0,0.0,1357
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _delete_port_db(self, context, port, vm_network):",1,0,0.0,1358
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._send_delete_port_request(context, port, vm_network)",1,0,0.0,1359
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._delete_port_db(context, port, vm_network)",1,0,0.0,1360
9869cc1d100ced5f50cf03b557639835c364fbb5,do_notify=False),1,0,0.0,1361
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.l3plugin.disassociate_floatingips(context, id,",1,0,0.0,1362
9869cc1d100ced5f50cf03b557639835c364fbb5,if self.l3plugin:,1,0,0.0,1363
9869cc1d100ced5f50cf03b557639835c364fbb5,port['network_id']),1,0,0.0,1364
9869cc1d100ced5f50cf03b557639835c364fbb5,"port[n1kv.PROFILE_ID],",1,0,0.0,1365
9869cc1d100ced5f50cf03b557639835c364fbb5,"vm_network = n1kv_db_v2.get_vm_network(context.session,",1,0,0.0,1366
9869cc1d100ced5f50cf03b557639835c364fbb5,"port = self.get_port(context, id)",1,0,0.0,1367
9869cc1d100ced5f50cf03b557639835c364fbb5,"self.l3plugin.prevent_l3_port_deletion(context, id)",1,0,0.0,1368
9869cc1d100ced5f50cf03b557639835c364fbb5,if self.l3plugin and l3_port_check:,1,0,0.0,1369
9869cc1d100ced5f50cf03b557639835c364fbb5,"# and l3-router.  If so, we should prevent deletion.",1,0,0.0,1370
9869cc1d100ced5f50cf03b557639835c364fbb5,"# if needed, check to see if this is a port owned by",1,0,0.0,1371
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID representing the port to delete,1,0,0.0,1372
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete a port.,1,0,0.0,1373
9869cc1d100ced5f50cf03b557639835c364fbb5,"def delete_port(self, context, id, l3_port_check=True):",1,0,0.0,1374
9869cc1d100ced5f50cf03b557639835c364fbb5,svc_constants.L3_ROUTER_NAT),1,0,0.0,1375
9869cc1d100ced5f50cf03b557639835c364fbb5,if not p_profile:,1,0,0.0,1376
9869cc1d100ced5f50cf03b557639835c364fbb5,pt),1,0,0.0,1377
9869cc1d100ced5f50cf03b557639835c364fbb5,"def create_port(self, context, port):",1,0,0.0,1378
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id_set = True,1,0,0.0,1379
9869cc1d100ced5f50cf03b557639835c364fbb5,# Set the default policy profile id for ports if no id is set,1,0,0.0,1380
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id = port['port'].get(n1kv.PROFILE_ID),1,0,0.0,1381
9869cc1d100ced5f50cf03b557639835c364fbb5,if n1kv.PROFILE_ID in port['port']:,1,0,0.0,1382
9869cc1d100ced5f50cf03b557639835c364fbb5,port['port']['n1kv:profile_id'] = p_profile['id'],1,0,0.0,1383
9869cc1d100ced5f50cf03b557639835c364fbb5,if p_profile:,1,0,0.0,1384
9869cc1d100ced5f50cf03b557639835c364fbb5,p_profile = self._get_policy_profile_by_name(p_profile_name),1,0,0.0,1385
9869cc1d100ced5f50cf03b557639835c364fbb5,p_profile_name = c_conf.CISCO_N1K.network_node_policy_profile,1,0,0.0,1386
9869cc1d100ced5f50cf03b557639835c364fbb5,constants.DEVICE_OWNER_FLOATINGIP]):,1,0,0.0,1387
9869cc1d100ced5f50cf03b557639835c364fbb5,"constants.DEVICE_OWNER_ROUTER_GW,",1,0,0.0,1388
9869cc1d100ced5f50cf03b557639835c364fbb5,"[constants.DEVICE_OWNER_DHCP, constants.DEVICE_OWNER_ROUTER_INTF,",1,0,0.0,1389
9869cc1d100ced5f50cf03b557639835c364fbb5,if ('device_id' in port['port'] and port['port']['device_owner'] in,1,0,0.0,1390
9869cc1d100ced5f50cf03b557639835c364fbb5,# Set the network policy profile id for auto generated L3/DHCP ports,1,0,0.0,1391
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id_set = False,1,0,0.0,1392
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network_name = None,1,0,0.0,1393
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network = None,1,0,0.0,1394
9869cc1d100ced5f50cf03b557639835c364fbb5,port_count = None,1,0,0.0,1395
9869cc1d100ced5f50cf03b557639835c364fbb5,p_profile = None,1,0,0.0,1396
9869cc1d100ced5f50cf03b557639835c364fbb5,/etc/neutron/cisco_plugins.ini file.,1,0,0.0,1397
9869cc1d100ced5f50cf03b557639835c364fbb5,Create a port. Use a default policy profile for ports created for dhcp,1,0,0.0,1398
9869cc1d100ced5f50cf03b557639835c364fbb5,p_profile_name = c_conf.CISCO_N1K.default_policy_profile,1,0,0.0,1399
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_id = self._process_policy_profile(context,",1,0,0.0,1400
9869cc1d100ced5f50cf03b557639835c364fbb5,"port['port'],",1,0,0.0,1401
9869cc1d100ced5f50cf03b557639835c364fbb5,port['port']),1,0,0.0,1402
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._process_portbindings_create_and_update(context,",1,0,0.0,1403
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.update_vm_network_port_count(context.session,",1,0,0.0,1404
9869cc1d100ced5f50cf03b557639835c364fbb5,port_count = vm_network['port_count'] + 1,1,0,0.0,1405
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network_name = vm_network['name'],1,0,0.0,1406
9869cc1d100ced5f50cf03b557639835c364fbb5,# Update port count of the VM network.,1,0,0.0,1407
9869cc1d100ced5f50cf03b557639835c364fbb5,port_count),1,0,0.0,1408
9869cc1d100ced5f50cf03b557639835c364fbb5,"pt['network_id'],",1,0,0.0,1409
9869cc1d100ced5f50cf03b557639835c364fbb5,"vm_network = n1kv_db_v2.add_vm_network(context.session,",1,0,0.0,1410
9869cc1d100ced5f50cf03b557639835c364fbb5,port_count = 1,1,0,0.0,1411
9869cc1d100ced5f50cf03b557639835c364fbb5,"vm_network_name = ""%s%s_%s"" % (c_const.VM_NETWORK_NAME_PREFIX,",1,0,0.0,1412
9869cc1d100ced5f50cf03b557639835c364fbb5,# Create a VM Network if no VM network exists.,1,0,0.0,1413
9869cc1d100ced5f50cf03b557639835c364fbb5,except cisco_exceptions.VMNetworkNotFound:,1,0,0.0,1414
9869cc1d100ced5f50cf03b557639835c364fbb5,pt['network_id']),1,0,0.0,1415
9869cc1d100ced5f50cf03b557639835c364fbb5,"context.session,",1,0,0.0,1416
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network = n1kv_db_v2.get_vm_network(,1,0,0.0,1417
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._extend_port_dict_profile(context, pt)",1,0,0.0,1418
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.add_port_binding(session, pt['id'], profile_id)",1,0,0.0,1419
9869cc1d100ced5f50cf03b557639835c364fbb5,port),1,0,0.0,1420
9869cc1d100ced5f50cf03b557639835c364fbb5,"pt = super(N1kvNeutronPluginV2, self).create_port(context,",1,0,0.0,1421
9869cc1d100ced5f50cf03b557639835c364fbb5,"net = super(N1kvNeutronPluginV2, self).create_network(context,",1,0,0.0,1422
9869cc1d100ced5f50cf03b557639835c364fbb5,"multicast_ip = ""0.0.0.0""",1,0,0.0,1423
9869cc1d100ced5f50cf03b557639835c364fbb5,segmentation_id),1,0,0.0,1424
9869cc1d100ced5f50cf03b557639835c364fbb5,elif network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1425
9869cc1d100ced5f50cf03b557639835c364fbb5,name = network['id'] + c_const.BRIDGE_DOMAIN_SUFFIX,1,0,0.0,1426
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_delete_network_request: %s', network['id'])",1,0,0.0,1427
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete encapsulation profile if network is of type OVERLAY Trunk.,1,0,0.0,1428
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete bridge domain if network is of type Overlay.,1,0,0.0,1429
9869cc1d100ced5f50cf03b557639835c364fbb5,Send delete network request to VSM.,1,0,0.0,1430
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_delete_network_request(self, context, network):",1,0,0.0,1431
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.update_network_segment(network['id'], body)",1,0,0.0,1432
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_dict),1,0,0.0,1433
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.update_encapsulation_profile(context, encap_profile,",1,0,0.0,1434
9869cc1d100ced5f50cf03b557639835c364fbb5,del_segments))},1,0,0.0,1435
9869cc1d100ced5f50cf03b557639835c364fbb5,'delMappings': (,1,0,0.0,1436
9869cc1d100ced5f50cf03b557639835c364fbb5,"add_segments)),",1,0,0.0,1437
9869cc1d100ced5f50cf03b557639835c364fbb5,'addMappings': (,1,0,0.0,1438
9869cc1d100ced5f50cf03b557639835c364fbb5,"encap_dict = {'name': encap_profile,",1,0,0.0,1439
9869cc1d100ced5f50cf03b557639835c364fbb5,c_const.ENCAPSULATION_PROFILE_SUFFIX),1,0,0.0,1440
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_profile = (network['id'] +,1,0,0.0,1441
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('del_segments=%s', body['delSegments'])",1,0,0.0,1442
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('add_segments=%s', body['addSegments'])",1,0,0.0,1443
9869cc1d100ced5f50cf03b557639835c364fbb5,body['delSegments'] = network['del_segment_list'],1,0,0.0,1444
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.delete_bridge_domain(name),1,0,0.0,1445
9869cc1d100ced5f50cf03b557639835c364fbb5,profile = self.get_network_profile(,1,0,0.0,1446
9869cc1d100ced5f50cf03b557639835c364fbb5,body['segmentType'] = profile['sub_type'],1,0,0.0,1447
9869cc1d100ced5f50cf03b557639835c364fbb5,"context, network[n1kv.PROFILE_ID])",1,0,0.0,1448
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_update_subnet_request: %s', subnet['name'])",1,0,0.0,1449
9869cc1d100ced5f50cf03b557639835c364fbb5,Send update subnet request to VSM.,1,0,0.0,1450
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_update_subnet_request(self, subnet):",1,0,0.0,1451
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.create_ip_pool(subnet),1,0,0.0,1452
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_create_subnet_request: %s', subnet['id'])",1,0,0.0,1453
9869cc1d100ced5f50cf03b557639835c364fbb5,:param subnet: subnet dictionary,1,0,0.0,1454
9869cc1d100ced5f50cf03b557639835c364fbb5,Send create subnet request to VSM.,1,0,0.0,1455
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_create_subnet_request(self, context, subnet):",1,0,0.0,1456
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.delete_network_segment(network['id']),1,0,0.0,1457
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_dict),1,0,0.0,1458
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_dict['delSegments'].append(mapping_dict),1,0,0.0,1459
9869cc1d100ced5f50cf03b557639835c364fbb5,"(segment1, segment2) = segment_pair",1,0,0.0,1460
9869cc1d100ced5f50cf03b557639835c364fbb5,for segment_pair in encap_dict[profile]:,1,0,0.0,1461
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_dict = {'name': profile,",1,0,0.0,1462
9869cc1d100ced5f50cf03b557639835c364fbb5,"encap_dict = n1kv_db_v2.get_multi_segment_encap_dict(session,",1,0,0.0,1463
9869cc1d100ced5f50cf03b557639835c364fbb5,c_const.NETWORK_TYPE_MULTI_SEGMENT):,1,0,0.0,1464
9869cc1d100ced5f50cf03b557639835c364fbb5,elif (network[providernet.NETWORK_TYPE] ==,1,0,0.0,1465
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.delete_encapsulation_profile(profile_name),1,0,0.0,1466
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_name = (network['id'] +,1,0,0.0,1467
9869cc1d100ced5f50cf03b557639835c364fbb5,body['addSegments'] = network['add_segment_list'],1,0,0.0,1468
9869cc1d100ced5f50cf03b557639835c364fbb5,body['mode'] = c_const.NETWORK_TYPE_TRUNK,1,0,0.0,1469
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv_db_v2.reserve_specific_vlan(session,",1,0,0.0,1470
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.create_encapsulation_profile(encap_dict),1,0,0.0,1471
9869cc1d100ced5f50cf03b557639835c364fbb5,"segment_pairs)),",1,0,0.0,1472
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._get_encap_segments(context,",1,0,0.0,1473
9869cc1d100ced5f50cf03b557639835c364fbb5,'add_segment_list': (,1,0,0.0,1474
9869cc1d100ced5f50cf03b557639835c364fbb5,"c_const.ENCAPSULATION_PROFILE_SUFFIX),",1,0,0.0,1475
9869cc1d100ced5f50cf03b557639835c364fbb5,encap_dict = {'name': (network['name'] +,1,0,0.0,1476
9869cc1d100ced5f50cf03b557639835c364fbb5,if profile['sub_type'] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1477
9869cc1d100ced5f50cf03b557639835c364fbb5,network['del_segment_list'] = [],1,0,0.0,1478
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kv.SEGMENT_ADD),1,0,0.0,1479
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._populate_member_segments(context, network, segment_pairs,",1,0,0.0,1480
9869cc1d100ced5f50cf03b557639835c364fbb5,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1481
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.create_bridge_domain(network, profile['sub_type'])",1,0,0.0,1482
9869cc1d100ced5f50cf03b557639835c364fbb5,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1483
9869cc1d100ced5f50cf03b557639835c364fbb5,network[n1kv.PROFILE_ID]),1,0,0.0,1484
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile = self.get_network_profile(context,",1,0,0.0,1485
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_create_network_request: %s', network['id'])",1,0,0.0,1486
9869cc1d100ced5f50cf03b557639835c364fbb5,:param network: network dictionary,1,0,0.0,1487
9869cc1d100ced5f50cf03b557639835c364fbb5,Create a bridge domain for network of type Overlay.,1,0,0.0,1488
9869cc1d100ced5f50cf03b557639835c364fbb5,Send create network request to VSM.,1,0,0.0,1489
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_create_network_request(self, context, network, segment_pairs):",1,0,0.0,1490
9869cc1d100ced5f50cf03b557639835c364fbb5,'del_segment_list': []},1,0,0.0,1491
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.create_network_segment(network, profile)",1,0,0.0,1492
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kv.SEGMENT_DEL),1,0,0.0,1493
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_update_network_request(self, context, network, add_segments,",1,0,0.0,1494
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._populate_member_segments(context, network, del_segments,",1,0,0.0,1495
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._populate_member_segments(context, network, add_segments,",1,0,0.0,1496
9869cc1d100ced5f50cf03b557639835c364fbb5,'delSegments': []},1,0,0.0,1497
9869cc1d100ced5f50cf03b557639835c364fbb5,"'addSegments': [],",1,0,0.0,1498
9869cc1d100ced5f50cf03b557639835c364fbb5,"'segmentType': profile['segment_type'],",1,0,0.0,1499
9869cc1d100ced5f50cf03b557639835c364fbb5,"'mode': 'access',",1,0,0.0,1500
9869cc1d100ced5f50cf03b557639835c364fbb5,"'vlan': network[providernet.SEGMENTATION_ID],",1,0,0.0,1501
9869cc1d100ced5f50cf03b557639835c364fbb5,"'networkSegmentPool': profile['id'],",1,0,0.0,1502
9869cc1d100ced5f50cf03b557639835c364fbb5,"'id': network['id'],",1,0,0.0,1503
9869cc1d100ced5f50cf03b557639835c364fbb5,"body = {'description': network['name'],",1,0,0.0,1504
9869cc1d100ced5f50cf03b557639835c364fbb5,"db_session, network[n1kv.PROFILE_ID], context.tenant_id)",1,0,0.0,1505
9869cc1d100ced5f50cf03b557639835c364fbb5,profile = n1kv_db_v2.get_network_profile(,1,0,0.0,1506
9869cc1d100ced5f50cf03b557639835c364fbb5,db_session = context.session,1,0,0.0,1507
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_update_network_request: %s', network['id'])",1,0,0.0,1508
9869cc1d100ced5f50cf03b557639835c364fbb5,:param del_segments: List of segments bindings,1,0,0.0,1509
9869cc1d100ced5f50cf03b557639835c364fbb5,that need to be deleted,1,0,0.0,1510
9869cc1d100ced5f50cf03b557639835c364fbb5,:param add_segments: List of segments bindings,1,0,0.0,1511
9869cc1d100ced5f50cf03b557639835c364fbb5,Send update network request to VSM.,1,0,0.0,1512
9869cc1d100ced5f50cf03b557639835c364fbb5,del_segments):,1,0,0.0,1513
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.update_ip_pool(subnet),1,0,0.0,1514
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_delete_subnet_request(self, context, subnet):",1,0,0.0,1515
9869cc1d100ced5f50cf03b557639835c364fbb5,Send delete subnet request to VSM.,1,0,0.0,1516
9869cc1d100ced5f50cf03b557639835c364fbb5,"'seg_id': segmentation_id,",1,0,0.0,1517
9869cc1d100ced5f50cf03b557639835c364fbb5,"{'phy_net': physical_network,",1,0,0.0,1518
9869cc1d100ced5f50cf03b557639835c364fbb5,"'multicast_ip %(multicast_ip)s',",1,0,0.0,1519
9869cc1d100ced5f50cf03b557639835c364fbb5,"'seg_id %(seg_id)s, '",1,0,0.0,1520
9869cc1d100ced5f50cf03b557639835c364fbb5,"'seg_type %(net_type)s, '",1,0,0.0,1521
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('Physical_network %(phy_net)s, '",1,0,0.0,1522
9869cc1d100ced5f50cf03b557639835c364fbb5,context.tenant_id),1,0,0.0,1523
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_id,",1,0,0.0,1524
9869cc1d100ced5f50cf03b557639835c364fbb5,"multicast_ip) = n1kv_db_v2.alloc_network(session,",1,0,0.0,1525
9869cc1d100ced5f50cf03b557639835c364fbb5,"(physical_network, network_type, segmentation_id,",1,0,0.0,1526
9869cc1d100ced5f50cf03b557639835c364fbb5,# tenant network,1,0,0.0,1527
9869cc1d100ced5f50cf03b557639835c364fbb5,if not network_type:,1,0,0.0,1528
9869cc1d100ced5f50cf03b557639835c364fbb5,with session.begin(subtransactions=True):,1,0,0.0,1529
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('Create network: profile_id=%s', profile_id)",1,0,0.0,1530
9869cc1d100ced5f50cf03b557639835c364fbb5,segment_pairs = None,1,0,0.0,1531
9869cc1d100ced5f50cf03b557639835c364fbb5,"profile_id = self._process_network_profile(context, network['network'])",1,0,0.0,1532
9869cc1d100ced5f50cf03b557639835c364fbb5,network['network']),1,0,0.0,1533
9869cc1d100ced5f50cf03b557639835c364fbb5,"segmentation_id) = self._process_provider_create(context,",1,0,0.0,1534
9869cc1d100ced5f50cf03b557639835c364fbb5,"(network_type, physical_network,",1,0,0.0,1535
9869cc1d100ced5f50cf03b557639835c364fbb5,Create network based on network profile.,1,0,0.0,1536
9869cc1d100ced5f50cf03b557639835c364fbb5,"'net_type': network_type,",1,0,0.0,1537
9869cc1d100ced5f50cf03b557639835c364fbb5,'multicast_ip': multicast_ip}),1,0,0.0,1538
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_delete_subnet_request: %s', subnet['name'])",1,0,0.0,1539
9869cc1d100ced5f50cf03b557639835c364fbb5,if network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,0,0.0,1540
9869cc1d100ced5f50cf03b557639835c364fbb5,raise cisco_exceptions.VlanIDOutsidePool(),1,0,0.0,1541
9869cc1d100ced5f50cf03b557639835c364fbb5,if not seg_min <= segmentation_id <= seg_max:,1,0,0.0,1542
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profile['segment_range']),1,0,0.0,1543
9869cc1d100ced5f50cf03b557639835c364fbb5,"seg_min, seg_max = self._get_segment_range(",1,0,0.0,1544
9869cc1d100ced5f50cf03b557639835c364fbb5,# provider network,1,0,0.0,1545
9869cc1d100ced5f50cf03b557639835c364fbb5,raise n_exc.TenantNetworksDisabled(),1,0,0.0,1546
9869cc1d100ced5f50cf03b557639835c364fbb5,if not segmentation_id:,1,0,0.0,1547
9869cc1d100ced5f50cf03b557639835c364fbb5,)),1,0,0.0,1548
9869cc1d100ced5f50cf03b557639835c364fbb5,network_profile['sub_type'],1,0,0.0,1549
9869cc1d100ced5f50cf03b557639835c364fbb5,"physical_network,",1,0,0.0,1550
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kv.SEGMENT_ADD,",1,0,0.0,1551
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._parse_trunk_segments(context, network['network'],",1,0,0.0,1552
9869cc1d100ced5f50cf03b557639835c364fbb5,profile_id),1,0,0.0,1553
9869cc1d100ced5f50cf03b557639835c364fbb5,"network_profile = self.get_network_profile(context,",1,0,0.0,1554
9869cc1d100ced5f50cf03b557639835c364fbb5,elif network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1555
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('Seg list %s ', segment_pairs)",1,0,0.0,1556
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kv.SEGMENT_ADD)),1,0,0.0,1557
9869cc1d100ced5f50cf03b557639835c364fbb5,"self._parse_multi_segments(context, network['network'],",1,0,0.0,1558
9869cc1d100ced5f50cf03b557639835c364fbb5,segment_pairs = (,1,0,0.0,1559
9869cc1d100ced5f50cf03b557639835c364fbb5,"def create_network(self, context, network):",1,0,0.0,1560
9869cc1d100ced5f50cf03b557639835c364fbb5,return binding.segmentation_id,1,0,0.0,1561
9869cc1d100ced5f50cf03b557639835c364fbb5,"binding = n1kv_db_v2.get_network_binding(session, id)",1,0,0.0,1562
9869cc1d100ced5f50cf03b557639835c364fbb5,:returns: segmentation ID for the network,1,0,0.0,1563
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_create_port_request: %s', port)",1,0,0.0,1564
9869cc1d100ced5f50cf03b557639835c364fbb5,network,1,0,0.0,1565
9869cc1d100ced5f50cf03b557639835c364fbb5,:param vm_network_name: string representing the name of the VM,1,0,0.0,1566
9869cc1d100ced5f50cf03b557639835c364fbb5,VM Network,1,0,0.0,1567
9869cc1d100ced5f50cf03b557639835c364fbb5,:param port_count: integer representing the number of ports in one,1,0,0.0,1568
9869cc1d100ced5f50cf03b557639835c364fbb5,:param port: port dictionary,1,0,0.0,1569
9869cc1d100ced5f50cf03b557639835c364fbb5,VM network on the VSM.,1,0,0.0,1570
9869cc1d100ced5f50cf03b557639835c364fbb5,"If the VM network already exists, bind this port to the existing",1,0,0.0,1571
9869cc1d100ced5f50cf03b557639835c364fbb5,Create a VM network for a network and policy profile combination.,1,0,0.0,1572
9869cc1d100ced5f50cf03b557639835c364fbb5,Send create port request to VSM.,1,0,0.0,1573
9869cc1d100ced5f50cf03b557639835c364fbb5,vm_network_name):,1,0,0.0,1574
9869cc1d100ced5f50cf03b557639835c364fbb5,"policy_profile,",1,0,0.0,1575
9869cc1d100ced5f50cf03b557639835c364fbb5,"port_count,",1,0,0.0,1576
9869cc1d100ced5f50cf03b557639835c364fbb5,"port,",1,0,0.0,1577
9869cc1d100ced5f50cf03b557639835c364fbb5,"context,",1,0,0.0,1578
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_create_port_request(self,",1,0,0.0,1579
9869cc1d100ced5f50cf03b557639835c364fbb5,n1kvclient.delete_ip_pool(subnet['id']),1,0,0.0,1580
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.update_network_segment(subnet['network_id'], body=body)",1,0,0.0,1581
9869cc1d100ced5f50cf03b557639835c364fbb5,"body = {'ipPool': subnet['id'], 'deleteSubnet': True}",1,0,0.0,1582
9869cc1d100ced5f50cf03b557639835c364fbb5,if port_count == 1:,1,0,0.0,1583
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.create_vm_network(port,",1,0,0.0,1584
9869cc1d100ced5f50cf03b557639835c364fbb5,"vm_network_name,",1,0,0.0,1585
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.update_n1kv_port(vm_network_name, port_id, body)",1,0,0.0,1586
9869cc1d100ced5f50cf03b557639835c364fbb5,:param id: UUID of the network,1,0,0.0,1587
9869cc1d100ced5f50cf03b557639835c364fbb5,Retrieve segmentation ID for a given network.,1,0,0.0,1588
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _get_segmentation_id(self, context, id):",1,0,0.0,1589
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.delete_n1kv_port(vm_network['name'], port['id'])",1,0,0.0,1590
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_delete_port_request: %s', port['id'])",1,0,0.0,1591
9869cc1d100ced5f50cf03b557639835c364fbb5,Delete the port on the VSM.,1,0,0.0,1592
9869cc1d100ced5f50cf03b557639835c364fbb5,Send delete port request to VSM.,1,0,0.0,1593
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_delete_port_request(self, context, port, vm_network):",1,0,0.0,1594
9869cc1d100ced5f50cf03b557639835c364fbb5,'macAddress': mac_address},1,0,0.0,1595
9869cc1d100ced5f50cf03b557639835c364fbb5,policy_profile),1,0,0.0,1596
9869cc1d100ced5f50cf03b557639835c364fbb5,"body = {'portId': port_id,",1,0,0.0,1597
9869cc1d100ced5f50cf03b557639835c364fbb5,"LOG.debug('_send_update_port_request: %s', port_id)",1,0,0.0,1598
9869cc1d100ced5f50cf03b557639835c364fbb5,:param vm_network_name: VM network name to which the port is bound,1,0,0.0,1599
9869cc1d100ced5f50cf03b557639835c364fbb5,:param mac_address: string representing the mac address,1,0,0.0,1600
9869cc1d100ced5f50cf03b557639835c364fbb5,:param port_id: UUID representing port to update,1,0,0.0,1601
9869cc1d100ced5f50cf03b557639835c364fbb5,Send update port request to VSM.,1,0,0.0,1602
9869cc1d100ced5f50cf03b557639835c364fbb5,"def _send_update_port_request(self, port_id, mac_address, vm_network_name):",1,0,0.0,1603
9869cc1d100ced5f50cf03b557639835c364fbb5,"n1kvclient.create_n1kv_port(port, vm_network_name)",1,0,0.0,1604
9869cc1d100ced5f50cf03b557639835c364fbb5,test_plugin.NeutronDbPluginV2TestCase):,1,0,0.0,1605
