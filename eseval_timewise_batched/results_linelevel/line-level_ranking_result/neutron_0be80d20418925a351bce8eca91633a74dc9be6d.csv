commit_id,line,line_level_label,count,line_score,row
0be80d20418925a351bce8eca91633a74dc9be6d,":param condition: A 3-tuple containing (column, operation, match)",1,7,1.0,1
0be80d20418925a351bce8eca91633a74dc9be6d,:param row:       An OVSDB Row,1,4,0.5714285714285714,2
0be80d20418925a351bce8eca91633a74dc9be6d,"# There is a small window for a race, so retry up to a second",1,3,0.42857142857142855,3
0be80d20418925a351bce8eca91633a74dc9be6d,"# both match and val are primitive types, so type can be used for type",1,3,0.42857142857142855,4
0be80d20418925a351bce8eca91633a74dc9be6d,"""""""Return whether a condition matches a row",1,2,0.2857142857142857,5
0be80d20418925a351bce8eca91633a74dc9be6d,if match == []:,1,2,0.2857142857142857,6
0be80d20418925a351bce8eca91633a74dc9be6d,# - 'match' is an empty list and column's type is optional;,1,2,0.2857142857142857,7
0be80d20418925a351bce8eca91633a74dc9be6d,if type(match) is not type(val):,1,2,0.2857142857142857,8
0be80d20418925a351bce8eca91633a74dc9be6d,"col, op, match = condition",1,2,0.2857142857142857,9
0be80d20418925a351bce8eca91633a74dc9be6d,# - 'value' is an empty and  column's type is optional,1,2,0.2857142857142857,10
0be80d20418925a351bce8eca91633a74dc9be6d,if seqno is None:,1,2,0.2857142857142857,11
0be80d20418925a351bce8eca91633a74dc9be6d,if rl.table is None:,1,2,0.2857142857142857,12
0be80d20418925a351bce8eca91633a74dc9be6d,"# no table means uuid only, no column means lookup table only has one row",1,2,0.2857142857142857,13
0be80d20418925a351bce8eca91633a74dc9be6d,if default is not _NO_DEFAULT:,1,2,0.2857142857142857,14
0be80d20418925a351bce8eca91633a74dc9be6d,if rl.column is None:,1,2,0.2857142857142857,15
0be80d20418925a351bce8eca91633a74dc9be6d,"if op == ""="":",1,1,0.14285714285714285,16
0be80d20418925a351bce8eca91633a74dc9be6d,return val != match,1,1,0.14285714285714285,17
0be80d20418925a351bce8eca91633a74dc9be6d,if elem not in val:,1,1,0.14285714285714285,18
0be80d20418925a351bce8eca91633a74dc9be6d,for elem in set(match):,1,1,0.14285714285714285,19
0be80d20418925a351bce8eca91633a74dc9be6d,"if not all([val, match]):",1,1,0.14285714285714285,20
0be80d20418925a351bce8eca91633a74dc9be6d,if op == '=':,1,1,0.14285714285714285,21
0be80d20418925a351bce8eca91633a74dc9be6d,if key not in val or match[key] == val[key]:,1,1,0.14285714285714285,22
0be80d20418925a351bce8eca91633a74dc9be6d,if (key not in val or match[key] != val[key]):,1,1,0.14285714285714285,23
0be80d20418925a351bce8eca91633a74dc9be6d,for key in match:,1,1,0.14285714285714285,24
0be80d20418925a351bce8eca91633a74dc9be6d,"if isinstance(match, dict):",1,1,0.14285714285714285,25
0be80d20418925a351bce8eca91633a74dc9be6d,if val != match:,1,1,0.14285714285714285,26
0be80d20418925a351bce8eca91633a74dc9be6d,if elem in val:,1,1,0.14285714285714285,27
0be80d20418925a351bce8eca91633a74dc9be6d,"for k, v in obj.items():",1,1,0.14285714285714285,28
0be80d20418925a351bce8eca91633a74dc9be6d,if val == match:,1,1,0.14285714285714285,29
0be80d20418925a351bce8eca91633a74dc9be6d,"""""""Return whether the row matches the list of conditions""""""",1,1,0.14285714285714285,30
0be80d20418925a351bce8eca91633a74dc9be6d,"return all(condition_match(row, cond) for cond in conditions)",1,1,0.14285714285714285,31
0be80d20418925a351bce8eca91633a74dc9be6d,if len(table.indexes) == 1:,1,1,0.14285714285714285,32
0be80d20418925a351bce8eca91633a74dc9be6d,if len(idx) == 1:,1,1,0.14285714285714285,33
0be80d20418925a351bce8eca91633a74dc9be6d,"if isinstance(obj, collections.Mapping):",1,1,0.14285714285714285,34
0be80d20418925a351bce8eca91633a74dc9be6d,matched = True,1,1,0.14285714285714285,35
0be80d20418925a351bce8eca91633a74dc9be6d,"if isinstance(v, api.Command):",1,1,0.14285714285714285,36
0be80d20418925a351bce8eca91633a74dc9be6d,"for i, v in enumerate(obj):",1,1,0.14285714285714285,37
0be80d20418925a351bce8eca91633a74dc9be6d,# a tuple with the Commands replaced with their results,1,1,0.14285714285714285,38
0be80d20418925a351bce8eca91633a74dc9be6d,"return type(obj)(getattr(v, ""result"", v) for v in obj)",1,1,0.14285714285714285,39
0be80d20418925a351bce8eca91633a74dc9be6d,# ovs_lib only uses dict '=' and '!=' searches for now,1,1,0.14285714285714285,40
0be80d20418925a351bce8eca91633a74dc9be6d,return val == match,1,1,0.14285714285714285,41
0be80d20418925a351bce8eca91633a74dc9be6d,"_(""Column type and condition operand do not match""))",1,1,0.14285714285714285,42
0be80d20418925a351bce8eca91633a74dc9be6d,if not retry:,1,1,0.14285714285714285,43
0be80d20418925a351bce8eca91633a74dc9be6d,match = None,1,1,0.14285714285714285,44
0be80d20418925a351bce8eca91633a74dc9be6d,# Tables with no index in OVSDB and special record lookup rules,1,1,0.14285714285714285,45
0be80d20418925a351bce8eca91633a74dc9be6d,"""""""Lookup an IDL row in a table by column/value""""""",1,1,0.14285714285714285,46
0be80d20418925a351bce8eca91633a74dc9be6d,for r in tab.rows.values():,1,1,0.14285714285714285,47
0be80d20418925a351bce8eca91633a74dc9be6d,"if getattr(r, column) == match:",1,1,0.14285714285714285,48
0be80d20418925a351bce8eca91633a74dc9be6d,"if isinstance(record, uuid.UUID):",1,1,0.14285714285714285,49
0be80d20418925a351bce8eca91633a74dc9be6d,if rl.uuid_column:,1,1,0.14285714285714285,50
0be80d20418925a351bce8eca91633a74dc9be6d,if len(rows) != 1:,1,1,0.14285714285714285,51
0be80d20418925a351bce8eca91633a74dc9be6d,row = rows[0],1,1,0.14285714285714285,52
0be80d20418925a351bce8eca91633a74dc9be6d,return row,1,1,0.14285714285714285,53
0be80d20418925a351bce8eca91633a74dc9be6d,if err:,1,1,0.14285714285714285,54
0be80d20418925a351bce8eca91633a74dc9be6d,rpc = jsonrpc.Connection(strm),1,1,0.14285714285714285,55
0be80d20418925a351bce8eca91633a74dc9be6d,"row = row_by_value(idl_, rl.table, rl.column, record)",1,1,0.14285714285714285,56
0be80d20418925a351bce8eca91633a74dc9be6d,if try_add_manager:,1,1,0.14285714285714285,57
0be80d20418925a351bce8eca91633a74dc9be6d,"if isinstance(val, list) and len(val):",1,1,0.14285714285714285,58
0be80d20418925a351bce8eca91633a74dc9be6d,"if (not all([match, val]) and",1,1,0.14285714285714285,59
0be80d20418925a351bce8eca91633a74dc9be6d,if time.time() > stop:,1,1,0.14285714285714285,60
0be80d20418925a351bce8eca91633a74dc9be6d,# Types of 'val' and 'match' arguments MUST match in all cases with 2,1,1,0.14285714285714285,61
0be80d20418925a351bce8eca91633a74dc9be6d,if col_type.is_optional():,1,1,0.14285714285714285,62
0be80d20418925a351bce8eca91633a74dc9be6d,"if isinstance(val[0], idl.Row):",1,1,0.14285714285714285,63
0be80d20418925a351bce8eca91633a74dc9be6d,val = [v.uuid for v in val],1,1,0.14285714285714285,64
0be80d20418925a351bce8eca91633a74dc9be6d,if col == '_uuid':,1,1,0.14285714285714285,65
0be80d20418925a351bce8eca91633a74dc9be6d,"If column's type is optional, the value will be returned as a single",1,1,0.14285714285714285,66
0be80d20418925a351bce8eca91633a74dc9be6d,"""""""Retrieve column value from the given row.",1,1,0.14285714285714285,67
0be80d20418925a351bce8eca91633a74dc9be6d,ovs_poller.block(),1,0,0.0,68
0be80d20418925a351bce8eca91633a74dc9be6d,val = row.uuid,1,0,0.0,69
0be80d20418925a351bce8eca91633a74dc9be6d,ovs_poller.timer_wait(timeout * 1000),1,0,0.0,70
0be80d20418925a351bce8eca91633a74dc9be6d,"raise Exception(_(""Timeout""))",1,0,0.0,71
0be80d20418925a351bce8eca91633a74dc9be6d,"def get_column_value(row, col):",1,0,0.0,72
0be80d20418925a351bce8eca91633a74dc9be6d,element instead of a list of length 1.,1,0,0.0,73
0be80d20418925a351bce8eca91633a74dc9be6d,"""""""",1,0,0.0,74
0be80d20418925a351bce8eca91633a74dc9be6d,# ovs-vsctl treats lists of 1 as single results,1,0,0.0,75
0be80d20418925a351bce8eca91633a74dc9be6d,else:,1,0,0.0,76
0be80d20418925a351bce8eca91633a74dc9be6d,"val = getattr(row, col)",1,0,0.0,77
0be80d20418925a351bce8eca91633a74dc9be6d,# Idl returns lists of Rows where ovs-vsctl returns lists of UUIDs,1,0,0.0,78
0be80d20418925a351bce8eca91633a74dc9be6d,col_type = row._table.columns[col].type,1,0,0.0,79
0be80d20418925a351bce8eca91633a74dc9be6d,val = val[0],1,0,0.0,80
0be80d20418925a351bce8eca91633a74dc9be6d,ovs_poller = poller.Poller(),1,0,0.0,81
0be80d20418925a351bce8eca91633a74dc9be6d,return val,1,0,0.0,82
0be80d20418925a351bce8eca91633a74dc9be6d,_idl.wait(ovs_poller),1,0,0.0,83
0be80d20418925a351bce8eca91633a74dc9be6d,raise,1,0,0.0,84
0be80d20418925a351bce8eca91633a74dc9be6d,while _idl.change_seqno == seqno and not _idl.run():,1,0,0.0,85
0be80d20418925a351bce8eca91633a74dc9be6d,"helpers.enable_connection_uri(connection, set_timeout=True)",1,0,0.0,86
0be80d20418925a351bce8eca91633a74dc9be6d,"val = get_column_value(row, col)",1,0,0.0,87
0be80d20418925a351bce8eca91633a74dc9be6d,"def get_schema_helper(connection, schema_name, retry=True,",1,0,0.0,88
0be80d20418925a351bce8eca91633a74dc9be6d,try_add_manager=True):,1,0,0.0,89
0be80d20418925a351bce8eca91633a74dc9be6d,"return _get_schema_helper(connection, schema_name)",1,0,0.0,90
0be80d20418925a351bce8eca91633a74dc9be6d,except Exception:,1,0,0.0,91
0be80d20418925a351bce8eca91633a74dc9be6d,# We may have failed due to set-manager not being called,1,0,0.0,92
0be80d20418925a351bce8eca91633a74dc9be6d,"@tenacity.retry(wait=tenacity.wait_exponential(multiplier=0.01),",1,0,0.0,93
0be80d20418925a351bce8eca91633a74dc9be6d,stop = time.time() + timeout,1,0,0.0,94
0be80d20418925a351bce8eca91633a74dc9be6d,"stop=tenacity.stop_after_delay(1),",1,0,0.0,95
0be80d20418925a351bce8eca91633a74dc9be6d,reraise=True),1,0,0.0,96
0be80d20418925a351bce8eca91633a74dc9be6d,def do_get_schema_helper():,1,0,0.0,97
0be80d20418925a351bce8eca91633a74dc9be6d,return do_get_schema_helper(),1,0,0.0,98
0be80d20418925a351bce8eca91633a74dc9be6d,"def wait_for_change(_idl, timeout, seqno=None):",1,0,0.0,99
0be80d20418925a351bce8eca91633a74dc9be6d,seqno = _idl.change_seqno,1,0,0.0,100
0be80d20418925a351bce8eca91633a74dc9be6d,"def condition_match(row, condition):",1,0,0.0,101
0be80d20418925a351bce8eca91633a74dc9be6d,"elif isinstance(obj, api.Command):",1,0,0.0,102
0be80d20418925a351bce8eca91633a74dc9be6d,# equality here.,1,0,0.0,103
0be80d20418925a351bce8eca91633a74dc9be6d,obj[k] = v.result,1,0,0.0,104
0be80d20418925a351bce8eca91633a74dc9be6d,idx = table.indexes[0],1,0,0.0,105
0be80d20418925a351bce8eca91633a74dc9be6d,return idx[0].name,1,0,0.0,106
0be80d20418925a351bce8eca91633a74dc9be6d,def db_replace_record(obj):,1,0,0.0,107
0be80d20418925a351bce8eca91633a74dc9be6d,"""""""Replace any api.Command objects with their results",1,0,0.0,108
0be80d20418925a351bce8eca91633a74dc9be6d,This method should leave obj untouched unless the object contains an,1,0,0.0,109
0be80d20418925a351bce8eca91633a74dc9be6d,api.Command object.,1,0,0.0,110
0be80d20418925a351bce8eca91633a74dc9be6d,"elif (isinstance(obj, collections.Sequence)",1,0,0.0,111
0be80d20418925a351bce8eca91633a74dc9be6d,"def row_match(row, conditions):",1,0,0.0,112
0be80d20418925a351bce8eca91633a74dc9be6d,"and not isinstance(obj, six.string_types)):",1,0,0.0,113
0be80d20418925a351bce8eca91633a74dc9be6d,obj[i] = v.result,1,0,0.0,114
0be80d20418925a351bce8eca91633a74dc9be6d,except TypeError:,1,0,0.0,115
0be80d20418925a351bce8eca91633a74dc9be6d,"# NOTE(twilson) If someone passes a tuple, then just return",1,0,0.0,116
0be80d20418925a351bce8eca91633a74dc9be6d,raise Exception(resp.error),1,0,0.0,117
0be80d20418925a351bce8eca91633a74dc9be6d,obj = obj.result,1,0,0.0,118
0be80d20418925a351bce8eca91633a74dc9be6d,def get_index_column(table):,1,0,0.0,119
0be80d20418925a351bce8eca91633a74dc9be6d,return matched,1,0,0.0,120
0be80d20418925a351bce8eca91633a74dc9be6d,# exceptions:,1,0,0.0,121
0be80d20418925a351bce8eca91633a74dc9be6d,# TODO(twilson) Implement other operators and type comparisons,1,0,0.0,122
0be80d20418925a351bce8eca91633a74dc9be6d,row._table.columns[col].type.is_optional()):,1,0,0.0,123
0be80d20418925a351bce8eca91633a74dc9be6d,# utilize the single elements comparison logic,1,0,0.0,124
0be80d20418925a351bce8eca91633a74dc9be6d,elif val == []:,1,0,0.0,125
0be80d20418925a351bce8eca91633a74dc9be6d,val = None,1,0,0.0,126
0be80d20418925a351bce8eca91633a74dc9be6d,# no need to process any further,1,0,0.0,127
0be80d20418925a351bce8eca91633a74dc9be6d,raise ValueError(,1,0,0.0,128
0be80d20418925a351bce8eca91633a74dc9be6d,matched = False,1,0,0.0,129
0be80d20418925a351bce8eca91633a74dc9be6d,# and implement relaxed version (excludes/includes as per standard),1,0,0.0,130
0be80d20418925a351bce8eca91633a74dc9be6d,break,1,0,0.0,131
0be80d20418925a351bce8eca91633a74dc9be6d,elif op == '!=':,1,0,0.0,132
0be80d20418925a351bce8eca91633a74dc9be6d,raise NotImplementedError(),1,0,0.0,133
0be80d20418925a351bce8eca91633a74dc9be6d,"elif isinstance(match, list):",1,0,0.0,134
0be80d20418925a351bce8eca91633a74dc9be6d,"# According to rfc7047, lists support '=' and '!='",1,0,0.0,135
0be80d20418925a351bce8eca91633a74dc9be6d,# (both strict and relaxed). Will follow twilson's dict comparison,1,0,0.0,136
0be80d20418925a351bce8eca91633a74dc9be6d,"return idl.SchemaHelper(None, resp.result)",1,0,0.0,137
0be80d20418925a351bce8eca91633a74dc9be6d,return default,1,0,0.0,138
0be80d20418925a351bce8eca91633a74dc9be6d,elif resp.error:,1,0,0.0,139
0be80d20418925a351bce8eca91633a74dc9be6d,"'NetFlow': RowLookup('Bridge', 'name', 'netflow'),",1,0,0.0,140
0be80d20418925a351bce8eca91633a74dc9be6d,"['table', 'column', 'uuid_column'])",1,0,0.0,141
0be80d20418925a351bce8eca91633a74dc9be6d,_LOOKUP_TABLE = {,1,0,0.0,142
0be80d20418925a351bce8eca91633a74dc9be6d,"'Controller': RowLookup('Bridge', 'name', 'controller'),",1,0,0.0,143
0be80d20418925a351bce8eca91633a74dc9be6d,"'Flow_Table': RowLookup('Flow_Table', 'name', None),",1,0,0.0,144
0be80d20418925a351bce8eca91633a74dc9be6d,"'IPFIX': RowLookup('Bridge', 'name', 'ipfix'),",1,0,0.0,145
0be80d20418925a351bce8eca91633a74dc9be6d,"'Mirror': RowLookup('Mirror', 'name', None),",1,0,0.0,146
0be80d20418925a351bce8eca91633a74dc9be6d,"'Open_vSwitch': RowLookup('Open_vSwitch', None, None),",1,0,0.0,147
0be80d20418925a351bce8eca91633a74dc9be6d,from neutron.agent.ovsdb.native import helpers,1,0,0.0,148
0be80d20418925a351bce8eca91633a74dc9be6d,"'QoS': RowLookup('Port', 'name', 'qos'),",1,0,0.0,149
0be80d20418925a351bce8eca91633a74dc9be6d,"'Queue': RowLookup(None, None, None),",1,0,0.0,150
0be80d20418925a351bce8eca91633a74dc9be6d,"'sFlow': RowLookup('Bridge', 'name', 'sflow'),",1,0,0.0,151
0be80d20418925a351bce8eca91633a74dc9be6d,"'SSL': RowLookup('Open_vSwitch', None, 'ssl'),",1,0,0.0,152
0be80d20418925a351bce8eca91633a74dc9be6d,},1,0,0.0,153
0be80d20418925a351bce8eca91633a74dc9be6d,_NO_DEFAULT = object(),1,0,0.0,154
0be80d20418925a351bce8eca91633a74dc9be6d,"RowLookup = collections.namedtuple('RowLookup',",1,0,0.0,155
0be80d20418925a351bce8eca91633a74dc9be6d,from neutron.agent.ovsdb import api,1,0,0.0,156
0be80d20418925a351bce8eca91633a74dc9be6d,'err': os.strerror(err)}),1,0,0.0,157
0be80d20418925a351bce8eca91633a74dc9be6d,import uuid,1,0,0.0,158
0be80d20418925a351bce8eca91633a74dc9be6d,from ovsdbapp.backend.ovs_idl import idlutils,0,0,0.0,159
0be80d20418925a351bce8eca91633a74dc9be6d,from neutron.common import _deprecate,0,0,0.0,160
0be80d20418925a351bce8eca91633a74dc9be6d,_deprecate._MovedGlobals(idlutils),0,0,0.0,161
0be80d20418925a351bce8eca91633a74dc9be6d,import collections,1,0,0.0,162
0be80d20418925a351bce8eca91633a74dc9be6d,import os,1,0,0.0,163
0be80d20418925a351bce8eca91633a74dc9be6d,import time,1,0,0.0,164
0be80d20418925a351bce8eca91633a74dc9be6d,from neutron_lib import exceptions,1,0,0.0,165
0be80d20418925a351bce8eca91633a74dc9be6d,from neutron._i18n import _,1,0,0.0,166
0be80d20418925a351bce8eca91633a74dc9be6d,from ovs.db import idl,1,0,0.0,167
0be80d20418925a351bce8eca91633a74dc9be6d,from ovs import jsonrpc,1,0,0.0,168
0be80d20418925a351bce8eca91633a74dc9be6d,from ovs import poller,1,0,0.0,169
0be80d20418925a351bce8eca91633a74dc9be6d,from ovs import stream,1,0,0.0,170
0be80d20418925a351bce8eca91633a74dc9be6d,import six,1,0,0.0,171
0be80d20418925a351bce8eca91633a74dc9be6d,import tenacity,1,0,0.0,172
0be80d20418925a351bce8eca91633a74dc9be6d,class RowNotFound(exceptions.NeutronException):,1,0,0.0,173
0be80d20418925a351bce8eca91633a74dc9be6d,"message = _(""Cannot find %(table)s with %(col)s=%(match)s"")",1,0,0.0,174
0be80d20418925a351bce8eca91633a74dc9be6d,"def row_by_value(idl_, table, column, match, default=_NO_DEFAULT):",1,0,0.0,175
0be80d20418925a351bce8eca91633a74dc9be6d,"err, strm = stream.Stream.open_block(",1,0,0.0,176
0be80d20418925a351bce8eca91633a74dc9be6d,"raise RowNotFound(table=table, col=_('record'), match=record)",1,0,0.0,177
0be80d20418925a351bce8eca91633a74dc9be6d,class ExceptionResult(object):,1,0,0.0,178
0be80d20418925a351bce8eca91633a74dc9be6d,"def __init__(self, ex, tb):",1,0,0.0,179
0be80d20418925a351bce8eca91633a74dc9be6d,self.ex = ex,1,0,0.0,180
0be80d20418925a351bce8eca91633a74dc9be6d,self.tb = tb,1,0,0.0,181
0be80d20418925a351bce8eca91633a74dc9be6d,"def _get_schema_helper(connection, schema_name):",1,0,0.0,182
0be80d20418925a351bce8eca91633a74dc9be6d,stream.Stream.open(connection)),1,0,0.0,183
0be80d20418925a351bce8eca91633a74dc9be6d,tab = idl_.tables[table],1,0,0.0,184
0be80d20418925a351bce8eca91633a74dc9be6d,"raise Exception(_(""Could not connect to %s"") % connection)",1,0,0.0,185
0be80d20418925a351bce8eca91633a74dc9be6d,"req = jsonrpc.Message.create_request('get_schema', [schema_name])",1,0,0.0,186
0be80d20418925a351bce8eca91633a74dc9be6d,"err, resp = rpc.transact_block(req)",1,0,0.0,187
0be80d20418925a351bce8eca91633a74dc9be6d,rpc.close(),1,0,0.0,188
0be80d20418925a351bce8eca91633a74dc9be6d,"raise Exception(_(""Could not retrieve schema from %(conn)s: """,1,0,0.0,189
0be80d20418925a351bce8eca91633a74dc9be6d,"""%(err)s"") % {'conn': connection,",1,0,0.0,190
0be80d20418925a351bce8eca91633a74dc9be6d,"rows = getattr(row, rl.uuid_column)",1,0,0.0,191
0be80d20418925a351bce8eca91633a74dc9be6d,return next(iter(t.rows.values())),1,0,0.0,192
0be80d20418925a351bce8eca91633a74dc9be6d,"raise ValueError(_(""Table %s can only be queried by UUID"") % table)",1,0,0.0,193
0be80d20418925a351bce8eca91633a74dc9be6d,"rl = _LOOKUP_TABLE.get(table, RowLookup(table, get_index_column(t), None))",1,0,0.0,194
0be80d20418925a351bce8eca91633a74dc9be6d,"raise RowNotFound(table=table, col='uuid', match=record)",1,0,0.0,195
0be80d20418925a351bce8eca91633a74dc9be6d,except KeyError:,1,0,0.0,196
0be80d20418925a351bce8eca91633a74dc9be6d,pass,1,0,0.0,197
0be80d20418925a351bce8eca91633a74dc9be6d,"# Not a UUID string, continue lookup by other means",1,0,0.0,198
0be80d20418925a351bce8eca91633a74dc9be6d,except ValueError:,1,0,0.0,199
0be80d20418925a351bce8eca91633a74dc9be6d,return t.rows[uuid_],1,0,0.0,200
0be80d20418925a351bce8eca91633a74dc9be6d,uuid_ = uuid.UUID(record),1,0,0.0,201
0be80d20418925a351bce8eca91633a74dc9be6d,return t.rows[record],1,0,0.0,202
0be80d20418925a351bce8eca91633a74dc9be6d,try:,1,0,0.0,203
0be80d20418925a351bce8eca91633a74dc9be6d,t = idl_.tables[table],1,0,0.0,204
0be80d20418925a351bce8eca91633a74dc9be6d,"def row_by_record(idl_, table, record):",1,0,0.0,205
0be80d20418925a351bce8eca91633a74dc9be6d,"raise RowNotFound(table=table, col=column, match=match)",1,0,0.0,206
0be80d20418925a351bce8eca91633a74dc9be6d,return r,1,0,0.0,207
0be80d20418925a351bce8eca91633a74dc9be6d,return obj,1,0,0.0,208
