commit_id,line,line_level_label,count,line_score,row
94492767e009fee24b8fcb5b588943ad159c7254,# By default user is admin - now test non admin user,1,8,1.0,1
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,2
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,3
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,4
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,5
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,6
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,7
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,8
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,9
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,10
94492767e009fee24b8fcb5b588943ad159c7254,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,8,1.0,11
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""The number of retries the agent will send request """,1,6,0.75,12
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,13
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,14
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 20 + 1).allocated),1,5,0.625,15
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 20 + 1)),1,5,0.625,16
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,17
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,18
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,19
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,20
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,21
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,22
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,23
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,24
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""The number of milliseconds the agent will wait for """,1,5,0.625,25
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""The number of seconds the agent will wait between """,1,5,0.625,26
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,27
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,28
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,29
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,30
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,31
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,32
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,33
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,34
94492767e009fee24b8fcb5b588943ad159c7254,if segmentation_id < 1 or segmentation_id > 4094:,1,5,0.625,35
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,36
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,37
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""Physical network type for provider network """,1,5,0.625,38
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,39
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,40
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,41
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,42
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,43
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,44
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,45
94492767e009fee24b8fcb5b588943ad159c7254,# you may not use this file except in compliance with the License.,1,5,0.625,46
94492767e009fee24b8fcb5b588943ad159c7254,# You may obtain a copy of the License at,1,5,0.625,47
94492767e009fee24b8fcb5b588943ad159c7254,# process vlan ranges for each configured physical network,1,5,0.625,48
94492767e009fee24b8fcb5b588943ad159c7254,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,5,0.625,49
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Represents port profile binding to the port on virtual network.""""""",1,4,0.5,50
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_LE(""provider:segmentation_id out of range """,1,4,0.5,51
94492767e009fee24b8fcb5b588943ad159c7254,"entry = {'device': device,",1,4,0.5,52
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,53
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,54
94492767e009fee24b8fcb5b588943ad159c7254,"# if needed, check to see if this is a port owned by",1,4,0.5,55
94492767e009fee24b8fcb5b588943ad159c7254,# Set port status as 'DOWN'. This will be updated by agent,1,4,0.5,56
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_LE(""Unsupported vnic type %(vnic_type)s """,1,4,0.5,57
94492767e009fee24b8fcb5b588943ad159c7254,Verify default physical network type is valid.,1,4,0.5,58
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Invalid physical network type %(type)s """,1,4,0.5,59
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Invalid physical network type %(type)s. """,1,4,0.5,60
94492767e009fee24b8fcb5b588943ad159c7254,# This attribute specifies whether the plugin supports or not,1,4,0.5,61
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,62
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,63
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,64
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,65
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,66
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import api as db,1,4,0.5,67
94492767e009fee24b8fcb5b588943ad159c7254,"UPDATED_VLAN_RANGES = {PHYS_NET: [(VLAN_MIN + 5, VLAN_MAX + 5)],",1,4,0.5,68
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 5 + 1).allocated),1,4,0.5,69
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 5 + 1)),1,4,0.5,70
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 20 - 1)),1,4,0.5,71
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 20 - 1).allocated),1,4,0.5,72
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,73
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,74
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,75
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,76
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,77
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,78
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,79
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.ml2.drivers.mlnx.agent import config  # noqa,1,4,0.5,80
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,81
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Represents allocation state of segmentation_id on physical network.""""""",1,4,0.5,82
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""vnic_type is not defined in port profile"")",1,4,0.5,83
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,84
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_LE(""provider:segmentation_id out of range """,0,4,0.5,85
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Invalid physical network type %(type)s. """,0,4,0.5,86
94492767e009fee24b8fcb5b588943ad159c7254,"""on physical network %(phy_net)s from pool""),",1,4,0.5,87
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Reserving vlan %(seg_id)s on physical network """,1,4,0.5,88
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Reserving vlan %(seg_id)s on physical network """,0,4,0.5,89
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""Failed to import eventlet.green.zmq. """,1,4,0.5,90
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.exception(_(""Request timeout in agent event loop """,1,4,0.5,91
94492767e009fee24b8fcb5b588943ad159c7254,"err_msg = _(""Agent cache inconsistency - port id """,1,4,0.5,92
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.exception(_LE(""Request timeout in agent event loop """,0,4,0.5,93
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""Failed to import eventlet.green.zmq. """,0,4,0.5,94
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_(""unsupported vnic type %(vnic_type)s """,1,4,0.5,95
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_(""Unsupported vnic type %(vnic_type)s """,0,4,0.5,96
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:segmentation_id out of range """,1,4,0.5,97
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_(""provider:segmentation_id out of range """,0,4,0.5,98
94492767e009fee24b8fcb5b588943ad159c7254,from quantum.common import constants as q_const,0,4,0.5,99
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Reserving vlan %(seg_id)s on physical network """,1,4,0.5,100
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Invalid physical network type %(type)s """,0,4,0.5,101
94492767e009fee24b8fcb5b588943ad159c7254,from quantum import context,1,4,0.5,102
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_LE(""Unsupported vnic type %(vnic_type)s """,0,4,0.5,103
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,104
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""vnic_type is not defined in port profile"")",0,4,0.5,105
94492767e009fee24b8fcb5b588943ad159c7254,# remove from table unallocated vlans not currently allocatable,1,4,0.5,106
94492767e009fee24b8fcb5b588943ad159c7254,# get existing allocations for all physical networks,1,4,0.5,107
94492767e009fee24b8fcb5b588943ad159c7254,# see if vlan is allocatable,1,4,0.5,108
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.common import config  # noqa,1,4,0.5,109
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,110
94492767e009fee24b8fcb5b588943ad159c7254,# remove from table unallocated vlans for any unconfigured physical,1,4,0.5,111
94492767e009fee24b8fcb5b588943ad159c7254,# limitations under the License.,1,4,0.5,112
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""vnic_type is not defined in port profile"")",1,4,0.5,113
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_(""Unsupported vnic type %(vnic_type)s """,1,4,0.5,114
94492767e009fee24b8fcb5b588943ad159c7254,"msg = (_(""provider:segmentation_id out of range """,1,4,0.5,115
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Invalid physical network type %(type)s """,1,4,0.5,116
94492767e009fee24b8fcb5b588943ad159c7254,# See the License for the specific language governing permissions and,1,4,0.5,117
94492767e009fee24b8fcb5b588943ad159c7254,"# the network record, so explicit removal is not necessary",1,3,0.375,118
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:physical_network specified for local """,1,3,0.375,119
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:segmentation_id specified for local """,1,3,0.375,120
94492767e009fee24b8fcb5b588943ad159c7254,if physical_network not in self.network_vlan_ranges:,1,3,0.375,121
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""Unknown provider:physical_network """,1,3,0.375,122
94492767e009fee24b8fcb5b588943ad159c7254,"""for physical network type %(net_type)s"") %",1,3,0.375,123
94492767e009fee24b8fcb5b588943ad159c7254,# the network_binding record is deleted via cascade from,1,3,0.375,124
94492767e009fee24b8fcb5b588943ad159c7254,device name convention or by mac address,1,3,0.375,125
94492767e009fee24b8fcb5b588943ad159c7254,services get device either by linux bridge plugin,1,3,0.375,126
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,127
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,128
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import constants as q_const,1,3,0.375,129
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import api as db_api,1,3,0.375,130
94492767e009fee24b8fcb5b588943ad159c7254,if not (network_type_set or physical_network_set or,1,3,0.375,131
94492767e009fee24b8fcb5b588943ad159c7254,agent_id = kwargs.get('agent_id'),1,3,0.375,132
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.db import mlnx_db_v2 as db,1,3,0.375,133
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.extensions import providernet as provider,1,3,0.375,134
94492767e009fee24b8fcb5b588943ad159c7254,"if type not in (constants.TYPE_ETH, constants.TYPE_IB):",1,3,0.375,135
94492767e009fee24b8fcb5b588943ad159c7254,# Consume from all consumers in threads,1,3,0.375,136
94492767e009fee24b8fcb5b588943ad159c7254,"segmentation_id = sa.Column(sa.Integer, nullable=False, primary_key=True,",1,3,0.375,137
94492767e009fee24b8fcb5b588943ad159c7254,entry = {'device': device},1,3,0.375,138
94492767e009fee24b8fcb5b588943ad159c7254,"allocated = sa.Column(sa.Boolean, nullable=False, default=False,",1,3,0.375,139
94492767e009fee24b8fcb5b588943ad159c7254,Binds network to physical_network and segmentation_id,1,3,0.375,140
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,141
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,142
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import constants as q_const,1,3,0.375,143
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as n_exc,1,3,0.375,144
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import rpc as n_rpc,1,3,0.375,145
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import topics,1,3,0.375,146
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import quota_db  # noqa,1,3,0.375,147
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.common import constants as svc_constants,1,3,0.375,148
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.common import constants,1,3,0.375,149
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.db import mlnx_db_v2 as db,1,3,0.375,150
94492767e009fee24b8fcb5b588943ad159c7254,# TODO(rkukura): Replace with new VIF security details,1,3,0.375,151
94492767e009fee24b8fcb5b588943ad159c7254,device = kwargs.get('device'),1,3,0.375,152
94492767e009fee24b8fcb5b588943ad159c7254,Unit Tests for Mellanox RPC (major reuse of linuxbridge rpc unit tests),1,3,0.375,153
94492767e009fee24b8fcb5b588943ad159c7254,# Set port status to DOWN,1,3,0.375,154
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_config import cfg,1,3,0.375,155
94492767e009fee24b8fcb5b588943ad159c7254,rpcapi = agent_rpc.PluginApi(topics.PLUGIN),1,3,0.375,156
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_config import cfg,0,3,0.375,157
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,158
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_config import cfg,0,3,0.375,159
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,160
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,161
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.agent.common import config,1,3,0.375,162
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.agent import rpc as agent_rpc,1,3,0.375,163
94492767e009fee24b8fcb5b588943ad159c7254,"""retries for request to daemon, i.e. value of 2 will """,1,3,0.375,164
94492767e009fee24b8fcb5b588943ad159c7254,""" double the request timeout each retry"")),",1,3,0.375,165
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,166
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_config import cfg,1,3,0.375,167
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import config as common_config,1,3,0.375,168
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,169
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import topics,1,3,0.375,170
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_context import context as oslo_context,1,3,0.375,171
94492767e009fee24b8fcb5b588943ad159c7254,# Set port status to ACTIVE,1,3,0.375,172
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 5 - 1).allocated),1,3,0.375,173
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,174
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as n_exc,1,3,0.375,175
94492767e009fee24b8fcb5b588943ad159c7254,"PHYS_NET_2: [(VLAN_MIN + 20, VLAN_MAX + 20)]}",1,3,0.375,176
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 1).allocated),1,3,0.375,177
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 1)),1,3,0.375,178
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 5 - 1)),1,3,0.375,179
94492767e009fee24b8fcb5b588943ad159c7254,"for x in moves.xrange(VLAN_MIN, VLAN_MAX + 1):",1,3,0.375,180
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,181
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id = VLAN_MIN + 5,1,3,0.375,182
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id = VLAN_MAX + 5,1,3,0.375,183
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,184
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,185
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.common import constants,1,3,0.375,186
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,187
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network = sa.Column(sa.String(64), nullable=False,",1,3,0.375,188
94492767e009fee24b8fcb5b588943ad159c7254,# provider network,1,3,0.375,189
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.warning(_LW(""vlan_id %(seg_id)s on physical network """,1,3,0.375,190
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Adding or updating port with mac %s""), device)",1,3,0.375,191
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as q_exc,1,3,0.375,192
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as n_exc,0,3,0.375,193
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as q_exc,1,3,0.375,194
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as n_exc,0,3,0.375,195
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as q_exc,1,3,0.375,196
94492767e009fee24b8fcb5b588943ad159c7254,"for x in moves.xrange(VLAN_MIN, VLAN_MAX + 1):",0,3,0.375,197
94492767e009fee24b8fcb5b588943ad159c7254,"for x in xrange(VLAN_MIN, VLAN_MAX + 1):",1,3,0.375,198
94492767e009fee24b8fcb5b588943ad159c7254,"allocated = sa.Column(sa.Boolean, nullable=False, default=False,",0,3,0.375,199
94492767e009fee24b8fcb5b588943ad159c7254,"allocated = sa.Column(sa.Boolean, nullable=False, default=False)",1,3,0.375,200
94492767e009fee24b8fcb5b588943ad159c7254,services get device either by linux bridge plugin,1,3,0.375,201
94492767e009fee24b8fcb5b588943ad159c7254,device name convention or by mac address,1,3,0.375,202
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Agent cache inconsistency - port id """,0,3,0.375,203
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Unknown network type %(network_type)s """,0,3,0.375,204
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Adding or updating port with mac %s""), device)",0,3,0.375,205
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Removing port failed for device %(device)s """,0,3,0.375,206
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as n_exc,0,3,0.375,207
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_LOCAL = 'local',1,3,0.375,208
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.common import constants as p_const,0,3,0.375,209
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Unknown network type %(network_type)s """,0,3,0.375,210
94492767e009fee24b8fcb5b588943ad159c7254,"""on physical network """,1,3,0.375,211
94492767e009fee24b8fcb5b588943ad159c7254,from quantum import policy,1,3,0.375,212
94492767e009fee24b8fcb5b588943ad159c7254,# Authorize before exposing plugin details to client,1,3,0.375,213
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_ID_MIN = 1,1,3,0.375,214
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_ID_MAX = 4096,1,3,0.375,215
94492767e009fee24b8fcb5b588943ad159c7254,from quantum.common import utils,0,3,0.375,216
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Unknown network type %(network_type) """,1,3,0.375,217
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_NONE = 'none',0,3,0.375,218
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Removing vlan %(seg_id)s on physical """,0,3,0.375,219
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""removing vlan %(seg_id)s on physical """,1,3,0.375,220
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""Unknown provider:physical_network """,0,3,0.375,221
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""unknown provider:physical_network """,1,3,0.375,222
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.common import constants as p_const,0,3,0.375,223
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_LOCAL = 'local',0,3,0.375,224
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Unknown network type %(network_type)s """,1,3,0.375,225
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_NONE = 'none',1,3,0.375,226
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Removing port failed for device %(device)s """,1,3,0.375,227
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,228
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import rpc as n_rpc,1,3,0.375,229
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import topics,1,3,0.375,230
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Agent side of the Embedded Switch RPC API.",1,3,0.375,231
94492767e009fee24b8fcb5b588943ad159c7254,"def port_update(self, context, port, physical_network,",1,3,0.375,232
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""List of <physical_network>:<vlan_min>:<vlan_max> """,1,3,0.375,233
94492767e009fee24b8fcb5b588943ad159c7254,"# Unless required by applicable law or agreed to in writing, software",1,3,0.375,234
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import exceptions as n_exc,1,3,0.375,235
94492767e009fee24b8fcb5b588943ad159c7254,if physical_network in allocations:,1,3,0.375,236
94492767e009fee24b8fcb5b588943ad159c7254,"# it's not allocatable, so check if its allocated",1,3,0.375,237
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Removing vlan %(seg_id)s on physical """,1,3,0.375,238
94492767e009fee24b8fcb5b588943ad159c7254,# determine current configured allocatable vlans for this,1,3,0.375,239
94492767e009fee24b8fcb5b588943ad159c7254,# physical network,1,3,0.375,240
94492767e009fee24b8fcb5b588943ad159c7254,# add missing allocatable vlans to table,1,3,0.375,241
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Removing vlan %(seg_id)s on physical """,0,3,0.375,242
94492767e009fee24b8fcb5b588943ad159c7254,"""on physical network %(phy_net)s from pool"",",1,3,0.375,243
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.config import cfg,1,3,0.375,244
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""List of <physical_network>:<physical_network_type> """,1,3,0.375,245
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.warning(_(""vlan_id %(seg_id)s on physical network """,1,3,0.375,246
94492767e009fee24b8fcb5b588943ad159c7254,"""on physical network """,0,3,0.375,247
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.warning(_LW(""vlan_id %(seg_id)s on physical network """,0,3,0.375,248
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Removing vlan %(seg_id)s on physical """,1,3,0.375,249
94492767e009fee24b8fcb5b588943ad159c7254,"""on physical network """,1,3,0.375,250
94492767e009fee24b8fcb5b588943ad159c7254,"""on physical network %(phy_net)s from pool"",",0,3,0.375,251
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:physical_network specified for local """,0,3,0.375,252
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:segmentation_id specified for local """,0,3,0.375,253
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""Unknown provider:physical_network """,0,3,0.375,254
94492767e009fee24b8fcb5b588943ad159c7254,"""for physical network type %(net_type)s"") %",0,3,0.375,255
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Invalid physical network type %(type)s.""",1,3,0.375,256
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:physical_network specified for local """,1,3,0.375,257
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:segmentation_id specified for local """,1,3,0.375,258
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""Unknown provider:physical_network """,1,3,0.375,259
94492767e009fee24b8fcb5b588943ad159c7254,"""for physical network type %(net_type)s"") %",1,3,0.375,260
94492767e009fee24b8fcb5b588943ad159c7254,"if vnic_type in (constants.VIF_TYPE_DIRECT,",1,2,0.25,261
94492767e009fee24b8fcb5b588943ad159c7254,if constants.VNIC_TYPE in binding_profile:,1,2,0.25,262
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""Invalid vnic_type on port_create"")",1,2,0.25,263
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id = constants.LOCAL_VLAN_ID,1,2,0.25,264
94492767e009fee24b8fcb5b588943ad159c7254,"def create_network(self, context, network):",1,2,0.25,265
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:physical_network required"")",1,2,0.25,266
94492767e009fee24b8fcb5b588943ad159c7254,session = context.session,1,2,0.25,267
94492767e009fee24b8fcb5b588943ad159c7254,# tenant network,1,2,0.25,268
94492767e009fee24b8fcb5b588943ad159c7254,"def _process_port_binding_create(self, context, attrs):",1,2,0.25,269
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:network_type %s not supported"") % network_type",1,2,0.25,270
94492767e009fee24b8fcb5b588943ad159c7254,physical_network = 'default',1,2,0.25,271
94492767e009fee24b8fcb5b588943ad159c7254,"if network_type in [svc_constants.TYPE_VLAN,",1,2,0.25,272
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:segmentation_id required"")",1,2,0.25,273
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:segmentation_id specified for flat network"")",1,2,0.25,274
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network = self._process_net_type(network_type,",1,2,0.25,275
94492767e009fee24b8fcb5b588943ad159c7254,physical_network = None,1,2,0.25,276
94492767e009fee24b8fcb5b588943ad159c7254,else:  # TYPE_LOCAL,1,2,0.25,277
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id = constants.FLAT_VLAN_ID,1,2,0.25,278
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network, vlan_id = db.reserve_network(session)",1,2,0.25,279
94492767e009fee24b8fcb5b588943ad159c7254,"port = super(MellanoxEswitchPlugin, self).get_port(context,",1,2,0.25,280
94492767e009fee24b8fcb5b588943ad159c7254,"net = super(MellanoxEswitchPlugin, self).create_network(context,",1,2,0.25,281
94492767e009fee24b8fcb5b588943ad159c7254,"def update_network(self, context, net_id, network):",1,2,0.25,282
94492767e009fee24b8fcb5b588943ad159c7254,for port in ports:,1,2,0.25,283
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id = attrs.get(provider.SEGMENTATION_ID),1,2,0.25,284
94492767e009fee24b8fcb5b588943ad159c7254,"ports = super(MellanoxEswitchPlugin,",1,2,0.25,285
94492767e009fee24b8fcb5b588943ad159c7254,"def get_ports(self, context, filters=None, fields=None,",1,2,0.25,286
94492767e009fee24b8fcb5b588943ad159c7254,"def get_port(self, context, id, fields=None):",1,2,0.25,287
94492767e009fee24b8fcb5b588943ad159c7254,"port = super(MellanoxEswitchPlugin,",1,2,0.25,288
94492767e009fee24b8fcb5b588943ad159c7254,"def create_port(self, context, port):",1,2,0.25,289
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(context.session,",1,2,0.25,290
94492767e009fee24b8fcb5b588943ad159c7254,"def _extend_port_dict_binding(self, context, port):",1,2,0.25,291
94492767e009fee24b8fcb5b588943ad159c7254,"return [self._fields(net, fields) for net in nets]",1,2,0.25,292
94492767e009fee24b8fcb5b588943ad159c7254,for net in nets:,1,2,0.25,293
94492767e009fee24b8fcb5b588943ad159c7254,"def get_networks(self, context, filters=None, fields=None,",1,2,0.25,294
94492767e009fee24b8fcb5b588943ad159c7254,"net = super(MellanoxEswitchPlugin, self).get_network(context,",1,2,0.25,295
94492767e009fee24b8fcb5b588943ad159c7254,"def get_network(self, context, net_id, fields=None):",1,2,0.25,296
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(session, net_id)",1,2,0.25,297
94492767e009fee24b8fcb5b588943ad159c7254,"def delete_network(self, context, net_id):",1,2,0.25,298
94492767e009fee24b8fcb5b588943ad159c7254,"net = super(MellanoxEswitchPlugin, self).update_network(context,",1,2,0.25,299
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:network_type required"")",1,2,0.25,300
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import agents_db,1,2,0.25,301
94492767e009fee24b8fcb5b588943ad159c7254,physical_network = attrs.get(provider.PHYSICAL_NETWORK),1,2,0.25,302
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import external_net_db,1,2,0.25,303
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.openstack.common import log as logging,1,2,0.25,304
94492767e009fee24b8fcb5b588943ad159c7254,"from neutron.i18n import _LE, _LI",1,2,0.25,305
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.extensions import portbindings,1,2,0.25,306
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import securitygroups_rpc_base as sg_db_rpc,1,2,0.25,307
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import portbindings_db,1,2,0.25,308
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import l3_gwmode_db,1,2,0.25,309
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import l3_agentschedulers_db,1,2,0.25,310
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import extraroute_db,1,2,0.25,311
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import db_base_plugin_v2,1,2,0.25,312
94492767e009fee24b8fcb5b588943ad159c7254,"def _process_provider_create(self, context, attrs):",1,2,0.25,313
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import agentschedulers_db,1,2,0.25,314
94492767e009fee24b8fcb5b588943ad159c7254,"def update_port(self, context, port_id, port):",1,2,0.25,315
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import utils,1,2,0.25,316
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.v2 import attributes,1,2,0.25,317
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.rpc.handlers import securitygroups_rpc,1,2,0.25,318
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.rpc.handlers import metadata_rpc,1,2,0.25,319
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.rpc.handlers import l3_rpc,1,2,0.25,320
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.rpc.handlers import dhcp_rpc,1,2,0.25,321
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.common import utils as plugin_utils,1,2,0.25,322
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx import agent_notify_api,1,2,0.25,323
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx import rpc_callbacks,1,2,0.25,324
94492767e009fee24b8fcb5b588943ad159c7254,LOG = logging.getLogger(__name__),1,2,0.25,325
94492767e009fee24b8fcb5b588943ad159c7254,"if self.tenant_network_type not in [svc_constants.TYPE_VLAN,",1,2,0.25,326
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(context.session, network['id'])",1,2,0.25,327
94492767e009fee24b8fcb5b588943ad159c7254,"def _extend_network_dict_provider(self, context, network):",1,2,0.25,328
94492767e009fee24b8fcb5b588943ad159c7254,"for network, type in self.phys_network_type_maps.iteritems():",1,2,0.25,329
94492767e009fee24b8fcb5b588943ad159c7254,"if self.physical_net_type not in (constants.TYPE_ETH,",1,2,0.25,330
94492767e009fee24b8fcb5b588943ad159c7254,Parse physical network mappings.,1,2,0.25,331
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Parse physical network types configuration.",1,2,0.25,332
94492767e009fee24b8fcb5b588943ad159c7254,for network in self.network_vlan_ranges.keys():,1,2,0.25,333
94492767e009fee24b8fcb5b588943ad159c7254,"self.service_topics = {svc_constants.CORE: topics.PLUGIN,",1,2,0.25,334
94492767e009fee24b8fcb5b588943ad159c7254,# RPC support,1,2,0.25,335
94492767e009fee24b8fcb5b588943ad159c7254,# is qualified by class,1,2,0.25,336
94492767e009fee24b8fcb5b588943ad159c7254,# bulk operations. Name mangling is used in order to ensure it,1,2,0.25,337
94492767e009fee24b8fcb5b588943ad159c7254,information to and from the plugin.,1,2,0.25,338
94492767e009fee24b8fcb5b588943ad159c7254,The port binding extension enables an external application relay,1,2,0.25,339
94492767e009fee24b8fcb5b588943ad159c7254,A new VLAN is created for each network.  An agent is relied upon,1,2,0.25,340
94492767e009fee24b8fcb5b588943ad159c7254,Code is based on the Linux Bridge plugin content to,1,2,0.25,341
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Realization of Neutron API on Mellanox HCA embedded switch technology.",1,2,0.25,342
94492767e009fee24b8fcb5b588943ad159c7254,"port = self._extend_port_dict_binding(context, port)",1,2,0.25,343
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN - 1)),1,2,0.25,344
94492767e009fee24b8fcb5b588943ad159c7254,need_port_update_notify = False,1,2,0.25,345
94492767e009fee24b8fcb5b588943ad159c7254,"retval = getattr(rpcapi, method)(ctxt, **kwargs)",1,2,0.25,346
94492767e009fee24b8fcb5b588943ad159c7254,expected_retval = 'foo' if rpc_method == 'call' else None,1,2,0.25,347
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests import base,1,2,0.25,348
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx import agent_notify_api,1,2,0.25,349
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,350
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,351
94492767e009fee24b8fcb5b588943ad159c7254,HAS_PORT_FILTER = False,1,2,0.25,352
94492767e009fee24b8fcb5b588943ad159c7254,ENABLE_SG = False,1,2,0.25,353
94492767e009fee24b8fcb5b588943ad159c7254,_plugin_name = PLUGIN_NAME,1,2,0.25,354
94492767e009fee24b8fcb5b588943ad159c7254,PLUGIN_NAME = ('neutron.plugins.mlnx.mlnx_plugin.MellanoxEswitchPlugin'),1,2,0.25,355
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests.unit import test_security_groups_rpc as test_sg_rpc,1,2,0.25,356
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests.unit import test_db_plugin as test_plugin,1,2,0.25,357
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests.unit import _test_extension_portbindings as test_bindings,1,2,0.25,358
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.extensions import portbindings,1,2,0.25,359
94492767e009fee24b8fcb5b588943ad159c7254,from webob import exc,1,2,0.25,360
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,361
94492767e009fee24b8fcb5b588943ad159c7254,# Copyright (c) 2013 OpenStack Foundation,1,2,0.25,362
94492767e009fee24b8fcb5b588943ad159c7254,"binding = mlnx_db.get_port_profile_binding(self.session,",1,2,0.25,363
94492767e009fee24b8fcb5b588943ad159c7254,"fanout = kwargs.pop('fanout', False)",1,2,0.25,364
94492767e009fee24b8fcb5b588943ad159c7254,prepare_args['topic'] = topic,1,2,0.25,365
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertThat(vlan_id, matchers.LessThan(VLAN_MAX + 1))",1,2,0.25,366
94492767e009fee24b8fcb5b588943ad159c7254,if method == 'port_update':,1,2,0.25,367
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.rpc.agentnotifiers import dhcp_rpc_agent_api,1,2,0.25,368
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Failed on Agent initialisation : %s. """,1,2,0.25,369
94492767e009fee24b8fcb5b588943ad159c7254,agent = mlnx_eswitch_neutron_agent.MlnxEswitchNeutronAgent(,1,2,0.25,370
94492767e009fee24b8fcb5b588943ad159c7254,LOG = logging.getLogger(__name__),1,2,0.25,371
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.common import utils,1,2,0.25,372
94492767e009fee24b8fcb5b588943ad159c7254,"from neutron.i18n import _LE, _LI",1,2,0.25,373
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_log import log as logging,1,2,0.25,374
94492767e009fee24b8fcb5b588943ad159c7254,from networking_mlnx.plugins.ml2.drivers.mlnx.agent import (,1,2,0.25,375
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,376
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,377
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""List of <physical_network>:<physical_interface>"")),",1,2,0.25,378
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,379
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,380
94492767e009fee24b8fcb5b588943ad159c7254,from oslo import messaging,1,2,0.25,381
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.db import options as db_options,1,2,0.25,382
94492767e009fee24b8fcb5b588943ad159c7254,from oslo_db import options as db_options,0,2,0.25,383
94492767e009fee24b8fcb5b588943ad159c7254,rpcapi = agent_notify_api.AgentNotifierApi(topics.AGENT),1,2,0.25,384
94492767e009fee24b8fcb5b588943ad159c7254,"binding = mlnx_db.get_network_binding(self.session,",1,2,0.25,385
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network, vlan_id = mlnx_db.reserve_network(self.session)",1,2,0.25,386
94492767e009fee24b8fcb5b588943ad159c7254,"def delete_port(self, context, port_id, l3_port_check=True):",1,2,0.25,387
94492767e009fee24b8fcb5b588943ad159c7254,new_status = (q_const.PORT_STATUS_ACTIVE if port['admin_state_up'],1,2,0.25,388
94492767e009fee24b8fcb5b588943ad159c7254,port = plugin.get_port_from_device(device),1,2,0.25,389
94492767e009fee24b8fcb5b588943ad159c7254,plugin = manager.NeutronManager.get_plugin(),1,2,0.25,390
94492767e009fee24b8fcb5b588943ad159c7254,"{'device': device, 'agent_id': agent_id})",1,2,0.25,391
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %(device)s details requested from %(agent_id)s"",",1,2,0.25,392
94492767e009fee24b8fcb5b588943ad159c7254,"def get_device_details(self, rpc_context, **kwargs):",1,2,0.25,393
94492767e009fee24b8fcb5b588943ad159c7254,#  1.1 Support Security Group RPC,1,2,0.25,394
94492767e009fee24b8fcb5b588943ad159c7254,LOG = logging.getLogger(__name__),1,2,0.25,395
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.openstack.common import log as logging,1,2,0.25,396
94492767e009fee24b8fcb5b588943ad159c7254,from neutron import manager,1,2,0.25,397
94492767e009fee24b8fcb5b588943ad159c7254,from oslo import messaging,1,2,0.25,398
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,399
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,400
94492767e009fee24b8fcb5b588943ad159c7254,port = db.get_port_from_device_mac(device),1,2,0.25,401
94492767e009fee24b8fcb5b588943ad159c7254,port['device'] = device,1,2,0.25,402
94492767e009fee24b8fcb5b588943ad159c7254,port = db.get_port_from_device(,1,2,0.25,403
94492767e009fee24b8fcb5b588943ad159c7254,"# now that we've left db transaction, we are safe to notify",1,2,0.25,404
94492767e009fee24b8fcb5b588943ad159c7254,"port = self.get_port(context, port_id)",1,2,0.25,405
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(db_api.get_session(),",1,2,0.25,406
94492767e009fee24b8fcb5b588943ad159c7254,"def get_devices_details_list(self, rpc_context, **kwargs):",1,2,0.25,407
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 20)),1,2,0.25,408
94492767e009fee24b8fcb5b588943ad159c7254,"for device in kwargs.pop('devices', [])",1,2,0.25,409
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 20)),1,2,0.25,410
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 20).allocated),1,2,0.25,411
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 20).allocated),1,2,0.25,412
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX + 5).allocated),1,2,0.25,413
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN + 5).allocated),1,2,0.25,414
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX - 1).allocated),1,2,0.25,415
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX = 19,1,2,0.25,416
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN = 10,1,2,0.25,417
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests.unit import testlib_api,1,2,0.25,418
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests.unit import test_db_plugin as test_plugin,1,2,0.25,419
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.db import mlnx_db_v2 as mlnx_db,1,2,0.25,420
94492767e009fee24b8fcb5b588943ad159c7254,from testtools import matchers,1,2,0.25,421
94492767e009fee24b8fcb5b588943ad159c7254,from six import moves,1,2,0.25,422
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,423
94492767e009fee24b8fcb5b588943ad159c7254,# Copyright (c) 2013 OpenStack Foundation,1,2,0.25,424
94492767e009fee24b8fcb5b588943ad159c7254,"def update_device_up(self, rpc_context, **kwargs):",1,2,0.25,425
94492767e009fee24b8fcb5b588943ad159c7254,"def update_device_down(self, rpc_context, **kwargs):",1,2,0.25,426
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.api.rpc.agentnotifiers import l3_rpc_agent_api,1,2,0.25,427
94492767e009fee24b8fcb5b588943ad159c7254,self.allocated = False,1,2,0.25,428
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.agent import securitygroups_rpc as sg_rpc,1,2,0.25,429
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Failed on Agent initialisation : %s. """,0,2,0.25,430
94492767e009fee24b8fcb5b588943ad159c7254,"error_msg = _LE(""Unknown operation status %s"") % msg['status']",0,2,0.25,431
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Failed to import eventlet.green.zmq. """,0,2,0.25,432
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.i18n import _LE,0,2,0.25,433
94492767e009fee24b8fcb5b588943ad159c7254,""" Agent terminated!""), e)",1,2,0.25,434
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Loop iteration exceeded interval """,1,2,0.25,435
94492767e009fee24b8fcb5b588943ad159c7254,"""due to %(exc)s""), {'device': device, 'exc': e})",1,2,0.25,436
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_('Unsupported network type %s'), network_type)",1,2,0.25,437
94492767e009fee24b8fcb5b588943ad159c7254,"from neutron.i18n import _LE, _LI",1,2,0.25,438
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Loop iteration exceeded interval """,0,2,0.25,439
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:network_type %s not supported"") % network_type",1,2,0.25,440
94492767e009fee24b8fcb5b588943ad159c7254,"""due to %(exc)s"", {'device': device, 'exc': e})",0,2,0.25,441
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE('Unsupported network type %s'), network_type)",0,2,0.25,442
94492767e009fee24b8fcb5b588943ad159c7254,"from neutron.i18n import _LE, _LI, _LW",0,2,0.25,443
94492767e009fee24b8fcb5b588943ad159c7254,port = self.get_port_from_device(device),1,2,0.25,444
94492767e009fee24b8fcb5b588943ad159c7254,port = plugin.get_port_from_device(device),0,2,0.25,445
94492767e009fee24b8fcb5b588943ad159c7254,plugin = manager.NeutronManager.get_plugin(),0,2,0.25,446
94492767e009fee24b8fcb5b588943ad159c7254,from neutron import manager,0,2,0.25,447
94492767e009fee24b8fcb5b588943ad159c7254,port = db.get_port_from_device_mac(device),1,2,0.25,448
94492767e009fee24b8fcb5b588943ad159c7254,"error_msg = _(""Unknown operation status %s"") % msg['status']",1,2,0.25,449
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Sending delete network message"")",0,2,0.25,450
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Sending update port message"")",0,2,0.25,451
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Sending delete network message""))",1,2,0.25,452
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""Invalid vnic_type on port_create"")",0,2,0.25,453
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:physical_network required"")",0,2,0.25,454
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:segmentation_id required"")",0,2,0.25,455
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:segmentation_id specified for flat network"")",0,2,0.25,456
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _LE(""provider:network_type %s not supported"") % network_type",0,2,0.25,457
94492767e009fee24b8fcb5b588943ad159c7254,"from neutron.i18n import _LE, _LI",0,2,0.25,458
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Releasing vlan %(seg_id)s """,1,2,0.25,459
94492767e009fee24b8fcb5b588943ad159c7254,"""physical network %(phy_net)s outside pool""),",1,2,0.25,460
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Reserving specific vlan %(seg_id)s on """,1,2,0.25,461
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Reserving specific vlan %(seg_id)s """,1,2,0.25,462
94492767e009fee24b8fcb5b588943ad159c7254,"""network %(net)s from pool""),",1,2,0.25,463
94492767e009fee24b8fcb5b588943ad159c7254,"""%(net)s from pool""),",1,2,0.25,464
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Releasing vlan %(seg_id)s """,0,2,0.25,465
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Reserving specific vlan %(seg_id)s on """,0,2,0.25,466
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Reserving specific vlan %(seg_id)s """,0,2,0.25,467
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.i18n import _LW,0,2,0.25,468
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Sending update port message""))",1,2,0.25,469
94492767e009fee24b8fcb5b588943ad159c7254,port['device'] = device,1,2,0.25,470
94492767e009fee24b8fcb5b588943ad159c7254,port = db.get_port_from_device(device[cls.TAP_PREFIX_LEN:]),1,2,0.25,471
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import securitygroups_rpc_base as sg_db_rpc,1,2,0.25,472
94492767e009fee24b8fcb5b588943ad159c7254,# Network Type constants,0,2,0.25,473
94492767e009fee24b8fcb5b588943ad159c7254,"if network_type in (p_const.TYPE_VLAN,",0,2,0.25,474
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.common.comm_utils import RetryDecorator,0,2,0.25,475
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""invalid vnic_type on port_create"")",1,2,0.25,476
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""Invalid vnic_type on port_create"")",0,2,0.25,477
94492767e009fee24b8fcb5b588943ad159c7254,MIN_VLAN_TAG = 1,0,2,0.25,478
94492767e009fee24b8fcb5b588943ad159c7254,plugin = QuantumManager.get_plugin(),1,2,0.25,479
94492767e009fee24b8fcb5b588943ad159c7254,HAS_PORT_FILTER = False,1,2,0.25,480
94492767e009fee24b8fcb5b588943ad159c7254,from quantum.manager import QuantumManager,1,2,0.25,481
94492767e009fee24b8fcb5b588943ad159c7254,HAS_PORT_FILTER = False,0,2,0.25,482
94492767e009fee24b8fcb5b588943ad159c7254,from quantum.tests.unit import _test_extension_portbindings as test_bindings,0,2,0.25,483
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(context.session,",1,2,0.25,484
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(context.session, network['id'])",1,2,0.25,485
94492767e009fee24b8fcb5b588943ad159c7254,"def _enforce_set_auth(self, context, resource, action):",1,2,0.25,486
94492767e009fee24b8fcb5b588943ad159c7254,"def _check_view_auth(self, context, resource, action):",1,2,0.25,487
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(context.session,",0,2,0.25,488
94492767e009fee24b8fcb5b588943ad159c7254,"binding = db.get_network_binding(context.session, network['id'])",0,2,0.25,489
94492767e009fee24b8fcb5b588943ad159c7254,from oslo.utils import importutils,1,2,0.25,490
94492767e009fee24b8fcb5b588943ad159c7254,"if network_type in (constants.TYPE_VLAN,",1,2,0.25,491
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_FLAT = 'flat',0,2,0.25,492
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import l3_rpc_base,1,2,0.25,493
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_VLAN = 'vlan',0,2,0.25,494
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests import base,1,2,0.25,495
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.tests.unit import testlib_api,0,2,0.25,496
94492767e009fee24b8fcb5b588943ad159c7254,from sqlalchemy import sql,0,2,0.25,497
94492767e009fee24b8fcb5b588943ad159c7254,"vlan_ids |= set(xrange(vlan_range[0], vlan_range[1] + 1))",1,2,0.25,498
94492767e009fee24b8fcb5b588943ad159c7254,from six.moves import xrange,1,2,0.25,499
94492767e009fee24b8fcb5b588943ad159c7254,"vlan_ids |= set(moves.xrange(vlan_range[0], vlan_range[1] + 1))",0,2,0.25,500
94492767e009fee24b8fcb5b588943ad159c7254,from six import moves,0,2,0.25,501
94492767e009fee24b8fcb5b588943ad159c7254,from six.moves import xrange,1,2,0.25,502
94492767e009fee24b8fcb5b588943ad159c7254,from six import moves,0,2,0.25,503
94492767e009fee24b8fcb5b588943ad159c7254,import zmq,1,2,0.25,504
94492767e009fee24b8fcb5b588943ad159c7254,zmq = importutils.try_import('eventlet.green.zmq'),0,2,0.25,505
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.openstack.common import importutils,0,2,0.25,506
94492767e009fee24b8fcb5b588943ad159c7254,"if network_type in [constants.TYPE_VLAN,",1,2,0.25,507
94492767e009fee24b8fcb5b588943ad159c7254,"if network_type in [svc_constants.TYPE_VLAN,",0,2,0.25,508
94492767e009fee24b8fcb5b588943ad159c7254,"if self.tenant_network_type not in [svc_constants.TYPE_VLAN,",0,2,0.25,509
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_VLAN = 'vlan',1,2,0.25,510
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_FLAT = 'flat',1,2,0.25,511
94492767e009fee24b8fcb5b588943ad159c7254,""" for network %(net)s. Server terminated!""),",1,2,0.25,512
94492767e009fee24b8fcb5b588943ad159c7254,"if self.tenant_network_type not in [constants.TYPE_VLAN,",1,2,0.25,513
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:segmentation_id specified for flat network"")",1,2,0.25,514
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Set the port status.""""""",1,2,0.25,515
94492767e009fee24b8fcb5b588943ad159c7254,plugin = manager.NeutronManager.get_plugin(),1,2,0.25,516
94492767e009fee24b8fcb5b588943ad159c7254,port = port_and_sgs[0][0],1,2,0.25,517
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Get port from database.""""""",1,2,0.25,518
94492767e009fee24b8fcb5b588943ad159c7254,"binding = mlnx_models_v2.PortProfileBinding(port_id, vnic_type)",1,2,0.25,519
94492767e009fee24b8fcb5b588943ad159c7254,"binding = mlnx_models_v2.NetworkBinding(network_id, network_type,",1,2,0.25,520
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Releasing vlan %(seg_id)s """,1,2,0.25,521
94492767e009fee24b8fcb5b588943ad159c7254,inside = False,1,2,0.25,522
94492767e009fee24b8fcb5b588943ad159c7254,state.allocated = False,1,2,0.25,523
94492767e009fee24b8fcb5b588943ad159c7254,state = (session.query(mlnx_models_v2.SegmentationIdAllocation).,1,2,0.25,524
94492767e009fee24b8fcb5b588943ad159c7254,"def release_network(session, physical_network,",1,2,0.25,525
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Reserving specific vlan %(seg_id)s on """,1,2,0.25,526
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Reserving specific vlan %(seg_id)s """,1,2,0.25,527
94492767e009fee24b8fcb5b588943ad159c7254,"def reserve_specific_network(session, physical_network, segmentation_id):",1,2,0.25,528
94492767e009fee24b8fcb5b588943ad159c7254,entry = (session.query(mlnx_models_v2.SegmentationIdAllocation).,1,2,0.25,529
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Get entry of specified network.""""""",1,2,0.25,530
94492767e009fee24b8fcb5b588943ad159c7254,"vlan_ids |= set(moves.xrange(vlan_range[0], vlan_range[1] + 1))",1,2,0.25,531
94492767e009fee24b8fcb5b588943ad159c7254,"for physical_network, vlan_ranges in network_vlan_ranges.iteritems():",1,2,0.25,532
94492767e009fee24b8fcb5b588943ad159c7254,"sg_id for port_in_db, sg_id in port_and_sgs if sg_id",1,2,0.25,533
94492767e009fee24b8fcb5b588943ad159c7254,port = session.query(models_v2.Port).filter_by(id=port_id).one(),1,2,0.25,534
94492767e009fee24b8fcb5b588943ad159c7254,session = db.get_session(),1,2,0.25,535
94492767e009fee24b8fcb5b588943ad159c7254,port['status'] = status,1,2,0.25,536
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,537
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:segmentation_id required"")",1,2,0.25,538
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,539
94492767e009fee24b8fcb5b588943ad159c7254,__tablename__ = 'port_profile',1,2,0.25,540
94492767e009fee24b8fcb5b588943ad159c7254,"def __init__(self, network_id, network_type, physical_network, vlan_id):",1,2,0.25,541
94492767e009fee24b8fcb5b588943ad159c7254,"segmentation_id = sa.Column(sa.Integer, nullable=False)",1,2,0.25,542
94492767e009fee24b8fcb5b588943ad159c7254,physical_network = sa.Column(sa.String(64)),1,2,0.25,543
94492767e009fee24b8fcb5b588943ad159c7254,__tablename__ = 'mlnx_network_bindings',1,2,0.25,544
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Represents binding of virtual network.",1,2,0.25,545
94492767e009fee24b8fcb5b588943ad159c7254,self.segmentation_id = segmentation_id,1,2,0.25,546
94492767e009fee24b8fcb5b588943ad159c7254,self.physical_network = physical_network,1,2,0.25,547
94492767e009fee24b8fcb5b588943ad159c7254,"def __init__(self, physical_network, segmentation_id):",1,2,0.25,548
94492767e009fee24b8fcb5b588943ad159c7254,__tablename__ = 'segmentation_id_allocation',1,2,0.25,549
94492767e009fee24b8fcb5b588943ad159c7254,from sqlalchemy import sql,1,2,0.25,550
94492767e009fee24b8fcb5b588943ad159c7254,import sqlalchemy as sa,1,2,0.25,551
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,552
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,553
94492767e009fee24b8fcb5b588943ad159c7254,allocations = dict(),1,2,0.25,554
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import model_base,1,2,0.25,555
94492767e009fee24b8fcb5b588943ad159c7254,for entry in entries:,1,2,0.25,556
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""Network type for tenant networks """,1,2,0.25,557
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Sending update port message"")",1,2,0.25,558
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Sending delete network message"")",1,2,0.25,559
94492767e009fee24b8fcb5b588943ad159c7254,"def network_delete(self, context, network_id):",1,2,0.25,560
94492767e009fee24b8fcb5b588943ad159c7254,"self.topic_port_update = topics.get_topic_name(topic,",1,2,0.25,561
94492767e009fee24b8fcb5b588943ad159c7254,"self.topic_network_delete = topics.get_topic_name(topic,",1,2,0.25,562
94492767e009fee24b8fcb5b588943ad159c7254,self.topic = topic,1,2,0.25,563
94492767e009fee24b8fcb5b588943ad159c7254,API version history:,1,2,0.25,564
94492767e009fee24b8fcb5b588943ad159c7254,LOG = logging.getLogger(__name__),1,2,0.25,565
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.agent import securitygroups_rpc as sg_rpc,1,2,0.25,566
94492767e009fee24b8fcb5b588943ad159c7254,from oslo import messaging,1,2,0.25,567
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,568
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,569
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Device %(device)s details requested from %(agent_id)s""),",1,2,0.25,570
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %(device)s details requested from %(agent_id)s"",",0,2,0.25,571
94492767e009fee24b8fcb5b588943ad159c7254,"entry = mlnx_models_v2.SegmentationIdAllocation(physical_network,",1,2,0.25,572
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""Invalid vnic_type on port_create"")",1,2,0.25,573
94492767e009fee24b8fcb5b588943ad159c7254,"msg = _(""provider:physical_network required"")",1,2,0.25,574
94492767e009fee24b8fcb5b588943ad159c7254,"kwargs = {'port': port,",1,2,0.25,575
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.openstack.common import log as logging,1,2,0.25,576
94492767e009fee24b8fcb5b588943ad159c7254,""" with physical_network_type is either eth or ib"")),",1,2,0.25,577
94492767e009fee24b8fcb5b588943ad159c7254,from neutron import manager,1,2,0.25,578
94492767e009fee24b8fcb5b588943ad159c7254,"""Removing vlan %(seg_id)s on """,1,2,0.25,579
94492767e009fee24b8fcb5b588943ad159c7254,"""physical network """,1,2,0.25,580
94492767e009fee24b8fcb5b588943ad159c7254,"# Copyright 2013 Mellanox Technologies, Ltd",1,2,0.25,581
94492767e009fee24b8fcb5b588943ad159c7254,"# it's not, so remove it from table",1,2,0.25,582
94492767e009fee24b8fcb5b588943ad159c7254,"def _add_missing_allocatable_vlans(session, physical_network, vlan_ids):",1,2,0.25,583
94492767e009fee24b8fcb5b588943ad159c7254,for entry in allocations[physical_network]:,1,2,0.25,584
94492767e009fee24b8fcb5b588943ad159c7254,LOG = logging.getLogger(__name__),1,2,0.25,585
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.openstack.common import log as logging,1,2,0.25,586
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.plugins.mlnx.db import mlnx_models_v2,1,2,0.25,587
94492767e009fee24b8fcb5b588943ad159c7254,from sqlalchemy.orm import exc,1,2,0.25,588
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.i18n import _LW,1,2,0.25,589
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import securitygroups_db as sg_db,1,2,0.25,590
94492767e009fee24b8fcb5b588943ad159c7254,from neutron.db import models_v2,1,2,0.25,591
94492767e009fee24b8fcb5b588943ad159c7254,import neutron.db.api as db,1,2,0.25,592
94492767e009fee24b8fcb5b588943ad159c7254,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.25,593
94492767e009fee24b8fcb5b588943ad159c7254,from six import moves,1,2,0.25,594
94492767e009fee24b8fcb5b588943ad159c7254,port['port']['status'] = q_const.PORT_STATUS_DOWN,1,1,0.125,595
94492767e009fee24b8fcb5b588943ad159c7254,if port_binding:,1,1,0.125,596
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.VIF_TYPE] = port_binding.vnic_type,1,1,0.125,597
94492767e009fee24b8fcb5b588943ad159c7254,fabric = binding.physical_network,1,1,0.125,598
94492767e009fee24b8fcb5b588943ad159c7254,"vnic_type = self._process_port_binding_create(context,",1,1,0.125,599
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.PROFILE] = {'physical_network': fabric},1,1,0.125,600
94492767e009fee24b8fcb5b588943ad159c7254,"context, port, sgids)",1,1,0.125,601
94492767e009fee24b8fcb5b588943ad159c7254,"sgids = self._get_security_groups_on_port(context, port)",1,1,0.125,602
94492767e009fee24b8fcb5b588943ad159c7254,return port,1,1,0.125,603
94492767e009fee24b8fcb5b588943ad159c7254,port_data = port['port'],1,1,0.125,604
94492767e009fee24b8fcb5b588943ad159c7254,"nets = super(MellanoxEswitchPlugin,",1,1,0.125,605
94492767e009fee24b8fcb5b588943ad159c7254,"port_binding = db.get_port_profile_binding(context.session,",1,1,0.125,606
94492767e009fee24b8fcb5b588943ad159c7254,if not network_type:,1,1,0.125,607
94492767e009fee24b8fcb5b588943ad159c7254,if binding.segmentation_id != constants.LOCAL_VLAN_ID:,1,1,0.125,608
94492767e009fee24b8fcb5b588943ad159c7254,return net,1,1,0.125,609
94492767e009fee24b8fcb5b588943ad159c7254,# note - exception will rollback entire transaction,1,1,0.125,610
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id = constants.LOCAL_VLAN_ID,1,1,0.125,611
94492767e009fee24b8fcb5b588943ad159c7254,if network_type == svc_constants.TYPE_NONE:,1,1,0.125,612
94492767e009fee24b8fcb5b588943ad159c7254,network_type = self.tenant_network_type,1,1,0.125,613
94492767e009fee24b8fcb5b588943ad159c7254,"context, network['network'])",1,1,0.125,614
94492767e009fee24b8fcb5b588943ad159c7254,tenant_id = self._get_tenant_id_for_create(,1,1,0.125,615
94492767e009fee24b8fcb5b588943ad159c7254,#set up default security groups,1,1,0.125,616
94492767e009fee24b8fcb5b588943ad159c7254,"vlan_id) = self._process_provider_create(context,",1,1,0.125,617
94492767e009fee24b8fcb5b588943ad159c7254,"original_port = self.get_port(context, port_id)",1,1,0.125,618
94492767e009fee24b8fcb5b588943ad159c7254,"(network_type, physical_network,",1,1,0.125,619
94492767e009fee24b8fcb5b588943ad159c7254,self.base_binding_dict[portbindings.VIF_TYPE] = vnic_type,1,1,0.125,620
94492767e009fee24b8fcb5b588943ad159c7254,"if self._check_port_binding_for_net_type(vnic_type,",1,1,0.125,621
94492767e009fee24b8fcb5b588943ad159c7254,res_ports = [],1,1,0.125,622
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,623
94492767e009fee24b8fcb5b588943ad159c7254,"updated_port = super(MellanoxEswitchPlugin, self).update_port(",1,1,0.125,624
94492767e009fee24b8fcb5b588943ad159c7254,if port:,1,1,0.125,625
94492767e009fee24b8fcb5b588943ad159c7254,if port['status'] != new_status:,1,1,0.125,626
94492767e009fee24b8fcb5b588943ad159c7254,vnic_type = binding_profile[constants.VNIC_TYPE],1,1,0.125,627
94492767e009fee24b8fcb5b588943ad159c7254,entry['vlan_id'] = binding.segmentation_id,1,1,0.125,628
94492767e009fee24b8fcb5b588943ad159c7254,if cfg.CONF.AGENT.rpc_support_old_agents:,1,1,0.125,629
94492767e009fee24b8fcb5b588943ad159c7254,if port:,1,1,0.125,630
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Agent requests device details.""""""",1,1,0.125,631
94492767e009fee24b8fcb5b588943ad159c7254,target = messaging.Target(version='1.2'),1,1,0.125,632
94492767e009fee24b8fcb5b588943ad159c7254,#  1.2 Support get_devices_details_list,1,1,0.125,633
94492767e009fee24b8fcb5b588943ad159c7254,# History,1,1,0.125,634
94492767e009fee24b8fcb5b588943ad159c7254,class MlnxRpcCallbacks(object):,1,1,0.125,635
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,636
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,637
94492767e009fee24b8fcb5b588943ad159c7254,To maintain compatibility with Linux Bridge L2 Agent for DHCP/L3,1,1,0.125,638
94492767e009fee24b8fcb5b588943ad159c7254,"context, port_id, port)",1,1,0.125,639
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Get port according to device.",1,1,0.125,640
94492767e009fee24b8fcb5b588943ad159c7254,"def get_port_from_device(cls, device):",1,1,0.125,641
94492767e009fee24b8fcb5b588943ad159c7254,"context, port_id, do_notify=False)",1,1,0.125,642
94492767e009fee24b8fcb5b588943ad159c7254,router_ids = self.disassociate_floatingips(,1,1,0.125,643
94492767e009fee24b8fcb5b588943ad159c7254,if l3_port_check:,1,1,0.125,644
94492767e009fee24b8fcb5b588943ad159c7254,"# and l3-router.  If so, we should prevent deletion.",1,1,0.125,645
94492767e009fee24b8fcb5b588943ad159c7254,if need_port_update_notify:,1,1,0.125,646
94492767e009fee24b8fcb5b588943ad159c7254,need_port_update_notify = True,1,1,0.125,647
94492767e009fee24b8fcb5b588943ad159c7254,if original_port['admin_state_up'] != updated_port['admin_state_up']:,1,1,0.125,648
94492767e009fee24b8fcb5b588943ad159c7254,"context, original_port, updated_port)",1,1,0.125,649
94492767e009fee24b8fcb5b588943ad159c7254,"context, port_id, port, original_port, updated_port)",1,1,0.125,650
94492767e009fee24b8fcb5b588943ad159c7254,need_port_update_notify = self.update_security_group_on_port(,1,1,0.125,651
94492767e009fee24b8fcb5b588943ad159c7254,phy_net_type = self.phys_network_type_maps[phy_net],1,1,0.125,652
94492767e009fee24b8fcb5b588943ad159c7254,def _parse_network_vlan_ranges(self):,1,1,0.125,653
94492767e009fee24b8fcb5b588943ad159c7254,if not binding_profile_set:,1,1,0.125,654
94492767e009fee24b8fcb5b588943ad159c7254,def _parse_physical_network_types(self):,1,1,0.125,655
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.SEGMENTATION_ID] = None,1,1,0.125,656
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.PHYSICAL_NETWORK] = binding.physical_network,1,1,0.125,657
94492767e009fee24b8fcb5b588943ad159c7254,if binding.network_type == svc_constants.TYPE_FLAT:,1,1,0.125,658
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.NETWORK_TYPE] = binding.network_type,1,1,0.125,659
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Network VLAN ranges: %s""), self.network_vlan_ranges)",1,1,0.125,660
94492767e009fee24b8fcb5b588943ad159c7254,except Exception as ex:,1,1,0.125,661
94492767e009fee24b8fcb5b588943ad159c7254,self.network_vlan_ranges = plugin_utils.parse_network_vlan_ranges(,1,1,0.125,662
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Physical Network type mappings: %s""),",1,1,0.125,663
94492767e009fee24b8fcb5b588943ad159c7254,"""for network %(net)s. Server terminated!""),",1,1,0.125,664
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Parsing physical_network_type failed: %s. """,1,1,0.125,665
94492767e009fee24b8fcb5b588943ad159c7254,self.phys_network_type_maps = utils.parse_mappings(,1,1,0.125,666
94492767e009fee24b8fcb5b588943ad159c7254,self.physical_net_type = cfg.CONF.MLNX.physical_network_type,1,1,0.125,667
94492767e009fee24b8fcb5b588943ad159c7254,self.phys_network_type_maps[network] = self.physical_net_type,1,1,0.125,668
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.SEGMENTATION_ID] = binding.segmentation_id,1,1,0.125,669
94492767e009fee24b8fcb5b588943ad159c7254,if not self.phys_network_type_maps.get(network):,1,1,0.125,670
94492767e009fee24b8fcb5b588943ad159c7254,def _parse_network_config(self):,1,1,0.125,671
94492767e009fee24b8fcb5b588943ad159c7254,self.agent_notifiers[q_const.AGENT_TYPE_L3] = (,1,1,0.125,672
94492767e009fee24b8fcb5b588943ad159c7254,self.agent_notifiers[q_const.AGENT_TYPE_DHCP] = (,1,1,0.125,673
94492767e009fee24b8fcb5b588943ad159c7254,self.notifier = agent_notify_api.AgentNotifierApi(topics.AGENT),1,1,0.125,674
94492767e009fee24b8fcb5b588943ad159c7254,for svc_topic in self.service_topics.values():,1,1,0.125,675
94492767e009fee24b8fcb5b588943ad159c7254,"self.endpoints = [rpc_callbacks.MlnxRpcCallbacks(),",1,1,0.125,676
94492767e009fee24b8fcb5b588943ad159c7254,def _setup_rpc(self):,1,1,0.125,677
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Mellanox Embedded Switch Plugin initialisation complete"")",1,1,0.125,678
94492767e009fee24b8fcb5b588943ad159c7254,self.router_scheduler = importutils.import_object(,1,1,0.125,679
94492767e009fee24b8fcb5b588943ad159c7254,self.network_scheduler = importutils.import_object(,1,1,0.125,680
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""%s can not be found in database"", device)",1,1,0.125,681
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.PHYSICAL_NETWORK] = None,1,1,0.125,682
94492767e009fee24b8fcb5b588943ad159c7254,def _set_tenant_network_type(self):,1,1,0.125,683
94492767e009fee24b8fcb5b588943ad159c7254,phy_net = net_binding.physical_network,1,1,0.125,684
94492767e009fee24b8fcb5b588943ad159c7254,"def _process_local_net(self, physical_network_set, segmentation_id_set):",1,1,0.125,685
94492767e009fee24b8fcb5b588943ad159c7254,"net_binding = db.get_network_binding(context.session,",1,1,0.125,686
94492767e009fee24b8fcb5b588943ad159c7254,binding_profile_set = attributes.is_attr_set(binding_profile),1,1,0.125,687
94492767e009fee24b8fcb5b588943ad159c7254,binding_profile = attrs.get(portbindings.PROFILE),1,1,0.125,688
94492767e009fee24b8fcb5b588943ad159c7254,return False,1,1,0.125,689
94492767e009fee24b8fcb5b588943ad159c7254,"return vnic_type in (constants.VIF_TYPE_DIRECT,",1,1,0.125,690
94492767e009fee24b8fcb5b588943ad159c7254,if net_type == constants.TYPE_ETH:,1,1,0.125,691
94492767e009fee24b8fcb5b588943ad159c7254,"def _check_port_binding_for_net_type(self, vnic_type, net_type):",1,1,0.125,692
94492767e009fee24b8fcb5b588943ad159c7254,return physical_network,1,1,0.125,693
94492767e009fee24b8fcb5b588943ad159c7254,elif 'default' in self.network_vlan_ranges:,1,1,0.125,694
94492767e009fee24b8fcb5b588943ad159c7254,"""%s"") % physical_network",1,1,0.125,695
94492767e009fee24b8fcb5b588943ad159c7254,"def _process_net_type(self, network_type,",1,1,0.125,696
94492767e009fee24b8fcb5b588943ad159c7254,if physical_network_set:,1,1,0.125,697
94492767e009fee24b8fcb5b588943ad159c7254,if not utils.is_valid_vlan_tag(segmentation_id):,1,1,0.125,698
94492767e009fee24b8fcb5b588943ad159c7254,self.tenant_network_type = cfg.CONF.MLNX.tenant_network_type,1,1,0.125,699
94492767e009fee24b8fcb5b588943ad159c7254,if not segmentation_id_set:,1,1,0.125,700
94492767e009fee24b8fcb5b588943ad159c7254,"def _process_vlan_net(self, segmentation_id, segmentation_id_set):",1,1,0.125,701
94492767e009fee24b8fcb5b588943ad159c7254,if segmentation_id_set:,1,1,0.125,702
94492767e009fee24b8fcb5b588943ad159c7254,"def _process_flat_net(self, segmentation_id_set):",1,1,0.125,703
94492767e009fee24b8fcb5b588943ad159c7254,"return (network_type, physical_network, segmentation_id)",1,1,0.125,704
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network,",1,1,0.125,705
94492767e009fee24b8fcb5b588943ad159c7254,if not network_type_set:,1,1,0.125,706
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id_set = attributes.is_attr_set(segmentation_id),1,1,0.125,707
94492767e009fee24b8fcb5b588943ad159c7254,physical_network_set = attributes.is_attr_set(physical_network),1,1,0.125,708
94492767e009fee24b8fcb5b588943ad159c7254,network_type_set = attributes.is_attr_set(network_type),1,1,0.125,709
94492767e009fee24b8fcb5b588943ad159c7254,network_type = attrs.get(provider.NETWORK_TYPE),1,1,0.125,710
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Invalid tenant_network_type: %s. """,1,1,0.125,711
94492767e009fee24b8fcb5b588943ad159c7254,"db.set_port_status(port['id'], new_status)",1,1,0.125,712
94492767e009fee24b8fcb5b588943ad159c7254,if not cfg.CONF.AGENT.rpc_support_old_agents:,1,1,0.125,713
94492767e009fee24b8fcb5b588943ad159c7254,return entry,1,1,0.125,714
94492767e009fee24b8fcb5b588943ad159c7254,"rpc_context,",1,1,0.125,715
94492767e009fee24b8fcb5b588943ad159c7254,def test_devices_details_list(self):,1,1,0.125,716
94492767e009fee24b8fcb5b588943ad159c7254,"device='fake_device',",1,1,0.125,717
94492767e009fee24b8fcb5b588943ad159c7254,"'get_device_details', rpc_method='call',",1,1,0.125,718
94492767e009fee24b8fcb5b588943ad159c7254,def test_device_details(self):,1,1,0.125,719
94492767e009fee24b8fcb5b588943ad159c7254,def test_port_update_old_agent(self):,1,1,0.125,720
94492767e009fee24b8fcb5b588943ad159c7254,def test_port_update(self):,1,1,0.125,721
94492767e009fee24b8fcb5b588943ad159c7254,def test_delete_network(self):,1,1,0.125,722
94492767e009fee24b8fcb5b588943ad159c7254,kwargs['segmentation_id'] = kwargs['vlan_id'],1,1,0.125,723
94492767e009fee24b8fcb5b588943ad159c7254,if topic:,1,1,0.125,724
94492767e009fee24b8fcb5b588943ad159c7254,prepare_args['fanout'] = True,1,1,0.125,725
94492767e009fee24b8fcb5b588943ad159c7254,if fanout:,1,1,0.125,726
94492767e009fee24b8fcb5b588943ad159c7254,prepare_args['version'] = expected_version,1,1,0.125,727
94492767e009fee24b8fcb5b588943ad159c7254,if expected_version:,1,1,0.125,728
94492767e009fee24b8fcb5b588943ad159c7254,prepare_args = {},1,1,0.125,729
94492767e009fee24b8fcb5b588943ad159c7254,rpc_mock.return_value = expected_retval,1,1,0.125,730
94492767e009fee24b8fcb5b588943ad159c7254,prepare_mock.return_value = rpcapi.client,1,1,0.125,731
94492767e009fee24b8fcb5b588943ad159c7254,"expected_version = kwargs.pop('version', None)",1,1,0.125,732
94492767e009fee24b8fcb5b588943ad159c7254,"ctxt = oslo_context.RequestContext('fake_user', 'fake_project')",1,1,0.125,733
94492767e009fee24b8fcb5b588943ad159c7254,"def _test_mlnx_api(self, rpcapi, topic, method, rpc_method, **kwargs):",1,1,0.125,734
94492767e009fee24b8fcb5b588943ad159c7254,class rpcApiTestCase(base.BaseTestCase):,1,1,0.125,735
94492767e009fee24b8fcb5b588943ad159c7254,import mock,1,1,0.125,736
94492767e009fee24b8fcb5b588943ad159c7254,import contextlib,1,1,0.125,737
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,738
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,739
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,740
94492767e009fee24b8fcb5b588943ad159c7254,class TestMlnxPortBindingHost(,1,1,0.125,741
94492767e009fee24b8fcb5b588943ad159c7254,FIREWALL_DRIVER = test_sg_rpc.FIREWALL_NOOP_DRIVER,1,1,0.125,742
94492767e009fee24b8fcb5b588943ad159c7254,"'get_devices_details_list', rpc_method='call',",1,1,0.125,743
94492767e009fee24b8fcb5b588943ad159c7254,def test_update_device_down(self):,1,1,0.125,744
94492767e009fee24b8fcb5b588943ad159c7254,"'update_device_down', rpc_method='call',",1,1,0.125,745
94492767e009fee24b8fcb5b588943ad159c7254,agent_opts = [,1,1,0.125,746
94492767e009fee24b8fcb5b588943ad159c7254,self.base_binding_dict = {,1,1,0.125,747
94492767e009fee24b8fcb5b588943ad159c7254,if __name__ == '__main__':,1,1,0.125,748
94492767e009fee24b8fcb5b588943ad159c7254,# Start everything.,1,1,0.125,749
94492767e009fee24b8fcb5b588943ad159c7254,except Exception as e:,1,1,0.125,750
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Parsing physical_interface_mappings failed: %s. """,1,1,0.125,751
94492767e009fee24b8fcb5b588943ad159c7254,interface_mappings = utils.parse_mappings(,1,1,0.125,752
94492767e009fee24b8fcb5b588943ad159c7254,def main():,1,1,0.125,753
94492767e009fee24b8fcb5b588943ad159c7254,import sys,1,1,0.125,754
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,755
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,756
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,757
94492767e009fee24b8fcb5b588943ad159c7254,"""polling for local device changes."")),",1,1,0.125,758
94492767e009fee24b8fcb5b588943ad159c7254,],1,1,0.125,759
94492767e009fee24b8fcb5b588943ad159c7254,def test_update_device_up(self):,1,1,0.125,760
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""backoff rate multiplier for waiting period between """,1,1,0.125,761
94492767e009fee24b8fcb5b588943ad159c7254,"""to daemon before giving up"")),",1,1,0.125,762
94492767e009fee24b8fcb5b588943ad159c7254,"help=_('eswitch daemon end point')),",1,1,0.125,763
94492767e009fee24b8fcb5b588943ad159c7254,eswitch_opts = [,1,1,0.125,764
94492767e009fee24b8fcb5b588943ad159c7254,DEFAULT_INTERFACE_MAPPINGS = [],1,1,0.125,765
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,766
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,767
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,768
94492767e009fee24b8fcb5b588943ad159c7254,# oslo.config limits ${var} expansion to global variables,1,1,0.125,769
94492767e009fee24b8fcb5b588943ad159c7254,# oslo_config limits ${var} expansion to global variables,0,1,0.125,770
94492767e009fee24b8fcb5b588943ad159c7254,import oslo_messaging,0,1,0.125,771
94492767e009fee24b8fcb5b588943ad159c7254,"'update_device_up', rpc_method='call',",1,1,0.125,772
94492767e009fee24b8fcb5b588943ad159c7254,class TestMlnxPortBindingNoSG(TestMlnxPortBinding):,1,1,0.125,773
94492767e009fee24b8fcb5b588943ad159c7254,profile_arg = {portbindings.PROFILE: {}},1,1,0.125,774
94492767e009fee24b8fcb5b588943ad159c7254,def test_create_port_binding_profile_with_empty_dict(self):,1,1,0.125,775
94492767e009fee24b8fcb5b588943ad159c7254,class SegmentationIdAllocationTest(testlib_api.SqlTestCase):,1,1,0.125,776
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.release_network(self.session, PHYS_NET, vlan_id, VLAN_RANGES)",1,1,0.125,777
94492767e009fee24b8fcb5b588943ad159c7254,"PHYS_NET,",1,1,0.125,778
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.reserve_specific_network(self.session, PHYS_NET, vlan_id)",1,1,0.125,779
94492767e009fee24b8fcb5b588943ad159c7254,def test_specific_segmentationId_inside_pool(self):,1,1,0.125,780
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.release_network(self.session, PHYS_NET,",1,1,0.125,781
94492767e009fee24b8fcb5b588943ad159c7254,for vlan_id in vlan_ids:,1,1,0.125,782
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertThat(vlan_id, matchers.GreaterThan(VLAN_MIN - 1))",1,1,0.125,783
94492767e009fee24b8fcb5b588943ad159c7254,vlan_ids = set(),1,1,0.125,784
94492767e009fee24b8fcb5b588943ad159c7254,def test_segmentationId_pool(self):,1,1,0.125,785
94492767e009fee24b8fcb5b588943ad159c7254,def test_sync_segmentationIdAllocation(self):,1,1,0.125,786
94492767e009fee24b8fcb5b588943ad159c7254,self.session = db.get_session(),1,1,0.125,787
94492767e009fee24b8fcb5b588943ad159c7254,def setUp(self):,1,1,0.125,788
94492767e009fee24b8fcb5b588943ad159c7254,TEST_NETWORK_ID = 'abcdefghijklmnopqrstuvwxyz',1,1,0.125,789
94492767e009fee24b8fcb5b588943ad159c7254,class NetworkBindingsTest(test_plugin.NeutronDbPluginV2TestCase):,1,1,0.125,790
94492767e009fee24b8fcb5b588943ad159c7254,"VLAN_RANGES = {PHYS_NET: [(VLAN_MIN, VLAN_MAX)]}",1,1,0.125,791
94492767e009fee24b8fcb5b588943ad159c7254,NET_TYPE = 'vlan',1,1,0.125,792
94492767e009fee24b8fcb5b588943ad159c7254,PHYS_NET_2 = 'physnet2',1,1,0.125,793
94492767e009fee24b8fcb5b588943ad159c7254,PHYS_NET = 'physnet1',1,1,0.125,794
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,795
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,796
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,797
94492767e009fee24b8fcb5b588943ad159c7254,"db.set_port_status(port['id'], q_const.PORT_STATUS_ACTIVE)",1,1,0.125,798
94492767e009fee24b8fcb5b588943ad159c7254,if port['status'] != q_const.PORT_STATUS_ACTIVE:,1,1,0.125,799
94492767e009fee24b8fcb5b588943ad159c7254,"db.set_port_status(port['id'], q_const.PORT_STATUS_DOWN)",1,1,0.125,800
94492767e009fee24b8fcb5b588943ad159c7254,if port['status'] != q_const.PORT_STATUS_DOWN:,1,1,0.125,801
94492767e009fee24b8fcb5b588943ad159c7254,],1,1,0.125,802
94492767e009fee24b8fcb5b588943ad159c7254,def test_specific_segmentationId_outside_pool(self):,1,1,0.125,803
94492767e009fee24b8fcb5b588943ad159c7254,def test_add_network_binding(self):,1,1,0.125,804
94492767e009fee24b8fcb5b588943ad159c7254,profile_arg = {portbindings.PROFILE:,1,1,0.125,805
94492767e009fee24b8fcb5b588943ad159c7254,"class TestMlnxNetworksV2(test_plugin.TestNetworksV2, MlnxPluginV2TestCase):",1,1,0.125,806
94492767e009fee24b8fcb5b588943ad159c7254,"for vif_type in [constants.VIF_TYPE_HOSTDEV,",1,1,0.125,807
94492767e009fee24b8fcb5b588943ad159c7254,def test_create_port_binding_profile_vif_type(self):,1,1,0.125,808
94492767e009fee24b8fcb5b588943ad159c7254,profile_arg = {portbindings.PROFILE: None},1,1,0.125,809
94492767e009fee24b8fcb5b588943ad159c7254,def test_create_port_binding_profile_none(self):,1,1,0.125,810
94492767e009fee24b8fcb5b588943ad159c7254,def test_create_port_no_binding_profile(self):,1,1,0.125,811
94492767e009fee24b8fcb5b588943ad159c7254,p = port['port'],1,1,0.125,812
94492767e009fee24b8fcb5b588943ad159c7254,expected_vif_type = constants.VIF_TYPE_DIRECT,1,1,0.125,813
94492767e009fee24b8fcb5b588943ad159c7254,if expected_vif_type is None:,1,1,0.125,814
94492767e009fee24b8fcb5b588943ad159c7254,"def _check_default_port_binding_profole(self, port,",1,1,0.125,815
94492767e009fee24b8fcb5b588943ad159c7254,"def setUp(self, firewall_driver=None):",1,1,0.125,816
94492767e009fee24b8fcb5b588943ad159c7254,VIF_TYPE = constants.VIF_TYPE_DIRECT,1,1,0.125,817
94492767e009fee24b8fcb5b588943ad159c7254,"class TestMlnxPortBinding(MlnxPluginV2TestCase,",1,1,0.125,818
94492767e009fee24b8fcb5b588943ad159c7254,"class TestMlnxPortsV2(test_plugin.TestPortsV2,",1,1,0.125,819
94492767e009fee24b8fcb5b588943ad159c7254,TEST_NETWORK_ID = network['network']['id'],1,1,0.125,820
94492767e009fee24b8fcb5b588943ad159c7254,"class TestMlnxV2HTTPResponse(test_plugin.TestV2HTTPResponse,",1,1,0.125,821
94492767e009fee24b8fcb5b588943ad159c7254,"class TestMlnxBasicGet(test_plugin.TestBasicGet, MlnxPluginV2TestCase):",1,1,0.125,822
94492767e009fee24b8fcb5b588943ad159c7254,self.port_create_status = 'DOWN',1,1,0.125,823
94492767e009fee24b8fcb5b588943ad159c7254,def setUp(self):,1,1,0.125,824
94492767e009fee24b8fcb5b588943ad159c7254,class MlnxPluginV2TestCase(test_plugin.NeutronDbPluginV2TestCase):,1,1,0.125,825
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,826
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,827
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,828
94492767e009fee24b8fcb5b588943ad159c7254,VNIC_TYPE = 'normal',1,1,0.125,829
94492767e009fee24b8fcb5b588943ad159c7254,TEST_PORT_ID = port['port']['id'],1,1,0.125,830
94492767e009fee24b8fcb5b588943ad159c7254,def test_add_port_profile_binding(self):,1,1,0.125,831
94492767e009fee24b8fcb5b588943ad159c7254,class PortProfileBindingTest(test_plugin.NeutronDbPluginV2TestCase):,1,1,0.125,832
94492767e009fee24b8fcb5b588943ad159c7254,'security-group' in self.supported_extension_aliases}},1,1,0.125,833
94492767e009fee24b8fcb5b588943ad159c7254,self.conn = n_rpc.create_connection(new=True),1,1,0.125,834
94492767e009fee24b8fcb5b588943ad159c7254,self.vnic_type = cfg.CONF.ESWITCH.vnic_type,1,1,0.125,835
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Parsing physical_network_type failed: %s. """,0,1,0.125,836
94492767e009fee24b8fcb5b588943ad159c7254,return port,1,1,0.125,837
94492767e009fee24b8fcb5b588943ad159c7254,if port:,1,1,0.125,838
94492767e009fee24b8fcb5b588943ad159c7254,To maintain compatibility with Linux Bridge L2 Agent for DHCP/L3,1,1,0.125,839
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Get port according to device.",1,1,0.125,840
94492767e009fee24b8fcb5b588943ad159c7254,"def get_port_from_device(cls, device):",1,1,0.125,841
94492767e009fee24b8fcb5b588943ad159c7254,TAP_PREFIX_LEN = 3,1,1,0.125,842
94492767e009fee24b8fcb5b588943ad159c7254,#to be compatible with Linux Bridge Agent on Network Node,1,1,0.125,843
94492767e009fee24b8fcb5b588943ad159c7254,"class MlnxRpcCallbacks(n_rpc.RpcCallback,",1,1,0.125,844
94492767e009fee24b8fcb5b588943ad159c7254,class MlnxRpcCallbacks(n_rpc.RpcCallback):,0,1,0.125,845
94492767e009fee24b8fcb5b588943ad159c7254,class SegmentationIdAllocationTest(base.BaseTestCase):,1,1,0.125,846
94492767e009fee24b8fcb5b588943ad159c7254,class SegmentationIdAllocationTest(testlib_api.SqlTestCase):,0,1,0.125,847
94492767e009fee24b8fcb5b588943ad159c7254,heartbeat = loopingcall.LoopingCall(self._report_state),1,1,0.125,848
94492767e009fee24b8fcb5b588943ad159c7254,heartbeat = loopingcall.FixedIntervalLoopingCall(,0,1,0.125,849
94492767e009fee24b8fcb5b588943ad159c7254,raise q_exc.InvalidInput(error_message=msg),1,1,0.125,850
94492767e009fee24b8fcb5b588943ad159c7254,def initialize():,1,1,0.125,851
94492767e009fee24b8fcb5b588943ad159c7254,if not zmq:,0,1,0.125,852
94492767e009fee24b8fcb5b588943ad159c7254,"device,",0,1,0.125,853
94492767e009fee24b8fcb5b588943ad159c7254,if dev_details.get('admin_state_up'):,0,1,0.125,854
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.AGENT.root_helper),1,1,0.125,855
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual('sudo',",1,1,0.125,856
94492767e009fee24b8fcb5b588943ad159c7254,if network_type == constants.TYPE_NONE:,1,1,0.125,857
94492767e009fee24b8fcb5b588943ad159c7254,if net_type == constants.TYPE_VLAN:,1,1,0.125,858
94492767e009fee24b8fcb5b588943ad159c7254,"elif network_type in [constants.TYPE_VLAN, constants.TYPE_IB]:",1,1,0.125,859
94492767e009fee24b8fcb5b588943ad159c7254,if binding.network_type == constants.TYPE_FLAT:,1,1,0.125,860
94492767e009fee24b8fcb5b588943ad159c7254,"elif network_type in [svc_constants.TYPE_VLAN,",0,1,0.125,861
94492767e009fee24b8fcb5b588943ad159c7254,if network_type == svc_constants.TYPE_NONE:,0,1,0.125,862
94492767e009fee24b8fcb5b588943ad159c7254,if net_type == svc_constants.TYPE_VLAN:,0,1,0.125,863
94492767e009fee24b8fcb5b588943ad159c7254,"raise exceptions.MlnxException(err_msg=(""Agent cache inconsistency, """,0,1,0.125,864
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Connecting port %s"", port_id)",0,1,0.125,865
94492767e009fee24b8fcb5b588943ad159c7254,LOG.info(_LI('Binding Segmentation ID %(seg_id)s ',0,1,0.125,866
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""No port %s defined on agent.""), port_id)",1,1,0.125,867
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s outside pool""),",1,1,0.125,868
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s to pool""),",1,1,0.125,869
94492767e009fee24b8fcb5b588943ad159c7254,"""physical network %(phy_net)s outside pool"",",0,1,0.125,870
94492767e009fee24b8fcb5b588943ad159c7254,"""network %(net)s from pool"",",0,1,0.125,871
94492767e009fee24b8fcb5b588943ad159c7254,"""%(net)s from pool"",",0,1,0.125,872
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Set Vlan  %(segmentation_id)s on Port %(port_mac)s """,1,1,0.125,873
94492767e009fee24b8fcb5b588943ad159c7254,"error_msg = _(""Action %(action)s failed: %(reason)s"") % msg_dict",1,1,0.125,874
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Set Vlan  %(segmentation_id)s on Port %(port_mac)s """,0,1,0.125,875
94492767e009fee24b8fcb5b588943ad159c7254,"error_msg = _LE(""Action %(action)s failed: %(reason)s"") % msg_dict",0,1,0.125,876
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Failed on Agent initialisation : %s.""",1,1,0.125,877
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""eSwitch Agent Started!""))",1,1,0.125,878
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Removing device with mac_address %s""), device)",1,1,0.125,879
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Delete network %s""), network_id)",1,1,0.125,880
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Provisioning network %s""), network_id)",0,1,0.125,881
94492767e009fee24b8fcb5b588943ad159c7254,"""for network %(network_id)s""),",1,1,0.125,882
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Creating VLAN Network""))",1,1,0.125,883
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Provisioning network %s""), network_id)",1,1,0.125,884
94492767e009fee24b8fcb5b588943ad159c7254,LOG.info(_('Binding Segmentation ID %(seg_id)s',1,1,0.125,885
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Connecting port %s""), port_id)",1,1,0.125,886
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Parsing physical_interface_mappings failed: %s. """,0,1,0.125,887
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""eSwitch Agent Started!""))",0,1,0.125,888
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Removing device with mac_address %s""), device)",0,1,0.125,889
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""No port %s defined on agent."", port_id)",0,1,0.125,890
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Delete network %s"", network_id)",0,1,0.125,891
94492767e009fee24b8fcb5b588943ad159c7254,"""for network %(network_id)s""),",0,1,0.125,892
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Creating VLAN Network"")",0,1,0.125,893
94492767e009fee24b8fcb5b588943ad159c7254,"elif network_type in [svc_constants.TYPE_VLAN, constants.TYPE_IB]:",0,1,0.125,894
94492767e009fee24b8fcb5b588943ad159c7254,if binding.network_type == svc_constants.TYPE_FLAT:,0,1,0.125,895
94492767e009fee24b8fcb5b588943ad159c7254,"TUN_TABLE = {TYPE_GRE: GRE_TUN_TO_LV, TYPE_VXLAN: VXLAN_TUN_TO_LV}",1,1,0.125,896
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.PROFILE] = {'physical_network': fabric},0,1,0.125,897
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.CAPABILITIES] = {,1,1,0.125,898
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.VIF_TYPE] = port_binding.vnic_type,1,1,0.125,899
94492767e009fee24b8fcb5b588943ad159c7254,if port_binding:,1,1,0.125,900
94492767e009fee24b8fcb5b588943ad159c7254,"port_binding = db.get_port_profile_binding(context.session,",1,1,0.125,901
94492767e009fee24b8fcb5b588943ad159c7254,"if self._check_view_auth(context, port, self.binding_view):",1,1,0.125,902
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.SEGMENTATION_ID] = binding.segmentation_id,1,1,0.125,903
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.PHYSICAL_NETWORK] = None,1,1,0.125,904
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.SEGMENTATION_ID] = None,1,1,0.125,905
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.PHYSICAL_NETWORK] = binding.physical_network,1,1,0.125,906
94492767e009fee24b8fcb5b588943ad159c7254,if binding.network_type == constants.TYPE_FLAT:,1,1,0.125,907
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.NETWORK_TYPE] = binding.network_type,1,1,0.125,908
94492767e009fee24b8fcb5b588943ad159c7254,"if self._check_view_auth(context, network, self.network_view):",1,1,0.125,909
94492767e009fee24b8fcb5b588943ad159c7254,fabric = binding.physical_network,0,1,0.125,910
94492767e009fee24b8fcb5b588943ad159c7254,fabric = binding.physical_network,1,1,0.125,911
94492767e009fee24b8fcb5b588943ad159c7254,'security-group' in self.supported_extension_aliases},0,1,0.125,912
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.CAPABILITIES] = {,0,1,0.125,913
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.VIF_TYPE] = port_binding.vnic_type,0,1,0.125,914
94492767e009fee24b8fcb5b588943ad159c7254,if port_binding:,0,1,0.125,915
94492767e009fee24b8fcb5b588943ad159c7254,"port_binding = db.get_port_profile_binding(context.session,",0,1,0.125,916
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.SEGMENTATION_ID] = binding.segmentation_id,0,1,0.125,917
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.PHYSICAL_NETWORK] = None,0,1,0.125,918
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.SEGMENTATION_ID] = None,0,1,0.125,919
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.PHYSICAL_NETWORK] = binding.physical_network,0,1,0.125,920
94492767e009fee24b8fcb5b588943ad159c7254,if binding.network_type == constants.TYPE_FLAT:,0,1,0.125,921
94492767e009fee24b8fcb5b588943ad159c7254,network[provider.NETWORK_TYPE] = binding.network_type,0,1,0.125,922
94492767e009fee24b8fcb5b588943ad159c7254,def __init__(self):,1,1,0.125,923
94492767e009fee24b8fcb5b588943ad159c7254,'security-group' in self.supported_extension_aliases},1,1,0.125,924
94492767e009fee24b8fcb5b588943ad159c7254,port[portbindings.PROFILE] = {'physical_network': fabric},1,1,0.125,925
94492767e009fee24b8fcb5b588943ad159c7254,"TUNNEL_NETWORK_TYPES = [TYPE_GRE, TYPE_VXLAN]",1,1,0.125,926
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""creating VLAN Network""))",1,1,0.125,927
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_GRE = 'gre',1,1,0.125,928
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_VXLAN = 'vxlan',1,1,0.125,929
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_NVGRE = 'gre',1,1,0.125,930
94492767e009fee24b8fcb5b588943ad159c7254,# Values for network_type,1,1,0.125,931
94492767e009fee24b8fcb5b588943ad159c7254,"TUN_TABLE = {p_const.TYPE_GRE: GRE_TUN_TO_LV,",0,1,0.125,932
94492767e009fee24b8fcb5b588943ad159c7254,"TUNNEL_NETWORK_TYPES = [p_const.TYPE_GRE, p_const.TYPE_VXLAN]",0,1,0.125,933
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_VXLAN = 'vxlan',0,1,0.125,934
94492767e009fee24b8fcb5b588943ad159c7254,TYPE_GRE = 'gre',0,1,0.125,935
94492767e009fee24b8fcb5b588943ad159c7254,if network_type == constants.TYPE_VLAN:,1,1,0.125,936
94492767e009fee24b8fcb5b588943ad159c7254,if network_type == p_const.TYPE_VLAN:,0,1,0.125,937
94492767e009fee24b8fcb5b588943ad159c7254,agent_id='fake_agent_id'),1,1,0.125,938
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""%s can not be found in database""), device)",0,1,0.125,939
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Creating VLAN Network""))",0,1,0.125,940
94492767e009fee24b8fcb5b588943ad159c7254,"class TestMlnxPortBinding(MlnxPluginV2TestCase,",0,1,0.125,941
94492767e009fee24b8fcb5b588943ad159c7254,"""for network %(network_id)""),",1,1,0.125,942
94492767e009fee24b8fcb5b588943ad159c7254,"""for network %(network_id)s""),",0,1,0.125,943
94492767e009fee24b8fcb5b588943ad159c7254,if not utils.is_valid_vlan_tag(segmentation_id):,0,1,0.125,944
94492767e009fee24b8fcb5b588943ad159c7254,MAX_VLAN_TAG = 4094,0,1,0.125,945
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertNotIn('binding:vif_type', non_admin_port)",1,1,0.125,946
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIn('status', non_admin_port)",1,1,0.125,947
94492767e009fee24b8fcb5b588943ad159c7254,"non_admin_port = plugin.get_port(ctx, port_id)",1,1,0.125,948
94492767e009fee24b8fcb5b588943ad159c7254,"ctx = context.Context(user_id=None,",1,1,0.125,949
94492767e009fee24b8fcb5b588943ad159c7254,port_id = port['port']['id'],1,1,0.125,950
94492767e009fee24b8fcb5b588943ad159c7254,def test_port_vif_details(self):,1,1,0.125,951
94492767e009fee24b8fcb5b588943ad159c7254,VIF_TYPE = constants.VIF_TYPE_DIRECT,1,1,0.125,952
94492767e009fee24b8fcb5b588943ad159c7254,VIF_TYPE = constants.VIF_TYPE_DIRECT,0,1,0.125,953
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Mellanox Embedded Switch Plugin initialisation complete"")",0,1,0.125,954
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""%s can not be found in database"", device)",1,1,0.125,955
94492767e009fee24b8fcb5b588943ad159c7254,"""for network %(net)s. Server terminated!""),",0,1,0.125,956
94492767e009fee24b8fcb5b588943ad159c7254,port_and_sgs = query.all(),1,1,0.125,957
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,958
94492767e009fee24b8fcb5b588943ad159c7254,"def set_port_status(port_id, status):",1,1,0.125,959
94492767e009fee24b8fcb5b588943ad159c7254,qry = session.query(models_v2.Port).filter_by(mac_address=device_mac),1,1,0.125,960
94492767e009fee24b8fcb5b588943ad159c7254,def get_port_from_device_mac(device_mac):,1,1,0.125,961
94492767e009fee24b8fcb5b588943ad159c7254,for ip in port['fixed_ips']],1,1,0.125,962
94492767e009fee24b8fcb5b588943ad159c7254,port_dict['fixed_ips'] = [ip['ip_address'],1,1,0.125,963
94492767e009fee24b8fcb5b588943ad159c7254,port_dict['security_group_source_groups'] = [],1,1,0.125,964
94492767e009fee24b8fcb5b588943ad159c7254,port_dict['security_group_rules'] = [],1,1,0.125,965
94492767e009fee24b8fcb5b588943ad159c7254,],1,1,0.125,966
94492767e009fee24b8fcb5b588943ad159c7254,port_dict['security_groups'] = [,1,1,0.125,967
94492767e009fee24b8fcb5b588943ad159c7254,port_dict = plugin._make_port_dict(port),1,1,0.125,968
94492767e009fee24b8fcb5b588943ad159c7254,if not port_and_sgs:,1,1,0.125,969
94492767e009fee24b8fcb5b588943ad159c7254,query = query.filter(models_v2.Port.id.startswith(device)),1,1,0.125,970
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,971
94492767e009fee24b8fcb5b588943ad159c7254,"query = query.outerjoin(sg_db.SecurityGroupPortBinding,",1,1,0.125,972
94492767e009fee24b8fcb5b588943ad159c7254,"query = session.query(models_v2.Port,",1,1,0.125,973
94492767e009fee24b8fcb5b588943ad159c7254,sg_binding_port = sg_db.SecurityGroupPortBinding.port_id,1,1,0.125,974
94492767e009fee24b8fcb5b588943ad159c7254,def get_port_from_device(device):,1,1,0.125,975
94492767e009fee24b8fcb5b588943ad159c7254,"def get_port_profile_binding(session, port_id):",1,1,0.125,976
94492767e009fee24b8fcb5b588943ad159c7254,"def add_port_profile_binding(session, port_id, vnic_type):",1,1,0.125,977
94492767e009fee24b8fcb5b588943ad159c7254,"def get_network_binding(session, network_id):",1,1,0.125,978
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network, vlan_id)",1,1,0.125,979
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network, vlan_id):",1,1,0.125,980
94492767e009fee24b8fcb5b588943ad159c7254,"def add_network_binding(session, network_id, network_type,",1,1,0.125,981
94492767e009fee24b8fcb5b588943ad159c7254,if inside:,1,1,0.125,982
94492767e009fee24b8fcb5b588943ad159c7254,inside = True,1,1,0.125,983
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,984
94492767e009fee24b8fcb5b588943ad159c7254,class SegmentationIdAllocation(model_base.BASEV2):,1,1,0.125,985
94492767e009fee24b8fcb5b588943ad159c7254,if (segmentation_id >= vlan_range[0] and,1,1,0.125,986
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,987
94492767e009fee24b8fcb5b588943ad159c7254,self._aliases = aliases,1,1,0.125,988
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Physical Network type mappings: %s""),",0,1,0.125,989
94492767e009fee24b8fcb5b588943ad159c7254,aliases = self._supported_extension_aliases[:],1,1,0.125,990
94492767e009fee24b8fcb5b588943ad159c7254,"if not hasattr(self, '_aliases'):",1,1,0.125,991
94492767e009fee24b8fcb5b588943ad159c7254,def supported_extension_aliases(self):,1,1,0.125,992
94492767e009fee24b8fcb5b588943ad159c7254,"_supported_extension_aliases = [""provider"", ""external-net"", ""router"",",1,1,0.125,993
94492767e009fee24b8fcb5b588943ad159c7254,__native_bulk_support = True,1,1,0.125,994
94492767e009fee24b8fcb5b588943ad159c7254,The provider extension is also supported.,1,1,0.125,995
94492767e009fee24b8fcb5b588943ad159c7254,to perform the actual HCA configuration on each host.,1,1,0.125,996
94492767e009fee24b8fcb5b588943ad159c7254,Current plugin provides embedded HCA Switch connectivity.,1,1,0.125,997
94492767e009fee24b8fcb5b588943ad159c7254,"class MellanoxEswitchPlugin(db_base_plugin_v2.NeutronDbPluginV2,",1,1,0.125,998
94492767e009fee24b8fcb5b588943ad159c7254,import sys,1,1,0.125,999
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,1000
94492767e009fee24b8fcb5b588943ad159c7254,def __repr__(self):,1,1,0.125,1001
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,1002
94492767e009fee24b8fcb5b588943ad159c7254,self.vnic_type = vnic_type,1,1,0.125,1003
94492767e009fee24b8fcb5b588943ad159c7254,self.port_id = port_id,1,1,0.125,1004
94492767e009fee24b8fcb5b588943ad159c7254,"def __init__(self, port_id, vnic_type):",1,1,0.125,1005
94492767e009fee24b8fcb5b588943ad159c7254,"vnic_type = sa.Column(sa.String(32), nullable=False)",1,1,0.125,1006
94492767e009fee24b8fcb5b588943ad159c7254,"port_id = sa.Column(sa.String(36),",1,1,0.125,1007
94492767e009fee24b8fcb5b588943ad159c7254,class PortProfileBinding(model_base.BASEV2):,1,1,0.125,1008
94492767e009fee24b8fcb5b588943ad159c7254,self.segmentation_id = vlan_id,1,1,0.125,1009
94492767e009fee24b8fcb5b588943ad159c7254,self.network_type = network_type,1,1,0.125,1010
94492767e009fee24b8fcb5b588943ad159c7254,"network_type = sa.Column(sa.String(32), nullable=False)",1,1,0.125,1011
94492767e009fee24b8fcb5b588943ad159c7254,"network_id = sa.Column(sa.String(36),",1,1,0.125,1012
94492767e009fee24b8fcb5b588943ad159c7254,class NetworkBinding(model_base.BASEV2):,1,1,0.125,1013
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id <= vlan_range[1]):,1,1,0.125,1014
94492767e009fee24b8fcb5b588943ad159c7254,self.network_id = network_id,1,1,0.125,1015
94492767e009fee24b8fcb5b588943ad159c7254,"for vlan_range in network_vlan_ranges.get(physical_network, []):",1,1,0.125,1016
94492767e009fee24b8fcb5b588943ad159c7254,"help=_(""Enable server RPC compatibility with old agents"")),",1,1,0.125,1017
94492767e009fee24b8fcb5b588943ad159c7254,"""(eth or ib)""))",1,1,0.125,1018
94492767e009fee24b8fcb5b588943ad159c7254,"""(local, vlan, or none)"")),",1,1,0.125,1019
94492767e009fee24b8fcb5b588943ad159c7254,vlan_opts = [,1,1,0.125,1020
94492767e009fee24b8fcb5b588943ad159c7254,DEFAULT_VLAN_RANGES = ['default:1:1000'],1,1,0.125,1021
94492767e009fee24b8fcb5b588943ad159c7254,"cctxt = self.client.prepare(topic=self.topic_port_update, fanout=True)",1,1,0.125,1022
94492767e009fee24b8fcb5b588943ad159c7254,kwargs['vlan_id'] = vlan_id,1,1,0.125,1023
94492767e009fee24b8fcb5b588943ad159c7254,if cfg.CONF.AGENT.rpc_support_old_agents:,1,1,0.125,1024
94492767e009fee24b8fcb5b588943ad159c7254,"'physical_network': physical_network,",1,1,0.125,1025
94492767e009fee24b8fcb5b588943ad159c7254,"cctxt = self.client.prepare(topic=self.topic_network_delete,",1,1,0.125,1026
94492767e009fee24b8fcb5b588943ad159c7254,self.client = n_rpc.get_client(target),1,1,0.125,1027
94492767e009fee24b8fcb5b588943ad159c7254,"target = messaging.Target(topic=topic, version='1.0')",1,1,0.125,1028
94492767e009fee24b8fcb5b588943ad159c7254,"def __init__(self, topic):",1,1,0.125,1029
94492767e009fee24b8fcb5b588943ad159c7254,class AgentNotifierApi(sg_rpc.SecurityGroupAgentRpcApiMixin):,1,1,0.125,1030
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,1031
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,1032
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""%s can not be found in database""), device)",1,1,0.125,1033
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""%s can not be found in database"", device)",0,1,0.125,1034
94492767e009fee24b8fcb5b588943ad159c7254,"""%s"") % physical_network",1,1,0.125,1035
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Invalid tenant_network_type: %s. """,1,1,0.125,1036
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Network VLAN ranges: %s""), self.network_vlan_ranges)",1,1,0.125,1037
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Physical Network type mappings: %s""),",1,1,0.125,1038
94492767e009fee24b8fcb5b588943ad159c7254,""" Server terminated!""), e)",1,1,0.125,1039
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Mellanox Embedded Switch Plugin initialisation complete""))",1,1,0.125,1040
94492767e009fee24b8fcb5b588943ad159c7254,"""%s"") % physical_network",0,1,0.125,1041
94492767e009fee24b8fcb5b588943ad159c7254,"""physical network %(phy_net)s outside pool"",",1,1,0.125,1042
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""Invalid tenant_network_type: %s. """,0,1,0.125,1043
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Network VLAN ranges: %s""), self.network_vlan_ranges)",0,1,0.125,1044
94492767e009fee24b8fcb5b588943ad159c7254,],1,1,0.125,1045
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,1046
94492767e009fee24b8fcb5b588943ad159c7254,#,1,1,0.125,1047
94492767e009fee24b8fcb5b588943ad159c7254,entries = (session.query(mlnx_models_v2.SegmentationIdAllocation).,1,1,0.125,1048
94492767e009fee24b8fcb5b588943ad159c7254,entry.allocated = True,1,1,0.125,1049
94492767e009fee24b8fcb5b588943ad159c7254,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,1050
94492767e009fee24b8fcb5b588943ad159c7254,if entry.allocated:,1,1,0.125,1051
94492767e009fee24b8fcb5b588943ad159c7254,if not entry:,1,1,0.125,1052
94492767e009fee24b8fcb5b588943ad159c7254,def reserve_network(session):,1,1,0.125,1053
94492767e009fee24b8fcb5b588943ad159c7254,"qry = qry.filter_by(physical_network=physical_network,",1,1,0.125,1054
94492767e009fee24b8fcb5b588943ad159c7254,qry = session.query(mlnx_models_v2.SegmentationIdAllocation),1,1,0.125,1055
94492767e009fee24b8fcb5b588943ad159c7254,# networks,1,1,0.125,1056
94492767e009fee24b8fcb5b588943ad159c7254,"_add_missing_allocatable_vlans(session, physical_network, vlan_ids)",1,1,0.125,1057
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network, vlan_ids)",1,1,0.125,1058
94492767e009fee24b8fcb5b588943ad159c7254,for vlan_range in vlan_ranges:,1,1,0.125,1059
94492767e009fee24b8fcb5b588943ad159c7254,vlan_ids = set(),1,1,0.125,1060
94492767e009fee24b8fcb5b588943ad159c7254,"def get_network_state(physical_network, segmentation_id):",1,1,0.125,1061
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Synchronize network_states table with current configured VLAN ranges.""""""",1,1,0.125,1062
94492767e009fee24b8fcb5b588943ad159c7254,for vlan_id in sorted(vlan_ids):,1,1,0.125,1063
94492767e009fee24b8fcb5b588943ad159c7254,# implied.,1,1,0.125,1064
94492767e009fee24b8fcb5b588943ad159c7254,"def _remove_non_allocatable_vlans(session, allocations,",1,1,0.125,1065
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network, vlan_ids):",1,1,0.125,1066
94492767e009fee24b8fcb5b588943ad159c7254,if not entry.allocated:,1,1,0.125,1067
94492767e009fee24b8fcb5b588943ad159c7254,"""%(net)s from pool"",",1,1,0.125,1068
94492767e009fee24b8fcb5b588943ad159c7254,"log_args = {'seg_id': segmentation_id, 'phy_net': physical_network}",1,1,0.125,1069
94492767e009fee24b8fcb5b588943ad159c7254,def sync_network_states(network_vlan_ranges):,1,1,0.125,1070
94492767e009fee24b8fcb5b588943ad159c7254,for entries in allocations.itervalues():,1,1,0.125,1071
94492767e009fee24b8fcb5b588943ad159c7254,"""network %(net)s from pool"",",1,1,0.125,1072
94492767e009fee24b8fcb5b588943ad159c7254,"def _remove_unconfigured_vlans(session, allocations):",1,1,0.125,1073
94492767e009fee24b8fcb5b588943ad159c7254,self.network_vlan_ranges),1,0,0.0,1074
94492767e009fee24b8fcb5b588943ad159c7254,"self.notifier.network_delete(context, net_id)",1,0,0.0,1075
94492767e009fee24b8fcb5b588943ad159c7254,None),1,0,0.0,1076
94492767e009fee24b8fcb5b588943ad159c7254,"return self._fields(net, fields)",1,0,0.0,1077
94492767e009fee24b8fcb5b588943ad159c7254,"sorts=None, limit=None, marker=None, page_reverse=False):",1,0,0.0,1078
94492767e009fee24b8fcb5b588943ad159c7254,"self).get_networks(context, filters, None, sorts,",1,0,0.0,1079
94492767e009fee24b8fcb5b588943ad159c7254,"limit, marker, page_reverse)",1,0,0.0,1080
94492767e009fee24b8fcb5b588943ad159c7254,port['id']),1,0,0.0,1081
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""create_port with %s"", port)",1,0,0.0,1082
94492767e009fee24b8fcb5b588943ad159c7254,port['network_id']),1,0,0.0,1083
94492767e009fee24b8fcb5b588943ad159c7254,"self._ensure_default_security_group_on_port(context, port)",1,0,0.0,1084
94492767e009fee24b8fcb5b588943ad159c7254,"port_data,",1,0,0.0,1085
94492767e009fee24b8fcb5b588943ad159c7254,port['port']),1,0,0.0,1086
94492767e009fee24b8fcb5b588943ad159c7254,port),1,0,0.0,1087
94492767e009fee24b8fcb5b588943ad159c7254,"self._process_portbindings_create_and_update(context,",1,0,0.0,1088
94492767e009fee24b8fcb5b588943ad159c7254,"db.add_port_profile_binding(context.session, port['id'], vnic_type)",1,0,0.0,1089
94492767e009fee24b8fcb5b588943ad159c7254,"self).create_port(context, port)",1,0,0.0,1090
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Created network: %s"", net['id'])",1,0,0.0,1091
94492767e009fee24b8fcb5b588943ad159c7254,"binding.segmentation_id,",1,0,0.0,1092
94492767e009fee24b8fcb5b588943ad159c7254,"db.release_network(session, binding.physical_network,",1,0,0.0,1093
94492767e009fee24b8fcb5b588943ad159c7254,network),1,0,0.0,1094
94492767e009fee24b8fcb5b588943ad159c7254,"self.notify_security_groups_member_updated(context, port)",1,0,0.0,1095
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id),1,0,0.0,1096
94492767e009fee24b8fcb5b588943ad159c7254,"db.add_network_binding(session, net['id'],",1,0,0.0,1097
94492767e009fee24b8fcb5b588943ad159c7254,"network_type,",1,0,0.0,1098
94492767e009fee24b8fcb5b588943ad159c7254,"self._process_l3_create(context, net, network['network'])",1,0,0.0,1099
94492767e009fee24b8fcb5b588943ad159c7254,"self._extend_network_dict_provider(context, net)",1,0,0.0,1100
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Update network"")",1,0,0.0,1101
94492767e009fee24b8fcb5b588943ad159c7254,provider._raise_if_updates_provider_attributes(network['network']),1,0,0.0,1102
94492767e009fee24b8fcb5b588943ad159c7254,"net_id,",1,0,0.0,1103
94492767e009fee24b8fcb5b588943ad159c7254,"self._process_l3_update(context, net, network['network'])",1,0,0.0,1104
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Delete network"")",1,0,0.0,1105
94492767e009fee24b8fcb5b588943ad159c7254,"self._process_l3_delete(context, net_id)",1,0,0.0,1106
94492767e009fee24b8fcb5b588943ad159c7254,"super(MellanoxEswitchPlugin, self).delete_network(context,",1,0,0.0,1107
94492767e009fee24b8fcb5b588943ad159c7254,net_id),1,0,0.0,1108
94492767e009fee24b8fcb5b588943ad159c7254,self._process_port_create_security_group(,1,0,0.0,1109
94492767e009fee24b8fcb5b588943ad159c7254,"'segmentation_id': binding.segmentation_id,",1,0,0.0,1110
94492767e009fee24b8fcb5b588943ad159c7254,"return self._extend_port_dict_binding(context, port)",1,0,0.0,1111
94492767e009fee24b8fcb5b588943ad159c7254,"super(MellanoxEswitchPlugin, self).delete_port(context, port_id)",1,0,0.0,1112
94492767e009fee24b8fcb5b588943ad159c7254,@classmethod,1,0,0.0,1113
94492767e009fee24b8fcb5b588943ad159c7254,device[len(q_const.TAP_DEVICE_PREFIX):]),1,0,0.0,1114
94492767e009fee24b8fcb5b588943ad159c7254,port['network_id']),1,0,0.0,1115
94492767e009fee24b8fcb5b588943ad159c7254,"'physical_network': binding.physical_network,",1,0,0.0,1116
94492767e009fee24b8fcb5b588943ad159c7254,"'network_type': binding.network_type,",1,0,0.0,1117
94492767e009fee24b8fcb5b588943ad159c7254,"'network_id': port['network_id'],",1,0,0.0,1118
94492767e009fee24b8fcb5b588943ad159c7254,"'port_mac': port['mac_address'],",1,0,0.0,1119
94492767e009fee24b8fcb5b588943ad159c7254,"'port_id': port['id'],",1,0,0.0,1120
94492767e009fee24b8fcb5b588943ad159c7254,'admin_state_up': port['admin_state_up']},1,0,0.0,1121
94492767e009fee24b8fcb5b588943ad159c7254,else q_const.PORT_STATUS_DOWN),1,0,0.0,1122
94492767e009fee24b8fcb5b588943ad159c7254,else:,1,0,0.0,1123
94492767e009fee24b8fcb5b588943ad159c7254,return [,1,0,0.0,1124
94492767e009fee24b8fcb5b588943ad159c7254,self.get_device_details(,1,0,0.0,1125
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.TenantNetworksDisabled(),1,0,0.0,1126
94492767e009fee24b8fcb5b588943ad159c7254,"device=device,",1,0,0.0,1127
94492767e009fee24b8fcb5b588943ad159c7254,"self.notify_routers_updated(context, router_ids)",1,0,0.0,1128
94492767e009fee24b8fcb5b588943ad159c7254,"self._delete_port_security_group_bindings(context, port_id)",1,0,0.0,1129
94492767e009fee24b8fcb5b588943ad159c7254,"id,",1,0,0.0,1130
94492767e009fee24b8fcb5b588943ad159c7254,"self.prevent_l3_port_deletion(context, port_id)",1,0,0.0,1131
94492767e009fee24b8fcb5b588943ad159c7254,fields),1,0,0.0,1132
94492767e009fee24b8fcb5b588943ad159c7254,"self._extend_port_dict_binding(context, port)",1,0,0.0,1133
94492767e009fee24b8fcb5b588943ad159c7254,"return self._fields(port, fields)",1,0,0.0,1134
94492767e009fee24b8fcb5b588943ad159c7254,"self).get_ports(context, filters, fields, sorts,",1,0,0.0,1135
94492767e009fee24b8fcb5b588943ad159c7254,"res_ports.append(self._fields(port, fields))",1,0,0.0,1136
94492767e009fee24b8fcb5b588943ad159c7254,return res_ports,1,0,0.0,1137
94492767e009fee24b8fcb5b588943ad159c7254,"port['port'],",1,0,0.0,1138
94492767e009fee24b8fcb5b588943ad159c7254,updated_port),1,0,0.0,1139
94492767e009fee24b8fcb5b588943ad159c7254,need_port_update_notify |= self.is_security_group_member_updated(,1,0,0.0,1140
94492767e009fee24b8fcb5b588943ad159c7254,updated_port['network_id']),1,0,0.0,1141
94492767e009fee24b8fcb5b588943ad159c7254,"self.notifier.port_update(context, updated_port,",1,0,0.0,1142
94492767e009fee24b8fcb5b588943ad159c7254,"binding.physical_network,",1,0,0.0,1143
94492767e009fee24b8fcb5b588943ad159c7254,"binding.network_type,",1,0,0.0,1144
94492767e009fee24b8fcb5b588943ad159c7254,binding.segmentation_id),1,0,0.0,1145
94492767e009fee24b8fcb5b588943ad159c7254,"return self._extend_port_dict_binding(context, updated_port)",1,0,0.0,1146
94492767e009fee24b8fcb5b588943ad159c7254,"db.reserve_specific_network(session,",1,0,0.0,1147
94492767e009fee24b8fcb5b588943ad159c7254,"l3_rpc.L3RpcCallback(),",1,0,0.0,1148
94492767e009fee24b8fcb5b588943ad159c7254,"self._ensure_default_security_group(context, tenant_id)",1,0,0.0,1149
94492767e009fee24b8fcb5b588943ad159c7254,"agents_db.AgentExtRpcCallback(),",1,0,0.0,1150
94492767e009fee24b8fcb5b588943ad159c7254,"self.conn.create_consumer(svc_topic, self.endpoints, fanout=False)",1,0,0.0,1151
94492767e009fee24b8fcb5b588943ad159c7254,self.conn.consume_in_threads(),1,0,0.0,1152
94492767e009fee24b8fcb5b588943ad159c7254,dhcp_rpc_agent_api.DhcpAgentNotifyAPI(),1,0,0.0,1153
94492767e009fee24b8fcb5b588943ad159c7254,l3_rpc_agent_api.L3AgentNotifyAPI(),1,0,0.0,1154
94492767e009fee24b8fcb5b588943ad159c7254,self._parse_physical_network_types(),1,0,0.0,1155
94492767e009fee24b8fcb5b588943ad159c7254,self._parse_network_vlan_ranges(),1,0,0.0,1156
94492767e009fee24b8fcb5b588943ad159c7254,constants.TYPE_IB):,1,0,0.0,1157
94492767e009fee24b8fcb5b588943ad159c7254,"""Server terminated!""),",1,0,0.0,1158
94492767e009fee24b8fcb5b588943ad159c7254,{'type': self.physical_net_type}),1,0,0.0,1159
94492767e009fee24b8fcb5b588943ad159c7254,raise SystemExit(1),1,0,0.0,1160
94492767e009fee24b8fcb5b588943ad159c7254,try:,1,0,0.0,1161
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.MLNX.physical_network_type_mappings),1,0,0.0,1162
94492767e009fee24b8fcb5b588943ad159c7254,except ValueError as e:,1,0,0.0,1163
94492767e009fee24b8fcb5b588943ad159c7254,"""Server terminated!""), e)",1,0,0.0,1164
94492767e009fee24b8fcb5b588943ad159c7254,"{'net': network, 'type': type})",1,0,0.0,1165
94492767e009fee24b8fcb5b588943ad159c7254,metadata_rpc.MetadataRpcCallback()],1,0,0.0,1166
94492767e009fee24b8fcb5b588943ad159c7254,"dhcp_rpc.DhcpRpcCallback(),",1,0,0.0,1167
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.MLNX.network_vlan_ranges),1,0,0.0,1168
94492767e009fee24b8fcb5b588943ad159c7254,"securitygroups_rpc.SecurityGroupServerRpcCallback(),",1,0,0.0,1169
94492767e009fee24b8fcb5b588943ad159c7254,),1,0,0.0,1170
94492767e009fee24b8fcb5b588943ad159c7254,return self._aliases,1,0,0.0,1171
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Start Mellanox Neutron Plugin.""""""",1,0,0.0,1172
94492767e009fee24b8fcb5b588943ad159c7254,"super(MellanoxEswitchPlugin, self).__init__()",1,0,0.0,1173
94492767e009fee24b8fcb5b588943ad159c7254,self._parse_network_config(),1,0,0.0,1174
94492767e009fee24b8fcb5b588943ad159c7254,db.sync_network_states(self.network_vlan_ranges),1,0,0.0,1175
94492767e009fee24b8fcb5b588943ad159c7254,self._set_tenant_network_type(),1,0,0.0,1176
94492767e009fee24b8fcb5b588943ad159c7254,"portbindings.VIF_TYPE: self.vnic_type,",1,0,0.0,1177
94492767e009fee24b8fcb5b588943ad159c7254,portbindings.VIF_DETAILS: {,1,0,0.0,1178
94492767e009fee24b8fcb5b588943ad159c7254,portbindings.CAP_PORT_FILTER:,1,0,0.0,1179
94492767e009fee24b8fcb5b588943ad159c7254,self._setup_rpc(),1,0,0.0,1180
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.network_scheduler_driver,1,0,0.0,1181
94492767e009fee24b8fcb5b588943ad159c7254,),1,0,0.0,1182
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.router_scheduler_driver,1,0,0.0,1183
94492767e009fee24b8fcb5b588943ad159c7254,svc_constants.L3_ROUTER_NAT: topics.L3PLUGIN},1,0,0.0,1184
94492767e009fee24b8fcb5b588943ad159c7254,self.phys_network_type_maps),1,0,0.0,1185
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""%s. Server terminated!""), ex)",1,0,0.0,1186
94492767e009fee24b8fcb5b588943ad159c7254,with session.begin(subtransactions=True):,1,0,0.0,1187
94492767e009fee24b8fcb5b588943ad159c7254,"""(%(min_id)s through %(max_id)s)"") %",1,0,0.0,1188
94492767e009fee24b8fcb5b588943ad159c7254,'max_id': q_const.MAX_VLAN_TAG}),1,0,0.0,1189
94492767e009fee24b8fcb5b588943ad159c7254,"""network"")",1,0,0.0,1190
94492767e009fee24b8fcb5b588943ad159c7254,physical_network_set):,1,0,0.0,1191
94492767e009fee24b8fcb5b588943ad159c7254,svc_constants.TYPE_FLAT]:,1,0,0.0,1192
94492767e009fee24b8fcb5b588943ad159c7254,VIF_TYPE_DIRECT is valid only for Ethernet fabric,1,0,0.0,1193
94492767e009fee24b8fcb5b588943ad159c7254,constants.VIF_TYPE_HOSTDEV),1,0,0.0,1194
94492767e009fee24b8fcb5b588943ad159c7254,elif net_type == constants.TYPE_IB:,1,0,0.0,1195
94492767e009fee24b8fcb5b588943ad159c7254,return vnic_type == constants.VIF_TYPE_HOSTDEV,1,0,0.0,1196
94492767e009fee24b8fcb5b588943ad159c7254,attrs.get('network_id')),1,0,0.0,1197
94492767e009fee24b8fcb5b588943ad159c7254,return self.vnic_type,1,0,0.0,1198
94492767e009fee24b8fcb5b588943ad159c7254,constants.VIF_TYPE_HOSTDEV):,1,0,0.0,1199
94492767e009fee24b8fcb5b588943ad159c7254,phy_net_type):,1,0,0.0,1200
94492767e009fee24b8fcb5b588943ad159c7254,return vnic_type,1,0,0.0,1201
94492767e009fee24b8fcb5b588943ad159c7254,"{'vnic_type': vnic_type, 'net_type': phy_net_type})",1,0,0.0,1202
94492767e009fee24b8fcb5b588943ad159c7254,network['network']),1,0,0.0,1203
94492767e009fee24b8fcb5b588943ad159c7254,"{'min_id': q_const.MIN_VLAN_TAG,",1,0,0.0,1204
94492767e009fee24b8fcb5b588943ad159c7254,physical_network_set),1,0,0.0,1205
94492767e009fee24b8fcb5b588943ad159c7254,sys.exit(1),1,0,0.0,1206
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id_set),1,0,0.0,1207
94492767e009fee24b8fcb5b588943ad159c7254,elif binding.network_type == svc_constants.TYPE_LOCAL:,1,0,0.0,1208
94492767e009fee24b8fcb5b588943ad159c7254,else:,1,0,0.0,1209
94492767e009fee24b8fcb5b588943ad159c7254,"svc_constants.TYPE_LOCAL,",1,0,0.0,1210
94492767e009fee24b8fcb5b588943ad159c7254,svc_constants.TYPE_NONE]:,1,0,0.0,1211
94492767e009fee24b8fcb5b588943ad159c7254,"""Service terminated!""),",1,0,0.0,1212
94492767e009fee24b8fcb5b588943ad159c7254,self.tenant_network_type),1,0,0.0,1213
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id_set):,1,0,0.0,1214
94492767e009fee24b8fcb5b588943ad159c7254,"return (None, None, None)",1,0,0.0,1215
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.InvalidInput(error_message=msg),1,0,0.0,1216
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == svc_constants.TYPE_FLAT:,1,0,0.0,1217
94492767e009fee24b8fcb5b588943ad159c7254,self._process_flat_net(segmentation_id_set),1,0,0.0,1218
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == svc_constants.TYPE_VLAN:,1,0,0.0,1219
94492767e009fee24b8fcb5b588943ad159c7254,"self._process_vlan_net(segmentation_id, segmentation_id_set)",1,0,0.0,1220
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == svc_constants.TYPE_LOCAL:,1,0,0.0,1221
94492767e009fee24b8fcb5b588943ad159c7254,"self._process_local_net(physical_network_set,",1,0,0.0,1222
94492767e009fee24b8fcb5b588943ad159c7254,**kwargs,1,0,0.0,1223
94492767e009fee24b8fcb5b588943ad159c7254,"agent_id='fake_agent_id',",1,0,0.0,1224
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Device no longer exists on agent.""""""",1,0,0.0,1225
94492767e009fee24b8fcb5b588943ad159c7254,"rpc_mock, prepare_mock",1,0,0.0,1226
94492767e009fee24b8fcb5b588943ad159c7254,prepare_mock.assert_called_once_with(**prepare_args),1,0,0.0,1227
94492767e009fee24b8fcb5b588943ad159c7254,del kwargs['vlan_id'],1,0,0.0,1228
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(retval, expected_retval)",1,0,0.0,1229
94492767e009fee24b8fcb5b588943ad159c7254,"rpc_mock.assert_called_once_with(ctxt, method, **kwargs)",1,0,0.0,1230
94492767e009fee24b8fcb5b588943ad159c7254,self._test_mlnx_api(,1,0,0.0,1231
94492767e009fee24b8fcb5b588943ad159c7254,"rpcapi,",1,0,0.0,1232
94492767e009fee24b8fcb5b588943ad159c7254,"topics.get_topic_name(topics.AGENT,",1,0,0.0,1233
94492767e009fee24b8fcb5b588943ad159c7254,"topics.NETWORK,",1,0,0.0,1234
94492767e009fee24b8fcb5b588943ad159c7254,"topics.DELETE),",1,0,0.0,1235
94492767e009fee24b8fcb5b588943ad159c7254,"'network_delete', rpc_method='cast', fanout=True,",1,0,0.0,1236
94492767e009fee24b8fcb5b588943ad159c7254,network_id='fake_request_spec'),1,0,0.0,1237
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.CONF.set_override('rpc_support_old_agents', False, 'AGENT')",1,0,0.0,1238
94492767e009fee24b8fcb5b588943ad159c7254,"topics.PORT,",1,0,0.0,1239
94492767e009fee24b8fcb5b588943ad159c7254,"topics.UPDATE),",1,0,0.0,1240
94492767e009fee24b8fcb5b588943ad159c7254,"'port_update', rpc_method='cast', fanout=True,",1,0,0.0,1241
94492767e009fee24b8fcb5b588943ad159c7254,):,1,0,0.0,1242
94492767e009fee24b8fcb5b588943ad159c7254,) as (,1,0,0.0,1243
94492767e009fee24b8fcb5b588943ad159c7254,"network_type='vlan',",1,0,0.0,1244
94492767e009fee24b8fcb5b588943ad159c7254,"mock.patch.object(rpcapi.client, 'prepare'),",1,0,0.0,1245
94492767e009fee24b8fcb5b588943ad159c7254,**profile_arg) as port:,1,0,0.0,1246
94492767e009fee24b8fcb5b588943ad159c7254,constants.VIF_TYPE_DIRECT]:,1,0,0.0,1247
94492767e009fee24b8fcb5b588943ad159c7254,{constants.VNIC_TYPE: vif_type}},1,0,0.0,1248
94492767e009fee24b8fcb5b588943ad159c7254,self._check_default_port_binding_profole(,1,0,0.0,1249
94492767e009fee24b8fcb5b588943ad159c7254,"port, expected_vif_type=vif_type)",1,0,0.0,1250
94492767e009fee24b8fcb5b588943ad159c7254,"self._delete('ports', port['port']['id'])",1,0,0.0,1251
94492767e009fee24b8fcb5b588943ad159c7254,"self._delete('networks', port['port']['network_id'])",1,0,0.0,1252
94492767e009fee24b8fcb5b588943ad159c7254,try:,1,0,0.0,1253
94492767e009fee24b8fcb5b588943ad159c7254,"expected_res_status=400, **profile_arg):",1,0,0.0,1254
94492767e009fee24b8fcb5b588943ad159c7254,except exc.HTTPClientError:,1,0,0.0,1255
94492767e009fee24b8fcb5b588943ad159c7254,"MlnxPluginV2TestCase,",1,0,0.0,1256
94492767e009fee24b8fcb5b588943ad159c7254,test_bindings.PortBindingsHostTestCaseMixin):,1,0,0.0,1257
94492767e009fee24b8fcb5b588943ad159c7254,"""""""",1,0,0.0,1258
94492767e009fee24b8fcb5b588943ad159c7254,with contextlib.nested(,1,0,0.0,1259
94492767e009fee24b8fcb5b588943ad159c7254,"mock.patch.object(rpcapi.client, rpc_method),",1,0,0.0,1260
94492767e009fee24b8fcb5b588943ad159c7254,"port='fake_port',",1,0,0.0,1261
94492767e009fee24b8fcb5b588943ad159c7254,"physical_network='fake_net',",1,0,0.0,1262
94492767e009fee24b8fcb5b588943ad159c7254,self._check_default_port_binding_profole(port),1,0,0.0,1263
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.IntOpt('polling_interval', default=2,",1,0,0.0,1264
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.CONF.register_opts(agent_opts, ""AGENT"")",1,0,0.0,1265
94492767e009fee24b8fcb5b588943ad159c7254,config.register_agent_state_opts_helper(cfg.CONF),1,0,0.0,1266
94492767e009fee24b8fcb5b588943ad159c7254,mlnx_eswitch_neutron_agent),1,0,0.0,1267
94492767e009fee24b8fcb5b588943ad159c7254,common_config.init(sys.argv[1:]),1,0,0.0,1268
94492767e009fee24b8fcb5b588943ad159c7254,common_config.setup_logging(),1,0,0.0,1269
94492767e009fee24b8fcb5b588943ad159c7254,try:,1,0,0.0,1270
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.ESWITCH.physical_interface_mappings),1,0,0.0,1271
94492767e009fee24b8fcb5b588943ad159c7254,except ValueError as e:,1,0,0.0,1272
94492767e009fee24b8fcb5b588943ad159c7254,"""Agent terminated!""), e)",1,0,0.0,1273
94492767e009fee24b8fcb5b588943ad159c7254,sys.exit(1),1,0,0.0,1274
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Interface mappings: %s""), interface_mappings)",1,0,0.0,1275
94492767e009fee24b8fcb5b588943ad159c7254,interface_mappings),1,0,0.0,1276
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Agent initialised successfully, now running... ""))",1,0,0.0,1277
94492767e009fee24b8fcb5b588943ad159c7254,agent.run(),1,0,0.0,1278
94492767e009fee24b8fcb5b588943ad159c7254,sys.exit(0),1,0,0.0,1279
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.CONF.register_opts(eswitch_opts, ""ESWITCH"")",1,0,0.0,1280
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.IntOpt('backoff_rate', default=2,",1,0,0.0,1281
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id='fake_vlan_id'),1,0,0.0,1282
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.IntOpt('retries', default=3,",1,0,0.0,1283
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.CONF.set_override('rpc_support_old_agents', True, 'AGENT')",1,0,0.0,1284
94492767e009fee24b8fcb5b588943ad159c7254,"self._test_mlnx_api(rpcapi, None,",1,0,0.0,1285
94492767e009fee24b8fcb5b588943ad159c7254,@property,1,0,0.0,1286
94492767e009fee24b8fcb5b588943ad159c7254,host='fake_host'),1,0,0.0,1287
94492767e009fee24b8fcb5b588943ad159c7254,"devices=['fake_device1', 'fake_device1'],",1,0,0.0,1288
94492767e009fee24b8fcb5b588943ad159c7254,"agent_id='fake_agent_id', host='fake_host',",1,0,0.0,1289
94492767e009fee24b8fcb5b588943ad159c7254,version='1.3'),1,0,0.0,1290
94492767e009fee24b8fcb5b588943ad159c7254,oslo_messaging.set_transport_defaults(control_exchange='neutron'),0,0,0.0,1291
94492767e009fee24b8fcb5b588943ad159c7254,messaging.set_transport_defaults(control_exchange='neutron'),1,0,0.0,1292
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.ListOpt('physical_interface_mappings',",1,0,0.0,1293
94492767e009fee24b8fcb5b588943ad159c7254,"default=DEFAULT_INTERFACE_MAPPINGS,",1,0,0.0,1294
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.StrOpt('daemon_endpoint',",1,0,0.0,1295
94492767e009fee24b8fcb5b588943ad159c7254,"default='tcp://127.0.0.1:60001',",1,0,0.0,1296
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.IntOpt('request_timeout', default=3000,",1,0,0.0,1297
94492767e009fee24b8fcb5b588943ad159c7254,"""response on request to daemon."")),",1,0,0.0,1298
94492767e009fee24b8fcb5b588943ad159c7254,"with self.port(arg_list=(portbindings.PROFILE,),",1,0,0.0,1299
94492767e009fee24b8fcb5b588943ad159c7254,with self.port() as port:,1,0,0.0,1300
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %(device)s no longer exists on %(agent_id)s"",",1,0,0.0,1301
94492767e009fee24b8fcb5b588943ad159c7254,mlnx_db.sync_network_states(UPDATED_VLAN_RANGES),1,0,0.0,1302
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertFalse(mlnx_db.get_network_state(PHYS_NET_2,",1,0,0.0,1303
94492767e009fee24b8fcb5b588943ad159c7254,self.assertFalse(,1,0,0.0,1304
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.get_network_state(PHYS_NET_2,",1,0,0.0,1305
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(physical_network, PHYS_NET)",1,0,0.0,1306
94492767e009fee24b8fcb5b588943ad159c7254,vlan_ids.add(vlan_id),1,0,0.0,1307
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertRaises(n_exc.NoNetworkAvailable,",1,0,0.0,1308
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.reserve_network,",1,0,0.0,1309
94492767e009fee24b8fcb5b588943ad159c7254,self.session),1,0,0.0,1310
94492767e009fee24b8fcb5b588943ad159c7254,"vlan_id, VLAN_RANGES)",1,0,0.0,1311
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id).allocated),1,0,0.0,1312
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertTrue(mlnx_db.get_network_state(PHYS_NET,",1,0,0.0,1313
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertRaises(n_exc.VlanIdInUse,",1,0,0.0,1314
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.reserve_specific_network,",1,0,0.0,1315
94492767e009fee24b8fcb5b588943ad159c7254,"self.session,",1,0,0.0,1316
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id),1,0,0.0,1317
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIsNone(mlnx_db.get_network_state(PHYS_NET_2,",1,0,0.0,1318
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MAX).allocated),1,0,0.0,1319
94492767e009fee24b8fcb5b588943ad159c7254,"super(NetworkBindingsTest, self).setUp()",1,0,0.0,1320
94492767e009fee24b8fcb5b588943ad159c7254,VLAN_MIN).allocated),1,0,0.0,1321
94492767e009fee24b8fcb5b588943ad159c7254,'exists': True},1,0,0.0,1322
94492767e009fee24b8fcb5b588943ad159c7254,'exists': False},1,0,0.0,1323
94492767e009fee24b8fcb5b588943ad159c7254,"""""""Device is up on agent.""""""",1,0,0.0,1324
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %(device)s up %(agent_id)s"",",1,0,0.0,1325
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual('vlan',",1,0,0.0,1326
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.MLNX.tenant_network_type),1,0,0.0,1327
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(1,",1,0,0.0,1328
94492767e009fee24b8fcb5b588943ad159c7254,len(cfg.CONF.MLNX.network_vlan_ranges)),1,0,0.0,1329
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual('eth',",1,0,0.0,1330
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.MLNX.physical_network_type),1,0,0.0,1331
94492767e009fee24b8fcb5b588943ad159c7254,self.assertFalse(cfg.CONF.MLNX.physical_network_type_mappings),1,0,0.0,1332
94492767e009fee24b8fcb5b588943ad159c7254,"super(SegmentationIdAllocationTest, self).setUp()",1,0,0.0,1333
94492767e009fee24b8fcb5b588943ad159c7254,mlnx_db.sync_network_states(VLAN_RANGES),1,0,0.0,1334
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIsNone(mlnx_db.get_network_state(PHYS_NET,",1,0,0.0,1335
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertFalse(mlnx_db.get_network_state(PHYS_NET,",1,0,0.0,1336
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIsNone(mlnx_db.get_network_state(PHYS_NET, vlan_id))",1,0,0.0,1337
94492767e009fee24b8fcb5b588943ad159c7254,with self.network() as network:,1,0,0.0,1338
94492767e009fee24b8fcb5b588943ad159c7254,p[portbindings.PROFILE]),1,0,0.0,1339
94492767e009fee24b8fcb5b588943ad159c7254,"TEST_PORT_ID,",1,0,0.0,1340
94492767e009fee24b8fcb5b588943ad159c7254,TEST_PORT_ID),1,0,0.0,1341
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(binding.port_id, TEST_PORT_ID)",1,0,0.0,1342
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(binding.vnic_type, VNIC_TYPE)",1,0,0.0,1343
94492767e009fee24b8fcb5b588943ad159c7254,"super(MlnxPluginV2TestCase, self).setUp(self._plugin_name)",1,0,0.0,1344
94492767e009fee24b8fcb5b588943ad159c7254,pass,1,0,0.0,1345
94492767e009fee24b8fcb5b588943ad159c7254,MlnxPluginV2TestCase):,1,0,0.0,1346
94492767e009fee24b8fcb5b588943ad159c7254,test_bindings.PortBindingsTestCase):,1,0,0.0,1347
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.set_override(,1,0,0.0,1348
94492767e009fee24b8fcb5b588943ad159c7254,"'enable_security_group', self.ENABLE_SG,",1,0,0.0,1349
94492767e009fee24b8fcb5b588943ad159c7254,group='SECURITYGROUP'),1,0,0.0,1350
94492767e009fee24b8fcb5b588943ad159c7254,"super(TestMlnxPortBinding, self).setUp()",1,0,0.0,1351
94492767e009fee24b8fcb5b588943ad159c7254,expected_vif_type=None):,1,0,0.0,1352
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIn('id', p)",1,0,0.0,1353
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(expected_vif_type, p[portbindings.VIF_TYPE])",1,0,0.0,1354
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual({'physical_network': 'default'},",1,0,0.0,1355
94492767e009fee24b8fcb5b588943ad159c7254,VNIC_TYPE),1,0,0.0,1356
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.add_port_profile_binding(self.session,",1,0,0.0,1357
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIsNone(mlnx_db.get_network_binding(self.session,",1,0,0.0,1358
94492767e009fee24b8fcb5b588943ad159c7254,TEST_PORT_ID)),1,0,0.0,1359
94492767e009fee24b8fcb5b588943ad159c7254,TEST_NETWORK_ID)),1,0,0.0,1360
94492767e009fee24b8fcb5b588943ad159c7254,"mlnx_db.add_network_binding(self.session,",1,0,0.0,1361
94492767e009fee24b8fcb5b588943ad159c7254,"TEST_NETWORK_ID,",1,0,0.0,1362
94492767e009fee24b8fcb5b588943ad159c7254,"NET_TYPE,",1,0,0.0,1363
94492767e009fee24b8fcb5b588943ad159c7254,1234),1,0,0.0,1364
94492767e009fee24b8fcb5b588943ad159c7254,TEST_NETWORK_ID),1,0,0.0,1365
94492767e009fee24b8fcb5b588943ad159c7254,self.assertIsNotNone(binding),1,0,0.0,1366
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(binding.network_id, TEST_NETWORK_ID)",1,0,0.0,1367
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(binding.network_type, NET_TYPE)",1,0,0.0,1368
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(binding.physical_network, PHYS_NET)",1,0,0.0,1369
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(binding.segmentation_id, 1234)",1,0,0.0,1370
94492767e009fee24b8fcb5b588943ad159c7254,self.assertTrue(repr(binding)),1,0,0.0,1371
94492767e009fee24b8fcb5b588943ad159c7254,"super(PortProfileBindingTest, self).setUp()",1,0,0.0,1372
94492767e009fee24b8fcb5b588943ad159c7254,with self.port() as port:,1,0,0.0,1373
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertIsNone(mlnx_db.get_port_profile_binding(self.session,",1,0,0.0,1374
94492767e009fee24b8fcb5b588943ad159c7254,sg_rpc.disable_security_group_extension_by_config(aliases),1,0,0.0,1375
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Parsing physical_network_type failed: %s.""",1,0,0.0,1376
94492767e009fee24b8fcb5b588943ad159c7254,"""dhcp_agent_scheduler""]",1,0,0.0,1377
94492767e009fee24b8fcb5b588943ad159c7254,self._report_state),0,0,0.0,1378
94492767e009fee24b8fcb5b588943ad159c7254,eventlet.monkey_patch(),1,0,0.0,1379
94492767e009fee24b8fcb5b588943ad159c7254,server_default=sql.false()),0,0,0.0,1380
94492767e009fee24b8fcb5b588943ad159c7254,db.configure_db(),1,0,0.0,1381
94492767e009fee24b8fcb5b588943ad159c7254,self.addCleanup(db.clear_db),1,0,0.0,1382
94492767e009fee24b8fcb5b588943ad159c7254,dhcp_rpc_base.DhcpRpcCallbackMixin):,0,0,0.0,1383
94492767e009fee24b8fcb5b588943ad159c7254,"dhcp_rpc_base.DhcpRpcCallbackMixin,",1,0,0.0,1384
94492767e009fee24b8fcb5b588943ad159c7254,l3_rpc_base.L3RpcCallbackMixin):,1,0,0.0,1385
94492767e009fee24b8fcb5b588943ad159c7254,"l3_rpc_base.L3RpcCallbackMixin,",1,0,0.0,1386
94492767e009fee24b8fcb5b588943ad159c7254,sg_db_rpc.SecurityGroupServerRpcCallbackMixin):,1,0,0.0,1387
94492767e009fee24b8fcb5b588943ad159c7254,@classmethod,1,0,0.0,1388
94492767e009fee24b8fcb5b588943ad159c7254,"""""""",1,0,0.0,1389
94492767e009fee24b8fcb5b588943ad159c7254,else:,1,0,0.0,1390
94492767e009fee24b8fcb5b588943ad159c7254,"""is not stored for %s""), port_mac)",0,0,0.0,1391
94492767e009fee24b8fcb5b588943ad159c7254,"""check logs""))",0,0,0.0,1392
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Network %s not defined on Agent."", network_id)",0,0,0.0,1393
94492767e009fee24b8fcb5b588943ad159c7254,eventlet.monkey_patch(),0,0,0.0,1394
94492767e009fee24b8fcb5b588943ad159c7254,raise exceptions.MlnxException(err_msg),1,0,0.0,1395
94492767e009fee24b8fcb5b588943ad159c7254,"'to eSwitch for vNIC mac_address %(mac)s'),",0,0,0.0,1396
94492767e009fee24b8fcb5b588943ad159c7254,raise exceptions.MlnxException(err_msg=err_msg),0,0,0.0,1397
94492767e009fee24b8fcb5b588943ad159c7254,db.configure_db(),0,0,0.0,1398
94492767e009fee24b8fcb5b588943ad159c7254,mlnx_db.initialize(),1,0,0.0,1399
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.NoNetworkAvailable(),0,0,0.0,1400
94492767e009fee24b8fcb5b588943ad159c7254,"raise n_exc.VlanIdInUse(vlan_id=segmentation_id,",0,0,0.0,1401
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.PortNotFound(port_id=port_id),0,0,0.0,1402
94492767e009fee24b8fcb5b588943ad159c7254,raise q_exc.NoNetworkAvailable(),1,0,0.0,1403
94492767e009fee24b8fcb5b588943ad159c7254,"raise q_exc.VlanIdInUse(vlan_id=segmentation_id,",1,0,0.0,1404
94492767e009fee24b8fcb5b588943ad159c7254,raise q_exc.PortNotFound(port_id=port_id),1,0,0.0,1405
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.InvalidInput(error_message=msg),0,0,0.0,1406
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.TenantNetworksDisabled(),0,0,0.0,1407
94492767e009fee24b8fcb5b588943ad159c7254,raise q_exc.TenantNetworksDisabled(),1,0,0.0,1408
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertRaises(n_exc.NoNetworkAvailable,",0,0,0.0,1409
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertRaises(n_exc.VlanIdInUse,",0,0,0.0,1410
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertRaises(q_exc.NoNetworkAvailable,",1,0,0.0,1411
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertRaises(q_exc.VlanIdInUse,",1,0,0.0,1412
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI('Network %s is not available on this agent'), network_id)",0,0,0.0,1413
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI('Port_mac %s is not available on this agent'), port_mac)",0,0,0.0,1414
94492767e009fee24b8fcb5b588943ad159c7254,"super(MellanoxEswitchPlugin, self).__init__()",0,0,0.0,1415
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_('Port_mac %s is not available on this agent'), port_mac)",1,0,0.0,1416
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.warning(_(""Invalid Network ID, cannot remove Network""))",1,0,0.0,1417
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.exception(_(""Failed reporting state!""))",1,0,0.0,1418
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""RPC agent_id: %s""), self.agent_id)",1,0,0.0,1419
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Port %s updated""), device)",1,0,0.0,1420
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Port %s updated.""), device)",1,0,0.0,1421
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Device %s not defined on plugin""), device)",1,0,0.0,1422
94492767e009fee24b8fcb5b588943ad159c7254,"""eSwitchD is not responding - exiting...""))",1,0,0.0,1423
94492767e009fee24b8fcb5b588943ad159c7254,"""(%(polling_interval)s vs. %(elapsed)s)""),",1,0,0.0,1424
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""Parsing physical_interface_mappings failed: %s.""",1,0,0.0,1425
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Interface mappings: %s""), interface_mappings)",1,0,0.0,1426
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_(""Agent initialised successfully, now running... ""))",1,0,0.0,1427
94492767e009fee24b8fcb5b588943ad159c7254,"""Won't connect to eSwitchD - exiting...""))",0,0,0.0,1428
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""get_attached_vnics"")",0,0,0.0,1429
94492767e009fee24b8fcb5b588943ad159c7254,"""on Fabric %(physical_network)s"",",0,0,0.0,1430
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Define Fabric %(fabric)s on interface %(ifc)s"",",0,0,0.0,1431
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""network_delete received""))",1,0,0.0,1432
94492767e009fee24b8fcb5b588943ad159c7254,"'to eSwitch for vNIC mac_address %(mac)s'),",1,0,0.0,1433
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""network_delete received"")",0,0,0.0,1434
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_('Network %s is not available on this agent'), network_id)",1,0,0.0,1435
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.warning(_LW(""Invalid Network ID, cannot remove Network""))",0,0,0.0,1436
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.exception(_LE(""Failed reporting state!""))",0,0,0.0,1437
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""RPC agent_id: %s""), self.agent_id)",0,0,0.0,1438
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Port %s updated""), device)",0,0,0.0,1439
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Port %s updated.""), device)",0,0,0.0,1440
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %s not defined on plugin"", device)",0,0,0.0,1441
94492767e009fee24b8fcb5b588943ad159c7254,"""eSwitchD is not responding - exiting...""))",0,0,0.0,1442
94492767e009fee24b8fcb5b588943ad159c7254,"""(%(polling_interval)s vs. %(elapsed)s)"",",0,0,0.0,1443
94492767e009fee24b8fcb5b588943ad159c7254,"""Agent terminated!""), e)",0,0,0.0,1444
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Interface mappings: %s""), interface_mappings)",0,0,0.0,1445
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.info(_LI(""Agent initialised successfully, now running... ""))",0,0,0.0,1446
94492767e009fee24b8fcb5b588943ad159c7254,"""is not stored for %s"") % port_mac",1,0,0.0,1447
94492767e009fee24b8fcb5b588943ad159c7254,LOG.error(err_msg),1,0,0.0,1448
94492767e009fee24b8fcb5b588943ad159c7254,raise exceptions.MlnxException(err_msg=err_msg),1,0,0.0,1449
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Network %s not defined on Agent.""), network_id)",1,0,0.0,1450
94492767e009fee24b8fcb5b588943ad159c7254,db.initialize(),1,0,0.0,1451
94492767e009fee24b8fcb5b588943ad159c7254,db.configure_db(),1,0,0.0,1452
94492767e009fee24b8fcb5b588943ad159c7254,"""l3_agent_scheduler"",",1,0,0.0,1453
94492767e009fee24b8fcb5b588943ad159c7254,self.VIF_TYPE),1,0,0.0,1454
94492767e009fee24b8fcb5b588943ad159c7254,"is_admin=False,",1,0,0.0,1455
94492767e009fee24b8fcb5b588943ad159c7254,"read_deleted=""no"")",1,0,0.0,1456
94492767e009fee24b8fcb5b588943ad159c7254,"""(%(min_id)s through %(max_id)s)"") %",0,0,0.0,1457
94492767e009fee24b8fcb5b588943ad159c7254,"{'min_id': q_const.MIN_VLAN_TAG,",0,0,0.0,1458
94492767e009fee24b8fcb5b588943ad159c7254,'max_id': q_const.MAX_VLAN_TAG}),0,0,0.0,1459
94492767e009fee24b8fcb5b588943ad159c7254,"""(1 through 4094)"")",1,0,0.0,1460
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Creating IB Network""))",0,0,0.0,1461
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Ports added!""))",0,0,0.0,1462
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Ports removed!""))",0,0,0.0,1463
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""creating IB Network""))",1,0,0.0,1464
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""ports added!""))",1,0,0.0,1465
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""ports removed!""))",1,0,0.0,1466
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Update network""))",0,0,0.0,1467
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Delete network""))",0,0,0.0,1468
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""update network""))",1,0,0.0,1469
94492767e009fee24b8fcb5b588943ad159c7254,"tenant_id=self._tenant_id,",1,0,0.0,1470
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual(port['port']['binding:vif_type'],",1,0,0.0,1471
94492767e009fee24b8fcb5b588943ad159c7254,"agent_id='fake_agent_id',",0,0,0.0,1472
94492767e009fee24b8fcb5b588943ad159c7254,with self.port(name='name') as port:,1,0,0.0,1473
94492767e009fee24b8fcb5b588943ad159c7254,elif binding.network_type == constants.TYPE_LOCAL:,0,0,0.0,1474
94492767e009fee24b8fcb5b588943ad159c7254,else:,0,0,0.0,1475
94492767e009fee24b8fcb5b588943ad159c7254,port['id']),0,0,0.0,1476
94492767e009fee24b8fcb5b588943ad159c7254,portbindings.CAP_PORT_FILTER:,0,0,0.0,1477
94492767e009fee24b8fcb5b588943ad159c7254,port['network_id']),0,0,0.0,1478
94492767e009fee24b8fcb5b588943ad159c7254,"return policy.check(context, action, resource)",1,0,0.0,1479
94492767e009fee24b8fcb5b588943ad159c7254,"policy.enforce(context, action, resource)",1,0,0.0,1480
94492767e009fee24b8fcb5b588943ad159c7254,elif binding.network_type == constants.TYPE_LOCAL:,1,0,0.0,1481
94492767e009fee24b8fcb5b588943ad159c7254,else:,1,0,0.0,1482
94492767e009fee24b8fcb5b588943ad159c7254,"self._enforce_set_auth(context, attrs, self.network_set)",1,0,0.0,1483
94492767e009fee24b8fcb5b588943ad159c7254,port['id']),1,0,0.0,1484
94492767e009fee24b8fcb5b588943ad159c7254,portbindings.CAP_PORT_FILTER:,1,0,0.0,1485
94492767e009fee24b8fcb5b588943ad159c7254,port['network_id']),1,0,0.0,1486
94492767e009fee24b8fcb5b588943ad159c7254,pass,0,0,0.0,1487
94492767e009fee24b8fcb5b588943ad159c7254,test_bindings.PortBindingsTestCase):,0,0,0.0,1488
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""delete network""))",1,0,0.0,1489
94492767e009fee24b8fcb5b588943ad159c7254,host='fake_host'),0,0,0.0,1490
94492767e009fee24b8fcb5b588943ad159c7254,raise SystemExit(msg),0,0,0.0,1491
94492767e009fee24b8fcb5b588943ad159c7254,constants.TYPE_IB]:,0,0,0.0,1492
94492767e009fee24b8fcb5b588943ad159c7254,"constants.TYPE_LOCAL,",1,0,0.0,1493
94492767e009fee24b8fcb5b588943ad159c7254,constants.TYPE_NONE]:,1,0,0.0,1494
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == constants.TYPE_FLAT:,1,0,0.0,1495
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == constants.TYPE_LOCAL:,1,0,0.0,1496
94492767e009fee24b8fcb5b588943ad159c7254,constants.TYPE_FLAT]:,1,0,0.0,1497
94492767e009fee24b8fcb5b588943ad159c7254,"default='tcp://127.0.0.1:60001',",0,0,0.0,1498
94492767e009fee24b8fcb5b588943ad159c7254,"default='tcp://127.0.0.1:5001',",1,0,0.0,1499
94492767e009fee24b8fcb5b588943ad159c7254,"self.assertEqual('tcp://127.0.0.1:60001',",0,0,0.0,1500
94492767e009fee24b8fcb5b588943ad159c7254,cfg.CONF.ESWITCH.daemon_endpoint),0,0,0.0,1501
94492767e009fee24b8fcb5b588943ad159c7254,"dev_details['segmentation_id'],",0,0,0.0,1502
94492767e009fee24b8fcb5b588943ad159c7254,"self.plugin_rpc.update_device_up(self.context,",0,0,0.0,1503
94492767e009fee24b8fcb5b588943ad159c7254,self.agent_id),0,0,0.0,1504
94492767e009fee24b8fcb5b588943ad159c7254,"dev_details['vlan_id'],",1,0,0.0,1505
94492767e009fee24b8fcb5b588943ad159c7254,"""Won't connect to eSwitchD - exiting..."")",0,0,0.0,1506
94492767e009fee24b8fcb5b588943ad159c7254,LOG.error(msg),0,0,0.0,1507
94492767e009fee24b8fcb5b588943ad159c7254,elif binding.network_type == constants.TYPE_LOCAL:,1,0,0.0,1508
94492767e009fee24b8fcb5b588943ad159c7254,svc_constants.TYPE_FLAT]:,0,0,0.0,1509
94492767e009fee24b8fcb5b588943ad159c7254,@RetryDecorator(exceptions.RequestTimeout),0,0,0.0,1510
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == svc_constants.TYPE_LOCAL:,0,0,0.0,1511
94492767e009fee24b8fcb5b588943ad159c7254,raise exceptions.RequestTimeout(),0,0,0.0,1512
94492767e009fee24b8fcb5b588943ad159c7254,raise exceptions.OperationFailed(err_msg=error_msg),0,0,0.0,1513
94492767e009fee24b8fcb5b588943ad159c7254,"raise exceptions.MlnxException(_(""eSwitchD: Request timeout""))",1,0,0.0,1514
94492767e009fee24b8fcb5b588943ad159c7254,raise exceptions.MlnxException(error_msg),1,0,0.0,1515
94492767e009fee24b8fcb5b588943ad159c7254,"return (p_const.TYPE_LOCAL, None)",0,0,0.0,1516
94492767e009fee24b8fcb5b588943ad159c7254,"return (p_const.TYPE_FLAT, None)",0,0,0.0,1517
94492767e009fee24b8fcb5b588943ad159c7254,"return (p_const.TYPE_VLAN, vlan_id)",0,0,0.0,1518
94492767e009fee24b8fcb5b588943ad159c7254,p_const.TYPE_VXLAN: VXLAN_TUN_TO_LV},0,0,0.0,1519
94492767e009fee24b8fcb5b588943ad159c7254,"return (TYPE_LOCAL, None)",1,0,0.0,1520
94492767e009fee24b8fcb5b588943ad159c7254,"return (TYPE_FLAT, None)",1,0,0.0,1521
94492767e009fee24b8fcb5b588943ad159c7254,"return (TYPE_VLAN, vlan_id)",1,0,0.0,1522
94492767e009fee24b8fcb5b588943ad159c7254,elif binding.network_type == svc_constants.TYPE_LOCAL:,0,0,0.0,1523
94492767e009fee24b8fcb5b588943ad159c7254,"svc_constants.TYPE_LOCAL,",0,0,0.0,1524
94492767e009fee24b8fcb5b588943ad159c7254,svc_constants.TYPE_NONE]:,0,0,0.0,1525
94492767e009fee24b8fcb5b588943ad159c7254,elif network_type == svc_constants.TYPE_FLAT:,0,0,0.0,1526
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Port Up for %(port_mac)s on fabric %(fabric)s"",",0,0,0.0,1527
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Port Down for %(port_mac)s on fabric %(fabric)s"",",0,0,0.0,1528
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Port Release for %(port_mac)s on fabric %(fabric)s"",",0,0,0.0,1529
94492767e009fee24b8fcb5b588943ad159c7254,with_lockmode('update').one()),1,0,0.0,1530
94492767e009fee24b8fcb5b588943ad159c7254,physical_network=physical_network),1,0,0.0,1531
94492767e009fee24b8fcb5b588943ad159c7254,log_args),1,0,0.0,1532
94492767e009fee24b8fcb5b588943ad159c7254,except exc.NoResultFound:,1,0,0.0,1533
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id),1,0,0.0,1534
94492767e009fee24b8fcb5b588943ad159c7254,"segmentation_id, network_vlan_ranges):",1,0,0.0,1535
94492767e009fee24b8fcb5b588943ad159c7254,one()),1,0,0.0,1536
94492767e009fee24b8fcb5b588943ad159c7254,break,1,0,0.0,1537
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s to pool"",",1,0,0.0,1538
94492767e009fee24b8fcb5b588943ad159c7254,else:,1,0,0.0,1539
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s outside pool"",",1,0,0.0,1540
94492767e009fee24b8fcb5b588943ad159c7254,session.delete(state),1,0,0.0,1541
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s not found""),",1,0,0.0,1542
94492767e009fee24b8fcb5b588943ad159c7254,session.add(binding),1,0,0.0,1543
94492767e009fee24b8fcb5b588943ad159c7254,return (session.query(mlnx_models_v2.NetworkBinding).,1,0,0.0,1544
94492767e009fee24b8fcb5b588943ad159c7254,filter_by(network_id=network_id).first()),1,0,0.0,1545
94492767e009fee24b8fcb5b588943ad159c7254,"raise n_exc.VlanIdInUse(vlan_id=segmentation_id,",1,0,0.0,1546
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id=segmentation_id).,1,0,0.0,1547
94492767e009fee24b8fcb5b588943ad159c7254,filter_by(port_id=port_id).first()),1,0,0.0,1548
94492767e009fee24b8fcb5b588943ad159c7254,"filter_by(physical_network=physical_network,",1,0,0.0,1549
94492767e009fee24b8fcb5b588943ad159c7254,session.add(entry),1,0,0.0,1550
94492767e009fee24b8fcb5b588943ad159c7254,'net': entry.physical_network}),1,0,0.0,1551
94492767e009fee24b8fcb5b588943ad159c7254,with session.begin():,1,0,0.0,1552
94492767e009fee24b8fcb5b588943ad159c7254,all()),1,0,0.0,1553
94492767e009fee24b8fcb5b588943ad159c7254,"allocations.setdefault(entry.physical_network, set()).add(entry)",1,0,0.0,1554
94492767e009fee24b8fcb5b588943ad159c7254,"_remove_non_allocatable_vlans(session, allocations,",1,0,0.0,1555
94492767e009fee24b8fcb5b588943ad159c7254,"_remove_unconfigured_vlans(session, allocations)",1,0,0.0,1556
94492767e009fee24b8fcb5b588943ad159c7254,segmentation_id=segmentation_id),1,0,0.0,1557
94492767e009fee24b8fcb5b588943ad159c7254,return qry.first(),1,0,0.0,1558
94492767e009fee24b8fcb5b588943ad159c7254,with session.begin(subtransactions=True):,1,0,0.0,1559
94492767e009fee24b8fcb5b588943ad159c7254,filter_by(allocated=False).,1,0,0.0,1560
94492767e009fee24b8fcb5b588943ad159c7254,with_lockmode('update').,1,0,0.0,1561
94492767e009fee24b8fcb5b588943ad159c7254,first()),1,0,0.0,1562
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.NoNetworkAvailable(),1,0,0.0,1563
94492767e009fee24b8fcb5b588943ad159c7254,"return (entry.physical_network, entry.segmentation_id)",1,0,0.0,1564
94492767e009fee24b8fcb5b588943ad159c7254,return (session.query(mlnx_models_v2.PortProfileBinding).,1,0,0.0,1565
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""get_port_from_device() called"")",1,0,0.0,1566
94492767e009fee24b8fcb5b588943ad159c7254,"""Won't connect to eSwitchD - exiting..."")",1,0,0.0,1567
94492767e009fee24b8fcb5b588943ad159c7254,"self.network_type,",1,0,0.0,1568
94492767e009fee24b8fcb5b588943ad159c7254,self.segmentation_id),1,0,0.0,1569
94492767e009fee24b8fcb5b588943ad159c7254,"sa.ForeignKey('ports.id', ondelete=""CASCADE""),",1,0,0.0,1570
94492767e009fee24b8fcb5b588943ad159c7254,"return ""<PortProfileBinding(%s,%s)>"" % (self.port_id,",1,0,0.0,1571
94492767e009fee24b8fcb5b588943ad159c7254,self.vnic_type),1,0,0.0,1572
94492767e009fee24b8fcb5b588943ad159c7254,"external_net_db.External_net_db_mixin,",1,0,0.0,1573
94492767e009fee24b8fcb5b588943ad159c7254,"extraroute_db.ExtraRoute_db_mixin,",1,0,0.0,1574
94492767e009fee24b8fcb5b588943ad159c7254,"l3_gwmode_db.L3_NAT_db_mixin,",1,0,0.0,1575
94492767e009fee24b8fcb5b588943ad159c7254,"sg_db_rpc.SecurityGroupServerRpcMixin,",1,0,0.0,1576
94492767e009fee24b8fcb5b588943ad159c7254,"l3_agentschedulers_db.L3AgentSchedulerDbMixin,",1,0,0.0,1577
94492767e009fee24b8fcb5b588943ad159c7254,"agentschedulers_db.DhcpAgentSchedulerDbMixin,",1,0,0.0,1578
94492767e009fee24b8fcb5b588943ad159c7254,portbindings_db.PortBindingMixin):,1,0,0.0,1579
94492767e009fee24b8fcb5b588943ad159c7254,support consistency with L3 & DHCP Agents.,1,0,0.0,1580
94492767e009fee24b8fcb5b588943ad159c7254,"""""""",1,0,0.0,1581
94492767e009fee24b8fcb5b588943ad159c7254,"""ext-gw-mode"", ""binding"", ""quotas"",",1,0,0.0,1582
94492767e009fee24b8fcb5b588943ad159c7254,"""security-group"", ""agent"", ""extraroute"",",1,0,0.0,1583
94492767e009fee24b8fcb5b588943ad159c7254,"self.physical_network,",1,0,0.0,1584
94492767e009fee24b8fcb5b588943ad159c7254,"return ""<NetworkBinding(%s,%s,%s,%d)>"" % (self.network_id,",1,0,0.0,1585
94492767e009fee24b8fcb5b588943ad159c7254,sg_db.SecurityGroupPortBinding.security_group_id),1,0,0.0,1586
94492767e009fee24b8fcb5b588943ad159c7254,"sa.ForeignKey('networks.id', ondelete=""CASCADE""),",1,0,0.0,1587
94492767e009fee24b8fcb5b588943ad159c7254,models_v2.Port.id == sg_binding_port),1,0,0.0,1588
94492767e009fee24b8fcb5b588943ad159c7254,return,1,0,0.0,1589
94492767e009fee24b8fcb5b588943ad159c7254,return port_dict,1,0,0.0,1590
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Get_port_from_device_mac() called"")",1,0,0.0,1591
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Set_port_status as %s called"", status)",1,0,0.0,1592
94492767e009fee24b8fcb5b588943ad159c7254,session.merge(port),1,0,0.0,1593
94492767e009fee24b8fcb5b588943ad159c7254,session.flush(),1,0,0.0,1594
94492767e009fee24b8fcb5b588943ad159c7254,raise n_exc.PortNotFound(port_id=port_id),1,0,0.0,1595
94492767e009fee24b8fcb5b588943ad159c7254,primary_key=True),1,0,0.0,1596
94492767e009fee24b8fcb5b588943ad159c7254,autoincrement=False),1,0,0.0,1597
94492767e009fee24b8fcb5b588943ad159c7254,server_default=sql.false()),1,0,0.0,1598
94492767e009fee24b8fcb5b588943ad159c7254,"return ""<SegmentationIdAllocation(%s,%d,%s)>"" % (self.physical_network,",1,0,0.0,1599
94492767e009fee24b8fcb5b588943ad159c7254,"self.segmentation_id,",1,0,0.0,1600
94492767e009fee24b8fcb5b588943ad159c7254,self.allocated),1,0,0.0,1601
94492767e009fee24b8fcb5b588943ad159c7254,"""""""",1,0,0.0,1602
94492767e009fee24b8fcb5b588943ad159c7254,vlan_id),1,0,0.0,1603
94492767e009fee24b8fcb5b588943ad159c7254,del allocations[physical_network],1,0,0.0,1604
94492767e009fee24b8fcb5b588943ad159c7254,session.delete(entry),1,0,0.0,1605
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Get_port_from_device_mac() called""))",1,0,0.0,1606
94492767e009fee24b8fcb5b588943ad159c7254,"""Server terminated!""),",0,0,0.0,1607
94492767e009fee24b8fcb5b588943ad159c7254,{'type': self.physical_net_type}),0,0,0.0,1608
94492767e009fee24b8fcb5b588943ad159c7254,"""Server terminated!""), e)",0,0,0.0,1609
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_LE(""%s. Server terminated!""), ex)",0,0,0.0,1610
94492767e009fee24b8fcb5b588943ad159c7254,"""Service terminated!""),",0,0,0.0,1611
94492767e009fee24b8fcb5b588943ad159c7254,"""(%(min_id)s through %(max_id)s)"") %",0,0,0.0,1612
94492767e009fee24b8fcb5b588943ad159c7254,"""network"")",0,0,0.0,1613
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Created network: %s"", net['id'])",0,0,0.0,1614
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Update network"")",0,0,0.0,1615
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Delete network"")",0,0,0.0,1616
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""create_port with %s"", port)",0,0,0.0,1617
94492767e009fee24b8fcb5b588943ad159c7254,"""Server terminated!""), {'type': self.physical_net_type})",1,0,0.0,1618
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.error(_(""%s. Server terminated!""), ex)",1,0,0.0,1619
94492767e009fee24b8fcb5b588943ad159c7254,"""Service terminated!""),",1,0,0.0,1620
94492767e009fee24b8fcb5b588943ad159c7254,"""(%(min_id)s through %(max_id)s)"") %",1,0,0.0,1621
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Set_port_status as %s called""), status)",1,0,0.0,1622
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""get_port_from_device() called""))",1,0,0.0,1623
94492767e009fee24b8fcb5b588943ad159c7254,'net': physical_network}),1,0,0.0,1624
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s not found""),",1,0,0.0,1625
94492767e009fee24b8fcb5b588943ad159c7254,LOG.error(msg),1,0,0.0,1626
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""get_attached_vnics""))",1,0,0.0,1627
94492767e009fee24b8fcb5b588943ad159c7254,"""on Fabric %(physical_network)s""),",1,0,0.0,1628
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Define Fabric %(fabric)s on interface %(ifc)s""),",1,0,0.0,1629
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Port Up for %(port_mac)s on fabric %(fabric)s""),",1,0,0.0,1630
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Port Down for %(port_mac)s on fabric %(fabric)s""),",1,0,0.0,1631
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Port Release for %(port_mac)s on fabric %(fabric)s""),",1,0,0.0,1632
94492767e009fee24b8fcb5b588943ad159c7254,LOG.debug(,0,0,0.0,1633
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s to pool"",",0,0,0.0,1634
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s outside pool"",",0,0,0.0,1635
94492767e009fee24b8fcb5b588943ad159c7254,"""%(phy_net)s not found""),",0,0,0.0,1636
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""get_port_from_device() called"")",0,0,0.0,1637
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Get_port_from_device_mac() called"")",0,0,0.0,1638
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Set_port_status as %s called"", status)",0,0,0.0,1639
94492767e009fee24b8fcb5b588943ad159c7254,LOG.debug(_(,1,0,0.0,1640
94492767e009fee24b8fcb5b588943ad159c7254,"""network"")",1,0,0.0,1641
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Created network: %s""), net['id'])",1,0,0.0,1642
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Update network""))",1,0,0.0,1643
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Delete network""))",1,0,0.0,1644
94492767e009fee24b8fcb5b588943ad159c7254,"cctxt.cast(context, 'port_update', **kwargs)",1,0,0.0,1645
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.StrOpt('tenant_network_type', default='vlan',",1,0,0.0,1646
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.ListOpt('network_vlan_ranges',",1,0,0.0,1647
94492767e009fee24b8fcb5b588943ad159c7254,"default=DEFAULT_VLAN_RANGES,",1,0,0.0,1648
94492767e009fee24b8fcb5b588943ad159c7254,"""or <physical_network>"")),",1,0,0.0,1649
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.ListOpt('physical_network_type_mappings',",1,0,0.0,1650
94492767e009fee24b8fcb5b588943ad159c7254,"default=[],",1,0,0.0,1651
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.StrOpt('physical_network_type', default='eth',",1,0,0.0,1652
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.BoolOpt('rpc_support_old_agents', default=False,",1,0,0.0,1653
94492767e009fee24b8fcb5b588943ad159c7254,"cfg.CONF.register_opts(vlan_opts, ""MLNX"")",1,0,0.0,1654
94492767e009fee24b8fcb5b588943ad159c7254,try:,1,0,0.0,1655
94492767e009fee24b8fcb5b588943ad159c7254,vlan_ids.remove(entry.segmentation_id),1,0,0.0,1656
94492767e009fee24b8fcb5b588943ad159c7254,except KeyError:,1,0,0.0,1657
94492767e009fee24b8fcb5b588943ad159c7254,LOG.debug(,1,0,0.0,1658
94492767e009fee24b8fcb5b588943ad159c7254,"{'seg_id': entry.segmentation_id,",1,0,0.0,1659
94492767e009fee24b8fcb5b588943ad159c7254,'segmentation_id': vlan_id},1,0,0.0,1660
94492767e009fee24b8fcb5b588943ad159c7254,"'network_type': network_type,",1,0,0.0,1661
94492767e009fee24b8fcb5b588943ad159c7254,"network_type, vlan_id):",1,0,0.0,1662
94492767e009fee24b8fcb5b588943ad159c7254,"1.1 - Added get_active_networks_info, create_dhcp_port,",1,0,0.0,1663
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""create_port with %s""), port)",1,0,0.0,1664
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %(device)s no longer exists on %(agent_id)s"",",0,0,0.0,1665
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(""Device %(device)s up %(agent_id)s"",",0,0,0.0,1666
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Device %(device)s no longer exists on %(agent_id)s""),",1,0,0.0,1667
94492767e009fee24b8fcb5b588943ad159c7254,"LOG.debug(_(""Device %(device)s up %(agent_id)s""),",1,0,0.0,1668
94492767e009fee24b8fcb5b588943ad159c7254,1.0 - Initial version.,1,0,0.0,1669
94492767e009fee24b8fcb5b588943ad159c7254,and update_dhcp_port methods.,1,0,0.0,1670
94492767e009fee24b8fcb5b588943ad159c7254,"cctxt.cast(context, 'network_delete', network_id=network_id)",1,0,0.0,1671
94492767e009fee24b8fcb5b588943ad159c7254,"""""""",1,0,0.0,1672
94492767e009fee24b8fcb5b588943ad159c7254,"topics.NETWORK,",1,0,0.0,1673
94492767e009fee24b8fcb5b588943ad159c7254,topics.DELETE),1,0,0.0,1674
94492767e009fee24b8fcb5b588943ad159c7254,"topics.PORT,",1,0,0.0,1675
94492767e009fee24b8fcb5b588943ad159c7254,topics.UPDATE),1,0,0.0,1676
94492767e009fee24b8fcb5b588943ad159c7254,fanout=True),1,0,0.0,1677
94492767e009fee24b8fcb5b588943ad159c7254,main(),1,0,0.0,1678
