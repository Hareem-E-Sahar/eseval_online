commit_id,line,line_level_label,count,line_score,row
ced1a05df2b47daf629416b342d6eb00c7a11258,"private void doSelect(ServerSocketChannel server, final Selector selector) throws IOException {",0,7,1.0,1
ced1a05df2b47daf629416b342d6eb00c7a11258,* Copyright 2002-2014 the original author or authors.,1,7,1.0,2
ced1a05df2b47daf629416b342d6eb00c7a11258,* Copyright 2002-2020 the original author or authors.,0,7,1.0,3
ced1a05df2b47daf629416b342d6eb00c7a11258,* Copyright 2002-2019 the original author or authors.,1,7,1.0,4
ced1a05df2b47daf629416b342d6eb00c7a11258,* Copyright 2002-2020 the original author or authors.,0,7,1.0,5
ced1a05df2b47daf629416b342d6eb00c7a11258,* Copyright 2002-2019 the original author or authors.,1,7,1.0,6
ced1a05df2b47daf629416b342d6eb00c7a11258,* Copyright 2002-2015 the original author or authors.,0,7,1.0,7
ced1a05df2b47daf629416b342d6eb00c7a11258,"Socket socket = new Socket(InetAddress.getByName(""localhost""), port);",1,6,0.8571428571428571,8
ced1a05df2b47daf629416b342d6eb00c7a11258,"try (Socket socket = new Socket(InetAddress.getByName(""localhost""), port)) {",0,5,0.7142857142857142,9
ced1a05df2b47daf629416b342d6eb00c7a11258,public static void waitListening(AbstractInternetProtocolReceivingChannelAdapter adapter) throws Exception {,1,5,0.7142857142857142,10
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param port the port for socket,0,5,0.7142857142857142,11
ced1a05df2b47daf629416b342d6eb00c7a11258,"socket = new Socket(InetAddress.getByName(""localhost""), port);",1,5,0.7142857142857142,12
ced1a05df2b47daf629416b342d6eb00c7a11258,} catch (Exception e) {,1,5,0.7142857142857142,13
ced1a05df2b47daf629416b342d6eb00c7a11258,* returned to the cache after use. Users should not subsequently set the underlying property to,0,5,0.7142857142857142,14
ced1a05df2b47daf629416b342d6eb00c7a11258,} catch (Exception e) {,1,5,0.7142857142857142,15
ced1a05df2b47daf629416b342d6eb00c7a11258,"private void doSelect(ServerSocketChannel server, final Selector selector)",1,5,0.7142857142857142,16
ced1a05df2b47daf629416b342d6eb00c7a11258,"DatagramSocket datagramSocket = new DatagramSocket(0, nic.getInetAddresses().nextElement());",0,4,0.5714285714285714,17
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!this.taskExecutorSet && this.taskExecutor != null) {,1,4,0.5714285714285714,18
ced1a05df2b47daf629416b342d6eb00c7a11258,"Executor executor = Executors.newFixedThreadPool(this.poolSize, new ThreadFactory() {",1,4,0.5714285714285714,19
ced1a05df2b47daf629416b342d6eb00c7a11258,if (this.active && this.taskExecutor == null) {,1,4,0.5714285714285714,20
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!this.taskExecutorSet && this.taskExecutor != null) {,0,4,0.5714285714285714,21
ced1a05df2b47daf629416b342d6eb00c7a11258,if (isActive() && this.taskExecutor == null) {,0,4,0.5714285714285714,22
ced1a05df2b47daf629416b342d6eb00c7a11258,public static String chooseANic(boolean multicast) throws Exception {,1,4,0.5714285714285714,23
ced1a05df2b47daf629416b342d6eb00c7a11258,Socket socket = null;,1,4,0.5714285714285714,24
ced1a05df2b47daf629416b342d6eb00c7a11258,public static void waitListening(AbstractInternetProtocolReceivingChannelAdapter adapter) {,0,4,0.5714285714285714,25
ced1a05df2b47daf629416b342d6eb00c7a11258,public static NetworkInterface chooseANic(boolean multicast) throws Exception {,0,4,0.5714285714285714,26
ced1a05df2b47daf629416b342d6eb00c7a11258,public void testMulticastSender() throws Exception {,1,4,0.5714285714285714,27
ced1a05df2b47daf629416b342d6eb00c7a11258,"DatagramSocket datagramSocket = new DatagramSocket(0, Inet4Address.getByName(nic));",1,4,0.5714285714285714,28
ced1a05df2b47daf629416b342d6eb00c7a11258,private void cleanupCompositeExecutor(CompositeExecutor compositeExec) throws Exception {,0,4,0.5714285714285714,29
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (IOException e) {,1,4,0.5714285714285714,30
ced1a05df2b47daf629416b342d6eb00c7a11258,final AtomicReference<ServerSocket> serverSocket = new AtomicReference<>();,0,4,0.5714285714285714,31
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param selector the Selector multiplexor,0,4,0.5714285714285714,32
ced1a05df2b47daf629416b342d6eb00c7a11258,final AtomicReference<ServerSocket> serverSocket = new AtomicReference<ServerSocket>();,1,4,0.5714285714285714,33
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (IOException e) {,0,4,0.5714285714285714,34
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (Exception e) {,0,4,0.5714285714285714,35
ced1a05df2b47daf629416b342d6eb00c7a11258,"pool = new SimplePool<TcpConnectionSupport>(poolSize, new SimplePool.PoolItemCallback<TcpConnectionSupport>() {",1,4,0.5714285714285714,36
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (Exception e) {,0,4,0.5714285714285714,37
ced1a05df2b47daf629416b342d6eb00c7a11258,final AtomicReference<ServerSocket> serverSocket = new AtomicReference<ServerSocket>();,1,4,0.5714285714285714,38
ced1a05df2b47daf629416b342d6eb00c7a11258,private final AsyncTaskExecutor executor = new SimpleAsyncTaskExecutor();,0,4,0.5714285714285714,39
ced1a05df2b47daf629416b342d6eb00c7a11258,final AtomicReference<ServerSocket> serverSocket = new AtomicReference<>();,0,4,0.5714285714285714,40
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (IOException e) {,0,4,0.5714285714285714,41
ced1a05df2b47daf629416b342d6eb00c7a11258,public void removedFromPool(TcpConnectionSupport connection) {,1,3,0.42857142857142855,42
ced1a05df2b47daf629416b342d6eb00c7a11258,this.taskExecutor = null;,1,3,0.42857142857142855,43
ced1a05df2b47daf629416b342d6eb00c7a11258,* Creates a default task executor if none was supplied.,1,3,0.42857142857142855,44
ced1a05df2b47daf629416b342d6eb00c7a11258,this.taskExecutor = null;,0,3,0.42857142857142855,45
ced1a05df2b47daf629416b342d6eb00c7a11258,* Creates a default task executor if none was supplied.,0,3,0.42857142857142855,46
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (IOException e2) {,1,3,0.42857142857142855,47
ced1a05df2b47daf629416b342d6eb00c7a11258,public void testMulticastSender() {,0,3,0.42857142857142855,48
ced1a05df2b47daf629416b342d6eb00c7a11258,public void run() {,1,3,0.42857142857142855,49
ced1a05df2b47daf629416b342d6eb00c7a11258,final AtomicReference<String> lastReceived = new AtomicReference<String>();,1,3,0.42857142857142855,50
ced1a05df2b47daf629416b342d6eb00c7a11258,final AtomicReference<String> lastReceived = new AtomicReference<>();,0,3,0.42857142857142855,51
ced1a05df2b47daf629416b342d6eb00c7a11258,private AsyncTaskExecutor executor = new SimpleAsyncTaskExecutor();,0,3,0.42857142857142855,52
ced1a05df2b47daf629416b342d6eb00c7a11258,* connection factory will have its singleUse property coerced to true (causing the,0,3,0.42857142857142855,53
ced1a05df2b47daf629416b342d6eb00c7a11258,public void setInterceptorFactoryChain(TcpConnectionInterceptorFactoryChain interceptorFactoryChain) {,0,3,0.42857142857142855,54
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param connectionWaitTimeout the new timeout.,0,3,0.42857142857142855,55
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!singleUse && logger.isDebugEnabled()) {,0,3,0.42857142857142855,56
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param server the ServerSocketChannel to select,0,3,0.42857142857142855,57
ced1a05df2b47daf629416b342d6eb00c7a11258,catch (IOException e) {},1,3,0.42857142857142855,58
ced1a05df2b47daf629416b342d6eb00c7a11258,public void removedFromPool(TcpConnectionSupport connection) {,0,3,0.42857142857142855,59
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param poolSize the number of connections to allow.,0,3,0.42857142857142855,60
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param poolSize the new pool size.,0,3,0.42857142857142855,61
ced1a05df2b47daf629416b342d6eb00c7a11258,* Ignored on this factory; connections are always cached in the pool. The underlying,0,3,0.42857142857142855,62
ced1a05df2b47daf629416b342d6eb00c7a11258,* connection to be returned). Setting it to false on the underlying factory after initialization,0,3,0.42857142857142855,63
ced1a05df2b47daf629416b342d6eb00c7a11258,NetworkInterface nic = this.multicastRule.getNic();,0,2,0.2857142857142857,64
ced1a05df2b47daf629416b342d6eb00c7a11258,if (intface.isLoopback() || (multicast && !intface.supportsMulticast()),1,2,0.2857142857142857,65
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param port,1,2,0.2857142857142857,66
ced1a05df2b47daf629416b342d6eb00c7a11258,if (socket != null) {,1,2,0.2857142857142857,67
ced1a05df2b47daf629416b342d6eb00c7a11258,&& networkInterface.getInetAddresses().hasMoreElements()) {,0,2,0.2857142857142857,68
ced1a05df2b47daf629416b342d6eb00c7a11258,String nic = this.multicastRule.getNic();,1,2,0.2857142857142857,69
ced1a05df2b47daf629416b342d6eb00c7a11258,if (nic != null) {,0,2,0.2857142857142857,70
ced1a05df2b47daf629416b342d6eb00c7a11258,"Map<SocketChannel, TcpNioConnection> connections = new HashMap<SocketChannel, TcpNioConnection>();",1,2,0.2857142857142857,71
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!(message instanceof ErrorMessage)) {,1,2,0.2857142857142857,72
ced1a05df2b47daf629416b342d6eb00c7a11258,public boolean onMessage(Message<?> message) {,1,2,0.2857142857142857,73
ced1a05df2b47daf629416b342d6eb00c7a11258,final int numberOfSockets = 100;,1,2,0.2857142857142857,74
ced1a05df2b47daf629416b342d6eb00c7a11258,if (nextElement instanceof Inet4Address) {,1,2,0.2857142857142857,75
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!(message instanceof ErrorMessage)) {,0,2,0.2857142857142857,76
ced1a05df2b47daf629416b342d6eb00c7a11258,final int numberOfSockets = 10;,0,2,0.2857142857142857,77
ced1a05df2b47daf629416b342d6eb00c7a11258,"Map<SocketChannel, TcpNioConnection> connections = new HashMap<>();",0,2,0.2857142857142857,78
ced1a05df2b47daf629416b342d6eb00c7a11258,for (Enumeration<InetAddress> inetAddr = intface.getInetAddresses(); inetAddr.hasMoreElements(); ) {,1,2,0.2857142857142857,79
ced1a05df2b47daf629416b342d6eb00c7a11258,protected void doStop() {,0,2,0.2857142857142857,80
ced1a05df2b47daf629416b342d6eb00c7a11258,protected void doStart() {,0,2,0.2857142857142857,81
ced1a05df2b47daf629416b342d6eb00c7a11258,public Thread newThread(Runnable runner) {,1,2,0.2857142857142857,82
ced1a05df2b47daf629416b342d6eb00c7a11258,results[j] = (Executors.newSingleThreadExecutor().submit(() -> {,1,2,0.2857142857142857,83
ced1a05df2b47daf629416b342d6eb00c7a11258,public boolean isActive() {,1,2,0.2857142857142857,84
ced1a05df2b47daf629416b342d6eb00c7a11258,* @return the active,1,2,0.2857142857142857,85
ced1a05df2b47daf629416b342d6eb00c7a11258,protected void doStop() {,1,2,0.2857142857142857,86
ced1a05df2b47daf629416b342d6eb00c7a11258,this.taskExecutor = executor;,1,2,0.2857142857142857,87
ced1a05df2b47daf629416b342d6eb00c7a11258,Thread thread = new Thread(runner);,1,2,0.2857142857142857,88
ced1a05df2b47daf629416b342d6eb00c7a11258,protected void checkTaskExecutor(final String threadName) {,1,2,0.2857142857142857,89
ced1a05df2b47daf629416b342d6eb00c7a11258,protected void checkTaskExecutor(final String threadName) {,0,2,0.2857142857142857,90
ced1a05df2b47daf629416b342d6eb00c7a11258,this.active = true;,1,2,0.2857142857142857,91
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!this.active) {,1,2,0.2857142857142857,92
ced1a05df2b47daf629416b342d6eb00c7a11258,protected void doStart() {,1,2,0.2857142857142857,93
ced1a05df2b47daf629416b342d6eb00c7a11258,private volatile boolean active;,1,2,0.2857142857142857,94
ced1a05df2b47daf629416b342d6eb00c7a11258,Thread thread = new Thread(runner);,0,2,0.2857142857142857,95
ced1a05df2b47daf629416b342d6eb00c7a11258,this.taskExecutor =,0,2,0.2857142857142857,96
ced1a05df2b47daf629416b342d6eb00c7a11258,Set<String> replies = new HashSet<String>();,1,2,0.2857142857142857,97
ced1a05df2b47daf629416b342d6eb00c7a11258,public TcpConnectionSupport createForPool() {,1,2,0.2857142857142857,98
ced1a05df2b47daf629416b342d6eb00c7a11258,List<Socket> sockets = new ArrayList<Socket>();,1,2,0.2857142857142857,99
ced1a05df2b47daf629416b342d6eb00c7a11258,* factory will be reconfigured to have {@code singleUse=true} in order for the connection to be,0,2,0.2857142857142857,100
ced1a05df2b47daf629416b342d6eb00c7a11258,new SimplePool.PoolItemCallback<TcpConnectionSupport>() {,0,2,0.2857142857142857,101
ced1a05df2b47daf629416b342d6eb00c7a11258,"this.pool = new SimplePool<TcpConnectionSupport>(poolSize,",0,2,0.2857142857142857,102
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param target the target factory.,0,2,0.2857142857142857,103
ced1a05df2b47daf629416b342d6eb00c7a11258,* the provided pool size.,0,2,0.2857142857142857,104
ced1a05df2b47daf629416b342d6eb00c7a11258,"* Construct a caching connection factory that delegates to the provided factory, with",0,2,0.2857142857142857,105
ced1a05df2b47daf629416b342d6eb00c7a11258,"* false, or cache starvation will result.",0,2,0.2857142857142857,106
ced1a05df2b47daf629416b342d6eb00c7a11258,this.serverChannel = null;,1,2,0.2857142857142857,107
ced1a05df2b47daf629416b342d6eb00c7a11258,public boolean isStale(TcpConnectionSupport connection) {,0,2,0.2857142857142857,108
ced1a05df2b47daf629416b342d6eb00c7a11258,if (this.serverChannel == null) {,1,2,0.2857142857142857,109
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param selector,1,2,0.2857142857142857,110
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param server,1,2,0.2857142857142857,111
ced1a05df2b47daf629416b342d6eb00c7a11258,this.serverChannel = null;,0,2,0.2857142857142857,112
ced1a05df2b47daf629416b342d6eb00c7a11258,Set<String> replies = new HashSet<>();,0,2,0.2857142857142857,113
ced1a05df2b47daf629416b342d6eb00c7a11258,if (this.serverChannel != null) {,0,2,0.2857142857142857,114
ced1a05df2b47daf629416b342d6eb00c7a11258,public TcpConnectionSupport createForPool() {,0,2,0.2857142857142857,115
ced1a05df2b47daf629416b342d6eb00c7a11258,* Connection factory that caches connections from the underlying target factory. The underlying,0,2,0.2857142857142857,116
ced1a05df2b47daf629416b342d6eb00c7a11258,* @return the pool size.,0,2,0.2857142857142857,117
ced1a05df2b47daf629416b342d6eb00c7a11258,if (o == null || getClass() != o.getClass()) return false;,0,2,0.2857142857142857,118
ced1a05df2b47daf629416b342d6eb00c7a11258,results[j] = (this.executor.submit(() -> {,0,2,0.2857142857142857,119
ced1a05df2b47daf629416b342d6eb00c7a11258,List<Socket> sockets = new ArrayList<>();,0,2,0.2857142857142857,120
ced1a05df2b47daf629416b342d6eb00c7a11258,* @return the idle count.,0,2,0.2857142857142857,121
ced1a05df2b47daf629416b342d6eb00c7a11258,public void setInterceptorFactoryChain(,1,2,0.2857142857142857,122
ced1a05df2b47daf629416b342d6eb00c7a11258,public boolean equals(Object obj) {,1,2,0.2857142857142857,123
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param singleUse the singleUse.,0,2,0.2857142857142857,124
ced1a05df2b47daf629416b342d6eb00c7a11258,public boolean isStale(TcpConnectionSupport connection) {,1,2,0.2857142857142857,125
ced1a05df2b47daf629416b342d6eb00c7a11258,if (this == o) return true;,0,2,0.2857142857142857,126
ced1a05df2b47daf629416b342d6eb00c7a11258,public boolean equals(Object o) {,0,2,0.2857142857142857,127
ced1a05df2b47daf629416b342d6eb00c7a11258,if (logger.isDebugEnabled()) {,0,2,0.2857142857142857,128
ced1a05df2b47daf629416b342d6eb00c7a11258,if (this.released) {,0,2,0.2857142857142857,129
ced1a05df2b47daf629416b342d6eb00c7a11258,* @return the allocated count.,0,2,0.2857142857142857,130
ced1a05df2b47daf629416b342d6eb00c7a11258,* @return the active count.,0,2,0.2857142857142857,131
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.net.Inet4Address;,1,1,0.14285714285714285,132
ced1a05df2b47daf629416b342d6eb00c7a11258,"&& !networkInterface.getName().contains(""vboxnet"")",0,1,0.14285714285714285,133
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.net.NetworkInterface;,0,1,0.14285714285714285,134
ced1a05df2b47daf629416b342d6eb00c7a11258,&& (!multicast || networkInterface.supportsMulticast()),0,1,0.14285714285714285,135
ced1a05df2b47daf629416b342d6eb00c7a11258,if (!networkInterface.isLoopback(),0,1,0.14285714285714285,136
ced1a05df2b47daf629416b342d6eb00c7a11258,NetworkInterface networkInterface = interfaces.nextElement();,0,1,0.14285714285714285,137
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.springframework.lang.Nullable;,0,1,0.14285714285714285,138
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.net.Inet4Address;,1,1,0.14285714285714285,139
ced1a05df2b47daf629416b342d6eb00c7a11258,},0,1,0.14285714285714285,140
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.junit.jupiter.api.condition.EnabledOnJre;,0,1,0.14285714285714285,141
ced1a05df2b47daf629416b342d6eb00c7a11258,exec.execute(new Runnable() {,1,1,0.14285714285714285,142
ced1a05df2b47daf629416b342d6eb00c7a11258,factory.registerListener(new TcpListener() {,1,1,0.14285714285714285,143
ced1a05df2b47daf629416b342d6eb00c7a11258,latch.countDown();,1,1,0.14285714285714285,144
ced1a05df2b47daf629416b342d6eb00c7a11258,},1,1,0.14285714285714285,145
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,1,1,0.14285714285714285,146
ced1a05df2b47daf629416b342d6eb00c7a11258,@Override,1,1,0.14285714285714285,147
ced1a05df2b47daf629416b342d6eb00c7a11258,ExecutorService exec = Executors.newSingleThreadExecutor();,1,1,0.14285714285714285,148
ced1a05df2b47daf629416b342d6eb00c7a11258,Executors.newSingleThreadExecutor().execute(() -> {,1,1,0.14285714285714285,149
ced1a05df2b47daf629416b342d6eb00c7a11258,factory.registerListener(message -> {,0,1,0.14285714285714285,150
ced1a05df2b47daf629416b342d6eb00c7a11258,latch.countDown();,0,1,0.14285714285714285,151
ced1a05df2b47daf629416b342d6eb00c7a11258,finally {,1,1,0.14285714285714285,152
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,1,1,0.14285714285714285,153
ced1a05df2b47daf629416b342d6eb00c7a11258,* Protected by lifecycleLock,1,1,0.14285714285714285,154
ced1a05df2b47daf629416b342d6eb00c7a11258,socket.close();,1,1,0.14285714285714285,155
ced1a05df2b47daf629416b342d6eb00c7a11258,},1,1,0.14285714285714285,156
ced1a05df2b47daf629416b342d6eb00c7a11258,},0,1,0.14285714285714285,157
ced1a05df2b47daf629416b342d6eb00c7a11258,this.active = false;,1,1,0.14285714285714285,158
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param threadName The thread name.,1,1,0.14285714285714285,159
ced1a05df2b47daf629416b342d6eb00c7a11258,*,1,1,0.14285714285714285,160
ced1a05df2b47daf629416b342d6eb00c7a11258,},1,1,0.14285714285714285,161
ced1a05df2b47daf629416b342d6eb00c7a11258,"checkTaskExecutor((beanName == null ? """" : beanName + ""-"") + this.getComponentType());",1,1,0.14285714285714285,162
ced1a05df2b47daf629416b342d6eb00c7a11258,String beanName = this.getComponentName();,1,1,0.14285714285714285,163
ced1a05df2b47daf629416b342d6eb00c7a11258,@Override,1,1,0.14285714285714285,164
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.util.concurrent.ThreadFactory;,1,1,0.14285714285714285,165
ced1a05df2b47daf629416b342d6eb00c7a11258,(runner) -> {,0,1,0.14285714285714285,166
ced1a05df2b47daf629416b342d6eb00c7a11258,* @param threadName The thread name.,0,1,0.14285714285714285,167
ced1a05df2b47daf629416b342d6eb00c7a11258,},0,1,0.14285714285714285,168
ced1a05df2b47daf629416b342d6eb00c7a11258,"checkTaskExecutor((beanName == null ? """" : beanName + ""-"") + getComponentType());",0,1,0.14285714285714285,169
ced1a05df2b47daf629416b342d6eb00c7a11258,String beanName = getComponentName();,0,1,0.14285714285714285,170
ced1a05df2b47daf629416b342d6eb00c7a11258,@Override,0,1,0.14285714285714285,171
ced1a05df2b47daf629416b342d6eb00c7a11258,* Protected by lifecycleLock,0,1,0.14285714285714285,172
ced1a05df2b47daf629416b342d6eb00c7a11258,*,0,1,0.14285714285714285,173
ced1a05df2b47daf629416b342d6eb00c7a11258,* @author Artem Bilan,0,1,0.14285714285714285,174
ced1a05df2b47daf629416b342d6eb00c7a11258,InetAddress nextElement = inetAddr.nextElement();,1,1,0.14285714285714285,175
ced1a05df2b47daf629416b342d6eb00c7a11258,"|| intface.getName().contains(""vboxnet"")) {",1,1,0.14285714285714285,176
ced1a05df2b47daf629416b342d6eb00c7a11258,NetworkInterface intface = interfaces.nextElement();,1,1,0.14285714285714285,177
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,0,1,0.14285714285714285,178
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.junit.jupiter.api.condition.JRE;,0,1,0.14285714285714285,179
ced1a05df2b47daf629416b342d6eb00c7a11258,finally {,0,1,0.14285714285714285,180
ced1a05df2b47daf629416b342d6eb00c7a11258,"logger.debug(""Factory not running - closing "" + getConnectionId());",0,1,0.14285714285714285,181
ced1a05df2b47daf629416b342d6eb00c7a11258,* @see SimplePool#getAllocatedCount(),0,1,0.14285714285714285,182
ced1a05df2b47daf629416b342d6eb00c7a11258,* @see SimplePool#getActiveCount(),0,1,0.14285714285714285,183
ced1a05df2b47daf629416b342d6eb00c7a11258,* @see SimplePool#getIdleCount(),0,1,0.14285714285714285,184
ced1a05df2b47daf629416b342d6eb00c7a11258,* @see SimplePool#getPoolSize(),0,1,0.14285714285714285,185
ced1a05df2b47daf629416b342d6eb00c7a11258,* @see SimplePool#setPoolSize(int),0,1,0.14285714285714285,186
ced1a05df2b47daf629416b342d6eb00c7a11258,* @see SimplePool#setWaitTimeout(long),0,1,0.14285714285714285,187
ced1a05df2b47daf629416b342d6eb00c7a11258,"throw new MessagingException(""Failed to obtain connection"", e);",0,1,0.14285714285714285,188
ced1a05df2b47daf629416b342d6eb00c7a11258,},0,1,0.14285714285714285,189
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,0,1,0.14285714285714285,190
ced1a05df2b47daf629416b342d6eb00c7a11258,@Override,0,1,0.14285714285714285,191
ced1a05df2b47daf629416b342d6eb00c7a11258,*,0,1,0.14285714285714285,192
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,1,1,0.14285714285714285,193
ced1a05df2b47daf629416b342d6eb00c7a11258,},1,1,0.14285714285714285,194
ced1a05df2b47daf629416b342d6eb00c7a11258,"throws IOException, SocketException {",1,1,0.14285714285714285,195
ced1a05df2b47daf629416b342d6eb00c7a11258,* @throws SocketException,1,1,0.14285714285714285,196
ced1a05df2b47daf629416b342d6eb00c7a11258,* @throws ClosedChannelException,1,1,0.14285714285714285,197
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.net.SocketException;,1,1,0.14285714285714285,198
ced1a05df2b47daf629416b342d6eb00c7a11258,finally {,0,1,0.14285714285714285,199
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,0,1,0.14285714285714285,200
ced1a05df2b47daf629416b342d6eb00c7a11258,},0,1,0.14285714285714285,201
ced1a05df2b47daf629416b342d6eb00c7a11258,this.executor.execute(() -> {,0,1,0.14285714285714285,202
ced1a05df2b47daf629416b342d6eb00c7a11258,else {,0,1,0.14285714285714285,203
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.nio.channels.ClosedChannelException;,1,1,0.14285714285714285,204
ced1a05df2b47daf629416b342d6eb00c7a11258,AbstractIntegrationMessageBuilder<?> messageBuilder =,0,1,0.14285714285714285,205
ced1a05df2b47daf629416b342d6eb00c7a11258,AbstractIntegrationMessageBuilder<?> messageBuilder = CachingClientConnectionFactory.this,1,1,0.14285714285714285,206
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.springframework.core.task.SimpleAsyncTaskExecutor;,0,1,0.14285714285714285,207
ced1a05df2b47daf629416b342d6eb00c7a11258,CachingClientConnectionFactory that = (CachingClientConnectionFactory) o;,0,1,0.14285714285714285,208
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.springframework.core.task.AsyncTaskExecutor;,0,1,0.14285714285714285,209
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.springframework.beans.factory.DisposableBean;,0,1,0.14285714285714285,210
ced1a05df2b47daf629416b342d6eb00c7a11258,import java.util.concurrent.Executors;,1,1,0.14285714285714285,211
ced1a05df2b47daf629416b342d6eb00c7a11258,this.executor.execute(() -> {,0,1,0.14285714285714285,212
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.springframework.core.task.SimpleAsyncTaskExecutor;,0,1,0.14285714285714285,213
ced1a05df2b47daf629416b342d6eb00c7a11258,import org.springframework.core.task.AsyncTaskExecutor;,0,1,0.14285714285714285,214
ced1a05df2b47daf629416b342d6eb00c7a11258,TcpConnectionInterceptorFactoryChain interceptorFactoryChain) {,1,1,0.14285714285714285,215
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.registerListener(new TcpListener() {,1,1,0.14285714285714285,216
ced1a05df2b47daf629416b342d6eb00c7a11258,Executors.newSingleThreadExecutor().execute(() -> {,1,1,0.14285714285714285,217
ced1a05df2b47daf629416b342d6eb00c7a11258,"logger.debug(""Factory not running - closing "" + this.getConnectionId());",1,1,0.14285714285714285,218
ced1a05df2b47daf629416b342d6eb00c7a11258,"throw new MessagingException(""Failed to obtain connection"", e);",1,1,0.14285714285714285,219
ced1a05df2b47daf629416b342d6eb00c7a11258,if (logger.isDebugEnabled()){,1,1,0.14285714285714285,220
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.registerListener(new TcpListener() {,0,1,0.14285714285714285,221
ced1a05df2b47daf629416b342d6eb00c7a11258,try {,1,1,0.14285714285714285,222
ced1a05df2b47daf629416b342d6eb00c7a11258,@Override,1,1,0.14285714285714285,223
ced1a05df2b47daf629416b342d6eb00c7a11258,},1,1,0.14285714285714285,224
ced1a05df2b47daf629416b342d6eb00c7a11258,if(this.released) {,1,1,0.14285714285714285,225
ced1a05df2b47daf629416b342d6eb00c7a11258,else  {,1,1,0.14285714285714285,226
ced1a05df2b47daf629416b342d6eb00c7a11258,* will cause cache starvation.,0,1,0.14285714285714285,227
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setMapper(mapper);,1,0,0.0,228
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.isSingleUse();,1,0,0.0,229
ced1a05df2b47daf629416b342d6eb00c7a11258,this.setActive(true);,1,0,0.0,230
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSingleUse(singleUse);,1,0,0.0,231
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory,1,0,0.0,232
ced1a05df2b47daf629416b342d6eb00c7a11258,.setInterceptorFactoryChain(interceptorFactoryChain);,1,0,0.0,233
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setLookupHost(lookupHost);,1,0,0.0,234
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.isLookupHost();,1,0,0.0,235
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getPhase();,1,0,0.0,236
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.start();,1,0,0.0,237
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.stop();,1,0,0.0,238
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.isAutoStartup();,1,0,0.0,239
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.stop(callback);,1,0,0.0,240
ced1a05df2b47daf629416b342d6eb00c7a11258,factory.setSoTimeout(100);,0,0,0.0,241
ced1a05df2b47daf629416b342d6eb00c7a11258,Thread.sleep(10);,0,0,0.0,242
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setDeserializer(deserializer);,1,0,0.0,243
ced1a05df2b47daf629416b342d6eb00c7a11258,exec.shutdownNow();,0,0,0.0,244
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSerializer(serializer);,1,0,0.0,245
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoKeepAlive(soKeepAlive);,1,0,0.0,246
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setTaskExecutor(taskExecutor);,1,0,0.0,247
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.isSoKeepAlive();,1,0,0.0,248
ced1a05df2b47daf629416b342d6eb00c7a11258,e.printStackTrace();,0,0,0.0,249
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSoSendBufferSize();,1,0,0.0,250
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoSendBufferSize(soSendBufferSize);,1,0,0.0,251
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.isSoTcpNoDelay();,1,0,0.0,252
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoTcpNoDelay(soTcpNoDelay);,1,0,0.0,253
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSoLinger();,1,0,0.0,254
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoLinger(soLinger);,1,0,0.0,255
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSoTrafficClass();,1,0,0.0,256
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.registerSender(sender);,1,0,0.0,257
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoTrafficClass(soTrafficClass);,1,0,0.0,258
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getHost();,1,0,0.0,259
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getPort();,1,0,0.0,260
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSender();,1,0,0.0,261
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSerializer();,1,0,0.0,262
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getDeserializer();,1,0,0.0,263
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getMapper();,1,0,0.0,264
ced1a05df2b47daf629416b342d6eb00c7a11258,stream.read(out);,0,0,0.0,265
ced1a05df2b47daf629416b342d6eb00c7a11258,/**,0,0,0.0,266
ced1a05df2b47daf629416b342d6eb00c7a11258,cleanupCompositeExecutor(compositeExec);,0,0,0.0,267
ced1a05df2b47daf629416b342d6eb00c7a11258,"TestUtils.getPropertyValue(compositeExec, ""primaryTaskExecutor"", DisposableBean.class).destroy();",0,0,0.0,268
ced1a05df2b47daf629416b342d6eb00c7a11258,this.taskExecutor.execute(this);,0,0,0.0,269
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSoReceiveBufferSize();,1,0,0.0,270
ced1a05df2b47daf629416b342d6eb00c7a11258,*/,0,0,0.0,271
ced1a05df2b47daf629416b342d6eb00c7a11258,"Executors.newFixedThreadPool(this.poolSize,",0,0,0.0,272
ced1a05df2b47daf629416b342d6eb00c7a11258,thread.setName(threadName);,0,0,0.0,273
ced1a05df2b47daf629416b342d6eb00c7a11258,thread.setDaemon(true);,0,0,0.0,274
ced1a05df2b47daf629416b342d6eb00c7a11258,return thread;,0,0,0.0,275
ced1a05df2b47daf629416b342d6eb00c7a11258,});,0,0,0.0,276
ced1a05df2b47daf629416b342d6eb00c7a11258,((ExecutorService) this.taskExecutor).shutdown();,0,0,0.0,277
ced1a05df2b47daf629416b342d6eb00c7a11258,/**,1,0,0.0,278
ced1a05df2b47daf629416b342d6eb00c7a11258,*/,1,0,0.0,279
ced1a05df2b47daf629416b342d6eb00c7a11258,this.taskExecutor.execute(this);,1,0,0.0,280
ced1a05df2b47daf629416b342d6eb00c7a11258,thread.setName(threadName);,1,0,0.0,281
ced1a05df2b47daf629416b342d6eb00c7a11258,thread.setDaemon(true);,1,0,0.0,282
ced1a05df2b47daf629416b342d6eb00c7a11258,return thread;,1,0,0.0,283
ced1a05df2b47daf629416b342d6eb00c7a11258,});,1,0,0.0,284
ced1a05df2b47daf629416b342d6eb00c7a11258,((ExecutorService) this.taskExecutor).shutdown();,1,0,0.0,285
ced1a05df2b47daf629416b342d6eb00c7a11258,"await(""Adapter not listening"").atMost(Duration.ofSeconds(10)).until(() -> adapter.isListening());",1,0,0.0,286
ced1a05df2b47daf629416b342d6eb00c7a11258,return nextElement.getHostAddress();,1,0,0.0,287
ced1a05df2b47daf629416b342d6eb00c7a11258,continue;,1,0,0.0,288
ced1a05df2b47daf629416b342d6eb00c7a11258,e.printStackTrace();,1,0,0.0,289
ced1a05df2b47daf629416b342d6eb00c7a11258,"TestUtils.getPropertyValue(compositeExec, ""secondaryTaskExecutor"", DisposableBean.class).destroy();",0,0,0.0,290
ced1a05df2b47daf629416b342d6eb00c7a11258,return false;,0,0,0.0,291
ced1a05df2b47daf629416b342d6eb00c7a11258,Thread.sleep(1);,0,0,0.0,292
ced1a05df2b47daf629416b342d6eb00c7a11258,te.shutdown();,0,0,0.0,293
ced1a05df2b47daf629416b342d6eb00c7a11258,factory.setSoTimeout(1000);,1,0,0.0,294
ced1a05df2b47daf629416b342d6eb00c7a11258,Thread.sleep(100);,1,0,0.0,295
ced1a05df2b47daf629416b342d6eb00c7a11258,stream.read(out);,1,0,0.0,296
ced1a05df2b47daf629416b342d6eb00c7a11258,return false;,1,0,0.0,297
ced1a05df2b47daf629416b342d6eb00c7a11258,"await(""Adapter not listening"").atMost(Duration.ofSeconds(10)).until(adapter::isListening);",0,0,0.0,298
ced1a05df2b47daf629416b342d6eb00c7a11258,@EnabledOnJre(JRE.JAVA_8),0,0,0.0,299
ced1a05df2b47daf629416b342d6eb00c7a11258,adapter.setLocalAddress(nic.getName());,0,0,0.0,300
ced1a05df2b47daf629416b342d6eb00c7a11258,handler.setLocalAddress(nic.getName());,0,0,0.0,301
ced1a05df2b47daf629416b342d6eb00c7a11258,adapter.setLocalAddress(nic);,1,0,0.0,302
ced1a05df2b47daf629416b342d6eb00c7a11258,handler.setLocalAddress(nic);,1,0,0.0,303
ced1a05df2b47daf629416b342d6eb00c7a11258,@Nullable,0,0,0.0,304
ced1a05df2b47daf629416b342d6eb00c7a11258,return networkInterface;,0,0,0.0,305
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoReceiveBufferSize(soReceiveBufferSize);,1,0,0.0,306
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.start();,0,0,0.0,307
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setSoTimeout(soTimeout);,1,0,0.0,308
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoReceiveBufferSize(soReceiveBufferSize);,0,0,0.0,309
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.hashCode();,0,0,0.0,310
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setComponentName(componentName);,0,0,0.0,311
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getComponentType();,0,0,0.0,312
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.equals(that.targetConnectionFactory);,0,0,0.0,313
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSoTimeout();,0,0,0.0,314
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoTimeout(soTimeout);,0,0,0.0,315
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSoReceiveBufferSize();,0,0,0.0,316
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSoSendBufferSize();,0,0,0.0,317
ced1a05df2b47daf629416b342d6eb00c7a11258,getTheConnection().close();,0,0,0.0,318
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoSendBufferSize(soSendBufferSize);,0,0,0.0,319
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.isSoTcpNoDelay();,0,0,0.0,320
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoTcpNoDelay(soTcpNoDelay);,0,0,0.0,321
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSoLinger();,0,0,0.0,322
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoLinger(soLinger);,0,0,0.0,323
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.isSoKeepAlive();,0,0,0.0,324
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoKeepAlive(soKeepAlive);,0,0,0.0,325
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.isRunning();,0,0,0.0,326
ced1a05df2b47daf629416b342d6eb00c7a11258,getListener().onMessage(messageBuilder.build());,0,0,0.0,327
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSoTrafficClass(soTrafficClass);,0,0,0.0,328
ced1a05df2b47daf629416b342d6eb00c7a11258,return !connection.isOpen();,0,0,0.0,329
ced1a05df2b47daf629416b342d6eb00c7a11258,this.setActive(false);,0,0,0.0,330
ced1a05df2b47daf629416b342d6eb00c7a11258,this.serverChannel.close();,0,0,0.0,331
ced1a05df2b47daf629416b342d6eb00c7a11258,return;,1,0,0.0,332
ced1a05df2b47daf629416b342d6eb00c7a11258,this.serverChannel.close();,1,0,0.0,333
ced1a05df2b47daf629416b342d6eb00c7a11258,/**,0,0,0.0,334
ced1a05df2b47daf629416b342d6eb00c7a11258,*/,0,0,0.0,335
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getConnection();,0,0,0.0,336
ced1a05df2b47daf629416b342d6eb00c7a11258,connection.close();,0,0,0.0,337
ced1a05df2b47daf629416b342d6eb00c7a11258,".setHeader(IpHeaders.CONNECTION_ID, getConnectionId());",0,0,0.0,338
ced1a05df2b47daf629416b342d6eb00c7a11258,});,0,0,0.0,339
ced1a05df2b47daf629416b342d6eb00c7a11258,cachedConnection.registerListener(getListener());,0,0,0.0,340
ced1a05df2b47daf629416b342d6eb00c7a11258,"logger.debug(""Connection "" + getConnectionId() + "" has already been released"");",0,0,0.0,341
ced1a05df2b47daf629416b342d6eb00c7a11258,pool.releaseItem(getTheConnection());,0,0,0.0,342
ced1a05df2b47daf629416b342d6eb00c7a11258,return getConnectionId();,0,0,0.0,343
ced1a05df2b47daf629416b342d6eb00c7a11258,CachingClientConnectionFactory.this.getMessageBuilderFactory(),0,0,0.0,344
ced1a05df2b47daf629416b342d6eb00c7a11258,.fromMessage(message),0,0,0.0,345
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSoTrafficClass();,0,0,0.0,346
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getHost();,0,0,0.0,347
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getSoTimeout();,1,0,0.0,348
ced1a05df2b47daf629416b342d6eb00c7a11258,.getMessageBuilderFactory().fromMessage(message),1,0,0.0,349
ced1a05df2b47daf629416b342d6eb00c7a11258,return !connection.isOpen();,1,0,0.0,350
ced1a05df2b47daf629416b342d6eb00c7a11258,connection.close();,1,0,0.0,351
ced1a05df2b47daf629416b342d6eb00c7a11258,});,1,0,0.0,352
ced1a05df2b47daf629416b342d6eb00c7a11258,cachedConnection.registerListener(this.getListener());,1,0,0.0,353
ced1a05df2b47daf629416b342d6eb00c7a11258,"logger.debug(""Connection "" + this.getConnectionId() + "" has already been released"");",1,0,0.0,354
ced1a05df2b47daf629416b342d6eb00c7a11258,pool.releaseItem(this.getTheConnection());,1,0,0.0,355
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.getConnectionId();,1,0,0.0,356
ced1a05df2b47daf629416b342d6eb00c7a11258,".setHeader(IpHeaders.CONNECTION_ID, this.getConnectionId());",1,0,0.0,357
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.stop(callback);,0,0,0.0,358
ced1a05df2b47daf629416b342d6eb00c7a11258,this.getListener().onMessage(messageBuilder.build());,1,0,0.0,359
ced1a05df2b47daf629416b342d6eb00c7a11258,this.getTheConnection().close();,1,0,0.0,360
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.isRunning();,1,0,0.0,361
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.hashCode();,1,0,0.0,362
ced1a05df2b47daf629416b342d6eb00c7a11258,targetConnectionFactory.setComponentName(componentName);,1,0,0.0,363
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getComponentType();,1,0,0.0,364
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.equals(obj);,1,0,0.0,365
ced1a05df2b47daf629416b342d6eb00c7a11258,return targetConnectionFactory.getConnection();,1,0,0.0,366
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.isAutoStartup();,0,0,0.0,367
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getPort();,0,0,0.0,368
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setSerializer(serializer);,0,0,0.0,369
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSender();,0,0,0.0,370
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getSerializer();,0,0,0.0,371
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getDeserializer();,0,0,0.0,372
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getMapper();,0,0,0.0,373
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.registerSender(sender);,0,0,0.0,374
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setTaskExecutor(taskExecutor);,0,0,0.0,375
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setDeserializer(deserializer);,0,0,0.0,376
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setMapper(mapper);,0,0,0.0,377
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.getPhase();,0,0,0.0,378
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.isSingleUse();,0,0,0.0,379
ced1a05df2b47daf629416b342d6eb00c7a11258,"logger.debug(""singleUse=false is not supported; cached connections are never closed"");",0,0,0.0,380
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setInterceptorFactoryChain(interceptorFactoryChain);,0,0,0.0,381
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.setLookupHost(lookupHost);,0,0,0.0,382
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.targetConnectionFactory.isLookupHost();,0,0,0.0,383
ced1a05df2b47daf629416b342d6eb00c7a11258,setActive(true);,0,0,0.0,384
ced1a05df2b47daf629416b342d6eb00c7a11258,this.targetConnectionFactory.stop();,0,0,0.0,385
ced1a05df2b47daf629416b342d6eb00c7a11258,return this.active;,1,0,0.0,386
