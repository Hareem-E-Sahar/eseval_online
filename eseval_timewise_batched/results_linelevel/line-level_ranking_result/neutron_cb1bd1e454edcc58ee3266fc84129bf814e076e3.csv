commit_id,line,line_level_label,count,line_score,row
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent = linuxbridge_neutron_agent.LinuxBridgeNeutronAgentRPC({}, 0)",1,3,1.0,1
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"interface = self.get_subinterface_name(physical_interface, vlan_id)",1,2,0.6666666666666666,2
cb1bd1e454edcc58ee3266fc84129bf814e076e3,agent = self.agent,0,2,0.6666666666666666,3
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface = self.agent.br_mgr.get_vxlan_device_name(,1,2,0.6666666666666666,4
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent = agent,1,2,0.6666666666666666,5
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent = CommonAgentLoop(manager, polling_interval, quitting_rpc_timeout,",0,2,0.6666666666666666,6
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface = self.agent.mgr.get_vxlan_device_name(,0,2,0.6666666666666666,7
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent = LinuxBridgeNeutronAgentRPC(bridge_mappings,",1,2,0.6666666666666666,8
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent = LinuxBridgeNeutronAgentRPC(interface_mappings,",1,2,0.6666666666666666,9
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent = LinuxBridgeNeutronAgentRPC(bridge_mappings,",0,2,0.6666666666666666,10
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""No bridge or interface mappings""",0,2,0.6666666666666666,11
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# NOTE(nick-ma-z): Obtain mappings of physical bridge and interfaces,0,2,0.6666666666666666,12
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent = linuxbridge_neutron_agent.LinuxBridgeNeutronAgentRPC({},",1,2,0.6666666666666666,13
cb1bd1e454edcc58ee3266fc84129bf814e076e3,current_devices = self.mgr.get_all_devices(),0,1,0.3333333333333333,14
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations = {'extensions': self.ext_manager.names()},0,1,0.3333333333333333,15
cb1bd1e454edcc58ee3266fc84129bf814e076e3,devices = len(self.mgr.get_all_devices()),0,1,0.3333333333333333,16
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent_id = self.mgr.get_agent_id(),0,1,0.3333333333333333,17
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.rpc_callbacks = self.mgr.get_rpc_callbacks(self.context, self,",0,1,0.3333333333333333,18
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.endpoints = [self.rpc_callbacks],0,1,0.3333333333333333,19
cb1bd1e454edcc58ee3266fc84129bf814e076e3,consumers = self.mgr.get_rpc_consumers(),0,1,0.3333333333333333,20
cb1bd1e454edcc58ee3266fc84129bf814e076e3,segment = amb.NetworkSegment(,0,1,0.3333333333333333,21
cb1bd1e454edcc58ee3266fc84129bf814e076e3,network_id = device_details['network_id'],0,1,0.3333333333333333,22
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface_plugged = self.mgr.plug_interface(,0,1,0.3333333333333333,23
cb1bd1e454edcc58ee3266fc84129bf814e076e3,updated_devices = self.rpc_callbacks.get_and_clear_updated_devices(),0,1,0.3333333333333333,24
cb1bd1e454edcc58ee3266fc84129bf814e076e3,tap_device_name = self.get_tap_device_name(port_id),1,1,0.3333333333333333,25
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"manager = LinuxBridgeManager(bridge_mappings, interface_mappings)",0,1,0.3333333333333333,26
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.network_type = network_type,1,1,0.3333333333333333,27
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.physical_network = physical_network,1,1,0.3333333333333333,28
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.segmentation_id = segmentation_id,1,1,0.3333333333333333,29
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.network_map = {},1,1,0.3333333333333333,30
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.network_map[network_id] = NetworkSegment(network_type,",1,1,0.3333333333333333,31
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent_type = agent_type,0,1,0.3333333333333333,32
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.context = context,1,1,0.3333333333333333,33
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.sg_agent = sg_agent,1,1,0.3333333333333333,34
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phynet = self.agent.br_mgr.network_map[network_id].physical_network,1,1,0.3333333333333333,35
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.agent.br_mgr.get_bridge_name(network_id),1,1,0.3333333333333333,36
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent_binary = agent_binary,0,1,0.3333333333333333,37
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phynet = self.network_map[network_id].physical_network,0,1,0.3333333333333333,38
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mgr = manager,0,1,0.3333333333333333,39
cb1bd1e454edcc58ee3266fc84129bf814e076e3,devices = ip_lib.IPWrapper().get_devices(True),0,1,0.3333333333333333,40
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as add_fn:,0,1,0.3333333333333333,41
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as del_fn:,0,1,0.3333333333333333,42
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return_value='') as add_fn, \",0,1,0.3333333333333333,43
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as execute_fn:,1,1,0.3333333333333333,44
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"run_as_root=True,",1,1,0.3333333333333333,45
cb1bd1e454edcc58ee3266fc84129bf814e076e3,expected = [,1,1,0.3333333333333333,46
cb1bd1e454edcc58ee3266fc84129bf814e076e3,from neutron.plugins.ml2.drivers.agent import _agent_manager_base as amb,0,1,0.3333333333333333,47
cb1bd1e454edcc58ee3266fc84129bf814e076e3,from neutron.plugins.ml2.drivers.agent import config as cagt_config  # noqa,0,1,0.3333333333333333,48
cb1bd1e454edcc58ee3266fc84129bf814e076e3,LB_AGENT_BINARY = 'neutron-linuxbridge-agent',0,1,0.3333333333333333,49
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mac = utils.get_interface_mac(self.bridge_mappings.values[0]),0,1,0.3333333333333333,50
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mac = utils.get_interface_mac(devices[0].name),0,1,0.3333333333333333,51
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param agent_binary: The agent binary string,0,1,0.3333333333333333,52
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"configurations = {'bridge_mappings': self.bridge_mappings,",0,1,0.3333333333333333,53
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations['tunneling_ip'] = self.local_ip,0,1,0.3333333333333333,54
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations['tunnel_types'] = [p_const.TYPE_VXLAN],0,1,0.3333333333333333,55
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations['l2_population'] = cfg.CONF.VXLAN.l2_population,0,1,0.3333333333333333,56
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"consumers = [[topics.PORT, topics.UPDATE],",0,1,0.3333333333333333,57
cb1bd1e454edcc58ee3266fc84129bf814e076e3,segment = self.agent.br_mgr.network_map.get(network_id),1,1,0.3333333333333333,58
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.agent.mgr.get_bridge_name(network_id),0,1,0.3333333333333333,59
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_name = self.agent.mgr.get_tap_device_name(port_id),0,1,0.3333333333333333,60
cb1bd1e454edcc58ee3266fc84129bf814e076e3,segment = self.network_map.get(network_id),0,1,0.3333333333333333,61
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param agent_type: Specifies the type of the agent,0,1,0.3333333333333333,62
cb1bd1e454edcc58ee3266fc84129bf814e076e3,tap_name = self.agent.br_mgr.get_tap_device_name(port_id),1,1,0.3333333333333333,63
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations['l2_population'] = cfg.CONF.VXLAN.l2_population,1,1,0.3333333333333333,64
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings = interface_mappings,1,1,0.3333333333333333,65
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_append = mock.patch.object(,0,1,0.3333333333333333,66
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"vlan_id], run_as_root=True):",1,1,0.3333333333333333,67
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"interface, 'up'], run_as_root=True):",1,1,0.3333333333333333,68
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ret = bridge_lib.FdbInterface.append(constants.FLOODING_ENTRY[0],",0,1,0.3333333333333333,69
cb1bd1e454edcc58ee3266fc84129bf814e076e3,entries = bridge_lib.FdbInterface.show(dev=interface),0,1,0.3333333333333333,70
cb1bd1e454edcc58ee3266fc84129bf814e076e3,macs = [entry['mac'] for entry in entries[interface]],0,1,0.3333333333333333,71
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ips = [entry['dst_ip'] for entry in entries[interface]],0,1,0.3333333333333333,72
cb1bd1e454edcc58ee3266fc84129bf814e076e3,test_iface = None,1,1,0.3333333333333333,73
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return True,1,1,0.3333333333333333,74
cb1bd1e454edcc58ee3266fc84129bf814e076e3,entries = bridge_lib.FdbInterface.show(interface),1,1,0.3333333333333333,75
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_add = mock.patch.object(,0,1,0.3333333333333333,76
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_replace = mock.patch.object(,0,1,0.3333333333333333,77
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ctxt.reraise = False,0,1,0.3333333333333333,78
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_delete = mock.patch.object(,0,1,0.3333333333333333,79
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_show = mock.patch.object(,0,1,0.3333333333333333,80
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as add_fn:,0,1,0.3333333333333333,81
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as del_fn:,0,1,0.3333333333333333,82
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"calls = [mock.call(constants.FLOODING_ENTRY[0], 'vxlan-1',",0,1,0.3333333333333333,83
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return_value='') as execute_fn, \",1,1,0.3333333333333333,84
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as add_fn:,1,1,0.3333333333333333,85
cb1bd1e454edcc58ee3266fc84129bf814e076e3,expected = [,1,1,0.3333333333333333,86
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"run_as_root=True,",1,1,0.3333333333333333,87
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value='') as del_fn:,1,1,0.3333333333333333,88
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Unable to create VLAN interface for """,0,1,0.3333333333333333,89
cb1bd1e454edcc58ee3266fc84129bf814e076e3,with excutils.save_and_reraise_exception() as ctxt:,0,1,0.3333333333333333,90
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.bridge_mappings = bridge_mappings,1,1,0.3333333333333333,91
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent_id = '%s%s' % ('lb', (mac.replace("":"", """")))",1,1,0.3333333333333333,92
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.updated_devices = set(),1,1,0.3333333333333333,93
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations = {,1,1,0.3333333333333333,94
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations['tunneling_ip'] = self.br_mgr.local_ip,1,1,0.3333333333333333,95
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations['tunnel_types'] = [p_const.TYPE_VXLAN],1,1,0.3333333333333333,96
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"run_as_root=True,",1,1,0.3333333333333333,97
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.info(_LI(""Stopping linuxbridge agent.""))",1,1,0.3333333333333333,98
cb1bd1e454edcc58ee3266fc84129bf814e076e3,devices = len(self.br_mgr.get_tap_devices()),1,1,0.3333333333333333,99
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mac = utils.get_interface_mac(physical_interfaces[0]),1,1,0.3333333333333333,100
cb1bd1e454edcc58ee3266fc84129bf814e076e3,devices = ip_lib.IPWrapper().get_devices(True),1,1,0.3333333333333333,101
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mac = utils.get_interface_mac(devices[0].name),1,1,0.3333333333333333,102
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.endpoints = [LinuxBridgeRpcCallbacks(self.context, self,",1,1,0.3333333333333333,103
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"int_vlan = self.ip.add_vlan(interface, physical_interface,",0,1,0.3333333333333333,104
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"consumers = [[topics.PORT, topics.UPDATE],",1,1,0.3333333333333333,105
cb1bd1e454edcc58ee3266fc84129bf814e076e3,tap_name = self.br_mgr.get_tap_device_name(port_id),1,1,0.3333333333333333,106
cb1bd1e454edcc58ee3266fc84129bf814e076e3,port = self.br_mgr.get_tap_device_name(,1,1,0.3333333333333333,107
cb1bd1e454edcc58ee3266fc84129bf814e076e3,network_type = device_details.get('network_type'),1,1,0.3333333333333333,108
cb1bd1e454edcc58ee3266fc84129bf814e076e3,segmentation_id = device_details.get('segmentation_id'),1,1,0.3333333333333333,109
cb1bd1e454edcc58ee3266fc84129bf814e076e3,tap_in_bridge = self.br_mgr.add_interface(,1,1,0.3333333333333333,110
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# Save and reinitialize the set variable that the port_update RPC uses.,1,1,0.3333333333333333,111
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# This should be thread-safe as the greenthread should not yield,1,1,0.3333333333333333,112
cb1bd1e454edcc58ee3266fc84129bf814e076e3,updated_devices = self.updated_devices,1,1,0.3333333333333333,113
cb1bd1e454edcc58ee3266fc84129bf814e076e3,current_devices = self.br_mgr.get_tap_devices(),1,1,0.3333333333333333,114
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return_value='') as execute_fn, \",0,1,0.3333333333333333,115
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.br_mgr = LinuxBridgeManager(bridge_mappings, interface_mappings)",1,1,0.3333333333333333,116
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return interface,1,1,0.3333333333333333,117
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.get_bridge_name(network_id),0,1,0.3333333333333333,118
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations = {'interface_mappings': interface_mappings},1,1,0.3333333333333333,119
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Deleting interface %s"",",0,1,0.3333333333333333,120
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device = self.ip.device(interface),0,1,0.3333333333333333,121
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Done deleting interface %s"", interface)",0,1,0.3333333333333333,122
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Deleting vxlan interface %s for vlan"",",1,1,0.3333333333333333,123
cb1bd1e454edcc58ee3266fc84129bf814e076e3,int_vxlan = self.ip.device(interface),1,1,0.3333333333333333,124
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Done deleting vxlan interface %s"", interface)",1,1,0.3333333333333333,125
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.bridge_mappings = bridge_mappings,0,1,0.3333333333333333,126
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"for physnet, bridge in self.bridge_mappings.items():",0,1,0.3333333333333333,127
cb1bd1e454edcc58ee3266fc84129bf814e076e3,""" does not exist. Agent terminated!""),",0,1,0.3333333333333333,128
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ips, gateway = self.get_interface_details(interface)",0,1,0.3333333333333333,129
cb1bd1e454edcc58ee3266fc84129bf814e076e3,quitting_rpc_timeout = cfg.CONF.AGENT.quitting_rpc_timeout,0,1,0.3333333333333333,130
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return interface,0,1,0.3333333333333333,131
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ips, gateway = self.get_interface_details(physical_interface)",0,1,0.3333333333333333,132
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = phy_bridge_name,0,1,0.3333333333333333,133
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_bridge = self.get_existing_bridge_name(physical_network),0,1,0.3333333333333333,134
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.get_existing_bridge_name(physical_network),0,1,0.3333333333333333,135
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phy_net = self.network_map[network_id].physical_network,0,1,0.3333333333333333,136
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phynet = self.agent.br_mgr.network_map[network_id].physical_network,0,1,0.3333333333333333,137
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"configurations = {'bridge_mappings': self.bridge_mappings,",0,1,0.3333333333333333,138
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.br_mgr = LinuxBridgeManager(bridge_mappings, interface_mappings)",0,1,0.3333333333333333,139
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.br_mgr.get_existing_bridge_name(,0,1,0.3333333333333333,140
cb1bd1e454edcc58ee3266fc84129bf814e076e3,launcher = service.launch(agent),0,1,0.3333333333333333,141
cb1bd1e454edcc58ee3266fc84129bf814e076e3,rpc_api.client.timeout = timeout,0,1,0.3333333333333333,142
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_network = device_details['physical_network'],0,1,0.3333333333333333,143
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.get_devices.return_value = [ip_lib.IPDevice('eth77')],0,1,0.3333333333333333,144
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.linux_bridge = linuxbridge_neutron_agent.LinuxBridgeManager(,0,1,0.3333333333333333,145
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"interface, 'up'], run_as_root=True):",1,1,0.3333333333333333,146
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent = linuxbridge_neutron_agent.LinuxBridgeNeutronAgentRPC(,0,1,0.3333333333333333,147
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.lbm = linuxbridge_neutron_agent.LinuxBridgeManager(,0,1,0.3333333333333333,148
cb1bd1e454edcc58ee3266fc84129bf814e076e3,lbm = linuxbridge_neutron_agent.LinuxBridgeManager(,0,1,0.3333333333333333,149
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.linux_bridge = linuxbridge_neutron_agent.LinuxBridgeManager(,1,1,0.3333333333333333,150
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.lbm = linuxbridge_neutron_agent.LinuxBridgeManager(,1,1,0.3333333333333333,151
cb1bd1e454edcc58ee3266fc84129bf814e076e3,lbm = linuxbridge_neutron_agent.LinuxBridgeManager(,1,1,0.3333333333333333,152
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.get_devices_p = mock.patch.object(ip_lib.IPWrapper, 'get_devices')",0,1,0.3333333333333333,153
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.get_devices = self.get_devices_p.start(),0,1,0.3333333333333333,154
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.br_mgr = (linuxbridge_neutron_agent.,0,1,0.3333333333333333,155
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.info(_LI(""Stopping linuxbridge agent.""))",0,1,0.3333333333333333,156
cb1bd1e454edcc58ee3266fc84129bf814e076e3,LINK_SAMPLE = [,1,1,0.3333333333333333,157
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.execute_p = mock.patch.object(ip_lib.IPWrapper, '_execute')",1,1,0.3333333333333333,158
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.execute = self.execute_p.start(),1,1,0.3333333333333333,159
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.execute.return_value = '\n'.join(self.LINK_SAMPLE),1,1,0.3333333333333333,160
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.u_execute = self.u_execute_p.start(),1,1,0.3333333333333333,161
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.br_mgr = (linuxbridge_neutron_agent.,1,1,0.3333333333333333,162
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param polling_interval: interval (secs) to poll DB.,0,1,0.3333333333333333,163
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings = interface_mappings,0,1,0.3333333333333333,164
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.quitting_rpc_timeout = quitting_rpc_timeout,0,1,0.3333333333333333,165
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations = {'interface_mappings': self.interface_mappings},0,1,0.3333333333333333,166
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.br_mgr.get_bridge_name(network_id),0,1,0.3333333333333333,167
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.u_execute_p = mock.patch('neutron.agent.linux.utils.execute'),1,1,0.3333333333333333,168
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_mappings = n_utils.parse_mappings(,0,1,0.3333333333333333,169
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(linuxbridge_neutron_agent.LOG, 'error') as log:",0,1,0.3333333333333333,170
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phy_net = mock.Mock(),0,1,0.3333333333333333,171
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phy_net.physical_network = 'physnet0',0,1,0.3333333333333333,172
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.network_map = {'net1': mock.Mock(),",0,1,0.3333333333333333,173
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return 0,0,1,0.3333333333333333,174
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(self.lbm, ""delete_bridge"") as del_br_fn,\",0,1,0.3333333333333333,175
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.br_mgr = (,0,1,0.3333333333333333,176
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mock_net = mock.Mock(),0,1,0.3333333333333333,177
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mock_net.physical_network = None,0,1,0.3333333333333333,178
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.lb_rpc.agent.br_mgr.network_map = {'123': mock_net},0,1,0.3333333333333333,179
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mock_net.physical_network = 'physnet0',0,1,0.3333333333333333,180
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(linuxbridge_neutron_agent.LOG, 'info') as log,\",0,1,0.3333333333333333,181
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""delete_bridge"") as del_fn:",0,1,0.3333333333333333,182
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface_mappings = {'physnet1': 'eth1'},1,1,0.3333333333333333,183
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.br_mgr = (linuxbridge_neutron_agent.,1,1,0.3333333333333333,184
cb1bd1e454edcc58ee3266fc84129bf814e076e3,from neutron.plugins.common import utils as p_utils,0,1,0.3333333333333333,185
cb1bd1e454edcc58ee3266fc84129bf814e076e3,vlan_len = len(str(vlan_id)),0,1,0.3333333333333333,186
cb1bd1e454edcc58ee3266fc84129bf814e076e3,vlan_postfix = '.%s' % vlan_id,0,1,0.3333333333333333,187
cb1bd1e454edcc58ee3266fc84129bf814e076e3,max_len = constants.DEVICE_NAME_MAX_LEN - (4 - vlan_len),0,1,0.3333333333333333,188
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"vlan_name = p_utils.get_interface_name(physical_interface,",0,1,0.3333333333333333,189
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"vlan_device = self.get_vlan_device_name(physical_interface, vlan_id)",0,1,0.3333333333333333,190
cb1bd1e454edcc58ee3266fc84129bf814e076e3,except ValueError as e:,0,1,0.3333333333333333,191
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"vlan_device, 'up'], run_as_root=True):",0,1,0.3333333333333333,192
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"subinterface_name = '%s.%s' % (physical_interface, vlan_id)",1,1,0.3333333333333333,193
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_mappings = {},0,1,0.3333333333333333,194
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings = {'physnet1': 'eth1'},1,1,0.3333333333333333,195
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ens_fn.return_value = ""br-eth2""",0,1,0.3333333333333333,196
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings = INTERFACE_MAPPINGS,0,1,0.3333333333333333,197
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return interface,1,1,0.3333333333333333,198
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ips, gateway = self.get_interface_details(interface)",1,1,0.3333333333333333,199
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(self.lbm, 'ensure_bridge') as ens_fn:",0,1,0.3333333333333333,200
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ips, gateway = self.get_interface_details(physical_interface)",1,1,0.3333333333333333,201
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations = {'interface_mappings': self.interface_mappings},1,1,0.3333333333333333,202
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.br_mgr = LinuxBridgeManager(interface_mappings),1,1,0.3333333333333333,203
cb1bd1e454edcc58ee3266fc84129bf814e076e3,BRIDGE_MAPPINGS = {'physnet0': 'br-eth2'},0,1,0.3333333333333333,204
cb1bd1e454edcc58ee3266fc84129bf814e076e3,INTERFACE_MAPPINGS = {'physnet1': 'eth1'},0,1,0.3333333333333333,205
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface_mappings = INTERFACE_MAPPINGS,0,1,0.3333333333333333,206
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_mappings = BRIDGE_MAPPINGS,0,1,0.3333333333333333,207
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.br_mgr.get_bridge_name(network_id),1,1,0.3333333333333333,208
cb1bd1e454edcc58ee3266fc84129bf814e076e3,bridge_name = self.get_bridge_name(network_id),1,1,0.3333333333333333,209
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(self.lbm, 'ensure_vlan') as ens_vl_fn,\",0,1,0.3333333333333333,210
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phy_net = 'physnet0',0,1,0.3333333333333333,211
cb1bd1e454edcc58ee3266fc84129bf814e076e3,phy_net = '',0,1,0.3333333333333333,212
cb1bd1e454edcc58ee3266fc84129bf814e076e3,result = br_list[1:3],0,1,0.3333333333333333,213
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(self.lbm, 'ensure_bridge') as ens:",0,1,0.3333333333333333,214
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ens.return_value = ""br-eth2""",0,1,0.3333333333333333,215
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ens_vl_fn.return_value = None,0,1,0.3333333333333333,216
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(self.lbm, 'ensure_bridge') as ens:",0,1,0.3333333333333333,217
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.bridge_mappings = BRIDGE_MAPPINGS,0,1,0.3333333333333333,218
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"physical_network,",1,0,0.0,219
cb1bd1e454edcc58ee3266fc84129bf814e076e3,segmentation_id),1,0,0.0,220
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return self.add_tap_interface(network_id, network_type,",1,0,0.0,221
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"physical_network, segmentation_id,",1,0,0.0,222
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"tap_device_name, device_owner)",1,0,0.0,223
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def get_tap_devices(self):,1,0,0.0,224
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, context, agent, sg_agent):",1,0,0.0,225
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"class LinuxBridgeRpcCallbacks(sg_rpc.SecurityGroupAgentRpcCallbackMixin,",1,0,0.0,226
cb1bd1e454edcc58ee3266fc84129bf814e076e3,l2pop_rpc.L2populationRpcCallBackMixin):,1,0,0.0,227
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(LinuxBridgeRpcCallbacks, self).__init__()",1,0,0.0,228
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if network_id in self.agent.br_mgr.network_map:,1,0,0.0,229
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if phynet and phynet in self.agent.br_mgr.bridge_mappings:,1,0,0.0,230
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def add_interface(self, network_id, network_type, physical_network,",1,0,0.0,231
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# Put the tap name in the updated_devices set.,1,0,0.0,232
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent.br_mgr.delete_bridge(bridge_name),1,0,0.0,233
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"segmentation_id, port_id, device_owner):",1,0,0.0,234
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# no resync is needed,0,0,0.0,235
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# Store network mapping to segments,1,0,0.0,236
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class LinuxBridgeManager(object):,1,0,0.0,237
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"network_id, segment,",0,0,0.0,238
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.rpc_callbacks.add_network(network_id, segment)",0,0,0.0,239
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent.updated_devices.add(port_data['device']),1,0,0.0,240
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device, device_details['device_owner'])",0,0,0.0,241
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# - admin_state_down: set tap device state to down,0,0,0.0,242
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mgr.ensure_port_admin_state(,0,0,0.0,243
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device,",0,0,0.0,244
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_details['admin_state_up']),0,0,0.0,245
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if interface_plugged:,0,0,0.0,246
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mgr.delete_arp_spoofing_protection(devices),0,0,0.0,247
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mgr.delete_unreferenced_arp_protection(current_devices),0,0,0.0,248
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"constants.AGENT_TYPE_LINUXBRIDGE,",0,0,0.0,249
cb1bd1e454edcc58ee3266fc84129bf814e076e3,LB_AGENT_BINARY),0,0,0.0,250
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class NetworkSegment(object):,1,0,0.0,251
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, network_type, physical_network, segmentation_id):",1,0,0.0,252
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent.updated_devices.add(tap_name),1,0,0.0,253
cb1bd1e454edcc58ee3266fc84129bf814e076e3,},1,0,0.0,254
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if agent_ip == self.agent.br_mgr.local_ip:,1,0,0.0,255
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.br_mgr.add_fdb_entries(agent_ip,",1,0,0.0,256
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'interface_mappings': self.interface_mappings,",1,0,0.0,257
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'extensions': self.ext_manager.names(),1,0,0.0,258
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if self.br_mgr.vxlan_mode != lconst.VXLAN_NONE:,1,0,0.0,259
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'binary': 'neutron-linuxbridge-agent',",1,0,0.0,260
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'agent_type': constants.AGENT_TYPE_LINUXBRIDGE,",1,0,0.0,261
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(LinuxBridgeNeutronAgentRPC, self).stop(graceful)",1,0,0.0,262
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def setup_rpc(self, physical_interfaces):",1,0,0.0,263
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if physical_interfaces:,1,0,0.0,264
cb1bd1e454edcc58ee3266fc84129bf814e076e3,else:,1,0,0.0,265
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if devices:,1,0,0.0,266
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Unable to obtain MAC address for unique ID. """,1,0,0.0,267
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""Agent terminated!""))",1,0,0.0,268
cb1bd1e454edcc58ee3266fc84129bf814e076e3,sys.exit(1),1,0,0.0,269
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_details.get('segmentation_id'),0,0,0.0,270
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.sg_agent)],1,0,0.0,271
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'bridge_mappings': self.bridge_mappings,",1,0,0.0,272
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_rpc(self.interface_mappings.values()),1,0,0.0,273
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# processing by the main loop,1,0,0.0,274
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, bridge_mappings, interface_mappings, polling_interval,",1,0,0.0,275
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ports,",1,0,0.0,276
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface),1,0,0.0,277
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.br_mgr.remove_fdb_entries(agent_ip,",1,0,0.0,278
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.br_mgr.add_fdb_ip_entry(mac, ip, interface)",1,0,0.0,279
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.br_mgr.remove_fdb_ip_entry(mac, ip, interface)",1,0,0.0,280
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class LinuxBridgeNeutronAgentRPC(service.Service):,1,0,0.0,281
cb1bd1e454edcc58ee3266fc84129bf814e076e3,quitting_rpc_timeout):,1,0,0.0,282
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# stores received port_updates and port_deletes for,1,0,0.0,283
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param bridge_mappings: dict mapping physical_networks to,1,0,0.0,284
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_bridges.,1,0,0.0,285
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param interface_mappings: dict mapping physical_networks to,1,0,0.0,286
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_interfaces.,1,0,0.0,287
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(LinuxBridgeNeutronAgentRPC, self).__init__()",1,0,0.0,288
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.setup_linux_bridge(self.bridge_mappings, self.interface_mappings)",1,0,0.0,289
cb1bd1e454edcc58ee3266fc84129bf814e076e3,),0,0,0.0,290
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def get_extension_driver_type(self):,0,0,0.0,291
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device_details['physical_network'],",0,0,0.0,292
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if agent_ip == self.agent.mgr.local_ip:,0,0,0.0,293
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"arp_protect.setup_arp_spoofing_protection(device, device_details)",0,0,0.0,294
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_arp_spoofing_protection(self, devices):",0,0,0.0,295
cb1bd1e454edcc58ee3266fc84129bf814e076e3,arp_protect.delete_arp_spoofing_protection(devices),0,0,0.0,296
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_unreferenced_arp_protection(self, current_devices):",0,0,0.0,297
cb1bd1e454edcc58ee3266fc84129bf814e076e3,arp_protect.delete_unreferenced_arp_protection(current_devices),0,0,0.0,298
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return lconst.EXTENSION_DRIVER_TYPE,0,0,0.0,299
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class LinuxBridgeRpcCallbacks(,0,0,0.0,300
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"sg_rpc.SecurityGroupAgentRpcCallbackMixin,",0,0,0.0,301
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"l2pop_rpc.L2populationRpcCallBackMixin,",0,0,0.0,302
cb1bd1e454edcc58ee3266fc84129bf814e076e3,amb.CommonAgentManagerRpcCallBackBase):,0,0,0.0,303
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if network_id in self.network_map:,0,0,0.0,304
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if phynet and phynet in self.agent.mgr.bridge_mappings:,0,0,0.0,305
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent.mgr.delete_bridge(bridge_name),0,0,0.0,306
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# Put the device name in the updated_devices set.,0,0,0.0,307
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.updated_devices.add(device_name),0,0,0.0,308
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def setup_arp_spoofing_protection(self, device, device_details):",0,0,0.0,309
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ip_lib.IPDevice(tap_name).link.set_down(),0,0,0.0,310
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ip_lib.IPDevice(tap_name).link.set_up(),0,0,0.0,311
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"[topics.NETWORK, topics.UPDATE],",0,0,0.0,312
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"[topics.NETWORK, topics.UPDATE],",1,0,0.0,313
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return configurations,0,0,0.0,314
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def get_rpc_callbacks(self, context, agent, sg_agent):",0,0,0.0,315
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return LinuxBridgeRpcCallbacks(context, agent, sg_agent)",0,0,0.0,316
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def get_rpc_consumers(self):,0,0,0.0,317
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"[topics.NETWORK, topics.DELETE],",0,0,0.0,318
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"[topics.SECURITY_GROUP, topics.UPDATE]]",0,0,0.0,319
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if admin_state_up:,0,0,0.0,320
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if cfg.CONF.VXLAN.l2_population:,0,0,0.0,321
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"consumers.append([topics.L2POPULATION, topics.UPDATE])",0,0,0.0,322
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return consumers,0,0,0.0,323
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_port_admin_state(self, tap_name, admin_state_up):",0,0,0.0,324
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Setting admin_state_up to %s for device %s"",",0,0,0.0,325
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"admin_state_up, tap_name)",0,0,0.0,326
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.updated_devices.add(port_data['device']),0,0,0.0,327
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.mgr.add_fdb_entries(agent_ip,",0,0,0.0,328
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device_details.get('network_type'),",0,0,0.0,329
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ports,",0,0,0.0,330
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'binary': self.agent_binary,",0,0,0.0,331
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'agent_type': self.agent_type,",0,0,0.0,332
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.info(_LI(""Stopping %s agent.""), self.agent_type)",0,0,0.0,333
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(CommonAgentLoop, self).stop(graceful)",0,0,0.0,334
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def _validate_rpc_endpoints(self):,0,0,0.0,335
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if not isinstance(self.endpoints[0],",0,0,0.0,336
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""RPC Callback class must inherit from """,0,0,0.0,337
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""CommonAgentManagerRpcCallBackBase to ensure """,0,0,0.0,338
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""CommonAgent works properly.""))",0,0,0.0,339
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def setup_rpc(self):,0,0,0.0,340
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.sg_agent),0,0,0.0,341
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self._validate_rpc_endpoints(),0,0,0.0,342
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"connection, self.mgr.get_extension_driver_type())",0,0,0.0,343
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.mgr.setup_arp_spoofing_protection(device,",0,0,0.0,344
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_details),0,0,0.0,345
cb1bd1e454edcc58ee3266fc84129bf814e076e3,configurations.update(self.mgr.get_agent_configurations()),0,0,0.0,346
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_rpc(),0,0,0.0,347
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""works properly.""))",0,0,0.0,348
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"quitting_rpc_timeout, agent_type, agent_binary):",0,0,0.0,349
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface),0,0,0.0,350
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.mgr.remove_fdb_entries(agent_ip,",0,0,0.0,351
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.mgr.add_fdb_ip_entry(mac, ip, interface)",0,0,0.0,352
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.agent.mgr.remove_fdb_ip_entry(mac, ip, interface)",0,0,0.0,353
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class CommonAgentLoop(service.Service):,0,0,0.0,354
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, manager, polling_interval,",0,0,0.0,355
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param manager: the manager object containing the impl specifics,0,0,0.0,356
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""CommonAgentManagerBase to ensure CommonAgent """,0,0,0.0,357
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(CommonAgentLoop, self).__init__()",0,0,0.0,358
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self._validate_manager_class(),0,0,0.0,359
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def _validate_manager_class(self):,0,0,0.0,360
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if not isinstance(self.mgr,",0,0,0.0,361
cb1bd1e454edcc58ee3266fc84129bf814e076e3,amb.CommonAgentManagerBase):,0,0,0.0,362
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Manager class must inherit from """,0,0,0.0,363
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"[topics.NETWORK, topics.DELETE],",1,0,0.0,364
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'ensure_vxlan',",1,0,0.0,365
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"[topics.SECURITY_GROUP, topics.UPDATE]]",1,0,0.0,366
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface, 'show').start()",0,0,0.0,367
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_show.assert_called_once_with(dev='vxlan-1'),0,0,0.0,368
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_add.assert_called_once_with(,0,0,0.0,369
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"constants.FLOODING_ENTRY[0], 'vxlan-1', dst_ip='agent_ip')",0,0,0.0,370
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_replace.assert_called_once_with(,0,0,0.0,371
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'port_mac', 'vxlan-1', dst_ip='agent_ip')",0,0,0.0,372
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(ip_lib, 'delete_neigh_entry',",0,0,0.0,373
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"dst_ip='agent_ip'),",0,0,0.0,374
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call('port_mac', 'vxlan-1', dst_ip='agent_ip')]",0,0,0.0,375
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.mock_delete.assert_has_calls(calls),0,0,0.0,376
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self, expected, l2_population, iproute_arg_supported, fdb_append):",1,0,0.0,377
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(self.lbm,",1,0,0.0,378
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'delete_interface',",1,0,0.0,379
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return_value=None),\",1,0,0.0,380
cb1bd1e454edcc58ee3266fc84129bf814e076e3,},0,0,0.0,381
cb1bd1e454edcc58ee3266fc84129bf814e076e3,mock.patch.object(,1,0,0.0,382
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(ip_lib, 'add_neigh_entry',",0,0,0.0,383
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface, 'delete').start()",0,0,0.0,384
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if cfg.CONF.VXLAN.l2_population:,1,0,0.0,385
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface, 'replace').start()",0,0,0.0,386
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(self.lbm, 'delete_interface'),\",0,0,0.0,387
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(self.lbm, 'ensure_vxlan',",0,0,0.0,388
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return_value=None), \",0,0,0.0,389
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(bridge_lib.FdbInterface, 'append',",0,0,0.0,390
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value=fdb_append):,0,0,0.0,391
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"expected=False, l2_population=False, fdb_append=mock.ANY)",0,0,0.0,392
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"expected=False, l2_population=True, fdb_append=False)",0,0,0.0,393
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"expected=True, l2_population=True, fdb_append=True)",0,0,0.0,394
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def _check_vxlan_mcast_supported(self, expected, vxlan_group):",0,0,0.0,395
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(expected, self.lbm.vxlan_mcast_supported())",0,0,0.0,396
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self._check_vxlan_mcast_supported(expected=False, vxlan_group='')",0,0,0.0,397
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self._check_vxlan_mcast_supported(expected=True,",0,0,0.0,398
cb1bd1e454edcc58ee3266fc84129bf814e076e3,vxlan_group='224.0.0.1'),0,0,0.0,399
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface, 'add').start()",0,0,0.0,400
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface, 'append').start()",0,0,0.0,401
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ip_lib.IpNetnsCommand,",1,0,0.0,402
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'execute',",1,0,0.0,403
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"side_effect=None if fdb_append else RuntimeError()),\",1,0,0.0,404
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(ip_lib,",1,0,0.0,405
cb1bd1e454edcc58ee3266fc84129bf814e076e3,iproute_arg_supported=False),1,0,0.0,406
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(ip_lib.IpNetnsCommand, 'execute',",1,0,0.0,407
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(ip_lib, 'add_neigh_entry',",1,0,0.0,408
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['bridge', 'fdb', 'show', 'dev', 'vxlan-1'],",1,0,0.0,409
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"run_as_root=True),",1,0,0.0,410
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['bridge', 'fdb', 'add',",1,0,0.0,411
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"constants.FLOODING_ENTRY[0],",1,0,0.0,412
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'dev', 'vxlan-1', 'dst', 'agent_ip'],",1,0,0.0,413
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"check_exit_code=False),",1,0,0.0,414
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['bridge', 'fdb', 'replace', 'port_mac', 'dev',",1,0,0.0,415
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'vxlan-1', 'dst', 'agent_ip'],",1,0,0.0,416
cb1bd1e454edcc58ee3266fc84129bf814e076e3,],1,0,0.0,417
cb1bd1e454edcc58ee3266fc84129bf814e076e3,execute_fn.assert_has_calls(expected),1,0,0.0,418
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(ip_lib, 'delete_neigh_entry',",1,0,0.0,419
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['bridge', 'fdb', 'delete',",1,0,0.0,420
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"vxlan_group='224.0.0.1',",1,0,0.0,421
cb1bd1e454edcc58ee3266fc84129bf814e076e3,iproute_arg_supported=True),1,0,0.0,422
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"vxlan_group='',",1,0,0.0,423
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self._check_vxlan_ucast_supported(,1,0,0.0,424
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'iproute_arg_supported',",1,0,0.0,425
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return_value=iproute_arg_supported):,1,0,0.0,426
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"expected=False,",1,0,0.0,427
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"l2_population=False, iproute_arg_supported=True, fdb_append=True)",1,0,0.0,428
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"l2_population=True, iproute_arg_supported=False, fdb_append=True)",1,0,0.0,429
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"l2_population=True, iproute_arg_supported=True, fdb_append=False)",1,0,0.0,430
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"expected=True,",1,0,0.0,431
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self._check_vxlan_mcast_supported(,1,0,0.0,432
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"l2_population=True, iproute_arg_supported=True, fdb_append=True)",1,0,0.0,433
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def _check_vxlan_mcast_supported(,1,0,0.0,434
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self, expected, vxlan_group, iproute_arg_supported):",1,0,0.0,435
cb1bd1e454edcc58ee3266fc84129bf814e076e3,with mock.patch.object(,1,0,0.0,436
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ip_lib, 'iproute_arg_supported',",1,0,0.0,437
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(expected, self.lbm.vxlan_mcast_supported())",1,0,0.0,438
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self, expected, l2_population, fdb_append):",0,0,0.0,439
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.delete(mac, interface, agent_ip,",1,0,0.0,440
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.add(mac, interface, agent_ip,",1,0,0.0,441
cb1bd1e454edcc58ee3266fc84129bf814e076e3,int_vlan.link.set_up(),0,0,0.0,442
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_details['admin_state_up']),1,0,0.0,443
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if tap_in_bridge:,1,0,0.0,444
cb1bd1e454edcc58ee3266fc84129bf814e076e3,arp_protect.delete_arp_spoofing_protection(devices),1,0,0.0,445
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# between these two statements.,1,0,0.0,446
cb1bd1e454edcc58ee3266fc84129bf814e076e3,arp_protect.delete_unreferenced_arp_protection(current_devices),1,0,0.0,447
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"interface_mappings,",1,0,0.0,448
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"polling_interval,",1,0,0.0,449
cb1bd1e454edcc58ee3266fc84129bf814e076e3,quitting_rpc_timeout),1,0,0.0,450
cb1bd1e454edcc58ee3266fc84129bf814e076e3,try:,0,0,0.0,451
cb1bd1e454edcc58ee3266fc84129bf814e076e3,vlan_id),0,0,0.0,452
cb1bd1e454edcc58ee3266fc84129bf814e076e3,except RuntimeError:,0,0,0.0,453
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if ip_lib.vlan_in_use(vlan_id):,0,0,0.0,454
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""VLAN ID %s because it is in use by """,0,0,0.0,455
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""another interface.""), vlan_id)",0,0,0.0,456
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return,0,0,0.0,457
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self._ensure_port_admin_state(device_details['port_id'],",1,0,0.0,458
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# - admin_state_down: set tap device stae to down,1,0,0.0,459
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device_details['port_id'], device_details['device_owner'])",1,0,0.0,460
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if admin_state_up:,1,0,0.0,461
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"consumers.append([topics.L2POPULATION, topics.UPDATE])",1,0,0.0,462
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"connection, lconst.EXTENSION_DRIVER_TYPE)",1,0,0.0,463
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def setup_linux_bridge(self, bridge_mappings, interface_mappings):",1,0,0.0,464
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def _ensure_port_admin_state(self, port_id, admin_state_up):",1,0,0.0,465
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Setting admin_state_up to %s for port %s"",",1,0,0.0,466
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"admin_state_up, port_id)",1,0,0.0,467
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ip_lib.IPDevice(tap_name).link.set_up(),1,0,0.0,468
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device_details['physical_network'], segmentation_id,",1,0,0.0,469
cb1bd1e454edcc58ee3266fc84129bf814e076e3,ip_lib.IPDevice(tap_name).link.set_down(),1,0,0.0,470
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_details['port_id']),1,0,0.0,471
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"arp_protect.setup_arp_spoofing_protection(port,",1,0,0.0,472
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_details),1,0,0.0,473
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# create the networking for the port,1,0,0.0,474
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"device_details['network_id'], network_type,",1,0,0.0,475
cb1bd1e454edcc58ee3266fc84129bf814e076e3,int_vlan.disable_ipv6(),0,0,0.0,476
cb1bd1e454edcc58ee3266fc84129bf814e076e3,int_vxlan.disable_ipv6(),0,0,0.0,477
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.append(mac, interface, agent_ip,",1,0,0.0,478
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if utils.execute(['ip', 'link', 'add', 'link',",1,0,0.0,479
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{'option': 'append',",1,0,0.0,480
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'command': 'bridge fdb',",1,0,0.0,481
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'mode': 'VXLAN UCAST'}),1,0,0.0,482
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return False,1,0,0.0,483
cb1bd1e454edcc58ee3266fc84129bf814e076e3,try:,1,0,0.0,484
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.append(constants.FLOODING_ENTRY[0],",1,0,0.0,485
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"test_iface, '1.1.1.1',",1,0,0.0,486
cb1bd1e454edcc58ee3266fc84129bf814e076e3,log_fail_as_error=False),1,0,0.0,487
cb1bd1e454edcc58ee3266fc84129bf814e076e3,except RuntimeError:,1,0,0.0,488
cb1bd1e454edcc58ee3266fc84129bf814e076e3,finally:,1,0,0.0,489
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_interface(test_iface),1,0,0.0,490
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return mac in entries,1,0,0.0,491
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return (agent_ip in entries and mac in entries),1,0,0.0,492
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.replace(mac, interface, agent_ip,",1,0,0.0,493
cb1bd1e454edcc58ee3266fc84129bf814e076e3,check_exit_code=False),1,0,0.0,494
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'""%(command)s"" to enable %(mode)s mode',",1,0,0.0,495
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.warning('Option ""%(option)s"" must be supported by command '",1,0,0.0,496
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"['bridge', 'fdb'], 'append'):",1,0,0.0,497
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return ret,0,0,0.0,498
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"physical_interface,",1,0,0.0,499
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'name', interface, 'type', 'vlan', 'id',",1,0,0.0,500
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return,1,0,0.0,501
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if utils.execute(['ip', 'link', 'set',",1,0,0.0,502
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"test_iface, '1.1.1.1')",0,0,0.0,503
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_interface(test_iface),0,0,0.0,504
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return mac in macs,0,0,0.0,505
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not ip_lib.iproute_arg_supported(,1,0,0.0,506
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return agent_ip in ips and mac in macs,0,0,0.0,507
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.replace(mac, interface,",0,0,0.0,508
cb1bd1e454edcc58ee3266fc84129bf814e076e3,dst_ip=agent_ip),0,0,0.0,509
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.append(mac, interface,",0,0,0.0,510
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.add(mac, interface,",0,0,0.0,511
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_lib.FdbInterface.delete(mac, interface, dst_ip=agent_ip)",0,0,0.0,512
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if self.vxlan_mode != lconst.VXLAN_NONE:,0,0,0.0,513
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_ensure_vlan_bridge_with_existed_brq(self):,0,0,0.0,514
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'interface_mappings': self.interface_mappings,0,0,0.0,515
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not ip_lib.device_exists(bridge):,0,0,0.0,516
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{'brq': bridge, 'net': physnet})",0,0,0.0,517
cb1bd1e454edcc58ee3266fc84129bf814e076e3,sys.exit(1),0,0,0.0,518
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def get_existing_bridge_name(self, physical_network):",0,0,0.0,519
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not physical_network:,0,0,0.0,520
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return None,0,0,0.0,521
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return self.bridge_mappings.get(physical_network),0,0,0.0,522
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# NOTE(nick-ma-z): Add pre-existing user-defined bridges,0,0,0.0,523
cb1bd1e454edcc58ee3266fc84129bf814e076e3,for bridge_name in self.bridge_mappings.values():,0,0,0.0,524
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if bridge_name not in neutron_bridge_list:,0,0,0.0,525
cb1bd1e454edcc58ee3266fc84129bf814e076e3,neutron_bridge_list.append(bridge_name),0,0,0.0,526
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_vlan_bridge(self, network_id, phy_bridge_name,",0,0,0.0,527
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"physical_interface, vlan_id):",0,0,0.0,528
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if phy_bridge_name:,0,0,0.0,529
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return self.ensure_bridge(phy_bridge_name),0,0,0.0,530
cb1bd1e454edcc58ee3266fc84129bf814e076e3,else:,0,0,0.0,531
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Bridge %(brq)s for physical network %(net)s""",0,0,0.0,532
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def validate_bridge_mappings(self):,0,0,0.0,533
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def get_agent_configurations(self):,0,0,0.0,534
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.validate_bridge_mappings(),0,0,0.0,535
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_vlan_bridge(bridge_name),1,0,0.0,536
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_vlan(self, interface):",1,0,0.0,537
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Deleting subinterface %s for vlan"", interface)",1,0,0.0,538
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if utils.execute(['ip', 'link', 'set', interface, 'down'],",1,0,0.0,539
cb1bd1e454edcc58ee3266fc84129bf814e076e3,run_as_root=True):,1,0,0.0,540
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return,1,0,0.0,541
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if utils.execute(['ip', 'link', 'delete', interface],",1,0,0.0,542
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Done deleting subinterface %s"", interface)",1,0,0.0,543
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_vxlan(self, interface):",1,0,0.0,544
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if ip_lib.device_exists(interface):,1,0,0.0,545
cb1bd1e454edcc58ee3266fc84129bf814e076e3,int_vxlan.link.set_down(),1,0,0.0,546
cb1bd1e454edcc58ee3266fc84129bf814e076e3,int_vxlan.link.delete(),1,0,0.0,547
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_vxlan(test_iface),1,0,0.0,548
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent.br_mgr.delete_vlan_bridge(bridge_name),1,0,0.0,549
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, bridge_mappings, interface_mappings):",0,0,0.0,550
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if self.ensure_bridge(bridge_name, interface, ips, gateway):",0,0,0.0,551
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_flat_bridge(self, network_id, phy_bridge_name,",0,0,0.0,552
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_interface):,0,0,0.0,553
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if self.ensure_bridge(bridge_name, physical_interface, ips,",0,0,0.0,554
cb1bd1e454edcc58ee3266fc84129bf814e076e3,network_id),0,0,0.0,555
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return,0,0,0.0,556
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Network %s is not available.""), network_id)",0,0,0.0,557
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, bridge_mappings, interface_mappings, polling_interval,",0,0,0.0,558
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param bridge_mappings: dict mapping physical_networks to,0,0,0.0,559
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_bridges.,0,0,0.0,560
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.setup_linux_bridge(self.bridge_mappings, self.interface_mappings)",0,0,0.0,561
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'interface_mappings': self.interface_mappings},0,0,0.0,562
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def setup_linux_bridge(self, bridge_mappings, interface_mappings):",0,0,0.0,563
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def remove_port_binding(self, network_id, physical_network, interface_id):",0,0,0.0,564
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_network),0,0,0.0,565
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"physical_network,",0,0,0.0,566
cb1bd1e454edcc58ee3266fc84129bf814e076e3,try:,0,0,0.0,567
cb1bd1e454edcc58ee3266fc84129bf814e076e3,cfg.CONF.LINUX_BRIDGE.bridge_mappings),0,0,0.0,568
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Parsing bridge_mappings failed: %s. """,0,0,0.0,569
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""bridge_mappings and cannot be deleted.""),",0,0,0.0,570
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.info(_LI(""Physical network %s is defined in """,0,0,0.0,571
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if phynet and phynet in self.agent.br_mgr.bridge_mappings:,0,0,0.0,572
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_interface),0,0,0.0,573
cb1bd1e454edcc58ee3266fc84129bf814e076e3,gateway):,0,0,0.0,574
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return physical_interface,0,0,0.0,575
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_local_bridge(self, network_id, phy_bridge_name):",0,0,0.0,576
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not physical_bridge and not physical_interface:,0,0,0.0,577
cb1bd1e454edcc58ee3266fc84129bf814e076e3,""" for physical network %s""),",0,0,0.0,578
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return self.ensure_flat_bridge(network_id, physical_bridge,",0,0,0.0,579
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return self.ensure_vlan_bridge(network_id, physical_bridge,",0,0,0.0,580
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if network_id in self.agent.br_mgr.network_map:,0,0,0.0,581
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"physical_interface,",0,0,0.0,582
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if physical_network:,0,0,0.0,583
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.ensure_local_bridge(network_id, bridge_name)",0,0,0.0,584
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# NOTE(nick-ma-z): Don't remove pre-existing user-defined bridges,0,0,0.0,585
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if phy_net and phy_net in self.bridge_mappings:,0,0,0.0,586
cb1bd1e454edcc58ee3266fc84129bf814e076e3,continue,0,0,0.0,587
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_vlan(interface),1,0,0.0,588
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_vxlan(interface),1,0,0.0,589
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_vlan_bridge(self, bridge_name):",1,0,0.0,590
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def stop(self, graceful=True):",0,0,0.0,591
cb1bd1e454edcc58ee3266fc84129bf814e076e3,LinuxBridgeManager({'physnet1': 'eth1'})),1,0,0.0,592
cb1bd1e454edcc58ee3266fc84129bf814e076e3,from neutron.openstack.common import service,0,0,0.0,593
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class LinuxBridgeNeutronAgentRPC(service.Service):,0,0,0.0,594
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, interface_mappings, polling_interval,",0,0,0.0,595
cb1bd1e454edcc58ee3266fc84129bf814e076e3,quitting_rpc_timeout):,0,0,0.0,596
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""""""Constructor.",0,0,0.0,597
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param interface_mappings: dict mapping physical_networks to,0,0,0.0,598
cb1bd1e454edcc58ee3266fc84129bf814e076e3,physical_interfaces.,0,0,0.0,599
cb1bd1e454edcc58ee3266fc84129bf814e076e3,:param quitting_rpc_timeout: timeout in seconds for rpc calls after,0,0,0.0,600
cb1bd1e454edcc58ee3266fc84129bf814e076e3,stop is called.,0,0,0.0,601
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""""""",0,0,0.0,602
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(LinuxBridgeNeutronAgentRPC, self).__init__()",0,0,0.0,603
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def start(self):,0,0,0.0,604
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_linux_bridge(self.interface_mappings),0,0,0.0,605
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_rpc(self.interface_mappings.values()),0,0,0.0,606
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'cc:dd:ee:ff:ab:cd brd ff:ff:ff:ff:ff:ff'],1,0,0.0,607
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'qdisc mq state UP qlen 1000\    link/ether \\',1,0,0.0,608
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'2: eth77: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 \\'",1,0,0.0,609
cb1bd1e454edcc58ee3266fc84129bf814e076e3,0),1,0,0.0,610
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(linuxbridge_neutron_agent.LinuxBridgeManager,",0,0,0.0,611
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'get_interface_by_ip', return_value=None):",0,0,0.0,612
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface_mappings),0,0,0.0,613
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{}, 0)",0,0,0.0,614
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings),0,0,0.0,615
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface_mappings),1,0,0.0,616
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings),1,0,0.0,617
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00',",1,0,0.0,618
cb1bd1e454edcc58ee3266fc84129bf814e076e3,with mock.patch.object(,0,0,0.0,619
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"linuxbridge_neutron_agent.LinuxBridgeManager,",0,0,0.0,620
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'get_interface_by_ip', return_value=None):",0,0,0.0,621
cb1bd1e454edcc58ee3266fc84129bf814e076e3,LinuxBridgeManager({'physnet1': 'eth1'})),0,0,0.0,622
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue \\'",1,0,0.0,623
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'state UNKNOWN \\',1,0,0.0,624
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.daemon_loop(),0,0,0.0,625
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if graceful and self.quitting_rpc_timeout:,0,0,0.0,626
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.agent.br_mgr.delete_bridge(bridge_name),0,0,0.0,627
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.set_rpc_timeout(self.quitting_rpc_timeout),0,0,0.0,628
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_info.get('updated')),0,0,0.0,629
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if (self._device_info_has_changes(device_info),0,0,0.0,630
cb1bd1e454edcc58ee3266fc84129bf814e076e3,or self.sg_agent.firewall_refresh_needed()):,0,0,0.0,631
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.sg_plugin_rpc),1,0,0.0,632
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.sg_agent.prepare_devices_filter(device_info.get('added')),1,0,0.0,633
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if device_info.get('updated'):,1,0,0.0,634
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.sg_agent.refresh_firewall(),1,0,0.0,635
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if self._device_info_has_changes(device_info):,1,0,0.0,636
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_bridge(self, bridge_name):",0,0,0.0,637
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_interface(interface),0,0,0.0,638
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_bridge(bridge_name),0,0,0.0,639
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def delete_interface(self, interface):",0,0,0.0,640
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device.link.set_down(),0,0,0.0,641
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device.link.delete(),0,0,0.0,642
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.delete_interface(test_iface),0,0,0.0,643
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.sg_agent.setup_port_filters(device_info.get('added'),",0,0,0.0,644
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.sg_plugin_rpc, defer_refresh_firewall=True)",0,0,0.0,645
cb1bd1e454edcc58ee3266fc84129bf814e076e3,sys.exit(0),1,0,0.0,646
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"polling_interval,",0,0,0.0,647
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(LinuxBridgeNeutronAgentRPC, self).stop(graceful)",0,0,0.0,648
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def reset(self):,0,0,0.0,649
cb1bd1e454edcc58ee3266fc84129bf814e076e3,common_config.setup_logging(),0,0,0.0,650
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def set_rpc_timeout(self, timeout):",0,0,0.0,651
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"for rpc_api in (self.plugin_rpc, self.sg_plugin_rpc,",0,0,0.0,652
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.state_rpc):,0,0,0.0,653
cb1bd1e454edcc58ee3266fc84129bf814e076e3,quitting_rpc_timeout),0,0,0.0,654
cb1bd1e454edcc58ee3266fc84129bf814e076e3,agent.daemon_loop(),1,0,0.0,655
cb1bd1e454edcc58ee3266fc84129bf814e076e3,launcher.wait(),0,0,0.0,656
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class LinuxBridgeNeutronAgentRPC(object):,1,0,0.0,657
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, interface_mappings, polling_interval):",1,0,0.0,658
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_linux_bridge(interface_mappings),1,0,0.0,659
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_rpc(interface_mappings.values()),1,0,0.0,660
cb1bd1e454edcc58ee3266fc84129bf814e076e3,polling_interval),1,0,0.0,661
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""Agent terminated!""), e)",0,0,0.0,662
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.info(_LI(""Bridge mappings: %s""), bridge_mappings)",0,0,0.0,663
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"interface_mappings,",0,0,0.0,664
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'dev', interface],",1,0,0.0,665
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Done creating subinterface %s"", vlan_device)",0,0,0.0,666
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return vlan_device,0,0,0.0,667
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def get_subinterface_name(self, physical_interface, vlan_id):",1,0,0.0,668
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.warning(_LW(""Invalid VLAN ID, will lead to incorrect """,1,0,0.0,669
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""subinterface name""))",1,0,0.0,670
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return subinterface_name,1,0,0.0,671
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not ip_lib.device_exists(interface):,1,0,0.0,672
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{'interface': interface, 'vlan_id': vlan_id,",1,0,0.0,673
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'name', interface, 'type', 'vlan', 'id',",1,0,0.0,674
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.debug(""Done creating subinterface %s"", interface)",1,0,0.0,675
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ip_lib.IPDevice(interface).neigh.add(ip, mac)",0,0,0.0,676
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ip_lib.IPDevice(interface).neigh.delete(ip, mac)",0,0,0.0,677
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"utils.execute(['ip', 'neigh', 'replace', ip, 'lladdr', mac,",1,0,0.0,678
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'dev', interface, 'nud', 'permanent'],",1,0,0.0,679
cb1bd1e454edcc58ee3266fc84129bf814e076e3,check_exit_code=False),1,0,0.0,680
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'name', vlan_device, 'type', 'vlan', 'id',",0,0,0.0,681
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{'interface': vlan_device, 'vlan_id': vlan_id,",0,0,0.0,682
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not ip_lib.device_exists(vlan_device):,0,0,0.0,683
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# use the same naming pattern despite the hashing algorithm that is,0,0,0.0,684
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def get_vlan_device_name(self, physical_interface, vlan_id):",0,0,0.0,685
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"raise ValueError(""No VLAN ID specified!"")",0,0,0.0,686
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if vlan_len > 4:,0,0,0.0,687
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"raise ValueError(""Invalid VLAN ID! ID exceeds 4 digits!"")",0,0,0.0,688
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# Handling for too long physical_interface names:,0,0,0.0,689
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# Ensure that vlan devices that belong to the same logical network,0,0,0.0,690
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# used in such cases. E.g.,0,0,0.0,691
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return vlan_name,0,0,0.0,692
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"# Interface name: ""very_long_name"" should NOT result in",0,0,0.0,693
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"# ""veryHASHED.1111"" and ""very_loHASHED.1"" but rather in",0,0,0.0,694
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"# ""veryHASHED.1111"" and ""veryHASHED.1"". This can be accomplished with",0,0,0.0,695
cb1bd1e454edcc58ee3266fc84129bf814e076e3,# requesting a smaller device name length for small vlan ids.,0,0,0.0,696
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"postfix=vlan_postfix,",0,0,0.0,697
cb1bd1e454edcc58ee3266fc84129bf814e076e3,max_len=max_len),0,0,0.0,698
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"utils.execute(['ip', 'neigh', 'del', ip, 'lladdr', mac,",1,0,0.0,699
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(ip_lib.IpNeighCommand, 'add',",0,0,0.0,700
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"en_fn.assert_called_with(""123"")",1,0,0.0,701
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"add_fn.assert_called_with('port_ip', 'port_mac')",0,0,0.0,702
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def plug_interface(self, network_id, network_segment, tap_name,",0,0,0.0,703
cb1bd1e454edcc58ee3266fc84129bf814e076e3,device_owner):,0,0,0.0,704
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return self.add_tap_interface(network_id, network_segment.network_type,",0,0,0.0,705
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"network_segment.physical_network,",0,0,0.0,706
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"network_segment.segmentation_id,",0,0,0.0,707
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"tap_name, device_owner)",0,0,0.0,708
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def get_all_devices(self):,0,0,0.0,709
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def get_agent_id(self):,0,0,0.0,710
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if self.bridge_mappings:,0,0,0.0,711
cb1bd1e454edcc58ee3266fc84129bf814e076e3,else:,0,0,0.0,712
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if devices:,0,0,0.0,713
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""Unable to obtain MAC address for unique ID. """,0,0,0.0,714
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""Agent terminated!""))",0,0,0.0,715
cb1bd1e454edcc58ee3266fc84129bf814e076e3,sys.exit(1),0,0,0.0,716
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return 'lb%s' % mac.replace("":"", """")",0,0,0.0,717
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"super(LinuxBridgeManager, self).__init__()",0,0,0.0,718
cb1bd1e454edcc58ee3266fc84129bf814e076e3,class LinuxBridgeManager(amb.CommonAgentManagerBase):,0,0,0.0,719
cb1bd1e454edcc58ee3266fc84129bf814e076e3,execute_fn.assert_has_calls(expected),1,0,0.0,720
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'port_mac', 'dev', 'vxlan-1', 'nud', 'permanent'],",1,0,0.0,721
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(ip_lib.IpNeighCommand, 'delete',",0,0,0.0,722
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"del_fn.assert_called_with('port_ip', 'port_mac')",0,0,0.0,723
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(ip_lib.IpNeighCommand, 'add',",0,0,0.0,724
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"del_fn.assert_called_with('port_ip_1', 'port_mac')",0,0,0.0,725
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"add_fn.assert_called_with('port_ip_2', 'port_mac')",0,0,0.0,726
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['ip', 'neigh', 'replace', 'port_ip', 'lladdr',",1,0,0.0,727
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"check_exit_code=False),",1,0,0.0,728
cb1bd1e454edcc58ee3266fc84129bf814e076e3,],1,0,0.0,729
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['ip', 'neigh', 'del', 'port_ip', 'lladdr',",1,0,0.0,730
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'port_mac', 'dev', 'vxlan-1'],",1,0,0.0,731
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"with mock.patch.object(utils, 'execute',",1,0,0.0,732
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['ip', 'neigh', 'replace', 'port_ip_2', 'lladdr',",1,0,0.0,733
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['ip', 'neigh', 'del', 'port_ip_1', 'lladdr',",1,0,0.0,734
cb1bd1e454edcc58ee3266fc84129bf814e076e3,check_exit_code=False),1,0,0.0,735
cb1bd1e454edcc58ee3266fc84129bf814e076e3,LinuxBridgeManager({'physnet1': 'eth1'})),1,0,0.0,736
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_local_bridge(""54321"")",1,0,0.0,737
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, interface_mappings):",1,0,0.0,738
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(self.lbm.ensure_vlan_bridge(""123"",",0,0,0.0,739
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'physnet1',",0,0,0.0,740
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'port123'),0,0,0.0,741
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.bridge_mappings, self.interface_mappings)",0,0,0.0,742
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_get_existing_bridge_name(self):,0,0,0.0,743
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual('br-eth2',",0,0,0.0,744
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.lbm.get_existing_bridge_name(phy_net)),0,0,0.0,745
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(None,",0,0,0.0,746
cb1bd1e454edcc58ee3266fc84129bf814e076e3,result.append('br-eth2'),0,0,0.0,747
cb1bd1e454edcc58ee3266fc84129bf814e076e3,result),0,0,0.0,748
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_flat_bridge(""123"", None, ""eth0""),",0,0,0.0,749
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_ensure_flat_bridge_with_existed_brq(self):,0,0,0.0,750
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(""br-eth2"",",0,0,0.0,751
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_flat_bridge(""123"",",0,0,0.0,752
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""br-eth2"",",0,0,0.0,753
cb1bd1e454edcc58ee3266fc84129bf814e076e3,None)),0,0,0.0,754
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent.remove_port_binding.assert_called_with('net123',",0,0,0.0,755
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{}, {}, 0, cfg.CONF.AGENT.quitting_rpc_timeout)",0,0,0.0,756
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"bridge_mappings, interface_mappings)",0,0,0.0,757
cb1bd1e454edcc58ee3266fc84129bf814e076e3,if not physical_interface:,1,0,0.0,758
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_vlan_bridge(self, network_id, physical_interface, vlan_id):",1,0,0.0,759
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if self.ensure_bridge(bridge_name, interface, ips, gateway):",1,0,0.0,760
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_flat_bridge(self, network_id, physical_interface):",1,0,0.0,761
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"if self.ensure_bridge(bridge_name, physical_interface, ips, gateway):",1,0,0.0,762
cb1bd1e454edcc58ee3266fc84129bf814e076e3,return physical_interface,1,0,0.0,763
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def ensure_local_bridge(self, network_id):",1,0,0.0,764
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"LOG.error(_LE(""No mapping for physical network %s""),",1,0,0.0,765
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def remove_port_binding(self, network_id, interface_id):",1,0,0.0,766
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return self.ensure_flat_bridge(network_id, physical_interface)",1,0,0.0,767
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"return self.ensure_vlan_bridge(network_id, physical_interface,",1,0,0.0,768
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.ensure_local_bridge(network_id),1,0,0.0,769
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def __init__(self, interface_mappings, polling_interval,",1,0,0.0,770
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.setup_linux_bridge(self.interface_mappings),1,0,0.0,771
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"def setup_linux_bridge(self, interface_mappings):",1,0,0.0,772
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ens.assert_called_with(""br-eth2"")",0,0,0.0,773
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"None,",0,0,0.0,774
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(self.lbm.ensure_vlan_bridge(""123"", ""eth0"", ""1""),",1,0,0.0,775
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""eth0"",",0,0,0.0,776
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.lbm.remove_empty_bridges(),0,0,0.0,777
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(2, del_br_fn.call_count)",0,0,0.0,778
cb1bd1e454edcc58ee3266fc84129bf814e076e3,linuxbridge_neutron_agent.LinuxBridgeManager(,0,0,0.0,779
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"BRIDGE_MAPPINGS,",0,0,0.0,780
cb1bd1e454edcc58ee3266fc84129bf814e076e3,INTERFACE_MAPPINGS)),0,0,0.0,781
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_network_delete_with_existed_brq(self):,0,0,0.0,782
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(self.lb_rpc.agent.br_mgr,",0,0,0.0,783
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lb_rpc.network_delete(""anycontext"", network_id=""123"")",0,0,0.0,784
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(0, del_fn.call_count)",0,0,0.0,785
cb1bd1e454edcc58ee3266fc84129bf814e076e3,interface_mappings),1,0,0.0,786
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"{}, 0, cfg.CONF.AGENT.quitting_rpc_timeout)",1,0,0.0,787
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"agent.remove_port_binding.assert_called_with('net123', 'port123')",1,0,0.0,788
cb1bd1e454edcc58ee3266fc84129bf814e076e3,self.interface_mappings),1,0,0.0,789
cb1bd1e454edcc58ee3266fc84129bf814e076e3,br_list[1:3]),1,0,0.0,790
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_flat_bridge(""123"", ""eth0""),",1,0,0.0,791
cb1bd1e454edcc58ee3266fc84129bf814e076e3,side_effect=tap_count_side_effect):,0,0,0.0,792
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""get_tap_devices_count"",",0,0,0.0,793
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.patch.object(self.lbm,",0,0,0.0,794
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_ensure_physical_in_bridge_with_existed_brq(self):,0,0,0.0,795
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""1""),",0,0,0.0,796
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_vlan_bridge(""123"",",0,0,0.0,797
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_local_bridge(""54321"", None)",0,0,0.0,798
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_ensure_local_bridge_with_existed_brq(self):,0,0,0.0,799
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_local_bridge(""54321"", 'br-eth2')",0,0,0.0,800
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"ens_fn.assert_called_once_with(""br-eth2"")",0,0,0.0,801
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.lbm.ensure_physical_in_bridge(""123"", p_const.TYPE_FLAT,",0,0,0.0,802
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def tap_count_side_effect(*args):,0,0,0.0,803
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"""physnet9"", ""1"")",0,0,0.0,804
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"self.assertEqual(1, log.call_count)",0,0,0.0,805
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"en_fn.assert_called_with(""123"", None)",0,0,0.0,806
cb1bd1e454edcc58ee3266fc84129bf814e076e3,def test_remove_empty_bridges_with_existed_brq(self):,0,0,0.0,807
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"'net2': mock.Mock(),",0,0,0.0,808
cb1bd1e454edcc58ee3266fc84129bf814e076e3,'net3': phy_net},0,0,0.0,809
cb1bd1e454edcc58ee3266fc84129bf814e076e3,"mock.call(['bridge', 'fdb', 'delete', 'port_mac',",1,0,0.0,810
