commit_id,line,line_level_label,count,line_score,row
f952992f035ec130b7608e9851ef9c3becc2047a,2.1. Create a dummy vmdk of the size of the disk file that is to be,0,9,1.0,1
f952992f035ec130b7608e9851ef9c3becc2047a,# Get the recommended card type for the VM based on the guest OS of the VM,1,9,1.0,2
f952992f035ec130b7608e9851ef9c3becc2047a,2. Create a dummy vmdk of the size of the disk file that is to be,1,9,1.0,3
f952992f035ec130b7608e9851ef9c3becc2047a,# Naming the VM files in correspondence with the VM instance,0,8,0.8888888888888888,4
f952992f035ec130b7608e9851ef9c3becc2047a,# We are ignoring the chunk size passed for we want the pipe to hold,1,8,0.8888888888888888,5
f952992f035ec130b7608e9851ef9c3becc2047a,# Naming the VM files in correspondence with the VM instance name,1,8,0.8888888888888888,6
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Downloaded image file data %(image_ref)s to the ESX """,1,7,0.7777777777777777,7
f952992f035ec130b7608e9851ef9c3becc2047a,# This class is a *fake* of a class sent back to us by,0,7,0.7777777777777777,8
f952992f035ec130b7608e9851ef9c3becc2047a,# Login and setup the session with the ESX host for making,1,7,0.7777777777777777,9
f952992f035ec130b7608e9851ef9c3becc2047a,# it when the data disk it refers to still lingers.,0,7,0.7777777777777777,10
f952992f035ec130b7608e9851ef9c3becc2047a,# We fake the datastore by keeping the file references as a list of,0,6,0.6666666666666666,11
f952992f035ec130b7608e9851ef9c3becc2047a,""" KB on the ESX host local store """,1,6,0.6666666666666666,12
f952992f035ec130b7608e9851ef9c3becc2047a,"# in a real ManagedObject, the propSet is a *set* not a list",0,6,0.6666666666666666,13
f952992f035ec130b7608e9851ef9c3becc2047a,# data objects of the type in the inventory,0,6,0.6666666666666666,14
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Return a Deferred that will give the result of the given task.",1,6,0.6666666666666666,15
f952992f035ec130b7608e9851ef9c3becc2047a,# We fake the datastore by keeping the file references as a list of,1,6,0.6666666666666666,16
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Fakes the file size and properties fetch for the image file.""""""",1,6,0.6666666666666666,17
f952992f035ec130b7608e9851ef9c3becc2047a,# Determine if we need to get the details of the root disk,0,6,0.6666666666666666,18
f952992f035ec130b7608e9851ef9c3becc2047a,"Transfers the disk of a running instance in multiple phases, turning",0,6,0.6666666666666666,19
f952992f035ec130b7608e9851ef9c3becc2047a,5. Attach the disk to the VM by reconfiguring the same.,1,6,0.6666666666666666,20
f952992f035ec130b7608e9851ef9c3becc2047a,# Login and setup the session with the host for making,0,6,0.6666666666666666,21
f952992f035ec130b7608e9851ef9c3becc2047a,# better approximation would use the percentage of the VM image that,0,6,0.6666666666666666,22
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_host_password:  Password for connection to VMware ESX Server.,1,6,0.6666666666666666,23
f952992f035ec130b7608e9851ef9c3becc2047a,"# depend on the size of the disk, thin/thick provisioning and the",0,6,0.6666666666666666,24
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_host_username:   Username for connection to VMware ESX Server.,0,6,0.6666666666666666,25
f952992f035ec130b7608e9851ef9c3becc2047a,"Transfers the disk of a running instance in multiple phases, turning",0,6,0.6666666666666666,26
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_host_username:  Username for connection to VMware ESX Server.,1,6,0.6666666666666666,27
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_host_password:   Password for connection to VMware ESX Server.,0,6,0.6666666666666666,28
f952992f035ec130b7608e9851ef9c3becc2047a,3.1. Upload the disk file to a -sparse.vmdk file.,0,6,0.6666666666666666,29
f952992f035ec130b7608e9851ef9c3becc2047a,4. Attach the disk to the VM by reconfiguring the same.,0,6,0.6666666666666666,30
f952992f035ec130b7608e9851ef9c3becc2047a,"# Set the vnc configuration of the instance, vnc port starts from 5900",0,6,0.6666666666666666,31
f952992f035ec130b7608e9851ef9c3becc2047a,"""the ESX host local store %(data_store_name)s"") %",0,6,0.6666666666666666,32
f952992f035ec130b7608e9851ef9c3becc2047a,# Method to update summary of a cluster upon host addition,0,5,0.5555555555555556,33
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting contents of the VM from """,1,5,0.5555555555555556,34
f952992f035ec130b7608e9851ef9c3becc2047a,# dataobjects of the type in the inventory,1,5,0.5555555555555556,35
f952992f035ec130b7608e9851ef9c3becc2047a,Sets up a session with the ESX host and handles all,1,5,0.5555555555555556,36
f952992f035ec130b7608e9851ef9c3becc2047a,"# The data file is the one occupying space, and likelier to see",0,5,0.5555555555555556,37
f952992f035ec130b7608e9851ef9c3becc2047a,disk to adapter with the given adapter_type.,0,5,0.5555555555555556,38
f952992f035ec130b7608e9851ef9c3becc2047a,"# The controller Key pertains to the Key of the LSI Logic Controller, which",1,5,0.5555555555555556,39
f952992f035ec130b7608e9851ef9c3becc2047a,# Case of Reconfig of VM to set extra params,1,5,0.5555555555555556,40
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Deleting contents of the VM from """,0,5,0.5555555555555556,41
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Deleted contents of the VM from """,0,5,0.5555555555555556,42
f952992f035ec130b7608e9851ef9c3becc2047a,# data items of the chunk-size that Glance Client uses for read,1,5,0.5555555555555556,43
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted contents of the VM from """,1,5,0.5555555555555556,44
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Migrating VM to host %s"") % dest, instance=instance_ref)",1,5,0.5555555555555556,45
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Migrated VM to host %s"") % dest, instance=instance_ref)",1,5,0.5555555555555556,46
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get size of the file to be read.""""""",1,5,0.5555555555555556,47
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Returns information for the primary VMDK attached to the given VM.""""""",0,5,0.5555555555555556,48
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Returns information for the primary VMDK attached to the given VM.""""""",1,5,0.5555555555555556,49
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Sets up a session with the VC/ESX host and handles all",1,5,0.5555555555555556,50
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Check if the module is a VIM Object instance.""""""",1,5,0.5555555555555556,51
f952992f035ec130b7608e9851ef9c3becc2047a,# A managed object is a local representation of a,0,5,0.5555555555555556,52
f952992f035ec130b7608e9851ef9c3becc2047a,# in a real ManagedObject you have to iterate the propSet,0,5,0.5555555555555556,53
f952992f035ec130b7608e9851ef9c3becc2047a,# A managed object is a local representation of a,1,5,0.5555555555555556,54
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get reference to the VM with the name specified.""""""",1,5,0.5555555555555556,55
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Cloned VM to host %s"") % dest, instance=instance)",0,5,0.5555555555555556,56
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfigured VM instance to attach the image disk""),",1,5,0.5555555555555556,57
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(adapter_type)s on the ESX host local store """,0,5,0.5555555555555556,58
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Downloaded image file data %(image_ref)s to """,0,5,0.5555555555555556,59
f952992f035ec130b7608e9851ef9c3becc2047a,# The sparse vmdk file name for sparse disk image,0,5,0.5555555555555556,60
f952992f035ec130b7608e9851ef9c3becc2047a,# Copy the sparse virtual disk to a thin virtual disk.,0,5,0.5555555555555556,61
f952992f035ec130b7608e9851ef9c3becc2047a,# Attach the root disk to the VM.,0,5,0.5555555555555556,62
f952992f035ec130b7608e9851ef9c3becc2047a,# the clone disk step begins to dominate the equation. A,0,5,0.5555555555555556,63
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Renaming the VM to %s"") % name_label,",0,5,0.5555555555555556,64
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Renamed the VM to %s"") % name_label,",0,5,0.5555555555555556,65
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Cloning VM to host %s"") % dest, instance=instance)",0,5,0.5555555555555556,66
f952992f035ec130b7608e9851ef9c3becc2047a,# Copy a sparse virtual disk to a thin virtual disk. This is also,0,5,0.5555555555555556,67
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Renaming the VM from %s"") % name_label,",0,5,0.5555555555555556,68
f952992f035ec130b7608e9851ef9c3becc2047a,# There is only one default datacenter in a standalone ESX host,0,5,0.5555555555555556,69
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Renamed the VM from %s"") % name_label,",0,5,0.5555555555555556,70
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfiguring VM instance to attach the image disk""),",1,5,0.5555555555555556,71
f952992f035ec130b7608e9851ef9c3becc2047a,# There is only one default datacenter in a standalone ESX host,1,5,0.5555555555555556,72
f952992f035ec130b7608e9851ef9c3becc2047a,# Upload the -flat.vmdk file whose meta-data file we just created,1,5,0.5555555555555556,73
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get reference to the host with the name specified.""""""",0,5,0.5555555555555556,74
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Migrated VM to host %s"") % dest, instance=instance_ref)",0,5,0.5555555555555556,75
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Migrating VM to host %s"") % dest, instance=instance_ref)",0,5,0.5555555555555556,76
f952992f035ec130b7608e9851ef9c3becc2047a,port    : port for connection,0,4,0.4444444444444444,77
f952992f035ec130b7608e9851ef9c3becc2047a,"help='Port for connection to VMware ESX/VC host.'),",0,4,0.4444444444444444,78
f952992f035ec130b7608e9851ef9c3becc2047a,# Impose the config changes specified in the config property,0,4,0.4444444444444444,79
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Creates and registers a VM object with the Host System.""""""",0,4,0.4444444444444444,80
f952992f035ec130b7608e9851ef9c3becc2047a,extraConf = [x for x in existing if x.key == c.key][0],0,4,0.4444444444444444,81
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Lists the VM instances that are registered with vCenter cluster.""""""",0,4,0.4444444444444444,82
f952992f035ec130b7608e9851ef9c3becc2047a,"# For IDE devices, there are these two default controllers created in the",1,4,0.4444444444444444,83
f952992f035ec130b7608e9851ef9c3becc2047a,# create new controller with the specified type and return its spec,0,4,0.4444444444444444,84
f952992f035ec130b7608e9851ef9c3becc2047a,# Logout to avoid un-necessary increase in session count at the,1,4,0.4444444444444444,85
f952992f035ec130b7608e9851ef9c3becc2047a,"# response, then we are sure of the response being supposed",1,4,0.4444444444444444,86
f952992f035ec130b7608e9851ef9c3becc2047a,"# and after creating a new session, we get the same empty",1,4,0.4444444444444444,87
f952992f035ec130b7608e9851ef9c3becc2047a,# It is just cautionary on our part to do a logout in del just,1,4,0.4444444444444444,88
f952992f035ec130b7608e9851ef9c3becc2047a,"""ESX host local store %(data_store_name)s"") %",1,4,0.4444444444444444,89
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted the file %(vmdk_path)s on the """,1,4,0.4444444444444444,90
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting the datastore file %s"") % datastore_path,",0,4,0.4444444444444444,91
f952992f035ec130b7608e9851ef9c3becc2047a,"return lambda *args, **kwargs: self._delete_disk(attr_name,",1,4,0.4444444444444444,92
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Reconfigured VM instance %(instance_name)s to attach """,0,4,0.4444444444444444,93
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Reconfiguring VM instance %(instance_name)s to attach """,0,4,0.4444444444444444,94
f952992f035ec130b7608e9851ef9c3becc2047a,The chunk size is ignored for the Client ImageBodyIterator,1,4,0.4444444444444444,95
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Reconfiguring VM instance to set the machine id"",",0,4,0.4444444444444444,96
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the next item from the image iterator.""""""",1,4,0.4444444444444444,97
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Creates a session with the ESX host.""""""",1,4,0.4444444444444444,98
f952992f035ec130b7608e9851ef9c3becc2047a,"return self.invoke_api(module, method, *args, **kwargs)",1,4,0.4444444444444444,99
f952992f035ec130b7608e9851ef9c3becc2047a,"return self.invoke_api(module, method, self.vim, *args, **kwargs)",1,4,0.4444444444444444,100
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Calls a method within the module specified with",1,4,0.4444444444444444,101
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Read a chunk of data.""""""",1,4,0.4444444444444444,102
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Check if the end of file has been reached.""""""",1,4,0.4444444444444444,103
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Set the end of file marker.""""""",1,4,0.4444444444444444,104
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfigured VM instance to enable vnc on """,1,4,0.4444444444444444,105
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Reconfigured VM instance to set the machine id"",",0,4,0.4444444444444444,106
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfiguring VM instance to enable vnc on """,1,4,0.4444444444444444,107
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfigured VM instance to set the machine id""),",1,4,0.4444444444444444,108
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfiguring VM instance to set the machine id""),",1,4,0.4444444444444444,109
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfigured VM instance %(instance_name)s to attach """,1,4,0.4444444444444444,110
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfiguring VM instance %(instance_name)s to attach """,1,4,0.4444444444444444,111
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Reconfigured VM instance to enable vnc on """,0,4,0.4444444444444444,112
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Reconfiguring VM instance to enable vnc on """,0,4,0.4444444444444444,113
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Gets the specified properties of the Managed Object.""""""",0,4,0.4444444444444444,114
f952992f035ec130b7608e9851ef9c3becc2047a,# of the vCenter object the value,0,4,0.4444444444444444,115
f952992f035ec130b7608e9851ef9c3becc2047a,Sets up a session with the VC/ESX host and handles all,0,4,0.4444444444444444,116
f952992f035ec130b7608e9851ef9c3becc2047a,# 2. Rename the original VM with suffix '-orig',0,4,0.4444444444444444,117
f952992f035ec130b7608e9851ef9c3becc2047a,# Attach vmdk to the rescue VM,0,4,0.4444444444444444,118
f952992f035ec130b7608e9851ef9c3becc2047a,""" while destroying the VM: %s"") % str(excep),",0,4,0.4444444444444444,119
f952992f035ec130b7608e9851ef9c3becc2047a,# Attach the vmdk uploaded to the VM.,0,4,0.4444444444444444,120
f952992f035ec130b7608e9851ef9c3becc2047a,# Create a flat virtual disk and retain the metadata file.,0,4,0.4444444444444444,121
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Copying Virtual Disk of size """,0,4,0.4444444444444444,122
f952992f035ec130b7608e9851ef9c3becc2047a,# done to generate the meta-data file whose specifics,0,4,0.4444444444444444,123
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Copy a sparse virtual disk to a thin virtual disk.""""""",0,4,0.4444444444444444,124
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(upload_vmdk_name)s on the ESX data store """,0,4,0.4444444444444444,125
f952992f035ec130b7608e9851ef9c3becc2047a,"# For sparse disk, upload the -sparse.vmdk file to be copied into",0,4,0.4444444444444444,126
f952992f035ec130b7608e9851ef9c3becc2047a,"# For flat disk, upload the -flat.vmdk file whose meta-data file",0,4,0.4444444444444444,127
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted the file %(vmdk_path)s on the """,0,4,0.4444444444444444,128
f952992f035ec130b7608e9851ef9c3becc2047a,3.2. Copy/Clone the -sparse.vmdk file to a thin vmdk.,0,4,0.4444444444444444,129
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_host_ip:        IPAddress of VMware ESX server.,1,4,0.4444444444444444,130
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_host_ip:         IP address of VMware ESX server.,0,4,0.4444444444444444,131
f952992f035ec130b7608e9851ef9c3becc2047a,'Due to a bug in vSphere ESX 4.1 default wsdl. ',1,4,0.4444444444444444,132
f952992f035ec130b7608e9851ef9c3becc2047a,'Due to a bug in vSphere ESX 4.1 default wsdl. ',0,4,0.4444444444444444,133
f952992f035ec130b7608e9851ef9c3becc2047a,# asked for. We need .obj along with the propSet of,1,4,0.4444444444444444,134
f952992f035ec130b7608e9851ef9c3becc2047a,"# For a first cut this should be fine, however, for large VM images,",0,4,0.4444444444444444,135
f952992f035ec130b7608e9851ef9c3becc2047a,2.2. Delete the -flat.vmdk file created in the above step and retain,0,4,0.4444444444444444,136
f952992f035ec130b7608e9851ef9c3becc2047a,# 3. Clone VM on ESX host,0,4,0.4444444444444444,137
f952992f035ec130b7608e9851ef9c3becc2047a,# Delete the -flat.vmdk file created. .vmdk file is retained.,1,4,0.4444444444444444,138
f952992f035ec130b7608e9851ef9c3becc2047a,# Create a temp Managed object which has the same ref,1,4,0.4444444444444444,139
f952992f035ec130b7608e9851ef9c3becc2047a,# The original vm was suffixed with '-orig'; find it using,0,4,0.4444444444444444,140
f952992f035ec130b7608e9851ef9c3becc2047a,# TODO(hartsocks): this is adds unnecessary complexity to the class,0,4,0.4444444444444444,141
f952992f035ec130b7608e9851ef9c3becc2047a,# for us by the API we are *faking* here.,0,4,0.4444444444444444,142
f952992f035ec130b7608e9851ef9c3becc2047a,# attributes hold the name of the type,0,4,0.4444444444444444,143
f952992f035ec130b7608e9851ef9c3becc2047a,Attach the vmdk uploaded to the VM. VM reconfigure is done,1,4,0.4444444444444444,144
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted the file %(flat_uploaded_vmdk_path)s on the """,1,4,0.4444444444444444,145
f952992f035ec130b7608e9851ef9c3becc2047a,# need to use since this is the name that the,0,4,0.4444444444444444,146
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(adapter_type)s on the ESX host local store""",1,4,0.4444444444444444,147
f952992f035ec130b7608e9851ef9c3becc2047a,3. Delete the -flat.vmdk file created in the above step and retain,1,4,0.4444444444444444,148
f952992f035ec130b7608e9851ef9c3becc2047a,"# the old suffix, remove the suffix, then power it back on.",0,4,0.4444444444444444,149
f952992f035ec130b7608e9851ef9c3becc2047a,# Wait till the state changes from queued or running.,0,4,0.4444444444444444,150
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfigured VM instance to enable vnc on """,0,4,0.4444444444444444,151
f952992f035ec130b7608e9851ef9c3becc2047a,for prop in elem.propSet:,1,4,0.4444444444444444,152
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Reconfiguring VM instance to enable vnc on """,0,4,0.4444444444444444,153
f952992f035ec130b7608e9851ef9c3becc2047a,host    : ESX IPAddress[:port] or ESX Hostname[:port],1,3,0.3333333333333333,154
f952992f035ec130b7608e9851ef9c3becc2047a,"elif prop.name == ""runtime.connectionState"":",1,3,0.3333333333333333,155
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Imposes the changes in extraConfig over the existing extraConfig.""""""",0,3,0.3333333333333333,156
f952992f035ec130b7608e9851ef9c3becc2047a,if len([x for x in existing if x.key == c.key]) > 0:,0,3,0.3333333333333333,157
f952992f035ec130b7608e9851ef9c3becc2047a,"task_mdo = create_task(method, ""success"")",0,3,0.3333333333333333,158
f952992f035ec130b7608e9851ef9c3becc2047a,:param port: port for connection,0,3,0.3333333333333333,159
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Exception during HTTP connection close in """,0,3,0.3333333333333333,160
f952992f035ec130b7608e9851ef9c3becc2047a,"""the ESX host"") % pg_name)",1,3,0.3333333333333333,161
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Exception during HTTP connection close in """,1,3,0.3333333333333333,162
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Copying VHD image %(base_vhd_path)s to target: """,0,3,0.3333333333333333,163
f952992f035ec130b7608e9851ef9c3becc2047a,"""one process or thread that tries to delete the file. """,0,3,0.3333333333333333,164
f952992f035ec130b7608e9851ef9c3becc2047a,for vm in vms.objects:,1,3,0.3333333333333333,165
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Copying root disk of size %sGb"", root_gb)",0,3,0.3333333333333333,166
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Creating Snapshot of the VM instance"", instance=instance)",0,3,0.3333333333333333,167
f952992f035ec130b7608e9851ef9c3becc2047a,for prop in vm.propSet:,1,3,0.3333333333333333,168
f952992f035ec130b7608e9851ef9c3becc2047a,"return device.__class__.__name__ in ['VirtualLsiLogicController',",0,3,0.3333333333333333,169
f952992f035ec130b7608e9851ef9c3becc2047a,"elif prop.name == ""runtime.connectionState"":",0,3,0.3333333333333333,170
f952992f035ec130b7608e9851ef9c3becc2047a,for prop in vm.propSet:,0,3,0.3333333333333333,171
f952992f035ec130b7608e9851ef9c3becc2047a,for vm in retrieve_result.objects:,0,3,0.3333333333333333,172
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Wraps the given array into a DataObject.""""""",0,3,0.3333333333333333,173
f952992f035ec130b7608e9851ef9c3becc2047a,scsi_keys = [dev.key for dev in devices if _is_scsi_controller(dev)],0,3,0.3333333333333333,174
f952992f035ec130b7608e9851ef9c3becc2047a,ide_keys = [dev.key for dev in devices if _is_ide_controller(dev)],0,3,0.3333333333333333,175
f952992f035ec130b7608e9851ef9c3becc2047a,return device.__class__.__name__ == 'VirtualIDEController',0,3,0.3333333333333333,176
f952992f035ec130b7608e9851ef9c3becc2047a,# For exceptions with connections we create the session,0,3,0.3333333333333333,177
f952992f035ec130b7608e9851ef9c3becc2047a,# way to differentiate. We thus check if the session is,0,3,0.3333333333333333,178
f952992f035ec130b7608e9851ef9c3becc2047a,# to ensure that the session is not left active.,1,3,0.3333333333333333,179
f952992f035ec130b7608e9851ef9c3becc2047a,"# May not have been able to connect to VC, so vim is still None",1,3,0.3333333333333333,180
f952992f035ec130b7608e9851ef9c3becc2047a,# ESX host,1,3,0.3333333333333333,181
f952992f035ec130b7608e9851ef9c3becc2047a,# names in the db,1,3,0.3333333333333333,182
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Deleting Snapshot of the VM instance"", instance=instance)",0,3,0.3333333333333333,183
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Created Snapshot of the VM instance"", instance=instance)",0,3,0.3333333333333333,184
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Exception during HTTP connection close in """,1,3,0.3333333333333333,185
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Deleted Snapshot of the VM instance"", instance=instance)",0,3,0.3333333333333333,186
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Close the file handle.""""""",1,3,0.3333333333333333,187
f952992f035ec130b7608e9851ef9c3becc2047a,"""on the ESX host local""",1,3,0.3333333333333333,188
f952992f035ec130b7608e9851ef9c3becc2047a,"for vm in get_objects(""VirtualMachine""):",0,3,0.3333333333333333,189
f952992f035ec130b7608e9851ef9c3becc2047a,"for i, host in enumerate(get_object_refs(""HostSystem"")):",0,3,0.3333333333333333,190
f952992f035ec130b7608e9851ef9c3becc2047a,"# We can't just dump the managed-object, because it may be circular",0,3,0.3333333333333333,191
f952992f035ec130b7608e9851ef9c3becc2047a,"def _call_method(self, module, method, *args, **kwargs):",1,3,0.3333333333333333,192
f952992f035ec130b7608e9851ef9c3becc2047a,the calls made to the host.,1,3,0.3333333333333333,193
f952992f035ec130b7608e9851ef9c3becc2047a,"elif device.__class__.__name__ == ""ParaVirtualSCSIController"":",1,3,0.3333333333333333,194
f952992f035ec130b7608e9851ef9c3becc2047a,"elif device.__class__.__name__ == ""VirtualLsiLogicSASController"":",1,3,0.3333333333333333,195
f952992f035ec130b7608e9851ef9c3becc2047a,"elif device.__class__.__name__ == ""VirtualIDEController"":",1,3,0.3333333333333333,196
f952992f035ec130b7608e9851ef9c3becc2047a,"elif device.__class__.__name__ == ""VirtualBusLogicController"":",1,3,0.3333333333333333,197
f952992f035ec130b7608e9851ef9c3becc2047a,"elif device.__class__.__name__ == ""VirtualLsiLogicController"":",1,3,0.3333333333333333,198
f952992f035ec130b7608e9851ef9c3becc2047a,elif device.__class__.__name__ in CONTROLLER_TO_ADAPTER_TYPE:,0,3,0.3333333333333333,199
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Write data to the file.""""""",1,3,0.3333333333333333,200
f952992f035ec130b7608e9851ef9c3becc2047a,for data in self.glance_read_iter:,1,3,0.3333333333333333,201
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Migrating VM to host %s"", dest, instance=instance_ref)",0,3,0.3333333333333333,202
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Read an item from the queue.",1,3,0.3333333333333333,203
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Waiting for instance state to become running'),",1,3,0.3333333333333333,204
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Uploaded image %s"") % image_id,",1,3,0.3333333333333333,205
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Uploading image %s"") % image_id,",1,3,0.3333333333333333,206
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted Snapshot of the VM instance""), instance=instance)",1,3,0.3333333333333333,207
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting Snapshot of the VM instance""), instance=instance)",1,3,0.3333333333333333,208
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Created Snapshot of the VM instance""), instance=instance)",1,3,0.3333333333333333,209
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Creating Snapshot of the VM instance""), instance=instance)",1,3,0.3333333333333333,210
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Copying root disk of size %sGb""), root_gb)",1,3,0.3333333333333333,211
f952992f035ec130b7608e9851ef9c3becc2047a,"""one process or thread that tries to delete the file. """,1,3,0.3333333333333333,212
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Copying VHD image %(base_vhd_path)s to target: """,1,3,0.3333333333333333,213
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Waiting for instance state to become running',",0,3,0.3333333333333333,214
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Migrated VM to host %s"", dest, instance=instance_ref)",0,3,0.3333333333333333,215
f952992f035ec130b7608e9851ef9c3becc2047a,# names in the db,0,3,0.3333333333333333,216
f952992f035ec130b7608e9851ef9c3becc2047a,# Update summary every time a new host is added,0,3,0.3333333333333333,217
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting the file %(vmdk_path)s """,1,3,0.3333333333333333,218
f952992f035ec130b7608e9851ef9c3becc2047a,"msg = _(""Couldn't get a local Datastore reference"")",1,3,0.3333333333333333,219
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the datastore list and choose the first local storage.""""""",1,3,0.3333333333333333,220
f952992f035ec130b7608e9851ef9c3becc2047a,4. Upload the disk file.,1,3,0.3333333333333333,221
f952992f035ec130b7608e9851ef9c3becc2047a,# Check if the file exists or not.,0,3,0.3333333333333333,222
f952992f035ec130b7608e9851ef9c3becc2047a,"# If an error state is returned, it means that the path doesn't exist.",0,3,0.3333333333333333,223
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Check if the path and file exists on the datastore.""""""",0,3,0.3333333333333333,224
f952992f035ec130b7608e9851ef9c3becc2047a,# Get the resource pool. Taking the first resource pool coming our,0,3,0.3333333333333333,225
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the Vm folder ref from the datacenter.""""""",0,3,0.3333333333333333,226
f952992f035ec130b7608e9851ef9c3becc2047a,for host in host_objs:,0,3,0.3333333333333333,227
f952992f035ec130b7608e9851ef9c3becc2047a,Set the vnc configuration of the VM.,0,3,0.3333333333333333,228
f952992f035ec130b7608e9851ef9c3becc2047a,port = CONF.vnc_port + vm_id % CONF.vnc_port_total,0,3,0.3333333333333333,229
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Return connection info for a vnc console.""""""",0,3,0.3333333333333333,230
f952992f035ec130b7608e9851ef9c3becc2047a,for instance in instances:,0,3,0.3333333333333333,231
f952992f035ec130b7608e9851ef9c3becc2047a,"""exception while destroying the VM: %s"") % str(excep))",0,3,0.3333333333333333,232
f952992f035ec130b7608e9851ef9c3becc2047a,# Get the clone vm spec,0,3,0.3333333333333333,233
f952992f035ec130b7608e9851ef9c3becc2047a,# 1. Power off the instance,0,3,0.3333333333333333,234
f952992f035ec130b7608e9851ef9c3becc2047a,# 0. Zero out the progress to begin,0,3,0.3333333333333333,235
f952992f035ec130b7608e9851ef9c3becc2047a,off the instance before the end.,0,3,0.3333333333333333,236
f952992f035ec130b7608e9851ef9c3becc2047a,# has been streamed to the destination host.,0,3,0.3333333333333333,237
f952992f035ec130b7608e9851ef9c3becc2047a,"# Divide the action's workflow into discrete steps and ""bump"" the",0,3,0.3333333333333333,238
f952992f035ec130b7608e9851ef9c3becc2047a,- spawn a rescue VM (the vm name-label will be instance-N-rescue).,0,3,0.3333333333333333,239
f952992f035ec130b7608e9851ef9c3becc2047a,"1. Power off the VM, if it is in poweredOn state.",0,3,0.3333333333333333,240
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Copied Virtual Disk of size %(vmdk_file_size_in_kb)s""",0,3,0.3333333333333333,241
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(data_store_name)s to disk type %(disk_type)s"") %",0,3,0.3333333333333333,242
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting the file %(vmdk_path)s """,0,3,0.3333333333333333,243
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Created VM on the ESX host""), instance=instance)",0,3,0.3333333333333333,244
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Creating VM on the ESX host""), instance=instance)",0,3,0.3333333333333333,245
f952992f035ec130b7608e9851ef9c3becc2047a,2.3. Upload the disk file.,0,3,0.3333333333333333,246
f952992f035ec130b7608e9851ef9c3becc2047a,off the instance before the end.,0,3,0.3333333333333333,247
f952992f035ec130b7608e9851ef9c3becc2047a,# is retained too by design since it makes little sense to remove,0,3,0.3333333333333333,248
f952992f035ec130b7608e9851ef9c3becc2047a,"elif prop.name == ""summary.name"":",1,3,0.3333333333333333,249
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Live migration of an instance to another host.""""""",0,3,0.3333333333333333,250
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the Vm folder ref from the datacenter.""""""",1,3,0.3333333333333333,251
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Wraps the given array into a DataObject.""""""",0,3,0.3333333333333333,252
f952992f035ec130b7608e9851ef9c3becc2047a,# Get the resource pool. Taking the first resource pool coming our,1,3,0.3333333333333333,253
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the About Info from the service content.""""""",0,3,0.3333333333333333,254
f952992f035ec130b7608e9851ef9c3becc2047a,for prop in dynamic_properties:,0,3,0.3333333333333333,255
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Return the adapter type to be used in vmdk descriptor.",0,3,0.3333333333333333,256
f952992f035ec130b7608e9851ef9c3becc2047a,"# May not have been able to connect to VC, so vim is still None",0,3,0.3333333333333333,257
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.critical(_(""Unable to connect to server at %(server)s, """,0,3,0.3333333333333333,258
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Creates a session with the VC/ESX host.""""""",0,3,0.3333333333333333,259
f952992f035ec130b7608e9851ef9c3becc2047a,for prop in properties:,1,3,0.3333333333333333,260
f952992f035ec130b7608e9851ef9c3becc2047a,# just the properties asked for,1,3,0.3333333333333333,261
f952992f035ec130b7608e9851ef9c3becc2047a,# as the parent object and copies just the properties,1,3,0.3333333333333333,262
f952992f035ec130b7608e9851ef9c3becc2047a,# Managed Object Reference _type,1,3,0.3333333333333333,263
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Generates a new Managed Object ID.""""""",0,3,0.3333333333333333,264
f952992f035ec130b7608e9851ef9c3becc2047a,# Managed Object Reference type,0,3,0.3333333333333333,265
f952992f035ec130b7608e9851ef9c3becc2047a,"elif attr_name == ""DeleteVirtualDisk_Task"":",1,3,0.3333333333333333,266
f952992f035ec130b7608e9851ef9c3becc2047a,"wsdl_url = '%s://%s/sdk/vimService.wsdl' % (protocol, host_name)",1,3,0.3333333333333333,267
f952992f035ec130b7608e9851ef9c3becc2047a,for vm in vms:,1,3,0.3333333333333333,268
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Creating VM on the ESX  host""), instance=instance)",1,3,0.3333333333333333,269
f952992f035ec130b7608e9851ef9c3becc2047a,# API we are talking to will use.,0,3,0.3333333333333333,270
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Created VM on the ESX  host""), instance=instance)",1,3,0.3333333333333333,271
f952992f035ec130b7608e9851ef9c3becc2047a,"uploaded_vmdk_name = ""%s/%s.vmdk"" % (instance.name, instance.name)",1,3,0.3333333333333333,272
f952992f035ec130b7608e9851ef9c3becc2047a,""" %(data_store_name)s"") %",1,3,0.3333333333333333,273
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting the file %(flat_uploaded_vmdk_path)s """,1,3,0.3333333333333333,274
f952992f035ec130b7608e9851ef9c3becc2047a,"# unlikely event that its deletion fails, the small descriptor file",0,3,0.3333333333333333,275
f952992f035ec130b7608e9851ef9c3becc2047a,# Managed Object Reference value attributes,0,3,0.3333333333333333,276
f952992f035ec130b7608e9851ef9c3becc2047a,# attribute is the identifier for,0,3,0.3333333333333333,277
f952992f035ec130b7608e9851ef9c3becc2047a,# propSet is the name your Python code will need to,0,3,0.3333333333333333,278
f952992f035ec130b7608e9851ef9c3becc2047a,# Managed Object Reference _type,0,3,0.3333333333333333,279
f952992f035ec130b7608e9851ef9c3becc2047a,# use since this is the name that the API will use,0,3,0.3333333333333333,280
f952992f035ec130b7608e9851ef9c3becc2047a,vm_name = prop.val,1,2,0.2222222222222222,281
f952992f035ec130b7608e9851ef9c3becc2047a,"host = _db_content[""HostSystem""].keys()[0]",0,2,0.2222222222222222,282
f952992f035ec130b7608e9851ef9c3becc2047a,for c in changes:,0,2,0.2222222222222222,283
f952992f035ec130b7608e9851ef9c3becc2047a,# Ignoring the orphaned or inaccessible VMs,1,2,0.2222222222222222,284
f952992f035ec130b7608e9851ef9c3becc2047a,conn_state = prop.val,1,2,0.2222222222222222,285
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Got total of %s instances"") % str(len(lst_vm_names)))",0,2,0.2222222222222222,286
f952992f035ec130b7608e9851ef9c3becc2047a,"if prop.name == ""name"":",1,2,0.2222222222222222,287
f952992f035ec130b7608e9851ef9c3becc2047a,return task_mdo.obj,0,2,0.2222222222222222,288
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Getting list of instances from cluster %s""),",0,2,0.2222222222222222,289
f952992f035ec130b7608e9851ef9c3becc2047a,# Ignoring the orphaned or inaccessible VMs,0,2,0.2222222222222222,290
f952992f035ec130b7608e9851ef9c3becc2047a,conn_state = prop.val,0,2,0.2222222222222222,291
f952992f035ec130b7608e9851ef9c3becc2047a,vm_name = prop.val,0,2,0.2222222222222222,292
f952992f035ec130b7608e9851ef9c3becc2047a,"if prop.name == ""name"":",0,2,0.2222222222222222,293
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Copying snapshotted disk %s.',",0,2,0.2222222222222222,294
f952992f035ec130b7608e9851ef9c3becc2047a,"return '%s://%s:%d/sdk' % (protocol, host_name, port)",0,2,0.2222222222222222,295
f952992f035ec130b7608e9851ef9c3becc2047a,host    : ESX IPAddress or Hostname,0,2,0.2222222222222222,296
f952992f035ec130b7608e9851ef9c3becc2047a,"return '%s://[%s]:%d/sdk' % (protocol, host_name, port)",0,2,0.2222222222222222,297
f952992f035ec130b7608e9851ef9c3becc2047a,"return '%s://[%s]/sdk' % (protocol, host_name)",1,2,0.2222222222222222,298
f952992f035ec130b7608e9851ef9c3becc2047a,"return '%s://%s/sdk' % (protocol, host_name)",1,2,0.2222222222222222,299
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Creating Port Group with name %s on """,0,2,0.2222222222222222,300
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Created Port Group with name %s on """,0,2,0.2222222222222222,301
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Creating Port Group with name %s on """,1,2,0.2222222222222222,302
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Created Port Group with name %s on """,1,2,0.2222222222222222,303
f952992f035ec130b7608e9851ef9c3becc2047a,"""VMwareHTTPWrite. Exception is %s"") % excep)",1,2,0.2222222222222222,304
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Resizing VHD %(root_vhd_path)s to new """,0,2,0.2222222222222222,305
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Successfully changed state of VM %(vm_name)s""",0,2,0.2222222222222222,306
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Extending root virtual disk to %s"", requested_size)",0,2,0.2222222222222222,307
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Returns list of valid vms from RetrieveResult object.""""""",0,2,0.2222222222222222,308
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Unable to delete %(ds)s. There may be more than """,0,2,0.2222222222222222,309
f952992f035ec130b7608e9851ef9c3becc2047a,"""the ESX host"", pg_name)",0,2,0.2222222222222222,310
f952992f035ec130b7608e9851ef9c3becc2047a,"""got this exception: %s"") % exc)",1,2,0.2222222222222222,311
f952992f035ec130b7608e9851ef9c3becc2047a,for optval in exconfig_do:,0,2,0.2222222222222222,312
f952992f035ec130b7608e9851ef9c3becc2047a,# way to differentiate.,1,2,0.2222222222222222,313
f952992f035ec130b7608e9851ef9c3becc2047a,property_dict[prop.name] = prop.val,0,2,0.2222222222222222,314
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""VM was already in suspended state. So returning """,0,2,0.2222222222222222,315
f952992f035ec130b7608e9851ef9c3becc2047a,"*args, **kwargs)",1,2,0.2222222222222222,316
f952992f035ec130b7608e9851ef9c3becc2047a,"# deletion problems, so prioritize its deletion first. In the",0,2,0.2222222222222222,317
f952992f035ec130b7608e9851ef9c3becc2047a,"for f in dest_vmdk_data_file_path, dest_vmdk_file_path:",0,2,0.2222222222222222,318
f952992f035ec130b7608e9851ef9c3becc2047a,"""store %(data_store_name)s"") %",1,2,0.2222222222222222,319
f952992f035ec130b7608e9851ef9c3becc2047a,# Delete the vmdk file.,1,2,0.2222222222222222,320
f952992f035ec130b7608e9851ef9c3becc2047a,# Delete the temporary vmdk created above.,1,2,0.2222222222222222,321
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleting temporary vmdk file %s"")",1,2,0.2222222222222222,322
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted temporary vmdk file %s"")",1,2,0.2222222222222222,323
f952992f035ec130b7608e9851ef9c3becc2047a,datastore = DataObject(),0,2,0.2222222222222222,324
f952992f035ec130b7608e9851ef9c3becc2047a,for c in _CLASSES:,1,2,0.2222222222222222,325
f952992f035ec130b7608e9851ef9c3becc2047a,active = False,0,2,0.2222222222222222,326
f952992f035ec130b7608e9851ef9c3becc2047a,# So if the previous response was also am empty response,1,2,0.2222222222222222,327
f952992f035ec130b7608e9851ef9c3becc2047a,array_of_optv = DataObject(),0,2,0.2222222222222222,328
f952992f035ec130b7608e9851ef9c3becc2047a,# to be empty.,1,2,0.2222222222222222,329
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.critical(_(""In vmwareapi:_call_method, """,1,2,0.2222222222222222,330
f952992f035ec130b7608e9851ef9c3becc2047a,for controller_key in controller_keys:,0,2,0.2222222222222222,331
f952992f035ec130b7608e9851ef9c3becc2047a,for unit_number in range(max_unit_number):,0,2,0.2222222222222222,332
f952992f035ec130b7608e9851ef9c3becc2047a,Return dictionary which maps controller_key to list of allocated unit,0,2,0.2222222222222222,333
f952992f035ec130b7608e9851ef9c3becc2047a,for device in devices:,0,2,0.2222222222222222,334
f952992f035ec130b7608e9851ef9c3becc2047a,# the SCSI controller sits on its own bus,0,2,0.2222222222222222,335
f952992f035ec130b7608e9851ef9c3becc2047a,This function inspects the current set of hardware devices and returns,0,2,0.2222222222222222,336
f952992f035ec130b7608e9851ef9c3becc2047a,controller_key and unit_number that can be used for attaching a new virtual,0,2,0.2222222222222222,337
f952992f035ec130b7608e9851ef9c3becc2047a,"elif adapter_type in ['lsiLogic', 'lsiLogicsas', 'busLogic']:",0,2,0.2222222222222222,338
f952992f035ec130b7608e9851ef9c3becc2047a,"controller_spec = create_controller_spec(client_factory, controller_key,",0,2,0.2222222222222222,339
f952992f035ec130b7608e9851ef9c3becc2047a,# VM having keys 200 and 201,1,2,0.2222222222222222,340
f952992f035ec130b7608e9851ef9c3becc2047a,"controller_spec = create_controller_spec(client_factory,",1,2,0.2222222222222222,341
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Copied snapshotted disk %s.',",0,2,0.2222222222222222,342
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""VMware file write handler class.""""""",1,2,0.2222222222222222,343
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""VM was already in powered off state. So returning """,0,2,0.2222222222222222,344
f952992f035ec130b7608e9851ef9c3becc2047a,for p in self.propSet)),0,2,0.2222222222222222,345
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""VMware file read handler class.""""""",1,2,0.2222222222222222,346
f952992f035ec130b7608e9851ef9c3becc2047a,"request = urllib2.Request(base_url, None, headers)",1,2,0.2222222222222222,347
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type_dict[device.key] = CONTROLLER_TO_ADAPTER_TYPE[,0,2,0.2222222222222222,348
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type_dict[device.key] = constants.DEFAULT_ADAPTER_TYPE,1,2,0.2222222222222222,349
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type_dict[device.key] = constants.ADAPTER_TYPE_BUSLOGIC,1,2,0.2222222222222222,350
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type_dict[device.key] = constants.ADAPTER_TYPE_IDE,1,2,0.2222222222222222,351
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type_dict[device.key] = constants.ADAPTER_TYPE_LSILOGICSAS,1,2,0.2222222222222222,352
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type_dict[device.key] = constants.ADAPTER_TYPE_PARAVIRTUAL,1,2,0.2222222222222222,353
f952992f035ec130b7608e9851ef9c3becc2047a,"for i, vif_info in enumerate(vif_infos):",0,2,0.2222222222222222,354
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the first object of an object type""""""",0,2,0.2222222222222222,355
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the first reference of an object type""""""",0,2,0.2222222222222222,356
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get iterator over object References of the type.""""""",0,2,0.2222222222222222,357
f952992f035ec130b7608e9851ef9c3becc2047a,for obj in _db_content[obj_type].values():,0,2,0.2222222222222222,358
f952992f035ec130b7608e9851ef9c3becc2047a,vm_list = DataObject(),0,2,0.2222222222222222,359
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Getting list of instances from cluster %s"",",0,2,0.2222222222222222,360
f952992f035ec130b7608e9851ef9c3becc2047a,"for value in get_objects(""Datastore""):",0,2,0.2222222222222222,361
f952992f035ec130b7608e9851ef9c3becc2047a,for prop_name in properties,0,2,0.2222222222222222,362
f952992f035ec130b7608e9851ef9c3becc2047a,for key in _db_content[obj_type]:,1,2,0.2222222222222222,363
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get object References of the type.""""""",1,2,0.2222222222222222,364
f952992f035ec130b7608e9851ef9c3becc2047a,for elem in self.propSet}),1,2,0.2222222222222222,365
f952992f035ec130b7608e9851ef9c3becc2047a,"for key, value in _db_content[""Datastore""].items():",1,2,0.2222222222222222,366
f952992f035ec130b7608e9851ef9c3becc2047a,"for vm_ref in _db_content.get(""VirtualMachine""):",1,2,0.2222222222222222,367
f952992f035ec130b7608e9851ef9c3becc2047a,vm = _get_object(vm_ref),1,2,0.2222222222222222,368
f952992f035ec130b7608e9851ef9c3becc2047a,"raise exception.NotFound(""No Virtual Machine has been """,1,2,0.2222222222222222,369
f952992f035ec130b7608e9851ef9c3becc2047a,"raise exception.NotFound(""Virtual Machine with ref %s is not """,1,2,0.2222222222222222,370
f952992f035ec130b7608e9851ef9c3becc2047a,for prop_name in properties:,1,2,0.2222222222222222,371
f952992f035ec130b7608e9851ef9c3becc2047a,"prop = Prop(prop_name, mdo.get(prop_name))",1,2,0.2222222222222222,372
f952992f035ec130b7608e9851ef9c3becc2047a,because Virtual Disk Manager API does not recognize the newer controller,0,2,0.2222222222222222,373
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get the response and close the connection.""""""",1,2,0.2222222222222222,374
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Write to the file.""""""",1,2,0.2222222222222222,375
f952992f035ec130b7608e9851ef9c3becc2047a,"elif scheme == ""https"":",1,2,0.2222222222222222,376
f952992f035ec130b7608e9851ef9c3becc2047a,return cookie_header,1,2,0.2222222222222222,377
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Auto configuring disk, attempting to """,0,2,0.2222222222222222,378
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Resizing VHD %(root_vhd_path)s to new """,1,2,0.2222222222222222,379
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Successfully changed state of VM %(vm_name)s""",1,2,0.2222222222222222,380
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Got total of %s instances"") % str(len(lst_vm_names)))",1,2,0.2222222222222222,381
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Extending root virtual disk to %s""), requested_size)",1,2,0.2222222222222222,382
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Unable to delete %(ds)s. There may be more than """,1,2,0.2222222222222222,383
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Copying snapshotted disk %s.'),",1,2,0.2222222222222222,384
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Copied snapshotted disk %s.'),",1,2,0.2222222222222222,385
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already in suspended state. So returning """,1,2,0.2222222222222222,386
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already in powered off state. So returning """,1,2,0.2222222222222222,387
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(adapter_type)s and disk type %(disk_type)s"") %",1,2,0.2222222222222222,388
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Getting list of instances from cluster %s""),",1,2,0.2222222222222222,389
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Auto configuring disk, attempting to """,1,2,0.2222222222222222,390
f952992f035ec130b7608e9851ef9c3becc2047a,self.client = DataObject(),1,2,0.2222222222222222,391
f952992f035ec130b7608e9851ef9c3becc2047a,# rounding inaccuracies. Use that only if the more accurate,0,2,0.2222222222222222,392
f952992f035ec130b7608e9851ef9c3becc2047a,root_disk = '%s.vmdk' % uuid,0,2,0.2222222222222222,393
f952992f035ec130b7608e9851ef9c3becc2047a,# rounding inaccuracies. Use that only if the more accurate,1,2,0.2222222222222222,394
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""VMware file read handler class.""""""",0,2,0.2222222222222222,395
f952992f035ec130b7608e9851ef9c3becc2047a,"base_url = ""%s://[%s]:%s/folder/%s"" % (scheme, host, port,",0,2,0.2222222222222222,396
f952992f035ec130b7608e9851ef9c3becc2047a,"base_url = ""%s://%s:%s/folder/%s"" % (scheme, host, port,",0,2,0.2222222222222222,397
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Glance file read handler class.""""""",1,2,0.2222222222222222,398
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Base class for HTTP file.""""""",1,2,0.2222222222222222,399
f952992f035ec130b7608e9851ef9c3becc2047a,self.eof = False,1,2,0.2222222222222222,400
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Build ESX host session cookie headers.""""""",1,2,0.2222222222222222,401
f952992f035ec130b7608e9851ef9c3becc2047a,"cookie_header = """"",1,2,0.2222222222222222,402
f952992f035ec130b7608e9851ef9c3becc2047a,for vim_cookie in vim_cookies:,1,2,0.2222222222222222,403
f952992f035ec130b7608e9851ef9c3becc2047a,"cookie_header = vim_cookie.name + ""="" + vim_cookie.value",1,2,0.2222222222222222,404
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type_dict[device.key] = ""lsiLogic""",1,2,0.2222222222222222,405
f952992f035ec130b7608e9851ef9c3becc2047a,for vif_info in vif_infos:,1,2,0.2222222222222222,406
f952992f035ec130b7608e9851ef9c3becc2047a,Adapter type in vmdk descriptor is same for LSI-SAS & LSILogic,0,2,0.2222222222222222,407
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already in powered off state. So returning """,0,2,0.2222222222222222,408
f952992f035ec130b7608e9851ef9c3becc2047a,# a flat vmdk,0,2,0.2222222222222222,409
f952992f035ec130b7608e9851ef9c3becc2047a,# The vmdk meta-data file,0,2,0.2222222222222222,410
f952992f035ec130b7608e9851ef9c3becc2047a,"uploaded_vmdk_name = ""%s/%s.vmdk"" % (upload_folder, upload_name)",0,2,0.2222222222222222,411
f952992f035ec130b7608e9851ef9c3becc2047a,# The flat vmdk file name,0,2,0.2222222222222222,412
f952992f035ec130b7608e9851ef9c3becc2047a,"flat_uploaded_vmdk_name = ""%s/%s-flat.vmdk"" % (",0,2,0.2222222222222222,413
f952992f035ec130b7608e9851ef9c3becc2047a,"sparse_uploaded_vmdk_name = ""%s/%s-sparse.vmdk"" % (",0,2,0.2222222222222222,414
f952992f035ec130b7608e9851ef9c3becc2047a,# linked clone base disk exists,0,2,0.2222222222222222,415
f952992f035ec130b7608e9851ef9c3becc2047a,Destroy a VM instance. Steps followed are:,0,2,0.2222222222222222,416
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already in suspended state. So returning """,0,2,0.2222222222222222,417
f952992f035ec130b7608e9851ef9c3becc2047a,- shutdown the instance VM.,0,2,0.2222222222222222,418
f952992f035ec130b7608e9851ef9c3becc2047a,# Figure out the correct unit number,0,2,0.2222222222222222,419
f952992f035ec130b7608e9851ef9c3becc2047a,# Raise Exception if VM is suspended,0,2,0.2222222222222222,420
f952992f035ec130b7608e9851ef9c3becc2047a,"elif pwr_state == ""suspended"":",0,2,0.2222222222222222,421
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already in powered on state. So returning """,0,2,0.2222222222222222,422
f952992f035ec130b7608e9851ef9c3becc2047a,""" KB and type %(disk_type)s on """,0,2,0.2222222222222222,423
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Update instance progress percent to reflect current step number",0,2,0.2222222222222222,424
f952992f035ec130b7608e9851ef9c3becc2047a,""" %(progress)d"") % locals(), instance=instance)",0,2,0.2222222222222222,425
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Confirms a resize, destroying the source VM.""""""",0,2,0.2222222222222222,426
f952992f035ec130b7608e9851ef9c3becc2047a,# Destroy the original VM.,0,2,0.2222222222222222,427
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Finish reverting a resize, powering back on the instance.""""""",0,2,0.2222222222222222,428
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Completes a resize, turning on the migrated instance.""""""",0,2,0.2222222222222222,429
f952992f035ec130b7608e9851ef9c3becc2047a,# 4. Start VM,0,2,0.2222222222222222,430
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Return VNC port for an VM.""""""",0,2,0.2222222222222222,431
f952992f035ec130b7608e9851ef9c3becc2047a,return port,0,2,0.2222222222222222,432
f952992f035ec130b7608e9851ef9c3becc2047a,"host_objs = self._session._call_method(vim_util, ""get_objects"",",0,2,0.2222222222222222,433
f952992f035ec130b7608e9851ef9c3becc2047a,"dc_objs = self._session._call_method(vim_util, ""get_objects"",",0,2,0.2222222222222222,434
f952992f035ec130b7608e9851ef9c3becc2047a,# way. Assuming that is the default resource pool.,0,2,0.2222222222222222,435
f952992f035ec130b7608e9851ef9c3becc2047a,"res_pool_ref = self._session._call_method(vim_util, ""get_objects"",",0,2,0.2222222222222222,436
f952992f035ec130b7608e9851ef9c3becc2047a,# Delete the vmdk file.,0,2,0.2222222222222222,437
f952992f035ec130b7608e9851ef9c3becc2047a,uploaded. This is required just to create the metadata file.,0,2,0.2222222222222222,438
f952992f035ec130b7608e9851ef9c3becc2047a,"if task_info.state == ""error"":",0,2,0.2222222222222222,439
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Creating VIF for VM %(vm_ref)s,' \",1,2,0.2222222222222222,440
f952992f035ec130b7608e9851ef9c3becc2047a,'Refer readme-vmware to setup'),0,2,0.2222222222222222,441
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type_dict[device.key] = ""lsiLogicsas""",0,2,0.2222222222222222,442
f952992f035ec130b7608e9851ef9c3becc2047a,'Refer readme-vmware to setup'),1,2,0.2222222222222222,443
f952992f035ec130b7608e9851ef9c3becc2047a,connectable_spec = client_factory.create('ns0:VirtualDeviceConnectInfo'),0,2,0.2222222222222222,444
f952992f035ec130b7608e9851ef9c3becc2047a,connectable_spec = \,1,2,0.2222222222222222,445
f952992f035ec130b7608e9851ef9c3becc2047a,"if device.__class__.__name__ == ""VirtualDisk"" and \",1,2,0.2222222222222222,446
f952992f035ec130b7608e9851ef9c3becc2047a,help='The VMWare VIF driver to configure the VIFs.'),0,2,0.2222222222222222,447
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(old_gb)dGB to %(new_gb)dGB"") % locals())",0,2,0.2222222222222222,448
f952992f035ec130b7608e9851ef9c3becc2047a,"path = ""/console?ref=%s&session_id=%s"" % (str(vm_ref), session_id)",0,2,0.2222222222222222,449
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Creating VIF for VM %(vm_ref)s,'",0,2,0.2222222222222222,450
f952992f035ec130b7608e9851ef9c3becc2047a,help='The VMWare VIF driver to configure the VIFs.'),1,2,0.2222222222222222,451
f952992f035ec130b7608e9851ef9c3becc2047a,"interface_str = ""%s;%s;%s;%s;%s;%s"" % \",1,2,0.2222222222222222,452
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(old_gb)dGB to %(new_gb)dGB"") % locals())",1,2,0.2222222222222222,453
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_task_poll_interval: The interval (seconds) used for polling of,0,2,0.2222222222222222,454
f952992f035ec130b7608e9851ef9c3becc2047a,# Ignoring the orphaned or inaccessible VMs,0,2,0.2222222222222222,455
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_api_retry_count: The API retry count in case of failure such as,0,2,0.2222222222222222,456
f952992f035ec130b7608e9851ef9c3becc2047a,:vnc_port:                  VNC starting port (default: 5900),0,2,0.2222222222222222,457
f952992f035ec130b7608e9851ef9c3becc2047a,:vnc_port_total:            Total number of VNC ports (default: 10000),0,2,0.2222222222222222,458
f952992f035ec130b7608e9851ef9c3becc2047a,:use_linked_clone:          Whether to use linked clone (default: True),0,2,0.2222222222222222,459
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Confirms a resize, destroying the source VM.""""""",0,2,0.2222222222222222,460
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Finish reverting a resize, powering back on the instance.""""""",0,2,0.2222222222222222,461
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Completes a resize, turning on the migrated instance.""""""",0,2,0.2222222222222222,462
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_task_poll_interval:  The interval (seconds) used for polling of,1,2,0.2222222222222222,463
f952992f035ec130b7608e9851ef9c3becc2047a,:vmwareapi_api_retry_count:  The API retry count in case of failure such as,1,2,0.2222222222222222,464
f952992f035ec130b7608e9851ef9c3becc2047a,from nova import block_device,0,2,0.2222222222222222,465
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.compute import api as compute,0,2,0.2222222222222222,466
f952992f035ec130b7608e9851ef9c3becc2047a,from nova import context as nova_context,0,2,0.2222222222222222,467
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, session, virtapi, volumeops):",0,2,0.2222222222222222,468
f952992f035ec130b7608e9851ef9c3becc2047a,"if task_info.state in ['queued', 'running']:",0,2,0.2222222222222222,469
f952992f035ec130b7608e9851ef9c3becc2047a,network_spec = client_factory.create('ns0:VirtualDeviceConfigSpec'),0,2,0.2222222222222222,470
f952992f035ec130b7608e9851ef9c3becc2047a,"return False, False",0,2,0.2222222222222222,471
f952992f035ec130b7608e9851ef9c3becc2047a,return wsdl_url,1,2,0.2222222222222222,472
f952992f035ec130b7608e9851ef9c3becc2047a,array_of_mors = DataObject(),0,2,0.2222222222222222,473
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get object References of the type.""""""",0,2,0.2222222222222222,474
f952992f035ec130b7608e9851ef9c3becc2047a,for key in _db_content[obj_type]:,0,2,0.2222222222222222,475
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Update objects of the type.""""""",0,2,0.2222222222222222,476
f952992f035ec130b7608e9851ef9c3becc2047a,summary = DataObject(),0,2,0.2222222222222222,477
f952992f035ec130b7608e9851ef9c3becc2047a,r_pools = DataObject(),0,2,0.2222222222222222,478
f952992f035ec130b7608e9851ef9c3becc2047a,hosts = DataObject(),0,2,0.2222222222222222,479
f952992f035ec130b7608e9851ef9c3becc2047a,datastores = DataObject(),0,2,0.2222222222222222,480
f952992f035ec130b7608e9851ef9c3becc2047a,# Compute the aggregate stats,0,2,0.2222222222222222,481
f952992f035ec130b7608e9851ef9c3becc2047a,for host_ref in hosts.ManagedObjectReference:,0,2,0.2222222222222222,482
f952992f035ec130b7608e9851ef9c3becc2047a,about_info = DataObject(),0,2,0.2222222222222222,483
f952992f035ec130b7608e9851ef9c3becc2047a,"host = _db_content[""HostSystem""].keys()[0]",0,2,0.2222222222222222,484
f952992f035ec130b7608e9851ef9c3becc2047a,for mdo_ref in mdo_refs:,0,2,0.2222222222222222,485
f952992f035ec130b7608e9851ef9c3becc2047a,for prop_name in properties:,0,2,0.2222222222222222,486
f952992f035ec130b7608e9851ef9c3becc2047a,"prop = Prop(prop_name, mdo.get(prop_name))",0,2,0.2222222222222222,487
f952992f035ec130b7608e9851ef9c3becc2047a,# remote object that you can reference using the,1,2,0.2222222222222222,488
f952992f035ec130b7608e9851ef9c3becc2047a,# we use __setattr__ here because below the,1,2,0.2222222222222222,489
f952992f035ec130b7608e9851ef9c3becc2047a,# default setter has been altered for this class.,1,2,0.2222222222222222,490
f952992f035ec130b7608e9851ef9c3becc2047a,ds_do = DataObject(),1,2,0.2222222222222222,491
f952992f035ec130b7608e9851ef9c3becc2047a,r_pool = DataObject(),1,2,0.2222222222222222,492
f952992f035ec130b7608e9851ef9c3becc2047a,host_sys = DataObject(),1,2,0.2222222222222222,493
f952992f035ec130b7608e9851ef9c3becc2047a,datastore = DataObject(),1,2,0.2222222222222222,494
f952992f035ec130b7608e9851ef9c3becc2047a,for mdo_ref in _db_content[type]:,1,2,0.2222222222222222,495
f952992f035ec130b7608e9851ef9c3becc2047a,"raise Exception(_(""Must specify host_ip, """,0,2,0.2222222222222222,496
f952992f035ec130b7608e9851ef9c3becc2047a,"""and host_password to use """,0,2,0.2222222222222222,497
f952992f035ec130b7608e9851ef9c3becc2047a,"# Check if the folder exists or not. If not, create one",0,2,0.2222222222222222,498
f952992f035ec130b7608e9851ef9c3becc2047a,"elif adapter_type == ""lsiLogicsas"":",0,2,0.2222222222222222,499
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Get object for the give reference.""""""",0,2,0.2222222222222222,500
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.critical(_(""In vmwareapi:_create_session, """,1,2,0.2222222222222222,501
f952992f035ec130b7608e9851ef9c3becc2047a,wsdl_url = CONF.vmware.wsdl_location,1,2,0.2222222222222222,502
f952992f035ec130b7608e9851ef9c3becc2047a,# The flat vmdk file name,1,2,0.2222222222222222,503
f952992f035ec130b7608e9851ef9c3becc2047a,for vol in,0,2,0.2222222222222222,504
f952992f035ec130b7608e9851ef9c3becc2047a,for ephemeral in,0,2,0.2222222222222222,505
f952992f035ec130b7608e9851ef9c3becc2047a,"return '%s://[%s]/sdk' % (protocol, host_name)",0,2,0.2222222222222222,506
f952992f035ec130b7608e9851ef9c3becc2047a,return block_device.strip_dev(mount_device) in block_device_list,0,2,0.2222222222222222,507
f952992f035ec130b7608e9851ef9c3becc2047a,# Ignoring the oprhaned or inaccessible VMs,1,2,0.2222222222222222,508
f952992f035ec130b7608e9851ef9c3becc2047a,uploaded. This is required just to create the metadata file.,1,2,0.2222222222222222,509
f952992f035ec130b7608e9851ef9c3becc2047a,"data_stores = self._session._call_method(vim_util, ""get_objects"",",1,2,0.2222222222222222,510
f952992f035ec130b7608e9851ef9c3becc2047a,for elem in data_stores:,1,2,0.2222222222222222,511
f952992f035ec130b7608e9851ef9c3becc2047a,"if prop.name == ""summary.type"":",1,2,0.2222222222222222,512
f952992f035ec130b7608e9851ef9c3becc2047a,ds_type = prop.val,1,2,0.2222222222222222,513
f952992f035ec130b7608e9851ef9c3becc2047a,ds_name = prop.val,1,2,0.2222222222222222,514
f952992f035ec130b7608e9851ef9c3becc2047a,"dc_objs = self._session._call_method(vim_util, ""get_objects"",",1,2,0.2222222222222222,515
f952992f035ec130b7608e9851ef9c3becc2047a,# way. Assuming that is the default resource pool.,1,2,0.2222222222222222,516
f952992f035ec130b7608e9851ef9c3becc2047a,"res_pool_mor = self._session._call_method(vim_util, ""get_objects"",",1,2,0.2222222222222222,517
f952992f035ec130b7608e9851ef9c3becc2047a,"""got this exception: %s"") % excep)",1,2,0.2222222222222222,518
f952992f035ec130b7608e9851ef9c3becc2047a,"flat_uploaded_vmdk_name = ""%s/%s-flat.vmdk"" % (instance.name,",1,2,0.2222222222222222,519
f952992f035ec130b7608e9851ef9c3becc2047a,# Keep compatible with other Hyper vif model parameter.,0,2,0.2222222222222222,520
f952992f035ec130b7608e9851ef9c3becc2047a,# we use __setattr__ here because below the,0,2,0.2222222222222222,521
f952992f035ec130b7608e9851ef9c3becc2047a,# The vmdk meta-data file,1,2,0.2222222222222222,522
f952992f035ec130b7608e9851ef9c3becc2047a,# remote object that you can reference using the,0,2,0.2222222222222222,523
f952992f035ec130b7608e9851ef9c3becc2047a,# missingSet is the name your python code will,0,2,0.2222222222222222,524
f952992f035ec130b7608e9851ef9c3becc2047a,# SOAP. It has its own names. These names are decided,0,2,0.2222222222222222,525
f952992f035ec130b7608e9851ef9c3becc2047a,from nova import utils,0,2,0.2222222222222222,526
f952992f035ec130b7608e9851ef9c3becc2047a,return DataObject(),1,2,0.2222222222222222,527
f952992f035ec130b7608e9851ef9c3becc2047a,# default setter has been altered for this class.,0,2,0.2222222222222222,528
f952992f035ec130b7608e9851ef9c3becc2047a,"""data store %(data_store_name)s"") %",1,2,0.2222222222222222,529
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already in suspended state. So returning """,1,2,0.2222222222222222,530
f952992f035ec130b7608e9851ef9c3becc2047a,"vms = self._session._call_method(vim_util, ""get_objects"",",1,2,0.2222222222222222,531
f952992f035ec130b7608e9851ef9c3becc2047a,source_vm_mdo = _get_vm_mdo(source_vmref),0,1,0.1111111111111111,532
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_dict[""instanceUuid""] = clone_spec.config.instanceUuid",0,1,0.1111111111111111,533
f952992f035ec130b7608e9851ef9c3becc2047a,vm_dict = {,0,1,0.1111111111111111,534
f952992f035ec130b7608e9851ef9c3becc2047a,"ds = _db_content[""Datastore""].keys()[0]",0,1,0.1111111111111111,535
f952992f035ec130b7608e9851ef9c3becc2047a,"clone_spec = kwargs.get(""spec"")",0,1,0.1111111111111111,536
f952992f035ec130b7608e9851ef9c3becc2047a,return existing,0,1,0.1111111111111111,537
f952992f035ec130b7608e9851ef9c3becc2047a,source_vmref = args[0],0,1,0.1111111111111111,538
f952992f035ec130b7608e9851ef9c3becc2047a,extraConf.value = c.value,0,1,0.1111111111111111,539
f952992f035ec130b7608e9851ef9c3becc2047a,existing = existing or [],0,1,0.1111111111111111,540
f952992f035ec130b7608e9851ef9c3becc2047a,"extraConfigs = _merge_extraconfig(vm_dict[""extra_config""],",0,1,0.1111111111111111,541
f952992f035ec130b7608e9851ef9c3becc2047a,val.instanceUuid = uuidutils.generate_uuid(),0,1,0.1111111111111111,542
f952992f035ec130b7608e9851ef9c3becc2047a,"def _merge_extraconfig(existing, changes):",0,1,0.1111111111111111,543
f952992f035ec130b7608e9851ef9c3becc2047a,"return vim.Vim(protocol=self._scheme, host=self._host_ip,",0,1,0.1111111111111111,544
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_machine = VirtualMachine(**vm_dict),0,1,0.1111111111111111,545
f952992f035ec130b7608e9851ef9c3becc2047a,return self._just_return_task(method),1,1,0.1111111111111111,546
f952992f035ec130b7608e9851ef9c3becc2047a,self._host_port = host_port,0,1,0.1111111111111111,547
f952992f035ec130b7608e9851ef9c3becc2047a,"self.get(""config.extraConfig"").OptionValue = extraConfigs",0,1,0.1111111111111111,548
f952992f035ec130b7608e9851ef9c3becc2047a,"return vim.Vim(protocol=self._scheme, host=self._host_ip)",1,1,0.1111111111111111,549
f952992f035ec130b7608e9851ef9c3becc2047a,"self.wsdl_url = Vim.get_wsdl_url(protocol, host, port)",0,1,0.1111111111111111,550
f952992f035ec130b7608e9851ef9c3becc2047a,"self.url = Vim.get_soap_url(protocol, host, port)",0,1,0.1111111111111111,551
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_wsdl_url(protocol, host_name, port):",0,1,0.1111111111111111,552
f952992f035ec130b7608e9851ef9c3becc2047a,"return Vim.get_soap_url(protocol, host_name, port) + ""/vimService.wsdl""",0,1,0.1111111111111111,553
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_soap_url(protocol, host_name, port):",0,1,0.1111111111111111,554
f952992f035ec130b7608e9851ef9c3becc2047a,"self.wsdl_url = Vim.get_wsdl_url(protocol, host)",1,1,0.1111111111111111,555
f952992f035ec130b7608e9851ef9c3becc2047a,"self.url = Vim.get_soap_url(protocol, host)",1,1,0.1111111111111111,556
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_wsdl_url(protocol, host_name):",1,1,0.1111111111111111,557
f952992f035ec130b7608e9851ef9c3becc2047a,"return Vim.get_soap_url(protocol, host_name) + ""/vimService.wsdl""",1,1,0.1111111111111111,558
f952992f035ec130b7608e9851ef9c3becc2047a,"if val.instanceUuid == """":",0,1,0.1111111111111111,559
f952992f035ec130b7608e9851ef9c3becc2047a,vm_name = None,1,1,0.1111111111111111,560
f952992f035ec130b7608e9851ef9c3becc2047a,extraConfigs = _merge_extraconfig(,0,1,0.1111111111111111,561
f952992f035ec130b7608e9851ef9c3becc2047a,"vms = self._session._call_method(vim_util,",1,1,0.1111111111111111,562
f952992f035ec130b7608e9851ef9c3becc2047a,unit_number = 0,1,1,0.1111111111111111,563
f952992f035ec130b7608e9851ef9c3becc2047a,unit_number = device.unitNumber,1,1,0.1111111111111111,564
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_soap_url(protocol, host_name):",1,1,0.1111111111111111,565
f952992f035ec130b7608e9851ef9c3becc2047a,"return (vmdk_file_path, vmdk_controller_key, adapter_type,",1,1,0.1111111111111111,566
f952992f035ec130b7608e9851ef9c3becc2047a,def _convert_to_array_of_opt_val(optvals):,0,1,0.1111111111111111,567
f952992f035ec130b7608e9851ef9c3becc2047a,array_of_optv.OptionValue = optvals,0,1,0.1111111111111111,568
f952992f035ec130b7608e9851ef9c3becc2047a,return array_of_optv,0,1,0.1111111111111111,569
f952992f035ec130b7608e9851ef9c3becc2047a,"exconfig_do = kwargs.get(""extra_config"", None)",0,1,0.1111111111111111,570
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set('config.extraConfig[""%s""]' % optval.key, optval)",0,1,0.1111111111111111,571
f952992f035ec130b7608e9851ef9c3becc2047a,lst_vm_names = self._get_valid_vms_from_retrieve_result(vms),0,1,0.1111111111111111,572
f952992f035ec130b7608e9851ef9c3becc2047a,"def _get_valid_vms_from_retrieve_result(self, retrieve_result):",0,1,0.1111111111111111,573
f952992f035ec130b7608e9851ef9c3becc2047a,lst_vm_names = [],0,1,0.1111111111111111,574
f952992f035ec130b7608e9851ef9c3becc2047a,token = vm_util._get_token(retrieve_result),0,1,0.1111111111111111,575
f952992f035ec130b7608e9851ef9c3becc2047a,vm_name = None,0,1,0.1111111111111111,576
f952992f035ec130b7608e9851ef9c3becc2047a,conn_state = None,0,1,0.1111111111111111,577
f952992f035ec130b7608e9851ef9c3becc2047a,"if conn_state not in [""orphaned"", ""inaccessible""]:",0,1,0.1111111111111111,578
f952992f035ec130b7608e9851ef9c3becc2047a,"retrieve_result = self._session._call_method(vim_util,",0,1,0.1111111111111111,579
f952992f035ec130b7608e9851ef9c3becc2047a,def list_instances(self):,0,1,0.1111111111111111,580
f952992f035ec130b7608e9851ef9c3becc2047a,"properties = ['name', 'runtime.connectionState']",0,1,0.1111111111111111,581
f952992f035ec130b7608e9851ef9c3becc2047a,vms = [],0,1,0.1111111111111111,582
f952992f035ec130b7608e9851ef9c3becc2047a,root_res_pool = self._session._call_method(,0,1,0.1111111111111111,583
f952992f035ec130b7608e9851ef9c3becc2047a,"vim_util, ""get_dynamic_property"", self._cluster,",0,1,0.1111111111111111,584
f952992f035ec130b7608e9851ef9c3becc2047a,vms = self._session._call_method(,0,1,0.1111111111111111,585
f952992f035ec130b7608e9851ef9c3becc2047a,lst_vm_names = [],1,1,0.1111111111111111,586
f952992f035ec130b7608e9851ef9c3becc2047a,token = vm_util._get_token(vms),1,1,0.1111111111111111,587
f952992f035ec130b7608e9851ef9c3becc2047a,conn_state = None,1,1,0.1111111111111111,588
f952992f035ec130b7608e9851ef9c3becc2047a,"if conn_state not in [""orphaned"", ""inaccessible""]:",1,1,0.1111111111111111,589
f952992f035ec130b7608e9851ef9c3becc2047a,return lst_vm_names,0,1,0.1111111111111111,590
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Rescue VM destroyed"", instance=instance)",0,1,0.1111111111111111,591
f952992f035ec130b7608e9851ef9c3becc2047a,spec_type = spec_set.propSet[0].type,0,1,0.1111111111111111,592
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Resumed the VM"", instance=instance)",0,1,0.1111111111111111,593
f952992f035ec130b7608e9851ef9c3becc2047a,""" %(progress)d"",",0,1,0.1111111111111111,594
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Destroying the VM"", instance=instance)",0,1,0.1111111111111111,595
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Destroyed the VM"", instance=instance)",0,1,0.1111111111111111,596
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Will copy while retaining adapter type """,0,1,0.1111111111111111,597
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(adapter_type)s and disk type %(disk_type)s"",",0,1,0.1111111111111111,598
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""VM %(uuid)s is currently on host %(host_name)s"",",0,1,0.1111111111111111,599
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Importing image upload handler: %s"",",0,1,0.1111111111111111,600
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Skip agent setup, unable to contact agent."",",0,1,0.1111111111111111,601
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Finished snapshot and upload for VM"",",0,1,0.1111111111111111,602
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Updating progress to %d"", progress,",0,1,0.1111111111111111,603
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Clean shutdown did not complete successfully, """,0,1,0.1111111111111111,604
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Read-only migrated for disk: %s"", userdevice,",0,1,0.1111111111111111,605
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Not resizing the root volume."",",0,1,0.1111111111111111,606
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Using RAW or VHD, skipping kernel and ramdisk """,0,1,0.1111111111111111,607
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Injecting network info to xenstore"", instance=instance)",0,1,0.1111111111111111,608
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Creating VIF for network %s',",0,1,0.1111111111111111,609
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Removing hostname from xenstore"", instance=instance)",0,1,0.1111111111111111,610
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""get_info called for instance""), instance=instance)",1,1,0.1111111111111111,611
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Creating differencing VHD. Parent: """,1,1,0.1111111111111111,612
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Creating nic for instance'), instance=instance)",1,1,0.1111111111111111,613
f952992f035ec130b7608e9851ef9c3becc2047a,""" to: %(req_state)s""),",1,1,0.1111111111111111,614
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Getting list of instances""))",1,1,0.1111111111111111,615
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Create blank virtual disk on %s""),",1,1,0.1111111111111111,616
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Blank virtual disk created on %s.""),",1,1,0.1111111111111111,617
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Rebooting guest OS of VM""), instance=instance)",1,1,0.1111111111111111,618
f952992f035ec130b7608e9851ef9c3becc2047a,controller_key = 200,1,1,0.1111111111111111,619
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Rebooted guest OS of VM""), instance=instance)",1,1,0.1111111111111111,620
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Updating instance '%(instance_uuid)s' progress to""",0,1,0.1111111111111111,621
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Resuming the VM"", instance=instance)",0,1,0.1111111111111111,622
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_refs = _db_content[spec_type],0,1,0.1111111111111111,623
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Suspended the VM"", instance=instance)",0,1,0.1111111111111111,624
f952992f035ec130b7608e9851ef9c3becc2047a,elif obj_ref.type != spec_type:,0,1,0.1111111111111111,625
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = _db_content[spec_type][mdo_ref],0,1,0.1111111111111111,626
f952992f035ec130b7608e9851ef9c3becc2047a,type = spec_set.propSet[0].type,1,1,0.1111111111111111,627
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_refs = _db_content[type],1,1,0.1111111111111111,628
f952992f035ec130b7608e9851ef9c3becc2047a,elif obj_ref.type != type:,1,1,0.1111111111111111,629
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = _db_content[type][mdo_ref],1,1,0.1111111111111111,630
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.openstack.common.gettextutils import _,1,1,0.1111111111111111,631
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""get_info called for instance"", instance=instance)",0,1,0.1111111111111111,632
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Creating differencing VHD. Parent: """,0,1,0.1111111111111111,633
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Creating nic for instance', instance=instance)",0,1,0.1111111111111111,634
f952992f035ec130b7608e9851ef9c3becc2047a,""" to: %(req_state)s"",",0,1,0.1111111111111111,635
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Getting list of instances"")",0,1,0.1111111111111111,636
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Got total of %s instances"", str(len(lst_vm_names)))",0,1,0.1111111111111111,637
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Create blank virtual disk on %s"",",0,1,0.1111111111111111,638
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Blank virtual disk created on %s."",",0,1,0.1111111111111111,639
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Uploading image %s"", image_id,",0,1,0.1111111111111111,640
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Uploaded image %s"", image_id,",0,1,0.1111111111111111,641
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Rebooting guest OS of VM"", instance=instance)",0,1,0.1111111111111111,642
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Rebooted guest OS of VM"", instance=instance)",0,1,0.1111111111111111,643
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Doing hard reboot of VM"", instance=instance)",0,1,0.1111111111111111,644
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Did hard reboot of VM"", instance=instance)",0,1,0.1111111111111111,645
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Powering off the VM"", instance=instance)",0,1,0.1111111111111111,646
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Powered off the VM"", instance=instance)",0,1,0.1111111111111111,647
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Unregistering the VM"", instance=instance)",0,1,0.1111111111111111,648
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Unregistered the VM"", instance=instance)",0,1,0.1111111111111111,649
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Rescue VM configured"", instance=instance)",0,1,0.1111111111111111,650
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Suspending the VM"", instance=instance)",0,1,0.1111111111111111,651
f952992f035ec130b7608e9851ef9c3becc2047a,controller_key = -101,1,1,0.1111111111111111,652
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = None,0,1,0.1111111111111111,653
f952992f035ec130b7608e9851ef9c3becc2047a,"if adapter_type == ""ide"":",1,1,0.1111111111111111,654
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[c] = [],0,1,0.1111111111111111,655
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""fake-ds"", capacity=1024, free=500):",0,1,0.1111111111111111,656
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""ha-datacenter"", ds_ref=None):",0,1,0.1111111111111111,657
f952992f035ec130b7608e9851ef9c3becc2047a,datastore.ManagedObjectReference = [ds_ref],0,1,0.1111111111111111,658
f952992f035ec130b7608e9851ef9c3becc2047a,"def create_datacenter(name, ds_ref=None):",0,1,0.1111111111111111,659
f952992f035ec130b7608e9851ef9c3becc2047a,"data_center = Datacenter(name, ds_ref)",0,1,0.1111111111111111,660
f952992f035ec130b7608e9851ef9c3becc2047a,"def create_datastore(name, capacity, free):",0,1,0.1111111111111111,661
f952992f035ec130b7608e9851ef9c3becc2047a,"data_store = Datastore(name, capacity, free)",0,1,0.1111111111111111,662
f952992f035ec130b7608e9851ef9c3becc2047a,return data_store.obj,0,1,0.1111111111111111,663
f952992f035ec130b7608e9851ef9c3becc2047a,"def create_cluster(name, ds_ref):",0,1,0.1111111111111111,664
f952992f035ec130b7608e9851ef9c3becc2047a,def reset():,1,1,0.1111111111111111,665
f952992f035ec130b7608e9851ef9c3becc2047a,if c == 'files':,1,1,0.1111111111111111,666
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[c] = [],1,1,0.1111111111111111,667
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[c] = {},1,1,0.1111111111111111,668
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""fake-ds""):",1,1,0.1111111111111111,669
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""ha-datacenter""):",1,1,0.1111111111111111,670
f952992f035ec130b7608e9851ef9c3becc2047a,def create_datacenter():,1,1,0.1111111111111111,671
f952992f035ec130b7608e9851ef9c3becc2047a,data_center = Datacenter(),1,1,0.1111111111111111,672
f952992f035ec130b7608e9851ef9c3becc2047a,def create_datastore():,1,1,0.1111111111111111,673
f952992f035ec130b7608e9851ef9c3becc2047a,data_store = Datastore(),1,1,0.1111111111111111,674
f952992f035ec130b7608e9851ef9c3becc2047a,def create_cluster(name):,1,1,0.1111111111111111,675
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vm_create_spec(client_factory, instance, name, data_store_name,",0,1,0.1111111111111111,676
f952992f035ec130b7608e9851ef9c3becc2047a,config_spec.name = name,0,1,0.1111111111111111,677
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vmdk_volume_disk(hardware_devices, path=None):",0,1,0.1111111111111111,678
f952992f035ec130b7608e9851ef9c3becc2047a,if not path or path == device.backing.fileName:,0,1,0.1111111111111111,679
f952992f035ec130b7608e9851ef9c3becc2047a,return device,0,1,0.1111111111111111,680
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vm_create_spec(client_factory, instance, data_store_name,",1,1,0.1111111111111111,681
f952992f035ec130b7608e9851ef9c3becc2047a,config_spec.name = instance['uuid'],1,1,0.1111111111111111,682
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[c] = {},0,1,0.1111111111111111,683
f952992f035ec130b7608e9851ef9c3becc2047a,if c == 'files':,0,1,0.1111111111111111,684
f952992f035ec130b7608e9851ef9c3becc2047a,return device,1,1,0.1111111111111111,685
f952992f035ec130b7608e9851ef9c3becc2047a,"ds_ref2 = create_datastore('ds2', 1024, 500)",0,1,0.1111111111111111,686
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_content = get_object_properties(vim, None, mobj, type, [property_name])",1,1,0.1111111111111111,687
f952992f035ec130b7608e9851ef9c3becc2047a,property_value = None,1,1,0.1111111111111111,688
f952992f035ec130b7608e9851ef9c3becc2047a,dynamic_property = obj_content.objects[0].propSet,1,1,0.1111111111111111,689
f952992f035ec130b7608e9851ef9c3becc2047a,property_value = dynamic_property[0].val,1,1,0.1111111111111111,690
f952992f035ec130b7608e9851ef9c3becc2047a,return property_value,1,1,0.1111111111111111,691
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.openstack.common import uuidutils,0,1,0.1111111111111111,692
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = uuidutils.generate_uuid(),0,1,0.1111111111111111,693
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = str(uuid.uuid4()),1,1,0.1111111111111111,694
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.openstack.common import uuidutils,0,1,0.1111111111111111,695
f952992f035ec130b7608e9851ef9c3becc2047a,"def _extend_virtual_disk(self, instance, requested_size, name, dc_ref):",0,1,0.1111111111111111,696
f952992f035ec130b7608e9851ef9c3becc2047a,"def _delete_datastore_file(self, instance, datastore_path, dc_ref):",0,1,0.1111111111111111,697
f952992f035ec130b7608e9851ef9c3becc2047a,vim = self._session._get_vim(),0,1,0.1111111111111111,698
f952992f035ec130b7608e9851ef9c3becc2047a,file_delete_task = self._session._call_method(,0,1,0.1111111111111111,699
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Deleted the datastore file""), instance=instance)",0,1,0.1111111111111111,700
f952992f035ec130b7608e9851ef9c3becc2047a,random_name = uuidutils.generate_uuid(),0,1,0.1111111111111111,701
f952992f035ec130b7608e9851ef9c3becc2047a,"dest_vmdk_file_path = vm_util.build_datastore_path(datastore_name,",0,1,0.1111111111111111,702
f952992f035ec130b7608e9851ef9c3becc2047a,"dest_vmdk_data_file_path = vm_util.build_datastore_path(datastore_name,",0,1,0.1111111111111111,703
f952992f035ec130b7608e9851ef9c3becc2047a,"""vmware-tmp/%s-flat.vmdk"" % random_name)",0,1,0.1111111111111111,704
f952992f035ec130b7608e9851ef9c3becc2047a,"def _extend_virtual_disk(self, instance, requested_size, name,",1,1,0.1111111111111111,705
f952992f035ec130b7608e9851ef9c3becc2047a,def _delete_disk_file(vmdk_path):,1,1,0.1111111111111111,706
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_delete_task = self._session._call_method(,1,1,0.1111111111111111,707
f952992f035ec130b7608e9851ef9c3becc2047a,random_name = str(uuid.uuid4()),1,1,0.1111111111111111,708
f952992f035ec130b7608e9851ef9c3becc2047a,"dest_vmdk_file_location = vm_util.build_datastore_path(datastore_name,",1,1,0.1111111111111111,709
f952992f035ec130b7608e9851ef9c3becc2047a,"% dest_vmdk_file_location, instance=instance)",1,1,0.1111111111111111,710
f952992f035ec130b7608e9851ef9c3becc2047a,remove_disk_task = self._session._call_method(,1,1,0.1111111111111111,711
f952992f035ec130b7608e9851ef9c3becc2047a,def reset(vc=False):,0,1,0.1111111111111111,712
f952992f035ec130b7608e9851ef9c3becc2047a,"ds_ref1 = create_datastore('ds1', 1024, 500)",0,1,0.1111111111111111,713
f952992f035ec130b7608e9851ef9c3becc2047a,def get_vmdk_volume_disk(hardware_devices):,1,1,0.1111111111111111,714
f952992f035ec130b7608e9851ef9c3becc2047a,TIME_BETWEEN_API_CALL_RETRIES = 1.0,0,1,0.1111111111111111,715
f952992f035ec130b7608e9851ef9c3becc2047a,# controls this Hard Disk,1,1,0.1111111111111111,716
f952992f035ec130b7608e9851ef9c3becc2047a,filename = val.deviceChange[0].device.backing.fileName,0,1,0.1111111111111111,717
f952992f035ec130b7608e9851ef9c3becc2047a,self.unitNumber = 0,1,1,0.1111111111111111,718
f952992f035ec130b7608e9851ef9c3becc2047a,controller_key = val.deviceChange[1].device.controllerKey,1,1,0.1111111111111111,719
f952992f035ec130b7608e9851ef9c3becc2047a,filename = val.deviceChange[1].device.backing.fileName,1,1,0.1111111111111111,720
f952992f035ec130b7608e9851ef9c3becc2047a,"return (vmdk_file_path, adapter_type, disk_type)",0,1,0.1111111111111111,721
f952992f035ec130b7608e9851ef9c3becc2047a,"def _find_controller_slot(controller_keys, taken, max_unit_number):",0,1,0.1111111111111111,722
f952992f035ec130b7608e9851ef9c3becc2047a,"if not unit_number in taken.get(controller_key, []):",0,1,0.1111111111111111,723
f952992f035ec130b7608e9851ef9c3becc2047a,"return controller_key, unit_number",0,1,0.1111111111111111,724
f952992f035ec130b7608e9851ef9c3becc2047a,def _is_ide_controller(device):,0,1,0.1111111111111111,725
f952992f035ec130b7608e9851ef9c3becc2047a,def _is_scsi_controller(device):,0,1,0.1111111111111111,726
f952992f035ec130b7608e9851ef9c3becc2047a,def _find_allocated_slots(devices):,0,1,0.1111111111111111,727
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",0,1,0.1111111111111111,728
f952992f035ec130b7608e9851ef9c3becc2047a,numbers for that controller_key.,0,1,0.1111111111111111,729
f952992f035ec130b7608e9851ef9c3becc2047a,taken = {},0,1,0.1111111111111111,730
f952992f035ec130b7608e9851ef9c3becc2047a,"unit_numbers = taken.setdefault(device.controllerKey, [])",0,1,0.1111111111111111,731
f952992f035ec130b7608e9851ef9c3becc2047a,"unit_numbers = taken.setdefault(device.key, [])",0,1,0.1111111111111111,732
f952992f035ec130b7608e9851ef9c3becc2047a,return taken,0,1,0.1111111111111111,733
f952992f035ec130b7608e9851ef9c3becc2047a,"def allocate_controller_key_and_unit_number(client_factory, devices,",0,1,0.1111111111111111,734
f952992f035ec130b7608e9851ef9c3becc2047a,"if devices.__class__.__name__ == ""ArrayOfVirtualDevice"":",0,1,0.1111111111111111,735
f952992f035ec130b7608e9851ef9c3becc2047a,devices = devices.VirtualDevice,0,1,0.1111111111111111,736
f952992f035ec130b7608e9851ef9c3becc2047a,taken = _find_allocated_slots(devices),0,1,0.1111111111111111,737
f952992f035ec130b7608e9851ef9c3becc2047a,ret = None,0,1,0.1111111111111111,738
f952992f035ec130b7608e9851ef9c3becc2047a,if adapter_type == 'ide':,0,1,0.1111111111111111,739
f952992f035ec130b7608e9851ef9c3becc2047a,"ret = _find_controller_slot(ide_keys, taken, 2)",0,1,0.1111111111111111,740
f952992f035ec130b7608e9851ef9c3becc2047a,"ret = _find_controller_slot(scsi_keys, taken, 16)",0,1,0.1111111111111111,741
f952992f035ec130b7608e9851ef9c3becc2047a,"return ret[0], ret[1], None",0,1,0.1111111111111111,742
f952992f035ec130b7608e9851ef9c3becc2047a,controller_key = -101,0,1,0.1111111111111111,743
f952992f035ec130b7608e9851ef9c3becc2047a,"return controller_key, 0, controller_spec",0,1,0.1111111111111111,744
f952992f035ec130b7608e9851ef9c3becc2047a,def __init__(self):,1,1,0.1111111111111111,745
f952992f035ec130b7608e9851ef9c3becc2047a,controller_key = val.deviceChange[0].device.controllerKey,0,1,0.1111111111111111,746
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Did hard reboot of VM""), instance=instance)",1,1,0.1111111111111111,747
f952992f035ec130b7608e9851ef9c3becc2047a,self.scsiCtlrUnitNumber = scsiCtlrUnitNumber,0,1,0.1111111111111111,748
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = session,0,1,0.1111111111111111,749
f952992f035ec130b7608e9851ef9c3becc2047a,def _session_is_active(self):,0,1,0.1111111111111111,750
f952992f035ec130b7608e9851ef9c3becc2047a,active = self.vim.SessionIsActive(,0,1,0.1111111111111111,751
f952992f035ec130b7608e9851ef9c3becc2047a,"self.vim.get_service_content().sessionManager,",0,1,0.1111111111111111,752
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.warning(_(""Unable to validate session %s!""),",0,1,0.1111111111111111,753
f952992f035ec130b7608e9851ef9c3becc2047a,return active,0,1,0.1111111111111111,754
f952992f035ec130b7608e9851ef9c3becc2047a,# active,0,1,0.1111111111111111,755
f952992f035ec130b7608e9851ef9c3becc2047a,exc = excep,0,1,0.1111111111111111,756
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.critical(_(""In vmwareapi: _call_method (session=%s)""),",0,1,0.1111111111111111,757
f952992f035ec130b7608e9851ef9c3becc2047a,TIME_BETWEEN_API_CALL_RETRIES = 2.0,1,1,0.1111111111111111,758
f952992f035ec130b7608e9851ef9c3becc2047a,self._session_id = None,1,1,0.1111111111111111,759
f952992f035ec130b7608e9851ef9c3becc2047a,self._session_id = session.key,1,1,0.1111111111111111,760
f952992f035ec130b7608e9851ef9c3becc2047a,last_fault_list = [],1,1,0.1111111111111111,761
f952992f035ec130b7608e9851ef9c3becc2047a,if error_util.FAULT_NOT_AUTHENTICATED in last_fault_list:,1,1,0.1111111111111111,762
f952992f035ec130b7608e9851ef9c3becc2047a,last_fault_list = excep.fault_list,1,1,0.1111111111111111,763
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vmdk_path_and_adapter_type(hardware_devices, uuid=None):",0,1,0.1111111111111111,764
f952992f035ec130b7608e9851ef9c3becc2047a,if uuid in device.backing.fileName:,0,1,0.1111111111111111,765
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_file_path = device.backing.fileName,0,1,0.1111111111111111,766
f952992f035ec130b7608e9851ef9c3becc2047a,def get_vmdk_path_and_adapter_type(hardware_devices):,1,1,0.1111111111111111,767
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_file_path = device.backing.fileName,1,1,0.1111111111111111,768
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, controllerKey=0, unitNumber=0):",0,1,0.1111111111111111,769
f952992f035ec130b7608e9851ef9c3becc2047a,self.controllerKey = controllerKey,0,1,0.1111111111111111,770
f952992f035ec130b7608e9851ef9c3becc2047a,self.unitNumber = unitNumber,0,1,0.1111111111111111,771
f952992f035ec130b7608e9851ef9c3becc2047a,class VirtualIDEController(DataObject):,0,1,0.1111111111111111,772
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, key=0):",0,1,0.1111111111111111,773
f952992f035ec130b7608e9851ef9c3becc2047a,self.key = key,0,1,0.1111111111111111,774
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, key=0, scsiCtlrUnitNumber=0):",0,1,0.1111111111111111,775
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Doing hard reboot of VM""), instance=instance)",1,1,0.1111111111111111,776
f952992f035ec130b7608e9851ef9c3becc2047a,disk_type = _get_device_disk_type(vmdk_device),0,1,0.1111111111111111,777
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Powering off the VM""), instance=instance)",1,1,0.1111111111111111,778
f952992f035ec130b7608e9851ef9c3becc2047a,"return isinstance(module, vim.Vim)",1,1,0.1111111111111111,779
f952992f035ec130b7608e9851ef9c3becc2047a,The task is polled until it completes.,1,1,0.1111111111111111,780
f952992f035ec130b7608e9851ef9c3becc2047a,return self.wait_for_task(task_ref),1,1,0.1111111111111111,781
f952992f035ec130b7608e9851ef9c3becc2047a,from oslo_vmware import vim_util,0,1,0.1111111111111111,782
f952992f035ec130b7608e9851ef9c3becc2047a,def _create_object(table_obj):,0,1,0.1111111111111111,783
f952992f035ec130b7608e9851ef9c3becc2047a,def get_object(obj_ref):,0,1,0.1111111111111111,784
f952992f035ec130b7608e9851ef9c3becc2047a,return _db_content[obj_ref.type][obj_ref.value],0,1,0.1111111111111111,785
f952992f035ec130b7608e9851ef9c3becc2047a,def get_objects(obj_type):,0,1,0.1111111111111111,786
f952992f035ec130b7608e9851ef9c3becc2047a,return _db_content[obj_type].values(),0,1,0.1111111111111111,787
f952992f035ec130b7608e9851ef9c3becc2047a,def get_first_object(obj_type):,0,1,0.1111111111111111,788
f952992f035ec130b7608e9851ef9c3becc2047a,return next(iter(_db_content[obj_type].values())),0,1,0.1111111111111111,789
f952992f035ec130b7608e9851ef9c3becc2047a,def get_first_object_ref(obj_type):,0,1,0.1111111111111111,790
f952992f035ec130b7608e9851ef9c3becc2047a,return get_first_object(obj_type).obj,0,1,0.1111111111111111,791
f952992f035ec130b7608e9851ef9c3becc2047a,def _no_objects_of_type(obj_type):,0,1,0.1111111111111111,792
f952992f035ec130b7608e9851ef9c3becc2047a,return not _db_content.get(obj_type),0,1,0.1111111111111111,793
f952992f035ec130b7608e9851ef9c3becc2047a,"def add_object(self, obj):",0,1,0.1111111111111111,794
f952992f035ec130b7608e9851ef9c3becc2047a,def get_object_refs(obj_type):,0,1,0.1111111111111111,795
f952992f035ec130b7608e9851ef9c3becc2047a,def update_object(table_obj):,0,1,0.1111111111111111,796
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[table_obj.obj._type][table_obj.obj.value] = table_obj,0,1,0.1111111111111111,797
f952992f035ec130b7608e9851ef9c3becc2047a,def __repr__(self):,0,1,0.1111111111111111,798
f952992f035ec130b7608e9851ef9c3becc2047a,return f'{self._type}:{self.value}',0,1,0.1111111111111111,799
f952992f035ec130b7608e9851ef9c3becc2047a,"def __eq__(self, other):",0,1,0.1111111111111111,800
f952992f035ec130b7608e9851ef9c3becc2047a,return (other is not None and,0,1,0.1111111111111111,801
f952992f035ec130b7608e9851ef9c3becc2047a,vim_util.get_moref_value(other) == self.value and,0,1,0.1111111111111111,802
f952992f035ec130b7608e9851ef9c3becc2047a,vim_util.get_moref_type(other) == self.type),0,1,0.1111111111111111,803
f952992f035ec130b7608e9851ef9c3becc2047a,"return ""{}:{}({})"".format(self.obj._type, self.obj.value,",0,1,0.1111111111111111,804
f952992f035ec130b7608e9851ef9c3becc2047a,"""{}={}"".format(p.name, p.val if p.name == ""name"" else ""<>"")",0,1,0.1111111111111111,805
f952992f035ec130b7608e9851ef9c3becc2047a,"host_ref = get_first_object_ref(""HostSystem"")",0,1,0.1111111111111111,806
f952992f035ec130b7608e9851ef9c3becc2047a,"def _wait_for_task(self, task_ref):",1,1,0.1111111111111111,807
f952992f035ec130b7608e9851ef9c3becc2047a,"def _is_vim_object(self, module):",1,1,0.1111111111111111,808
f952992f035ec130b7608e9851ef9c3becc2047a,pool = get_object(r_pool),0,1,0.1111111111111111,809
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, host_ip=CONF.vmware.host_ip,",1,1,0.1111111111111111,810
f952992f035ec130b7608e9851ef9c3becc2047a,conn = httplib.HTTPSConnection(netloc),1,1,0.1111111111111111,811
f952992f035ec130b7608e9851ef9c3becc2047a,self.conn = conn,1,1,0.1111111111111111,812
f952992f035ec130b7608e9851ef9c3becc2047a,class VMwareHTTPReadFile(VMwareHTTPFile):,1,1,0.1111111111111111,813
f952992f035ec130b7608e9851ef9c3becc2047a,"headers = {'User-Agent': USER_AGENT,",1,1,0.1111111111111111,814
f952992f035ec130b7608e9851ef9c3becc2047a,conn = urllib2.urlopen(request),1,1,0.1111111111111111,815
f952992f035ec130b7608e9851ef9c3becc2047a,# while writing.,1,1,0.1111111111111111,816
f952992f035ec130b7608e9851ef9c3becc2047a,return self.file_handle.read(READ_CHUNKSIZE),1,1,0.1111111111111111,817
f952992f035ec130b7608e9851ef9c3becc2047a,"return self.file_handle.headers.get(""Content-Length"", -1)",1,1,0.1111111111111111,818
f952992f035ec130b7608e9851ef9c3becc2047a,CONTROLLER_TO_ADAPTER_TYPE = {,0,1,0.1111111111111111,819
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_hardware_devices(session, vm_ref):",0,1,0.1111111111111111,820
f952992f035ec130b7608e9851ef9c3becc2047a,return vim_util.get_array_items(hardware_devices),0,1,0.1111111111111111,821
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vmdk_info(session, vm_ref, uuid=None):",0,1,0.1111111111111111,822
f952992f035ec130b7608e9851ef9c3becc2047a,"hardware_devices = get_hardware_devices(session, vm_ref)",0,1,0.1111111111111111,823
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vmdk_info(session, vm_ref, uuid=None):",1,1,0.1111111111111111,824
f952992f035ec130b7608e9851ef9c3becc2047a,"if hardware_devices.__class__.__name__ == ""ArrayOfVirtualDevice"":",1,1,0.1111111111111111,825
f952992f035ec130b7608e9851ef9c3becc2047a,hardware_devices = hardware_devices.VirtualDevice,1,1,0.1111111111111111,826
f952992f035ec130b7608e9851ef9c3becc2047a,"def _create_vif_spec(client_factory, vif_info, vif_limits=None, offset=0):",0,1,0.1111111111111111,827
f952992f035ec130b7608e9851ef9c3becc2047a,net_device.key = -47 - offset,0,1,0.1111111111111111,828
f952992f035ec130b7608e9851ef9c3becc2047a,"def _create_vif_spec(client_factory, vif_info, vif_limits=None):",1,1,0.1111111111111111,829
f952992f035ec130b7608e9851ef9c3becc2047a,net_device.key = -47,1,1,0.1111111111111111,830
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.virt.vmwareapi import session,0,1,0.1111111111111111,831
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = session.VMwareAPISession(scheme=scheme),0,1,0.1111111111111111,832
f952992f035ec130b7608e9851ef9c3becc2047a,from oslo_vmware import api,1,1,0.1111111111111111,833
f952992f035ec130b7608e9851ef9c3becc2047a,from oslo_vmware import vim,1,1,0.1111111111111111,834
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = VMwareAPISession(scheme=scheme),1,1,0.1111111111111111,835
f952992f035ec130b7608e9851ef9c3becc2047a,class VMwareAPISession(api.VMwareAPISession):,1,1,0.1111111111111111,836
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",1,1,0.1111111111111111,837
f952992f035ec130b7608e9851ef9c3becc2047a,vm_list.ManagedObjectReference = [],0,1,0.1111111111111111,838
f952992f035ec130b7608e9851ef9c3becc2047a,host_sys = get_object(host_ref),0,1,0.1111111111111111,839
f952992f035ec130b7608e9851ef9c3becc2047a,"if scheme == ""http"":",1,1,0.1111111111111111,840
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_object_refs(obj_type):,1,1,0.1111111111111111,841
f952992f035ec130b7608e9851ef9c3becc2047a,"def _update_object(table, table_obj):",1,1,0.1111111111111111,842
f952992f035ec130b7608e9851ef9c3becc2047a,return jsonutils.dumps({elem.name: elem.val,1,1,0.1111111111111111,843
f952992f035ec130b7608e9851ef9c3becc2047a,"host_ref = (_db_content[""HostSystem""]",1,1,0.1111111111111111,844
f952992f035ec130b7608e9851ef9c3becc2047a,host_sys = _get_object(host_ref),1,1,0.1111111111111111,845
f952992f035ec130b7608e9851ef9c3becc2047a,"host_net_key = list(_db_content[""HostNetworkSystem""].keys())[0]",1,1,0.1111111111111111,846
f952992f035ec130b7608e9851ef9c3becc2047a,"host_net_sys = _db_content[""HostNetworkSystem""][host_net_key].obj",1,1,0.1111111111111111,847
f952992f035ec130b7608e9851ef9c3becc2047a,host_storage_sys_key = _get_object_refs('HostStorageSystem')[0],1,1,0.1111111111111111,848
f952992f035ec130b7608e9851ef9c3becc2047a,"net_ref = _db_content[""Network""][",1,1,0.1111111111111111,849
f952992f035ec130b7608e9851ef9c3becc2047a,host_storage_sys = _get_object(host_storage_sys_key),1,1,0.1111111111111111,850
f952992f035ec130b7608e9851ef9c3becc2047a,"folder_ref = _db_content[""Folder""][",1,1,0.1111111111111111,851
f952992f035ec130b7608e9851ef9c3becc2047a,vm_path = ds_obj.DatastorePath(,1,1,0.1111111111111111,852
f952992f035ec130b7608e9851ef9c3becc2047a,res_pool_ref = list(_db_content['ResourcePool'].keys())[0],1,1,0.1111111111111111,853
f952992f035ec130b7608e9851ef9c3becc2047a,"host_ref = list(_db_content[""HostSystem""].keys())[0]",1,1,0.1111111111111111,854
f952992f035ec130b7608e9851ef9c3becc2047a,ds = key,1,1,0.1111111111111111,855
f952992f035ec130b7608e9851ef9c3becc2047a,res_pool = _get_object(res_pool_ref),1,1,0.1111111111111111,856
f952992f035ec130b7608e9851ef9c3becc2047a,"if vm_ref not in _db_content.get(""VirtualMachine""):",1,1,0.1111111111111111,857
f952992f035ec130b7608e9851ef9c3becc2047a,"""there"" % vm_ref)",1,1,0.1111111111111111,858
f952992f035ec130b7608e9851ef9c3becc2047a,"return _db_content.get(""VirtualMachine"")[vm_ref]",1,1,0.1111111111111111,859
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_mdo = _db_content.get(""VirtualMachine"").get(vm_ref)",1,1,0.1111111111111111,860
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_refs = _db_content[spec_type],1,1,0.1111111111111111,861
f952992f035ec130b7608e9851ef9c3becc2047a,parent_mdo = _db_content[obj_ref.type][obj_ref],1,1,0.1111111111111111,862
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = _db_content[spec_type][mdo_ref],1,1,0.1111111111111111,863
f952992f035ec130b7608e9851ef9c3becc2047a,prop_list = [],1,1,0.1111111111111111,864
f952992f035ec130b7608e9851ef9c3becc2047a,"_host_sk = list(_db_content[""HostSystem""].keys())[0]",1,1,0.1111111111111111,865
f952992f035ec130b7608e9851ef9c3becc2047a,"host_mdo = _db_content[""HostSystem""][_host_sk]",1,1,0.1111111111111111,866
f952992f035ec130b7608e9851ef9c3becc2047a,host_storage_sys = _get_objects('HostStorageSystem').objects[0],1,1,0.1111111111111111,867
f952992f035ec130b7608e9851ef9c3becc2047a,def get_about_info(vim):,0,1,0.1111111111111111,868
f952992f035ec130b7608e9851ef9c3becc2047a,lst_objs = [],1,1,0.1111111111111111,869
f952992f035ec130b7608e9851ef9c3becc2047a,"def add_object(self, object):",1,1,0.1111111111111111,870
f952992f035ec130b7608e9851ef9c3becc2047a,"host_net_obj = get_first_object(""HostNetworkSystem"")",0,1,0.1111111111111111,871
f952992f035ec130b7608e9851ef9c3becc2047a,return lst_objs,1,1,0.1111111111111111,872
f952992f035ec130b7608e9851ef9c3becc2047a,host_net_ref = host_net_obj.obj,0,1,0.1111111111111111,873
f952992f035ec130b7608e9851ef9c3becc2047a,host_storage_sys_key = get_first_object_ref('HostStorageSystem'),0,1,0.1111111111111111,874
f952992f035ec130b7608e9851ef9c3becc2047a,"net_ref = get_first_object_ref(""Network"")",0,1,0.1111111111111111,875
f952992f035ec130b7608e9851ef9c3becc2047a,host_storage_sys = get_object(host_storage_sys_key),0,1,0.1111111111111111,876
f952992f035ec130b7608e9851ef9c3becc2047a,"folder_ref = get_first_object_ref(""Folder"")",0,1,0.1111111111111111,877
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_path = ds_obj.DatastorePath(get_first_object(""Datastore""))",0,1,0.1111111111111111,878
f952992f035ec130b7608e9851ef9c3becc2047a,"res_pool_ref = get_first_object_ref(""ResourcePool"")",0,1,0.1111111111111111,879
f952992f035ec130b7608e9851ef9c3becc2047a,ds = value.obj,0,1,0.1111111111111111,880
f952992f035ec130b7608e9851ef9c3becc2047a,res_pool = get_object(res_pool_ref),0,1,0.1111111111111111,881
f952992f035ec130b7608e9851ef9c3becc2047a,"vms = _db_content.get(""VirtualMachine"")",0,1,0.1111111111111111,882
f952992f035ec130b7608e9851ef9c3becc2047a,return vms[vm_ref.value],0,1,0.1111111111111111,883
f952992f035ec130b7608e9851ef9c3becc2047a,"""there"" % vm_ref.value)",0,1,0.1111111111111111,884
f952992f035ec130b7608e9851ef9c3becc2047a,vm_mdo = _get_vm_mdo(vm_ref),0,1,0.1111111111111111,885
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_refs = list(get_object_refs(spec_type)),0,1,0.1111111111111111,886
f952992f035ec130b7608e9851ef9c3becc2047a,parent_mdo = get_object(obj_ref),0,1,0.1111111111111111,887
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_list = _db_content[spec_type],0,1,0.1111111111111111,888
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = mdo_list[mdo_ref.value],0,1,0.1111111111111111,889
f952992f035ec130b7608e9851ef9c3becc2047a,prop_list = [,0,1,0.1111111111111111,890
f952992f035ec130b7608e9851ef9c3becc2047a,"host_mdo = get_first_object(""HostSystem"")",0,1,0.1111111111111111,891
f952992f035ec130b7608e9851ef9c3becc2047a,host_storage_sys = get_first_object('HostStorageSystem'),0,1,0.1111111111111111,892
f952992f035ec130b7608e9851ef9c3becc2047a,from oslo_serialization import jsonutils,1,1,0.1111111111111111,893
f952992f035ec130b7608e9851ef9c3becc2047a,"def _create_object(table, table_obj):",1,1,0.1111111111111111,894
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[table][table_obj.obj] = table_obj,1,1,0.1111111111111111,895
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_object(obj_ref):,1,1,0.1111111111111111,896
f952992f035ec130b7608e9851ef9c3becc2047a,return _db_content[obj_ref.type][obj_ref],1,1,0.1111111111111111,897
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_objects(obj_type):,1,1,0.1111111111111111,898
f952992f035ec130b7608e9851ef9c3becc2047a,lst_objs = FakeRetrieveResult(),1,1,0.1111111111111111,899
f952992f035ec130b7608e9851ef9c3becc2047a,conn = httplib.HTTPConnection(netloc),1,1,0.1111111111111111,900
f952992f035ec130b7608e9851ef9c3becc2047a,"scheme, netloc, path, params, query, fragment = _urlparse",1,1,0.1111111111111111,901
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Powered off the VM""), instance=instance)",1,1,0.1111111111111111,902
f952992f035ec130b7608e9851ef9c3becc2047a,class FakeClient(DataObject):,0,1,0.1111111111111111,903
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Creates a namespace object.""""""",0,1,0.1111111111111111,904
f952992f035ec130b7608e9851ef9c3becc2047a,self.service = FakeService(),0,1,0.1111111111111111,905
f952992f035ec130b7608e9851ef9c3becc2047a,self.client = FakeClient(),0,1,0.1111111111111111,906
f952992f035ec130b7608e9851ef9c3becc2047a,"def fake_get_vmdk_size_and_properties(context, image_id, instance):",1,1,0.1111111111111111,907
f952992f035ec130b7608e9851ef9c3becc2047a,"props = {""vmware_ostype"": constants.DEFAULT_OS_TYPE,",1,1,0.1111111111111111,908
f952992f035ec130b7608e9851ef9c3becc2047a,"return _FAKE_FILE_SIZE, props",1,1,0.1111111111111111,909
f952992f035ec130b7608e9851ef9c3becc2047a,from oslo.vmware.objects import datastore as ds_obj,0,1,0.1111111111111111,910
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_device_capacity(device):,0,1,0.1111111111111111,911
f952992f035ec130b7608e9851ef9c3becc2047a,"# Devices pre-vSphere-5.5 only reports capacityInKB, which has",0,1,0.1111111111111111,912
f952992f035ec130b7608e9851ef9c3becc2047a,# attribute is absent.,0,1,0.1111111111111111,913
f952992f035ec130b7608e9851ef9c3becc2047a,return device.capacityInBytes,0,1,0.1111111111111111,914
f952992f035ec130b7608e9851ef9c3becc2047a,return device.capacityInKB * units.Ki,0,1,0.1111111111111111,915
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_device_disk_type(device):,0,1,0.1111111111111111,916
f952992f035ec130b7608e9851ef9c3becc2047a,return constants.DISK_TYPE_THIN,0,1,0.1111111111111111,917
f952992f035ec130b7608e9851ef9c3becc2047a,return constants.DISK_TYPE_EAGER_ZEROED_THICK,0,1,0.1111111111111111,918
f952992f035ec130b7608e9851ef9c3becc2047a,return constants.DEFAULT_DISK_TYPE,0,1,0.1111111111111111,919
f952992f035ec130b7608e9851ef9c3becc2047a,capacity_in_bytes = 0,0,1,0.1111111111111111,920
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_device = None,0,1,0.1111111111111111,921
f952992f035ec130b7608e9851ef9c3becc2047a,root_disk = None,0,1,0.1111111111111111,922
f952992f035ec130b7608e9851ef9c3becc2047a,root_device = None,0,1,0.1111111111111111,923
f952992f035ec130b7608e9851ef9c3becc2047a,path = ds_obj.DatastorePath.parse(device.backing.fileName),0,1,0.1111111111111111,924
f952992f035ec130b7608e9851ef9c3becc2047a,if root_disk and path.basename == root_disk:,0,1,0.1111111111111111,925
f952992f035ec130b7608e9851ef9c3becc2047a,root_device = device,0,1,0.1111111111111111,926
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_device = device,0,1,0.1111111111111111,927
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_device = root_device,0,1,0.1111111111111111,928
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_file_path = vmdk_device.backing.fileName,0,1,0.1111111111111111,929
f952992f035ec130b7608e9851ef9c3becc2047a,capacity_in_bytes = _get_device_capacity(vmdk_device),0,1,0.1111111111111111,930
f952992f035ec130b7608e9851ef9c3becc2047a,def __init__(self):,0,1,0.1111111111111111,931
f952992f035ec130b7608e9851ef9c3becc2047a,"def Logout(self, session_manager):",0,1,0.1111111111111111,932
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type = adapter_type_dict.get(vmdk_controller_key),0,1,0.1111111111111111,933
f952992f035ec130b7608e9851ef9c3becc2047a,class FakeService(DataObject):,0,1,0.1111111111111111,934
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Unregistering the VM""), instance=instance)",1,1,0.1111111111111111,935
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Unregistered the VM""), instance=instance)",1,1,0.1111111111111111,936
f952992f035ec130b7608e9851ef9c3becc2047a,"""datastore %(datastore_name)s"") %",1,1,0.1111111111111111,937
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Rescue VM configured""), instance=instance)",1,1,0.1111111111111111,938
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Rescue VM destroyed""), instance=instance)",1,1,0.1111111111111111,939
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Suspending the VM""), instance=instance)",1,1,0.1111111111111111,940
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Suspended the VM""), instance=instance)",1,1,0.1111111111111111,941
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Resuming the VM""), instance=instance)",1,1,0.1111111111111111,942
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Resumed the VM""), instance=instance)",1,1,0.1111111111111111,943
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Updating instance '%(instance_uuid)s' progress to""",1,1,0.1111111111111111,944
f952992f035ec130b7608e9851ef9c3becc2047a,""" %(progress)d""),",1,1,0.1111111111111111,945
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Destroying the VM""), instance=instance)",1,1,0.1111111111111111,946
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Destroyed the VM""), instance=instance)",1,1,0.1111111111111111,947
f952992f035ec130b7608e9851ef9c3becc2047a,"""port - %(port)s"") % {'port': port},",1,1,0.1111111111111111,948
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Will copy while retaining adapter type """,1,1,0.1111111111111111,949
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM %(uuid)s is currently on host %(host_name)s""),",1,1,0.1111111111111111,950
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Importing image upload handler: %s""),",1,1,0.1111111111111111,951
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Skip agent setup, unable to contact agent.""),",1,1,0.1111111111111111,952
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Finished snapshot and upload for VM""),",1,1,0.1111111111111111,953
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Updating progress to %d""), progress,",1,1,0.1111111111111111,954
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Clean shutdown did not complete successfully, """,1,1,0.1111111111111111,955
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Read-only migrated for disk: %s""), userdevice,",1,1,0.1111111111111111,956
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Not resizing the root volume.""),",1,1,0.1111111111111111,957
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Using RAW or VHD, skipping kernel and ramdisk """,1,1,0.1111111111111111,958
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Injecting network info to xenstore""), instance=instance)",1,1,0.1111111111111111,959
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Creating VIF for network %s'),",1,1,0.1111111111111111,960
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Removing hostname from xenstore""), instance=instance)",1,1,0.1111111111111111,961
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_controller_key = vmdk_device.controllerKey,0,1,0.1111111111111111,962
f952992f035ec130b7608e9851ef9c3becc2047a,capacity_in_bytes = None,1,1,0.1111111111111111,963
f952992f035ec130b7608e9851ef9c3becc2047a,_urlparse = urlparse.urlparse(base_url),1,1,0.1111111111111111,964
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, glance_read_iter):",1,1,0.1111111111111111,965
f952992f035ec130b7608e9851ef9c3becc2047a,self.iter = self.get_next(),1,1,0.1111111111111111,966
f952992f035ec130b7608e9851ef9c3becc2047a,"def read(self, chunk_size):",1,1,0.1111111111111111,967
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",1,1,0.1111111111111111,968
f952992f035ec130b7608e9851ef9c3becc2047a,return self.iter.next(),1,1,0.1111111111111111,969
f952992f035ec130b7608e9851ef9c3becc2047a,"return """"",1,1,0.1111111111111111,970
f952992f035ec130b7608e9851ef9c3becc2047a,def get_next(self):,1,1,0.1111111111111111,971
f952992f035ec130b7608e9851ef9c3becc2047a,yield data,1,1,0.1111111111111111,972
f952992f035ec130b7608e9851ef9c3becc2047a,def close(self):,1,1,0.1111111111111111,973
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""A dummy close just to maintain consistency.""""""",1,1,0.1111111111111111,974
f952992f035ec130b7608e9851ef9c3becc2047a,class VMwareHTTPFile(object):,1,1,0.1111111111111111,975
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, file_handle):",1,1,0.1111111111111111,976
f952992f035ec130b7608e9851ef9c3becc2047a,self.file_handle = file_handle,1,1,0.1111111111111111,977
f952992f035ec130b7608e9851ef9c3becc2047a,"def set_eof(self, eof):",1,1,0.1111111111111111,978
f952992f035ec130b7608e9851ef9c3becc2047a,self.eof = eof,1,1,0.1111111111111111,979
f952992f035ec130b7608e9851ef9c3becc2047a,def get_eof(self):,1,1,0.1111111111111111,980
f952992f035ec130b7608e9851ef9c3becc2047a,return self.eof,1,1,0.1111111111111111,981
f952992f035ec130b7608e9851ef9c3becc2047a,"def _build_vim_cookie_headers(self, vim_cookies):",1,1,0.1111111111111111,982
f952992f035ec130b7608e9851ef9c3becc2047a,"def write(self, data):",1,1,0.1111111111111111,983
f952992f035ec130b7608e9851ef9c3becc2047a,def get_size(self):,1,1,0.1111111111111111,984
f952992f035ec130b7608e9851ef9c3becc2047a,"base_url = (""%s://[%s]:%s/folder/%s""",1,1,0.1111111111111111,985
f952992f035ec130b7608e9851ef9c3becc2047a,"% (scheme, host, port, urllib.pathname2url(file_path)))",1,1,0.1111111111111111,986
f952992f035ec130b7608e9851ef9c3becc2047a,"base_url = (""%s://%s:%s/folder/%s""",1,1,0.1111111111111111,987
f952992f035ec130b7608e9851ef9c3becc2047a,class VMwareHTTPWriteFile(VMwareHTTPFile):,1,1,0.1111111111111111,988
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, host, port, data_center_name, datastore_name, cookies,",1,1,0.1111111111111111,989
f952992f035ec130b7608e9851ef9c3becc2047a,"base_url = self._get_base_url(scheme, host, port, file_path)",1,1,0.1111111111111111,990
f952992f035ec130b7608e9851ef9c3becc2047a,"param_list = {""dcPath"": data_center_name, ""dsName"": datastore_name}",1,1,0.1111111111111111,991
f952992f035ec130b7608e9851ef9c3becc2047a,"base_url = base_url + ""?"" + urllib.urlencode(param_list)",1,1,0.1111111111111111,992
f952992f035ec130b7608e9851ef9c3becc2047a,self.glance_read_iter = glance_read_iter,1,1,0.1111111111111111,993
f952992f035ec130b7608e9851ef9c3becc2047a,class GlanceFileRead(object):,1,1,0.1111111111111111,994
f952992f035ec130b7608e9851ef9c3becc2047a,if uuid in device.backing.fileName:,1,1,0.1111111111111111,995
f952992f035ec130b7608e9851ef9c3becc2047a,READ_CHUNKSIZE = 65536,1,1,0.1111111111111111,996
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_file_path = device.backing.fileName,1,1,0.1111111111111111,997
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_controller_key = device.controllerKey,1,1,0.1111111111111111,998
f952992f035ec130b7608e9851ef9c3becc2047a,"# Devices pre-vSphere-5.5 only reports capacityInKB, which has",1,1,0.1111111111111111,999
f952992f035ec130b7608e9851ef9c3becc2047a,# attribute is absent.,1,1,0.1111111111111111,1000
f952992f035ec130b7608e9851ef9c3becc2047a,capacity_in_bytes = device.capacityInBytes,1,1,0.1111111111111111,1001
f952992f035ec130b7608e9851ef9c3becc2047a,capacity_in_bytes = device.capacityInKB * units.Ki,1,1,0.1111111111111111,1002
f952992f035ec130b7608e9851ef9c3becc2047a,"disk_type = ""thin""",1,1,0.1111111111111111,1003
f952992f035ec130b7608e9851ef9c3becc2047a,"disk_type = ""eagerZeroedThick""",1,1,0.1111111111111111,1004
f952992f035ec130b7608e9851ef9c3becc2047a,disk_type = constants.DEFAULT_DISK_TYPE,1,1,0.1111111111111111,1005
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type = adapter_type_dict.get(vmdk_controller_key, """")",1,1,0.1111111111111111,1006
f952992f035ec130b7608e9851ef9c3becc2047a,write_file_handle = rw_handles.FileWriteHandle(,0,1,0.1111111111111111,1007
f952992f035ec130b7608e9851ef9c3becc2047a,read_file_handle = rw_handles.ImageReadHandle(read_iter),0,1,0.1111111111111111,1008
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.virt.vmwareapi import read_write_util,1,1,0.1111111111111111,1009
f952992f035ec130b7608e9851ef9c3becc2047a,write_file_handle = read_write_util.VMwareHTTPWriteFile(,1,1,0.1111111111111111,1010
f952992f035ec130b7608e9851ef9c3becc2047a,read_file_handle = read_write_util.GlanceFileRead(read_iter),1,1,0.1111111111111111,1011
f952992f035ec130b7608e9851ef9c3becc2047a,from oslo.vmware import rw_handles,0,1,0.1111111111111111,1012
f952992f035ec130b7608e9851ef9c3becc2047a,class VMwareHTTPReadFile(rw_handles.FileHandle):,0,1,0.1111111111111111,1013
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, host, port, data_center_name, datastore_name, cookies,",0,1,0.1111111111111111,1014
f952992f035ec130b7608e9851ef9c3becc2047a,"self._base_url = self._get_base_url(scheme, host, port, file_path)",0,1,0.1111111111111111,1015
f952992f035ec130b7608e9851ef9c3becc2047a,"param_list = {""dcPath"": data_center_name, ""dsName"": datastore_name}",0,1,0.1111111111111111,1016
f952992f035ec130b7608e9851ef9c3becc2047a,"self._base_url = self._base_url + ""?"" + urllib.urlencode(param_list)",0,1,0.1111111111111111,1017
f952992f035ec130b7608e9851ef9c3becc2047a,"self._conn = self._create_read_connection(self._base_url,",0,1,0.1111111111111111,1018
f952992f035ec130b7608e9851ef9c3becc2047a,return self._file_handle.read(rw_handles.READ_CHUNKSIZE),0,1,0.1111111111111111,1019
f952992f035ec130b7608e9851ef9c3becc2047a,"return self._file_handle.headers.get(""Content-Length"", -1)",0,1,0.1111111111111111,1020
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.openstack.common import log as logging,1,1,0.1111111111111111,1021
f952992f035ec130b7608e9851ef9c3becc2047a,LOG = logging.getLogger(__name__),1,1,0.1111111111111111,1022
f952992f035ec130b7608e9851ef9c3becc2047a,"USER_AGENT = ""OpenStack-ESX-Adapter""",1,1,0.1111111111111111,1023
f952992f035ec130b7608e9851ef9c3becc2047a,return vim.get_service_content().about,0,1,0.1111111111111111,1024
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_dict[""extra_config""] = extraConfigs",0,1,0.1111111111111111,1025
f952992f035ec130b7608e9851ef9c3becc2047a,return property_dict,0,1,0.1111111111111111,1026
f952992f035ec130b7608e9851ef9c3becc2047a,cookies = \,0,1,0.1111111111111111,1027
f952992f035ec130b7608e9851ef9c3becc2047a,"disk_type = ""thin""",0,1,0.1111111111111111,1028
f952992f035ec130b7608e9851ef9c3becc2047a,root_disk = driver.block_device_info_get_mapping(,0,1,0.1111111111111111,1029
f952992f035ec130b7608e9851ef9c3becc2047a,connection_info = root_disk['connection_info'],0,1,0.1111111111111111,1030
f952992f035ec130b7608e9851ef9c3becc2047a,"name=""%s-snapshot"" % instance['name'],",0,1,0.1111111111111111,1031
f952992f035ec130b7608e9851ef9c3becc2047a,"def _delete(self, instance, network_info):",0,1,0.1111111111111111,1032
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",0,1,0.1111111111111111,1033
f952992f035ec130b7608e9851ef9c3becc2047a,2. Destroy the VM.,0,1,0.1111111111111111,1034
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session,",0,1,0.1111111111111111,1035
f952992f035ec130b7608e9851ef9c3becc2047a,return,0,1,0.1111111111111111,1036
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Destroying the VM""), instance=instance)",0,1,0.1111111111111111,1037
f952992f035ec130b7608e9851ef9c3becc2047a,destroy_task = self._session._call_method(,0,1,0.1111111111111111,1038
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Destroyed the VM""), instance=instance)",0,1,0.1111111111111111,1039
f952992f035ec130b7608e9851ef9c3becc2047a,"reason = _(""instance is powered off and cannot be suspended."")",0,1,0.1111111111111111,1040
f952992f035ec130b7608e9851ef9c3becc2047a,"def rescue(self, context, instance, network_info, image_meta):",0,1,0.1111111111111111,1041
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Rescue the specified instance.",0,1,0.1111111111111111,1042
f952992f035ec130b7608e9851ef9c3becc2047a,instance['name'] = instance['name'] + self._rescue_suffix,0,1,0.1111111111111111,1043
f952992f035ec130b7608e9851ef9c3becc2047a,"hardware_devices = self._session._call_method(vim_util,",0,1,0.1111111111111111,1044
f952992f035ec130b7608e9851ef9c3becc2047a,"""get_dynamic_property"", vm_ref,",0,1,0.1111111111111111,1045
f952992f035ec130b7608e9851ef9c3becc2047a,= vm_util.get_vmdk_path_and_adapter_type(hardware_devices),0,1,0.1111111111111111,1046
f952992f035ec130b7608e9851ef9c3becc2047a,unit_number = unit_number + 1,0,1,0.1111111111111111,1047
f952992f035ec130b7608e9851ef9c3becc2047a,"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",0,1,0.1111111111111111,1048
f952992f035ec130b7608e9851ef9c3becc2047a,"def unrescue(self, instance):",0,1,0.1111111111111111,1049
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Unrescue the specified instance.""""""",0,1,0.1111111111111111,1050
f952992f035ec130b7608e9851ef9c3becc2047a,instance_orig_name = instance['name'],0,1,0.1111111111111111,1051
f952992f035ec130b7608e9851ef9c3becc2047a,instance['name'] = instance_orig_name,0,1,0.1111111111111111,1052
f952992f035ec130b7608e9851ef9c3becc2047a,"def power_off(self, instance):",0,1,0.1111111111111111,1053
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Power off the specified instance.""""""",0,1,0.1111111111111111,1054
f952992f035ec130b7608e9851ef9c3becc2047a,"if disk_type == ""sparse"":",0,1,0.1111111111111111,1055
f952992f035ec130b7608e9851ef9c3becc2047a,dc_ref = self._get_datacenter_ref_and_name()[0],0,1,0.1111111111111111,1056
f952992f035ec130b7608e9851ef9c3becc2047a,# Only PoweredOn VMs can be powered off.,0,1,0.1111111111111111,1057
f952992f035ec130b7608e9851ef9c3becc2047a,sparse_uploaded_vmdk_path = vm_util.build_datastore_path(,0,1,0.1111111111111111,1058
f952992f035ec130b7608e9851ef9c3becc2047a,data_store_ref = ds[0],0,1,0.1111111111111111,1059
f952992f035ec130b7608e9851ef9c3becc2047a,data_store_name = ds[1],0,1,0.1111111111111111,1060
f952992f035ec130b7608e9851ef9c3becc2047a,"disk_type = image_properties.get(""vmware_disktype"",",0,1,0.1111111111111111,1061
f952992f035ec130b7608e9851ef9c3becc2047a,"return vmdk_file_size_in_kb, os_type, adapter_type, disk_type",0,1,0.1111111111111111,1062
f952992f035ec130b7608e9851ef9c3becc2047a,disk_type) = _get_image_properties(),0,1,0.1111111111111111,1063
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_folder_ref, res_pool_ref = self._get_vmfolder_and_res_pool_refs()",0,1,0.1111111111111111,1064
f952992f035ec130b7608e9851ef9c3becc2047a,return vif_infos,0,1,0.1111111111111111,1065
f952992f035ec130b7608e9851ef9c3becc2047a,vnc_port = self._get_vnc_port(vm_ref),0,1,0.1111111111111111,1066
f952992f035ec130b7608e9851ef9c3becc2047a,vnc_pass = CONF.vnc_password or '',0,1,0.1111111111111111,1067
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(vmdk_file_size_in_kb)s KB and adapter type """,0,1,0.1111111111111111,1068
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(data_store_name)s"") %",0,1,0.1111111111111111,1069
f952992f035ec130b7608e9851ef9c3becc2047a,def _delete_disk_file(vmdk_path):,0,1,0.1111111111111111,1070
f952992f035ec130b7608e9851ef9c3becc2047a,# we just created above,0,1,0.1111111111111111,1071
f952992f035ec130b7608e9851ef9c3becc2047a,upload_vmdk_name = sparse_uploaded_vmdk_name \,0,1,0.1111111111111111,1072
f952992f035ec130b7608e9851ef9c3becc2047a,"if disk_type == ""sparse"" else flat_uploaded_vmdk_name",0,1,0.1111111111111111,1073
f952992f035ec130b7608e9851ef9c3becc2047a,def _copy_virtual_disk():,0,1,0.1111111111111111,1074
f952992f035ec130b7608e9851ef9c3becc2047a,# storage adapter type.,0,1,0.1111111111111111,1075
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_copy_spec = vm_util.get_vmdk_create_spec(client_factory,",0,1,0.1111111111111111,1076
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_copy_task = self._session._call_method(,0,1,0.1111111111111111,1077
f952992f035ec130b7608e9851ef9c3becc2047a,"ebs_root = self._volume_in_mapping(self._default_root_device,",0,1,0.1111111111111111,1078
f952992f035ec130b7608e9851ef9c3becc2047a,linked_clone = CONF.use_linked_clone,0,1,0.1111111111111111,1079
f952992f035ec130b7608e9851ef9c3becc2047a,upload_folder = self._instance_path_base,0,1,0.1111111111111111,1080
f952992f035ec130b7608e9851ef9c3becc2047a,upload_name = instance['image_ref'],0,1,0.1111111111111111,1081
f952992f035ec130b7608e9851ef9c3becc2047a,upload_folder = instance['name'],0,1,0.1111111111111111,1082
f952992f035ec130b7608e9851ef9c3becc2047a,upload_name = instance['name'],0,1,0.1111111111111111,1083
f952992f035ec130b7608e9851ef9c3becc2047a,"uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",0,1,0.1111111111111111,1084
f952992f035ec130b7608e9851ef9c3becc2047a,flat_uploaded_vmdk_path = vm_util.build_datastore_path(,0,1,0.1111111111111111,1085
f952992f035ec130b7608e9851ef9c3becc2047a,"pwr_state = self._session._call_method(vim_util,",0,1,0.1111111111111111,1086
f952992f035ec130b7608e9851ef9c3becc2047a,"if pwr_state == ""poweredOn"":",0,1,0.1111111111111111,1087
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance['name'])",0,1,0.1111111111111111,1088
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.warn(_(""In vmwareapi:vmops:confirm_migration, got this """,0,1,0.1111111111111111,1089
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, name_label)",0,1,0.1111111111111111,1090
f952992f035ec130b7608e9851ef9c3becc2047a,"def finish_migration(self, context, migration, instance, disk_info,",0,1,0.1111111111111111,1091
f952992f035ec130b7608e9851ef9c3becc2047a,"def live_migration(self, context, instance_ref, dest,",0,1,0.1111111111111111,1092
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Spawning live_migration operation for distributing high-load.""""""",0,1,0.1111111111111111,1093
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_ref.name)",0,1,0.1111111111111111,1094
f952992f035ec130b7608e9851ef9c3becc2047a,vm_migrate_task = self._session._call_method(,0,1,0.1111111111111111,1095
f952992f035ec130b7608e9851ef9c3becc2047a,with excutils.save_and_reraise_exception():,0,1,0.1111111111111111,1096
f952992f035ec130b7608e9851ef9c3becc2047a,"def poll_rebooting_instances(self, timeout, instances):",0,1,0.1111111111111111,1097
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Poll for rebooting instances.""""""",0,1,0.1111111111111111,1098
f952992f035ec130b7608e9851ef9c3becc2047a,ctxt = nova_context.get_admin_context(),0,1,0.1111111111111111,1099
f952992f035ec130b7608e9851ef9c3becc2047a,"instances_info = dict(instance_count=len(instances),",0,1,0.1111111111111111,1100
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.info(_(""Found %(instance_count)d hung reboots """,0,1,0.1111111111111111,1101
f952992f035ec130b7608e9851ef9c3becc2047a,"""older than %(timeout)d seconds"") % instances_info)",0,1,0.1111111111111111,1102
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.info(_(""Automatically hard rebooting %d"") % instance['uuid'])",0,1,0.1111111111111111,1103
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vnc_console(self, instance):",0,1,0.1111111111111111,1104
f952992f035ec130b7608e9851ef9c3becc2047a,"return {'host': CONF.vmwareapi_host_ip,",0,1,0.1111111111111111,1105
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_vnc_port(vm_ref):,0,1,0.1111111111111111,1106
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_id = int(vm_ref.value.replace('vm-', ''))",0,1,0.1111111111111111,1107
f952992f035ec130b7608e9851ef9c3becc2047a,"def _set_vnc_config(self, client_factory, instance, port, password):",0,1,0.1111111111111111,1108
f952992f035ec130b7608e9851ef9c3becc2047a,vnc_config_spec = vm_util.get_vnc_config_spec(,0,1,0.1111111111111111,1109
f952992f035ec130b7608e9851ef9c3becc2047a,"""port - %(port)s"") % {'port': port},",0,1,0.1111111111111111,1110
f952992f035ec130b7608e9851ef9c3becc2047a,"reconfig_task = self._session._call_method(self._session._get_vim(),",0,1,0.1111111111111111,1111
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_datacenter_ref_and_name(self):,0,1,0.1111111111111111,1112
f952992f035ec130b7608e9851ef9c3becc2047a,"def _get_host_ref_from_name(self, host_name):",0,1,0.1111111111111111,1113
f952992f035ec130b7608e9851ef9c3becc2047a,"""HostSystem"", [""name""])",0,1,0.1111111111111111,1114
f952992f035ec130b7608e9851ef9c3becc2047a,if host.propSet[0].val == host_name:,0,1,0.1111111111111111,1115
f952992f035ec130b7608e9851ef9c3becc2047a,return host.obj,0,1,0.1111111111111111,1116
f952992f035ec130b7608e9851ef9c3becc2047a,"def finish_revert_migration(self, instance):",0,1,0.1111111111111111,1117
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",0,1,0.1111111111111111,1118
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Powering off the VM""), instance=instance)",0,1,0.1111111111111111,1119
f952992f035ec130b7608e9851ef9c3becc2047a,instance_name = self._get_orig_vm_name_label(instance),0,1,0.1111111111111111,1120
f952992f035ec130b7608e9851ef9c3becc2047a,poweroff_task = self._session._call_method(,0,1,0.1111111111111111,1121
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Powered off the VM""), instance=instance)",0,1,0.1111111111111111,1122
f952992f035ec130b7608e9851ef9c3becc2047a,"reason = _(""instance is suspended and cannot be powered off."")",0,1,0.1111111111111111,1123
f952992f035ec130b7608e9851ef9c3becc2047a,"def power_on(self, instance):",0,1,0.1111111111111111,1124
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Power on the specified instance.""""""",0,1,0.1111111111111111,1125
f952992f035ec130b7608e9851ef9c3becc2047a,# Only PoweredOff and Suspended VMs can be powered on.,0,1,0.1111111111111111,1126
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Powering on the VM""), instance=instance)",0,1,0.1111111111111111,1127
f952992f035ec130b7608e9851ef9c3becc2047a,poweron_task = self._session._call_method(,0,1,0.1111111111111111,1128
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Powered on the VM""), instance=instance)",0,1,0.1111111111111111,1129
f952992f035ec130b7608e9851ef9c3becc2047a,"def _get_orig_vm_name_label(self, instance):",0,1,0.1111111111111111,1130
f952992f035ec130b7608e9851ef9c3becc2047a,return instance['name'] + '-orig',0,1,0.1111111111111111,1131
f952992f035ec130b7608e9851ef9c3becc2047a,"def _update_instance_progress(self, context, instance, step, total_steps):",0,1,0.1111111111111111,1132
f952992f035ec130b7608e9851ef9c3becc2047a,# instance's progress field as each step is completed.,0,1,0.1111111111111111,1133
f952992f035ec130b7608e9851ef9c3becc2047a,#,0,1,0.1111111111111111,1134
f952992f035ec130b7608e9851ef9c3becc2047a,progress = round(float(step) / total_steps * 100),0,1,0.1111111111111111,1135
f952992f035ec130b7608e9851ef9c3becc2047a,instance_uuid = instance['uuid'],0,1,0.1111111111111111,1136
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Updating instance '%(instance_uuid)s' progress to""",0,1,0.1111111111111111,1137
f952992f035ec130b7608e9851ef9c3becc2047a,"def migrate_disk_and_power_off(self, context, instance, dest,",0,1,0.1111111111111111,1138
f952992f035ec130b7608e9851ef9c3becc2047a,host_ref = self._get_host_ref_from_name(dest),0,1,0.1111111111111111,1139
f952992f035ec130b7608e9851ef9c3becc2047a,name_label = self._get_orig_vm_name_label(instance),0,1,0.1111111111111111,1140
f952992f035ec130b7608e9851ef9c3becc2047a,rename_task = self._session._call_method(,0,1,0.1111111111111111,1141
f952992f035ec130b7608e9851ef9c3becc2047a,ds_ref = vm_util.get_datastore_ref_and_name(self._session)[0],0,1,0.1111111111111111,1142
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory = self._session._get_vim().client.factory,0,1,0.1111111111111111,1143
f952992f035ec130b7608e9851ef9c3becc2047a,"rel_spec = vm_util.relocate_vm_spec(client_factory, ds_ref, host_ref)",0,1,0.1111111111111111,1144
f952992f035ec130b7608e9851ef9c3becc2047a,"clone_spec = vm_util.clone_vm_spec(client_factory, rel_spec)",0,1,0.1111111111111111,1145
f952992f035ec130b7608e9851ef9c3becc2047a,vm_clone_task = self._session._call_method(,0,1,0.1111111111111111,1146
f952992f035ec130b7608e9851ef9c3becc2047a,"def confirm_migration(self, migration, instance, network_info):",0,1,0.1111111111111111,1147
f952992f035ec130b7608e9851ef9c3becc2047a,ds = vm_util.get_datastore_ref_and_name(self._session),0,1,0.1111111111111111,1148
f952992f035ec130b7608e9851ef9c3becc2047a,5. Power on the VM.,0,1,0.1111111111111111,1149
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_vmfolder_and_res_pool_refs(self):,0,1,0.1111111111111111,1150
f952992f035ec130b7608e9851ef9c3becc2047a,create_vmdk_spec = client_factory.create('ns0:FileBackedVirtualDiskSpec'),0,1,0.1111111111111111,1151
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_device_config = \,1,1,0.1111111111111111,1152
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:VirtualDeviceConfigSpec'),1,1,0.1111111111111111,1153
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_lsi = \,1,1,0.1111111111111111,1154
f952992f035ec130b7608e9851ef9c3becc2047a,network_spec = \,1,1,0.1111111111111111,1155
f952992f035ec130b7608e9851ef9c3becc2047a,backing_name = \,1,1,0.1111111111111111,1156
f952992f035ec130b7608e9851ef9c3becc2047a,backing = \,1,1,0.1111111111111111,1157
f952992f035ec130b7608e9851ef9c3becc2047a,portgroup = \,1,1,0.1111111111111111,1158
f952992f035ec130b7608e9851ef9c3becc2047a,"== ""VirtualDiskFlatVer2BackingInfo"":",1,1,0.1111111111111111,1159
f952992f035ec130b7608e9851ef9c3becc2047a,create_vmdk_spec = \,1,1,0.1111111111111111,1160
f952992f035ec130b7608e9851ef9c3becc2047a,disk_file_backing = \,1,1,0.1111111111111111,1161
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_machine_config_spec = \,1,1,0.1111111111111111,1162
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:VirtualMachineConfigSpec'),1,1,0.1111111111111111,1163
f952992f035ec130b7608e9851ef9c3becc2047a,"vmware_vif_driver_opt = cfg.StrOpt('vmware_vif_driver',",0,1,0.1111111111111111,1164
f952992f035ec130b7608e9851ef9c3becc2047a,"_image_info = vmware_images.get_vmdk_size_and_properties(context,",0,1,0.1111111111111111,1165
f952992f035ec130b7608e9851ef9c3becc2047a,"image_size, image_properties = _image_info",0,1,0.1111111111111111,1166
f952992f035ec130b7608e9851ef9c3becc2047a,network_ref = network_utils.get_network_with_the_name(,0,1,0.1111111111111111,1167
f952992f035ec130b7608e9851ef9c3becc2047a,_vmdk_info = vm_util.get_vmdk_file_path_and_adapter_type(,0,1,0.1111111111111111,1168
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_path_before_snapshot, adapter_type = _vmdk_info",0,1,0.1111111111111111,1169
f952992f035ec130b7608e9851ef9c3becc2047a,os_type) = _get_vm_and_vmdk_attribs(),0,1,0.1111111111111111,1170
f952992f035ec130b7608e9851ef9c3becc2047a,_ds_path = vm_util.split_datastore_path(vm_config_pathname),0,1,0.1111111111111111,1171
f952992f035ec130b7608e9851ef9c3becc2047a,"datastore_name, vmx_file_path = _ds_path",0,1,0.1111111111111111,1172
f952992f035ec130b7608e9851ef9c3becc2047a,"interface_str = "";"".join([info['mac'],",0,1,0.1111111111111111,1173
f952992f035ec130b7608e9851ef9c3becc2047a,machine_id_change_spec = vm_util.get_machine_id_change_spec(,0,1,0.1111111111111111,1174
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.info(_('Latest agent build for %(hypervisor)s/%(os)s',0,1,0.1111111111111111,1175
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.info(_('No agent build found for %(hypervisor)s/%(os)s',0,1,0.1111111111111111,1176
f952992f035ec130b7608e9851ef9c3becc2047a,_snapshot_info = self._create_snapshot(instance),0,1,0.1111111111111111,1177
f952992f035ec130b7608e9851ef9c3becc2047a,"template_vm_ref, template_vdi_uuids = _snapshot_info",0,1,0.1111111111111111,1178
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_machine_config_spec = client_factory.create(,0,1,0.1111111111111111,1179
f952992f035ec130b7608e9851ef9c3becc2047a,device.backing.__class__.__name__ ==,0,1,0.1111111111111111,1180
f952992f035ec130b7608e9851ef9c3becc2047a,"vdi_ref, vm_vdi_rec = _vdi_info",0,1,0.1111111111111111,1181
f952992f035ec130b7608e9851ef9c3becc2047a,"if (device.__class__.__name__ == ""VirtualDisk"" and",0,1,0.1111111111111111,1182
f952992f035ec130b7608e9851ef9c3becc2047a,dynamic_properties = obj_content.objects[0].propSet,0,1,0.1111111111111111,1183
f952992f035ec130b7608e9851ef9c3becc2047a,"flat_vmdk_file_path = vmdk_file_path.replace("".vmdk"", ""-flat.vmdk"")",0,1,0.1111111111111111,1184
f952992f035ec130b7608e9851ef9c3becc2047a,"_host_sk = _db_content[""HostSystem""].keys()[0]",0,1,0.1111111111111111,1185
f952992f035ec130b7608e9851ef9c3becc2047a,"host_mdo = _db_content[""HostSystem""][_host_sk]",0,1,0.1111111111111111,1186
f952992f035ec130b7608e9851ef9c3becc2047a,"_session_info = {'uuid': str(uuid.uuid4()),",0,1,0.1111111111111111,1187
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content['session'][self._session] = _session_info,0,1,0.1111111111111111,1188
f952992f035ec130b7608e9851ef9c3becc2047a,ref = (is_sr_create and,0,1,0.1111111111111111,1189
f952992f035ec130b7608e9851ef9c3becc2047a,flat_vmdk_file_path = \,1,1,0.1111111111111111,1190
f952992f035ec130b7608e9851ef9c3becc2047a,host_mdo = \,1,1,0.1111111111111111,1191
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content['session'][self._session] = \,1,1,0.1111111111111111,1192
f952992f035ec130b7608e9851ef9c3becc2047a,ref = is_sr_create and \,1,1,0.1111111111111111,1193
f952992f035ec130b7608e9851ef9c3becc2047a,"vmwareapi_wsdl_loc_opt = cfg.StrOpt('vmwareapi_wsdl_loc',",0,1,0.1111111111111111,1194
f952992f035ec130b7608e9851ef9c3becc2047a,"self._service_content = self.RetrieveServiceContent(""ServiceInstance"")",0,1,0.1111111111111111,1195
f952992f035ec130b7608e9851ef9c3becc2047a,request_mo = self._request_managed_object_builder(,0,1,0.1111111111111111,1196
f952992f035ec130b7608e9851ef9c3becc2047a,vmwareapi_wsdl_loc_opt = \,1,1,0.1111111111111111,1197
f952992f035ec130b7608e9851ef9c3becc2047a,self._service_content = \,1,1,0.1111111111111111,1198
f952992f035ec130b7608e9851ef9c3becc2047a,request_mo = \,1,1,0.1111111111111111,1199
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_content = get_object_properties(vim, None, mobj, type, [property_name])",0,1,0.1111111111111111,1200
f952992f035ec130b7608e9851ef9c3becc2047a,prop_filter_spec = client_factory.create('ns0:PropertyFilterSpec'),0,1,0.1111111111111111,1201
f952992f035ec130b7608e9851ef9c3becc2047a,obj_content = \,1,1,0.1111111111111111,1202
f952992f035ec130b7608e9851ef9c3becc2047a,prop_filter_spec = \,1,1,0.1111111111111111,1203
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_device_config = client_factory.create(,0,1,0.1111111111111111,1204
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_lsi = client_factory.create('ns0:VirtualLsiLogicController'),0,1,0.1111111111111111,1205
f952992f035ec130b7608e9851ef9c3becc2047a,"backing_name = ''.join(['ns0:VirtualEthernetCardDistributed',",0,1,0.1111111111111111,1206
f952992f035ec130b7608e9851ef9c3becc2047a,backing = client_factory.create(backing_name),0,1,0.1111111111111111,1207
f952992f035ec130b7608e9851ef9c3becc2047a,portgroup = client_factory.create(,0,1,0.1111111111111111,1208
f952992f035ec130b7608e9851ef9c3becc2047a,backing = client_factory.create(,0,1,0.1111111111111111,1209
f952992f035ec130b7608e9851ef9c3becc2047a,"_vdi_info = VMHelper.get_vdi_for_vm_safely(self._session, vm_ref)",0,1,0.1111111111111111,1210
f952992f035ec130b7608e9851ef9c3becc2047a,' network %(network_ref)s.') % locals()),0,1,0.1111111111111111,1211
f952992f035ec130b7608e9851ef9c3becc2047a,3.3. Delete the -sparse.vmdk file.,0,1,0.1111111111111111,1212
f952992f035ec130b7608e9851ef9c3becc2047a,"return self._vmops.migrate_disk_and_power_off(context, instance,",0,1,0.1111111111111111,1213
f952992f035ec130b7608e9851ef9c3becc2047a,"def finish_revert_migration(self, instance, network_info,",0,1,0.1111111111111111,1214
f952992f035ec130b7608e9851ef9c3becc2047a,"def finish_migration(self, context, migration, instance, disk_info,",0,1,0.1111111111111111,1215
f952992f035ec130b7608e9851ef9c3becc2047a,"def live_migration(self, context, instance_ref, dest,",0,1,0.1111111111111111,1216
f952992f035ec130b7608e9851ef9c3becc2047a,"def poll_rebooting_instances(self, timeout, instances):",0,1,0.1111111111111111,1217
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Poll for rebooting instances.""""""",0,1,0.1111111111111111,1218
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_vnc_console(self, instance):",0,1,0.1111111111111111,1219
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Return link to instance's VNC console.""""""",0,1,0.1111111111111111,1220
f952992f035ec130b7608e9851ef9c3becc2047a,return self._vmops.get_vnc_console(instance),0,1,0.1111111111111111,1221
f952992f035ec130b7608e9851ef9c3becc2047a,(default: 1.0).,1,1,0.1111111111111111,1222
f952992f035ec130b7608e9851ef9c3becc2047a,(default: 10).,1,1,0.1111111111111111,1223
f952992f035ec130b7608e9851ef9c3becc2047a,self._vmops = vmops.VMwareVMOps(self._session),1,1,0.1111111111111111,1224
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.openstack.common import excutils,0,1,0.1111111111111111,1225
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.openstack.common import timeutils,0,1,0.1111111111111111,1226
f952992f035ec130b7608e9851ef9c3becc2047a,from nova.virt import driver,0,1,0.1111111111111111,1227
f952992f035ec130b7608e9851ef9c3becc2047a,VMWARE_PREFIX = 'vmware',0,1,0.1111111111111111,1228
f952992f035ec130b7608e9851ef9c3becc2047a,RESIZE_TOTAL_STEPS = 4,0,1,0.1111111111111111,1229
f952992f035ec130b7608e9851ef9c3becc2047a,self.compute_api = compute.API(),0,1,0.1111111111111111,1230
f952992f035ec130b7608e9851ef9c3becc2047a,self._virtapi = virtapi,0,1,0.1111111111111111,1231
f952992f035ec130b7608e9851ef9c3becc2047a,self._volumeops = volumeops,0,1,0.1111111111111111,1232
f952992f035ec130b7608e9851ef9c3becc2047a,self._instance_path_base = VMWARE_PREFIX + CONF.base_dir_name,0,1,0.1111111111111111,1233
f952992f035ec130b7608e9851ef9c3becc2047a,self._default_root_device = 'vda',0,1,0.1111111111111111,1234
f952992f035ec130b7608e9851ef9c3becc2047a,self._rescue_suffix = '-rescue',0,1,0.1111111111111111,1235
f952992f035ec130b7608e9851ef9c3becc2047a,self._poll_rescue_last_ran = None,0,1,0.1111111111111111,1236
f952992f035ec130b7608e9851ef9c3becc2047a,"def spawn(self, context, instance, image_meta, network_info,",0,1,0.1111111111111111,1237
f952992f035ec130b7608e9851ef9c3becc2047a,2. For flat disk,0,1,0.1111111111111111,1238
f952992f035ec130b7608e9851ef9c3becc2047a,the metadata .vmdk file.,0,1,0.1111111111111111,1239
f952992f035ec130b7608e9851ef9c3becc2047a,3. For sparse disk,0,1,0.1111111111111111,1240
f952992f035ec130b7608e9851ef9c3becc2047a,"def confirm_migration(self, migration, instance, network_info):",0,1,0.1111111111111111,1241
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",0,1,0.1111111111111111,1242
f952992f035ec130b7608e9851ef9c3becc2047a,vmware_vif_driver_opt = \,1,1,0.1111111111111111,1243
f952992f035ec130b7608e9851ef9c3becc2047a,"def migrate_disk_and_power_off(self, context, instance, dest,",0,1,0.1111111111111111,1244
f952992f035ec130b7608e9851ef9c3becc2047a,"image_size, image_properties = \",1,1,0.1111111111111111,1245
f952992f035ec130b7608e9851ef9c3becc2047a,network_ref = \,1,1,0.1111111111111111,1246
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_path_before_snapshot, adapter_type = \",1,1,0.1111111111111111,1247
f952992f035ec130b7608e9851ef9c3becc2047a,os_type = _get_vm_and_vmdk_attribs(),1,1,0.1111111111111111,1248
f952992f035ec130b7608e9851ef9c3becc2047a,"datastore_name, vmx_file_path = \",1,1,0.1111111111111111,1249
f952992f035ec130b7608e9851ef9c3becc2047a,machine_id_change_spec = \,1,1,0.1111111111111111,1250
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.info(_('Latest agent build for %(hypervisor)s/%(os)s' + \,1,1,0.1111111111111111,1251
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.info(_('No agent build found for %(hypervisor)s/%(os)s' + \,1,1,0.1111111111111111,1252
f952992f035ec130b7608e9851ef9c3becc2047a,"template_vm_ref, template_vdi_uuids = \",1,1,0.1111111111111111,1253
f952992f035ec130b7608e9851ef9c3becc2047a,"vdi_ref, vm_vdi_rec = \",1,1,0.1111111111111111,1254
f952992f035ec130b7608e9851ef9c3becc2047a,"path = ""/console?ref=%s&session_id=%s""\",1,1,0.1111111111111111,1255
f952992f035ec130b7608e9851ef9c3becc2047a,"% (str(vm_ref), session_id)",1,1,0.1111111111111111,1256
f952992f035ec130b7608e9851ef9c3becc2047a,' network %(network_ref)s.') % locals()),1,1,0.1111111111111111,1257
f952992f035ec130b7608e9851ef9c3becc2047a,"# Copyright (c) 2012 VMware, Inc.",0,1,0.1111111111111111,1258
f952992f035ec130b7608e9851ef9c3becc2047a,(default: 5.0).,0,1,0.1111111111111111,1259
f952992f035ec130b7608e9851ef9c3becc2047a,(default: 10).,0,1,0.1111111111111111,1260
f952992f035ec130b7608e9851ef9c3becc2047a,"help='Total number of VNC ports'),",0,1,0.1111111111111111,1261
f952992f035ec130b7608e9851ef9c3becc2047a,"help='Whether to use linked clone'),",0,1,0.1111111111111111,1262
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops = vmops.VMwareVMOps(self._session, self.virtapi,",0,1,0.1111111111111111,1263
f952992f035ec130b7608e9851ef9c3becc2047a,"def rescue(self, context, instance, network_info, image_meta,",0,1,0.1111111111111111,1264
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Rescue the specified instance.""""""",0,1,0.1111111111111111,1265
f952992f035ec130b7608e9851ef9c3becc2047a,"def unrescue(self, instance, network_info):",0,1,0.1111111111111111,1266
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Unrescue the specified instance.""""""",0,1,0.1111111111111111,1267
f952992f035ec130b7608e9851ef9c3becc2047a,"def power_off(self, instance):",0,1,0.1111111111111111,1268
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Power off the specified instance.""""""",0,1,0.1111111111111111,1269
f952992f035ec130b7608e9851ef9c3becc2047a,"def power_on(self, instance):",0,1,0.1111111111111111,1270
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Power on the specified instance.""""""",0,1,0.1111111111111111,1271
f952992f035ec130b7608e9851ef9c3becc2047a,return None,0,1,0.1111111111111111,1272
f952992f035ec130b7608e9851ef9c3becc2047a,disk_file_backing = client_factory.create(,0,1,0.1111111111111111,1273
f952992f035ec130b7608e9851ef9c3becc2047a,vm_folder_ref = dc_objs[0].propSet[0].val,0,1,0.1111111111111111,1274
f952992f035ec130b7608e9851ef9c3becc2047a,summary.effectiveMemory = 0,0,1,0.1111111111111111,1275
f952992f035ec130b7608e9851ef9c3becc2047a,"r_pools = self.get(""resourcePool"")",0,1,0.1111111111111111,1276
f952992f035ec130b7608e9851ef9c3becc2047a,r_pools.ManagedObjectReference = [],0,1,0.1111111111111111,1277
f952992f035ec130b7608e9851ef9c3becc2047a,"def _add_host(self, host_sys):",0,1,0.1111111111111111,1278
f952992f035ec130b7608e9851ef9c3becc2047a,"hosts = self.get(""host"")",0,1,0.1111111111111111,1279
f952992f035ec130b7608e9851ef9c3becc2047a,hosts.ManagedObjectReference = [],0,1,0.1111111111111111,1280
f952992f035ec130b7608e9851ef9c3becc2047a,"def _add_datastore(self, datastore):",0,1,0.1111111111111111,1281
f952992f035ec130b7608e9851ef9c3becc2047a,"datastores = self.get(""datastore"")",0,1,0.1111111111111111,1282
f952992f035ec130b7608e9851ef9c3becc2047a,datastores.ManagedObjectReference = [],0,1,0.1111111111111111,1283
f952992f035ec130b7608e9851ef9c3becc2047a,def _update_summary(self):,0,1,0.1111111111111111,1284
f952992f035ec130b7608e9851ef9c3becc2047a,"summary = self.get(""summary"")",0,1,0.1111111111111111,1285
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numHosts = len(hosts.ManagedObjectReference),0,1,0.1111111111111111,1286
f952992f035ec130b7608e9851ef9c3becc2047a,host_sys = _get_object(host_ref),0,1,0.1111111111111111,1287
f952992f035ec130b7608e9851ef9c3becc2047a,"connected = host_sys.get(""connected"")",0,1,0.1111111111111111,1288
f952992f035ec130b7608e9851ef9c3becc2047a,"host_summary = host_sys.get(""summary"")",0,1,0.1111111111111111,1289
f952992f035ec130b7608e9851ef9c3becc2047a,free_memory = (host_summary.hardware.memorySize / (1024 * 1024),0,1,0.1111111111111111,1290
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""networkSystem""):",0,1,0.1111111111111111,1291
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""ha-host"", connected=True):",0,1,0.1111111111111111,1292
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""ha-datacenter""):",0,1,0.1111111111111111,1293
f952992f035ec130b7608e9851ef9c3becc2047a,"about_info.name = ""VMware vCenter Server""",0,1,0.1111111111111111,1294
f952992f035ec130b7608e9851ef9c3becc2047a,"about_info.version = ""5.1.0""",0,1,0.1111111111111111,1295
f952992f035ec130b7608e9851ef9c3becc2047a,service_content.about = about_info,0,1,0.1111111111111111,1296
f952992f035ec130b7608e9851ef9c3becc2047a,"ds = _db_content[""Datastore""].keys()[0]",0,1,0.1111111111111111,1297
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_refs = _db_content[type],0,1,0.1111111111111111,1298
f952992f035ec130b7608e9851ef9c3becc2047a,mdo_refs = [obj_ref],0,1,0.1111111111111111,1299
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = _db_content[type][mdo_ref],0,1,0.1111111111111111,1300
f952992f035ec130b7608e9851ef9c3becc2047a,prop_list = [],0,1,0.1111111111111111,1301
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_content = ObjectContent(mdo.obj, prop_list)",0,1,0.1111111111111111,1302
f952992f035ec130b7608e9851ef9c3becc2047a,"def _add_resource_pool(self, r_pool):",0,1,0.1111111111111111,1303
f952992f035ec130b7608e9851ef9c3becc2047a,summary.totalMemory = 0,0,1,0.1111111111111111,1304
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, value=""object-123"", _type=""ManagedObject""):",1,1,0.1111111111111111,1305
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numEffectiveHosts = 0,0,1,0.1111111111111111,1306
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""fake-ds""):",0,1,0.1111111111111111,1307
f952992f035ec130b7608e9851ef9c3becc2047a,def __init__(self):,1,1,0.1111111111111111,1308
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_object(obj_ref):,0,1,0.1111111111111111,1309
f952992f035ec130b7608e9851ef9c3becc2047a,return _db_content[obj_ref.type][obj_ref],0,1,0.1111111111111111,1310
f952992f035ec130b7608e9851ef9c3becc2047a,def _convert_to_array_of_mor(mors):,0,1,0.1111111111111111,1311
f952992f035ec130b7608e9851ef9c3becc2047a,array_of_mors.ManagedObjectReference = mors,0,1,0.1111111111111111,1312
f952992f035ec130b7608e9851ef9c3becc2047a,return array_of_mors,0,1,0.1111111111111111,1313
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_object_refs(obj_type):,0,1,0.1111111111111111,1314
f952992f035ec130b7608e9851ef9c3becc2047a,lst_objs = [],0,1,0.1111111111111111,1315
f952992f035ec130b7608e9851ef9c3becc2047a,return lst_objs,0,1,0.1111111111111111,1316
f952992f035ec130b7608e9851ef9c3becc2047a,"def _update_object(table, table_obj):",0,1,0.1111111111111111,1317
f952992f035ec130b7608e9851ef9c3becc2047a,_db_content[table][table_obj.obj] = table_obj,0,1,0.1111111111111111,1318
f952992f035ec130b7608e9851ef9c3becc2047a,class Prop(object):,0,1,0.1111111111111111,1319
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""ManagedObject"", value=None):",0,1,0.1111111111111111,1320
f952992f035ec130b7608e9851ef9c3becc2047a,self.type = name,0,1,0.1111111111111111,1321
f952992f035ec130b7608e9851ef9c3becc2047a,self._type = name,0,1,0.1111111111111111,1322
f952992f035ec130b7608e9851ef9c3becc2047a,_counter = 0,0,1,0.1111111111111111,1323
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, mo_id_prefix=""obj""):",0,1,0.1111111111111111,1324
f952992f035ec130b7608e9851ef9c3becc2047a,elem = Prop(),0,1,0.1111111111111111,1325
f952992f035ec130b7608e9851ef9c3becc2047a,"def _generate_moid(self, prefix):",0,1,0.1111111111111111,1326
f952992f035ec130b7608e9851ef9c3becc2047a,"return prefix + ""-"" + str(self.__class__._counter)",0,1,0.1111111111111111,1327
f952992f035ec130b7608e9851ef9c3becc2047a,"ds_do = kwargs.get(""ds"", None)",0,1,0.1111111111111111,1328
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""test-rpool""):",0,1,0.1111111111111111,1329
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""test_cluster""):",0,1,0.1111111111111111,1330
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numHosts = 0,0,1,0.1111111111111111,1331
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numCpuCores = 0,0,1,0.1111111111111111,1332
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numCpuThreads = 0,0,1,0.1111111111111111,1333
f952992f035ec130b7608e9851ef9c3becc2047a,class Property(object):,1,1,0.1111111111111111,1334
f952992f035ec130b7608e9851ef9c3becc2047a,self._type = _type,1,1,0.1111111111111111,1335
f952992f035ec130b7608e9851ef9c3becc2047a,if wsdl_url is None:,1,1,0.1111111111111111,1336
f952992f035ec130b7608e9851ef9c3becc2047a,host_username = CONF.vmware.host_username,1,1,0.1111111111111111,1337
f952992f035ec130b7608e9851ef9c3becc2047a,api_retry_count = CONF.vmware.api_retry_count,1,1,0.1111111111111111,1338
f952992f035ec130b7608e9851ef9c3becc2047a,"raise Exception(_(""Must specify vmwareapi_host_ip,""",1,1,0.1111111111111111,1339
f952992f035ec130b7608e9851ef9c3becc2047a,"""vmwareapi_host_username """,1,1,0.1111111111111111,1340
f952992f035ec130b7608e9851ef9c3becc2047a,"""and vmwareapi_host_password to use""",1,1,0.1111111111111111,1341
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session = VMwareAPISession(self._host_ip,",1,1,0.1111111111111111,1342
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, host_ip, host_username, host_password,",1,1,0.1111111111111111,1343
f952992f035ec130b7608e9851ef9c3becc2047a,self._host_username = host_username,1,1,0.1111111111111111,1344
f952992f035ec130b7608e9851ef9c3becc2047a,self._host_password = host_password,1,1,0.1111111111111111,1345
f952992f035ec130b7608e9851ef9c3becc2047a,self.api_retry_count = api_retry_count,1,1,0.1111111111111111,1346
f952992f035ec130b7608e9851ef9c3becc2047a,virtual_controller = client_factory.create(,0,1,0.1111111111111111,1347
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_copy_virtual_disk_spec(client_factory, adapter_type=""lsiLogic"",",0,1,0.1111111111111111,1348
f952992f035ec130b7608e9851ef9c3becc2047a,create_vmdk_spec.adapterType = get_vmdk_adapter_type(adapter_type),0,1,0.1111111111111111,1349
f952992f035ec130b7608e9851ef9c3becc2047a,def get_vmdk_adapter_type(adapter_type):,0,1,0.1111111111111111,1350
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",0,1,0.1111111111111111,1351
f952992f035ec130b7608e9851ef9c3becc2047a,"if adapter_type == ""lsiLogicsas"":",0,1,0.1111111111111111,1352
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_adapter_type = ""lsiLogic""",0,1,0.1111111111111111,1353
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_adapter_type = adapter_type,0,1,0.1111111111111111,1354
f952992f035ec130b7608e9851ef9c3becc2047a,return vmdk_adapter_type,0,1,0.1111111111111111,1355
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_copy_virtual_disk_spec(client_factory, adapter_type=""lsilogic"",",1,1,0.1111111111111111,1356
f952992f035ec130b7608e9851ef9c3becc2047a,dest_spec.adapterType = adapter_type,1,1,0.1111111111111111,1357
f952992f035ec130b7608e9851ef9c3becc2047a,create_vmdk_spec.adapterType = adapter_type,1,1,0.1111111111111111,1358
f952992f035ec130b7608e9851ef9c3becc2047a,"property_dict = get_dynamic_properties(vim, mobj, type, [property_name])",0,1,0.1111111111111111,1359
f952992f035ec130b7608e9851ef9c3becc2047a,return property_dict.get(property_name),0,1,0.1111111111111111,1360
f952992f035ec130b7608e9851ef9c3becc2047a,"def get_dynamic_properties(vim, mobj, type, property_names):",0,1,0.1111111111111111,1361
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_content = get_object_properties(vim, None, mobj, type, property_names)",0,1,0.1111111111111111,1362
f952992f035ec130b7608e9851ef9c3becc2047a,"return vm_folder_ref, res_pool_ref",0,1,0.1111111111111111,1363
f952992f035ec130b7608e9851ef9c3becc2047a,property_dict = {},0,1,0.1111111111111111,1364
f952992f035ec130b7608e9851ef9c3becc2047a,host_password = CONF.vmware.host_password,1,1,0.1111111111111111,1365
f952992f035ec130b7608e9851ef9c3becc2047a,"delay = min(2 * delay, 60)",0,1,0.1111111111111111,1366
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=""ManagedObject"", obj_ref=None, value=None):",1,1,0.1111111111111111,1367
f952992f035ec130b7608e9851ef9c3becc2047a,"""sleeping for %(seconds)s seconds""),",0,1,0.1111111111111111,1368
f952992f035ec130b7608e9851ef9c3becc2047a,# object reference.,1,1,0.1111111111111111,1369
f952992f035ec130b7608e9851ef9c3becc2047a,value = 'obj-123',1,1,0.1111111111111111,1370
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_ref = ManagedObjectReference(value, name)",1,1,0.1111111111111111,1371
f952992f035ec130b7608e9851ef9c3becc2047a,elem = Property(),1,1,0.1111111111111111,1372
f952992f035ec130b7608e9851ef9c3becc2047a,"ds_do.ManagedObjectReference = [kwargs.get(""ds"").obj]",1,1,0.1111111111111111,1373
f952992f035ec130b7608e9851ef9c3becc2047a,def __init__(self):,1,1,0.1111111111111111,1374
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, **kwargs):",1,1,0.1111111111111111,1375
f952992f035ec130b7608e9851ef9c3becc2047a,"obj = _get_objects(""ResourcePool"").objects[0].obj",1,1,0.1111111111111111,1376
f952992f035ec130b7608e9851ef9c3becc2047a,r_pool.ManagedObjectReference = [obj],1,1,0.1111111111111111,1377
f952992f035ec130b7608e9851ef9c3becc2047a,"obj = _get_objects(""HostSystem"").objects[0].obj",1,1,0.1111111111111111,1378
f952992f035ec130b7608e9851ef9c3becc2047a,host_sys.ManagedObjectReference = [obj],1,1,0.1111111111111111,1379
f952992f035ec130b7608e9851ef9c3becc2047a,"obj = _get_objects(""Datastore"").objects[0].obj",1,1,0.1111111111111111,1380
f952992f035ec130b7608e9851ef9c3becc2047a,datastore.ManagedObjectReference = [obj],1,1,0.1111111111111111,1381
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, obj_ref=None, value='host-123'):",1,1,0.1111111111111111,1382
f952992f035ec130b7608e9851ef9c3becc2047a,"ds = _db_content[""Datastore""][_db_content[""Datastore""].keys()[0]]",1,1,0.1111111111111111,1383
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = _db_content[type][mdo_ref],1,1,0.1111111111111111,1384
f952992f035ec130b7608e9851ef9c3becc2047a,"temp_mdo = ManagedObject(mdo.objName, mdo.obj)",1,1,0.1111111111111111,1385
f952992f035ec130b7608e9851ef9c3becc2047a,if obj_ref in _db_content[type]:,1,1,0.1111111111111111,1386
f952992f035ec130b7608e9851ef9c3becc2047a,mdo = _db_content[type][obj_ref],1,1,0.1111111111111111,1387
f952992f035ec130b7608e9851ef9c3becc2047a,"temp_mdo = ManagedObject(mdo.objName, obj_ref)",1,1,0.1111111111111111,1388
f952992f035ec130b7608e9851ef9c3becc2047a,"""host_username """,0,1,0.1111111111111111,1389
f952992f035ec130b7608e9851ef9c3becc2047a,self._session = VMwareAPISession(scheme=scheme),0,1,0.1111111111111111,1390
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, host_ip=CONF.vmware.host_ip,",0,1,0.1111111111111111,1391
f952992f035ec130b7608e9851ef9c3becc2047a,self._host_username = username,0,1,0.1111111111111111,1392
f952992f035ec130b7608e9851ef9c3becc2047a,self._host_password = password,0,1,0.1111111111111111,1393
f952992f035ec130b7608e9851ef9c3becc2047a,self._api_retry_count = retry_count,0,1,0.1111111111111111,1394
f952992f035ec130b7608e9851ef9c3becc2047a,delay = 1,0,1,0.1111111111111111,1395
f952992f035ec130b7608e9851ef9c3becc2047a,# calculate default WSDL location if no override supplied,1,1,0.1111111111111111,1396
f952992f035ec130b7608e9851ef9c3becc2047a,dest_spec.adapterType = get_vmdk_adapter_type(adapter_type),0,1,0.1111111111111111,1397
f952992f035ec130b7608e9851ef9c3becc2047a,"return Vim.get_soap_url(protocol, host_name) + ""/vimService.wsdl""",0,1,0.1111111111111111,1398
f952992f035ec130b7608e9851ef9c3becc2047a,"return vmdk_file_size_in_kb, os_type, adapter_type",1,1,0.1111111111111111,1399
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_vmfolder_and_res_pool_mors():,1,1,0.1111111111111111,1400
f952992f035ec130b7608e9851ef9c3becc2047a,vm_folder_mor = dc_objs[0].propSet[0].val,1,1,0.1111111111111111,1401
f952992f035ec130b7608e9851ef9c3becc2047a,"return vm_folder_mor, res_pool_mor",1,1,0.1111111111111111,1402
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_folder_mor, res_pool_mor = _get_vmfolder_and_res_pool_mors()",1,1,0.1111111111111111,1403
f952992f035ec130b7608e9851ef9c3becc2047a,instance.name),1,1,0.1111111111111111,1404
f952992f035ec130b7608e9851ef9c3becc2047a,"flat_uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",1,1,0.1111111111111111,1405
f952992f035ec130b7608e9851ef9c3becc2047a,"uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",1,1,0.1111111111111111,1406
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(vmdk_file_size_in_kb)s KB and adapter type  """,1,1,0.1111111111111111,1407
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(data_store_name)s"") %",1,1,0.1111111111111111,1408
f952992f035ec130b7608e9851ef9c3becc2047a,def _delete_disk_file():,1,1,0.1111111111111111,1409
f952992f035ec130b7608e9851ef9c3becc2047a,cookies = self._session._get_vim().client.options.transport.cookiejar,1,1,0.1111111111111111,1410
f952992f035ec130b7608e9851ef9c3becc2047a,# above,1,1,0.1111111111111111,1411
f952992f035ec130b7608e9851ef9c3becc2047a,def _attach_vmdk_to_the_vm():,1,1,0.1111111111111111,1412
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""",1,1,0.1111111111111111,1413
f952992f035ec130b7608e9851ef9c3becc2047a,to do so.,1,1,0.1111111111111111,1414
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_attach_config_spec = vm_util.get_vmdk_attach_config_spec(,1,1,0.1111111111111111,1415
f952992f035ec130b7608e9851ef9c3becc2047a,reconfig_task = self._session._call_method(,1,1,0.1111111111111111,1416
f952992f035ec130b7608e9851ef9c3becc2047a,"name=""%s-snapshot"" % instance.name,",1,1,0.1111111111111111,1417
f952992f035ec130b7608e9851ef9c3becc2047a,dc_ref = self._get_datacenter_name_and_ref()[0],1,1,0.1111111111111111,1418
f952992f035ec130b7608e9851ef9c3becc2047a,"reason = _(""instance is powered off and can not be suspended."")",1,1,0.1111111111111111,1419
f952992f035ec130b7608e9851ef9c3becc2047a,vm_ref = self._get_vm_ref_from_the_name(instance['name']),1,1,0.1111111111111111,1420
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_datacenter_name_and_ref(self):,1,1,0.1111111111111111,1421
f952992f035ec130b7608e9851ef9c3becc2047a,"def _get_vm_ref_from_the_name(self, vm_name):",1,1,0.1111111111111111,1422
f952992f035ec130b7608e9851ef9c3becc2047a,if vm.propSet[0].val == vm_name:,1,1,0.1111111111111111,1423
f952992f035ec130b7608e9851ef9c3becc2047a,return vm.obj,1,1,0.1111111111111111,1424
f952992f035ec130b7608e9851ef9c3becc2047a,return None,1,1,0.1111111111111111,1425
f952992f035ec130b7608e9851ef9c3becc2047a,"param_list = {""id"": str(vm_ref.value)}",0,1,0.1111111111111111,1426
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_size_in_kb, os_type, adapter_type = _get_image_properties()",1,1,0.1111111111111111,1427
f952992f035ec130b7608e9851ef9c3becc2047a,data_store_name = _get_datastore_ref(),1,1,0.1111111111111111,1428
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref(self._session, instance)",0,1,0.1111111111111111,1429
f952992f035ec130b7608e9851ef9c3becc2047a,return data_store_name,1,1,0.1111111111111111,1430
f952992f035ec130b7608e9851ef9c3becc2047a,"search_spec = vm_util.search_datastore_spec(client_factory, file_name)",0,1,0.1111111111111111,1431
f952992f035ec130b7608e9851ef9c3becc2047a,# calculate default WSDL location if no override supplied,0,1,0.1111111111111111,1432
f952992f035ec130b7608e9851ef9c3becc2047a,"def _path_file_exists(self, ds_browser, ds_path, file_name):",0,1,0.1111111111111111,1433
f952992f035ec130b7608e9851ef9c3becc2047a,"search_task = self._session._call_method(self._session._get_vim(),",0,1,0.1111111111111111,1434
f952992f035ec130b7608e9851ef9c3becc2047a,"task_info = self._session._call_method(vim_util,",0,1,0.1111111111111111,1435
f952992f035ec130b7608e9851ef9c3becc2047a,"""get_dynamic_property"",",0,1,0.1111111111111111,1436
f952992f035ec130b7608e9851ef9c3becc2047a,"file_exists = (getattr(task_info.result, 'file', False) and",0,1,0.1111111111111111,1437
f952992f035ec130b7608e9851ef9c3becc2047a,task_info.result.file[0].path == file_name),0,1,0.1111111111111111,1438
f952992f035ec130b7608e9851ef9c3becc2047a,"return True, file_exists",0,1,0.1111111111111111,1439
f952992f035ec130b7608e9851ef9c3becc2047a,"def _check_if_folder_file_exists(self, ds_ref, ds_name,",0,1,0.1111111111111111,1440
f952992f035ec130b7608e9851ef9c3becc2047a,"folder_path = vm_util.build_datastore_path(ds_name, folder_name)",0,1,0.1111111111111111,1441
f952992f035ec130b7608e9851ef9c3becc2047a,"folder_exists, file_exists = self._path_file_exists(ds_browser,",0,1,0.1111111111111111,1442
f952992f035ec130b7608e9851ef9c3becc2047a,return file_exists,0,1,0.1111111111111111,1443
f952992f035ec130b7608e9851ef9c3becc2047a,"def _volume_in_mapping(mount_device, block_device_info):",0,1,0.1111111111111111,1444
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_list = [block_device.strip_dev(vol['mount_device']),0,1,0.1111111111111111,1445
f952992f035ec130b7608e9851ef9c3becc2047a,swap = driver.block_device_info_get_swap(block_device_info),0,1,0.1111111111111111,1446
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, session):",1,1,0.1111111111111111,1447
f952992f035ec130b7608e9851ef9c3becc2047a,"def spawn(self, context, instance, image_meta, network_info):",1,1,0.1111111111111111,1448
f952992f035ec130b7608e9851ef9c3becc2047a,the metadata .vmdk file.,1,1,0.1111111111111111,1449
f952992f035ec130b7608e9851ef9c3becc2047a,6. Power on the VM.,1,1,0.1111111111111111,1450
f952992f035ec130b7608e9851ef9c3becc2047a,vm_ref = self._get_vm_ref_from_the_name(instance.name),1,1,0.1111111111111111,1451
f952992f035ec130b7608e9851ef9c3becc2047a,def _get_datastore_ref():,1,1,0.1111111111111111,1452
f952992f035ec130b7608e9851ef9c3becc2047a,ds_name = None,1,1,0.1111111111111111,1453
f952992f035ec130b7608e9851ef9c3becc2047a,ds_type = None,1,1,0.1111111111111111,1454
f952992f035ec130b7608e9851ef9c3becc2047a,# Local storage identifier,1,1,0.1111111111111111,1455
f952992f035ec130b7608e9851ef9c3becc2047a,"if ds_type == ""VMFS"":",1,1,0.1111111111111111,1456
f952992f035ec130b7608e9851ef9c3becc2047a,data_store_name = ds_name,1,1,0.1111111111111111,1457
f952992f035ec130b7608e9851ef9c3becc2047a,"param_list = {""id"": str(vm_ref)}",1,1,0.1111111111111111,1458
f952992f035ec130b7608e9851ef9c3becc2047a,ds_browser = vim_util.get_dynamic_property(,0,1,0.1111111111111111,1459
f952992f035ec130b7608e9851ef9c3becc2047a,upload_folder = instance['uuid'],0,1,0.1111111111111111,1460
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_ref = ManagedObjectReference(value, name)",0,1,0.1111111111111111,1461
f952992f035ec130b7608e9851ef9c3becc2047a,# typically have values like vm-123 or,0,1,0.1111111111111111,1462
f952992f035ec130b7608e9851ef9c3becc2047a,# host-232 and not UUID.,0,1,0.1111111111111111,1463
f952992f035ec130b7608e9851ef9c3becc2047a,self._type = _type,0,1,0.1111111111111111,1464
f952992f035ec130b7608e9851ef9c3becc2047a,class ObjectContent(object):,0,1,0.1111111111111111,1465
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, obj_ref, prop_list=None, missing_list=None):",0,1,0.1111111111111111,1466
f952992f035ec130b7608e9851ef9c3becc2047a,self.obj = obj_ref,0,1,0.1111111111111111,1467
f952992f035ec130b7608e9851ef9c3becc2047a,prop_list = [],0,1,0.1111111111111111,1468
f952992f035ec130b7608e9851ef9c3becc2047a,missing_list = [],0,1,0.1111111111111111,1469
f952992f035ec130b7608e9851ef9c3becc2047a,self.propSet = prop_list,0,1,0.1111111111111111,1470
f952992f035ec130b7608e9851ef9c3becc2047a,self.missingSet = missing_list,0,1,0.1111111111111111,1471
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Managed Object base class.""""""",0,1,0.1111111111111111,1472
f952992f035ec130b7608e9851ef9c3becc2047a,# object reference.,0,1,0.1111111111111111,1473
f952992f035ec130b7608e9851ef9c3becc2047a,value = 'obj-123',0,1,0.1111111111111111,1474
f952992f035ec130b7608e9851ef9c3becc2047a,elem = Property(),0,1,0.1111111111111111,1475
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""A managed object reference is a remote identifier.""""""",0,1,0.1111111111111111,1476
f952992f035ec130b7608e9851ef9c3becc2047a,# TODO(hartsocks): remove this,0,1,0.1111111111111111,1477
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, obj_ref=None, value='host-123'):",0,1,0.1111111111111111,1478
f952992f035ec130b7608e9851ef9c3becc2047a,class Prop(object):,1,1,0.1111111111111111,1479
f952992f035ec130b7608e9851ef9c3becc2047a,def __init__(self):,1,1,0.1111111111111111,1480
f952992f035ec130b7608e9851ef9c3becc2047a,self.name = None,1,1,0.1111111111111111,1481
f952992f035ec130b7608e9851ef9c3becc2047a,self.val = None,1,1,0.1111111111111111,1482
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name, value):",1,1,0.1111111111111111,1483
f952992f035ec130b7608e9851ef9c3becc2047a,self._type = name,1,1,0.1111111111111111,1484
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Managed Data Object base class.""""""",1,1,0.1111111111111111,1485
f952992f035ec130b7608e9851ef9c3becc2047a,return CONF.vmware.wsdl_location,0,1,0.1111111111111111,1486
f952992f035ec130b7608e9851ef9c3becc2047a,"name=""%s-snapshot"" % instance['uuid'],",0,1,0.1111111111111111,1487
f952992f035ec130b7608e9851ef9c3becc2047a,"obj_ref = Obj(name, value)",1,1,0.1111111111111111,1488
f952992f035ec130b7608e9851ef9c3becc2047a,elem = Prop(),1,1,0.1111111111111111,1489
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, value=""object-123"", _type=""ManagedObject""):",0,1,0.1111111111111111,1490
f952992f035ec130b7608e9851ef9c3becc2047a,class Obj(object):,1,1,0.1111111111111111,1491
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance['name'])",1,1,0.1111111111111111,1492
f952992f035ec130b7608e9851ef9c3becc2047a,self.obj_name = obj_name,0,1,0.1111111111111111,1493
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_uuid(self._session, instance['uuid'])",0,1,0.1111111111111111,1494
f952992f035ec130b7608e9851ef9c3becc2047a,class ManagedObjectReference(object):,0,1,0.1111111111111111,1495
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",0,1,0.1111111111111111,1496
f952992f035ec130b7608e9851ef9c3becc2047a,"rescue_vm_ref = vm_util.get_vm_ref_from_uuid(self._session,",0,1,0.1111111111111111,1497
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref(self._session, instance_ref)",0,1,0.1111111111111111,1498
f952992f035ec130b7608e9851ef9c3becc2047a,upload_folder = instance['name'],1,1,0.1111111111111111,1499
f952992f035ec130b7608e9851ef9c3becc2047a,"name=""%s-snapshot"" % instance['name'],",1,1,0.1111111111111111,1500
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session,",1,1,0.1111111111111111,1501
f952992f035ec130b7608e9851ef9c3becc2047a,return,1,1,0.1111111111111111,1502
f952992f035ec130b7608e9851ef9c3becc2047a,"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",1,1,0.1111111111111111,1503
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",1,1,0.1111111111111111,1504
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_ref.name)",1,1,0.1111111111111111,1505
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, obj_name=None):",0,1,0.1111111111111111,1506
f952992f035ec130b7608e9851ef9c3becc2047a,"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",0,1,0.1111111111111111,1507
f952992f035ec130b7608e9851ef9c3becc2047a,"self.device = kwargs.get(""virtual_device"")",0,1,0.1111111111111111,1508
f952992f035ec130b7608e9851ef9c3becc2047a,"vif_info['vif_model'] = ""VirtualE1000""",0,1,0.1111111111111111,1509
f952992f035ec130b7608e9851ef9c3becc2047a,"def __init__(self, name=None, val=None):",0,1,0.1111111111111111,1510
f952992f035ec130b7608e9851ef9c3becc2047a,class Property(object):,0,1,0.1111111111111111,1511
f952992f035ec130b7608e9851ef9c3becc2047a,net_device = client_factory.create(vif),0,1,0.1111111111111111,1512
f952992f035ec130b7608e9851ef9c3becc2047a,vif = 'ns0:' + vif_info['vif_model'],0,1,0.1111111111111111,1513
f952992f035ec130b7608e9851ef9c3becc2047a,net_device = client_factory.create('ns0:VirtualPCNet32'),1,1,0.1111111111111111,1514
f952992f035ec130b7608e9851ef9c3becc2047a,"if vif_info['vif_model'] == ""e1000"":",0,1,0.1111111111111111,1515
f952992f035ec130b7608e9851ef9c3becc2047a,self.val = val,0,1,0.1111111111111111,1516
f952992f035ec130b7608e9851ef9c3becc2047a,nic = VirtualPCNet32(),1,1,0.1111111111111111,1517
f952992f035ec130b7608e9851ef9c3becc2047a,return DataObject(obj_name),0,1,0.1111111111111111,1518
f952992f035ec130b7608e9851ef9c3becc2047a,self.name = name,0,1,0.1111111111111111,1519
f952992f035ec130b7608e9851ef9c3becc2047a,token),0,0,0.0,1520
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,1521
f952992f035ec130b7608e9851ef9c3becc2047a,if token:,1,0,0.0,1522
f952992f035ec130b7608e9851ef9c3becc2047a,break,0,0,0.0,1523
f952992f035ec130b7608e9851ef9c3becc2047a,self._cluster),0,0,0.0,1524
f952992f035ec130b7608e9851ef9c3becc2047a,"'ClusterComputeResource', 'resourcePool')",0,0,0.0,1525
f952992f035ec130b7608e9851ef9c3becc2047a,if root_res_pool:,0,0,0.0,1526
f952992f035ec130b7608e9851ef9c3becc2047a,"vim_util, 'get_inner_objects', root_res_pool, 'vm',",0,0,0.0,1527
f952992f035ec130b7608e9851ef9c3becc2047a,"'VirtualMachine', properties)",0,0,0.0,1528
f952992f035ec130b7608e9851ef9c3becc2047a,while vms:,1,0,0.0,1529
f952992f035ec130b7608e9851ef9c3becc2047a,lst_vm_names.append(vm_name),1,0,0.0,1530
f952992f035ec130b7608e9851ef9c3becc2047a,break,1,0,0.0,1531
f952992f035ec130b7608e9851ef9c3becc2047a,"""continue_to_get_objects"",",1,0,0.0,1532
f952992f035ec130b7608e9851ef9c3becc2047a,token),1,0,0.0,1533
f952992f035ec130b7608e9851ef9c3becc2047a,else:,1,0,0.0,1534
f952992f035ec130b7608e9851ef9c3becc2047a,pass,0,0,0.0,1535
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(val, 'name') and val.name:",0,0,0.0,1536
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", val.name)",0,0,0.0,1537
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(val, 'extraConfig'):",0,0,0.0,1538
f952992f035ec130b7608e9851ef9c3becc2047a,"self.get(""config.extraConfig"").OptionValue,",0,0,0.0,1539
f952992f035ec130b7608e9851ef9c3becc2047a,val.extraConfig),0,0,0.0,1540
f952992f035ec130b7608e9851ef9c3becc2047a,"""continue_to_get_objects"",",0,0,0.0,1541
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(val, 'instanceUuid') and val.instanceUuid is not None:",0,0,0.0,1542
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.config.instanceUuid"", val.instanceUuid)",0,0,0.0,1543
f952992f035ec130b7608e9851ef9c3becc2047a,pass,1,0,0.0,1544
f952992f035ec130b7608e9851ef9c3becc2047a,"controller_key,",1,0,0.0,1545
f952992f035ec130b7608e9851ef9c3becc2047a,if token:,0,0,0.0,1546
f952992f035ec130b7608e9851ef9c3becc2047a,lst_vm_names.append(vm_name),0,0,0.0,1547
f952992f035ec130b7608e9851ef9c3becc2047a,"controller_key,",0,0,0.0,1548
f952992f035ec130b7608e9851ef9c3becc2047a,"'VirtualLsiLogicSASController',",0,0,0.0,1549
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,1550
f952992f035ec130b7608e9851ef9c3becc2047a,'VirtualBusLogicController'],0,0,0.0,1551
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(device, 'controllerKey') and hasattr(device, 'unitNumber'):",0,0,0.0,1552
f952992f035ec130b7608e9851ef9c3becc2047a,unit_numbers.append(device.unitNumber),0,0,0.0,1553
f952992f035ec130b7608e9851ef9c3becc2047a,if _is_scsi_controller(device):,0,0,0.0,1554
f952992f035ec130b7608e9851ef9c3becc2047a,unit_numbers.append(device.scsiCtlrUnitNumber),0,0,0.0,1555
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type):,0,0,0.0,1556
f952992f035ec130b7608e9851ef9c3becc2047a,if ret:,0,0,0.0,1557
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type),0,0,0.0,1558
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type=""lsiLogic"",",1,0,0.0,1559
f952992f035ec130b7608e9851ef9c3becc2047a,if controller_key is None:,1,0,0.0,1560
f952992f035ec130b7608e9851ef9c3becc2047a,else:,1,0,0.0,1561
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type),1,0,0.0,1562
f952992f035ec130b7608e9851ef9c3becc2047a,device_config_spec.append(controller_spec),1,0,0.0,1563
f952992f035ec130b7608e9851ef9c3becc2047a,if device.unitNumber > unit_number:,1,0,0.0,1564
f952992f035ec130b7608e9851ef9c3becc2047a,"disk_type, unit_number)",1,0,0.0,1565
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""config.extraConfig"",",0,0,0.0,1566
f952992f035ec130b7608e9851ef9c3becc2047a,_convert_to_array_of_opt_val(exconfig_do)),0,0,0.0,1567
f952992f035ec130b7608e9851ef9c3becc2047a,if exconfig_do:,0,0,0.0,1568
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""config.extraConfig"", kwargs.get(""extra_config"", None))",1,0,0.0,1569
f952992f035ec130b7608e9851ef9c3becc2047a,while retrieve_result:,0,0,0.0,1570
f952992f035ec130b7608e9851ef9c3becc2047a,if (changes):,0,0,0.0,1571
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.debug('Raising NotImplemented'),0,0,0.0,1572
f952992f035ec130b7608e9851ef9c3becc2047a,existing.append(c),0,0,0.0,1573
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""No networks configured on host!""))",1,0,0.0,1574
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Calling setter %s', name)",0,0,0.0,1575
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""%(text)s: _db_content => %(content)s""),",1,0,0.0,1576
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Session is faulty""))",1,0,0.0,1577
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.debug(_('Raising NotImplemented')),1,0,0.0,1578
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Calling %(name)s %(impl)s'),",1,0,0.0,1579
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Calling getter %s'), name)",1,0,0.0,1580
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Calling setter %s'), name)",1,0,0.0,1581
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""No networks configured on host!"")",0,0,0.0,1582
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Configured networks: %s"", vm_networks)",0,0,0.0,1583
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Network %s not found on host!"", network_name)",0,0,0.0,1584
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Port Group %s already exists."", pg_name)",0,0,0.0,1585
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Configured networks: %s""), vm_networks)",1,0,0.0,1586
f952992f035ec130b7608e9851ef9c3becc2047a,"""name"": kwargs.get(""name""),",0,0,0.0,1587
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Network %s not found on host!""), network_name)",1,0,0.0,1588
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Port Group %s already exists.""), pg_name)",1,0,0.0,1589
f952992f035ec130b7608e9851ef9c3becc2047a,"""VMwareHTTPWrite. Exception is %s"", excep)",0,0,0.0,1590
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(base_vhd_path)s, Target: %(root_vhd_path)s"",",0,0,0.0,1591
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(root_vhd_path)s"",",0,0,0.0,1592
f952992f035ec130b7608e9851ef9c3becc2047a,"""size %(root_vhd_size)s"",",0,0,0.0,1593
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Instance not found"", instance=instance)",0,0,0.0,1594
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Rebooting instance"", instance=instance)",0,0,0.0,1595
f952992f035ec130b7608e9851ef9c3becc2047a,if uuid:,0,0,0.0,1596
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Pause instance"", instance=instance)",0,0,0.0,1597
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Unpause instance"", instance=instance)",0,0,0.0,1598
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Calling getter %s', name)",0,0,0.0,1599
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Calling %(name)s %(impl)s',",0,0,0.0,1600
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Session is faulty"")",0,0,0.0,1601
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""%(text)s: _db_content => %(content)s"",",0,0,0.0,1602
f952992f035ec130b7608e9851ef9c3becc2047a,"""ds"": source_vm_mdo.get(""datastore""),",0,0,0.0,1603
f952992f035ec130b7608e9851ef9c3becc2047a,"""runtime_host"": source_vm_mdo.get(""runtime.host""),",0,0,0.0,1604
f952992f035ec130b7608e9851ef9c3becc2047a,"""powerstate"": source_vm_mdo.get(""runtime.powerState""),",0,0,0.0,1605
f952992f035ec130b7608e9851ef9c3becc2047a,"""vmPathName"": source_vm_mdo.get(""config.files.vmPathName""),",0,0,0.0,1606
f952992f035ec130b7608e9851ef9c3becc2047a,"""numCpu"": source_vm_mdo.get(""summary.config.numCpu""),",0,0,0.0,1607
f952992f035ec130b7608e9851ef9c3becc2047a,"""mem"": source_vm_mdo.get(""summary.config.memorySizeMB""),",0,0,0.0,1608
f952992f035ec130b7608e9851ef9c3becc2047a,"""extra_config"": source_vm_mdo.get(""config.extraConfig"").OptionValue,",0,0,0.0,1609
f952992f035ec130b7608e9851ef9c3becc2047a,"""virtual_device"": source_vm_mdo.get(""config.hardware.device""),",0,0,0.0,1610
f952992f035ec130b7608e9851ef9c3becc2047a,"""instanceUuid"": source_vm_mdo.get(""summary.config.instanceUuid"")}",0,0,0.0,1611
f952992f035ec130b7608e9851ef9c3becc2047a,if clone_spec.config is not None:,0,0,0.0,1612
f952992f035ec130b7608e9851ef9c3becc2047a,"if (hasattr(clone_spec.config, 'instanceUuid') and",0,0,0.0,1613
f952992f035ec130b7608e9851ef9c3becc2047a,clone_spec.config.instanceUuid is not None):,0,0,0.0,1614
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(clone_spec.config, 'extraConfig'):",0,0,0.0,1615
f952992f035ec130b7608e9851ef9c3becc2047a,clone_spec.config.extraConfig),0,0,0.0,1616
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(""VirtualMachine"", virtual_machine)",0,0,0.0,1617
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""config.extraConfig"", val.extraConfig)",1,0,0.0,1618
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.IntOpt('host_port',",0,0,0.0,1619
f952992f035ec130b7608e9851ef9c3becc2047a,"default=443,",0,0,0.0,1620
f952992f035ec130b7608e9851ef9c3becc2047a,"host_port=CONF.vmware.host_port,",0,0,0.0,1621
f952992f035ec130b7608e9851ef9c3becc2047a,port=self._host_port),0,0,0.0,1622
f952992f035ec130b7608e9851ef9c3becc2047a,"host=""localhost"",",0,0,0.0,1623
f952992f035ec130b7608e9851ef9c3becc2047a,port=443):,0,0,0.0,1624
f952992f035ec130b7608e9851ef9c3becc2047a,"host=""localhost""):",1,0,0.0,1625
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,1626
f952992f035ec130b7608e9851ef9c3becc2047a,datacenter):,1,0,0.0,1627
f952992f035ec130b7608e9851ef9c3becc2047a,sessionId=[self._session_id]),1,0,0.0,1628
f952992f035ec130b7608e9851ef9c3becc2047a,"name=datastore_path,",0,0,0.0,1629
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:VirtualLsiLogicSASController'),0,0,0.0,1630
f952992f035ec130b7608e9851ef9c3becc2047a,types.,0,0,0.0,1631
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,1632
f952992f035ec130b7608e9851ef9c3becc2047a,if dynamic_properties:,0,0,0.0,1633
f952992f035ec130b7608e9851ef9c3becc2047a,if dynamic_property:,1,0,0.0,1634
f952992f035ec130b7608e9851ef9c3becc2047a,import uuid,1,0,0.0,1635
f952992f035ec130b7608e9851ef9c3becc2047a,"datacenter=dc_ref,",0,0,0.0,1636
f952992f035ec130b7608e9851ef9c3becc2047a,instance=instance),0,0,0.0,1637
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._get_vim(),",0,0,0.0,1638
f952992f035ec130b7608e9851ef9c3becc2047a,"""DeleteDatastoreFile_Task"",",0,0,0.0,1639
f952992f035ec130b7608e9851ef9c3becc2047a,"vim.get_service_content().fileManager,",0,0,0.0,1640
f952992f035ec130b7608e9851ef9c3becc2047a,datacenter=dc_ref),0,0,0.0,1641
f952992f035ec130b7608e9851ef9c3becc2047a,instance=instance),1,0,0.0,1642
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'],",0,0,0.0,1643
f952992f035ec130b7608e9851ef9c3becc2047a,file_delete_task),0,0,0.0,1644
f952992f035ec130b7608e9851ef9c3becc2047a,"self._delete_datastore_file(instance,",0,0,0.0,1645
f952992f035ec130b7608e9851ef9c3becc2047a,"flat_uploaded_vmdk_path,",0,0,0.0,1646
f952992f035ec130b7608e9851ef9c3becc2047a,dc_ref),0,0,0.0,1647
f952992f035ec130b7608e9851ef9c3becc2047a,"sparse_uploaded_vmdk_path,",0,0,0.0,1648
f952992f035ec130b7608e9851ef9c3becc2047a,"destName=dest_vmdk_file_path,",0,0,0.0,1649
f952992f035ec130b7608e9851ef9c3becc2047a,"self._delete_datastore_file(instance, f, dc_ref)",0,0,0.0,1650
f952992f035ec130b7608e9851ef9c3becc2047a,import uuid,1,0,0.0,1651
f952992f035ec130b7608e9851ef9c3becc2047a,"datacenter=datacenter,",1,0,0.0,1652
f952992f035ec130b7608e9851ef9c3becc2047a,"{""vmdk_path"": vmdk_path,",1,0,0.0,1653
f952992f035ec130b7608e9851ef9c3becc2047a,if retry_count > self.api_retry_count:,1,0,0.0,1654
f952992f035ec130b7608e9851ef9c3becc2047a,self.vim.Logout(self.vim.get_service_content().sessionManager),1,0,0.0,1655
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.NovaException(excep),1,0,0.0,1656
f952992f035ec130b7608e9851ef9c3becc2047a,"api_retry_count, scheme=""https""):",1,0,0.0,1657
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", ""networkSystem"")",1,0,0.0,1658
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Resume instance"", instance=instance)",0,0,0.0,1659
f952992f035ec130b7608e9851ef9c3becc2047a,"super(HostSystem, self).__init__(""HostSystem"", obj_ref, value)",1,0,0.0,1660
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", ""ha-host"")",1,0,0.0,1661
f952992f035ec130b7608e9851ef9c3becc2047a,"super(Datacenter, self).__init__(""Datacenter"")",1,0,0.0,1662
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", ""ha-datacenter"")",1,0,0.0,1663
f952992f035ec130b7608e9851ef9c3becc2047a,"""ds"": ds,",1,0,0.0,1664
f952992f035ec130b7608e9851ef9c3becc2047a,"temp_mdo.set(prop, mdo.get(prop))",1,0,0.0,1665
f952992f035ec130b7608e9851ef9c3becc2047a,lst_ret_objs.add_object(temp_mdo),1,0,0.0,1666
f952992f035ec130b7608e9851ef9c3becc2047a,if not (self._host_ip or CONF.vmware.host_username is None or,0,0,0.0,1667
f952992f035ec130b7608e9851ef9c3becc2047a,CONF.vmware.host_password is None):,0,0,0.0,1668
f952992f035ec130b7608e9851ef9c3becc2047a,"username=CONF.vmware.host_username,",0,0,0.0,1669
f952992f035ec130b7608e9851ef9c3becc2047a,"password=CONF.vmware.host_password,",0,0,0.0,1670
f952992f035ec130b7608e9851ef9c3becc2047a,"retry_count=CONF.vmware.api_retry_count,",0,0,0.0,1671
f952992f035ec130b7608e9851ef9c3becc2047a,"scheme=""https""):",0,0,0.0,1672
f952992f035ec130b7608e9851ef9c3becc2047a,"{'server': self._host_ip, 'seconds': delay})",0,0,0.0,1673
f952992f035ec130b7608e9851ef9c3becc2047a,time.sleep(delay),0,0,0.0,1674
f952992f035ec130b7608e9851ef9c3becc2047a,if self.vim:,0,0,0.0,1675
f952992f035ec130b7608e9851ef9c3becc2047a,self.vim.Logout(self.vim.get_service_content().sessionManager),0,0,0.0,1676
f952992f035ec130b7608e9851ef9c3becc2047a,if retry_count > self._api_retry_count:,0,0,0.0,1677
f952992f035ec130b7608e9851ef9c3becc2047a,if not self._host_ip or host_username is None or host_password is None:,1,0,0.0,1678
f952992f035ec130b7608e9851ef9c3becc2047a,"host_username, host_password,",1,0,0.0,1679
f952992f035ec130b7608e9851ef9c3becc2047a,"api_retry_count, scheme=scheme)",1,0,0.0,1680
f952992f035ec130b7608e9851ef9c3becc2047a,"""data_store_name"": data_store_name},",1,0,0.0,1681
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._get_vim(),",1,0,0.0,1682
f952992f035ec130b7608e9851ef9c3becc2047a,if self._session_id:,1,0,0.0,1683
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.debug(excep),1,0,0.0,1684
f952992f035ec130b7608e9851ef9c3becc2047a,create_cluster('test_cluster'),1,0,0.0,1685
f952992f035ec130b7608e9851ef9c3becc2047a,create_cluster('test_cluster2'),1,0,0.0,1686
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.capacity"", unit.Ti)",1,0,0.0,1687
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.freeSpace"", 500 * unit.Gi)",1,0,0.0,1688
f952992f035ec130b7608e9851ef9c3becc2047a,"cluster._add_datastore(_get_object_refs(""Datastore"")[0])",1,0,0.0,1689
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(self, 'vim') and self.vim:",0,0,0.0,1690
f952992f035ec130b7608e9851ef9c3becc2047a,self.vim.Logout(self.vim.get_service_content().sessionManager),0,0,0.0,1691
f952992f035ec130b7608e9851ef9c3becc2047a,try:,1,0,0.0,1692
f952992f035ec130b7608e9851ef9c3becc2047a,if self.vim:,1,0,0.0,1693
f952992f035ec130b7608e9851ef9c3becc2047a,self.vim.Logout(self.vim.get_service_content().sessionManager),1,0,0.0,1694
f952992f035ec130b7608e9851ef9c3becc2047a,except Exception as excep:,1,0,0.0,1695
f952992f035ec130b7608e9851ef9c3becc2047a,if self._session:,0,0,0.0,1696
f952992f035ec130b7608e9851ef9c3becc2047a,"""DeleteDatastoreFile_Task"",",1,0,0.0,1697
f952992f035ec130b7608e9851ef9c3becc2047a,sessionId=[self._session.key]),0,0,0.0,1698
f952992f035ec130b7608e9851ef9c3becc2047a,try:,0,0,0.0,1699
f952992f035ec130b7608e9851ef9c3becc2047a,"sessionID=self._session.key,",0,0,0.0,1700
f952992f035ec130b7608e9851ef9c3becc2047a,userName=self._session.userName),0,0,0.0,1701
f952992f035ec130b7608e9851ef9c3becc2047a,except Exception as e:,0,0,0.0,1702
f952992f035ec130b7608e9851ef9c3becc2047a,self._session.key),0,0,0.0,1703
f952992f035ec130b7608e9851ef9c3becc2047a,if self._session_is_active():,0,0,0.0,1704
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.warning(_(""Session %s is inactive!""),",0,0,0.0,1705
f952992f035ec130b7608e9851ef9c3becc2047a,except error_util.SessionConnectionException as excep:,0,0,0.0,1706
f952992f035ec130b7608e9851ef9c3becc2047a,self._create_session(),0,0,0.0,1707
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session.key, exc_info=True)",0,0,0.0,1708
f952992f035ec130b7608e9851ef9c3becc2047a,create_datastore(),1,0,0.0,1709
f952992f035ec130b7608e9851ef9c3becc2047a,create_datacenter(),1,0,0.0,1710
f952992f035ec130b7608e9851ef9c3becc2047a,create_host(),1,0,0.0,1711
f952992f035ec130b7608e9851ef9c3becc2047a,else:,1,0,0.0,1712
f952992f035ec130b7608e9851ef9c3becc2047a,"service_content.fileManager,",1,0,0.0,1713
f952992f035ec130b7608e9851ef9c3becc2047a,"name=vmdk_path,",1,0,0.0,1714
f952992f035ec130b7608e9851ef9c3becc2047a,datacenter=dc_ref),1,0,0.0,1715
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], vmdk_delete_task)",1,0,0.0,1716
f952992f035ec130b7608e9851ef9c3becc2047a,_delete_disk_file(flat_uploaded_vmdk_path),1,0,0.0,1717
f952992f035ec130b7608e9851ef9c3becc2047a,_delete_disk_file(sparse_uploaded_vmdk_path),1,0,0.0,1718
f952992f035ec130b7608e9851ef9c3becc2047a,"destName=dest_vmdk_file_location,",1,0,0.0,1719
f952992f035ec130b7608e9851ef9c3becc2047a,"""DeleteVirtualDisk_Task"",",1,0,0.0,1720
f952992f035ec130b7608e9851ef9c3becc2047a,"service_content.virtualDiskManager,",1,0,0.0,1721
f952992f035ec130b7608e9851ef9c3becc2047a,"name=dest_vmdk_file_location,",1,0,0.0,1722
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], remove_disk_task)",1,0,0.0,1723
f952992f035ec130b7608e9851ef9c3becc2047a,cleanup(),0,0,0.0,1724
f952992f035ec130b7608e9851ef9c3becc2047a,if vc:,0,0,0.0,1725
f952992f035ec130b7608e9851ef9c3becc2047a,create_host(),0,0,0.0,1726
f952992f035ec130b7608e9851ef9c3becc2047a,"create_datacenter('dc1', ds_ref1)",0,0,0.0,1727
f952992f035ec130b7608e9851ef9c3becc2047a,"create_datacenter('dc2', ds_ref2)",0,0,0.0,1728
f952992f035ec130b7608e9851ef9c3becc2047a,"create_cluster('test_cluster', ds_ref1)",0,0,0.0,1729
f952992f035ec130b7608e9851ef9c3becc2047a,"create_cluster('test_cluster2', ds_ref2)",0,0,0.0,1730
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,1731
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.capacity"", capacity * unit.Gi)",0,0,0.0,1732
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.freeSpace"", free * unit.Gi)",0,0,0.0,1733
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""datastore"", datastore)",0,0,0.0,1734
f952992f035ec130b7608e9851ef9c3becc2047a,cluster._add_datastore(ds_ref),0,0,0.0,1735
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Suspend instance"", instance=instance)",0,0,0.0,1736
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualIDEController"": constants.ADAPTER_TYPE_IDE,",0,0,0.0,1737
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Power off instance"", instance=instance)",0,0,0.0,1738
f952992f035ec130b7608e9851ef9c3becc2047a,else:,1,0,0.0,1739
f952992f035ec130b7608e9851ef9c3becc2047a,"server_username=username,",1,0,0.0,1740
f952992f035ec130b7608e9851ef9c3becc2047a,"server_password=password,",1,0,0.0,1741
f952992f035ec130b7608e9851ef9c3becc2047a,"api_retry_count=retry_count,",1,0,0.0,1742
f952992f035ec130b7608e9851ef9c3becc2047a,"task_poll_interval=CONF.vmware.task_poll_interval,",1,0,0.0,1743
f952992f035ec130b7608e9851ef9c3becc2047a,"scheme=scheme,",1,0,0.0,1744
f952992f035ec130b7608e9851ef9c3becc2047a,"create_session=True,",1,0,0.0,1745
f952992f035ec130b7608e9851ef9c3becc2047a,"cacert=cacert,",1,0,0.0,1746
f952992f035ec130b7608e9851ef9c3becc2047a,"insecure=insecure,",1,0,0.0,1747
f952992f035ec130b7608e9851ef9c3becc2047a,pool_size=pool_size),1,0,0.0,1748
f952992f035ec130b7608e9851ef9c3becc2047a,args provided.,1,0,0.0,1749
f952992f035ec130b7608e9851ef9c3becc2047a,if not self._is_vim_object(module):,1,0,0.0,1750
f952992f035ec130b7608e9851ef9c3becc2047a,"_db_content.setdefault(table_obj.obj._type, {})",0,0,0.0,1751
f952992f035ec130b7608e9851ef9c3becc2047a,"conn.putheader(""Cookie"", self._build_vim_cookie_headers(cookies))",1,0,0.0,1752
f952992f035ec130b7608e9851ef9c3becc2047a,update_object(table_obj),0,0,0.0,1753
f952992f035ec130b7608e9851ef9c3becc2047a,self.objects.append(obj),0,0,0.0,1754
f952992f035ec130b7608e9851ef9c3becc2047a,yield obj.obj,0,0,0.0,1755
f952992f035ec130b7608e9851ef9c3becc2047a,""", "".join(",0,0,0.0,1756
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""vm"", vm_list)",0,0,0.0,1757
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""vm"", pool.get(""vm""))",0,0,0.0,1758
f952992f035ec130b7608e9851ef9c3becc2047a,"if _no_objects_of_type(""HostNetworkSystem""):",0,0,0.0,1759
f952992f035ec130b7608e9851ef9c3becc2047a,"if _no_objects_of_type(""HostStorageSystem""):",0,0,0.0,1760
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""configManager.networkSystem"", host_net_ref)",0,0,0.0,1761
f952992f035ec130b7608e9851ef9c3becc2047a,"if _no_objects_of_type(""Network""):",0,0,0.0,1762
f952992f035ec130b7608e9851ef9c3becc2047a,"if _no_objects_of_type(""Folder""):",0,0,0.0,1763
f952992f035ec130b7608e9851ef9c3becc2047a,"port=host_port,",1,0,0.0,1764
f952992f035ec130b7608e9851ef9c3becc2047a,"host=host_ip,",1,0,0.0,1765
f952992f035ec130b7608e9851ef9c3becc2047a,"super(VMwareAPISession, self).__init__(",1,0,0.0,1766
f952992f035ec130b7608e9851ef9c3becc2047a,pool_size=CONF.vmware.connection_pool_size):,1,0,0.0,1767
f952992f035ec130b7608e9851ef9c3becc2047a,"VMwareHTTPFile.__init__(self, conn)",1,0,0.0,1768
f952992f035ec130b7608e9851ef9c3becc2047a,self.file_handle.send(data),1,0,0.0,1769
f952992f035ec130b7608e9851ef9c3becc2047a,self.conn.getresponse(),1,0,0.0,1770
f952992f035ec130b7608e9851ef9c3becc2047a,except Exception:,1,0,0.0,1771
f952992f035ec130b7608e9851ef9c3becc2047a,"""VMwareHTTPWrite"", exc_info=True)",1,0,0.0,1772
f952992f035ec130b7608e9851ef9c3becc2047a,"super(VMwareHTTPWriteFile, self).close()",1,0,0.0,1773
f952992f035ec130b7608e9851ef9c3becc2047a,"file_path, scheme=""https""):",1,0,0.0,1774
f952992f035ec130b7608e9851ef9c3becc2047a,'Cookie': self._build_vim_cookie_headers(cookies)},1,0,0.0,1775
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualLsiLogicController"": constants.DEFAULT_ADAPTER_TYPE,",0,0,0.0,1776
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualBusLogicController"": constants.ADAPTER_TYPE_BUSLOGIC,",0,0,0.0,1777
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualLsiLogicSASController"": constants.ADAPTER_TYPE_LSILOGICSAS,",0,0,0.0,1778
f952992f035ec130b7608e9851ef9c3becc2047a,"""ParaVirtualSCSIController"": constants.ADAPTER_TYPE_PARAVIRTUAL",0,0,0.0,1779
f952992f035ec130b7608e9851ef9c3becc2047a,},0,0,0.0,1780
f952992f035ec130b7608e9851ef9c3becc2047a,device.__class__.__name__],0,0,0.0,1781
f952992f035ec130b7608e9851ef9c3becc2047a,"extra_specs.vif_limits, i)",0,0,0.0,1782
f952992f035ec130b7608e9851ef9c3becc2047a,extra_specs.vif_limits),1,0,0.0,1783
f952992f035ec130b7608e9851ef9c3becc2047a,"host_port=CONF.vmware.host_port,",1,0,0.0,1784
f952992f035ec130b7608e9851ef9c3becc2047a,"username=CONF.vmware.host_username,",1,0,0.0,1785
f952992f035ec130b7608e9851ef9c3becc2047a,"password=CONF.vmware.host_password,",1,0,0.0,1786
f952992f035ec130b7608e9851ef9c3becc2047a,"retry_count=CONF.vmware.api_retry_count,",1,0,0.0,1787
f952992f035ec130b7608e9851ef9c3becc2047a,"scheme=""https"",",1,0,0.0,1788
f952992f035ec130b7608e9851ef9c3becc2047a,"cacert=CONF.vmware.ca_file,",1,0,0.0,1789
f952992f035ec130b7608e9851ef9c3becc2047a,"insecure=CONF.vmware.insecure,",1,0,0.0,1790
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(host_net_system),0,0,0.0,1791
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(host_storage_system),0,0,0.0,1792
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(host_system),0,0,0.0,1793
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""configManager.networkSystem"", host_net_sys)",1,0,0.0,1794
f952992f035ec130b7608e9851ef9c3becc2047a,"list(_db_content[""Network""].keys())[0]].obj",1,0,0.0,1795
f952992f035ec130b7608e9851ef9c3becc2047a,"if _db_content.get(""Folder"", None) is None:",1,0,0.0,1796
f952992f035ec130b7608e9851ef9c3becc2047a,"list(_db_content[""Folder""].keys())[0]].obj",1,0,0.0,1797
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(""HostNetworkSystem"", host_net_system)",1,0,0.0,1798
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(""HostStorageSystem"", host_storage_system)",1,0,0.0,1799
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('HostSystem', host_system)",1,0,0.0,1800
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('Datacenter', data_center)",1,0,0.0,1801
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('Datastore', data_store)",1,0,0.0,1802
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('ResourcePool', res_pool)",1,0,0.0,1803
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('Folder', folder)",1,0,0.0,1804
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('Network', network)",1,0,0.0,1805
f952992f035ec130b7608e9851ef9c3becc2047a,"cluster._add_host(_get_object_refs(""HostSystem"")[0])",1,0,0.0,1806
f952992f035ec130b7608e9851ef9c3becc2047a,"cluster._add_host(_get_object_refs(""HostSystem"")[1])",1,0,0.0,1807
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object('ClusterComputeResource', cluster)",1,0,0.0,1808
f952992f035ec130b7608e9851ef9c3becc2047a,list(_db_content['Datastore'].values())[0]),1,0,0.0,1809
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(""VirtualMachine"", vm)",1,0,0.0,1810
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(""Task"", task)",1,0,0.0,1811
f952992f035ec130b7608e9851ef9c3becc2047a,"if _db_content.get(""VirtualMachine"", None) is None:",1,0,0.0,1812
f952992f035ec130b7608e9851ef9c3becc2047a,vm_refs.append(vm_ref),1,0,0.0,1813
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(""VirtualMachine"", virtual_machine)",1,0,0.0,1814
f952992f035ec130b7608e9851ef9c3becc2047a,"del _db_content[""VirtualMachine""][vm_ref]",1,0,0.0,1815
f952992f035ec130b7608e9851ef9c3becc2047a,"""registered yet"")",1,0,0.0,1816
f952992f035ec130b7608e9851ef9c3becc2047a,"super(Datastore, self).__init__(""Datastore"")",1,0,0.0,1817
f952992f035ec130b7608e9851ef9c3becc2047a,"if _db_content.get(""Network"", None) is None:",1,0,0.0,1818
f952992f035ec130b7608e9851ef9c3becc2047a,if not _get_object_refs('HostStorageSystem'):,1,0,0.0,1819
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(data_center),0,0,0.0,1820
f952992f035ec130b7608e9851ef9c3becc2047a,"if _db_content.get(""HostNetworkSystem"", None) is None:",1,0,0.0,1821
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(data_store),0,0,0.0,1822
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(res_pool),0,0,0.0,1823
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(folder),0,0,0.0,1824
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(network),0,0,0.0,1825
f952992f035ec130b7608e9851ef9c3becc2047a,cluster._add_host(host),0,0,0.0,1826
f952992f035ec130b7608e9851ef9c3becc2047a,if i >= 1:,0,0,0.0,1827
f952992f035ec130b7608e9851ef9c3becc2047a,break,0,0,0.0,1828
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(cluster),0,0,0.0,1829
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(vm),0,0,0.0,1830
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(task),0,0,0.0,1831
f952992f035ec130b7608e9851ef9c3becc2047a,if not vms:,0,0,0.0,1832
f952992f035ec130b7608e9851ef9c3becc2047a,try:,0,0,0.0,1833
f952992f035ec130b7608e9851ef9c3becc2047a,except KeyError:,0,0,0.0,1834
f952992f035ec130b7608e9851ef9c3becc2047a,vm_refs.append(vm.obj),0,0,0.0,1835
f952992f035ec130b7608e9851ef9c3becc2047a,_create_object(virtual_machine),0,0,0.0,1836
f952992f035ec130b7608e9851ef9c3becc2047a,"del _db_content[""VirtualMachine""][vm_ref.value]",0,0,0.0,1837
f952992f035ec130b7608e9851ef9c3becc2047a,"Prop(prop_name, mdo.get(prop_name))",0,0,0.0,1838
f952992f035ec130b7608e9851ef9c3becc2047a,],0,0,0.0,1839
f952992f035ec130b7608e9851ef9c3becc2047a,"_db_content.setdefault(table, {})",1,0,0.0,1840
f952992f035ec130b7608e9851ef9c3becc2047a,lst_objs.add_object(_db_content[obj_type][key]),1,0,0.0,1841
f952992f035ec130b7608e9851ef9c3becc2047a,self.objects.append(object),1,0,0.0,1842
f952992f035ec130b7608e9851ef9c3becc2047a,lst_objs.append(key),1,0,0.0,1843
f952992f035ec130b7608e9851ef9c3becc2047a,"[list(_db_content[""HostSystem""].keys())[0]].obj)",1,0,0.0,1844
f952992f035ec130b7608e9851ef9c3becc2047a,conn.endheaders(),1,0,0.0,1845
f952992f035ec130b7608e9851ef9c3becc2047a,"conn.putheader(""Content-Length"", file_size)",1,0,0.0,1846
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Power on instance"", instance=instance)",0,0,0.0,1847
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Suspend instance""), instance=instance)",1,0,0.0,1848
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""kernel/ramdisk files removed"", instance=instance)",0,0,0.0,1849
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Creating vifs"", instance=instance)",0,0,0.0,1850
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Created VIF %(vif_ref)s, network %(network_ref)s',",0,0,0.0,1851
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Injecting hostname (%s) into xenstore"", hostname,",0,0,0.0,1852
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(base_vhd_path)s, Target: %(root_vhd_path)s""),",1,0,0.0,1853
f952992f035ec130b7608e9851ef9c3becc2047a,"""%(root_vhd_path)s""),",1,0,0.0,1854
f952992f035ec130b7608e9851ef9c3becc2047a,"""size %(root_vhd_size)s""),",1,0,0.0,1855
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Instance not found""), instance=instance)",1,0,0.0,1856
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Rebooting instance""), instance=instance)",1,0,0.0,1857
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Pause instance""), instance=instance)",1,0,0.0,1858
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Unpause instance""), instance=instance)",1,0,0.0,1859
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Resume instance""), instance=instance)",1,0,0.0,1860
f952992f035ec130b7608e9851ef9c3becc2047a,"conn.putheader(""User-Agent"", USER_AGENT)",1,0,0.0,1861
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Power off instance""), instance=instance)",1,0,0.0,1862
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Power on instance""), instance=instance)",1,0,0.0,1863
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Extended root virtual disk""))",1,0,0.0,1864
f952992f035ec130b7608e9851ef9c3becc2047a,"""Exception: %(ex)s""),",1,0,0.0,1865
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""File %s already exists""), dest_folder)",1,0,0.0,1866
f952992f035ec130b7608e9851ef9c3becc2047a,"""cdrom %(file_path)s""),",1,0,0.0,1867
f952992f035ec130b7608e9851ef9c3becc2047a,"{'datastore_name': datastore_name},",1,0,0.0,1868
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Destroying instance""), instance=instance)",1,0,0.0,1869
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Instance destroyed""), instance=instance)",1,0,0.0,1870
f952992f035ec130b7608e9851ef9c3becc2047a,"""without doing anything""), instance=instance)",1,0,0.0,1871
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""instance not present""), instance=instance)",1,0,0.0,1872
f952992f035ec130b7608e9851ef9c3becc2047a,"""deletion"", instance=instance)",0,0,0.0,1873
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Destroying VDIs"", instance=instance)",0,0,0.0,1874
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Migrated all base vhds."", instance=instance)",0,0,0.0,1875
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Migrated root base vhds"", instance=instance)",0,0,0.0,1876
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Extended root virtual disk"")",0,0,0.0,1877
f952992f035ec130b7608e9851ef9c3becc2047a,"""Exception: %(ex)s"",",0,0,0.0,1878
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""File %s already exists"", dest_folder)",0,0,0.0,1879
f952992f035ec130b7608e9851ef9c3becc2047a,"""cdrom %(file_path)s"",",0,0,0.0,1880
f952992f035ec130b7608e9851ef9c3becc2047a,"""datastore %(datastore_name)s"",",0,0,0.0,1881
f952992f035ec130b7608e9851ef9c3becc2047a,"{'datastore_name': datastore_name},",0,0,0.0,1882
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Destroying instance"", instance=instance)",0,0,0.0,1883
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Instance destroyed"", instance=instance)",0,0,0.0,1884
f952992f035ec130b7608e9851ef9c3becc2047a,"""without doing anything"", instance=instance)",0,0,0.0,1885
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""instance not present"", instance=instance)",0,0,0.0,1886
f952992f035ec130b7608e9851ef9c3becc2047a,"""port - %(port)s"", {'port': port},",0,0,0.0,1887
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Folder %s created."", path)",0,0,0.0,1888
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Image aging disabled. Aging will not be done."")",0,0,0.0,1889
f952992f035ec130b7608e9851ef9c3becc2047a,"{""disk_type"": disk_type,",0,0,0.0,1890
f952992f035ec130b7608e9851ef9c3becc2047a,"""adapter_type"": adapter_type})",0,0,0.0,1891
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Starting instance"", instance=instance)",0,0,0.0,1892
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Block device information present: %s"",",0,0,0.0,1893
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Using PV kernel: %s"", use_pv_kernel, instance=instance)",0,0,0.0,1894
f952992f035ec130b7608e9851ef9c3becc2047a,"""resize root disk..."", instance=instance)",0,0,0.0,1895
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""Skip agent setup, not enabled."", instance=instance)",0,0,0.0,1896
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug('Detected agent version: %s', version, instance=instance)",0,0,0.0,1897
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(""VM was already shutdown."", instance=instance)",0,0,0.0,1898
f952992f035ec130b7608e9851ef9c3becc2047a,"""trying hard shutdown."", instance=instance)",0,0,0.0,1899
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Folder %s created.""), path)",1,0,0.0,1900
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Image aging disabled. Aging will not be done.""))",1,0,0.0,1901
f952992f035ec130b7608e9851ef9c3becc2047a,"{""disk_type"": disk_type,",1,0,0.0,1902
f952992f035ec130b7608e9851ef9c3becc2047a,if root_disk:,0,0,0.0,1903
f952992f035ec130b7608e9851ef9c3becc2047a,if uuid:,1,0,0.0,1904
f952992f035ec130b7608e9851ef9c3becc2047a,else:,1,0,0.0,1905
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(device, 'capacityInBytes'):",1,0,0.0,1906
f952992f035ec130b7608e9851ef9c3becc2047a,"if getattr(device.backing, 'thinProvisioned', False):",1,0,0.0,1907
f952992f035ec130b7608e9851ef9c3becc2047a,"if getattr(device.backing, 'eagerlyScrub', False):",1,0,0.0,1908
f952992f035ec130b7608e9851ef9c3becc2047a,"file_path, scheme=""https""):",0,0,0.0,1909
f952992f035ec130b7608e9851ef9c3becc2047a,cookies=cookies),0,0,0.0,1910
f952992f035ec130b7608e9851ef9c3becc2047a,"rw_handles.FileHandle.__init__(self, self._conn)",0,0,0.0,1911
f952992f035ec130b7608e9851ef9c3becc2047a,urllib.pathname2url(file_path)),0,0,0.0,1912
f952992f035ec130b7608e9851ef9c3becc2047a,import httplib,1,0,0.0,1913
f952992f035ec130b7608e9851ef9c3becc2047a,import urllib2,1,0,0.0,1914
f952992f035ec130b7608e9851ef9c3becc2047a,import six.moves.urllib.parse as urlparse,1,0,0.0,1915
f952992f035ec130b7608e9851ef9c3becc2047a,uses its own CHUNKSIZE.,1,0,0.0,1916
f952992f035ec130b7608e9851ef9c3becc2047a,try:,1,0,0.0,1917
f952992f035ec130b7608e9851ef9c3becc2047a,except StopIteration:,1,0,0.0,1918
f952992f035ec130b7608e9851ef9c3becc2047a,pass,1,0,0.0,1919
f952992f035ec130b7608e9851ef9c3becc2047a,self.file_handle.close(),1,0,0.0,1920
f952992f035ec130b7608e9851ef9c3becc2047a,except Exception as exc:,1,0,0.0,1921
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.exception(exc),1,0,0.0,1922
f952992f035ec130b7608e9851ef9c3becc2047a,break,1,0,0.0,1923
f952992f035ec130b7608e9851ef9c3becc2047a,raise NotImplementedError(),1,0,0.0,1924
f952992f035ec130b7608e9851ef9c3becc2047a,"file_path, file_size, scheme=""https""):",1,0,0.0,1925
f952992f035ec130b7608e9851ef9c3becc2047a,"conn.putrequest(""PUT"", path + ""?"" + query)",1,0,0.0,1926
f952992f035ec130b7608e9851ef9c3becc2047a,if vmdk_device:,0,0,0.0,1927
f952992f035ec130b7608e9851ef9c3becc2047a,if uuid:,0,0,0.0,1928
f952992f035ec130b7608e9851ef9c3becc2047a,"""adapter_type"": adapter_type})",1,0,0.0,1929
f952992f035ec130b7608e9851ef9c3becc2047a,"if getattr(device.backing, 'eagerlyScrub', False):",0,0,0.0,1930
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Starting instance""), instance=instance)",1,0,0.0,1931
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Block device information present: %s""),",1,0,0.0,1932
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Using PV kernel: %s""), use_pv_kernel, instance=instance)",1,0,0.0,1933
f952992f035ec130b7608e9851ef9c3becc2047a,"""resize root disk...""), instance=instance)",1,0,0.0,1934
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Skip agent setup, not enabled.""), instance=instance)",1,0,0.0,1935
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Detected agent version: %s'), version, instance=instance)",1,0,0.0,1936
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""VM was already shutdown.""), instance=instance)",1,0,0.0,1937
f952992f035ec130b7608e9851ef9c3becc2047a,"""trying hard shutdown.""), instance=instance)",1,0,0.0,1938
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Migrated root base vhds""), instance=instance)",1,0,0.0,1939
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Migrated all base vhds.""), instance=instance)",1,0,0.0,1940
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Destroying VDIs""), instance=instance)",1,0,0.0,1941
f952992f035ec130b7608e9851ef9c3becc2047a,"""deletion""), instance=instance)",1,0,0.0,1942
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""kernel/ramdisk files removed""), instance=instance)",1,0,0.0,1943
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Creating vifs""), instance=instance)",1,0,0.0,1944
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_('Created VIF %(vif_ref)s, network %(network_ref)s'),",1,0,0.0,1945
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""Injecting hostname (%s) into xenstore""), hostname,",1,0,0.0,1946
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Fake service class.""""""",0,0,0.0,1947
f952992f035ec130b7608e9851ef9c3becc2047a,pass,0,0,0.0,1948
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""Fake client class.""""""",0,0,0.0,1949
f952992f035ec130b7608e9851ef9c3becc2047a,"""vmware_adaptertype"": constants.DEFAULT_ADAPTER_TYPE}",1,0,0.0,1950
f952992f035ec130b7608e9851ef9c3becc2047a,"if hasattr(device, 'capacityInBytes'):",0,0,0.0,1951
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,1952
f952992f035ec130b7608e9851ef9c3becc2047a,"if getattr(device.backing, 'thinProvisioned', False):",0,0,0.0,1953
f952992f035ec130b7608e9851ef9c3becc2047a,"super(HostNetworkSystem, self).__init__(""HostNetworkSystem"")",1,0,0.0,1954
f952992f035ec130b7608e9851ef9c3becc2047a,try:,0,0,0.0,1955
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""datastore"", datastore)",1,0,0.0,1956
f952992f035ec130b7608e9851ef9c3becc2047a,"""adapter_type"": adapter_type,",0,0,0.0,1957
f952992f035ec130b7608e9851ef9c3becc2047a,disk_type),0,0,0.0,1958
f952992f035ec130b7608e9851ef9c3becc2047a,"datacenter=dc_ref,",0,0,0.0,1959
f952992f035ec130b7608e9851ef9c3becc2047a,"""disk_type"": disk_type,",0,0,0.0,1960
f952992f035ec130b7608e9851ef9c3becc2047a,"{""vmdk_path"": vmdk_path,",0,0,0.0,1961
f952992f035ec130b7608e9851ef9c3becc2047a,"name=vmdk_path,",0,0,0.0,1962
f952992f035ec130b7608e9851ef9c3becc2047a,datacenter=dc_ref),0,0,0.0,1963
f952992f035ec130b7608e9851ef9c3becc2047a,"{'image_ref': instance['image_ref'],",0,0,0.0,1964
f952992f035ec130b7608e9851ef9c3becc2047a,"data_center_name=self._get_datacenter_ref_and_name()[1],",0,0,0.0,1965
f952992f035ec130b7608e9851ef9c3becc2047a,file_path=upload_vmdk_name),0,0,0.0,1966
f952992f035ec130b7608e9851ef9c3becc2047a,"'upload_vmdk_name': upload_vmdk_name,",0,0,0.0,1967
f952992f035ec130b7608e9851ef9c3becc2047a,"{""vmdk_file_size_in_kb"": vmdk_file_size_in_kb,",0,0,0.0,1968
f952992f035ec130b7608e9851ef9c3becc2047a,"""data_store_name"": data_store_name,",0,0,0.0,1969
f952992f035ec130b7608e9851ef9c3becc2047a,if not ebs_root:,0,0,0.0,1970
f952992f035ec130b7608e9851ef9c3becc2047a,"""disk_type"": disk_type},",0,0,0.0,1971
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._get_vim(),",0,0,0.0,1972
f952992f035ec130b7608e9851ef9c3becc2047a,"""CopyVirtualDisk_Task"",",0,0,0.0,1973
f952992f035ec130b7608e9851ef9c3becc2047a,"service_content.virtualDiskManager,",0,0,0.0,1974
f952992f035ec130b7608e9851ef9c3becc2047a,"sourceName=sparse_uploaded_vmdk_path,",0,0,0.0,1975
f952992f035ec130b7608e9851ef9c3becc2047a,"sourceDatacenter=self._get_datacenter_ref_and_name()[0],",0,0,0.0,1976
f952992f035ec130b7608e9851ef9c3becc2047a,"destName=uploaded_vmdk_path,",0,0,0.0,1977
f952992f035ec130b7608e9851ef9c3becc2047a,destSpec=vmdk_copy_spec),0,0,0.0,1978
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], vmdk_copy_task)",0,0,0.0,1979
f952992f035ec130b7608e9851ef9c3becc2047a,"""data_store_name"": data_store_name},",0,0,0.0,1980
f952992f035ec130b7608e9851ef9c3becc2047a,instance=instance),0,0,0.0,1981
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_size_in_kb, adapter_type,",0,0,0.0,1982
f952992f035ec130b7608e9851ef9c3becc2047a,"self._set_vnc_config(client_factory, instance, vnc_port, vnc_pass)",0,0,0.0,1983
f952992f035ec130b7608e9851ef9c3becc2047a,if CONF.vnc_enabled:,0,0,0.0,1984
f952992f035ec130b7608e9851ef9c3becc2047a,"config=config_spec, pool=res_pool_ref)",0,0,0.0,1985
f952992f035ec130b7608e9851ef9c3becc2047a,self._vmops.finish_revert_migration(instance),0,0,0.0,1986
f952992f035ec130b7608e9851ef9c3becc2047a,"network_info, image_meta, resize_instance=False,",0,0,0.0,1987
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.finish_migration(context, migration, instance, disk_info,",0,0,0.0,1988
f952992f035ec130b7608e9851ef9c3becc2047a,"network_info, image_meta, resize_instance)",0,0,0.0,1989
f952992f035ec130b7608e9851ef9c3becc2047a,"post_method, recover_method, block_migration=False,",0,0,0.0,1990
f952992f035ec130b7608e9851ef9c3becc2047a,migrate_data=None):,0,0,0.0,1991
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.live_migration(context, instance_ref, dest,",0,0,0.0,1992
f952992f035ec130b7608e9851ef9c3becc2047a,"post_method, recover_method,",0,0,0.0,1993
f952992f035ec130b7608e9851ef9c3becc2047a,block_migration),0,0,0.0,1994
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.poll_rebooting_instances(timeout, instances)",0,0,0.0,1995
f952992f035ec130b7608e9851ef9c3becc2047a,remote tasks,1,0,0.0,1996
f952992f035ec130b7608e9851ef9c3becc2047a,network failures (socket errors etc.),1,0,0.0,1997
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.spawn(context, instance, image_meta, network_info)",1,0,0.0,1998
f952992f035ec130b7608e9851ef9c3becc2047a,"CONF.import_opt('vnc_enabled', 'nova.vnc')",0,0,0.0,1999
f952992f035ec130b7608e9851ef9c3becc2047a,'suspended': power_state.SUSPENDED},0,0,0.0,2000
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_info=None):,0,0,0.0,2001
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceExists(name=instance['name']),0,0,0.0,2002
f952992f035ec130b7608e9851ef9c3becc2047a,"instance['image_ref'],",0,0,0.0,2003
f952992f035ec130b7608e9851ef9c3becc2047a,instance),0,0,0.0,2004
f952992f035ec130b7608e9851ef9c3becc2047a,"""preallocated"")",0,0,0.0,2005
f952992f035ec130b7608e9851ef9c3becc2047a,"(vmdk_file_size_in_kb, os_type, adapter_type,",0,0,0.0,2006
f952992f035ec130b7608e9851ef9c3becc2047a,if network_info is None:,0,0,0.0,2007
f952992f035ec130b7608e9851ef9c3becc2047a,"""CreateVM_Task"", vm_folder_ref,",0,0,0.0,2008
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_info),0,0,0.0,2009
f952992f035ec130b7608e9851ef9c3becc2047a,if linked_clone:,0,0,0.0,2010
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", ""test_cluster"")",1,0,0.0,2011
f952992f035ec130b7608e9851ef9c3becc2047a,"name=dir_ds_compliant_path,",0,0,0.0,2012
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""instance not present""), instance=instance)",0,0,0.0,2013
f952992f035ec130b7608e9851ef9c3becc2047a,self.power_off(instance),0,0,0.0,2014
f952992f035ec130b7608e9851ef9c3becc2047a,"""Destroy_Task"", vm_ref)",0,0,0.0,2015
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], destroy_task)",0,0,0.0,2016
f952992f035ec130b7608e9851ef9c3becc2047a,"except Exception, excep:",0,0,0.0,2017
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.warn(_(""In vmwareapi:vmops:delete, got this exception""",0,0,0.0,2018
f952992f035ec130b7608e9851ef9c3becc2047a,if network_info:,0,0,0.0,2019
f952992f035ec130b7608e9851ef9c3becc2047a,"self.unplug_vifs(instance, network_info)",0,0,0.0,2020
f952992f035ec130b7608e9851ef9c3becc2047a,"except Exception, exc:",0,0,0.0,2021
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.exception(exc, instance=instance)",0,0,0.0,2022
f952992f035ec130b7608e9851ef9c3becc2047a,"""UnregisterVM"", vm_ref)",0,0,0.0,2023
f952992f035ec130b7608e9851ef9c3becc2047a,datacenter=self._get_datacenter_ref_and_name()[0]),0,0,0.0,2024
f952992f035ec130b7608e9851ef9c3becc2047a,else:,0,0,0.0,2025
f952992f035ec130b7608e9851ef9c3becc2047a,"""without doing anything""), instance=instance)",0,0,0.0,2026
f952992f035ec130b7608e9851ef9c3becc2047a,"self.spawn(context, instance, image_meta, network_info)",0,0,0.0,2027
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualMachine"", ""config.hardware.device"")",0,0,0.0,2028
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_path, controller_key, adapter_type, disk_type, unit_number \",0,0,0.0,2029
f952992f035ec130b7608e9851ef9c3becc2047a,"rescue_vm_ref, instance,",0,0,0.0,2030
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type, disk_type, vmdk_path,",0,0,0.0,2031
f952992f035ec130b7608e9851ef9c3becc2047a,"controller_key=controller_key,",0,0,0.0,2032
f952992f035ec130b7608e9851ef9c3becc2047a,unit_number=unit_number),0,0,0.0,2033
f952992f035ec130b7608e9851ef9c3becc2047a,"self.destroy(instance, None)",0,0,0.0,2034
f952992f035ec130b7608e9851ef9c3becc2047a,self.power_on(instance),0,0,0.0,2035
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualMachine"", ""runtime.powerState"")",0,0,0.0,2036
f952992f035ec130b7608e9851ef9c3becc2047a,if vm_ref is None:,0,0,0.0,2037
f952992f035ec130b7608e9851ef9c3becc2047a,instance['name']),0,0,0.0,2038
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type,",0,0,0.0,2039
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_file_path_before_snapshot)[0],0,0,0.0,2040
f952992f035ec130b7608e9851ef9c3becc2047a,uploaded_vmdk_name),0,0,0.0,2041
f952992f035ec130b7608e9851ef9c3becc2047a,if not (linked_clone and self._check_if_folder_file_exists(,0,0,0.0,2042
f952992f035ec130b7608e9851ef9c3becc2047a,"data_store_ref, data_store_name,",0,0,0.0,2043
f952992f035ec130b7608e9851ef9c3becc2047a,"upload_folder, upload_name + "".vmdk"")):",0,0,0.0,2044
f952992f035ec130b7608e9851ef9c3becc2047a,"upload_folder, upload_name)",0,0,0.0,2045
f952992f035ec130b7608e9851ef9c3becc2047a,"data_store_name,",0,0,0.0,2046
f952992f035ec130b7608e9851ef9c3becc2047a,flat_uploaded_vmdk_name),0,0,0.0,2047
f952992f035ec130b7608e9851ef9c3becc2047a,sparse_uploaded_vmdk_name),0,0,0.0,2048
f952992f035ec130b7608e9851ef9c3becc2047a,"if disk_type != ""sparse"":",0,0,0.0,2049
f952992f035ec130b7608e9851ef9c3becc2047a,_create_virtual_disk(),0,0,0.0,2050
f952992f035ec130b7608e9851ef9c3becc2047a,_delete_disk_file(flat_uploaded_vmdk_path),0,0,0.0,2051
f952992f035ec130b7608e9851ef9c3becc2047a,self._session._get_vim().client.options.transport.cookiejar,0,0,0.0,2052
f952992f035ec130b7608e9851ef9c3becc2047a,_fetch_image_on_esx_datastore(),0,0,0.0,2053
f952992f035ec130b7608e9851ef9c3becc2047a,_copy_virtual_disk(),0,0,0.0,2054
f952992f035ec130b7608e9851ef9c3becc2047a,_delete_disk_file(sparse_uploaded_vmdk_path),0,0,0.0,2055
f952992f035ec130b7608e9851ef9c3becc2047a,self._volumeops.attach_disk_to_vm(,0,0,0.0,2056
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_ref, instance,",0,0,0.0,2057
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type, disk_type, uploaded_vmdk_path,",0,0,0.0,2058
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_size_in_kb, linked_clone)",0,0,0.0,2059
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_info)[0],0,0,0.0,2060
f952992f035ec130b7608e9851ef9c3becc2047a,"self._volumeops.attach_volume(connection_info, instance['name'],",0,0,0.0,2061
f952992f035ec130b7608e9851ef9c3becc2047a,self._default_root_device),0,0,0.0,2062
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance['uuid']),0,0,0.0,2063
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.confirm_migration(migration, instance, network_info)",0,0,0.0,2064
f952992f035ec130b7608e9851ef9c3becc2047a,"dest, instance_type)",0,0,0.0,2065
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_info=None):,0,0,0.0,2066
f952992f035ec130b7608e9851ef9c3becc2047a,device.backing.__class__.__name__ \,1,0,0.0,2067
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:DistributedVirtualSwitchPortConnection'),0,0,0.0,2068
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:VirtualEthernetCardNetworkBackingInfo'),0,0,0.0,2069
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualDiskFlatVer2BackingInfo""):",0,0,0.0,2070
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:VirtualDiskFlatVer2BackingInfo'),0,0,0.0,2071
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:VirtualMachineConfigSpec'),0,0,0.0,2072
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:VirtualLsiLogicController'),1,0,0.0,2073
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:VirtualEthernetCardDistributedVirtualPortBackingInfo',1,0,0.0,2074
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create(backing_name),1,0,0.0,2075
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:DistributedVirtualSwitchPortConnection'),1,0,0.0,2076
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:VirtualEthernetCardNetworkBackingInfo'),1,0,0.0,2077
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:VirtualDeviceConnectInfo'),1,0,0.0,2078
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:FileBackedVirtualDiskSpec'),1,0,0.0,2079
f952992f035ec130b7608e9851ef9c3becc2047a,"instance_type, network_info,",0,0,0.0,2080
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:VirtualDiskFlatVer2BackingInfo'),1,0,0.0,2081
f952992f035ec130b7608e9851ef9c3becc2047a,"default='nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver',",0,0,0.0,2082
f952992f035ec130b7608e9851ef9c3becc2047a,"instance.image_ref,",0,0,0.0,2083
f952992f035ec130b7608e9851ef9c3becc2047a,instance),0,0,0.0,2084
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session, network_name)",0,0,0.0,2085
f952992f035ec130b7608e9851ef9c3becc2047a,"client_factory, hardware_devices)",0,0,0.0,2086
f952992f035ec130b7608e9851ef9c3becc2047a,"(vmdk_file_path_before_snapshot, adapter_type, datastore_name,",0,0,0.0,2087
f952992f035ec130b7608e9851ef9c3becc2047a,"ip_v4 and ip_v4['ip'] or '',",0,0,0.0,2088
f952992f035ec130b7608e9851ef9c3becc2047a,"ip_v4 and ip_v4['netmask'] or '',",0,0,0.0,2089
f952992f035ec130b7608e9851ef9c3becc2047a,"info['gateway'],",0,0,0.0,2090
f952992f035ec130b7608e9851ef9c3becc2047a,"info['broadcast'],",0,0,0.0,2091
f952992f035ec130b7608e9851ef9c3becc2047a,'VirtualPortBackingInfo']),0,0,0.0,2092
f952992f035ec130b7608e9851ef9c3becc2047a,'ns0:VirtualDeviceConfigSpec'),0,0,0.0,2093
f952992f035ec130b7608e9851ef9c3becc2047a,client_factory.create('ns0:PropertyFilterSpec'),1,0,0.0,2094
f952992f035ec130b7608e9851ef9c3becc2047a,"get_object_properties(vim, None, mobj, type, [property_name])",1,0,0.0,2095
f952992f035ec130b7608e9851ef9c3becc2047a,'this_host': _db_content['host'].keys()[0]},0,0,0.0,2096
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_sr(cls, params) or",0,0,0.0,2097
f952992f035ec130b7608e9851ef9c3becc2047a,is_vlan_create and,0,0,0.0,2098
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_vlan(params[1], params[2], params[3]) or",0,0,0.0,2099
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(cls, params[1]))",0,0,0.0,2100
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_path.replace("".vmdk"", ""-flat.vmdk"")",1,0,0.0,2101
f952992f035ec130b7608e9851ef9c3becc2047a,"_db_content[""HostSystem""][_db_content[""HostSystem""].keys()[0]]",1,0,0.0,2102
f952992f035ec130b7608e9851ef9c3becc2047a,"{'uuid': str(uuid.uuid4()),",1,0,0.0,2103
f952992f035ec130b7608e9851ef9c3becc2047a,'this_host': _db_content['host'].keys()[0]},1,0,0.0,2104
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_sr(cls, params) or \",1,0,0.0,2105
f952992f035ec130b7608e9851ef9c3becc2047a,is_vlan_create and \,1,0,0.0,2106
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_vlan(params[1], params[2], params[3]) or \",1,0,0.0,2107
f952992f035ec130b7608e9851ef9c3becc2047a,"_create_object(cls, params[1])",1,0,0.0,2108
f952992f035ec130b7608e9851ef9c3becc2047a,"default=None,",0,0,0.0,2109
f952992f035ec130b7608e9851ef9c3becc2047a,help='VIM Service WSDL Location ',0,0,0.0,2110
f952992f035ec130b7608e9851ef9c3becc2047a,'e.g http://<server>/vimService.wsdl. ',0,0,0.0,2111
f952992f035ec130b7608e9851ef9c3becc2047a,managed_object),0,0,0.0,2112
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.StrOpt('vmwareapi_wsdl_loc',",1,0,0.0,2113
f952992f035ec130b7608e9851ef9c3becc2047a,"default=None,",1,0,0.0,2114
f952992f035ec130b7608e9851ef9c3becc2047a,help='VIM Service WSDL Location ',1,0,0.0,2115
f952992f035ec130b7608e9851ef9c3becc2047a,'e.g http://<server>/vimService.wsdl. ',1,0,0.0,2116
f952992f035ec130b7608e9851ef9c3becc2047a,"self.RetrieveServiceContent(""ServiceInstance"")",1,0,0.0,2117
f952992f035ec130b7608e9851ef9c3becc2047a,self._request_managed_object_builder(managed_object),1,0,0.0,2118
f952992f035ec130b7608e9851ef9c3becc2047a,dns]),0,0,0.0,2119
f952992f035ec130b7608e9851ef9c3becc2047a,"client_factory, machine_id_str)",0,0,0.0,2120
f952992f035ec130b7608e9851ef9c3becc2047a,"""install"")",0,0,0.0,2121
f952992f035ec130b7608e9851ef9c3becc2047a,self._create_snapshot(instance),1,0,0.0,2122
f952992f035ec130b7608e9851ef9c3becc2047a,if instance['auto_disk_config'] and \,1,0,0.0,2123
f952992f035ec130b7608e9851ef9c3becc2047a,instance['root_gb'] > instance_type['root_gb']:,1,0,0.0,2124
f952992f035ec130b7608e9851ef9c3becc2047a,remote tasks,0,0,0.0,2125
f952992f035ec130b7608e9851ef9c3becc2047a,network failures (socket errors etc.),0,0,0.0,2126
f952992f035ec130b7608e9851ef9c3becc2047a,:vnc_password:              VNC password,0,0,0.0,2127
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.IntOpt('vnc_port',",0,0,0.0,2128
f952992f035ec130b7608e9851ef9c3becc2047a,"default=5900,",0,0,0.0,2129
f952992f035ec130b7608e9851ef9c3becc2047a,"help='VNC starting port'),",0,0,0.0,2130
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.IntOpt('vnc_port_total',",0,0,0.0,2131
f952992f035ec130b7608e9851ef9c3becc2047a,"default=10000,",0,0,0.0,2132
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.StrOpt('vnc_password',",0,0,0.0,2133
f952992f035ec130b7608e9851ef9c3becc2047a,"default=None,",0,0,0.0,2134
f952992f035ec130b7608e9851ef9c3becc2047a,"help='VNC password'),",0,0,0.0,2135
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.BoolOpt('use_linked_clone',",0,0,0.0,2136
f952992f035ec130b7608e9851ef9c3becc2047a,"default=True,",0,0,0.0,2137
f952992f035ec130b7608e9851ef9c3becc2047a,self._volumeops),0,0,0.0,2138
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.spawn(context, instance, image_meta, network_info,",0,0,0.0,2139
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_info),0,0,0.0,2140
f952992f035ec130b7608e9851ef9c3becc2047a,rescue_password):,0,0,0.0,2141
f952992f035ec130b7608e9851ef9c3becc2047a,"self._vmops.rescue(context, instance, network_info, image_meta)",0,0,0.0,2142
f952992f035ec130b7608e9851ef9c3becc2047a,self._vmops.unrescue(instance),0,0,0.0,2143
f952992f035ec130b7608e9851ef9c3becc2047a,self._vmops.power_off(instance),0,0,0.0,2144
f952992f035ec130b7608e9851ef9c3becc2047a,self._vmops.power_on(instance),0,0,0.0,2145
f952992f035ec130b7608e9851ef9c3becc2047a,"VMHelper.get_vdi_for_vm_safely(self._session, vm_ref)",1,0,0.0,2146
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.debug(_('Removing VDI %(vdi_ref)s' +,1,0,0.0,2147
f952992f035ec130b7608e9851ef9c3becc2047a,if (version and agent_build and,0,0,0.0,2148
f952992f035ec130b7608e9851ef9c3becc2047a,"cmp_version(version, agent_build['version']) < 0:",1,0,0.0,2149
f952992f035ec130b7608e9851ef9c3becc2047a,"cmp_version(version, agent_build['version']) < 0):",0,0,0.0,2150
f952992f035ec130b7608e9851ef9c3becc2047a,LOG.debug(_('Removing VDI %(vdi_ref)s',0,0,0.0,2151
f952992f035ec130b7608e9851ef9c3becc2047a,if (instance['auto_disk_config'] and,0,0,0.0,2152
f952992f035ec130b7608e9851ef9c3becc2047a,instance['root_gb'] > instance_type['root_gb']):,0,0,0.0,2153
f952992f035ec130b7608e9851ef9c3becc2047a,"cfg.StrOpt('vmware_vif_driver',",1,0,0.0,2154
f952992f035ec130b7608e9851ef9c3becc2047a,"default='nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver',",1,0,0.0,2155
f952992f035ec130b7608e9851ef9c3becc2047a,"vmware_images.get_vmdk_size_and_properties(context,",1,0,0.0,2156
f952992f035ec130b7608e9851ef9c3becc2047a,"instance.image_ref, instance)",1,0,0.0,2157
f952992f035ec130b7608e9851ef9c3becc2047a,"network_utils.get_network_with_the_name(self._session,",1,0,0.0,2158
f952992f035ec130b7608e9851ef9c3becc2047a,network_name),1,0,0.0,2159
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_util.get_vmdk_file_path_and_adapter_type(client_factory,",1,0,0.0,2160
f952992f035ec130b7608e9851ef9c3becc2047a,hardware_devices),1,0,0.0,2161
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_path_before_snapshot, adapter_type, datastore_name,\",1,0,0.0,2162
f952992f035ec130b7608e9851ef9c3becc2047a,vm_util.split_datastore_path(vm_config_pathname),1,0,0.0,2163
f952992f035ec130b7608e9851ef9c3becc2047a,"(info['mac'],",1,0,0.0,2164
f952992f035ec130b7608e9851ef9c3becc2047a,"ip_v4 and ip_v4['ip'] or '',",1,0,0.0,2165
f952992f035ec130b7608e9851ef9c3becc2047a,"ip_v4 and ip_v4['netmask'] or '',",1,0,0.0,2166
f952992f035ec130b7608e9851ef9c3becc2047a,"info['gateway'],",1,0,0.0,2167
f952992f035ec130b7608e9851ef9c3becc2047a,"info['broadcast'],",1,0,0.0,2168
f952992f035ec130b7608e9851ef9c3becc2047a,dns),1,0,0.0,2169
f952992f035ec130b7608e9851ef9c3becc2047a,"vm_util.get_machine_id_change_spec(client_factory, machine_id_str)",1,0,0.0,2170
f952992f035ec130b7608e9851ef9c3becc2047a,"""install"")",1,0,0.0,2171
f952992f035ec130b7608e9851ef9c3becc2047a,if version and agent_build and \,1,0,0.0,2172
f952992f035ec130b7608e9851ef9c3becc2047a,"""PowerOffVM_Task"", vm_ref)",0,0,0.0,2173
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], poweroff_task)",0,0,0.0,2174
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstancePowerOffFailure(reason=reason),0,0,0.0,2175
f952992f035ec130b7608e9851ef9c3becc2047a,lst_objs.append(key),0,0,0.0,2176
f952992f035ec130b7608e9851ef9c3becc2047a,"if not isinstance(prop_list, collections.Iterable):",0,0,0.0,2177
f952992f035ec130b7608e9851ef9c3becc2047a,"if not isinstance(missing_list, collections.Iterable):",0,0,0.0,2178
f952992f035ec130b7608e9851ef9c3becc2047a,if value is None:,0,0,0.0,2179
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set('runtime.host',",0,0,0.0,2180
f952992f035ec130b7608e9851ef9c3becc2047a,"ManagedObjectReference(value='host-123', _type=""HostSystem""))",0,0,0.0,2181
f952992f035ec130b7608e9851ef9c3becc2047a,"super(HostSystem, self).__init__(""HostSystem"", obj_ref, value)",0,0,0.0,2182
f952992f035ec130b7608e9851ef9c3becc2047a,"super(HostSystem, self).__init__(""HostSystem"")",1,0,0.0,2183
f952992f035ec130b7608e9851ef9c3becc2047a,if CONF.vmware.wsdl_location:,0,0,0.0,2184
f952992f035ec130b7608e9851ef9c3becc2047a,if utils.is_valid_ipv6(host_name):,0,0,0.0,2185
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.name"", name)",0,0,0.0,2186
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.name"", ""fake-ds"")",1,0,0.0,2187
f952992f035ec130b7608e9851ef9c3becc2047a,"object.__setattr__(self, 'mo_id', self._generate_moid(mo_id_prefix))",0,0,0.0,2188
f952992f035ec130b7608e9851ef9c3becc2047a,"self.unplug_vifs(instance, network_info)",1,0,0.0,2189
f952992f035ec130b7608e9851ef9c3becc2047a,"object.__setattr__(self, 'obj',",0,0,0.0,2190
f952992f035ec130b7608e9851ef9c3becc2047a,"ManagedObjectReference(self.__class__.__name__,",0,0,0.0,2191
f952992f035ec130b7608e9851ef9c3becc2047a,self.mo_id)),0,0,0.0,2192
f952992f035ec130b7608e9851ef9c3becc2047a,'name': self.__class__.__name__}),0,0,0.0,2193
f952992f035ec130b7608e9851ef9c3becc2047a,self.__class__._counter += 1,0,0,0.0,2194
f952992f035ec130b7608e9851ef9c3becc2047a,"super(VirtualMachine, self).__init__(""vm"")",0,0,0.0,2195
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", kwargs.get(""name"", 'test-vm'))",0,0,0.0,2196
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""datastore"", _convert_to_array_of_mor(ds_do))",0,0,0.0,2197
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set('runtime.host', kwargs.get(""runtime_host"", None))",0,0,0.0,2198
f952992f035ec130b7608e9851ef9c3becc2047a,"super(Network, self).__init__(""network"")",0,0,0.0,2199
f952992f035ec130b7608e9851ef9c3becc2047a,"super(ResourcePool, self).__init__(""rp"")",0,0,0.0,2200
f952992f035ec130b7608e9851ef9c3becc2047a,"""""""ObjectContent array holds dynamic properties.""""""",0,0,0.0,2201
f952992f035ec130b7608e9851ef9c3becc2047a,"super(ManagedObjectReference, self)",0,0,0.0,2202
f952992f035ec130b7608e9851ef9c3becc2047a,import collections,0,0,0.0,2203
f952992f035ec130b7608e9851ef9c3becc2047a,"""extra_config"": config_spec.extraConfig}",1,0,0.0,2204
f952992f035ec130b7608e9851ef9c3becc2047a,"""without doing anything""), instance=instance)",1,0,0.0,2205
f952992f035ec130b7608e9851ef9c3becc2047a,"""VirtualMachine"", [""name""])",1,0,0.0,2206
f952992f035ec130b7608e9851ef9c3becc2047a,"self._volumeops.attach_volume(connection_info, instance['uuid'],",0,0,0.0,2207
f952992f035ec130b7608e9851ef9c3becc2047a,instance['uuid']),0,0,0.0,2208
f952992f035ec130b7608e9851ef9c3becc2047a,if rescue_vm_ref is None:,0,0,0.0,2209
f952992f035ec130b7608e9851ef9c3becc2047a,if vm_ref is None:,0,0,0.0,2210
f952992f035ec130b7608e9851ef9c3becc2047a,"""Rename_Task"", vm_ref, newName=instance['uuid'])",0,0,0.0,2211
f952992f035ec130b7608e9851ef9c3becc2047a,if vm_ref:,1,0,0.0,2212
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceExists(name=instance['name']),1,0,0.0,2213
f952992f035ec130b7608e9851ef9c3becc2047a,"self._volumeops.attach_volume(connection_info, instance['name'],",1,0,0.0,2214
f952992f035ec130b7608e9851ef9c3becc2047a,if vm_ref is None:,1,0,0.0,2215
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance['uuid']),1,0,0.0,2216
f952992f035ec130b7608e9851ef9c3becc2047a,instance['name']),1,0,0.0,2217
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""instance not present""), instance=instance)",1,0,0.0,2218
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance['name']),1,0,0.0,2219
f952992f035ec130b7608e9851ef9c3becc2047a,"""Rename_Task"", vm_ref, newName=instance['name'])",1,0,0.0,2220
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance_ref.name),1,0,0.0,2221
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""config.hardware.device"", [disk, controller,",0,0,0.0,2222
f952992f035ec130b7608e9851ef9c3becc2047a,self.device[0]]),0,0,0.0,2223
f952992f035ec130b7608e9851ef9c3becc2047a,"""extra_config"": config_spec.extraConfig,",0,0,0.0,2224
f952992f035ec130b7608e9851ef9c3becc2047a,"""virtual_device"": config_spec.deviceChange}",0,0,0.0,2225
f952992f035ec130b7608e9851ef9c3becc2047a,pass,1,0,0.0,2226
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""config.hardware.device"", [disk, controller, nic])",1,0,0.0,2227
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", name)",0,0,0.0,2228
f952992f035ec130b7608e9851ef9c3becc2047a,"super(ClusterComputeResource, self).__init__(""domain"")",0,0,0.0,2229
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""host"", None)",0,0,0.0,2230
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""connected"", connected)",0,0,0.0,2231
f952992f035ec130b7608e9851ef9c3becc2047a,"cluster._add_host(_get_object_refs(""HostSystem"")[0])",0,0,0.0,2232
f952992f035ec130b7608e9851ef9c3becc2047a,"cluster._add_datastore(_get_object_refs(""Datastore"")[0])",0,0,0.0,2233
f952992f035ec130b7608e9851ef9c3becc2047a,"""ds"": [ds],",0,0,0.0,2234
f952992f035ec130b7608e9851ef9c3becc2047a,"""runtime_host"": host,",0,0,0.0,2235
f952992f035ec130b7608e9851ef9c3becc2047a,prop_list.append(prop),0,0,0.0,2236
f952992f035ec130b7608e9851ef9c3becc2047a,lst_ret_objs.add_object(obj_content),0,0,0.0,2237
f952992f035ec130b7608e9851ef9c3becc2047a,"super(ManagedObject, self).__setattr__('objName', name)",1,0,0.0,2238
f952992f035ec130b7608e9851ef9c3becc2047a,if obj_ref is None:,1,0,0.0,2239
f952992f035ec130b7608e9851ef9c3becc2047a,if value is None:,1,0,0.0,2240
f952992f035ec130b7608e9851ef9c3becc2047a,"object.__setattr__(self, 'obj', obj_ref)",1,0,0.0,2241
f952992f035ec130b7608e9851ef9c3becc2047a,'name': self.objName}),1,0,0.0,2242
f952992f035ec130b7608e9851ef9c3becc2047a,"super(VirtualMachine, self).__init__(""VirtualMachine"", value='vm-10')",1,0,0.0,2243
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", kwargs.get(""name""))",1,0,0.0,2244
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""datastore"", ds_do)",1,0,0.0,2245
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set('runtime.host',",1,0,0.0,2246
f952992f035ec130b7608e9851ef9c3becc2047a,"ManagedObjectReference(value='host-123', _type=""HostSystem""))",1,0,0.0,2247
f952992f035ec130b7608e9851ef9c3becc2047a,"super(Network, self).__init__(""Network"")",1,0,0.0,2248
f952992f035ec130b7608e9851ef9c3becc2047a,"super(ResourcePool, self).__init__(""ResourcePool"")",1,0,0.0,2249
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""name"", ""ResPool"")",1,0,0.0,2250
f952992f035ec130b7608e9851ef9c3becc2047a,"super(ClusterComputeResource, self).__init__(""ClusterComputeResource"",",1,0,0.0,2251
f952992f035ec130b7608e9851ef9c3becc2047a,"value=""domain-test"")",1,0,0.0,2252
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""resourcePool"", r_pool)",1,0,0.0,2253
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""host"", host_sys)",1,0,0.0,2254
f952992f035ec130b7608e9851ef9c3becc2047a,"super(Datacenter, self).__init__(""dc"")",0,0,0.0,2255
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary.hardware"", hardware)",0,0,0.0,2256
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""datastore"", None)",0,0,0.0,2257
f952992f035ec130b7608e9851ef9c3becc2047a,"super(HostSystem, self).__init__(""host"")",0,0,0.0,2258
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""resourcePool"", None)",0,0,0.0,2259
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""summary"", summary)",0,0,0.0,2260
f952992f035ec130b7608e9851ef9c3becc2047a,if r_pool:,0,0,0.0,2261
f952992f035ec130b7608e9851ef9c3becc2047a,if r_pools is None:,0,0,0.0,2262
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""resourcePool"", r_pools)",0,0,0.0,2263
f952992f035ec130b7608e9851ef9c3becc2047a,r_pools.ManagedObjectReference.append(r_pool),0,0,0.0,2264
f952992f035ec130b7608e9851ef9c3becc2047a,if host_sys:,0,0,0.0,2265
f952992f035ec130b7608e9851ef9c3becc2047a,if hosts is None:,0,0,0.0,2266
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""host"", hosts)",0,0,0.0,2267
f952992f035ec130b7608e9851ef9c3becc2047a,hosts.ManagedObjectReference.append(host_sys),0,0,0.0,2268
f952992f035ec130b7608e9851ef9c3becc2047a,self._update_summary(),0,0,0.0,2269
f952992f035ec130b7608e9851ef9c3becc2047a,if datastore:,0,0,0.0,2270
f952992f035ec130b7608e9851ef9c3becc2047a,if datastores is None:,0,0,0.0,2271
f952992f035ec130b7608e9851ef9c3becc2047a,"self.set(""datastore"", datastores)",0,0,0.0,2272
f952992f035ec130b7608e9851ef9c3becc2047a,datastores.ManagedObjectReference.append(datastore),0,0,0.0,2273
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numCpuCores += host_summary.hardware.numCpuCores,0,0,0.0,2274
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numCpuThreads += host_summary.hardware.numCpuThreads,0,0,0.0,2275
f952992f035ec130b7608e9851ef9c3becc2047a,summary.totalMemory += host_summary.hardware.memorySize,0,0,0.0,2276
f952992f035ec130b7608e9851ef9c3becc2047a,- host_summary.quickStats.overallMemoryUsage),0,0,0.0,2277
f952992f035ec130b7608e9851ef9c3becc2047a,summary.effectiveMemory += free_memory if connected else 0,0,0,0.0,2278
f952992f035ec130b7608e9851ef9c3becc2047a,summary.numEffectiveHosts += 1 if connected else 0,0,0,0.0,2279
f952992f035ec130b7608e9851ef9c3becc2047a,"super(Datastore, self).__init__(""ds"")",0,0,0.0,2280
f952992f035ec130b7608e9851ef9c3becc2047a,"super(HostNetworkSystem, self).__init__(""ns"")",0,0,0.0,2281
f952992f035ec130b7608e9851ef9c3becc2047a,name=dir_ds_compliant_path),1,0,0.0,2282
f952992f035ec130b7608e9851ef9c3becc2047a,"""UnregisterVM"", vm_ref)",1,0,0.0,2283
f952992f035ec130b7608e9851ef9c3becc2047a,"""PowerOnVM_Task"", vm_ref)",0,0,0.0,2284
f952992f035ec130b7608e9851ef9c3becc2047a,@staticmethod,0,0,0.0,2285
f952992f035ec130b7608e9851ef9c3becc2047a,"host=host_ref,",0,0,0.0,2286
f952992f035ec130b7608e9851ef9c3becc2047a,"priority=""defaultPriority"")",0,0,0.0,2287
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance_ref['uuid'], vm_migrate_task)",0,0,0.0,2288
f952992f035ec130b7608e9851ef9c3becc2047a,except Exception:,0,0,0.0,2289
f952992f035ec130b7608e9851ef9c3becc2047a,"recover_method(context, instance_ref, dest, block_migration)",0,0,0.0,2290
f952992f035ec130b7608e9851ef9c3becc2047a,"post_method(context, instance_ref, dest, block_migration)",0,0,0.0,2291
f952992f035ec130b7608e9851ef9c3becc2047a,timeout=timeout),0,0,0.0,2292
f952992f035ec130b7608e9851ef9c3becc2047a,"if instances_info[""instance_count""] > 0:",0,0,0.0,2293
f952992f035ec130b7608e9851ef9c3becc2047a,"self.compute_api.reboot(ctxt, instance, ""HARD"")",0,0,0.0,2294
f952992f035ec130b7608e9851ef9c3becc2047a,"'port': self._get_vnc_port(vm_ref),",0,0,0.0,2295
f952992f035ec130b7608e9851ef9c3becc2047a,'internal_access_path': None},0,0,0.0,2296
f952992f035ec130b7608e9851ef9c3becc2047a,"client_factory, port, password)",0,0,0.0,2297
f952992f035ec130b7608e9851ef9c3becc2047a,adapter_type),1,0,0.0,2298
f952992f035ec130b7608e9851ef9c3becc2047a,"""ReconfigVM_Task"", vm_ref,",0,0,0.0,2299
f952992f035ec130b7608e9851ef9c3becc2047a,spec=vnc_config_spec),0,0,0.0,2300
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], reconfig_task)",0,0,0.0,2301
f952992f035ec130b7608e9851ef9c3becc2047a,"""Datacenter"", [""vmFolder""])",0,0,0.0,2302
f952992f035ec130b7608e9851ef9c3becc2047a,"""ResourcePool"")[0].obj",0,0,0.0,2303
f952992f035ec130b7608e9851ef9c3becc2047a,"""SearchDatastore_Task"",",0,0,0.0,2304
f952992f035ec130b7608e9851ef9c3becc2047a,"ds_browser,",0,0,0.0,2305
f952992f035ec130b7608e9851ef9c3becc2047a,"datastorePath=ds_path,",0,0,0.0,2306
f952992f035ec130b7608e9851ef9c3becc2047a,searchSpec=search_spec),0,0,0.0,2307
f952992f035ec130b7608e9851ef9c3becc2047a,while True:,0,0,0.0,2308
f952992f035ec130b7608e9851ef9c3becc2047a,"search_task, ""Task"", ""info"")",0,0,0.0,2309
f952992f035ec130b7608e9851ef9c3becc2047a,"""MigrateVM_Task"", vm_ref,",0,0,0.0,2310
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance_ref.name),0,0,0.0,2311
f952992f035ec130b7608e9851ef9c3becc2047a,"post_method, recover_method, block_migration=False):",0,0,0.0,2312
f952992f035ec130b7608e9851ef9c3becc2047a,"step=4,",0,0,0.0,2313
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], poweron_task)",0,0,0.0,2314
f952992f035ec130b7608e9851ef9c3becc2047a,"self._virtapi.instance_update(context, instance_uuid,",0,0,0.0,2315
f952992f035ec130b7608e9851ef9c3becc2047a,{'progress': progress}),0,0,0.0,2316
f952992f035ec130b7608e9851ef9c3becc2047a,instance_type):,0,0,0.0,2317
f952992f035ec130b7608e9851ef9c3becc2047a,"self._update_instance_progress(context, instance,",0,0,0.0,2318
f952992f035ec130b7608e9851ef9c3becc2047a,"step=0,",0,0,0.0,2319
f952992f035ec130b7608e9851ef9c3becc2047a,total_steps=RESIZE_TOTAL_STEPS),0,0,0.0,2320
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance['name']),0,0,0.0,2321
f952992f035ec130b7608e9851ef9c3becc2047a,if host_ref is None:,0,0,0.0,2322
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.HostNotFound(host=dest),0,0,0.0,2323
f952992f035ec130b7608e9851ef9c3becc2047a,"step=1,",0,0,0.0,2324
f952992f035ec130b7608e9851ef9c3becc2047a,"""Rename_Task"", vm_ref, newName=name_label)",0,0,0.0,2325
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], rename_task)",0,0,0.0,2326
f952992f035ec130b7608e9851ef9c3becc2047a,"step=2,",0,0,0.0,2327
f952992f035ec130b7608e9851ef9c3becc2047a,"""CloneVM_Task"", vm_ref,",0,0,0.0,2328
f952992f035ec130b7608e9851ef9c3becc2047a,"folder=vm_folder_ref,",0,0,0.0,2329
f952992f035ec130b7608e9851ef9c3becc2047a,"name=instance['name'],",0,0,0.0,2330
f952992f035ec130b7608e9851ef9c3becc2047a,spec=clone_spec),0,0,0.0,2331
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], vm_clone_task)",0,0,0.0,2332
f952992f035ec130b7608e9851ef9c3becc2047a,"step=3,",0,0,0.0,2333
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=name_label),0,0,0.0,2334
f952992f035ec130b7608e9851ef9c3becc2047a,"""Rename_Task"", vm_ref, newName=instance['name'])",0,0,0.0,2335
f952992f035ec130b7608e9851ef9c3becc2047a,"network_info, image_meta, resize_instance=False):",0,0,0.0,2336
f952992f035ec130b7608e9851ef9c3becc2047a,time.sleep(2),0,0,0.0,2337
f952992f035ec130b7608e9851ef9c3becc2047a,continue,0,0,0.0,2338
f952992f035ec130b7608e9851ef9c3becc2047a,break,0,0,0.0,2339
f952992f035ec130b7608e9851ef9c3becc2047a,"""CreateVM_Task"", vm_folder_mor,",1,0,0.0,2340
f952992f035ec130b7608e9851ef9c3becc2047a,flat_uploaded_vmdk_name),1,0,0.0,2341
f952992f035ec130b7608e9851ef9c3becc2047a,uploaded_vmdk_name),1,0,0.0,2342
f952992f035ec130b7608e9851ef9c3becc2047a,"vmdk_file_size_in_kb, adapter_type)",1,0,0.0,2343
f952992f035ec130b7608e9851ef9c3becc2047a,"datacenter=self._get_datacenter_name_and_ref()[0],",1,0,0.0,2344
f952992f035ec130b7608e9851ef9c3becc2047a,_create_virtual_disk(),1,0,0.0,2345
f952992f035ec130b7608e9851ef9c3becc2047a,"{""flat_uploaded_vmdk_path"": flat_uploaded_vmdk_path,",1,0,0.0,2346
f952992f035ec130b7608e9851ef9c3becc2047a,name=flat_uploaded_vmdk_path),1,0,0.0,2347
f952992f035ec130b7608e9851ef9c3becc2047a,_delete_disk_file(),1,0,0.0,2348
f952992f035ec130b7608e9851ef9c3becc2047a,"{'image_ref': instance.image_ref,",1,0,0.0,2349
f952992f035ec130b7608e9851ef9c3becc2047a,"data_center_name=self._get_datacenter_name_and_ref()[1],",1,0,0.0,2350
f952992f035ec130b7608e9851ef9c3becc2047a,file_path=flat_uploaded_vmdk_name),1,0,0.0,2351
f952992f035ec130b7608e9851ef9c3becc2047a,_fetch_image_on_esx_datastore(),1,0,0.0,2352
f952992f035ec130b7608e9851ef9c3becc2047a,"client_factory,",1,0,0.0,2353
f952992f035ec130b7608e9851ef9c3becc2047a,"adapter_type, ""preallocated"",",1,0,0.0,2354
f952992f035ec130b7608e9851ef9c3becc2047a,"uploaded_vmdk_path, vmdk_file_size_in_kb)",1,0,0.0,2355
f952992f035ec130b7608e9851ef9c3becc2047a,instance=instance),1,0,0.0,2356
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._get_vim(),",1,0,0.0,2357
f952992f035ec130b7608e9851ef9c3becc2047a,"""ReconfigVM_Task"", vm_ref,",1,0,0.0,2358
f952992f035ec130b7608e9851ef9c3becc2047a,spec=vmdk_attach_config_spec),1,0,0.0,2359
f952992f035ec130b7608e9851ef9c3becc2047a,"self._session._wait_for_task(instance['uuid'], reconfig_task)",1,0,0.0,2360
f952992f035ec130b7608e9851ef9c3becc2047a,_attach_vmdk_to_the_vm(),1,0,0.0,2361
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceNotFound(instance_id=instance.id),1,0,0.0,2362
f952992f035ec130b7608e9851ef9c3becc2047a,vmdk_file_path_before_snapshot)[0],1,0,0.0,2363
f952992f035ec130b7608e9851ef9c3becc2047a,"config=config_spec, pool=res_pool_mor)",1,0,0.0,2364
f952992f035ec130b7608e9851ef9c3becc2047a,"""ResourcePool"")[0].obj",1,0,0.0,2365
f952992f035ec130b7608e9851ef9c3becc2047a,"folder_name, file_name):",0,0,0.0,2366
f952992f035ec130b7608e9851ef9c3becc2047a,"""Datacenter"", [""vmFolder""])",1,0,0.0,2367
f952992f035ec130b7608e9851ef9c3becc2047a,"ds_ref,",0,0,0.0,2368
f952992f035ec130b7608e9851ef9c3becc2047a,"""Datastore"",",0,0,0.0,2369
f952992f035ec130b7608e9851ef9c3becc2047a,"""browser"")",0,0,0.0,2370
f952992f035ec130b7608e9851ef9c3becc2047a,"folder_path,",0,0,0.0,2371
f952992f035ec130b7608e9851ef9c3becc2047a,file_name),0,0,0.0,2372
f952992f035ec130b7608e9851ef9c3becc2047a,if not folder_exists:,0,0,0.0,2373
f952992f035ec130b7608e9851ef9c3becc2047a,"self._mkdir(vm_util.build_datastore_path(ds_name, folder_name))",0,0,0.0,2374
f952992f035ec130b7608e9851ef9c3becc2047a,driver.block_device_info_get_mapping(,0,0,0.0,2375
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_info)],0,0,0.0,2376
f952992f035ec130b7608e9851ef9c3becc2047a,if driver.swap_is_usable(swap):,0,0,0.0,2377
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_list.append(,0,0,0.0,2378
f952992f035ec130b7608e9851ef9c3becc2047a,block_device.strip_dev(swap['device_name'])),0,0,0.0,2379
f952992f035ec130b7608e9851ef9c3becc2047a,block_device_list += [block_device.strip_dev(ephemeral['device_name']),0,0,0.0,2380
f952992f035ec130b7608e9851ef9c3becc2047a,driver.block_device_info_get_ephemerals(,0,0,0.0,2381
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.debug(_(""block_device_list %s""), block_device_list)",0,0,0.0,2382
f952992f035ec130b7608e9851ef9c3becc2047a,'suspended': power_state.PAUSED},1,0,0.0,2383
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.InstanceExists(name=instance.name),1,0,0.0,2384
f952992f035ec130b7608e9851ef9c3becc2047a,"""Datastore"", [""summary.type"", ""summary.name""])",1,0,0.0,2385
f952992f035ec130b7608e9851ef9c3becc2047a,if data_store_name is None:,1,0,0.0,2386
f952992f035ec130b7608e9851ef9c3becc2047a,"LOG.error(msg, instance=instance)",1,0,0.0,2387
f952992f035ec130b7608e9851ef9c3becc2047a,raise exception.NovaException(msg),1,0,0.0,2388
f952992f035ec130b7608e9851ef9c3becc2047a,"instance.image_ref,",1,0,0.0,2389
f952992f035ec130b7608e9851ef9c3becc2047a,instance),1,0,0.0,2390
f952992f035ec130b7608e9851ef9c3becc2047a,prop_list.append(prop),1,0,0.0,2391
