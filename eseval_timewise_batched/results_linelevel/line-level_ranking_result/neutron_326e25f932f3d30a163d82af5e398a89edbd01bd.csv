commit_id,line,line_level_label,count,line_score,row
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Return True if the device with the given IP addresses and MAC address",0,4,1.0,1
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Return True if the device with the given IP and MAC addresses",1,4,1.0,2
326e25f932f3d30a163d82af5e398a89edbd01bd,# Create the first router fip with external net1,1,3,0.75,3
326e25f932f3d30a163d82af5e398a89edbd01bd,"def __init__(self, name, namespace=None):",1,3,0.75,4
326e25f932f3d30a163d82af5e398a89edbd01bd,ip = ip_lib.IPWrapper(),0,3,0.75,5
326e25f932f3d30a163d82af5e398a89edbd01bd,device corresponding to the router interface is removed,1,3,0.75,6
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test to validate the snat namespace with interface remove.",1,3,0.75,7
326e25f932f3d30a163d82af5e398a89edbd01bd,# We get the router info particular to a dvr router,1,3,0.75,8
326e25f932f3d30a163d82af5e398a89edbd01bd,# Create the second router fip with external net2,1,3,0.75,9
326e25f932f3d30a163d82af5e398a89edbd01bd,ip = ip_lib.IPWrapper(),1,3,0.75,10
326e25f932f3d30a163d82af5e398a89edbd01bd,"* A ""client"" namespace (simulating a vm) with a port on router",1,3,0.75,11
326e25f932f3d30a163d82af5e398a89edbd01bd,"ha_device = ip_lib.IPDevice(device_name, router.ha_namespace)",1,3,0.75,12
326e25f932f3d30a163d82af5e398a89edbd01bd,result = next(rule for rule in rules if predicate(rule)),1,3,0.75,13
326e25f932f3d30a163d82af5e398a89edbd01bd,"device = ip_lib.IPDevice(name_getter(target_device), namespace)",1,3,0.75,14
326e25f932f3d30a163d82af5e398a89edbd01bd,ip = ip_lib.IPWrapper(namespace=namespace),1,3,0.75,15
326e25f932f3d30a163d82af5e398a89edbd01bd,"ha_device = ip_lib.IPDevice(device_name, namespace=router1.ns_name)",1,3,0.75,16
326e25f932f3d30a163d82af5e398a89edbd01bd,"device = ip_lib.IPDevice(interface, namespace=router.ns_name)",1,3,0.75,17
326e25f932f3d30a163d82af5e398a89edbd01bd,"ha_device = ip_lib.IPDevice(device_name, namespace=router1.ns_name)",1,3,0.75,18
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace = mock.ANY,0,2,0.5,19
326e25f932f3d30a163d82af5e398a89edbd01bd,"cmd = ['ps', '-f', '-u', 'root']",0,2,0.5,20
326e25f932f3d30a163d82af5e398a89edbd01bd,"out = utils.execute(cmd, run_as_root=True)",0,2,0.5,21
326e25f932f3d30a163d82af5e398a89edbd01bd,with mock.patch('neutron.agent.linux.ip_lib.IPWrapper') as ip_wrap:,0,2,0.5,22
326e25f932f3d30a163d82af5e398a89edbd01bd,"expected = set(['1347', '1279', '1349', '1353'])",0,2,0.5,23
326e25f932f3d30a163d82af5e398a89edbd01bd,expected = set(),0,2,0.5,24
326e25f932f3d30a163d82af5e398a89edbd01bd,calls = [],0,2,0.5,25
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, 'unplug_device') as unplug:",1,2,0.5,26
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, 'unplug_device') as unplug:",0,2,0.5,27
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, 'kill_dhcp') as kill_dhcp:",0,2,0.5,28
326e25f932f3d30a163d82af5e398a89edbd01bd,expected = [mock.call(namespace=ns)],0,2,0.5,29
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, 'kill_dhcp') as kill_dhcp:",1,2,0.5,30
326e25f932f3d30a163d82af5e398a89edbd01bd,expected = [mock.call(namespace=ns)],1,2,0.5,31
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.common import utils as common_utils,0,2,0.5,32
326e25f932f3d30a163d82af5e398a89edbd01bd,ip = ip_lib.IPWrapper(namespace=netns),0,2,0.5,33
326e25f932f3d30a163d82af5e398a89edbd01bd,# Now save the internal device name to verify later,1,2,0.5,34
326e25f932f3d30a163d82af5e398a89edbd01bd,router1 = self._create_dvr_ha_router(self.agent),1,2,0.5,35
326e25f932f3d30a163d82af5e398a89edbd01bd,"snat_port_cidr = ip + ""/"" + str(prefix_len)",1,2,0.5,36
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip = snat_port[""fixed_ips""][0]['ip_address']",1,2,0.5,37
326e25f932f3d30a163d82af5e398a89edbd01bd,"ex_gw_port_cidr = ip + ""/"" + str(prefix_len)",1,2,0.5,38
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip = ex_gw_port[""fixed_ips""][0]['ip_address']",1,2,0.5,39
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace = router.ha_namespace,1,2,0.5,40
326e25f932f3d30a163d82af5e398a89edbd01bd,"router = self.manage_router(agent, r_info)",1,2,0.5,41
326e25f932f3d30a163d82af5e398a89edbd01bd,"# that the server did not send it, since the interface has been",1,2,0.5,42
326e25f932f3d30a163d82af5e398a89edbd01bd,ns = ip.ensure_namespace(attr.namespace),0,2,0.5,43
326e25f932f3d30a163d82af5e398a89edbd01bd,when the router interface is deleted.,1,2,0.5,44
326e25f932f3d30a163d82af5e398a89edbd01bd,This test validates the snat namespace for all the external,1,2,0.5,45
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info['distributed'] = True,1,2,0.5,46
326e25f932f3d30a163d82af5e398a89edbd01bd,if fip in line:,1,2,0.5,47
326e25f932f3d30a163d82af5e398a89edbd01bd,# In the router namespace,1,2,0.5,48
326e25f932f3d30a163d82af5e398a89edbd01bd,attr = self.generate_device_details(),0,2,0.5,49
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_exists.return_value = False,1,2,0.5,50
326e25f932f3d30a163d82af5e398a89edbd01bd,ns2 = ip.ensure_namespace(attr.namespace),0,2,0.5,51
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import utils as linux_utils,0,2,0.5,52
326e25f932f3d30a163d82af5e398a89edbd01bd,"retval = ip_lib.IPWrapper().add_vxlan('vxlan0', 'vni0',",1,2,0.5,53
326e25f932f3d30a163d82af5e398a89edbd01bd,"device = ip.add_vxlan(attr.name, 9999)",1,2,0.5,54
326e25f932f3d30a163d82af5e398a89edbd01bd,"retval = ip_lib.IPWrapper().add_vxlan('vxlan0', 'vni0', 'dev0',",0,2,0.5,55
326e25f932f3d30a163d82af5e398a89edbd01bd,"device = ip.add_vxlan(attr.name, 9999, 'dummy_device')",0,2,0.5,56
326e25f932f3d30a163d82af5e398a89edbd01bd,# and will call it always with passing only message from originally,0,2,0.5,57
326e25f932f3d30a163d82af5e398a89edbd01bd,"def __init__(self, message=None, device=None):",0,2,0.5,58
326e25f932f3d30a163d82af5e398a89edbd01bd,"def __init__(self, name, namespace=None, kind='link'):",0,2,0.5,59
326e25f932f3d30a163d82af5e398a89edbd01bd,retval = ip_lib.IPWrapper(namespace='foo').get_devices(),1,2,0.5,60
326e25f932f3d30a163d82af5e398a89edbd01bd,retval = ip_lib.IPWrapper().get_devices(),1,2,0.5,61
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace = 'ns_test-' + uuidutils.generate_uuid(),0,2,0.5,62
326e25f932f3d30a163d82af5e398a89edbd01bd,#    not use this file except in compliance with the License. You may obtain,0,2,0.5,63
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_wrap.get_namespaces.return_value = namespaces,1,2,0.5,64
326e25f932f3d30a163d82af5e398a89edbd01bd,with mock.patch('neutron.agent.linux.ip_lib.IPWrapper') as ip_wrap:,1,2,0.5,65
326e25f932f3d30a163d82af5e398a89edbd01bd,listnetns.return_value = namespaces,0,2,0.5,66
326e25f932f3d30a163d82af5e398a89edbd01bd,execute.return_value = retval,1,2,0.5,67
326e25f932f3d30a163d82af5e398a89edbd01bd,with mock.patch('neutron.agent.common.utils.execute') as execute:,1,2,0.5,68
326e25f932f3d30a163d82af5e398a89edbd01bd,retval = '\n'.join(NETNS_SAMPLE),1,2,0.5,69
326e25f932f3d30a163d82af5e398a89edbd01bd,retval = ip_lib.IPWrapper.get_namespaces(),1,2,0.5,70
326e25f932f3d30a163d82af5e398a89edbd01bd,retval = ip_lib.list_network_namespaces(),0,2,0.5,71
326e25f932f3d30a163d82af5e398a89edbd01bd,ns = ip_lib.IPWrapper().ensure_namespace('ns'),1,2,0.5,72
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_ns_cmd.exists.return_value = True,1,2,0.5,73
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(ip_lib, 'IpNetnsCommand') as ip_ns_cmd:",1,2,0.5,74
326e25f932f3d30a163d82af5e398a89edbd01bd,# is created with the ip address of the external gateway port,1,2,0.5,75
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_exists_cmd.return_value = False,0,2,0.5,76
326e25f932f3d30a163d82af5e398a89edbd01bd,ns = ip.ensure_namespace('ns'),0,2,0.5,77
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_exists_cmd.return_value = True,0,2,0.5,78
326e25f932f3d30a163d82af5e398a89edbd01bd,"message=(""Cannot create namespace file /var/run/netns/ns: """,0,2,0.5,79
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(ip.netns, 'add') as ns_add_cmd, \",0,2,0.5,80
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(ip_lib, 'IPDevice') as ip_dev:",0,2,0.5,81
326e25f932f3d30a163d82af5e398a89edbd01bd,"device_name, namespace=fip_ns_name)",1,2,0.5,82
326e25f932f3d30a163d82af5e398a89edbd01bd,"message=""Test add namespace failed"", returncode=1)",0,2,0.5,83
326e25f932f3d30a163d82af5e398a89edbd01bd,"device = ip_lib.IPDevice(""fakedevice"",",1,2,0.5,84
326e25f932f3d30a163d82af5e398a89edbd01bd,device = router.router[l3_constants.HA_INTERFACE_KEY],1,2,0.5,85
326e25f932f3d30a163d82af5e398a89edbd01bd,routes = [],1,2,0.5,86
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_name = namespace or router.ns_name,1,2,0.5,87
326e25f932f3d30a163d82af5e398a89edbd01bd,"routes = [{'nexthop': route['nexthop'],",1,2,0.5,88
326e25f932f3d30a163d82af5e398a89edbd01bd,"routes = ip_lib.get_routing_table(4, namespace=router.ns_name)",1,2,0.5,89
326e25f932f3d30a163d82af5e398a89edbd01bd,"fip = {'id': _uuid(),",1,2,0.5,90
326e25f932f3d30a163d82af5e398a89edbd01bd,extra_routes = False,1,2,0.5,91
326e25f932f3d30a163d82af5e398a89edbd01bd,enable_fip = False,1,2,0.5,92
326e25f932f3d30a163d82af5e398a89edbd01bd,enable_snat = False,1,2,0.5,93
326e25f932f3d30a163d82af5e398a89edbd01bd,config = cfg.ConfigOpts(),1,2,0.5,94
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.common import utils as common_utils,1,2,0.5,95
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.common import config as common_config,1,2,0.5,96
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.common import config as agent_config,1,2,0.5,97
326e25f932f3d30a163d82af5e398a89edbd01bd,router = prepare_router_data(ip_version=6),1,2,0.5,98
326e25f932f3d30a163d82af5e398a89edbd01bd,"routes = [{'destination': '8.8.8.0/24', 'nexthop': ip_addr}]",1,2,0.5,99
326e25f932f3d30a163d82af5e398a89edbd01bd,"router = prepare_router_data(ip_version=6, dual_stack=dual_stack)",0,2,0.5,100
326e25f932f3d30a163d82af5e398a89edbd01bd,"router = self.manage_router(self.agent, router_info)",1,2,0.5,101
326e25f932f3d30a163d82af5e398a89edbd01bd,router['distributed'] = True,0,2,0.5,102
326e25f932f3d30a163d82af5e398a89edbd01bd,router = prepare_router_data(num_internal_ports=2),0,2,0.5,103
326e25f932f3d30a163d82af5e398a89edbd01bd,"routes = [{'destination': '8.8.8.0/24', 'nexthop': '19.4.4.4'}]",0,2,0.5,104
326e25f932f3d30a163d82af5e398a89edbd01bd,attr = self.generate_device_details(ip_cidr=wrong_ip_cidr),1,2,0.5,105
326e25f932f3d30a163d82af5e398a89edbd01bd,attr = self.generate_device_details(ip_cidrs=[wrong_ip_cidr]),0,2,0.5,106
326e25f932f3d30a163d82af5e398a89edbd01bd,"def device_exists_with_ip_mac(device_name, ip_cidr, mac, namespace=None):",1,2,0.5,107
326e25f932f3d30a163d82af5e398a89edbd01bd,device_ip_cidrs = [ip['cidr'] for ip in device.addr.list()],0,2,0.5,108
326e25f932f3d30a163d82af5e398a89edbd01bd,"def device_exists_with_ips_and_mac(device_name, ip_cidrs, mac, namespace=None):",0,2,0.5,109
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1 = self._create_router(self.agent, router_info)",1,2,0.5,110
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1 = self.manage_router(self.agent, router_info)",0,2,0.5,111
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1 = self._create_router(self.agent, router_info)",0,2,0.5,112
326e25f932f3d30a163d82af5e398a89edbd01bd,ip = '10.0.0.1',1,2,0.5,113
326e25f932f3d30a163d82af5e398a89edbd01bd,table = 14,1,2,0.5,114
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace = dvr_snat_ns.SnatNamespace.get_snat_ns_name(,1,2,0.5,115
326e25f932f3d30a163d82af5e398a89edbd01bd,routes = set(route['destination'] for route in routes),1,2,0.5,116
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_cidr not in (ip['cidr'] for ip in device.addr.list()):,1,2,0.5,117
326e25f932f3d30a163d82af5e398a89edbd01bd,calls = [args[0] for args in enqueue_mock.call_args_list],1,2,0.5,118
326e25f932f3d30a163d82af5e398a89edbd01bd,"cmd = 'curl', '--max-time', METADATA_REQUEST_TIMEOUT, '-D-', url",1,2,0.5,119
326e25f932f3d30a163d82af5e398a89edbd01bd,# we force a test failure with message,1,2,0.5,120
326e25f932f3d30a163d82af5e398a89edbd01bd,calls = (args[0][1] for args in,1,2,0.5,121
326e25f932f3d30a163d82af5e398a89edbd01bd,# if the agent is anything else the test is misconfigured,1,2,0.5,122
326e25f932f3d30a163d82af5e398a89edbd01bd,# if the agent is in dvr mode then the snat_ns_name namespace,1,2,0.5,123
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add the info to router as the first snat port,1,2,0.5,124
326e25f932f3d30a163d82af5e398a89edbd01bd,# Pick an ip address which is not the same as port_ip,1,2,0.5,125
326e25f932f3d30a163d82af5e398a89edbd01bd,router['distributed'] = True,1,2,0.5,126
326e25f932f3d30a163d82af5e398a89edbd01bd,router = l3_test_common.prepare_router_data(,1,2,0.5,127
326e25f932f3d30a163d82af5e398a89edbd01bd,# get the correct fip namespace.,1,2,0.5,128
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode = 'dvr_snat' if enable_snat else 'dvr',1,2,0.5,129
326e25f932f3d30a163d82af5e398a89edbd01bd,# Validate the fip with external net2,1,2,0.5,130
326e25f932f3d30a163d82af5e398a89edbd01bd,# Validate the fip with external net1,1,2,0.5,131
326e25f932f3d30a163d82af5e398a89edbd01bd,"The test queries from the ""client"" namespace the metadata proxy on",1,2,0.5,132
326e25f932f3d30a163d82af5e398a89edbd01bd,"* A router (which creates a metadata proxy in the router namespace),",1,2,0.5,133
326e25f932f3d30a163d82af5e398a89edbd01bd,# the agent type the dvr supports. The namespace creation is,1,2,0.5,134
326e25f932f3d30a163d82af5e398a89edbd01bd,"def __init__(self, status):",1,2,0.5,135
326e25f932f3d30a163d82af5e398a89edbd01bd,# Verify router gateway interface is configured to receive Router Advts,1,2,0.5,136
326e25f932f3d30a163d82af5e398a89edbd01bd,# Verify that router internal interface has a single ipaddress,1,2,0.5,137
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_calls = [,1,2,0.5,138
326e25f932f3d30a163d82af5e398a89edbd01bd,# Verify that router gw interface is configured to receive Router,1,2,0.5,139
326e25f932f3d30a163d82af5e398a89edbd01bd,expected = self.get_expected_keepalive_configuration(router),1,2,0.5,140
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_versions = [4, 6] if (ip_version == 6 or dual_stack) else [4]",1,2,0.5,141
326e25f932f3d30a163d82af5e398a89edbd01bd,device = router.router[l3_constants.INTERFACE_KEY][-1],1,2,0.5,142
326e25f932f3d30a163d82af5e398a89edbd01bd,"called with the right resource, event, and router information.",1,2,0.5,143
326e25f932f3d30a163d82af5e398a89edbd01bd,exists = ip_lib.device_exists_with_ips_and_mac(,1,2,0.5,144
326e25f932f3d30a163d82af5e398a89edbd01bd,config = router.keepalived_manager.config.get_config_str(),1,2,0.5,145
326e25f932f3d30a163d82af5e398a89edbd01bd,# Verify that router internal interface is present and is configured,1,2,0.5,146
326e25f932f3d30a163d82af5e398a89edbd01bd,# Remove one subnet from the router internal iface,1,2,0.5,147
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1 = self.manage_router(self.agent, router_info)",1,2,0.5,148
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add floatingip agent gateway port info to router,1,1,0.25,149
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _add_snat_port_info_to_router(self, router, internal_ports):",1,1,0.25,150
326e25f932f3d30a163d82af5e398a89edbd01bd,router[l3_constants.FLOATINGIP_AGENT_INTF_KEY] = [,1,1,0.25,151
326e25f932f3d30a163d82af5e398a89edbd01bd,prefixlen = netaddr.IPNetwork(float_subnet['cidr']).prefixlen,1,1,0.25,152
326e25f932f3d30a163d82af5e398a89edbd01bd,float_subnet = external_gw_port['subnets'][0],1,1,0.25,153
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_gw_port_ip = str(netaddr.IPAddress(port_ip) + 5),1,1,0.25,154
326e25f932f3d30a163d82af5e398a89edbd01bd,port_ip = fixed_ip['ip_address'],1,1,0.25,155
326e25f932f3d30a163d82af5e398a89edbd01bd,"snat_port_list = router.get(l3_constants.SNAT_ROUTER_INTF_KEY, [])",1,1,0.25,156
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ip = external_gw_port['fixed_ips'][0],1,1,0.25,157
326e25f932f3d30a163d82af5e398a89edbd01bd,if not fip_gw_port_list and external_gw_port:,1,1,0.25,158
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add snat port information to the router,1,1,0.25,159
326e25f932f3d30a163d82af5e398a89edbd01bd,prefixlen = netaddr.IPNetwork(snat_subnet['cidr']).prefixlen,1,1,0.25,160
326e25f932f3d30a163d82af5e398a89edbd01bd,if not snat_port_list and internal_ports:,1,1,0.25,161
326e25f932f3d30a163d82af5e398a89edbd01bd,port = internal_ports[0],1,1,0.25,162
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_subnet = port['subnets'][0],1,1,0.25,163
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_ip = str(netaddr.IPAddress(port_ip) + 5),1,1,0.25,164
326e25f932f3d30a163d82af5e398a89edbd01bd,router[l3_constants.SNAT_ROUTER_INTF_KEY] = [,1,1,0.25,165
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_dvr_external_device(self, router):",1,1,0.25,166
326e25f932f3d30a163d82af5e398a89edbd01bd,"# if the agent is in dvr_snat mode, then we have to check",1,1,0.25,167
326e25f932f3d30a163d82af5e398a89edbd01bd,# that the correct ports and ip addresses exist in the,1,1,0.25,168
326e25f932f3d30a163d82af5e398a89edbd01bd,if self.agent.conf.agent_mode == 'dvr_snat':,1,1,0.25,169
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add fip agent gateway port information to the router_info,1,1,0.25,170
326e25f932f3d30a163d82af5e398a89edbd01bd,# snat_ns_name namespace,1,1,0.25,171
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_gw_port_list = router.get(,1,1,0.25,172
326e25f932f3d30a163d82af5e398a89edbd01bd,"def generate_dvr_router_info(self,",1,1,0.25,173
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _add_fip_agent_gw_port_info_to_router(self, router, external_gw_port):",1,1,0.25,174
326e25f932f3d30a163d82af5e398a89edbd01bd,return router,1,1,0.25,175
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_dvr_router_info(,1,1,0.25,176
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_expected_in_snat_namespace = (,1,1,0.25,177
326e25f932f3d30a163d82af5e398a89edbd01bd,# We need to mock the get_agent_gateway_port return value,1,1,0.25,178
326e25f932f3d30a163d82af5e398a89edbd01bd,# The port returned needs to have the same information as,1,1,0.25,179
326e25f932f3d30a163d82af5e398a89edbd01bd,self.mock_plugin_api.get_agent_gateway_port.return_value = router_info[,1,1,0.25,180
326e25f932f3d30a163d82af5e398a89edbd01bd,# We also need to mock the get_external_network_id method to,1,1,0.25,181
326e25f932f3d30a163d82af5e398a89edbd01bd,"# manage the router (create it, create namespaces,",1,1,0.25,182
326e25f932f3d30a163d82af5e398a89edbd01bd,ext_gateway_port = router_info['gw_port'],1,1,0.25,183
326e25f932f3d30a163d82af5e398a89edbd01bd,if enable_snat:,1,1,0.25,184
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_ns_name = dvr_snat_ns.SnatNamespace.get_snat_ns_name(,1,1,0.25,185
326e25f932f3d30a163d82af5e398a89edbd01bd,if not agent:,1,1,0.25,186
326e25f932f3d30a163d82af5e398a89edbd01bd,agent = self.agent,1,1,0.25,187
326e25f932f3d30a163d82af5e398a89edbd01bd,"internal_ports = router.get(l3_constants.INTERFACE_KEY, [])",1,1,0.25,188
326e25f932f3d30a163d82af5e398a89edbd01bd,router['gw_port_host'] = agent.conf.host,1,1,0.25,189
326e25f932f3d30a163d82af5e398a89edbd01bd,router['gw_port']['binding:host_id'] = agent.conf.host,1,1,0.25,190
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip = router['_floatingips'][0],1,1,0.25,191
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip['floating_network_id'] = router['gw_port']['network_id'],1,1,0.25,192
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip['host'] = agent.conf.host,1,1,0.25,193
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip['port_id'] = internal_ports[0]['id'],1,1,0.25,194
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip['status'] = 'ACTIVE',1,1,0.25,195
326e25f932f3d30a163d82af5e398a89edbd01bd,external_gw_port = router['gw_port'],1,1,0.25,196
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_dvr_gateway(self, router):",1,1,0.25,197
326e25f932f3d30a163d82af5e398a89edbd01bd,restarted_agent = neutron_l3_agent.L3NATAgent(,1,1,0.25,198
326e25f932f3d30a163d82af5e398a89edbd01bd,if gateway_expected_in_snat_namespace:,1,1,0.25,199
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_ns = router1.fip_ns.get_name(),1,1,0.25,200
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_add_fips_on_restarted_agent(self):,1,1,0.25,201
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode = 'dvr',1,1,0.25,202
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ns = router.ns_name,1,1,0.25,203
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_rule_prio_1 = self._get_fixed_ip_rule_priority(,1,1,0.25,204
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ips[0]['floating_ip_address'] = '21.4.4.2',1,1,0.25,205
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ips[0]['fixed_ip_address'] = '10.0.0.2',1,1,0.25,206
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_rule_prio_2 = self._get_fixed_ip_rule_priority(,1,1,0.25,207
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _get_fixed_ip_rule_priority(self, namespace, fip):",1,1,0.25,208
326e25f932f3d30a163d82af5e398a89edbd01bd,iprule = ip_lib.IPRule(namespace),1,1,0.25,209
326e25f932f3d30a163d82af5e398a89edbd01bd,"lines = iprule.rule._as_root([4], ['show']).splitlines()",1,1,0.25,210
326e25f932f3d30a163d82af5e398a89edbd01bd,"info = iprule.rule._parse_line(4, line)",1,1,0.25,211
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_add_internal_network_set_arp_cache(self):,1,1,0.25,212
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Check that, when the router is set up and there are",1,1,0.25,213
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = l3_test_common.prepare_router_data(),1,1,0.25,214
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_neighbor = '35.4.1.10',1,1,0.25,215
326e25f932f3d30a163d82af5e398a89edbd01bd,port_data = {,1,1,0.25,216
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.plugin_rpc.get_ports_by_subnet.return_value = [port_data],1,1,0.25,217
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_device = router1.get_internal_device_name(,1,1,0.25,218
326e25f932f3d30a163d82af5e398a89edbd01bd,"neighbors = ip_lib.IPDevice(internal_device, router1.ns_name).neigh",1,1,0.25,219
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_rfp_fpr_mtu(self, router, expected_mtu=1500):",1,1,0.25,220
326e25f932f3d30a163d82af5e398a89edbd01bd,# Since by definition this is a dvr (distributed = true),1,1,0.25,221
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.router[l3_constants.FLOATINGIP_KEY] = [],1,1,0.25,222
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_dvr_router_info(),1,1,0.25,223
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_namespace_should_not_exist = (,1,1,0.25,224
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode = 'dvr_snat',1,1,0.25,225
326e25f932f3d30a163d82af5e398a89edbd01bd,if snat_namespace_should_not_exist:,1,1,0.25,226
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_dvr_snat_gateway(self, router):",1,1,0.25,227
326e25f932f3d30a163d82af5e398a89edbd01bd,existing_gateway = (,1,1,0.25,228
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_gateway = external_port['subnets'][0]['gateway_ip'],1,1,0.25,229
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_removal_of_already_deleted_gateway_device(self, router):",1,1,0.25,230
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_snat_namespace_does_not_exist(self, router):",1,1,0.25,231
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_dvr_floating_ips(self, router):",1,1,0.25,232
326e25f932f3d30a163d82af5e398a89edbd01bd,# in the fip namespace:,1,1,0.25,233
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_agent_gw_port = (,1,1,0.25,234
326e25f932f3d30a163d82af5e398a89edbd01bd,external_gw_port = floating_agent_gw_port[0],1,1,0.25,235
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_ns = self.agent.get_fip_ns(floating_ips[0]['floating_network_id']),1,1,0.25,236
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_ns_name = fip_ns.get_name(),1,1,0.25,237
326e25f932f3d30a163d82af5e398a89edbd01bd,fg_port_created_successfully = ip_lib.device_exists_with_ips_and_mac(,1,1,0.25,238
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=fip_ns_name),1,1,0.25,239
326e25f932f3d30a163d82af5e398a89edbd01bd,# Check fpr-router device has been created,1,1,0.25,240
326e25f932f3d30a163d82af5e398a89edbd01bd,device_name = fip_ns.get_int_device_name(router.router_id),1,1,0.25,241
326e25f932f3d30a163d82af5e398a89edbd01bd,fpr_router_device_created_successfully = ip_lib.device_exists(,1,1,0.25,242
326e25f932f3d30a163d82af5e398a89edbd01bd,for fip in floating_ips:,1,1,0.25,243
326e25f932f3d30a163d82af5e398a89edbd01bd,device_name = fip_ns.get_rtr_ext_device_name(router.router_id),1,1,0.25,244
326e25f932f3d30a163d82af5e398a89edbd01bd,"device_name, namespace=router.ns_name))",1,1,0.25,245
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_rem_fips_on_restarted_agent(self):,1,1,0.25,246
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.network_device_mtu = custom_mtu,1,1,0.25,247
326e25f932f3d30a163d82af5e398a89edbd01bd,protocol_port = net_helpers.get_free_namespace_port(,1,1,0.25,248
326e25f932f3d30a163d82af5e398a89edbd01bd,:param enable_ha: sets the ha value for the router.,1,1,0.25,249
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ha_router_failover(self):,1,1,0.25,250
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_fip_agent_mismatch(self):,1,1,0.25,251
326e25f932f3d30a163d82af5e398a89edbd01bd,# client sends to fip,1,1,0.25,252
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_delete_external_gateway_on_standby_router(self):,1,1,0.25,253
326e25f932f3d30a163d82af5e398a89edbd01bd,# The purpose of the test is to simply make sure no exception is raised,1,1,0.25,254
326e25f932f3d30a163d82af5e398a89edbd01bd,NESTED_NAMESPACE_SEPARATOR = '@',1,1,0.25,255
326e25f932f3d30a163d82af5e398a89edbd01bd,self.conf = self._configure_agent('agent2'),1,1,0.25,256
326e25f932f3d30a163d82af5e398a89edbd01bd,self.failover_agent = neutron_l3_agent.L3NATAgentWithStateReport(,1,1,0.25,257
326e25f932f3d30a163d82af5e398a89edbd01bd,br_int_1 = self._get_agent_ovs_integration_bridge(self.agent),1,1,0.25,258
326e25f932f3d30a163d82af5e398a89edbd01bd,br_int_2 = self._get_agent_ovs_integration_bridge(self.failover_agent),1,1,0.25,259
326e25f932f3d30a163d82af5e398a89edbd01bd,"veth1, veth2 = self.useFixture(net_helpers.VethFixture()).ports",1,1,0.25,260
326e25f932f3d30a163d82af5e398a89edbd01bd,get_ns_name = mock.patch.object(,1,1,0.25,261
326e25f932f3d30a163d82af5e398a89edbd01bd,'''Test dvr router lifecycle,1,1,0.25,262
326e25f932f3d30a163d82af5e398a89edbd01bd,"get_ns_name.return_value = ""%s%s%s"" % (",1,1,0.25,263
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info_2 = copy.deepcopy(router_info),1,1,0.25,264
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info_2[l3_constants.HA_INTERFACE_KEY] = (,1,1,0.25,265
326e25f932f3d30a163d82af5e398a89edbd01bd,"router2 = self.manage_router(self.failover_agent, router_info_2)",1,1,0.25,266
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ha_router_ipv6_radvd_status(self):,1,1,0.25,267
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_info = self.generate_router_info(ip_version=6, enable_ha=True)",1,1,0.25,268
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _check_lla_status(router, expected):",1,1,0.25,269
326e25f932f3d30a163d82af5e398a89edbd01bd,lladdr = ip_lib.get_ipv6_lladdr(device['mac_address']),1,1,0.25,270
326e25f932f3d30a163d82af5e398a89edbd01bd,device_name = router1.get_ha_device_name(),1,1,0.25,271
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ha_router_process_ipv6_subnets_to_existing_port(self):,1,1,0.25,272
326e25f932f3d30a163d82af5e398a89edbd01bd,dst_fip = '19.4.4.10',1,1,0.25,273
326e25f932f3d30a163d82af5e398a89edbd01bd,"src_machine, dst_machine = self.useFixture(",1,1,0.25,274
326e25f932f3d30a163d82af5e398a89edbd01bd,br_int = get_ovs_bridge(self.agent.conf.ovs_integration_bridge),1,1,0.25,275
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ip = router_ip_cidr.partition('/')[0],1,1,0.25,276
326e25f932f3d30a163d82af5e398a89edbd01bd,device_exists = functools.partial(,1,1,0.25,277
326e25f932f3d30a163d82af5e398a89edbd01bd,if not (enable_ha and (ip_version == 6 or dual_stack)):,1,1,0.25,278
326e25f932f3d30a163d82af5e398a89edbd01bd,if router.use_ipv6 and not v6_ext_gw_with_sub:,1,1,0.25,279
326e25f932f3d30a163d82af5e398a89edbd01bd,if not self.agent.conf.ipv6_gateway:,1,1,0.25,280
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_wrapper = ip_lib.IPWrapper(namespace=router.ns_name),1,1,0.25,281
326e25f932f3d30a163d82af5e398a89edbd01bd,"ra_state = ip_wrapper.netns.execute(['sysctl', '-b',",1,1,0.25,282
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_external_device(self, router):",1,1,0.25,283
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_gateway(self, router, v6_ext_gw_with_sub=True):",1,1,0.25,284
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_device = ip_lib.IPDevice(external_device_name,",1,1,0.25,285
326e25f932f3d30a163d82af5e398a89edbd01bd,if not v6_ext_gw_with_sub:,1,1,0.25,286
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _gateway_check(self, gateway_ip, external_device):",1,1,0.25,287
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_gateway = gateway_ip,1,1,0.25,288
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_vers = netaddr.IPAddress(expected_gateway).version,1,1,0.25,289
326e25f932f3d30a163d82af5e398a89edbd01bd,existing_gateway = (external_device.route.get_gateway(,1,1,0.25,290
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_ha_device(self, router):",1,1,0.25,291
326e25f932f3d30a163d82af5e398a89edbd01bd,def ha_router_dev_name_getter(not_used):,1,1,0.25,292
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ha_router_conf_on_restarted_agent(self):,1,1,0.25,293
326e25f932f3d30a163d82af5e398a89edbd01bd,restarted_agent = neutron_l3_agent.L3NATAgentWithStateReport(,1,1,0.25,294
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_fip_connection_from_same_subnet(self):,1,1,0.25,295
326e25f932f3d30a163d82af5e398a89edbd01bd,'''Test connection to floatingip which is associated with,1,1,0.25,296
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ip_cidr = self._port_first_ip_cidr(router.internal_ports[0]),1,1,0.25,297
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_info = self.generate_router_info(enable_ha=True, ip_version=6)",1,1,0.25,298
326e25f932f3d30a163d82af5e398a89edbd01bd,"def verify_ip_in_keepalived_config(router, iface):",1,1,0.25,299
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_cidrs = common_utils.fixed_ip_cidrs(iface['fixed_ips']),1,1,0.25,300
326e25f932f3d30a163d82af5e398a89edbd01bd,# Create and configure client namespace,1,1,0.25,301
326e25f932f3d30a163d82af5e398a89edbd01bd,firstline = self._query_metadata_proxy(machine),1,1,0.25,302
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test metadata proxy with least privileged user.",1,1,0.25,303
326e25f932f3d30a163d82af5e398a89edbd01bd,SOCKET_MODE = 0o664,1,1,0.25,304
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test metadata proxy with least privileged user/group.",1,1,0.25,305
326e25f932f3d30a163d82af5e398a89edbd01bd,"Its group has gid=65534 and is commonly named 'nobody' or 'nogroup', that's",1,1,0.25,306
326e25f932f3d30a163d82af5e398a89edbd01bd,SOCKET_MODE = 0o666,1,1,0.25,307
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_lifecycle_without_ha_without_snat_with_fips(self):,1,1,0.25,308
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_lifecycle_without_ha_with_snat_with_fips(self):,1,1,0.25,309
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_lifecycle_ha_with_snat_with_fips(self):,1,1,0.25,310
326e25f932f3d30a163d82af5e398a89edbd01bd,def _helper_create_dvr_router_fips_for_ext_network(,1,1,0.25,311
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode = agent_mode,1,1,0.25,312
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_dvr_router_info(**dvr_router_kwargs),1,1,0.25,313
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_ns = router.fip_ns.get_name(),1,1,0.25,314
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _validate_fips_for_external_network(self, router, fip_ns):",1,1,0.25,315
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_fips_for_multiple_ext_networks(self):,1,1,0.25,316
326e25f932f3d30a163d82af5e398a89edbd01bd,agent_mode = 'dvr',1,1,0.25,317
326e25f932f3d30a163d82af5e398a89edbd01bd,"dvr_router1_kwargs = {'ip_address': '19.4.4.3',",1,1,0.25,318
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1, fip1_ns = (",1,1,0.25,319
326e25f932f3d30a163d82af5e398a89edbd01bd,"dvr_router2_kwargs = {'ip_address': '19.4.5.3',",1,1,0.25,320
326e25f932f3d30a163d82af5e398a89edbd01bd,"router2, fip2_ns = (",1,1,0.25,321
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _dvr_router_lifecycle(self, enable_ha=False, enable_snat=False,",1,1,0.25,322
326e25f932f3d30a163d82af5e398a89edbd01bd,machine = self.useFixture(,1,1,0.25,323
326e25f932f3d30a163d82af5e398a89edbd01bd,The test creates:,1,1,0.25,324
326e25f932f3d30a163d82af5e398a89edbd01bd,interface_id = router.router[l3_constants.INTERFACE_KEY][0]['id'],1,1,0.25,325
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_access_to_metadata_proxy(self):,1,1,0.25,326
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add a second IPv6 subnet to the router internal interface.,1,1,0.25,327
326e25f932f3d30a163d82af5e398a89edbd01bd,# with IP address from both the subnets.,1,1,0.25,328
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_iface = router.router[l3_constants.INTERFACE_KEY][0],1,1,0.25,329
326e25f932f3d30a163d82af5e398a89edbd01bd,# Verify that keepalived config is properly updated.,1,1,0.25,330
326e25f932f3d30a163d82af5e398a89edbd01bd,interfaces = copy.deepcopy(router.router.get(,1,1,0.25,331
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips, subnets = [], []",1,1,0.25,332
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router[l3_constants.INTERFACE_KEY] = interfaces,1,1,0.25,333
326e25f932f3d30a163d82af5e398a89edbd01bd,self.status = status,1,1,0.25,334
326e25f932f3d30a163d82af5e398a89edbd01bd,"def __call__(self, req):",1,1,0.25,335
326e25f932f3d30a163d82af5e398a89edbd01bd,SOCKET_MODE = 0o644,1,1,0.25,336
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _create_metadata_fake_server(self, status):",1,1,0.25,337
326e25f932f3d30a163d82af5e398a89edbd01bd,server = utils.UnixDomainWSGIServer('metadata-fake-server'),1,1,0.25,338
326e25f932f3d30a163d82af5e398a89edbd01bd,# NOTE(cbrandily): TempDir fixture creates a folder with 0o700,1,1,0.25,339
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _query_metadata_proxy(self, machine):",1,1,0.25,340
326e25f932f3d30a163d82af5e398a89edbd01bd,"url = 'http://%(host)s:%(port)s' % {'host': dhcp.METADATA_DEFAULT_IP,",1,1,0.25,341
326e25f932f3d30a163d82af5e398a89edbd01bd,i = 0,1,1,0.25,342
326e25f932f3d30a163d82af5e398a89edbd01bd,CONNECTION_REFUSED_TIMEOUT = METADATA_REQUEST_TIMEOUT // 2,1,1,0.25,343
326e25f932f3d30a163d82af5e398a89edbd01bd,raw_headers = machine.execute(cmd),1,1,0.25,344
326e25f932f3d30a163d82af5e398a89edbd01bd,except RuntimeError as e:,1,1,0.25,345
326e25f932f3d30a163d82af5e398a89edbd01bd,if 'Connection refused' in str(e):,1,1,0.25,346
326e25f932f3d30a163d82af5e398a89edbd01bd,if i > CONNECTION_REFUSED_TIMEOUT:,1,1,0.25,347
326e25f932f3d30a163d82af5e398a89edbd01bd,dev_mtu = self.get_device_mtu(,1,1,0.25,348
326e25f932f3d30a163d82af5e398a89edbd01bd,PID/Program name,0,1,0.25,349
326e25f932f3d30a163d82af5e398a89edbd01bd,This test validates the condition where floatingip agent,1,1,0.25,350
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_namespaces_root(self, priv_listnetns, listnetns):",0,1,0.25,351
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ensure_namespace(self):,0,1,0.25,352
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Try to create same namespace twice, should be no error in both cases",0,1,0.25,353
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.patch.object(ip.netns, 'exists') as ns_exists_cmd:",0,1,0.25,354
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_add_cmd.side_effect = linux_utils.ProcessExecutionError(,0,1,0.25,355
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ensure_namespace_error(self):,0,1,0.25,356
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(ip_lib, 'IPDevice'):",0,1,0.25,357
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_lib.network_namespace_exists(namespace):,0,1,0.25,358
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip.netns.exists(namespace):,1,1,0.25,359
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_namespaces_non_root(self, priv_listnetns, listnetns):",0,1,0.25,360
326e25f932f3d30a163d82af5e398a89edbd01bd,listnetns.return_value = NETNS_SAMPLE,0,1,0.25,361
326e25f932f3d30a163d82af5e398a89edbd01bd,priv_listnetns.return_value = NETNS_SAMPLE,0,1,0.25,362
326e25f932f3d30a163d82af5e398a89edbd01bd,"parents = {'4': '1', '5': '2', '6': '3'}",0,1,0.25,363
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_ensure_namespace(self, create):",0,1,0.25,364
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_add_namespace(self, create):",0,1,0.25,365
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_delete_namespace(self, remove):",0,1,0.25,366
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_namespace_exists_use_helper(self, priv_listnetns, listnetns):",0,1,0.25,367
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_namespace_does_not_exist_no_helper(self, priv_listnetns,",0,1,0.25,368
326e25f932f3d30a163d82af5e398a89edbd01bd,NETNS_SAMPLE_IPROUTE2_4 = [,1,1,0.25,369
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_get_namespaces_non_root(self):,1,1,0.25,370
326e25f932f3d30a163d82af5e398a89edbd01bd,self.execute.return_value = '\n'.join(NETNS_SAMPLE),1,1,0.25,371
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_get_namespaces_iproute2_4_root(self):,1,1,0.25,372
326e25f932f3d30a163d82af5e398a89edbd01bd,self.execute.return_value = '\n'.join(NETNS_SAMPLE_IPROUTE2_4),1,1,0.25,373
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.config(group='AGENT',",1,1,0.25,374
326e25f932f3d30a163d82af5e398a89edbd01bd,SUDO_CMD = 'sudo -n',1,1,0.25,375
326e25f932f3d30a163d82af5e398a89edbd01bd,# configure test runner to use rootwrap,0,1,0.25,376
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.config(group='AGENT',",0,1,0.25,377
326e25f932f3d30a163d82af5e398a89edbd01bd,"kills_expected = [(str(x), signal.SIGKILL) for x in range(1, 9)]",0,1,0.25,378
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_kill_listen_processes(self):,0,1,0.25,379
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, '_kill_listen_processes',",0,1,0.25,380
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=1) as mock_kill_listen:,0,1,0.25,381
326e25f932f3d30a163d82af5e398a89edbd01bd,with mock.patch('neutron.common.utils.wait_until_true')\,0,1,0.25,382
326e25f932f3d30a163d82af5e398a89edbd01bd,as wait_until_true_mock:,0,1,0.25,383
326e25f932f3d30a163d82af5e398a89edbd01bd,wait_until_true_mock.side_effect = [,0,1,0.25,384
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_kill_listen_processes_still_procs(self):,0,1,0.25,385
326e25f932f3d30a163d82af5e398a89edbd01bd,wait_until_true_mock.side_effect = (,0,1,0.25,386
326e25f932f3d30a163d82af5e398a89edbd01bd,with testtools.ExpectedException(,0,1,0.25,387
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_kill_listen_processes_no_procs(self):,0,1,0.25,388
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=0) as mock_kill_listen:,0,1,0.25,389
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, 'kill_listen_processes'):",0,1,0.25,390
326e25f932f3d30a163d82af5e398a89edbd01bd,if force:,0,1,0.25,391
326e25f932f3d30a163d82af5e398a89edbd01bd,if force:,1,1,0.25,392
326e25f932f3d30a163d82af5e398a89edbd01bd,rootwrap_not_configured = (cfg.CONF.AGENT.root_helper == base.SUDO_CMD),0,1,0.25,393
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.functional import base as functional_base,1,1,0.25,394
326e25f932f3d30a163d82af5e398a89edbd01bd,rootwrap_not_configured = (cfg.CONF.AGENT.root_helper ==,1,1,0.25,395
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.conf.agent import common as agent_config,0,1,0.25,396
326e25f932f3d30a163d82af5e398a89edbd01bd,SUDO_CMD = 'sudo -n',0,1,0.25,397
326e25f932f3d30a163d82af5e398a89edbd01bd,def setup_rootwrap(self):,0,1,0.25,398
326e25f932f3d30a163d82af5e398a89edbd01bd,run_as_root=True),1,1,0.25,399
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ensure_namespace(self):,1,1,0.25,400
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_namespace(self):,1,1,0.25,401
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices_no_netspace(self, mock_get_devices):",0,1,0.25,402
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices(self, mocked_listdir, mocked_islink):",1,1,0.25,403
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices_namespaces(self, mocked_execute):",1,1,0.25,404
326e25f932f3d30a163d82af5e398a89edbd01bd,fake_str = mock.Mock(),1,1,0.25,405
326e25f932f3d30a163d82af5e398a89edbd01bd,fake_str.split.return_value = ['lo'],1,1,0.25,406
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_execute.return_value = fake_str,1,1,0.25,407
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices_namespaces_ns_not_exists(self, mocked_execute):",1,1,0.25,408
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_execute.side_effect = RuntimeError(,1,1,0.25,409
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(ip_lib.IpNetnsCommand, 'exists',",1,1,0.25,410
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices_namespaces_ns_exists(self, mocked_execute):",1,1,0.25,411
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices_exclude_loopback_and_gre(self, mocked_execute):",1,1,0.25,412
326e25f932f3d30a163d82af5e398a89edbd01bd,device_name = 'somedevice',1,1,0.25,413
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_execute.return_value = 'lo gre0 sit0 ip6gre0 ' + device_name,1,1,0.25,414
326e25f932f3d30a163d82af5e398a89edbd01bd,somedevice = devices.pop(),1,1,0.25,415
326e25f932f3d30a163d82af5e398a89edbd01bd,self.kind = kind,0,1,0.25,416
326e25f932f3d30a163d82af5e398a89edbd01bd,def kind(self):,0,1,0.25,417
326e25f932f3d30a163d82af5e398a89edbd01bd,def create(self):,0,1,0.25,418
326e25f932f3d30a163d82af5e398a89edbd01bd,"message = _(""Interface %(device)s already exists."")",0,1,0.25,419
326e25f932f3d30a163d82af5e398a89edbd01bd,# NOTE(slaweq): 'message' can be passed as an optional argument,0,1,0.25,420
326e25f932f3d30a163d82af5e398a89edbd01bd,message = message or self.message % {'device': device},0,1,0.25,421
326e25f932f3d30a163d82af5e398a89edbd01bd,except NetlinkError as e:,0,1,0.25,422
326e25f932f3d30a163d82af5e398a89edbd01bd,if e.code == errno.EEXIST:,0,1,0.25,423
326e25f932f3d30a163d82af5e398a89edbd01bd,mock_get_devices.side_effect = priv_lib.NetworkNamespaceNotFound(,0,1,0.25,424
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices_include_loopback_and_gre(self, mock_get_devices):",0,1,0.25,425
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_delete_namespace(self):,1,1,0.25,426
326e25f932f3d30a163d82af5e398a89edbd01bd,for device in devices:,0,1,0.25,427
326e25f932f3d30a163d82af5e398a89edbd01bd,with mock.patch('neutron.agent.common.utils.execute'):,1,1,0.25,428
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_namespace_exists_use_helper(self):,1,1,0.25,429
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_namespace_doest_not_exist_no_helper(self):,1,1,0.25,430
326e25f932f3d30a163d82af5e398a89edbd01bd,GET_NAMESPACES = 'neutron.agent.linux.ip_lib.list_network_namespaces',0,1,0.25,431
326e25f932f3d30a163d82af5e398a89edbd01bd,with mock.patch('neutron.agent.linux.ip_lib.',0,1,0.25,432
326e25f932f3d30a163d82af5e398a89edbd01bd,'list_network_namespaces') as listnetns:,0,1,0.25,433
326e25f932f3d30a163d82af5e398a89edbd01bd,GET_NAMESPACES = 'neutron.agent.linux.ip_lib.IPWrapper.get_namespaces',1,1,0.25,434
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.privileged.agent.linux import ip_lib as priv_ip_lib,0,1,0.25,435
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _remove_ns(self, namespace):",0,1,0.25,436
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_get_devices(self):,0,1,0.25,437
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.addCleanup(self._remove_ns, namespace)",0,1,0.25,438
326e25f932f3d30a163d82af5e398a89edbd01bd,"interfaces = ['int_01', 'int_02', 'int_03', 'int_04', 'int_05']",0,1,0.25,439
326e25f932f3d30a163d82af5e398a89edbd01bd,interfaces_to_check = (interfaces + ip_lib.FB_TUNNEL_DEVICE_NAMES +,0,1,0.25,440
326e25f932f3d30a163d82af5e398a89edbd01bd,for interface in interfaces:,0,1,0.25,441
326e25f932f3d30a163d82af5e398a89edbd01bd,device_names = priv_ip_lib.get_devices(namespace),0,1,0.25,442
326e25f932f3d30a163d82af5e398a89edbd01bd,for name in device_names:,0,1,0.25,443
326e25f932f3d30a163d82af5e398a89edbd01bd,"priv_ip_lib.delete_interface(interface, namespace)",0,1,0.25,444
326e25f932f3d30a163d82af5e398a89edbd01bd,"def test_get_devices(self, mock_get_devices):",0,1,0.25,445
326e25f932f3d30a163d82af5e398a89edbd01bd,"interfaces = ['br01', 'lo', 'gre0']",0,1,0.25,446
326e25f932f3d30a163d82af5e398a89edbd01bd,mock_get_devices.return_value = interfaces,0,1,0.25,447
326e25f932f3d30a163d82af5e398a89edbd01bd,devices = ip_lib.IPWrapper(namespace='foo').get_devices(),0,1,0.25,448
326e25f932f3d30a163d82af5e398a89edbd01bd,"children = {'1': ['4'], '2': ['5'], '3': ['6', '8', '7']}",0,1,0.25,449
326e25f932f3d30a163d82af5e398a89edbd01bd,def test__kill_listen_processes_parents_and_childs(self):,0,1,0.25,450
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway port host mismatches with the agent and so the,1,1,0.25,451
326e25f932f3d30a163d82af5e398a89edbd01bd,"get_snat_ns_name = mock.patch.object(dvr_snat_ns.SnatNamespace,",1,1,0.25,452
326e25f932f3d30a163d82af5e398a89edbd01bd,"r_info = self.generate_dvr_router_info(enable_ha=True,",1,1,0.25,453
326e25f932f3d30a163d82af5e398a89edbd01bd,"r_snat_ns_name = namespaces.build_ns_name(dvr_snat_ns.SNAT_NS_PREFIX,",1,1,0.25,454
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_r_snat_ns_name = r_snat_ns_name + '@' + agent.host,1,1,0.25,455
326e25f932f3d30a163d82af5e398a89edbd01bd,"r_ns_name = namespaces.build_ns_name(namespaces.NS_PREFIX,",1,1,0.25,456
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_r_ns_name = r_ns_name + '@' + agent.host,1,1,0.25,457
326e25f932f3d30a163d82af5e398a89edbd01bd,def _setup_dvr_ha_agents(self):,1,1,0.25,458
326e25f932f3d30a163d82af5e398a89edbd01bd,self.failover_agent.conf.agent_mode = 'dvr_snat',1,1,0.25,459
326e25f932f3d30a163d82af5e398a89edbd01bd,def _setup_dvr_ha_bridges(self):,1,1,0.25,460
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _create_dvr_ha_router(self, agent):",1,1,0.25,461
326e25f932f3d30a163d82af5e398a89edbd01bd,"get_ns_name = mock.patch.object(namespaces.RouterNamespace,",1,1,0.25,462
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_r_snat_ns_name) = self._mocked_dvr_ha_router(agent),1,1,0.25,463
326e25f932f3d30a163d82af5e398a89edbd01bd,"kills_expected = [('1', signal.SIGTERM),",0,1,0.25,464
326e25f932f3d30a163d82af5e398a89edbd01bd,get_ns_name.return_value = mocked_r_ns_name,1,1,0.25,465
326e25f932f3d30a163d82af5e398a89edbd01bd,get_snat_ns_name.return_value = mocked_r_snat_ns_name,1,1,0.25,466
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_ip_addresses_in_dvr_ha_snat_namespace(self, router):",1,1,0.25,467
326e25f932f3d30a163d82af5e398a89edbd01bd,ex_gw_port = router.get_ex_gw_port(),1,1,0.25,468
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_port = router.get_snat_interfaces()[0],1,1,0.25,469
326e25f932f3d30a163d82af5e398a89edbd01bd,ex_gw_port_name = router.get_external_device_name(,1,1,0.25,470
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_port_name = router._get_snat_int_device_name(,1,1,0.25,471
326e25f932f3d30a163d82af5e398a89edbd01bd,"prefix_len = ex_gw_port[""fixed_ips""][0]['prefixlen']",1,1,0.25,472
326e25f932f3d30a163d82af5e398a89edbd01bd,"prefix_len = snat_port[""fixed_ips""][0]['prefixlen']",1,1,0.25,473
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_no_ip_addresses_in_dvr_ha_snat_namespace(self, router):",1,1,0.25,474
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _mocked_dvr_ha_router(self, agent):",1,1,0.25,475
326e25f932f3d30a163d82af5e398a89edbd01bd,router_updated = self.agent.router_info[router_info['id']],1,1,0.25,476
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.router[l3_constants.SNAT_ROUTER_INTF_KEY] = [],1,1,0.25,477
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.router[l3_constants.INTERFACE_KEY] = [],1,1,0.25,478
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip = router_info['_floatingips'][0],1,1,0.25,479
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip['host'] = 'my_new_host',1,1,0.25,480
326e25f932f3d30a163d82af5e398a89edbd01bd,# should not create the floatingip namespace on the given agent.,1,1,0.25,481
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_fip_late_binding(self):,1,1,0.25,482
326e25f932f3d30a163d82af5e398a89edbd01bd,This test validates the condition where floatingip private,1,1,0.25,483
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_agent_gw_port = router_info[l3_constants.FLOATINGIP_AGENT_INTF_KEY],1,1,0.25,484
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info[l3_constants.FLOATINGIP_AGENT_INTF_KEY] = [],1,1,0.25,485
326e25f932f3d30a163d82af5e398a89edbd01bd,self.mock_plugin_api.get_agent_gateway_port.return_value = (,1,1,0.25,486
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_snat_namespace_exists(self, router):",1,1,0.25,487
326e25f932f3d30a163d82af5e398a89edbd01bd,def _get_dvr_snat_namespace_device_status(,1,1,0.25,488
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Function returns the internal and external device status.""""""",1,1,0.25,489
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_ns = dvr_snat_ns.SnatNamespace.get_snat_ns_name(,1,1,0.25,490
326e25f932f3d30a163d82af5e398a89edbd01bd,qg_device_created_successfully = ip_lib.device_exists(,1,1,0.25,491
326e25f932f3d30a163d82af5e398a89edbd01bd,sg_device_created_successfully = ip_lib.device_exists(,1,1,0.25,492
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_snat_namespace_with_interface_remove(self):,1,1,0.25,493
326e25f932f3d30a163d82af5e398a89edbd01bd,and internal devices. It also validates if the internal,1,1,0.25,494
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_internal_port = router_info[l3_constants.SNAT_ROUTER_INTF_KEY],1,1,0.25,495
326e25f932f3d30a163d82af5e398a89edbd01bd,csnat_internal_port = (,1,1,0.25,496
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_device_name = router1._get_snat_int_device_name(,1,1,0.25,497
326e25f932f3d30a163d82af5e398a89edbd01bd,"qg_device, sg_device = self._get_dvr_snat_namespace_device_status(",1,1,0.25,498
326e25f932f3d30a163d82af5e398a89edbd01bd,# the interface has been removed.,1,1,0.25,499
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_ha_router_failover(self):,1,1,0.25,500
326e25f932f3d30a163d82af5e398a89edbd01bd,router2 = self._create_dvr_ha_router(self.failover_agent),1,1,0.25,501
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_fip_namespace_deleted(self, ext_gateway_port):",1,1,0.25,502
326e25f932f3d30a163d82af5e398a89edbd01bd,No such file or directory,0,1,0.25,503
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_find_listen_pids_namespace_helper(self, expected,",0,1,0.25,504
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_wrap.return_value.netns.execute.return_value = netstat_output,0,1,0.25,505
326e25f932f3d30a163d82af5e398a89edbd01bd,observed = util.find_listen_pids_namespace(mock.ANY),0,1,0.25,506
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_find_listen_pids_namespace_correct_output(self):,0,1,0.25,507
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_find_listen_pids_namespace_no_procs(self):,0,1,0.25,508
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_find_listen_pids_namespace_no_namespace(self):,0,1,0.25,509
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test__kill_listen_processes_helper(self, pids, parents, children,",0,1,0.25,510
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _get_element(dct, x):",0,1,0.25,511
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _find_childs(x, recursive):",0,1,0.25,512
326e25f932f3d30a163d82af5e398a89edbd01bd,def _find_parent(x):,0,1,0.25,513
326e25f932f3d30a163d82af5e398a89edbd01bd,utils_mock = dict(,0,1,0.25,514
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.log_mock = mock.patch.object(util, 'LOG').start()",0,1,0.25,515
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.multiple('neutron.agent.linux.utils', **utils_mock)\",0,1,0.25,516
326e25f932f3d30a163d82af5e398a89edbd01bd,as mocks:,0,1,0.25,517
326e25f932f3d30a163d82af5e398a89edbd01bd,mocks['find_fork_top_parent'].side_effect = _find_parent,0,1,0.25,518
326e25f932f3d30a163d82af5e398a89edbd01bd,mocks['find_child_pids'].side_effect = _find_childs,0,1,0.25,519
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(util, 'find_listen_pids_namespace',",0,1,0.25,520
326e25f932f3d30a163d82af5e398a89edbd01bd,def test__kill_listen_processes_only_parents_force_false(self):,0,1,0.25,521
326e25f932f3d30a163d82af5e398a89edbd01bd,"pids = ['4', '5', '6']",0,1,0.25,522
326e25f932f3d30a163d82af5e398a89edbd01bd,"parents = {'4': '1', '5': '5', '6': '2'}",0,1,0.25,523
326e25f932f3d30a163d82af5e398a89edbd01bd,children = {},0,1,0.25,524
326e25f932f3d30a163d82af5e398a89edbd01bd,"NETSTAT_NO_LISTEN_PROCS = (""""""",0,1,0.25,525
326e25f932f3d30a163d82af5e398a89edbd01bd,"Cannot open network namespace ""qrouter-e6f206b2-4e8d-4597-a7e1-c3a20337e9c6"":\",0,1,0.25,526
326e25f932f3d30a163d82af5e398a89edbd01bd,ext_net_id = ext_gateway_port['network_id'],1,1,0.25,527
326e25f932f3d30a163d82af5e398a89edbd01bd,"NETSTAT_NO_NAMESPACE = (""""""",0,1,0.25,528
326e25f932f3d30a163d82af5e398a89edbd01bd,import os,0,1,0.25,529
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron_lib import constants as n_const,0,1,0.25,530
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import utils,0,1,0.25,531
326e25f932f3d30a163d82af5e398a89edbd01bd,NUM_SUBPROCESSES = 6,0,1,0.25,532
326e25f932f3d30a163d82af5e398a89edbd01bd,# launch processes in each namespace to make sure they're,0,1,0.25,533
326e25f932f3d30a163d82af5e398a89edbd01bd,"procs_launched = self._launch_processes([l3_namespace, dhcp_namespace])",0,1,0.25,534
326e25f932f3d30a163d82af5e398a89edbd01bd,"exception=Exception(""Didn't spawn expected number of processes""))",0,1,0.25,535
326e25f932f3d30a163d82af5e398a89edbd01bd,procs_after = self._get_num_spawned_procs(),0,1,0.25,536
326e25f932f3d30a163d82af5e398a89edbd01bd,def _launch_processes(namespaces):,0,1,0.25,537
326e25f932f3d30a163d82af5e398a89edbd01bd,- 1 process + 5 subprocesses listening on unix sockets,0,1,0.25,538
326e25f932f3d30a163d82af5e398a89edbd01bd,- 1 process + 5 subprocesses listening on udp6 sockets,0,1,0.25,539
326e25f932f3d30a163d82af5e398a89edbd01bd,First two sets of processes will process SIGTERM so when the parent,0,1,0.25,540
326e25f932f3d30a163d82af5e398a89edbd01bd,to test the cleanup functionality which will issue a SIGKILL,0,1,0.25,541
326e25f932f3d30a163d82af5e398a89edbd01bd,"commands = [['python', process_spawn.__file__,",0,1,0.25,542
326e25f932f3d30a163d82af5e398a89edbd01bd,proc_count = 0,0,1,0.25,543
326e25f932f3d30a163d82af5e398a89edbd01bd,# We need to pass the PATH env variable so that python,0,1,0.25,544
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Otherwise, it won't find the necessary packages such as",0,1,0.25,545
326e25f932f3d30a163d82af5e398a89edbd01bd,def _get_num_spawned_procs():,0,1,0.25,546
326e25f932f3d30a163d82af5e398a89edbd01bd,return sum([1 for line in out.splitlines() if 'process_spawn' in line]),0,1,0.25,547
326e25f932f3d30a163d82af5e398a89edbd01bd,"NETSTAT_NETNS_OUTPUT = (""""""",0,1,0.25,548
326e25f932f3d30a163d82af5e398a89edbd01bd,interface_name = router.get_external_device_name(port['id']),1,1,0.25,549
326e25f932f3d30a163d82af5e398a89edbd01bd,# device has an IP address.,1,1,0.25,550
326e25f932f3d30a163d82af5e398a89edbd01bd,# the process itself plus the number of subprocesses spawned by,0,1,0.25,551
326e25f932f3d30a163d82af5e398a89edbd01bd,port = router.get_ex_gw_port(),1,1,0.25,552
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_address = '19.4.4.4',0,1,0.25,553
326e25f932f3d30a163d82af5e398a89edbd01bd,if loop_version == 4 and (ip_version == 4 or dual_stack):,0,1,0.25,554
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_pool = '35.4.%i.4',0,1,0.25,555
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr_pool = '35.4.%i.0/24',0,1,0.25,556
326e25f932f3d30a163d82af5e398a89edbd01bd,prefixlen = 24,0,1,0.25,557
326e25f932f3d30a163d82af5e398a89edbd01bd,gw_pool = '35.4.%i.1',0,1,0.25,558
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_pool = 'fd01:%x:1::6',0,1,0.25,559
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr_pool = 'fd01:%x:1::/64',0,1,0.25,560
326e25f932f3d30a163d82af5e398a89edbd01bd,prefixlen = 64,0,1,0.25,561
326e25f932f3d30a163d82af5e398a89edbd01bd,gw_pool = 'fd01:%x:1::1',0,1,0.25,562
326e25f932f3d30a163d82af5e398a89edbd01bd,if not fixed_ips:,0,1,0.25,563
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_cidr = '19.4.4.0/24',0,1,0.25,564
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_external_gateway_action(self, action, router, dual_stack=False):",0,1,0.25,565
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_ip = '19.4.4.1',0,1,0.25,566
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_address = 'fd00::4',0,1,0.25,567
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_cidr = 'fd00::/64',0,1,0.25,568
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_ip = 'fd00::1',0,1,0.25,569
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_id_1 = _uuid(),0,1,0.25,570
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_id_2 = _uuid(),0,1,0.25,571
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.snat_ports = [{'subnets': [{'cidr': '152.2.0.0/16',",0,1,0.25,572
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_id = _uuid(),0,1,0.25,573
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri = l3router.RouterInfo(ns_id, router, **self.ri_kwargs)",0,1,0.25,574
326e25f932f3d30a163d82af5e398a89edbd01bd,def _fixed_ip_cidr(fixed_ip):,0,1,0.25,575
326e25f932f3d30a163d82af5e398a89edbd01bd,subnets = [],0,1,0.25,576
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ips = [],0,1,0.25,577
326e25f932f3d30a163d82af5e398a89edbd01bd,fg_port_created_successfully = ip_lib.device_exists_with_ips_and_mac(,0,1,0.25,578
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_gateway = external_port['subnets'][0]['gateway_ip'],0,1,0.25,579
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device_cidr = self._port_first_ip_cidr(external_port),0,1,0.25,580
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_device_cidr = self._port_first_ip_cidr(internal_port),0,1,0.25,581
326e25f932f3d30a163d82af5e398a89edbd01bd,default_gateway_ip = external_port['subnets'][0].get('gateway_ip'),0,1,0.25,582
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=router.ns_name) for fip in floating_ips),0,1,0.25,583
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_id = _uuid(),0,1,0.25,584
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips = [{'ip_address': '19.4.4.10',",0,1,0.25,585
326e25f932f3d30a163d82af5e398a89edbd01bd,"subnets = [{'id': subnet_id,",0,1,0.25,586
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router['gw_port']['subnets'] = subnets,0,1,0.25,587
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router['gw_port']['fixed_ips'] = fixed_ips,0,1,0.25,588
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _router_lifecycle(self, enable_ha, ip_version=4, dual_stack=False):",0,1,0.25,589
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_info = self.generate_router_info(enable_ha, ip_version,",0,1,0.25,590
326e25f932f3d30a163d82af5e398a89edbd01bd,if not (enable_ha and (ip_version == 6 or dual_stack)):,0,1,0.25,591
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_gateway = subnet['gateway_ip'],0,1,0.25,592
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_vers = netaddr.IPAddress(expected_gateway).version,0,1,0.25,593
326e25f932f3d30a163d82af5e398a89edbd01bd,existing_gateway = (external_device.route.get_gateway(,0,1,0.25,594
326e25f932f3d30a163d82af5e398a89edbd01bd,def ha_router_dev_name_getter(not_used):,0,1,0.25,595
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ip_cidr = self._port_first_ip_cidr(router.internal_ports[0]),0,1,0.25,596
326e25f932f3d30a163d82af5e398a89edbd01bd,float_subnet = external_gw_port['subnets'][0],0,1,0.25,597
326e25f932f3d30a163d82af5e398a89edbd01bd,prefixlen = netaddr.IPNetwork(float_subnet['cidr']).prefixlen,0,1,0.25,598
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_subnet = port['subnets'][0],0,1,0.25,599
326e25f932f3d30a163d82af5e398a89edbd01bd,prefixlen = netaddr.IPNetwork(snat_subnet['cidr']).prefixlen,0,1,0.25,600
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._snat_redirect_modify = mock.Mock(),0,1,0.25,601
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips = [{'subnet_id': subnet_id,",0,1,0.25,602
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_addr = '19.4.4.4',1,1,0.25,603
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_version == 4:,1,1,0.25,604
326e25f932f3d30a163d82af5e398a89edbd01bd,"def device_exists_with_ip_mac(self, expected_device, name_getter,",1,1,0.25,605
326e25f932f3d30a163d82af5e398a89edbd01bd,ha_device_cidr = router.ha_port['ip_cidr'],1,1,0.25,606
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device_cidr = external_port['ip_cidr'],1,1,0.25,607
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_device_cidr = internal_port['ip_cidr'],1,1,0.25,608
326e25f932f3d30a163d82af5e398a89edbd01bd,default_gateway_ip = external_port['subnet'].get('gateway_ip'),1,1,0.25,609
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=router.ns_name) for fip in floating_ips),1,1,0.25,610
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router['gw_port']['subnet']['gateway_ip'] = '19.4.4.5',1,1,0.25,611
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router['gw_port']['fixed_ips'][0]['ip_address'] = '19.4.4.10',1,1,0.25,612
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _router_lifecycle(self, enable_ha, ip_version=4):",1,1,0.25,613
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_info = self.generate_router_info(enable_ha, ip_version)",1,1,0.25,614
326e25f932f3d30a163d82af5e398a89edbd01bd,existing_gateway = (,1,1,0.25,615
326e25f932f3d30a163d82af5e398a89edbd01bd,if dual_stack:,0,1,0.25,616
326e25f932f3d30a163d82af5e398a89edbd01bd,expected_gateway = external_port['subnet']['gateway_ip'],1,1,0.25,617
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ip_cidr = router.internal_ports[0]['ip_cidr'],1,1,0.25,618
326e25f932f3d30a163d82af5e398a89edbd01bd,float_subnet = external_gw_port['subnet'],1,1,0.25,619
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_subnet = port['subnet'],1,1,0.25,620
326e25f932f3d30a163d82af5e398a89edbd01bd,fg_port_created_successfully = ip_lib.device_exists_with_ip_mac(,1,1,0.25,621
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_pool = '35.4.%i.4',1,1,0.25,622
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr_pool = '35.4.%i.0/24',1,1,0.25,623
326e25f932f3d30a163d82af5e398a89edbd01bd,gw_pool = '35.4.%i.1',1,1,0.25,624
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_pool = 'fd01:%x:1::6',1,1,0.25,625
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr_pool = 'fd01:%x:1::/64',1,1,0.25,626
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_version == 6:,1,1,0.25,627
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_process_dual_stack_gw(self):,0,1,0.25,628
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_process_ipv6_only_gw(self):,0,1,0.25,629
326e25f932f3d30a163d82af5e398a89edbd01bd,external_gateway_nat_rules.side_effect = orig_ext_gw_nat_rules,0,1,0.25,630
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_id_v6 = _uuid(),0,1,0.25,631
326e25f932f3d30a163d82af5e398a89edbd01bd,"ex_gw_port = {'fixed_ips': fixed_ips,",0,1,0.25,632
326e25f932f3d30a163d82af5e398a89edbd01bd,"exp_arp_calls = [mock.call(ri.ns_name, interface_name,",0,1,0.25,633
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_cidrs = ['20.0.0.30/24'],0,1,0.25,634
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_ips = ['20.0.0.1'],0,1,0.25,635
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _prepare_ext_gw_test(self, ri, dual_stack=False):",0,1,0.25,636
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_external_gateway_updated(self, dual_stack=False):",0,1,0.25,637
326e25f932f3d30a163d82af5e398a89edbd01bd,"interface_name, ex_gw_port = self._prepare_ext_gw_test(",0,1,0.25,638
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_external_gateway_updated(self):,0,1,0.25,639
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_external_gateway_updated_dual_stack(self):,0,1,0.25,640
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_agent_add_external_gateway_dual_stack(self):,0,1,0.25,641
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_agent_add_external_gateway_dist_dual_stack(self):,0,1,0.25,642
326e25f932f3d30a163d82af5e398a89edbd01bd,router['gw_port_host'] = HOSTNAME,0,1,0.25,643
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_agent_remove_external_gateway_dual_stack(self):,0,1,0.25,644
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_agent_remove_external_gateway_dist_dual_stack(self):,0,1,0.25,645
326e25f932f3d30a163d82af5e398a89edbd01bd,prefix = subnet['cidr'].split('/')[1],0,1,0.25,646
326e25f932f3d30a163d82af5e398a89edbd01bd,"source_cidr = ""%s/%s"" % (iface['fixed_ips'][0]['ip_address'],",0,1,0.25,647
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_id = _get_subnet_id(ports[0]),0,1,0.25,648
326e25f932f3d30a163d82af5e398a89edbd01bd,"ports[0]['subnets'] = [{'id': subnet_id,",0,1,0.25,649
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_process_ipv6_only_or_dual_stack_gw(self, dual_stack=False):",0,1,0.25,650
326e25f932f3d30a163d82af5e398a89edbd01bd,orig_ext_gw_nat_rules = ri.external_gateway_nat_rules,0,1,0.25,651
326e25f932f3d30a163d82af5e398a89edbd01bd,ha_device_cidr = self._port_first_ip_cidr(router.ha_port),0,1,0.25,652
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ip = port['fixed_ips'][0],0,1,0.25,653
326e25f932f3d30a163d82af5e398a89edbd01bd,def _port_first_ip_cidr(port):,0,1,0.25,654
326e25f932f3d30a163d82af5e398a89edbd01bd,self.cidr = '2001:db8::/64',0,1,0.25,655
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_delete_rule_v6(self):,0,1,0.25,656
326e25f932f3d30a163d82af5e398a89edbd01bd,self.ip_version = 4,0,1,0.25,657
326e25f932f3d30a163d82af5e398a89edbd01bd,self.table = 14,0,1,0.25,658
326e25f932f3d30a163d82af5e398a89edbd01bd,self.metric = 100,0,1,0.25,659
326e25f932f3d30a163d82af5e398a89edbd01bd,self.cidr = '192.168.45.100/24',0,1,0.25,660
326e25f932f3d30a163d82af5e398a89edbd01bd,self.ip = '10.0.0.1',0,1,0.25,661
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.test_cases = [{'sample': GATEWAY_SAMPLE1,",0,1,0.25,662
326e25f932f3d30a163d82af5e398a89edbd01bd,"# for pullup_route, hence skipping. Revisit, if required, in future.",0,1,0.25,663
326e25f932f3d30a163d82af5e398a89edbd01bd,if self.ip_version == 6:,0,1,0.25,664
326e25f932f3d30a163d82af5e398a89edbd01bd,self.ip_version = 6,0,1,0.25,665
326e25f932f3d30a163d82af5e398a89edbd01bd,self.ip = '2001:db8::100',0,1,0.25,666
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_cidrs = common_utils.fixed_ip_cidrs(expected_device['fixed_ips']),0,1,0.25,667
326e25f932f3d30a163d82af5e398a89edbd01bd,self.gateway = '2001:db8::1',0,1,0.25,668
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.test_cases = [{'sample': IPv6_GATEWAY_SAMPLE1,",0,1,0.25,669
326e25f932f3d30a163d82af5e398a89edbd01bd,def setUp(self):,1,1,0.25,670
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute_p = mock.patch.object(ip_lib.IpRule, '_execute')",1,1,0.25,671
326e25f932f3d30a163d82af5e398a89edbd01bd,self.execute = self.execute_p.start(),1,1,0.25,672
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_add_rule(self, ip, table, priority):",1,1,0.25,673
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_version = netaddr.IPNetwork(ip).version,1,1,0.25,674
326e25f932f3d30a163d82af5e398a89edbd01bd,"call_1 = mock.call([ip_version], 'rule', ['show'],",1,1,0.25,675
326e25f932f3d30a163d82af5e398a89edbd01bd,call_2 = mock.call().splitlines(),1,1,0.25,676
326e25f932f3d30a163d82af5e398a89edbd01bd,call_3 = mock.ANY,1,1,0.25,677
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_delete_rule_v4(self):,0,1,0.25,678
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v6_exists(self):,0,1,0.25,679
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v6(self):,0,1,0.25,680
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v4_exists(self):,0,1,0.25,681
326e25f932f3d30a163d82af5e398a89edbd01bd,ARPING_COUNT = 3,0,1,0.25,682
326e25f932f3d30a163d82af5e398a89edbd01bd,if enable_ha:,1,1,0.25,683
326e25f932f3d30a163d82af5e398a89edbd01bd,"IPv6_GATEWAY_SAMPLE1 = (""""""",0,1,0.25,684
326e25f932f3d30a163d82af5e398a89edbd01bd,"IPv6_GATEWAY_SAMPLE2 = (""""""",0,1,0.25,685
326e25f932f3d30a163d82af5e398a89edbd01bd,"IPv6_GATEWAY_SAMPLE3 = (""""""",0,1,0.25,686
326e25f932f3d30a163d82af5e398a89edbd01bd,"IPv6_GATEWAY_SAMPLE4 = (""""""",0,1,0.25,687
326e25f932f3d30a163d82af5e398a89edbd01bd,"IPv6_GATEWAY_SAMPLE5 = (""""""",0,1,0.25,688
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_as_root_namespace_false(self):,0,1,0.25,689
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_as_root_namespace_true(self):,0,1,0.25,690
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_as_root_namespace_true_with_options(self):,0,1,0.25,691
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_sudo(self, options, args, use_root_namespace=False):",0,1,0.25,692
326e25f932f3d30a163d82af5e398a89edbd01bd,def setUp(self):,0,1,0.25,693
326e25f932f3d30a163d82af5e398a89edbd01bd,self.parent._as_root.return_value = '',0,1,0.25,694
326e25f932f3d30a163d82af5e398a89edbd01bd,self.command = 'rule',0,1,0.25,695
326e25f932f3d30a163d82af5e398a89edbd01bd,self.rule_cmd = ip_lib.IpRuleCommand(self.parent),0,1,0.25,696
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_add_rule(self, ip, table, priority):",0,1,0.25,697
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_version = netaddr.IPNetwork(ip).version,0,1,0.25,698
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_add_rule_exists(self, ip, table, priority, output):",0,1,0.25,699
326e25f932f3d30a163d82af5e398a89edbd01bd,self.parent._as_root.return_value = output,0,1,0.25,700
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_delete_rule(self, ip, table, priority):",0,1,0.25,701
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v4(self):,0,1,0.25,702
326e25f932f3d30a163d82af5e398a89edbd01bd,"call_4 = mock.call([ip_version], 'rule',",1,1,0.25,703
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_add_rule_exists(self, ip, table, priority, output):",1,1,0.25,704
326e25f932f3d30a163d82af5e398a89edbd01bd,self.execute.return_value = output,1,1,0.25,705
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.router[l3_constants.FLOATINGIP_KEY] = [],0,1,0.25,706
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _floating_ips_configured(self, router):",1,1,0.25,707
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ips = router.router[l3_constants.FLOATINGIP_KEY],1,1,0.25,708
326e25f932f3d30a163d82af5e398a89edbd01bd,external_port = router.get_ex_gw_port(),1,1,0.25,709
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=router.ns_name) for fip in floating_ips),1,1,0.25,710
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _get_addresses_on_device(cls, namespace, interface):",0,1,0.25,711
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_lib.IPDevice(interface, namespace=namespace).addr.list()]",0,1,0.25,712
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_no_ip_addresses_on_interface(self, namespace, interface):",0,1,0.25,713
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_no_ip_addresses_on_interface(self, router, interface):",1,1,0.25,714
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_cidr not in device_ip_cidrs:,0,1,0.25,715
326e25f932f3d30a163d82af5e398a89edbd01bd,return False,0,1,0.25,716
326e25f932f3d30a163d82af5e398a89edbd01bd,return False,1,1,0.25,717
326e25f932f3d30a163d82af5e398a89edbd01bd,"Device = collections.namedtuple('Device',",0,1,0.25,718
326e25f932f3d30a163d82af5e398a89edbd01bd,"def generate_device_details(self, name=None, ip_cidrs=None,",0,1,0.25,719
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_device_exists_with_ips_and_mac(self):,0,1,0.25,720
326e25f932f3d30a163d82af5e398a89edbd01bd,device_ip = attr.ip_cidrs[0].split('/')[0],0,1,0.25,721
326e25f932f3d30a163d82af5e398a89edbd01bd,"Device = collections.namedtuple('Device', 'name ip_cidr mac_address namespace')",1,1,0.25,722
326e25f932f3d30a163d82af5e398a89edbd01bd,"def generate_device_details(self, name=None, ip_cidr=None,",1,1,0.25,723
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_device_exists_with_ip_mac(self):,1,1,0.25,724
326e25f932f3d30a163d82af5e398a89edbd01bd,device_ip = attr.ip_cidr.split('/')[0],1,1,0.25,725
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_version == 6 and not dual_stack:,0,1,0.25,726
326e25f932f3d30a163d82af5e398a89edbd01bd,"def device_exists_with_ips_and_mac(self, expected_device, name_getter,",0,1,0.25,727
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _add_fip(self, router, fip_address, fixed_address='10.0.0.2'):",1,1,0.25,728
326e25f932f3d30a163d82af5e398a89edbd01bd,restarted_agent = neutron_l3_agent.L3NATAgentWithStateReport(,0,1,0.25,729
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_delete_rule(self, ip, table, priority):",1,1,0.25,730
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_ns = router1.fip_ns.get_name(),0,1,0.25,731
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v4(self):,1,1,0.25,732
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v4_exists(self):,1,1,0.25,733
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v6(self):,1,1,0.25,734
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_add_rule_v6_exists(self):,1,1,0.25,735
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_delete_rule_v4(self):,1,1,0.25,736
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_delete_rule_v6(self):,1,1,0.25,737
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_as_root(self):,1,1,0.25,738
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_as_root_with_options(self):,1,1,0.25,739
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_sudo(self, options, args, force_root_namespace=False):",1,1,0.25,740
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway = '192.168.45.100',1,1,0.25,741
326e25f932f3d30a163d82af5e398a89edbd01bd,metric = 100,1,1,0.25,742
326e25f932f3d30a163d82af5e398a89edbd01bd,"test_cases = [{'sample': GATEWAY_SAMPLE1,",1,1,0.25,743
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr = '192.168.45.100/24',1,1,0.25,744
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _add_fip(self, router, fip_address, fixed_address='10.0.0.2',",0,1,0.25,745
326e25f932f3d30a163d82af5e398a89edbd01bd,"def floating_ips_configured(self, router):",0,1,0.25,746
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ips = router.router[l3_constants.FLOATINGIP_KEY],0,1,0.25,747
326e25f932f3d30a163d82af5e398a89edbd01bd,external_port = router.get_ex_gw_port(),0,1,0.25,748
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=router.ns_name) for fip in floating_ips),0,1,0.25,749
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_dvr_router_rem_fips_on_restarted_agent(self):,0,1,0.25,750
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode = 'dvr_snat',0,1,0.25,751
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_dvr_router_info(),0,1,0.25,752
326e25f932f3d30a163d82af5e398a89edbd01bd,gw_pool = 'fd01:%x:1::1',1,1,0.25,753
326e25f932f3d30a163d82af5e398a89edbd01bd,self.gateway = '192.168.45.100',0,1,0.25,754
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr = '19.4.4.0/24',1,1,0.25,755
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_conntrack_disassociate_fip(self, ha):",1,1,0.25,756
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test notifications for router create, update, and delete.",1,1,0.25,757
326e25f932f3d30a163d82af5e398a89edbd01bd,Make sure that when the agent sends notifications of router events,1,1,0.25,758
326e25f932f3d30a163d82af5e398a89edbd01bd,"for router create, update, and delete, that the correct handler is",1,1,0.25,759
326e25f932f3d30a163d82af5e398a89edbd01bd,event_handler = mock.Mock(),1,1,0.25,760
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_router_info(enable_ha=False),1,1,0.25,761
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_legacy_router_lifecycle(self):,1,1,0.25,762
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_legacy_router_lifecycle_with_no_gateway_subnet(self):,1,1,0.25,763
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ha_router_lifecycle(self):,1,1,0.25,764
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_conntrack_disassociate_fip_legacy_router(self):,1,1,0.25,765
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_conntrack_disassociate_fip_ha_router(self):,1,1,0.25,766
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_router_info(enable_ha=ha),1,1,0.25,767
326e25f932f3d30a163d82af5e398a89edbd01bd,with self.assert_max_execution_time(100):,1,1,0.25,768
326e25f932f3d30a163d82af5e398a89edbd01bd,"port = net_helpers.get_free_namespace_port(l3_constants.PROTO_NAME_TCP,",1,1,0.25,769
326e25f932f3d30a163d82af5e398a89edbd01bd,client_address = '19.4.4.3',1,1,0.25,770
326e25f932f3d30a163d82af5e398a89edbd01bd,server_address = '35.4.0.4',1,1,0.25,771
326e25f932f3d30a163d82af5e398a89edbd01bd,def clean_fips(router):,1,1,0.25,772
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router[l3_constants.FLOATINGIP_KEY] = [],1,1,0.25,773
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ns = ip_lib.IPWrapper(namespace=router.ns_name),1,1,0.25,774
326e25f932f3d30a163d82af5e398a89edbd01bd,netcat = net_helpers.NetcatTester(,1,1,0.25,775
326e25f932f3d30a163d82af5e398a89edbd01bd,def assert_num_of_conntrack_rules(n):,1,1,0.25,776
326e25f932f3d30a163d82af5e398a89edbd01bd,"out = router_ns.netns.execute([""conntrack"", ""-L"",",1,1,0.25,777
326e25f932f3d30a163d82af5e398a89edbd01bd,"n, len([line for line in out.strip().split('\n') if line]))",1,1,0.25,778
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_agent_notifications_for_router_events(self):,1,1,0.25,779
326e25f932f3d30a163d82af5e398a89edbd01bd,"router2 = self.manage_router(self.agent, router_info)",1,1,0.25,780
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_keepalived_state_change_bulk_rpc(self):,1,1,0.25,781
326e25f932f3d30a163d82af5e398a89edbd01bd,return actual_router_states == expected,1,1,0.25,782
326e25f932f3d30a163d82af5e398a89edbd01bd,extra_subnets = router.get_ex_gw_port()['extra_subnets'],1,1,0.25,783
326e25f932f3d30a163d82af5e398a89edbd01bd,def _assert_interfaces_deleted_from_ovs(self):,1,1,0.25,784
326e25f932f3d30a163d82af5e398a89edbd01bd,def assert_ovs_bridge_empty(bridge_name):,1,1,0.25,785
326e25f932f3d30a163d82af5e398a89edbd01bd,bridge = ovs_lib.OVSBridge(bridge_name),1,1,0.25,786
326e25f932f3d30a163d82af5e398a89edbd01bd,"def floating_ips_configured(self, router):",1,1,0.25,787
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ips = router.router[l3_constants.FLOATINGIP_KEY],1,1,0.25,788
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=router.ns_name) for fip in floating_ips),1,1,0.25,789
326e25f932f3d30a163d82af5e398a89edbd01bd,"def fail_ha_router(self, router):",1,1,0.25,790
326e25f932f3d30a163d82af5e398a89edbd01bd,device_name = router.get_ha_device_name(),1,1,0.25,791
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _get_addresses_on_device(cls, namespace, interface):",1,1,0.25,792
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_lib.IPDevice(interface, namespace=namespace).addr.list()]",1,1,0.25,793
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_no_ip_addresses_on_interface(self, namespace, interface):",1,1,0.25,794
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_ip_address_on_interface(self,",1,1,0.25,795
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_keepalived_state_change_notification(self):,1,1,0.25,796
326e25f932f3d30a163d82af5e398a89edbd01bd,enqueue_mock = mock.patch.object(,1,1,0.25,797
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info = self.generate_router_info(enable_ha=True),1,1,0.25,798
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _expected_rpc_report(self, expected):",1,1,0.25,799
326e25f932f3d30a163d82af5e398a89edbd01bd,# Get the last state reported for each router,1,1,0.25,800
326e25f932f3d30a163d82af5e398a89edbd01bd,actual_router_states = {},1,1,0.25,801
326e25f932f3d30a163d82af5e398a89edbd01bd,for call in calls:,1,1,0.25,802
326e25f932f3d30a163d82af5e398a89edbd01bd,actual_router_states[router_id] = state,1,1,0.25,803
326e25f932f3d30a163d82af5e398a89edbd01bd,if ha:,1,1,0.25,804
326e25f932f3d30a163d82af5e398a89edbd01bd,with testtools.ExpectedException(RuntimeError):,1,1,0.25,805
326e25f932f3d30a163d82af5e398a89edbd01bd,"self, router, ip_versions, namespace=None):",1,1,0.25,806
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_to_keep = [],1,1,0.25,807
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_get_routers.return_value = (routers_to_keep +,1,1,0.25,808
326e25f932f3d30a163d82af5e398a89edbd01bd,# clear agent router_info as it will be after restart,1,1,0.25,809
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.router_info = {},1,1,0.25,810
326e25f932f3d30a163d82af5e398a89edbd01bd,# Synchronize the agent with the plug-in,1,1,0.25,811
326e25f932f3d30a163d82af5e398a89edbd01bd,"with mock.patch.object(namespace_manager.NamespaceManager, 'list_all',",1,1,0.25,812
326e25f932f3d30a163d82af5e398a89edbd01bd,external_network_id = _uuid(),1,1,0.25,813
326e25f932f3d30a163d82af5e398a89edbd01bd,self.mock_plugin_api.get_external_network_id.return_value = (,1,1,0.25,814
326e25f932f3d30a163d82af5e398a89edbd01bd,r['external_gateway_info'] = {'network_id': external_network_id},1,1,0.25,815
326e25f932f3d30a163d82af5e398a89edbd01bd,# router_deleted events may be added there as well,1,1,0.25,816
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_periodic_sync_routers_task(self):,1,1,0.25,817
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_periodic_sync_routers_task_routers_deleted_while_agent_down(self):,1,1,0.25,818
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ipv6_ha_router_lifecycle(self):,1,1,0.25,819
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted = [],1,1,0.25,820
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_periodic_sync_routers_task_routers_deleted_while_agent_sync(self):,1,1,0.25,821
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted_during_resync = [],1,1,0.25,822
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _router_lifecycle(self, enable_ha, ip_version=4,",1,1,0.25,823
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_info = self.generate_router_info(enable_ha, ip_version,",1,1,0.25,824
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add multiple-IPv6-prefix internal router port,1,1,0.25,825
326e25f932f3d30a163d82af5e398a89edbd01bd,slaac = l3_constants.IPV6_SLAAC,1,1,0.25,826
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_ip = '19.4.4.1',1,1,0.25,827
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_modes = [slaac_mode] * 2,1,1,0.25,828
326e25f932f3d30a163d82af5e398a89edbd01bd,"slaac_mode = {'ra_mode': slaac, 'address_mode': slaac}",1,1,0.25,829
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_get_routers = self.mock_plugin_api.get_routers,1,1,0.25,830
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri = self.manage_router(self.agent, r)",1,1,0.25,831
326e25f932f3d30a163d82af5e398a89edbd01bd,deleted_routers_info = [],1,1,0.25,832
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_names_to_retrieve = set(),1,1,0.25,833
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ipv6_ha_router_lifecycle_with_no_gw_subnet(self):,1,1,0.25,834
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_ipv6_ha_router_lifecycle_with_no_gw_subnet_for_router_advts(self):,1,1,0.25,835
326e25f932f3d30a163d82af5e398a89edbd01bd,# Advts from upstream router when no external gateway is configured.,1,1,0.25,836
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_keepalived_configuration(self):,1,1,0.25,837
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router = copy.deepcopy(router.router),1,1,0.25,838
326e25f932f3d30a163d82af5e398a89edbd01bd,existing_fip = '19.4.4.2',1,1,0.25,839
326e25f932f3d30a163d82af5e398a89edbd01bd,new_fip = '19.4.4.3',1,1,0.25,840
326e25f932f3d30a163d82af5e398a89edbd01bd,subnet_id = _uuid(),1,1,0.25,841
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips = [{'ip_address': '19.4.4.10',",1,1,0.25,842
326e25f932f3d30a163d82af5e398a89edbd01bd,"subnets = [{'id': subnet_id,",1,1,0.25,843
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router['gw_port']['subnets'] = subnets,1,1,0.25,844
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router['gw_port']['fixed_ips'] = fixed_ips,1,1,0.25,845
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Get the updated configuration and assert that both FIPs are in,",1,1,0.25,846
326e25f932f3d30a163d82af5e398a89edbd01bd,new_config = router.keepalived_manager.config.get_config_str(),1,1,0.25,847
326e25f932f3d30a163d82af5e398a89edbd01bd,old_gw = '0.0.0.0/0 via 19.4.4.1',1,1,0.25,848
326e25f932f3d30a163d82af5e398a89edbd01bd,new_gw = '0.0.0.0/0 via 19.4.4.5',1,1,0.25,849
326e25f932f3d30a163d82af5e398a89edbd01bd,old_external_device_ip = '19.4.4.4',1,1,0.25,850
326e25f932f3d30a163d82af5e398a89edbd01bd,new_external_device_ip = '19.4.4.10',1,1,0.25,851
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertNotIn('%s/24 dev %s' %,1,1,0.25,852
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertIn('%s/24 dev %s' %,1,1,0.25,853
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_periodic_sync_routers_task(self,",1,1,0.25,854
326e25f932f3d30a163d82af5e398a89edbd01bd,"_routes = ip_lib.get_routing_table(ip_version,",1,1,0.25,855
326e25f932f3d30a163d82af5e398a89edbd01bd,# when the router updates are processed by the agent,1,1,0.25,856
326e25f932f3d30a163d82af5e398a89edbd01bd,def _assert_onlink_subnet_routes(,1,1,0.25,857
326e25f932f3d30a163d82af5e398a89edbd01bd,self.mock_plugin_api = mock.patch(,1,1,0.25,858
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent import l3_agent as l3_agent_main,1,1,0.25,859
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import utils,1,1,0.25,860
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.common import constants as l3_constants,1,1,0.25,861
326e25f932f3d30a163d82af5e398a89edbd01bd,LOG = logging.getLogger(__name__),1,1,0.25,862
326e25f932f3d30a163d82af5e398a89edbd01bd,_uuid = uuidutils.generate_uuid,1,1,0.25,863
326e25f932f3d30a163d82af5e398a89edbd01bd,METADATA_REQUEST_TIMEOUT = 60,1,1,0.25,864
326e25f932f3d30a163d82af5e398a89edbd01bd,METADATA_REQUEST_SLEEP = 5,1,1,0.25,865
326e25f932f3d30a163d82af5e398a89edbd01bd,DEVICE_OWNER_COMPUTE = l3_constants.DEVICE_OWNER_COMPUTE_PREFIX + 'fake',1,1,0.25,866
326e25f932f3d30a163d82af5e398a89edbd01bd,def get_ovs_bridge(br_name):,1,1,0.25,867
326e25f932f3d30a163d82af5e398a89edbd01bd,def setUp(self):,1,1,0.25,868
326e25f932f3d30a163d82af5e398a89edbd01bd,self.conf = self._configure_agent('agent1'),1,1,0.25,869
326e25f932f3d30a163d82af5e398a89edbd01bd,if ip_version == 6 and not dual_stack:,1,1,0.25,870
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent = neutron_l3_agent.L3NATAgentWithStateReport('agent1',",1,1,0.25,871
326e25f932f3d30a163d82af5e398a89edbd01bd,def _get_config_opts(self):,1,1,0.25,872
326e25f932f3d30a163d82af5e398a89edbd01bd,return config,1,1,0.25,873
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _configure_agent(self, host, agent_mode='dvr_snat'):",1,1,0.25,874
326e25f932f3d30a163d82af5e398a89edbd01bd,conf = self._get_config_opts(),1,1,0.25,875
326e25f932f3d30a163d82af5e398a89edbd01bd,br_int = self.useFixture(net_helpers.OVSBridgeFixture()).bridge,1,1,0.25,876
326e25f932f3d30a163d82af5e398a89edbd01bd,br_ex = self.useFixture(net_helpers.OVSBridgeFixture()).bridge,1,1,0.25,877
326e25f932f3d30a163d82af5e398a89edbd01bd,temp_dir = self.get_new_temp_dir(),1,1,0.25,878
326e25f932f3d30a163d82af5e398a89edbd01bd,"get_temp_file_path = functools.partial(self.get_temp_file_path,",1,1,0.25,879
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _get_agent_ovs_integration_bridge(self, agent):",1,1,0.25,880
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.l3 import namespaces,1,1,0.25,881
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.l3 import agent as neutron_l3_agent,1,1,0.25,882
326e25f932f3d30a163d82af5e398a89edbd01bd,from oslo_log import log as logging,1,1,0.25,883
326e25f932f3d30a163d82af5e398a89edbd01bd,device_name = router1.get_ha_device_name(),1,1,0.25,884
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_ip = 'fd00::1',1,1,0.25,885
326e25f932f3d30a163d82af5e398a89edbd01bd,cidr = 'fd00::/64',1,1,0.25,886
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_extra_routes(self, router):",1,1,0.25,887
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_addr = 'fd00::4',1,1,0.25,888
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.snat_ports = [{'subnet': {'cidr': '152.2.0.0/16',",1,1,0.25,889
326e25f932f3d30a163d82af5e398a89edbd01bd,id = _uuid(),1,1,0.25,890
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri = l3router.RouterInfo(id, router, **self.ri_kwargs)",1,1,0.25,891
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._set_subnet_info = mock.Mock(),1,1,0.25,892
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._snat_redirect_remove = mock.Mock(),1,1,0.25,893
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _test_external_gateway_action(self, action, router):",1,1,0.25,894
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _prepare_ext_gw_test(self, ri):",1,1,0.25,895
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_external_gateway_updated(self):,1,1,0.25,896
326e25f932f3d30a163d82af5e398a89edbd01bd,"interface_name, ex_gw_port = self._prepare_ext_gw_test(ri)",1,1,0.25,897
326e25f932f3d30a163d82af5e398a89edbd01bd,prefix = iface['subnet']['cidr'].split('/')[1],1,1,0.25,898
326e25f932f3d30a163d82af5e398a89edbd01bd,"source_cidr = ""%s/%s"" % (iface['fixed_ips'][0]['ip_address'],",1,1,0.25,899
326e25f932f3d30a163d82af5e398a89edbd01bd,ports[0]['subnet']['id'] = _get_subnet_id(ports[0]),1,1,0.25,900
326e25f932f3d30a163d82af5e398a89edbd01bd,def test_process_ipv6_only_gw(self):,1,1,0.25,901
326e25f932f3d30a163d82af5e398a89edbd01bd,# There should be no change with the NAT rules,1,1,0.25,902
326e25f932f3d30a163d82af5e398a89edbd01bd,get_ns_name = mock.patch.object(,0,1,0.25,903
326e25f932f3d30a163d82af5e398a89edbd01bd,"get_ns_name.return_value = ""%s%s%s"" % (",0,1,0.25,904
326e25f932f3d30a163d82af5e398a89edbd01bd,"ns_name = ""%s%s%s"" % (",1,1,0.25,905
326e25f932f3d30a163d82af5e398a89edbd01bd,"def generate_router_info(self, enable_ha, ip_version=4, extra_routes=True,",1,1,0.25,906
326e25f932f3d30a163d82af5e398a89edbd01bd,"ex_gw_port = {'fixed_ips': [{'ip_address': '20.0.0.30',",1,1,0.25,907
326e25f932f3d30a163d82af5e398a89edbd01bd,"def manage_router(self, agent, router):",1,1,0.25,908
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _get_rule(self, iptables_manager, table, chain, predicate):",1,1,0.25,909
326e25f932f3d30a163d82af5e398a89edbd01bd,extra_subnet_cidr = external_port['extra_subnets'][0].get('cidr'),1,1,0.25,910
326e25f932f3d30a163d82af5e398a89edbd01bd,interface %(ha_device_name)s,1,1,0.25,911
326e25f932f3d30a163d82af5e398a89edbd01bd,169.254.0.1/24 dev %(ha_device_name)s,1,1,0.25,912
326e25f932f3d30a163d82af5e398a89edbd01bd,%(floating_ip_cidr)s dev %(external_device_name)s,1,1,0.25,913
326e25f932f3d30a163d82af5e398a89edbd01bd,%(external_device_cidr)s dev %(external_device_name)s,1,1,0.25,914
326e25f932f3d30a163d82af5e398a89edbd01bd,%(internal_device_cidr)s dev %(internal_device_name)s,1,1,0.25,915
326e25f932f3d30a163d82af5e398a89edbd01bd,%(ex_port_ipv6)s dev %(external_device_name)s scope link,1,1,0.25,916
326e25f932f3d30a163d82af5e398a89edbd01bd,%(int_port_ipv6)s dev %(internal_device_name)s scope link,1,1,0.25,917
326e25f932f3d30a163d82af5e398a89edbd01bd,0.0.0.0/0 via %(default_gateway_ip)s dev %(external_device_name)s,1,1,0.25,918
326e25f932f3d30a163d82af5e398a89edbd01bd,%(extra_subnet_cidr)s dev %(external_device_name)s scope link,1,1,0.25,919
326e25f932f3d30a163d82af5e398a89edbd01bd,"rules = iptables_manager.get_chain(table, chain)",1,1,0.25,920
326e25f932f3d30a163d82af5e398a89edbd01bd,floating_ip_cidr = common_utils.ip_to_cidr(,1,1,0.25,921
326e25f932f3d30a163d82af5e398a89edbd01bd,return result,1,1,0.25,922
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_router_does_not_exist(self, router):",1,1,0.25,923
326e25f932f3d30a163d82af5e398a89edbd01bd,# If the namespace assertion succeeds,1,1,0.25,924
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_floating_ip_chains(self, router):",1,1,0.25,925
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_metadata_chains(self, router):",1,1,0.25,926
326e25f932f3d30a163d82af5e398a89edbd01bd,for device in internal_devices:,1,1,0.25,927
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _delete_router(self, agent, router_id):",1,1,0.25,928
326e25f932f3d30a163d82af5e398a89edbd01bd,metadata_port_filter = lambda rule: (,1,1,0.25,929
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_internal_devices(self, router):",1,1,0.25,930
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_devices = router.router[l3_constants.INTERFACE_KEY],1,1,0.25,931
326e25f932f3d30a163d82af5e398a89edbd01bd,default_gateway_ip = external_port['subnets'][0].get('gateway_ip'),1,1,0.25,932
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _assert_snat_chains(self, router):",1,1,0.25,933
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_device_cidr = self._port_first_ip_cidr(internal_port),1,1,0.25,934
326e25f932f3d30a163d82af5e398a89edbd01bd,"def get_expected_keepalive_configuration(self, router):",1,1,0.25,935
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _namespace_exists(self, namespace):",1,1,0.25,936
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_device_name = router.get_internal_device_name(,1,1,0.25,937
326e25f932f3d30a163d82af5e398a89edbd01bd,pm = external_process.ProcessManager(,1,1,0.25,938
326e25f932f3d30a163d82af5e398a89edbd01bd,"def device_exists_with_ips_and_mac(self, expected_device, name_getter,",1,1,0.25,939
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _metadata_proxy_exists(self, conf, router):",1,1,0.25,940
326e25f932f3d30a163d82af5e398a89edbd01bd,"expected_device['mac_address'], namespace)",1,1,0.25,941
326e25f932f3d30a163d82af5e398a89edbd01bd,def _port_first_ip_cidr(port):,1,1,0.25,942
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ip = port['fixed_ips'][0],1,1,0.25,943
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _add_internal_interface_by_subnet(self, router, count=1,",1,1,0.25,944
326e25f932f3d30a163d82af5e398a89edbd01bd,"def get_device_mtu(self, target_device, name_getter, namespace):",1,1,0.25,945
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_cidrs = common_utils.fixed_ip_cidrs(expected_device['fixed_ips']),1,1,0.25,946
326e25f932f3d30a163d82af5e398a89edbd01bd,ha_device_name = router.get_ha_device_name(),1,1,0.25,947
326e25f932f3d30a163d82af5e398a89edbd01bd,ex_port_ipv6 = ip_lib.get_ipv6_lladdr(external_port['mac_address']),1,1,0.25,948
326e25f932f3d30a163d82af5e398a89edbd01bd,"def _add_fip(self, router, fip_address, fixed_address='10.0.0.2',",1,1,0.25,949
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device_name = router.get_external_device_name(,1,1,0.25,950
326e25f932f3d30a163d82af5e398a89edbd01bd,int_port_ipv6 = ip_lib.get_ipv6_lladdr(internal_port['mac_address']),1,1,0.25,951
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_port = router.router[l3_constants.INTERFACE_KEY][0],1,1,0.25,952
326e25f932f3d30a163d82af5e398a89edbd01bd,external_port = router.get_ex_gw_port(),1,1,0.25,953
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device_cidr = self._port_first_ip_cidr(external_port),1,1,0.25,954
326e25f932f3d30a163d82af5e398a89edbd01bd,'port': dhcp.METADATA_PORT},1,0,0.0,955
326e25f932f3d30a163d82af5e398a89edbd01bd,else:,1,0,0.0,956
326e25f932f3d30a163d82af5e398a89edbd01bd,i += METADATA_REQUEST_SLEEP,1,0,0.0,957
326e25f932f3d30a163d82af5e398a89edbd01bd,time.sleep(METADATA_REQUEST_SLEEP),1,0,0.0,958
326e25f932f3d30a163d82af5e398a89edbd01bd,break,1,0,0.0,959
326e25f932f3d30a163d82af5e398a89edbd01bd,try:,1,0,0.0,960
326e25f932f3d30a163d82af5e398a89edbd01bd,while i <= CONNECTION_REFUSED_TIMEOUT:,1,0,0.0,961
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.conf.metadata_proxy_socket,",1,0,0.0,962
326e25f932f3d30a163d82af5e398a89edbd01bd,"workers=0, backlog=4096, mode=self.SOCKET_MODE)",1,0,0.0,963
326e25f932f3d30a163d82af5e398a89edbd01bd,"server.start(MetadataFakeProxyHandler(status),",1,0,0.0,964
326e25f932f3d30a163d82af5e398a89edbd01bd,"os.path.dirname(self.agent.conf.metadata_proxy_socket), 0o555))",1,0,0.0,965
326e25f932f3d30a163d82af5e398a89edbd01bd,helpers.RecursivePermDirFixture(,1,0,0.0,966
326e25f932f3d30a163d82af5e398a89edbd01bd,self.useFixture(,1,0,0.0,967
326e25f932f3d30a163d82af5e398a89edbd01bd,# users,1,0,0.0,968
326e25f932f3d30a163d82af5e398a89edbd01bd,# permissions but metadata_proxy_socket folder must be readable by all,1,0,0.0,969
326e25f932f3d30a163d82af5e398a89edbd01bd,class MetadataL3AgentTestCase(L3AgentTestFramework):,1,0,0.0,970
326e25f932f3d30a163d82af5e398a89edbd01bd,self.addCleanup(server.stop),1,0,0.0,971
326e25f932f3d30a163d82af5e398a89edbd01bd,self.fail('metadata proxy unreachable ',1,0,0.0,972
326e25f932f3d30a163d82af5e398a89edbd01bd,http://169.254.169.254 and asserts that the metadata proxy added,1,0,0.0,973
326e25f932f3d30a163d82af5e398a89edbd01bd,'on %s before timeout' % url),1,0,0.0,974
326e25f932f3d30a163d82af5e398a89edbd01bd,self.fail('Timed out waiting metadata proxy to become available'),1,0,0.0,975
326e25f932f3d30a163d82af5e398a89edbd01bd,The least privileged user has uid=65534 and is commonly named 'nobody' but,1,0,0.0,976
326e25f932f3d30a163d82af5e398a89edbd01bd,"not always, that's why we use its uid.",1,0,0.0,977
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(UnprivilegedUserMetadataL3AgentTestCase, self).setUp()",1,0,0.0,978
326e25f932f3d30a163d82af5e398a89edbd01bd,class UnprivilegedUserMetadataL3AgentTestCase(MetadataL3AgentTestCase):,1,0,0.0,979
326e25f932f3d30a163d82af5e398a89edbd01bd,@webob.dec.wsgify(),1,0,0.0,980
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(str(webob.exc.HTTPOk.code), firstline.split())",1,0,0.0,981
326e25f932f3d30a163d82af5e398a89edbd01bd,# Check status code,1,0,0.0,982
326e25f932f3d30a163d82af5e398a89edbd01bd,# Query metadata proxy,1,0,0.0,983
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ip_cidr.partition('/')[0])),1,0,0.0,984
326e25f932f3d30a163d82af5e398a89edbd01bd,machine_fixtures.FakeMachine(,1,0,0.0,985
326e25f932f3d30a163d82af5e398a89edbd01bd,self._create_metadata_fake_server(webob.exc.HTTPOk.code),1,0,0.0,986
326e25f932f3d30a163d82af5e398a89edbd01bd,"response to the ""client"" namespace.",1,0,0.0,987
326e25f932f3d30a163d82af5e398a89edbd01bd,and forwarded the http request to the fake metadata server and the,1,0,0.0,988
326e25f932f3d30a163d82af5e398a89edbd01bd,the X-Forwarded-For and X-Neutron-Router-Id headers to the request,1,0,0.0,989
326e25f932f3d30a163d82af5e398a89edbd01bd,internal subnet.,1,0,0.0,990
326e25f932f3d30a163d82af5e398a89edbd01bd,* A fake metadata server,1,0,0.0,991
326e25f932f3d30a163d82af5e398a89edbd01bd,* A l3-agent metadata service:,1,0,0.0,992
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test access to the l3-agent metadata proxy.",1,0,0.0,993
326e25f932f3d30a163d82af5e398a89edbd01bd,return raw_headers.splitlines()[0],1,0,0.0,994
326e25f932f3d30a163d82af5e398a89edbd01bd,return webob.Response(status=self.status),1,0,0.0,995
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_internal_device_name(device['id']), [lladdr],",1,0,0.0,996
326e25f932f3d30a163d82af5e398a89edbd01bd,class MetadataFakeProxyHandler(object):,1,0,0.0,997
326e25f932f3d30a163d82af5e398a89edbd01bd,"'agent2', self.conf)",1,0,0.0,998
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace._get_ns_name(router_info_2['id']),",1,0,0.0,999
326e25f932f3d30a163d82af5e398a89edbd01bd,mac='22:22:22:22:22:22')),1,0,0.0,1000
326e25f932f3d30a163d82af5e398a89edbd01bd,"l3_test_common.get_ha_interface(ip='169.254.192.2',",1,0,0.0,1001
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.NESTED_NAMESPACE_SEPARATOR, self.agent.host)",1,0,0.0,1002
326e25f932f3d30a163d82af5e398a89edbd01bd,"'qrouter-' + router_info['id'],",1,0,0.0,1003
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace, '_get_ns_name').start()",1,0,0.0,1004
326e25f932f3d30a163d82af5e398a89edbd01bd,br_int_2.add_port(veth2.name),1,0,0.0,1005
326e25f932f3d30a163d82af5e398a89edbd01bd,br_int_1.add_port(veth1.name),1,0,0.0,1006
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(L3HATestFramework, self).setUp()",1,0,0.0,1007
326e25f932f3d30a163d82af5e398a89edbd01bd,L3AgentTestFramework):,1,0,0.0,1008
326e25f932f3d30a163d82af5e398a89edbd01bd,class L3HATestFramework(L3AgentTestFramework):,1,0,0.0,1009
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.external_gateway_removed(port, interface_name)",1,0,0.0,1010
326e25f932f3d30a163d82af5e398a89edbd01bd,"dst_fip, protocol_port,",1,0,0.0,1011
326e25f932f3d30a163d82af5e398a89edbd01bd,"src_machine.namespace, dst_machine.namespace,",1,0,0.0,1012
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.conf.set_override('metadata_proxy_watch_log', False)",1,0,0.0,1013
326e25f932f3d30a163d82af5e398a89edbd01bd,"l3_constants.PROTO_NAME_TCP, dst_machine.namespace)",1,0,0.0,1014
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_fip(router, dst_fip, fixed_address=dst_machine.ip)",1,0,0.0,1015
326e25f932f3d30a163d82af5e398a89edbd01bd,router_ip)).machines,1,0,0.0,1016
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.NESTED_NAMESPACE_SEPARATOR, self.failover_agent.host)",1,0,0.0,1017
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router1.ha_state == 'master'),1,0,0.0,1018
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router2.ha_state == 'backup'),1,0,0.0,1019
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router1.radvd.enabled),1,0,0.0,1020
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(1, len(internal_iface['fixed_ips']))",1,0,0.0,1021
326e25f932f3d30a163d82af5e398a89edbd01bd,"interfaces[0].update({'fixed_ips': fixed_ips, 'subnets': subnets})",1,0,0.0,1022
326e25f932f3d30a163d82af5e398a89edbd01bd,subnets.append(interfaces[0]['subnets'][0]),1,0,0.0,1023
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ips.append(interfaces[0]['fixed_ips'][0]),1,0,0.0,1024
326e25f932f3d30a163d82af5e398a89edbd01bd,"l3_constants.INTERFACE_KEY, []))",1,0,0.0,1025
326e25f932f3d30a163d82af5e398a89edbd01bd,"verify_ip_in_keepalived_config(router, internal_iface)",1,0,0.0,1026
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(2, len(internal_iface['fixed_ips']))",1,0,0.0,1027
326e25f932f3d30a163d82af5e398a89edbd01bd,interface_id=interface_id),1,0,0.0,1028
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_version=6, ipv6_subnet_modes=[slaac_mode],",1,0,0.0,1029
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_internal_interface_by_subnet(router.router, count=1,",1,0,0.0,1030
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(ip_addr, config)",1,0,0.0,1031
326e25f932f3d30a163d82af5e398a89edbd01bd,for ip_addr in ip_cidrs:,1,0,0.0,1032
326e25f932f3d30a163d82af5e398a89edbd01bd,"_check_lla_status(router1, False)",1,0,0.0,1033
326e25f932f3d30a163d82af5e398a89edbd01bd,"utils.wait_until_true(lambda: not router1.radvd.enabled, timeout=10)",1,0,0.0,1034
326e25f932f3d30a163d82af5e398a89edbd01bd,"_check_lla_status(router1, True)",1,0,0.0,1035
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected, exists)",1,0,0.0,1036
326e25f932f3d30a163d82af5e398a89edbd01bd,"device['mac_address'], router.ns_name)",1,0,0.0,1037
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.conf.set_override('metadata_proxy_user', '65534')",1,0,0.0,1038
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_ha=False,",1,0,0.0,1039
326e25f932f3d30a163d82af5e398a89edbd01bd,class UnprivilegedUserGroupMetadataL3AgentTestCase(MetadataL3AgentTestCase):,1,0,0.0,1040
326e25f932f3d30a163d82af5e398a89edbd01bd,# dependent on the agent_type.,1,0,0.0,1041
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': external_gw_port['network_id'],",1,0,0.0,1042
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': fixed_ip['subnet_id']}],",1,0,0.0,1043
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': float_subnet['gateway_ip'],",1,0,0.0,1044
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'cidr': float_subnet['cidr'],",1,0,0.0,1045
326e25f932f3d30a163d82af5e398a89edbd01bd,{'subnets': [,1,0,0.0,1046
326e25f932f3d30a163d82af5e398a89edbd01bd,# Get values from external gateway port,1,0,0.0,1047
326e25f932f3d30a163d82af5e398a89edbd01bd,"l3_constants.FLOATINGIP_AGENT_INTF_KEY, [])",1,0,0.0,1048
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_fip_agent_gw_port_info_to_router(router, external_gw_port)",1,0,0.0,1049
326e25f932f3d30a163d82af5e398a89edbd01bd,# the snat_port info and fip_agent_gw_port_info irrespective of,1,0,0.0,1050
326e25f932f3d30a163d82af5e398a89edbd01bd,"'mac_address': 'fa:16:3e:80:8d:89',",1,0,0.0,1051
326e25f932f3d30a163d82af5e398a89edbd01bd,# FIP has a dependency on external gateway. So we need to create,1,0,0.0,1052
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_snat_port_info_to_router(router, internal_ports)",1,0,0.0,1053
326e25f932f3d30a163d82af5e398a89edbd01bd,**kwargs),1,0,0.0,1054
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_floating_ip=True,",1,0,0.0,1055
326e25f932f3d30a163d82af5e398a89edbd01bd,**kwargs):,1,0,0.0,1056
326e25f932f3d30a163d82af5e398a89edbd01bd,"agent=None,",1,0,0.0,1057
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_snat=False,",1,0,0.0,1058
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_fip_namespace_deleted(ext_gateway_port),1,0,0.0,1059
326e25f932f3d30a163d82af5e398a89edbd01bd,"'device_owner': l3_constants.DEVICE_OWNER_AGENT_GW,",1,0,0.0,1060
326e25f932f3d30a163d82af5e398a89edbd01bd,"'binding:host_id': self.agent.conf.host,",1,0,0.0,1061
326e25f932f3d30a163d82af5e398a89edbd01bd,why we use its gid.,1,0,0.0,1062
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': port['network_id'],",1,0,0.0,1063
326e25f932f3d30a163d82af5e398a89edbd01bd,elif self.agent.conf.agent_mode == 'dvr':,1,0,0.0,1064
326e25f932f3d30a163d82af5e398a89edbd01bd,# should not be present at all:,1,0,0.0,1065
326e25f932f3d30a163d82af5e398a89edbd01bd,"br_int,",1,0,0.0,1066
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_ns_name),1,0,0.0,1067
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_external_device_name,",1,0,0.0,1068
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port,",1,0,0.0,1069
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': snat_ip,",1,0,0.0,1070
326e25f932f3d30a163d82af5e398a89edbd01bd,"'device_owner': l3_constants.DEVICE_OWNER_ROUTER_SNAT,",1,0,0.0,1071
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': snat_subnet['gateway_ip'],",1,0,0.0,1072
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",1,0,0.0,1073
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'cidr': snat_subnet['cidr'],",1,0,0.0,1074
326e25f932f3d30a163d82af5e398a89edbd01bd,# in the list of snat ports,1,0,0.0,1075
326e25f932f3d30a163d82af5e398a89edbd01bd,# Get values from internal port,1,0,0.0,1076
326e25f932f3d30a163d82af5e398a89edbd01bd,],1,0,0.0,1077
326e25f932f3d30a163d82af5e398a89edbd01bd,'device_id': _uuid()},1,0,0.0,1078
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': _uuid(),",1,0,0.0,1079
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': prefixlen}],",1,0,0.0,1080
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': fip_gw_port_ip,",1,0,0.0,1081
326e25f932f3d30a163d82af5e398a89edbd01bd,"router, ip_versions, snat_ns_name)",1,0,0.0,1082
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_onlink_subnet_routes(,1,0,0.0,1083
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router_id),1,0,0.0,1084
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self._namespace_exists(fip_ns)),1,0,0.0,1085
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._validate_fips_for_external_network(router1, fip1_ns)",1,0,0.0,1086
326e25f932f3d30a163d82af5e398a89edbd01bd,"agent_mode, **dvr_router1_kwargs))",1,0,0.0,1087
326e25f932f3d30a163d82af5e398a89edbd01bd,self._helper_create_dvr_router_fips_for_ext_network(,1,0,0.0,1088
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_mac': 'ca:fe:de:ab:cd:ef'},1,0,0.0,1089
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '19.4.4.1',",1,0,0.0,1090
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet_cidr': '19.4.4.0/24',",1,0,0.0,1091
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_snat_namespace_does_not_exist(router),1,0,0.0,1092
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_dvr_floating_ips(router),1,0,0.0,1093
326e25f932f3d30a163d82af5e398a89edbd01bd,"return router, fip_ns",1,0,0.0,1094
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_rfp_fpr_mtu(router, custom_mtu)",1,0,0.0,1095
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info['_floatingips'][0]['floating_network_id']),1,0,0.0,1096
326e25f932f3d30a163d82af5e398a89edbd01bd,"self, agent_mode, **dvr_router_kwargs):",1,0,0.0,1097
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._dvr_router_lifecycle(enable_ha=True, enable_snat=True)",1,0,0.0,1098
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._dvr_router_lifecycle(enable_ha=False, enable_snat=True)",1,0,0.0,1099
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._dvr_router_lifecycle(enable_ha=False, enable_snat=False)",1,0,0.0,1100
326e25f932f3d30a163d82af5e398a89edbd01bd,class TestDvrRouter(L3AgentTestFramework):,1,0,0.0,1101
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.conf.set_override('metadata_proxy_group', '65534')",1,0,0.0,1102
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(UnprivilegedUserGroupMetadataL3AgentTestCase, self).setUp()",1,0,0.0,1103
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet_cidr': '19.4.5.0/24',",1,0,0.0,1104
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '19.4.5.1',",1,0,0.0,1105
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_mac': 'ca:fe:de:ab:cd:fe'},1,0,0.0,1106
326e25f932f3d30a163d82af5e398a89edbd01bd,"agent_mode, **dvr_router2_kwargs))",1,0,0.0,1107
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_dvr_gateway(router),1,0,0.0,1108
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_dvr_external_device(router),1,0,0.0,1109
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_no_ip_addresses_on_interface(router.ha_namespace,",1,0,0.0,1110
326e25f932f3d30a163d82af5e398a89edbd01bd,"# attach interfaces, etc...)",1,0,0.0,1111
326e25f932f3d30a163d82af5e398a89edbd01bd,# With all that set we can now ask the l3_agent to,1,0,0.0,1112
326e25f932f3d30a163d82af5e398a89edbd01bd,'gw_port'],1,0,0.0,1113
326e25f932f3d30a163d82af5e398a89edbd01bd,# router_info['gw_port'],1,0,0.0,1114
326e25f932f3d30a163d82af5e398a89edbd01bd,# gateway_port information before the l3_agent will create it.,1,0,0.0,1115
326e25f932f3d30a163d82af5e398a89edbd01bd,# because the whole L3PluginApi is mocked and we need the port,1,0,0.0,1116
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_ha, enable_snat)",1,0,0.0,1117
326e25f932f3d30a163d82af5e398a89edbd01bd,# only dvr and dvr_snat are applicable,1,0,0.0,1118
326e25f932f3d30a163d82af5e398a89edbd01bd,"# The value of agent_mode can be dvr, dvr_snat, or legacy.",1,0,0.0,1119
326e25f932f3d30a163d82af5e398a89edbd01bd,to  set the  agent_mode.,1,0,0.0,1120
326e25f932f3d30a163d82af5e398a89edbd01bd,:param enable_snat:  the value of enable_snat is used,1,0,0.0,1121
326e25f932f3d30a163d82af5e398a89edbd01bd,dual_stack=False):,1,0,0.0,1122
326e25f932f3d30a163d82af5e398a89edbd01bd,"custom_mtu=2000,",1,0,0.0,1123
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._validate_fips_for_external_network(router2, fip2_ns)",1,0,0.0,1124
326e25f932f3d30a163d82af5e398a89edbd01bd,"net_helpers.increment_ip_cidr(router_ip_cidr),",1,0,0.0,1125
326e25f932f3d30a163d82af5e398a89edbd01bd,"routers_to_keep,",1,0,0.0,1126
326e25f932f3d30a163d82af5e398a89edbd01bd,machine_fixtures.PeerMachines(,1,0,0.0,1127
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(netcat.test_connectivity()),1,0,0.0,1128
326e25f932f3d30a163d82af5e398a89edbd01bd,# Add a new FIP and change the GW IP address,1,0,0.0,1129
326e25f932f3d30a163d82af5e398a89edbd01bd,router.keepalived_manager.get_conf_on_disk()),1,0,0.0,1130
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected,",1,0,0.0,1131
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._router_lifecycle(enable_ha=True, dual_stack=True,",1,0,0.0,1132
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._router_lifecycle(enable_ha=True, ip_version=6,",1,0,0.0,1133
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._router_lifecycle(enable_ha=True, ip_version=6)",1,0,0.0,1134
326e25f932f3d30a163d82af5e398a89edbd01bd,netcat.test_connectivity(),1,0,0.0,1135
326e25f932f3d30a163d82af5e398a89edbd01bd,assert_num_of_conntrack_rules(1),1,0,0.0,1136
326e25f932f3d30a163d82af5e398a89edbd01bd,assert_num_of_conntrack_rules(0),1,0,0.0,1137
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': 24,",1,0,0.0,1138
326e25f932f3d30a163d82af5e398a89edbd01bd,"""--orig-src"", client_address])",1,0,0.0,1139
326e25f932f3d30a163d82af5e398a89edbd01bd,self.addCleanup(netcat.stop_processes),1,0,0.0,1140
326e25f932f3d30a163d82af5e398a89edbd01bd,protocol=net_helpers.NetcatTester.TCP),1,0,0.0,1141
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.ns_name, router.ns_name, client_address, port,",1,0,0.0,1142
326e25f932f3d30a163d82af5e398a89edbd01bd,router.process(self.agent),1,0,0.0,1143
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_fip(router, client_address, fixed_address=server_address)",1,0,0.0,1144
326e25f932f3d30a163d82af5e398a89edbd01bd,clean_fips(router),1,0,0.0,1145
326e25f932f3d30a163d82af5e398a89edbd01bd,''',1,0,0.0,1146
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_fip(router, new_fip)",1,0,0.0,1147
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnet_id': subnet_id}],1,0,0.0,1148
326e25f932f3d30a163d82af5e398a89edbd01bd,go through the router.,1,0,0.0,1149
326e25f932f3d30a163d82af5e398a89edbd01bd,"routers_deleted,",1,0,0.0,1150
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.periodic_sync_routers_task(self.agent.context),1,0,0.0,1151
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=ns_names_to_retrieve):,1,0,0.0,1152
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted_during_resync),1,0,0.0,1153
326e25f932f3d30a163d82af5e398a89edbd01bd,deleted_routers_info.append(ri),1,0,0.0,1154
326e25f932f3d30a163d82af5e398a89edbd01bd,for r in routers_deleted + routers_deleted_during_resync:,1,0,0.0,1155
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_names_to_retrieve.add(ri.ns_name),1,0,0.0,1156
326e25f932f3d30a163d82af5e398a89edbd01bd,for r in routers_to_keep:,1,0,0.0,1157
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted_during_resync):,1,0,0.0,1158
326e25f932f3d30a163d82af5e398a89edbd01bd,"(new_external_device_ip, external_device_name),",1,0,0.0,1159
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cidr': '19.4.4.0/24',",1,0,0.0,1160
326e25f932f3d30a163d82af5e398a89edbd01bd,new_config),1,0,0.0,1161
326e25f932f3d30a163d82af5e398a89edbd01bd,"(old_external_device_ip, external_device_name),",1,0,0.0,1162
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(new_gw, new_config)",1,0,0.0,1163
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertNotIn(old_gw, new_config)",1,0,0.0,1164
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(new_fip, new_config)",1,0,0.0,1165
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(existing_fip, new_config)",1,0,0.0,1166
326e25f932f3d30a163d82af5e398a89edbd01bd,# and that the GW IP address was updated.,1,0,0.0,1167
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': '19.4.4.5'}],1,0,0.0,1168
326e25f932f3d30a163d82af5e398a89edbd01bd,that uses floating IP once it's disassociated.,1,0,0.0,1169
326e25f932f3d30a163d82af5e398a89edbd01bd,'''Test that conntrack immediately drops stateful connection,1,0,0.0,1170
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_conntrack_disassociate_fip(ha=True),1,0,0.0,1171
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.plugin_rpc.update_ha_routers_states.call_args_list),1,0,0.0,1172
326e25f932f3d30a163d82af5e398a89edbd01bd,"registry.subscribe(event_handler,",1,0,0.0,1173
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""",1,0,0.0,1174
326e25f932f3d30a163d82af5e398a89edbd01bd,"{router1.router_id: 'standby', router2.router_id: 'active'}))",1,0,0.0,1175
326e25f932f3d30a163d82af5e398a89edbd01bd,lambda: self._expected_rpc_report(,1,0,0.0,1176
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router2.ha_state == 'master'),1,0,0.0,1177
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router1.ha_state == 'backup'),1,0,0.0,1178
326e25f932f3d30a163d82af5e398a89edbd01bd,self.fail_ha_router(router1),1,0,0.0,1179
326e25f932f3d30a163d82af5e398a89edbd01bd,"for router_id, state in six.iteritems(call):",1,0,0.0,1180
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual((router.router_id, 'backup'), calls[2])",1,0,0.0,1181
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_conntrack_disassociate_fip(ha=False),1,0,0.0,1182
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual((router.router_id, 'master'), calls[1])",1,0,0.0,1183
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual((router.router_id, 'backup'), calls[0])",1,0,0.0,1184
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: enqueue_mock.call_count == 3),1,0,0.0,1185
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router.ha_state == 'backup'),1,0,0.0,1186
326e25f932f3d30a163d82af5e398a89edbd01bd,self.fail_ha_router(router),1,0,0.0,1187
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: router.ha_state == 'master'),1,0,0.0,1188
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._namespace_exists(snat_ns_name),",1,0,0.0,1189
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent, 'enqueue_state_change').start()",1,0,0.0,1190
326e25f932f3d30a163d82af5e398a89edbd01bd,"resources.ROUTER, events.BEFORE_CREATE)",1,0,0.0,1191
326e25f932f3d30a163d82af5e398a89edbd01bd,"resources.ROUTER, events.AFTER_CREATE)",1,0,0.0,1192
326e25f932f3d30a163d82af5e398a89edbd01bd,"resources.ROUTER, events.BEFORE_UPDATE)",1,0,0.0,1193
326e25f932f3d30a163d82af5e398a89edbd01bd,"resources.ROUTER, events.AFTER_UPDATE)",1,0,0.0,1194
326e25f932f3d30a163d82af5e398a89edbd01bd,self._router_lifecycle(enable_ha=True),1,0,0.0,1195
326e25f932f3d30a163d82af5e398a89edbd01bd,v6_ext_gw_with_sub=False),1,0,0.0,1196
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._router_lifecycle(enable_ha=False, dual_stack=True,",1,0,0.0,1197
326e25f932f3d30a163d82af5e398a89edbd01bd,'fe80::f816:3eff:fe2e:1'),1,0,0.0,1198
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.conf.set_override('ipv6_gateway',",1,0,0.0,1199
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._router_lifecycle(enable_ha=False, dual_stack=True)",1,0,0.0,1200
326e25f932f3d30a163d82af5e398a89edbd01bd,event_handler.assert_has_calls(expected_calls),1,0,0.0,1201
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call('router', 'after_delete', self.agent, router=router)]",1,0,0.0,1202
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call('router', 'before_delete', self.agent, router=router),",1,0,0.0,1203
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call('router', 'after_update', self.agent, router=router),",1,0,0.0,1204
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call('router', 'before_update', self.agent, router=router),",1,0,0.0,1205
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call('router', 'after_create', self.agent, router=router),",1,0,0.0,1206
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call('router', 'before_create', self.agent, router=router),",1,0,0.0,1207
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._delete_router(self.agent, router.router_id)",1,0,0.0,1208
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent._process_updated_router(router.router),1,0,0.0,1209
326e25f932f3d30a163d82af5e398a89edbd01bd,"resources.ROUTER, events.AFTER_DELETE)",1,0,0.0,1210
326e25f932f3d30a163d82af5e398a89edbd01bd,"resources.ROUTER, events.BEFORE_DELETE)",1,0,0.0,1211
326e25f932f3d30a163d82af5e398a89edbd01bd,# Mock the plugin RPC API so a known external network id is returned,1,0,0.0,1212
326e25f932f3d30a163d82af5e398a89edbd01bd,external_network_id),1,0,0.0,1213
326e25f932f3d30a163d82af5e398a89edbd01bd,# Plug external_gateway_info in the routers that are not going to be,1,0,0.0,1214
326e25f932f3d30a163d82af5e398a89edbd01bd,# when IPv6 is enabled and no IPv6 gateway is configured.,1,0,0.0,1215
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port, router.get_external_device_name,",1,0,0.0,1216
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(router.keepalived_manager.get_process().active),1,0,0.0,1217
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_router_does_not_exist(router),1,0,0.0,1218
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_interfaces_deleted_from_ovs(),1,0,0.0,1219
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(router.keepalived_manager.get_process().active),1,0,0.0,1220
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_ha_device(router),1,0,0.0,1221
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual('2', ra_state)",1,0,0.0,1222
326e25f932f3d30a163d82af5e398a89edbd01bd,'net.ipv6.conf.%s.accept_ra' % external_device_name]),1,0,0.0,1223
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_metadata_chains(router),1,0,0.0,1224
326e25f932f3d30a163d82af5e398a89edbd01bd,# Note(SridharG): enable the assert_gateway for IPv6 once,1,0,0.0,1225
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_onlink_subnet_routes(router, ip_versions)",1,0,0.0,1226
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_extra_routes(router),1,0,0.0,1227
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_floating_ip_chains(router),1,0,0.0,1228
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_snat_chains(router),1,0,0.0,1229
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self.floating_ips_configured(router)),1,0,0.0,1230
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_gateway(router, v6_ext_gw_with_sub)",1,0,0.0,1231
326e25f932f3d30a163d82af5e398a89edbd01bd,# For more details: https://review.openstack.org/#/c/151284/,1,0,0.0,1232
326e25f932f3d30a163d82af5e398a89edbd01bd,# platform) is updated to 1.2.10 (or above).,1,0,0.0,1233
326e25f932f3d30a163d82af5e398a89edbd01bd,router.ns_name)),1,0,0.0,1234
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=router.ns_name),1,0,0.0,1235
326e25f932f3d30a163d82af5e398a89edbd01bd,for subnet in external_port['subnets']:,1,0,0.0,1236
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._gateway_check(subnet['gateway_ip'], external_device)",1,0,0.0,1237
326e25f932f3d30a163d82af5e398a89edbd01bd,In other words it confirms that return packets surely,1,0,0.0,1238
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ip on the same subnet of the source fixed_ip.,1,0,0.0,1239
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.get_ha_device_name())),1,0,0.0,1240
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1.ns_name,",1,0,0.0,1241
326e25f932f3d30a163d82af5e398a89edbd01bd,self._get_addresses_on_device(,1,0,0.0,1242
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1._get_primary_vip(),",1,0,0.0,1243
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: self.floating_ips_configured(router1)),1,0,0.0,1244
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.manage_router(restarted_agent, router1.router)",1,0,0.0,1245
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.host, self.agent.conf)",1,0,0.0,1246
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_fip(router1, '192.168.111.12')",1,0,0.0,1247
326e25f932f3d30a163d82af5e398a89edbd01bd,"ha_router_dev_name_getter, router.ns_name))",1,0,0.0,1248
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.router[l3_constants.HA_INTERFACE_KEY],",1,0,0.0,1249
326e25f932f3d30a163d82af5e398a89edbd01bd,return router.get_ha_device_name(),1,0,0.0,1250
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected_gateway, existing_gateway)",1,0,0.0,1251
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_version=ip_vers).get('gateway')),1,0,0.0,1252
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device),1,0,0.0,1253
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._gateway_check(self.agent.conf.ipv6_gateway,",1,0,0.0,1254
326e25f932f3d30a163d82af5e398a89edbd01bd,"# keepalived on Ubuntu14.04 (i.e., check-neutron-dsvm-functional",1,0,0.0,1255
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_external_device(router),1,0,0.0,1256
326e25f932f3d30a163d82af5e398a89edbd01bd,"# deleted by the agent when it processes the updates. Otherwise,",1,0,0.0,1257
326e25f932f3d30a163d82af5e398a89edbd01bd,r['id'])),1,0,0.0,1258
326e25f932f3d30a163d82af5e398a89edbd01bd,"routers_deleted=[],",1,0,0.0,1259
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_periodic_sync_routers_task(routers_to_keep,",1,0,0.0,1260
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_to_keep.append(self.generate_router_info(False)),1,0,0.0,1261
326e25f932f3d30a163d82af5e398a89edbd01bd,for i in range(2):,1,0,0.0,1262
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_router_does_not_exist(ri),1,0,0.0,1263
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.router_info),1,0,0.0,1264
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertNotIn(ri.router_id,",1,0,0.0,1265
326e25f932f3d30a163d82af5e398a89edbd01bd,for ri in deleted_routers_info:,1,0,0.0,1266
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self._namespace_exists(namespaces.NS_PREFIX +,1,0,0.0,1267
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_internal_devices(router),1,0,0.0,1268
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(r['id'], self.agent.router_info)",1,0,0.0,1269
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent._process_router_update(),1,0,0.0,1270
326e25f932f3d30a163d82af5e398a89edbd01bd,while not self.agent._queue._queue.empty():,1,0,0.0,1271
326e25f932f3d30a163d82af5e398a89edbd01bd,# make sure all events are processed,1,0,0.0,1272
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.router_deleted(self.agent.context, r['id'])",1,0,0.0,1273
326e25f932f3d30a163d82af5e398a89edbd01bd,for r in routers_deleted_during_resync:,1,0,0.0,1274
326e25f932f3d30a163d82af5e398a89edbd01bd,"# while sync updates are still in the queue, higher priority",1,0,0.0,1275
326e25f932f3d30a163d82af5e398a89edbd01bd,# _process_router_if_compatible in the agent fails,1,0,0.0,1276
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted_during_resync=[]),1,0,0.0,1277
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted.append(self.generate_router_info(False)),1,0,0.0,1278
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted_during_resync.append(,1,0,0.0,1279
326e25f932f3d30a163d82af5e398a89edbd01bd,self.generate_router_info(False)),1,0,0.0,1280
326e25f932f3d30a163d82af5e398a89edbd01bd,"lambda: self._metadata_proxy_exists(self.agent.conf, router))",1,0,0.0,1281
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self._namespace_exists(router.ns_name)),1,0,0.0,1282
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(device_exists),1,0,0.0,1283
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_internal_device_name,",1,0,0.0,1284
326e25f932f3d30a163d82af5e398a89edbd01bd,"device,",1,0,0.0,1285
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.device_exists_with_ips_and_mac,",1,0,0.0,1286
326e25f932f3d30a163d82af5e398a89edbd01bd,# configuring everything. We verify this by waiting until the last,1,0,0.0,1287
326e25f932f3d30a163d82af5e398a89edbd01bd,"# not when it ends. Thus, we have to wait until keepalived finishes",1,0,0.0,1288
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Keepalived notifies of a state transition when it starts,",1,0,0.0,1289
326e25f932f3d30a163d82af5e398a89edbd01bd,interface_name),1,0,0.0,1290
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_no_ip_addresses_on_interface(router.ns_name,",1,0,0.0,1291
326e25f932f3d30a163d82af5e398a89edbd01bd,ipv6_subnet_modes=subnet_modes),1,0,0.0,1292
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_version=6,",1,0,0.0,1293
326e25f932f3d30a163d82af5e398a89edbd01bd,"count=2,",1,0,0.0,1294
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_internal_interface_by_subnet(router.router,",1,0,0.0,1295
326e25f932f3d30a163d82af5e398a89edbd01bd,routers_deleted_during_resync=routers_deleted_during_resync),1,0,0.0,1296
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_periodic_sync_routers_task(,1,0,0.0,1297
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(,1,0,0.0,1298
326e25f932f3d30a163d82af5e398a89edbd01bd,unplug.assert_has_calls(,0,0,0.0,1299
326e25f932f3d30a163d82af5e398a89edbd01bd,"""namespace %s was found but agent is in dvr mode not dvr_snat""",1,0,0.0,1300
326e25f932f3d30a163d82af5e398a89edbd01bd,'OS_ROOTWRAP_DAEMON_CMD')),1,0,0.0,1301
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(ns.namespace, 'ns')",0,0,0.0,1302
326e25f932f3d30a163d82af5e398a89edbd01bd,returncode=1),0,0,0.0,1303
326e25f932f3d30a163d82af5e398a89edbd01bd,"""File exists""),",0,0,0.0,1304
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_exists.assert_not_called(),0,0,0.0,1305
326e25f932f3d30a163d82af5e398a89edbd01bd,log_fail_as_error=False)]),0,0,0.0,1306
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(attr.namespace, ns2.namespace)",0,0,0.0,1307
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(attr.namespace, ns.namespace)",0,0,0.0,1308
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(ip.netns.exists(attr.namespace)),0,0,0.0,1309
326e25f932f3d30a163d82af5e398a89edbd01bd,root_helper_daemon=os.environ.get(,1,0,0.0,1310
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertRaises(linux_utils.ProcessExecutionError,",0,0,0.0,1311
326e25f932f3d30a163d82af5e398a89edbd01bd,"root_helper=os.environ.get('OS_ROOTWRAP_CMD', SUDO_CMD))",1,0,0.0,1312
326e25f932f3d30a163d82af5e398a89edbd01bd,config.register_root_helper(cfg.CONF),1,0,0.0,1313
326e25f932f3d30a163d82af5e398a89edbd01bd,self.setup_rootwrap(),0,0,0.0,1314
326e25f932f3d30a163d82af5e398a89edbd01bd,'OS_ROOTWRAP_DAEMON_CMD')),0,0,0.0,1315
326e25f932f3d30a163d82af5e398a89edbd01bd,root_helper_daemon=os.environ.get(,0,0,0.0,1316
326e25f932f3d30a163d82af5e398a89edbd01bd,"root_helper=os.environ.get('OS_ROOTWRAP_CMD', SUDO_CMD))",0,0,0.0,1317
326e25f932f3d30a163d82af5e398a89edbd01bd,agent_config.register_root_helper(cfg.CONF),0,0,0.0,1318
326e25f932f3d30a163d82af5e398a89edbd01bd,"root_helper="" "".join([functional_base.SUDO_CMD] * 2))",1,0,0.0,1319
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_dev.assert_not_called(),0,0,0.0,1320
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip.ensure_namespace, 'ns')",0,0,0.0,1321
326e25f932f3d30a163d82af5e398a89edbd01bd,% (str(snat_ns_name)),1,0,0.0,1322
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(listnetns.called),0,0,0.0,1323
326e25f932f3d30a163d82af5e398a89edbd01bd,netns_cmd.exists('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb')),0,0,0.0,1324
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(,0,0,0.0,1325
326e25f932f3d30a163d82af5e398a89edbd01bd,remove.assert_called_once_with('ns'),0,0,0.0,1326
326e25f932f3d30a163d82af5e398a89edbd01bd,self.netns_cmd.delete('ns'),0,0,0.0,1327
326e25f932f3d30a163d82af5e398a89edbd01bd,"@mock.patch.object(priv_lib, 'remove_netns')",0,0,0.0,1328
326e25f932f3d30a163d82af5e398a89edbd01bd,ns_exists.assert_called_once_with('ns'),0,0,0.0,1329
326e25f932f3d30a163d82af5e398a89edbd01bd,create.assert_called_once_with('ns'),0,0,0.0,1330
326e25f932f3d30a163d82af5e398a89edbd01bd,"@mock.patch.object(priv_lib, 'create_netns')",0,0,0.0,1331
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(1, priv_listnetns.call_count)",0,0,0.0,1332
326e25f932f3d30a163d82af5e398a89edbd01bd,log_fail_as_error=True)]),1,0,0.0,1333
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(priv_listnetns.called),0,0,0.0,1334
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(1, listnetns.call_count)",0,0,0.0,1335
326e25f932f3d30a163d82af5e398a89edbd01bd,"@mock.patch.object(priv_lib, 'list_netns')",0,0,0.0,1336
326e25f932f3d30a163d82af5e398a89edbd01bd,"@mock.patch.object(pyroute2.netns, 'listnetns')",0,0,0.0,1337
326e25f932f3d30a163d82af5e398a89edbd01bd,ip.netns.delete(namespace),1,0,0.0,1338
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_lib.delete_network_namespace(namespace),0,0,0.0,1339
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(ns.namespace, 'ns')",1,0,0.0,1340
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(self.execute.called),1,0,0.0,1341
326e25f932f3d30a163d82af5e398a89edbd01bd,functional_base.SUDO_CMD),1,0,0.0,1342
326e25f932f3d30a163d82af5e398a89edbd01bd,"root_helper="" "".join([base.SUDO_CMD] * 2))",0,0,0.0,1343
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests import base,0,0,0.0,1344
326e25f932f3d30a163d82af5e398a89edbd01bd,util.kill_listen_processes(namespace),0,0,0.0,1345
326e25f932f3d30a163d82af5e398a89edbd01bd,force=False),0,0,0.0,1346
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock_kill_listen.assert_called_once_with(namespace,",0,0,0.0,1347
326e25f932f3d30a163d82af5e398a89edbd01bd,util.PidsInNamespaceException):,0,0,0.0,1348
326e25f932f3d30a163d82af5e398a89edbd01bd,util.PidsInNamespaceException),0,0,0.0,1349
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=1):,0,0,0.0,1350
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call(namespace, force=True)])",0,0,0.0,1351
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call(namespace, force=False),",0,0,0.0,1352
326e25f932f3d30a163d82af5e398a89edbd01bd,mock_kill_listen.assert_has_calls(,0,0,0.0,1353
326e25f932f3d30a163d82af5e398a89edbd01bd,None],0,0,0.0,1354
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_wrap.assert_has_calls(expected),1,0,0.0,1355
326e25f932f3d30a163d82af5e398a89edbd01bd,"util.PidsInNamespaceException,",0,0,0.0,1356
326e25f932f3d30a163d82af5e398a89edbd01bd,"kills_expected, True)",0,0,0.0,1357
326e25f932f3d30a163d82af5e398a89edbd01bd,"kills_expected, False)",0,0,0.0,1358
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test__kill_listen_processes_helper(pids, parents, children,",0,0,0.0,1359
326e25f932f3d30a163d82af5e398a89edbd01bd,"('2', signal.SIGTERM)]",0,0,0.0,1360
326e25f932f3d30a163d82af5e398a89edbd01bd,"('5', signal.SIGTERM),",0,0,0.0,1361
326e25f932f3d30a163d82af5e398a89edbd01bd,"mocks['kill_process'].assert_has_calls(calls, any_order=True)",0,0,0.0,1362
326e25f932f3d30a163d82af5e398a89edbd01bd,"util._kill_listen_processes(mock.ANY, force=force)",0,0,0.0,1363
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(wait_until_true_mock.called),0,0,0.0,1364
326e25f932f3d30a163d82af5e398a89edbd01bd,"util.destroy_namespace(conf, ns, force)",0,0,0.0,1365
326e25f932f3d30a163d82af5e398a89edbd01bd,expected.extend([,0,0,0.0,1366
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call().netns.exists(ns),",0,0,0.0,1367
326e25f932f3d30a163d82af5e398a89edbd01bd,expected.append(mock.call().garbage_collect_namespace()),1,0,0.0,1368
326e25f932f3d30a163d82af5e398a89edbd01bd,devices[1:]]),1,0,0.0,1369
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call(conf, d) for d in",1,0,0.0,1370
326e25f932f3d30a163d82af5e398a89edbd01bd,unplug.assert_has_calls(,1,0,0.0,1371
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(kill_dhcp.called),1,0,0.0,1372
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.call().get_devices(exclude_loopback=True)]),1,0,0.0,1373
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.call().netns.exists(ns),",1,0,0.0,1374
326e25f932f3d30a163d82af5e398a89edbd01bd,expected.extend([,1,0,0.0,1375
326e25f932f3d30a163d82af5e398a89edbd01bd,"util.destroy_namespace(conf, ns, force)",1,0,0.0,1376
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_wrap.assert_has_calls(expected),0,0,0.0,1377
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.call().garbage_collect_namespace()),0,0,0.0,1378
326e25f932f3d30a163d82af5e398a89edbd01bd,expected.append(,0,0,0.0,1379
326e25f932f3d30a163d82af5e398a89edbd01bd,devices[1:]]),0,0,0.0,1380
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call(conf, d) for d in",0,0,0.0,1381
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(kill_dhcp.called),0,0,0.0,1382
326e25f932f3d30a163d82af5e398a89edbd01bd,exclude_loopback=True)]),0,0,0.0,1383
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.call().get_devices(,0,0,0.0,1384
326e25f932f3d30a163d82af5e398a89edbd01bd,listnetns):,0,0,0.0,1385
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(,0,0,0.0,1386
326e25f932f3d30a163d82af5e398a89edbd01bd,netns_cmd.exists('bbbbbbbb-1111-2222-3333-bbbbbbbbbbbb')),0,0,0.0,1387
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_islink.assert_called_once_with('/sys/class/net/lo'),1,0,0.0,1388
326e25f932f3d30a163d82af5e398a89edbd01bd,"""Cannot open network namespace"")",1,0,0.0,1389
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(fake_str.split.called),1,0,0.0,1390
326e25f932f3d30a163d82af5e398a89edbd01bd,"run_as_root=True, log_fail_as_error=True)",1,0,0.0,1391
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-maxdepth', '1', '-type', 'l', '-printf', '%f '],",1,0,0.0,1392
326e25f932f3d30a163d82af5e398a89edbd01bd,"['ip', 'netns', 'exec', 'foo', 'find', '/sys/class/net',",1,0,0.0,1393
326e25f932f3d30a163d82af5e398a89edbd01bd,mocked_execute.assert_called_once_with(,1,0,0.0,1394
326e25f932f3d30a163d82af5e398a89edbd01bd,@mock.patch('neutron.agent.common.utils.execute'),1,0,0.0,1395
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual([], retval)",1,0,0.0,1396
326e25f932f3d30a163d82af5e398a89edbd01bd,"@mock.patch('os.listdir', return_value=['lo'])",1,0,0.0,1397
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertNotIn(name, interfaces)",0,0,0.0,1398
326e25f932f3d30a163d82af5e398a89edbd01bd,@mock.patch('os.path.islink'),1,0,0.0,1399
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual([], ip_lib.IPWrapper(namespace='foo').get_devices())",0,0,0.0,1400
326e25f932f3d30a163d82af5e398a89edbd01bd,netns_name='foo'),0,0,0.0,1401
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(0, len(interfaces))",0,0,0.0,1402
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(device.name, interfaces)",0,0,0.0,1403
326e25f932f3d30a163d82af5e398a89edbd01bd,"exclude_loopback=False, exclude_fb_tun_devices=False)",0,0,0.0,1404
326e25f932f3d30a163d82af5e398a89edbd01bd,interfaces.remove(device.name),0,0,0.0,1405
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual('br01', device.name)",0,0,0.0,1406
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=False):,1,0,0.0,1407
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=True):,1,0,0.0,1408
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertRaises(RuntimeError,",1,0,0.0,1409
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_lib.IPWrapper(namespace='foo').get_devices),1,0,0.0,1410
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_address, self._get_addresses_on_device(namespace, interface))",1,0,0.0,1411
326e25f932f3d30a163d82af5e398a89edbd01bd,"ttl='ttl0',",0,0,0.0,1412
326e25f932f3d30a163d82af5e398a89edbd01bd,ip.add_dummy('dummy_device'),0,0,0.0,1413
326e25f932f3d30a163d82af5e398a89edbd01bd,raise,0,0,0.0,1414
326e25f932f3d30a163d82af5e398a89edbd01bd,raise InterfaceAlreadyExists(device=ifname),0,0,0.0,1415
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(InterfaceAlreadyExists, self).__init__(message)",0,0,0.0,1416
326e25f932f3d30a163d82af5e398a89edbd01bd,# raised exception.,0,0,0.0,1417
326e25f932f3d30a163d82af5e398a89edbd01bd,"# function called by privsep daemon, it will then try to reraise it",0,0,0.0,1418
326e25f932f3d30a163d82af5e398a89edbd01bd,# because of how privsep daemon works. If exception is raised in,0,0,0.0,1419
326e25f932f3d30a163d82af5e398a89edbd01bd,class InterfaceAlreadyExists(RuntimeError):,0,0,0.0,1420
326e25f932f3d30a163d82af5e398a89edbd01bd,self.kind),0,0,0.0,1421
326e25f932f3d30a163d82af5e398a89edbd01bd,"privileged.create_interface(self.name, self._parent.namespace,",0,0,0.0,1422
326e25f932f3d30a163d82af5e398a89edbd01bd,return self._parent.kind,0,0,0.0,1423
326e25f932f3d30a163d82af5e398a89edbd01bd,@property,0,0,0.0,1424
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(devices),1,0,0.0,1425
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(device_name, somedevice.name)",1,0,0.0,1426
326e25f932f3d30a163d82af5e398a89edbd01bd,"exclude_loopback=True, exclude_fb_tun_devices=True)",1,0,0.0,1427
326e25f932f3d30a163d82af5e398a89edbd01bd,"@mock.patch.object(priv_lib, 'get_devices')",0,0,0.0,1428
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(name, interfaces_to_check)",0,0,0.0,1429
326e25f932f3d30a163d82af5e398a89edbd01bd,"'12345678-1234-5678-abcd-1234567890ab (id: 1)',",1,0,0.0,1430
326e25f932f3d30a163d82af5e398a89edbd01bd,self.netns_cmd.delete('ns'),1,0,0.0,1431
326e25f932f3d30a163d82af5e398a89edbd01bd,netns_cmd.exists('bbbbbbbb-1111-2222-3333-bbbbbbbbbbbb')),1,0,0.0,1432
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(,1,0,0.0,1433
326e25f932f3d30a163d82af5e398a89edbd01bd,log_fail_as_error=True),1,0,0.0,1434
326e25f932f3d30a163d82af5e398a89edbd01bd,"run_as_root=True,",1,0,0.0,1435
326e25f932f3d30a163d82af5e398a89edbd01bd,"execute.assert_called_once_with(['ip', '-o', 'netns', 'list'],",1,0,0.0,1436
326e25f932f3d30a163d82af5e398a89edbd01bd,netns_cmd.exists('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb')),1,0,0.0,1437
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(,1,0,0.0,1438
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('delete', 'ns'), use_root_namespace=True)",1,0,0.0,1439
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('add', 'ns'), use_root_namespace=True)",1,0,0.0,1440
326e25f932f3d30a163d82af5e398a89edbd01bd,"priv_ip_lib.create_interface(interface, namespace, 'dummy')",0,0,0.0,1441
326e25f932f3d30a163d82af5e398a89edbd01bd,log_fail_as_error=True)]),1,0,0.0,1442
326e25f932f3d30a163d82af5e398a89edbd01bd,"run_as_root=True, namespace=None,",1,0,0.0,1443
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call([], 'netns', ('add', 'ns'),",1,0,0.0,1444
326e25f932f3d30a163d82af5e398a89edbd01bd,self.execute.assert_has_calls(,1,0,0.0,1445
326e25f932f3d30a163d82af5e398a89edbd01bd,run_as_root=False),1,0,0.0,1446
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with([], 'netns', ('list',),",1,0,0.0,1447
326e25f932f3d30a163d82af5e398a89edbd01bd,'cccccccc-cccc-cccc-cccc-cccccccccccc (id: 2)'],1,0,0.0,1448
326e25f932f3d30a163d82af5e398a89edbd01bd,"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb (id: 0)',",1,0,0.0,1449
326e25f932f3d30a163d82af5e398a89edbd01bd,"run_as_root=False,",1,0,0.0,1450
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(1, listnetns.call_count)",0,0,0.0,1451
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_wrap.assert_has_calls(,1,0,0.0,1452
326e25f932f3d30a163d82af5e398a89edbd01bd,[mock.call.get_namespaces()]),1,0,0.0,1453
326e25f932f3d30a163d82af5e398a89edbd01bd,[ip_lib.LOOPBACK_DEVNAME]),0,0,0.0,1454
326e25f932f3d30a163d82af5e398a89edbd01bd,priv_ip_lib.create_netns(namespace),0,0,0.0,1455
326e25f932f3d30a163d82af5e398a89edbd01bd,priv_ip_lib.remove_netns(namespace),0,0,0.0,1456
326e25f932f3d30a163d82af5e398a89edbd01bd,class GetDevicesTestCase(base.BaseTestCase):,0,0,0.0,1457
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests import base,0,0,0.0,1458
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import ip_lib,0,0,0.0,1459
326e25f932f3d30a163d82af5e398a89edbd01bd,from oslo_utils import uuidutils,0,0,0.0,1460
326e25f932f3d30a163d82af5e398a89edbd01bd,#    under the License.,0,0,0.0,1461
326e25f932f3d30a163d82af5e398a89edbd01bd,#    License for the specific language governing permissions and limitations,0,0,0.0,1462
326e25f932f3d30a163d82af5e398a89edbd01bd,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,0,0.0,1463
326e25f932f3d30a163d82af5e398a89edbd01bd,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,0,0.0,1464
326e25f932f3d30a163d82af5e398a89edbd01bd,"#    Unless required by applicable law or agreed to in writing, software",0,0,0.0,1465
326e25f932f3d30a163d82af5e398a89edbd01bd,#         http://www.apache.org/licenses/LICENSE-2.0,0,0,0.0,1466
326e25f932f3d30a163d82af5e398a89edbd01bd,#    a copy of the License at,0,0,0.0,1467
326e25f932f3d30a163d82af5e398a89edbd01bd,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,0,0.0,1468
326e25f932f3d30a163d82af5e398a89edbd01bd,#,0,0,0.0,1469
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Copyright 2018 Red Hat, Inc.",0,0,0.0,1470
326e25f932f3d30a163d82af5e398a89edbd01bd,"calls.append(mock.call(pid, sig, run_as_root=True))",0,0,0.0,1471
326e25f932f3d30a163d82af5e398a89edbd01bd,"for pid, sig in kills_expected:",0,0,0.0,1472
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=pids):,0,0,0.0,1473
326e25f932f3d30a163d82af5e398a89edbd01bd,binding is done later after floatingip association.,1,0,0.0,1474
326e25f932f3d30a163d82af5e398a89edbd01bd,"internal_dev_name, namespace=snat_ns)",1,0,0.0,1475
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_device_name, namespace=snat_ns)",1,0,0.0,1476
326e25f932f3d30a163d82af5e398a89edbd01bd,"self, router, internal_dev_name=None):",1,0,0.0,1477
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self._namespace_exists(namespace)),1,0,0.0,1478
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_agent_gw_port[0]),1,0,0.0,1479
326e25f932f3d30a163d82af5e398a89edbd01bd,# host binding.,1,0,0.0,1480
326e25f932f3d30a163d82af5e398a89edbd01bd,"# that the server did not create the port, since there was no valid",1,0,0.0,1481
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Now let us not pass the FLOATINGIP_AGENT_INTF_KEY, to emulate",1,0,0.0,1482
326e25f932f3d30a163d82af5e398a89edbd01bd,port changes while migration or when the private port host,1,0,0.0,1483
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.router_id, router.fip_ns.get_int_device_name,",1,0,0.0,1484
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test to validate the floatingip migration or latebinding.",1,0,0.0,1485
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_snat_namespace_does_not_exist(router1),1,0,0.0,1486
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(self._namespace_exists(fip_ns)),1,0,0.0,1487
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self._namespace_exists(router1.ns_name)),1,0,0.0,1488
326e25f932f3d30a163d82af5e398a89edbd01bd,# This is also like there is no current binding.,1,0,0.0,1489
326e25f932f3d30a163d82af5e398a89edbd01bd,# In this case the floatingip binding is different and so it,1,0,0.0,1490
326e25f932f3d30a163d82af5e398a89edbd01bd,binding will not be there.,1,0,0.0,1491
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""Test to validate the floatingip agent mismatch.",1,0,0.0,1492
326e25f932f3d30a163d82af5e398a89edbd01bd,"return qg_device_created_successfully, sg_device_created_successfully",1,0,0.0,1493
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.router[l3_constants.SNAT_ROUTER_INTF_KEY]),1,0,0.0,1494
326e25f932f3d30a163d82af5e398a89edbd01bd,csnat_internal_port[0]['id']),1,0,0.0,1495
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_snat_namespace_exists(router1),1,0,0.0,1496
326e25f932f3d30a163d82af5e398a89edbd01bd,'get_snat_ns_name').start(),1,0,0.0,1497
326e25f932f3d30a163d82af5e398a89edbd01bd,'_get_ns_name').start(),1,0,0.0,1498
326e25f932f3d30a163d82af5e398a89edbd01bd,"return r_info, mocked_r_ns_name, mocked_r_snat_ns_name",1,0,0.0,1499
326e25f932f3d30a163d82af5e398a89edbd01bd,r_info['id']),1,0,0.0,1500
326e25f932f3d30a163d82af5e398a89edbd01bd,agent=agent),1,0,0.0,1501
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_snat=True,",1,0,0.0,1502
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(sg_device),1,0,0.0,1503
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_updated, internal_dev_name=internal_device_name)",1,0,0.0,1504
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_snat_namespace_exists(router_updated),1,0,0.0,1505
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent._process_updated_router(router1.router),1,0,0.0,1506
326e25f932f3d30a163d82af5e398a89edbd01bd,# removed.,1,0,0.0,1507
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Now let us not pass the SNAT_ROUTER_INTF_KEY, to emulate",1,0,0.0,1508
326e25f932f3d30a163d82af5e398a89edbd01bd,"# Now let us not pass INTERFACE_KEY, to emulate",1,0,0.0,1509
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(router1.snat_ports, snat_internal_port)",1,0,0.0,1510
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(sg_device),1,0,0.0,1511
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(qg_device),1,0,0.0,1512
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1, internal_dev_name=internal_device_name)",1,0,0.0,1513
326e25f932f3d30a163d82af5e398a89edbd01bd,router.fip_ns.get_name()),1,0,0.0,1514
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected_mtu, dev_mtu)",1,0,0.0,1515
326e25f932f3d30a163d82af5e398a89edbd01bd,"mocked_r_ns_name,",1,0,0.0,1516
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertIsNone(router._delete_gateway_device_if_exists(,1,0,0.0,1517
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(floating_agent_gw_port),1,0,0.0,1518
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router[l3_constants.FLOATINGIP_AGENT_INTF_KEY]),1,0,0.0,1519
326e25f932f3d30a163d82af5e398a89edbd01bd,# from the router_info,1,0,0.0,1520
326e25f932f3d30a163d82af5e398a89edbd01bd,# We need to fetch the floatingip agent gateway port info,1,0,0.0,1521
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(floating_ips),1,0,0.0,1522
326e25f932f3d30a163d82af5e398a89edbd01bd,# Check that the fg-<port-id> (floatingip_agent_gateway),1,0,0.0,1523
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(self._namespace_exists(namespace)),1,0,0.0,1524
326e25f932f3d30a163d82af5e398a89edbd01bd,"device, ""192.168.0.1"", 0))",1,0,0.0,1525
326e25f932f3d30a163d82af5e398a89edbd01bd,# Assert that no exception is thrown for this case,1,0,0.0,1526
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.router_id, router.fip_ns.get_rtr_ext_device_name,",1,0,0.0,1527
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device.route.get_gateway().get('gateway')),1,0,0.0,1528
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=namespace),1,0,0.0,1529
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode == 'dvr',1,0,0.0,1530
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_removal_of_already_deleted_gateway_device(router),1,0,0.0,1531
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_dvr_snat_gateway(router),1,0,0.0,1532
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.conf.agent_mode == 'dvr_snat',1,0,0.0,1533
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertTrue(False, "" agent not configured for dvr or dvr_snat"")",1,0,0.0,1534
326e25f932f3d30a163d82af5e398a89edbd01bd,),1,0,0.0,1535
326e25f932f3d30a163d82af5e398a89edbd01bd,"fip_ns.get_ext_device_name(external_gw_port['id']),",1,0,0.0,1536
326e25f932f3d30a163d82af5e398a89edbd01bd,"[self._port_first_ip_cidr(external_gw_port)],",1,0,0.0,1537
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_gw_port['mac_address'],",1,0,0.0,1538
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(fg_port_created_successfully),1,0,0.0,1539
326e25f932f3d30a163d82af5e398a89edbd01bd,neighbors.show(ip_version=4).split()[0]),1,0,0.0,1540
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected_neighbor,",1,0,0.0,1541
326e25f932f3d30a163d82af5e398a89edbd01bd,router_info['_interfaces'][0]['id']),1,0,0.0,1542
326e25f932f3d30a163d82af5e398a89edbd01bd,'device_owner': DEVICE_OWNER_COMPUTE,1,0,0.0,1543
326e25f932f3d30a163d82af5e398a89edbd01bd,"'mac_address': 'fa:3e:aa:bb:cc:dd',",1,0,0.0,1544
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'ip_address': expected_neighbor}],",1,0,0.0,1545
326e25f932f3d30a163d82af5e398a89edbd01bd,# cache is properly populated.,1,0,0.0,1546
326e25f932f3d30a163d82af5e398a89edbd01bd,"# existing ports on the uplinked subnet, the ARP",1,0,0.0,1547
326e25f932f3d30a163d82af5e398a89edbd01bd,return info['priority'],1,0,0.0,1548
326e25f932f3d30a163d82af5e398a89edbd01bd,for line in lines:,1,0,0.0,1549
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertNotEqual(fip_rule_prio_1, fip_rule_prio_2)",1,0,0.0,1550
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.manage_router(restarted_agent, router_info)",1,0,0.0,1551
326e25f932f3d30a163d82af5e398a89edbd01bd,"router_ns, floating_ips[0]['fixed_ip_address'])",1,0,0.0,1552
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_dvr_snat_gateway(router1),1,0,0.0,1553
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(ip_lib.device_exists(,1,0,0.0,1554
326e25f932f3d30a163d82af5e398a89edbd01bd,# Check rfp-<router-id> is created correctly,1,0,0.0,1555
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(fpr_router_device_created_successfully),1,0,0.0,1556
326e25f932f3d30a163d82af5e398a89edbd01bd,"(r_info,",1,0,0.0,1557
326e25f932f3d30a163d82af5e398a89edbd01bd,ex_gw_port['id']),1,0,0.0,1558
326e25f932f3d30a163d82af5e398a89edbd01bd,kill_process=mock.DEFAULT),0,0,0.0,1559
326e25f932f3d30a163d82af5e398a89edbd01bd,return proc_count,0,0,0.0,1560
326e25f932f3d30a163d82af5e398a89edbd01bd,1279/keepalived,0,0,0.0,1561
326e25f932f3d30a163d82af5e398a89edbd01bd,raw        0      0 0.0.0.0:112             0.0.0.0:*               7\,0,0,0.0,1562
326e25f932f3d30a163d82af5e398a89edbd01bd,1347/python,0,0,0.0,1563
326e25f932f3d30a163d82af5e398a89edbd01bd,tcp        0      0 0.0.0.0:9697            0.0.0.0:*               LISTEN\,0,0,0.0,1564
326e25f932f3d30a163d82af5e398a89edbd01bd,Proto Recv-Q Send-Q Local Address           Foreign Address         State\,0,0,0.0,1565
326e25f932f3d30a163d82af5e398a89edbd01bd,Active Internet connections (only servers),0,0,0.0,1566
326e25f932f3d30a163d82af5e398a89edbd01bd,import testtools,0,0,0.0,1567
326e25f932f3d30a163d82af5e398a89edbd01bd,import signal,0,0,0.0,1568
326e25f932f3d30a163d82af5e398a89edbd01bd,os.environ.get('PATH')}),0,0,0.0,1569
326e25f932f3d30a163d82af5e398a89edbd01bd,'--noparent_listen']],0,0,0.0,1570
326e25f932f3d30a163d82af5e398a89edbd01bd,addl_env={'PATH':,0,0,0.0,1571
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip.netns.execute(command,",0,0,0.0,1572
326e25f932f3d30a163d82af5e398a89edbd01bd,# oslo_config,0,0,0.0,1573
326e25f932f3d30a163d82af5e398a89edbd01bd,# interpreter runs under the same virtual environment.,0,0,0.0,1574
326e25f932f3d30a163d82af5e398a89edbd01bd,proc_count += (1 + NUM_SUBPROCESSES),0,0,0.0,1575
326e25f932f3d30a163d82af5e398a89edbd01bd,# it,0,0,0.0,1576
326e25f932f3d30a163d82af5e398a89edbd01bd,# The total amount of processes per command is,0,0,0.0,1577
326e25f932f3d30a163d82af5e398a89edbd01bd,for command in commands:,0,0,0.0,1578
326e25f932f3d30a163d82af5e398a89edbd01bd,raw6       0      0 :::58                   :::*                    7\,0,0,0.0,1579
326e25f932f3d30a163d82af5e398a89edbd01bd,1349/radvd,0,0,0.0,1580
326e25f932f3d30a163d82af5e398a89edbd01bd,Active UNIX domain sockets (only servers),0,0,0.0,1581
326e25f932f3d30a163d82af5e398a89edbd01bd,Proto RefCnt Flags       Type       State         I-Node   PID/Program name\,0,0,0.0,1582
326e25f932f3d30a163d82af5e398a89edbd01bd,"get_cmdline_from_pid=mock.DEFAULT,",0,0,0.0,1583
326e25f932f3d30a163d82af5e398a89edbd01bd,"find_child_pids=mock.DEFAULT,",0,0,0.0,1584
326e25f932f3d30a163d82af5e398a89edbd01bd,"find_fork_top_parent=mock.DEFAULT,",0,0,0.0,1585
326e25f932f3d30a163d82af5e398a89edbd01bd,"return _get_element(parents, x)",0,0,0.0,1586
326e25f932f3d30a163d82af5e398a89edbd01bd,"return _get_element(children, x)",0,0,0.0,1587
326e25f932f3d30a163d82af5e398a89edbd01bd,"return dct.get(x, [])",0,0,0.0,1588
326e25f932f3d30a163d82af5e398a89edbd01bd,"kills_expected, force):",0,0,0.0,1589
326e25f932f3d30a163d82af5e398a89edbd01bd,NETSTAT_NO_NAMESPACE),0,0,0.0,1590
326e25f932f3d30a163d82af5e398a89edbd01bd,NETSTAT_NO_LISTEN_PROCS),0,0,0.0,1591
326e25f932f3d30a163d82af5e398a89edbd01bd,NETSTAT_NETNS_OUTPUT),0,0,0.0,1592
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_find_listen_pids_namespace_helper(expected,",0,0,0.0,1593
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected, observed)",0,0,0.0,1594
326e25f932f3d30a163d82af5e398a89edbd01bd,netstat_output=None):,0,0,0.0,1595
326e25f932f3d30a163d82af5e398a89edbd01bd,""""""")",0,0,0.0,1596
326e25f932f3d30a163d82af5e398a89edbd01bd,/tmp/rootwrap-VKSm8a/rootwrap.sock,0,0,0.0,1597
326e25f932f3d30a163d82af5e398a89edbd01bd,unix  2      [ ACC ]     STREAM     LISTENING     82039530 1353/python\,0,0,0.0,1598
326e25f932f3d30a163d82af5e398a89edbd01bd,Path,0,0,0.0,1599
326e25f932f3d30a163d82af5e398a89edbd01bd,for netns in namespaces:,0,0,0.0,1600
326e25f932f3d30a163d82af5e398a89edbd01bd,"'--ignore_sigterm',",0,0,0.0,1601
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_port['id']),1,0,0.0,1602
326e25f932f3d30a163d82af5e398a89edbd01bd,self._setup_dvr_ha_bridges(),1,0,0.0,1603
326e25f932f3d30a163d82af5e398a89edbd01bd,# killed during cleanup,0,0,0.0,1604
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.functional.cmd import process_spawn,0,0,0.0,1605
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.context, ext_net_id)",1,0,0.0,1606
326e25f932f3d30a163d82af5e398a89edbd01bd,self.agent.fipnamespace_delete_on_ext_net(,1,0,0.0,1607
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_no_ip_addresses_in_dvr_ha_snat_namespace(router1),1,0,0.0,1608
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_ip_addresses_in_dvr_ha_snat_namespace(router2),1,0,0.0,1609
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_no_ip_addresses_in_dvr_ha_snat_namespace(router2),1,0,0.0,1610
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_ip_addresses_in_dvr_ha_snat_namespace(router1),1,0,0.0,1611
326e25f932f3d30a163d82af5e398a89edbd01bd,self._setup_dvr_ha_agents(),1,0,0.0,1612
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-p', n_const.PROTO_NAME_UDP,",0,0,0.0,1613
326e25f932f3d30a163d82af5e398a89edbd01bd,ex_gw_port_name),1,0,0.0,1614
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_port_name),1,0,0.0,1615
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_no_ip_addresses_on_interface(namespace,",1,0,0.0,1616
326e25f932f3d30a163d82af5e398a89edbd01bd,snat_port_cidr),1,0,0.0,1617
326e25f932f3d30a163d82af5e398a89edbd01bd,"snat_port_name,",1,0,0.0,1618
326e25f932f3d30a163d82af5e398a89edbd01bd,ex_gw_port_cidr),1,0,0.0,1619
326e25f932f3d30a163d82af5e398a89edbd01bd,"ex_gw_port_name,",1,0,0.0,1620
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_ip_address_on_interface(namespace,",1,0,0.0,1621
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIsNot(procs_launched, 0)",0,0,0.0,1622
326e25f932f3d30a163d82af5e398a89edbd01bd,common_utils.wait_until_true(,0,0,0.0,1623
326e25f932f3d30a163d82af5e398a89edbd01bd,"lambda: self._get_num_spawned_procs() == procs_launched,",0,0,0.0,1624
326e25f932f3d30a163d82af5e398a89edbd01bd,"timeout=15,",0,0,0.0,1625
326e25f932f3d30a163d82af5e398a89edbd01bd,"'--noparent_listen'],",0,0,0.0,1626
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-f', process_spawn.UNIX_FAMILY,",0,0,0.0,1627
326e25f932f3d30a163d82af5e398a89edbd01bd,"['python', process_spawn.__file__,",0,0,0.0,1628
326e25f932f3d30a163d82af5e398a89edbd01bd,"'--parent_listen'],",0,0,0.0,1629
326e25f932f3d30a163d82af5e398a89edbd01bd,"'--noignore_sigterm',",0,0,0.0,1630
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-p', n_const.PROTO_NAME_TCP,",0,0,0.0,1631
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-f', n_const.IPv4,",0,0,0.0,1632
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-n', NUM_SUBPROCESSES,",0,0,0.0,1633
326e25f932f3d30a163d82af5e398a89edbd01bd,to all remaining processes after the SIGTERM attempt,0,0,0.0,1634
326e25f932f3d30a163d82af5e398a89edbd01bd,The last set of processes will ignore SIGTERM. This will allow us,0,0,0.0,1635
326e25f932f3d30a163d82af5e398a89edbd01bd,"gets killed, it will kill all spawned children",0,0,0.0,1636
326e25f932f3d30a163d82af5e398a89edbd01bd,- 6 processes listening on tcp ports (parent + 5 children),0,0,0.0,1637
326e25f932f3d30a163d82af5e398a89edbd01bd,This function will spawn processes inside the given namespaces:,0,0,0.0,1638
326e25f932f3d30a163d82af5e398a89edbd01bd,Launch processes in the specified namespaces.,0,0,0.0,1639
326e25f932f3d30a163d82af5e398a89edbd01bd,"""""""",0,0,0.0,1640
326e25f932f3d30a163d82af5e398a89edbd01bd,@staticmethod,0,0,0.0,1641
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(procs_after, 0)",0,0,0.0,1642
326e25f932f3d30a163d82af5e398a89edbd01bd,class L3AgentTestCase(L3AgentTestFramework):,1,0,0.0,1643
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port['mac_address'],",0,0,0.0,1644
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertIn(,1,0,0.0,1645
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port['mac_address'],",1,0,0.0,1646
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertIn(,0,0,0.0,1647
326e25f932f3d30a163d82af5e398a89edbd01bd,"[], self._get_addresses_on_device(namespace, interface))",0,0,0.0,1648
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertEqual(,0,0,0.0,1649
326e25f932f3d30a163d82af5e398a89edbd01bd,return [address['cidr'] for address in,0,0,0.0,1650
326e25f932f3d30a163d82af5e398a89edbd01bd,@classmethod,0,0,0.0,1651
326e25f932f3d30a163d82af5e398a89edbd01bd,interface_name),0,0,0.0,1652
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_no_ip_addresses_on_interface(router.ns_name,",0,0,0.0,1653
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: self._floating_ips_configured(router1)),1,0,0.0,1654
326e25f932f3d30a163d82af5e398a89edbd01bd,"'%s/32' % fip['floating_ip_address'],",1,0,0.0,1655
326e25f932f3d30a163d82af5e398a89edbd01bd,self._get_addresses_on_device(,0,0,0.0,1656
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.get_external_device_name(external_port['id']),",1,0,0.0,1657
326e25f932f3d30a163d82af5e398a89edbd01bd,return len(floating_ips) and all(ip_lib.device_exists_with_ip_mac(,1,0,0.0,1658
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self._floating_ips_configured(router)),1,0,0.0,1659
326e25f932f3d30a163d82af5e398a89edbd01bd,'fixed_ip_address': fixed_address},1,0,0.0,1660
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(self._namespace_exists(fip_ns)),0,0,0.0,1661
326e25f932f3d30a163d82af5e398a89edbd01bd,self._assert_dvr_snat_gateway(router1),0,0,0.0,1662
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._create_router(restarted_agent, router1.router)",0,0,0.0,1663
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.host, self.agent.conf)",0,0,0.0,1664
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1._get_primary_vip(),",0,0,0.0,1665
326e25f932f3d30a163d82af5e398a89edbd01bd,"router1.ns_name,",0,0,0.0,1666
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.add_gateway(gateway, metric, table)",1,0,0.0,1667
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_cidr or '240.0.0.1/24',",1,0,0.0,1668
326e25f932f3d30a163d82af5e398a89edbd01bd,dual_stack=dual_stack),0,0,0.0,1669
326e25f932f3d30a163d82af5e398a89edbd01bd,"extra_routes=extra_routes,",0,0,0.0,1670
326e25f932f3d30a163d82af5e398a89edbd01bd,dual_stack=False):,0,0,0.0,1671
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_fip=True, enable_snat=True,",0,0,0.0,1672
326e25f932f3d30a163d82af5e398a89edbd01bd,netaddr.IPNetwork(attr.ip_cidr).cidr)}],1,0,0.0,1673
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(ip_lib.device_exists_with_ip_mac(*attr)),1,0,0.0,1674
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_lib.device_exists_with_ip_mac(*attr)),1,0,0.0,1675
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.driver.init_l3(attr.name, [attr.ip_cidr],",1,0,0.0,1676
326e25f932f3d30a163d82af5e398a89edbd01bd,netaddr.IPNetwork(attr.ip_cidrs[0]).cidr)}],0,0,0.0,1677
326e25f932f3d30a163d82af5e398a89edbd01bd,router1.get_ha_device_name(router1.ha_port['id']))),0,0,0.0,1678
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(ip_lib.device_exists_with_ips_and_mac(*attr)),0,0,0.0,1679
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_lib.device_exists_with_ips_and_mac(*attr)),0,0,0.0,1680
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.driver.init_l3(attr.name, attr.ip_cidrs,",0,0,0.0,1681
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_cidrs or ['240.0.0.1/24'],",0,0,0.0,1682
326e25f932f3d30a163d82af5e398a89edbd01bd,'name ip_cidrs mac_address namespace'),0,0,0.0,1683
326e25f932f3d30a163d82af5e398a89edbd01bd,for ip_cidr in ip_cidrs:,0,0,0.0,1684
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual([], device.addr.list())",1,0,0.0,1685
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_no_ip_addresses_on_interface(router, interface_name)",1,0,0.0,1686
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._add_fip(router1, '192.168.111.12', self.agent.conf.host)",0,0,0.0,1687
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(lambda: self.floating_ips_configured(router1)),0,0,0.0,1688
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self.floating_ips_configured(router)),0,0,0.0,1689
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': None},",1,0,0.0,1690
326e25f932f3d30a163d82af5e398a89edbd01bd,for test_case in test_cases:,1,0,0.0,1691
326e25f932f3d30a163d82af5e398a89edbd01bd,'metric': 100}}],1,0,0.0,1692
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '192.168.99.1',",1,0,0.0,1693
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE6,",1,0,0.0,1694
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '192.168.99.1'}},",1,0,0.0,1695
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE5,",1,0,0.0,1696
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '10.35.19.254'}},",1,0,0.0,1697
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE4,",1,0,0.0,1698
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE3,",1,0,0.0,1699
326e25f932f3d30a163d82af5e398a89edbd01bd,"'%s/32' % fip['floating_ip_address'],",0,0,0.0,1700
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE2,",1,0,0.0,1701
326e25f932f3d30a163d82af5e398a89edbd01bd,"'metric': 100}},",1,0,0.0,1702
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '10.35.19.254',",1,0,0.0,1703
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', 'default', 'via', gateway,",1,0,0.0,1704
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.delete_gateway(gateway, table)",1,0,0.0,1705
326e25f932f3d30a163d82af5e398a89edbd01bd,"'dev', self.parent.name, 'table', table))",1,0,0.0,1706
326e25f932f3d30a163d82af5e398a89edbd01bd,"'metric', metric,",1,0,0.0,1707
326e25f932f3d30a163d82af5e398a89edbd01bd,"('replace', 'default', 'via', gateway,",1,0,0.0,1708
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.add_route(cidr, ip, table)",1,0,0.0,1709
326e25f932f3d30a163d82af5e398a89edbd01bd,"('replace', cidr, 'via', ip,",1,0,0.0,1710
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.delete_route(cidr, ip, table)",1,0,0.0,1711
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', cidr, 'via', ip,",1,0,0.0,1712
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.agent.get_external_device_name(external_port['id']),",0,0,0.0,1713
326e25f932f3d30a163d82af5e398a89edbd01bd,return len(floating_ips) and all(ip_lib.device_exists_with_ip_mac(,0,0,0.0,1714
326e25f932f3d30a163d82af5e398a89edbd01bd,'host': host},0,0,0.0,1715
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ip_address': fixed_address,",0,0,0.0,1716
326e25f932f3d30a163d82af5e398a89edbd01bd,host=None):,0,0,0.0,1717
326e25f932f3d30a163d82af5e398a89edbd01bd,"device.addr.delete.assert_called_once_with(4, addr + '/32')",1,0,0.0,1718
326e25f932f3d30a163d82af5e398a89edbd01bd,"device.addr.add.assert_called_once_with(4, addr + '/32', addr)",1,0,0.0,1719
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cc:dd:ee:ff:ab:cd', 'dev', 'tap0'))",1,0,0.0,1720
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([4], ('del', '192.168.45.100', 'lladdr',",1,0,0.0,1721
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.neigh_cmd.delete(4, '192.168.45.100', 'cc:dd:ee:ff:ab:cd')",1,0,0.0,1722
326e25f932f3d30a163d82af5e398a89edbd01bd,"'dev', 'tap0'))",1,0,0.0,1723
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cc:dd:ee:ff:ab:cd', 'nud', 'permanent',",1,0,0.0,1724
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([4], ('replace', '192.168.45.100', 'lladdr',",1,0,0.0,1725
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.neigh_cmd.add(4, '192.168.45.100', 'cc:dd:ee:ff:ab:cd')",1,0,0.0,1726
326e25f932f3d30a163d82af5e398a89edbd01bd,"_execute.assert_called_once_with('o', 'link', ('show', 'eth0'),",1,0,0.0,1727
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('delete', 'ns'), force_root_namespace=True)",1,0,0.0,1728
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('add', 'ns'), force_root_namespace=True)",1,0,0.0,1729
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace):,0,0,0.0,1730
326e25f932f3d30a163d82af5e398a89edbd01bd,return ip_lib.device_exists_with_ips_and_mac(,0,0,0.0,1731
326e25f932f3d30a163d82af5e398a89edbd01bd,"name_getter(expected_device['id']), ip_cidrs,",0,0,0.0,1732
326e25f932f3d30a163d82af5e398a89edbd01bd,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",0,0,0.0,1733
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_version=ip_version, dual_stack=dual_stack)",0,0,0.0,1734
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnets': subnets},0,0,0.0,1735
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': gateway_ip}),0,0,0.0,1736
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cidr': subnet_cidr,",0,0,0.0,1737
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips.append({'ip_address': ip_address,",0,0,0.0,1738
326e25f932f3d30a163d82af5e398a89edbd01bd,"extra_routes=False, dual_stack=False):",0,0,0.0,1739
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnets': subnets}),0,0,0.0,1740
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': fixed_ips,",0,0,0.0,1741
326e25f932f3d30a163d82af5e398a89edbd01bd,'ipv6_address_mode': addr_mode}),0,0,0.0,1742
326e25f932f3d30a163d82af5e398a89edbd01bd,elif loop_version == 6 and (ip_version == 6 or dual_stack):,0,0,0.0,1743
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ipv6_ra_mode': ra_mode,",0,0,0.0,1744
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': gw_pool % i,",0,0,0.0,1745
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cidr': cidr_pool % i,",0,0,0.0,1746
326e25f932f3d30a163d82af5e398a89edbd01bd,"subnets.append({'id': subnet_id,",0,0,0.0,1747
326e25f932f3d30a163d82af5e398a89edbd01bd,'prefixlen': prefixlen}),0,0,0.0,1748
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet_id': subnet_id,",0,0,0.0,1749
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips.append({'ip_address': ip_pool % i,",0,0,0.0,1750
326e25f932f3d30a163d82af5e398a89edbd01bd,continue,0,0,0.0,1751
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': 18,",0,0,0.0,1752
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet_id': subnet_id}],",0,0,0.0,1753
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnets': [{'cidr': '169.254.192.0/18',",0,0,0.0,1754
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '169.254.255.254',",0,0,0.0,1755
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '99.0.1.9',",0,0,0.0,1756
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': _uuid(),",0,0,0.0,1757
326e25f932f3d30a163d82af5e398a89edbd01bd,"'mac_address': 'ca:fe:de:ad:be:ef',",0,0,0.0,1758
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(ri.ns_name.endswith(ns_id)),0,0,0.0,1759
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': '19.4.4.1'}]},0,0,0.0,1760
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnets': [{'id': subnet_id,",0,0,0.0,1761
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '152.10.0.13',",0,0,0.0,1762
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': subnet_id_2,",0,0,0.0,1763
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': subnet_id_2}],",0,0,0.0,1764
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '152.10.0.1',",0,0,0.0,1765
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'subnets': [{'cidr': '152.10.0.0/16',",0,0,0.0,1766
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': 16}],",0,0,0.0,1767
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '152.2.0.13',",0,0,0.0,1768
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': subnet_id_1,",0,0,0.0,1769
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': subnet_id_1}],",0,0,0.0,1770
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '152.2.0.1',",0,0,0.0,1771
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': subnet_id}],",0,0,0.0,1772
326e25f932f3d30a163d82af5e398a89edbd01bd,else:,0,0,0.0,1773
326e25f932f3d30a163d82af5e398a89edbd01bd,"for loop_version in (4, 6):",0,0,0.0,1774
326e25f932f3d30a163d82af5e398a89edbd01bd,@staticmethod,0,0,0.0,1775
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': 24,",0,0,0.0,1776
326e25f932f3d30a163d82af5e398a89edbd01bd,return router.get_ha_device_name(),0,0,0.0,1777
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected_gateway, existing_gateway)",0,0,0.0,1778
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_version=ip_vers).get('gateway')),0,0,0.0,1779
326e25f932f3d30a163d82af5e398a89edbd01bd,for subnet in external_port['subnets']:,0,0,0.0,1780
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.device_exists_with_ips_and_mac,",0,0,0.0,1781
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': '19.4.4.5'}],0,0,0.0,1782
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cidr': '19.4.4.0/24',",0,0,0.0,1783
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnet_id': subnet_id}],0,0,0.0,1784
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._router_lifecycle(enable_ha=False, dual_stack=True)",0,0,0.0,1785
326e25f932f3d30a163d82af5e398a89edbd01bd,for p in interfaces for subnet in p['subnets']]),0,0,0.0,1786
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port['mac_address'],",0,0,0.0,1787
326e25f932f3d30a163d82af5e398a89edbd01bd,"['%s/32' % fip['floating_ip_address']],",0,0,0.0,1788
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_external_device_name(external_port['id']),",0,0,0.0,1789
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_lib.device_exists_with_ips_and_mac(,0,0,0.0,1790
326e25f932f3d30a163d82af5e398a89edbd01bd,return len(floating_ips) and all(,0,0,0.0,1791
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self.device_exists_with_ips_and_mac(,0,0,0.0,1792
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ip['prefixlen']),0,0,0.0,1793
326e25f932f3d30a163d82af5e398a89edbd01bd,"return common_utils.ip_to_cidr(fixed_ip['ip_address'],",0,0,0.0,1794
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.router[l3_constants.HA_INTERFACE_KEY],",0,0,0.0,1795
326e25f932f3d30a163d82af5e398a89edbd01bd,"ha_router_dev_name_getter, router.ns_name))",0,0,0.0,1796
326e25f932f3d30a163d82af5e398a89edbd01bd,{'subnets': [,0,0,0.0,1797
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': float_subnet['gateway_ip'],",0,0,0.0,1798
326e25f932f3d30a163d82af5e398a89edbd01bd,[netaddr.IPNetwork(subnet['cidr']).version == ip_version,0,0,0.0,1799
326e25f932f3d30a163d82af5e398a89edbd01bd,"addr_mode=None, dual_stack=False):",0,0,0.0,1800
326e25f932f3d30a163d82af5e398a89edbd01bd,"[self._port_first_ip_cidr(external_gw_port)],",0,0,0.0,1801
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': snat_ip,",0,0,0.0,1802
326e25f932f3d30a163d82af5e398a89edbd01bd,"'device_owner': 'network:router_centralized_snat',",0,0,0.0,1803
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': port['network_id'],",0,0,0.0,1804
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': snat_subnet['gateway_ip'],",0,0,0.0,1805
326e25f932f3d30a163d82af5e398a89edbd01bd,'device_id': _uuid()},0,0,0.0,1806
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': _uuid(),",0,0,0.0,1807
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': prefixlen}],",0,0,0.0,1808
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': fip_gw_port_ip,",0,0,0.0,1809
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",0,0,0.0,1810
326e25f932f3d30a163d82af5e398a89edbd01bd,"'binding:host_id': self.agent.conf.host,",0,0,0.0,1811
326e25f932f3d30a163d82af5e398a89edbd01bd,"'mac_address': 'fa:16:3e:80:8d:89',",0,0,0.0,1812
326e25f932f3d30a163d82af5e398a89edbd01bd,"'device_owner': 'network:floatingip_agent_gateway',",0,0,0.0,1813
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': external_gw_port['network_id'],",0,0,0.0,1814
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': fixed_ip['subnet_id']}],",0,0,0.0,1815
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([],",1,0,0.0,1816
326e25f932f3d30a163d82af5e398a89edbd01bd,broadcast='172.16.77.255')],1,0,0.0,1817
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespace, interface, ip_address):",1,0,0.0,1818
326e25f932f3d30a163d82af5e398a89edbd01bd,self.addr_cmd.delete('192.168.45.100/24'),0,0,0.0,1819
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:dfcc:aaff:feb9:76ce/64'),",0,0,0.0,1820
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:4508:b885:5fb:740b/64'),",0,0,0.0,1821
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:fd91:272:581e:3a32/64'),",0,0,0.0,1822
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:5595:dd51:6ba2:e788/64'),",0,0,0.0,1823
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=False, cidr='172.16.77.240/24'),",0,0,0.0,1824
326e25f932f3d30a163d82af5e398a89edbd01bd,"dict(scope='global',",0,0,0.0,1825
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([6], ('flush', 'tap0'))",0,0,0.0,1826
326e25f932f3d30a163d82af5e398a89edbd01bd,self.addr_cmd.flush(6),0,0,0.0,1827
326e25f932f3d30a163d82af5e398a89edbd01bd,"'scope', 'link',",0,0,0.0,1828
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=False, cidr='fe80::dfcc:aaff:feb9:76ce/64')]",0,0,0.0,1829
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.addr_cmd.add('192.168.45.100/24', scope='link')",0,0,0.0,1830
326e25f932f3d30a163d82af5e398a89edbd01bd,"'brd', '192.168.45.255'))",0,0,0.0,1831
326e25f932f3d30a163d82af5e398a89edbd01bd,"'dev', 'tap0',",0,0,0.0,1832
326e25f932f3d30a163d82af5e398a89edbd01bd,"'scope', 'global',",0,0,0.0,1833
326e25f932f3d30a163d82af5e398a89edbd01bd,"('add', '192.168.45.100/24',",0,0,0.0,1834
326e25f932f3d30a163d82af5e398a89edbd01bd,self.addr_cmd.add('192.168.45.100/24'),0,0,0.0,1835
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_call(['o'], ('show', 'eth0'))",0,0,0.0,1836
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_delete_rule('2001:db8::1', 3, 200)",0,0,0.0,1837
326e25f932f3d30a163d82af5e398a89edbd01bd,"dict(scope='link',",0,0,0.0,1838
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=False, cidr='172.16.77.240/24')]",0,0,0.0,1839
326e25f932f3d30a163d82af5e398a89edbd01bd,broadcast='::')],1,0,0.0,1840
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '192.168.99.1',",0,0,0.0,1841
326e25f932f3d30a163d82af5e398a89edbd01bd,"'table', self.table))",0,0,0.0,1842
326e25f932f3d30a163d82af5e398a89edbd01bd,"'dev', self.parent.name,",0,0,0.0,1843
326e25f932f3d30a163d82af5e398a89edbd01bd,"'metric', self.metric,",0,0,0.0,1844
326e25f932f3d30a163d82af5e398a89edbd01bd,"'via', self.gateway,",0,0,0.0,1845
326e25f932f3d30a163d82af5e398a89edbd01bd,"('replace', 'default',",0,0,0.0,1846
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([self.ip_version],",0,0,0.0,1847
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.add_gateway(self.gateway, self.metric, self.table)",0,0,0.0,1848
326e25f932f3d30a163d82af5e398a89edbd01bd,'metric': 100}}],0,0,0.0,1849
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE6,",0,0,0.0,1850
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '10.35.19.254',",0,0,0.0,1851
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '192.168.99.1'}},",0,0,0.0,1852
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE5,",0,0,0.0,1853
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': {'gateway': '10.35.19.254'}},",0,0,0.0,1854
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE4,",0,0,0.0,1855
326e25f932f3d30a163d82af5e398a89edbd01bd,"'expected': None},",0,0,0.0,1856
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE3,",0,0,0.0,1857
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': GATEWAY_SAMPLE2,",0,0,0.0,1858
326e25f932f3d30a163d82af5e398a89edbd01bd,"'metric': 100}},",0,0,0.0,1859
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_delete_rule('192.168.45.100', 2, 100)",0,0,0.0,1860
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule_exists('2001:db8::1', 3, 201, RULE_V6_SAMPLE)",0,0,0.0,1861
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule('2001:db8::1', 3, 200)",0,0,0.0,1862
326e25f932f3d30a163d82af5e398a89edbd01bd,default via 2001:470:9:1224:4508:b885:5fb:740b metric 1024,0,0,0.0,1863
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._as_root([], ('link'))",0,0,0.0,1864
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip.assert_has_calls([mock.call._run(['o'], 'foo', ('link'))])",0,0,0.0,1865
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._run(['o'], ('link'))",0,0,0.0,1866
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._run([], ('link', 'show'))",0,0,0.0,1867
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with([], 'link',",0,0,0.0,1868
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with([], 'tuntap',",0,0,0.0,1869
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with([], 'netns', ('list',))",0,0,0.0,1870
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_lib.SubProcessBase._execute(['o'], 'link', ('list',),",0,0,0.0,1871
326e25f932f3d30a163d82af5e398a89edbd01bd,default via fe80::dfcc:aaff:feb9:76ce,0,0,0.0,1872
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule_exists('192.168.45.100', 2, 101, RULE_V4_SAMPLE)",0,0,0.0,1873
326e25f932f3d30a163d82af5e398a89edbd01bd,""""""")",0,0,0.0,1874
326e25f932f3d30a163d82af5e398a89edbd01bd,2001:db8::/64 proto kernel scope link src 2001:470:9:1224:dfcc:aaff:feb9:76ce,0,0,0.0,1875
326e25f932f3d30a163d82af5e398a89edbd01bd,default via 2001:470:9:1224:4508:b885:5fb:740b metric 100,0,0,0.0,1876
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-c', mock.sentinel.count,",1,0,0.0,1877
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.sentinel.count),1,0,0.0,1878
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-w', mock.ANY,",0,0,0.0,1879
326e25f932f3d30a163d82af5e398a89edbd01bd,"'-c', ARPING_COUNT,",0,0,0.0,1880
326e25f932f3d30a163d82af5e398a89edbd01bd,ARPING_COUNT),0,0,0.0,1881
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call._as_root([],",0,0,0.0,1882
326e25f932f3d30a163d82af5e398a89edbd01bd,"'foo',",0,0,0.0,1883
326e25f932f3d30a163d82af5e398a89edbd01bd,"('link'),",0,0,0.0,1884
326e25f932f3d30a163d82af5e398a89edbd01bd,use_root_namespace=False)]),0,0,0.0,1885
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule('192.168.45.100', 2, 100)",0,0,0.0,1886
326e25f932f3d30a163d82af5e398a89edbd01bd,"'priority', priority))",0,0,0.0,1887
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', 'table', table,",0,0,0.0,1888
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([ip_version],",0,0,0.0,1889
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.rule_cmd.delete(ip, table, priority)",0,0,0.0,1890
326e25f932f3d30a163d82af5e398a89edbd01bd,"'table', table, 'priority', priority))",0,0,0.0,1891
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([ip_version], ('add', 'from', ip,",0,0,0.0,1892
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([ip_version], (['show']))",0,0,0.0,1893
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.rule_cmd.add(ip, table, priority)",0,0,0.0,1894
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(TestIpRuleCommand, self).setUp()",0,0,0.0,1895
326e25f932f3d30a163d82af5e398a89edbd01bd,class TestIpRuleCommand(TestIPCmdBase):,0,0,0.0,1896
326e25f932f3d30a163d82af5e398a89edbd01bd,use_root_namespace=use_root_namespace)]),0,0,0.0,1897
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call._as_root('o',",0,0,0.0,1898
326e25f932f3d30a163d82af5e398a89edbd01bd,self.ip.assert_has_calls(,0,0,0.0,1899
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._as_root('o', 'link', use_root_namespace=True)",0,0,0.0,1900
326e25f932f3d30a163d82af5e398a89edbd01bd,use_root_namespace=True)]),0,0,0.0,1901
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._as_root([], ('link'), use_root_namespace=True)",0,0,0.0,1902
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.delete_gateway(self.gateway, table=self.table)",0,0,0.0,1903
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', 'default',",0,0,0.0,1904
326e25f932f3d30a163d82af5e398a89edbd01bd,for test_case in self.test_cases:,0,0,0.0,1905
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_delete_rule('2001:db8::1', 3, 200)",1,0,0.0,1906
326e25f932f3d30a163d82af5e398a89edbd01bd,force_root_namespace)]),1,0,0.0,1907
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call._as_root('o', 'foo', ('link', ), False)])",1,0,0.0,1908
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._as_root('link', options='o')",1,0,0.0,1909
326e25f932f3d30a163d82af5e398a89edbd01bd,"[mock.call._as_root([], 'foo', ('link', ), False)])",1,0,0.0,1910
326e25f932f3d30a163d82af5e398a89edbd01bd,self.ip_cmd._as_root('link'),1,0,0.0,1911
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip.assert_has_calls([mock.call._run('o', 'foo', ('link', ))])",1,0,0.0,1912
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._run('link', options='o')",1,0,0.0,1913
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.ip_cmd._run('link', 'show')",1,0,0.0,1914
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_delete_rule('192.168.45.100', 2, 100)",1,0,0.0,1915
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_has_calls([call_1, call_2, call_3, call_4])",1,0,0.0,1916
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule_exists('2001:db8::1', 3, 201, RULE_V6_SAMPLE)",1,0,0.0,1917
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule('2001:db8::1', 3, 200)",1,0,0.0,1918
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule_exists('192.168.45.100', 2, 101, RULE_V4_SAMPLE)",1,0,0.0,1919
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_add_rule('192.168.45.100', 2, 100)",1,0,0.0,1920
326e25f932f3d30a163d82af5e398a89edbd01bd,"'priority', priority),",1,0,0.0,1921
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', 'table', table,",1,0,0.0,1922
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_lib.IpRule().delete(ip, table, priority)",1,0,0.0,1923
326e25f932f3d30a163d82af5e398a89edbd01bd,"['show'],",1,0,0.0,1924
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_call('o', ('show', 'eth0'))",1,0,0.0,1925
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.addr_cmd.add(4, '192.168.45.100/24', '192.168.45.255')",1,0,0.0,1926
326e25f932f3d30a163d82af5e398a89edbd01bd,"('add', '192.168.45.100/24', 'brd', '192.168.45.255',",1,0,0.0,1927
326e25f932f3d30a163d82af5e398a89edbd01bd,"'scope', 'global', 'dev', 'tap0'))",1,0,0.0,1928
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=False, cidr='fe80::dfcc:aaff:feb9:76ce/64',",1,0,0.0,1929
326e25f932f3d30a163d82af5e398a89edbd01bd,"dict(ip_version=6, scope='link',",1,0,0.0,1930
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:dfcc:aaff:feb9:76ce/64',",1,0,0.0,1931
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:4508:b885:5fb:740b/64',",1,0,0.0,1932
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:fd91:272:581e:3a32/64',",1,0,0.0,1933
326e25f932f3d30a163d82af5e398a89edbd01bd,"broadcast='::'),",1,0,0.0,1934
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=True, cidr='2001:470:9:1224:5595:dd51:6ba2:e788/64',",1,0,0.0,1935
326e25f932f3d30a163d82af5e398a89edbd01bd,"dict(ip_version=6, scope='global',",1,0,0.0,1936
326e25f932f3d30a163d82af5e398a89edbd01bd,"broadcast='172.16.77.255'),",1,0,0.0,1937
326e25f932f3d30a163d82af5e398a89edbd01bd,"dynamic=False, cidr='172.16.77.240/24',",1,0,0.0,1938
326e25f932f3d30a163d82af5e398a89edbd01bd,"dict(ip_version=4, scope='global',",1,0,0.0,1939
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('flush', 'tap0'))",1,0,0.0,1940
326e25f932f3d30a163d82af5e398a89edbd01bd,self.addr_cmd.flush(),1,0,0.0,1941
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.addr_cmd.delete(4, '192.168.45.100/24')",1,0,0.0,1942
326e25f932f3d30a163d82af5e398a89edbd01bd,"'scope', 'link', 'dev', 'tap0'))",1,0,0.0,1943
326e25f932f3d30a163d82af5e398a89edbd01bd,scope='link'),1,0,0.0,1944
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.addr_cmd.add(4, '192.168.45.100/24', '192.168.45.255',",1,0,0.0,1945
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with([ip_version], 'rule',",1,0,0.0,1946
326e25f932f3d30a163d82af5e398a89edbd01bd,"'table', table, 'priority', priority),",1,0,0.0,1947
326e25f932f3d30a163d82af5e398a89edbd01bd,# NOTE(brian-haley) Currently we do not have any IPv6-specific usecase,0,0,0.0,1948
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'gateway': '2001:470:9:1224:4508:b885:5fb:740b',",0,0,0.0,1949
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('delete', 'ns'), use_root_namespace=True)",0,0,0.0,1950
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([], ('add', 'ns'), use_root_namespace=True)",0,0,0.0,1951
326e25f932f3d30a163d82af5e398a89edbd01bd,'metric': 1024}}],0,0,0.0,1952
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': IPv6_GATEWAY_SAMPLE5,",0,0,0.0,1953
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'gateway': 'fe80::dfcc:aaff:feb9:76ce'}},",0,0,0.0,1954
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': IPv6_GATEWAY_SAMPLE4,",0,0,0.0,1955
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': IPv6_GATEWAY_SAMPLE3,",0,0,0.0,1956
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'sample': IPv6_GATEWAY_SAMPLE2,",0,0,0.0,1957
326e25f932f3d30a163d82af5e398a89edbd01bd,'expected':,0,0,0.0,1958
326e25f932f3d30a163d82af5e398a89edbd01bd,"('add', 'from', ip,",1,0,0.0,1959
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(TestIPv6IpRouteCommand, self).setUp()",0,0,0.0,1960
326e25f932f3d30a163d82af5e398a89edbd01bd,class TestIPv6IpRouteCommand(TestIpRouteCommand):,0,0,0.0,1961
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', self.cidr,",0,0,0.0,1962
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.delete_route(self.cidr, self.ip, self.table)",0,0,0.0,1963
326e25f932f3d30a163d82af5e398a89edbd01bd,"'via', self.ip,",0,0,0.0,1964
326e25f932f3d30a163d82af5e398a89edbd01bd,"('replace', self.cidr,",0,0,0.0,1965
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.route_cmd.add_route(self.cidr, self.ip, self.table)",0,0,0.0,1966
326e25f932f3d30a163d82af5e398a89edbd01bd,return,0,0,0.0,1967
326e25f932f3d30a163d82af5e398a89edbd01bd,"_execute.assert_called_once_with(['o'], 'link', ('show', 'eth0'),",0,0,0.0,1968
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.neigh_cmd.add('192.168.45.100', 'cc:dd:ee:ff:ab:cd')",0,0,0.0,1969
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._assert_sudo([4],",0,0,0.0,1970
326e25f932f3d30a163d82af5e398a89edbd01bd,"('replace', '192.168.45.100',",0,0,0.0,1971
326e25f932f3d30a163d82af5e398a89edbd01bd,"# This is for call().splitlines().__iter__(), which can't be mocked",1,0,0.0,1972
326e25f932f3d30a163d82af5e398a89edbd01bd,log_fail_as_error=True),1,0,0.0,1973
326e25f932f3d30a163d82af5e398a89edbd01bd,"run_as_root=True, namespace=None,",1,0,0.0,1974
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_lib.IpRule().add(ip, table, priority)",1,0,0.0,1975
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(TestIpRule, self).setUp()",1,0,0.0,1976
326e25f932f3d30a163d82af5e398a89edbd01bd,class TestIpRule(base.BaseTestCase):,1,0,0.0,1977
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with('', 'link',",1,0,0.0,1978
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with('', 'tuntap',",1,0,0.0,1979
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.execute.assert_called_once_with('', 'netns', ('list',))",1,0,0.0,1980
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_lib.SubProcessBase._execute('o', 'link', ('list',),",1,0,0.0,1981
326e25f932f3d30a163d82af5e398a89edbd01bd,device.addr.delete.assert_called_once_with(addr + '/32'),0,0,0.0,1982
326e25f932f3d30a163d82af5e398a89edbd01bd,device.addr.add.assert_called_once_with(addr + '/32'),0,0,0.0,1983
326e25f932f3d30a163d82af5e398a89edbd01bd,"('del', '192.168.45.100',",0,0,0.0,1984
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.neigh_cmd.delete('192.168.45.100', 'cc:dd:ee:ff:ab:cd')",0,0,0.0,1985
326e25f932f3d30a163d82af5e398a89edbd01bd,"'dev', 'tap0'))",0,0,0.0,1986
326e25f932f3d30a163d82af5e398a89edbd01bd,"'nud', 'permanent',",0,0,0.0,1987
326e25f932f3d30a163d82af5e398a89edbd01bd,"'lladdr', 'cc:dd:ee:ff:ab:cd',",0,0,0.0,1988
326e25f932f3d30a163d82af5e398a89edbd01bd,'prefixlen': 24}]},0,0,0.0,1989
326e25f932f3d30a163d82af5e398a89edbd01bd,"return '%s/%s' % (fixed_ip['ip_address'], fixed_ip['prefixlen'])",0,0,0.0,1990
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': subnet_id,",0,0,0.0,1991
326e25f932f3d30a163d82af5e398a89edbd01bd,get_temp_file_path('log_file')),1,0,0.0,1992
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('agent_mode', agent_mode)",1,0,0.0,1993
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('host', host)",1,0,0.0,1994
326e25f932f3d30a163d82af5e398a89edbd01bd,get_temp_file_path('external/pids')),1,0,0.0,1995
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('external_pids',",1,0,0.0,1996
326e25f932f3d30a163d82af5e398a89edbd01bd,get_temp_file_path('ha_confs')),1,0,0.0,1997
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('ha_confs_path',",1,0,0.0,1998
326e25f932f3d30a163d82af5e398a89edbd01bd,get_temp_file_path('metadata_proxy')),1,0,0.0,1999
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('metadata_proxy_socket',",1,0,0.0,2000
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('log_file',",1,0,0.0,2001
326e25f932f3d30a163d82af5e398a89edbd01bd,return get_ovs_bridge(agent.conf.ovs_integration_bridge),1,0,0.0,2002
326e25f932f3d30a163d82af5e398a89edbd01bd,# metadata_proxy_watch_log has no effect,1,0,0.0,2003
326e25f932f3d30a163d82af5e398a89edbd01bd,# NOTE(cbrandily): log_file or log_dir must be set otherwise,1,0,0.0,2004
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('state_path', temp_dir.path)",1,0,0.0,2005
326e25f932f3d30a163d82af5e398a89edbd01bd,root=temp_dir),1,0,0.0,2006
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('external_network_bridge', br_ex.br_name)",1,0,0.0,2007
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf.set_override('ovs_integration_bridge', br_int.br_name)",1,0,0.0,2008
326e25f932f3d30a163d82af5e398a89edbd01bd,'neutron.agent.linux.interface.OVSInterfaceDriver'),1,0,0.0,2009
326e25f932f3d30a163d82af5e398a89edbd01bd,"'interface_driver',",1,0,0.0,2010
326e25f932f3d30a163d82af5e398a89edbd01bd,return conf,1,0,0.0,2011
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_fip=True, enable_snat=True,",1,0,0.0,2012
326e25f932f3d30a163d82af5e398a89edbd01bd,"'prefixlen': 24}],",0,0,0.0,2013
326e25f932f3d30a163d82af5e398a89edbd01bd,agent._process_added_router(router),1,0,0.0,2014
326e25f932f3d30a163d82af5e398a89edbd01bd,router.router[l3_constants.FLOATINGIP_KEY].append(fip),1,0,0.0,2015
326e25f932f3d30a163d82af5e398a89edbd01bd,'host': host},1,0,0.0,2016
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ip_address': fixed_address,",1,0,0.0,2017
326e25f932f3d30a163d82af5e398a89edbd01bd,"'floating_ip_address': fip_address,",1,0,0.0,2018
326e25f932f3d30a163d82af5e398a89edbd01bd,"'port_id': _uuid(),",1,0,0.0,2019
326e25f932f3d30a163d82af5e398a89edbd01bd,host=None):,1,0,0.0,2020
326e25f932f3d30a163d82af5e398a89edbd01bd,agent._router_removed(router_id),1,0,0.0,2021
326e25f932f3d30a163d82af5e398a89edbd01bd,return agent.router_info[router['id']],1,0,0.0,2022
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.addCleanup(agent._safe_router_removed, router['id'])",1,0,0.0,2023
326e25f932f3d30a163d82af5e398a89edbd01bd,"dual_stack=False, v6_ext_gw_with_sub=True):",1,0,0.0,2024
326e25f932f3d30a163d82af5e398a89edbd01bd,v6_ext_gw_with_sub)),1,0,0.0,2025
326e25f932f3d30a163d82af5e398a89edbd01bd,v6_ext_gw_with_sub=(,1,0,0.0,2026
326e25f932f3d30a163d82af5e398a89edbd01bd,"dual_stack=dual_stack,",1,0,0.0,2027
326e25f932f3d30a163d82af5e398a89edbd01bd,"extra_routes=extra_routes,",1,0,0.0,2028
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_ha=enable_ha,",1,0,0.0,2029
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_floating_ip=enable_fip,",1,0,0.0,2030
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_snat=enable_snat,",1,0,0.0,2031
326e25f932f3d30a163d82af5e398a89edbd01bd,"return l3_test_common.prepare_router_data(ip_version=ip_version,",1,0,0.0,2032
326e25f932f3d30a163d82af5e398a89edbd01bd,conf.set_override(,1,0,0.0,2033
326e25f932f3d30a163d82af5e398a89edbd01bd,l3_agent_main.register_opts(conf),1,0,0.0,2034
326e25f932f3d30a163d82af5e398a89edbd01bd,agent_config.register_process_monitor_opts(config),1,0,0.0,2035
326e25f932f3d30a163d82af5e398a89edbd01bd,import netaddr,1,0,0.0,2036
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.common import ovs_lib,1,0,0.0,2037
326e25f932f3d30a163d82af5e398a89edbd01bd,import webob.exc,1,0,0.0,2038
326e25f932f3d30a163d82af5e398a89edbd01bd,import webob.dec,1,0,0.0,2039
326e25f932f3d30a163d82af5e398a89edbd01bd,import webob,1,0,0.0,2040
326e25f932f3d30a163d82af5e398a89edbd01bd,import testtools,1,0,0.0,2041
326e25f932f3d30a163d82af5e398a89edbd01bd,import six,1,0,0.0,2042
326e25f932f3d30a163d82af5e398a89edbd01bd,from oslo_utils import uuidutils,1,0,0.0,2043
326e25f932f3d30a163d82af5e398a89edbd01bd,from oslo_config import cfg,1,0,0.0,2044
326e25f932f3d30a163d82af5e398a89edbd01bd,import time,1,0,0.0,2045
326e25f932f3d30a163d82af5e398a89edbd01bd,logging.register_options(config),1,0,0.0,2046
326e25f932f3d30a163d82af5e398a89edbd01bd,import os.path,1,0,0.0,2047
326e25f932f3d30a163d82af5e398a89edbd01bd,import functools,1,0,0.0,2048
326e25f932f3d30a163d82af5e398a89edbd01bd,import copy,1,0,0.0,2049
326e25f932f3d30a163d82af5e398a89edbd01bd,framework.L3AgentTestFramework):,0,0,0.0,2050
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.functional.agent.l3 import framework,0,0,0.0,2051
326e25f932f3d30a163d82af5e398a89edbd01bd,ha_device.link.set_down(),1,0,0.0,2052
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.NESTED_NAMESPACE_SEPARATOR, self.failover_agent.host)",1,0,0.0,2053
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace._get_ns_name(router_info_2['id']),",1,0,0.0,2054
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.l3 import dvr_snat_ns,1,0,0.0,2055
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.l3 import namespace_manager,1,0,0.0,2056
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import dhcp,1,0,0.0,2057
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import external_process,1,0,0.0,2058
326e25f932f3d30a163d82af5e398a89edbd01bd,config.register_opts(common_config.core_cli_opts),1,0,0.0,2059
326e25f932f3d30a163d82af5e398a89edbd01bd,config.register_opts(common_config.core_opts),1,0,0.0,2060
326e25f932f3d30a163d82af5e398a89edbd01bd,self.conf),1,0,0.0,2061
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.patch('neutron.agent.rpc.PluginReportStateAPI').start(),1,0,0.0,2062
326e25f932f3d30a163d82af5e398a89edbd01bd,'neutron.agent.l3.agent.L3PluginApi').start().return_value,1,0,0.0,2063
326e25f932f3d30a163d82af5e398a89edbd01bd,"super(L3AgentTestFramework, self).setUp()",1,0,0.0,2064
326e25f932f3d30a163d82af5e398a89edbd01bd,class L3AgentTestFramework(base.BaseSudoTestCase):,1,0,0.0,2065
326e25f932f3d30a163d82af5e398a89edbd01bd,return ovs_lib.OVSBridge(br_name),1,0,0.0,2066
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.functional import base,1,0,0.0,2067
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.functional.agent.linux import helpers,1,0,0.0,2068
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.common import net_helpers,1,0,0.0,2069
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.common import machine_fixtures,1,0,0.0,2070
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.tests.common import l3_test_common,1,0,0.0,2071
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.callbacks import resources,1,0,0.0,2072
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.callbacks import registry,1,0,0.0,2073
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.callbacks import events,1,0,0.0,2074
326e25f932f3d30a163d82af5e398a89edbd01bd,from neutron.agent.linux import ip_lib,1,0,0.0,2075
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_version=4,",1,0,0.0,2076
326e25f932f3d30a163d82af5e398a89edbd01bd,"ipv6_subnet_modes=None,",1,0,0.0,2077
326e25f932f3d30a163d82af5e398a89edbd01bd,interface_id=None):,1,0,0.0,2078
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertTrue(self._get_rule(router.iptables_manager,",1,0,0.0,2079
326e25f932f3d30a163d82af5e398a89edbd01bd,"device, router.get_internal_device_name, router.ns_name))",1,0,0.0,2080
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self.device_exists_with_ips_and_mac(,1,0,0.0,2081
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(len(internal_devices)),1,0,0.0,2082
326e25f932f3d30a163d82af5e398a89edbd01bd,"'INPUT',",1,0,0.0,2083
326e25f932f3d30a163d82af5e398a89edbd01bd,"'filter',",1,0,0.0,2084
326e25f932f3d30a163d82af5e398a89edbd01bd,metadata_port_filter)),1,0,0.0,2085
326e25f932f3d30a163d82af5e398a89edbd01bd,"'PREROUTING',",1,0,0.0,2086
326e25f932f3d30a163d82af5e398a89edbd01bd,"'nat',",1,0,0.0,2087
326e25f932f3d30a163d82af5e398a89edbd01bd,str(self.agent.conf.metadata_port) in rule.rule),1,0,0.0,2088
326e25f932f3d30a163d82af5e398a89edbd01bd,"'extra_subnet_cidr': extra_subnet_cidr,",1,0,0.0,2089
326e25f932f3d30a163d82af5e398a89edbd01bd,"'nat', 'float-snat'))",1,0,0.0,2090
326e25f932f3d30a163d82af5e398a89edbd01bd,"'nat', 'POSTROUTING'))",1,0,0.0,2091
326e25f932f3d30a163d82af5e398a89edbd01bd,"'nat', 'snat'))",1,0,0.0,2092
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(router.iptables_manager.is_chain_empty(,1,0,0.0,2093
326e25f932f3d30a163d82af5e398a89edbd01bd,"lambda: not self._metadata_proxy_exists(self.agent.conf, router))",1,0,0.0,2094
326e25f932f3d30a163d82af5e398a89edbd01bd,utils.wait_until_true(,1,0,0.0,2095
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(self._namespace_exists(router.ns_name)),1,0,0.0,2096
326e25f932f3d30a163d82af5e398a89edbd01bd,# so there's no need to check that explicitly.,1,0,0.0,2097
326e25f932f3d30a163d82af5e398a89edbd01bd,'destination': route['destination']} for route in routes],1,0,0.0,2098
326e25f932f3d30a163d82af5e398a89edbd01bd,for extra_route in router.router['routes']:,1,0,0.0,2099
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(extra_route, routes)",1,0,0.0,2100
326e25f932f3d30a163d82af5e398a89edbd01bd,for ip_version in ip_versions:,1,0,0.0,2101
326e25f932f3d30a163d82af5e398a89edbd01bd,"[], self._get_addresses_on_device(namespace, interface))",1,0,0.0,2102
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertEqual(,1,0,0.0,2103
326e25f932f3d30a163d82af5e398a89edbd01bd,return [address['cidr'] for address in,1,0,0.0,2104
326e25f932f3d30a163d82af5e398a89edbd01bd,@classmethod,1,0,0.0,2105
326e25f932f3d30a163d82af5e398a89edbd01bd,ha_device.link.set_down(),1,0,0.0,2106
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port['mac_address'],",1,0,0.0,2107
326e25f932f3d30a163d82af5e398a89edbd01bd,"['%s/32' % fip['floating_ip_address']],",1,0,0.0,2108
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_external_device_name(external_port['id']),",1,0,0.0,2109
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_lib.device_exists_with_ips_and_mac(,1,0,0.0,2110
326e25f932f3d30a163d82af5e398a89edbd01bd,return len(floating_ips) and all(,1,0,0.0,2111
326e25f932f3d30a163d82af5e398a89edbd01bd,assert_ovs_bridge_empty(self.agent.conf.external_network_bridge),1,0,0.0,2112
326e25f932f3d30a163d82af5e398a89edbd01bd,assert_ovs_bridge_empty(self.agent.conf.ovs_integration_bridge),1,0,0.0,2113
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(bridge.get_port_name_list()),1,0,0.0,2114
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertIn(extra_subnet, routes)",1,0,0.0,2115
326e25f932f3d30a163d82af5e398a89edbd01bd,for extra_subnet in (route['cidr'] for route in extra_subnets):,1,0,0.0,2116
326e25f932f3d30a163d82af5e398a89edbd01bd,routes.extend(_routes),1,0,0.0,2117
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace=ns_name),1,0,0.0,2118
326e25f932f3d30a163d82af5e398a89edbd01bd,"# then the devices and iptable rules have also been deleted,",1,0,0.0,2119
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ex_port_ipv6': ex_port_ipv6,",1,0,0.0,2120
326e25f932f3d30a163d82af5e398a89edbd01bd,"return l3_test_common.router_append_subnet(router, count,",1,0,0.0,2121
326e25f932f3d30a163d82af5e398a89edbd01bd,@staticmethod,1,0,0.0,2122
326e25f932f3d30a163d82af5e398a89edbd01bd,state BACKUP,1,0,0.0,2123
326e25f932f3d30a163d82af5e398a89edbd01bd,"return """"""vrrp_instance VR_1 {",1,0,0.0,2124
326e25f932f3d30a163d82af5e398a89edbd01bd,router.get_floating_ips()[0]['floating_ip_address']),1,0,0.0,2125
326e25f932f3d30a163d82af5e398a89edbd01bd,internal_port['id']),1,0,0.0,2126
326e25f932f3d30a163d82af5e398a89edbd01bd,external_port['id']),1,0,0.0,2127
326e25f932f3d30a163d82af5e398a89edbd01bd,return device.link.mtu,1,0,0.0,2128
326e25f932f3d30a163d82af5e398a89edbd01bd,fixed_ip['prefixlen']),1,0,0.0,2129
326e25f932f3d30a163d82af5e398a89edbd01bd,"return common_utils.ip_to_cidr(fixed_ip['ip_address'],",1,0,0.0,2130
326e25f932f3d30a163d82af5e398a89edbd01bd,"name_getter(expected_device['id']), ip_cidrs,",1,0,0.0,2131
326e25f932f3d30a163d82af5e398a89edbd01bd,"'int_port_ipv6': int_port_ipv6,",1,0,0.0,2132
326e25f932f3d30a163d82af5e398a89edbd01bd,return ip_lib.device_exists_with_ips_and_mac(,1,0,0.0,2133
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace):,1,0,0.0,2134
326e25f932f3d30a163d82af5e398a89edbd01bd,return pm.active,1,0,0.0,2135
326e25f932f3d30a163d82af5e398a89edbd01bd,router.ns_name),1,0,0.0,2136
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.router_id,",1,0,0.0,2137
326e25f932f3d30a163d82af5e398a89edbd01bd,"conf,",1,0,0.0,2138
326e25f932f3d30a163d82af5e398a89edbd01bd,return ip.netns.exists(namespace),1,0,0.0,2139
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_version, ipv6_subnet_modes, interface_id)",1,0,0.0,2140
326e25f932f3d30a163d82af5e398a89edbd01bd,virtual_router_id 1,1,0,0.0,2141
326e25f932f3d30a163d82af5e398a89edbd01bd,priority 50,1,0,0.0,2142
326e25f932f3d30a163d82af5e398a89edbd01bd,garp_master_repeat 5,1,0,0.0,2143
326e25f932f3d30a163d82af5e398a89edbd01bd,garp_master_refresh 10,1,0,0.0,2144
326e25f932f3d30a163d82af5e398a89edbd01bd,"'default_gateway_ip': default_gateway_ip,",1,0,0.0,2145
326e25f932f3d30a163d82af5e398a89edbd01bd,"'floating_ip_cidr': floating_ip_cidr,",1,0,0.0,2146
326e25f932f3d30a163d82af5e398a89edbd01bd,"'internal_device_cidr': internal_device_cidr,",1,0,0.0,2147
326e25f932f3d30a163d82af5e398a89edbd01bd,"'internal_device_name': internal_device_name,",1,0,0.0,2148
326e25f932f3d30a163d82af5e398a89edbd01bd,"'external_device_cidr': external_device_cidr,",1,0,0.0,2149
326e25f932f3d30a163d82af5e398a89edbd01bd,"'external_device_name': external_device_name,",1,0,0.0,2150
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ha_device_name': ha_device_name,",1,0,0.0,2151
326e25f932f3d30a163d82af5e398a89edbd01bd,"}"""""" % {",1,0,0.0,2152
326e25f932f3d30a163d82af5e398a89edbd01bd,8.8.8.0/24 via 19.4.4.4,1,0,0.0,2153
326e25f932f3d30a163d82af5e398a89edbd01bd,virtual_routes {,1,0,0.0,2154
326e25f932f3d30a163d82af5e398a89edbd01bd,virtual_ipaddress_excluded {,1,0,0.0,2155
326e25f932f3d30a163d82af5e398a89edbd01bd,virtual_ipaddress {,1,0,0.0,2156
326e25f932f3d30a163d82af5e398a89edbd01bd,},1,0,0.0,2157
326e25f932f3d30a163d82af5e398a89edbd01bd,%(ha_device_name)s,1,0,0.0,2158
326e25f932f3d30a163d82af5e398a89edbd01bd,track_interface {,1,0,0.0,2159
326e25f932f3d30a163d82af5e398a89edbd01bd,advert_int 2,1,0,0.0,2160
326e25f932f3d30a163d82af5e398a89edbd01bd,nopreempt,1,0,0.0,2161
326e25f932f3d30a163d82af5e398a89edbd01bd,return_value=ns_name).start(),1,0,0.0,2162
326e25f932f3d30a163d82af5e398a89edbd01bd,"mock.patch.object(namespaces.RouterNamespace, '_get_ns_name',",1,0,0.0,2163
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.NESTED_NAMESPACE_SEPARATOR, self.agent.host)",1,0,0.0,2164
326e25f932f3d30a163d82af5e398a89edbd01bd,fip_gw_port):,0,0,0.0,2165
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnet_id': subnet_id,0,0,0.0,2166
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_process_ipv6_only_or_dual_stack_gw(dual_stack=True),0,0,0.0,2167
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_process_ipv6_only_or_dual_stack_gw(),0,0,0.0,2168
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(orig_nat_rules, new_nat_rules)",0,0,0.0,2169
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(external_gateway_nat_rules.called),0,0,0.0,2170
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertNotEqual(orig_nat_rules, new_nat_rules)",0,0,0.0,2171
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(external_gateway_nat_rules.called),0,0,0.0,2172
326e25f932f3d30a163d82af5e398a89edbd01bd,# NAT rules should only change for dual_stack operation,0,0,0.0,2173
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri, 'get_floating_agent_gw_interface')",0,0,0.0,2174
326e25f932f3d30a163d82af5e398a89edbd01bd,'cidr': '1.2.3.0/24'}],0,0,0.0,2175
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'id': subnet_id,",0,0,0.0,2176
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnets': [,0,0,0.0,2177
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'ip_address': '20.0.0.30',",0,0,0.0,2178
326e25f932f3d30a163d82af5e398a89edbd01bd,[{'fixed_ips': [,0,0,0.0,2179
326e25f932f3d30a163d82af5e398a89edbd01bd,'mac_address': 'ca:fe:de:ad:be:ef'}],0,0,0.0,2180
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': fake_network_id,",0,0,0.0,2181
326e25f932f3d30a163d82af5e398a89edbd01bd,"'binding:host_id': 'myhost',",0,0,0.0,2182
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '20.0.0.1'}],",0,0,0.0,2183
326e25f932f3d30a163d82af5e398a89edbd01bd,"enable_fip=True, enable_snat=True):",1,0,0.0,2184
326e25f932f3d30a163d82af5e398a89edbd01bd,extra_routes=extra_routes),1,0,0.0,2185
326e25f932f3d30a163d82af5e398a89edbd01bd,namespace):,1,0,0.0,2186
326e25f932f3d30a163d82af5e398a89edbd01bd,return ip_lib.device_exists_with_ip_mac(,1,0,0.0,2187
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': external_gw_port['network_id'],",1,0,0.0,2188
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': fixed_ip['subnet_id']},",1,0,0.0,2189
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': float_subnet['gateway_ip'],",1,0,0.0,2190
326e25f932f3d30a163d82af5e398a89edbd01bd,{'subnet':,1,0,0.0,2191
326e25f932f3d30a163d82af5e398a89edbd01bd,"device['mac_address'], router.ns_name))",1,0,0.0,2192
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_ha_device_name(), device['ip_cidr'],",1,0,0.0,2193
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(ip_lib.device_exists_with_ip_mac(,1,0,0.0,2194
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(expected_gateway, existing_gateway)",1,0,0.0,2195
326e25f932f3d30a163d82af5e398a89edbd01bd,external_device.route.get_gateway().get('gateway')),1,0,0.0,2196
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.device_exists_with_ip_mac,",1,0,0.0,2197
326e25f932f3d30a163d82af5e398a89edbd01bd,self._router_lifecycle(enable_ha=False),1,0,0.0,2198
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_port['mac_address'],",1,0,0.0,2199
326e25f932f3d30a163d82af5e398a89edbd01bd,"'%s/32' % fip['floating_ip_address'],",1,0,0.0,2200
326e25f932f3d30a163d82af5e398a89edbd01bd,"router.get_external_device_name(external_port['id']),",1,0,0.0,2201
326e25f932f3d30a163d82af5e398a89edbd01bd,return len(floating_ips) and all(ip_lib.device_exists_with_ip_mac(,1,0,0.0,2202
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(self.device_exists_with_ip_mac(,1,0,0.0,2203
326e25f932f3d30a163d82af5e398a89edbd01bd,"name_getter(expected_device['id']), expected_device['ip_cidr'],",1,0,0.0,2204
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._set_subnet_arp_info(subnet_id),0,0,0.0,2205
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnet_id': subnet_id}]}],0,0,0.0,2206
326e25f932f3d30a163d82af5e398a89edbd01bd,"'mac_address': 'fa:16:3e:80:8d:89',",1,0,0.0,2207
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '20.0.0.30',",0,0,0.0,2208
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cidr': '2001:192:168:100::/64',",0,0,0.0,2209
326e25f932f3d30a163d82af5e398a89edbd01bd,"subnets.append({'id': subnet_id_v6,",0,0,0.0,2210
326e25f932f3d30a163d82af5e398a89edbd01bd,'prefixlen': 64}),0,0,0.0,2211
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '2001:192:168:100::2',",0,0,0.0,2212
326e25f932f3d30a163d82af5e398a89edbd01bd,"fixed_ips.append({'subnet_id': subnet_id_v6,",0,0,0.0,2213
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': '20.0.0.1'}],0,0,0.0,2214
326e25f932f3d30a163d82af5e398a89edbd01bd,"'cidr': '20.0.0.0/24',",0,0,0.0,2215
326e25f932f3d30a163d82af5e398a89edbd01bd,'prefixlen': 24}],0,0,0.0,2216
326e25f932f3d30a163d82af5e398a89edbd01bd,is_add=False),0,0,0.0,2217
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'ip_address': '1.2.3.4',",0,0,0.0,2218
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri.get_internal_device_name(port['id']),",0,0,0.0,2219
326e25f932f3d30a163d82af5e398a89edbd01bd,"sn_port, port,",0,0,0.0,2220
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._snat_redirect_modify.assert_called_with(,0,0,0.0,2221
326e25f932f3d30a163d82af5e398a89edbd01bd,"sn_port['fixed_ips'],",0,0,0.0,2222
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._set_subnet_arp_info.assert_called_once_with(subnet_id),0,0,0.0,2223
326e25f932f3d30a163d82af5e398a89edbd01bd,'mac_address': 'ca:fe:de:ad:be:ef'},0,0,0.0,2224
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnets': [{'gateway_ip': '20.0.0.1'}],",0,0,0.0,2225
326e25f932f3d30a163d82af5e398a89edbd01bd,'subnets': [{'id': subnet_id}]},0,0,0.0,2226
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': '2001:192:168:100::1'}),0,0,0.0,2227
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnets': subnets,",0,0,0.0,2228
326e25f932f3d30a163d82af5e398a89edbd01bd,"'20.0.0.30', mock.ANY)]",0,0,0.0,2229
326e25f932f3d30a163d82af5e398a89edbd01bd,"exp_arp_calls += [mock.call(ri.ns_name, interface_name,",0,0,0.0,2230
326e25f932f3d30a163d82af5e398a89edbd01bd,source_cidrs.append(source_cidr),0,0,0.0,2231
326e25f932f3d30a163d82af5e398a89edbd01bd,prefix),0,0,0.0,2232
326e25f932f3d30a163d82af5e398a89edbd01bd,for subnet in iface['subnets']:,0,0,0.0,2233
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_external_gateway_action('remove', router, dual_stack=True)",0,0,0.0,2234
326e25f932f3d30a163d82af5e398a89edbd01bd,"self._test_external_gateway_action('add', router, dual_stack=True)",0,0,0.0,2235
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_external_gateway_updated(dual_stack=True),0,0,0.0,2236
326e25f932f3d30a163d82af5e398a89edbd01bd,self._test_external_gateway_updated(),0,0,0.0,2237
326e25f932f3d30a163d82af5e398a89edbd01bd,"'2001:192:168:100::2', mock.ANY)]",0,0,0.0,2238
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri, dual_stack=dual_stack)",0,0,0.0,2239
326e25f932f3d30a163d82af5e398a89edbd01bd,"sn_port, sn_port,",0,0,0.0,2240
326e25f932f3d30a163d82af5e398a89edbd01bd,"ip_cidrs,",0,0,0.0,2241
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ips': gateway_ips,",0,0,0.0,2242
326e25f932f3d30a163d82af5e398a89edbd01bd,gateway_ips.append('2001:192:168:100::1'),0,0,0.0,2243
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_cidrs.append('2001:192:168:100::2/64'),0,0,0.0,2244
326e25f932f3d30a163d82af5e398a89edbd01bd,self.send_arp.assert_has_calls(exp_arp_calls),0,0,0.0,2245
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.ANY)],0,0,0.0,2246
326e25f932f3d30a163d82af5e398a89edbd01bd,"'2001:192:168:100::2',",0,0,0.0,2247
326e25f932f3d30a163d82af5e398a89edbd01bd,"'device_owner': 'network:floatingip_agent_gateway',",1,0,0.0,2248
326e25f932f3d30a163d82af5e398a89edbd01bd,"'binding:host_id': self.agent.conf.host,",1,0,0.0,2249
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace._get_ns_name(router_info['id']),",1,0,0.0,2250
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.send_arp.assert_called_once_with(ri.ns_name,",1,0,0.0,2251
326e25f932f3d30a163d82af5e398a89edbd01bd,source_cidrs.append(source_cidr),1,0,0.0,2252
326e25f932f3d30a163d82af5e398a89edbd01bd,prefix),1,0,0.0,2253
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.send_arp.assert_called_once_with(ri.ns_name, interface_name,",1,0,0.0,2254
326e25f932f3d30a163d82af5e398a89edbd01bd,"sn_port,",1,0,0.0,2255
326e25f932f3d30a163d82af5e398a89edbd01bd,"['20.0.0.30/24'],",1,0,0.0,2256
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway': '20.0.0.1',",1,0,0.0,2257
326e25f932f3d30a163d82af5e398a89edbd01bd,"'20.0.0.30', mock.ANY)",1,0,0.0,2258
326e25f932f3d30a163d82af5e398a89edbd01bd,"interface_name,",1,0,0.0,2259
326e25f932f3d30a163d82af5e398a89edbd01bd,ri.get_internal_device_name(port['id'])),1,0,0.0,2260
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet': {'gateway_ip': '20.0.0.1'},",1,0,0.0,2261
326e25f932f3d30a163d82af5e398a89edbd01bd,"port,",1,0,0.0,2262
326e25f932f3d30a163d82af5e398a89edbd01bd,"sn_port['fixed_ips'][0]['ip_address'],",1,0,0.0,2263
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._snat_redirect_remove.assert_called_with(,1,0,0.0,2264
326e25f932f3d30a163d82af5e398a89edbd01bd,"sn_port['ip_cidr'],",1,0,0.0,2265
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._set_subnet_arp_info.assert_called_once_with(port),1,0,0.0,2266
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(ri._set_subnet_info.call_count, 1)",1,0,0.0,2267
326e25f932f3d30a163d82af5e398a89edbd01bd,'ip_cidr': '20.0.0.30/24'},1,0,0.0,2268
326e25f932f3d30a163d82af5e398a89edbd01bd,'ip_cidr': '20.0.0.31/24'},1,0,0.0,2269
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet_id': _get_subnet_id(ports[0]),",1,0,0.0,2270
326e25f932f3d30a163d82af5e398a89edbd01bd,'fixed_ips': [{'ip_address': '1.2.3.4'}]}],1,0,0.0,2271
326e25f932f3d30a163d82af5e398a89edbd01bd,ri._set_subnet_arp_info(ports[0]),1,0,0.0,2272
326e25f932f3d30a163d82af5e398a89edbd01bd,"'binding:host_id': 'myhost',",1,0,0.0,2273
326e25f932f3d30a163d82af5e398a89edbd01bd,self.fail_ha_router(router1),0,0,0.0,2274
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.NESTED_NAMESPACE_SEPARATOR, self.failover_agent.host)",0,0,0.0,2275
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace._get_ns_name(router_info_2['id']),",0,0,0.0,2276
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.NESTED_NAMESPACE_SEPARATOR, self.agent.host)",0,0,0.0,2277
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace._get_ns_name(router_info['id']),",0,0,0.0,2278
326e25f932f3d30a163d82af5e398a89edbd01bd,"namespaces.RouterNamespace, '_get_ns_name').start()",0,0,0.0,2279
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '20.0.0.30', 'subnet_id': _uuid()",1,0,0.0,2280
326e25f932f3d30a163d82af5e398a89edbd01bd,"self.assertEqual(orig_nat_rules, new_nat_rules)",1,0,0.0,2281
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertFalse(external_gateway_nat_rules.called),1,0,0.0,2282
326e25f932f3d30a163d82af5e398a89edbd01bd,sub_info):,1,0,0.0,2283
326e25f932f3d30a163d82af5e398a89edbd01bd,"fip_gw_port,",1,0,0.0,2284
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri, '_set_subnet_info')",1,0,0.0,2285
326e25f932f3d30a163d82af5e398a89edbd01bd,mock.patch.object(,1,0,0.0,2286
326e25f932f3d30a163d82af5e398a89edbd01bd,"ri, 'get_floating_agent_gw_interface'),",1,0,0.0,2287
326e25f932f3d30a163d82af5e398a89edbd01bd,"[{'fixed_ips': [{'ip_address': '20.0.0.30',",1,0,0.0,2288
326e25f932f3d30a163d82af5e398a89edbd01bd,'ip_cidr': '20.0.0.30/24'}],1,0,0.0,2289
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': fake_network_id,",1,0,0.0,2290
326e25f932f3d30a163d82af5e398a89edbd01bd,"'mac_address': 'ca:fe:de:ad:be:ef',",1,0,0.0,2291
326e25f932f3d30a163d82af5e398a89edbd01bd,'mac_address': 'ca:fe:de:ad:be:ef'},1,0,0.0,2292
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': fixed_ip['subnet_id'],",1,0,0.0,2293
326e25f932f3d30a163d82af5e398a89edbd01bd,elif ip_version == 6:,1,0,0.0,2294
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': gw_pool % i,",1,0,0.0,2295
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet': {'cidr': cidr_pool % i,",1,0,0.0,2296
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet_id': _uuid()}],",1,0,0.0,2297
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'ip_address': ip_pool % i,",1,0,0.0,2298
326e25f932f3d30a163d82af5e398a89edbd01bd,for p in interfaces]),1,0,0.0,2299
326e25f932f3d30a163d82af5e398a89edbd01bd,[netaddr.IPNetwork(p['subnet']['cidr']).version == ip_version,1,0,0.0,2300
326e25f932f3d30a163d82af5e398a89edbd01bd,"raise ValueError(""Invalid ip_version: %s"" % ip_version)",1,0,0.0,2301
326e25f932f3d30a163d82af5e398a89edbd01bd,else:,1,0,0.0,2302
326e25f932f3d30a163d82af5e398a89edbd01bd,addr_mode=None):,1,0,0.0,2303
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_cidr': '99.0.1.9/24',",1,0,0.0,2304
326e25f932f3d30a163d82af5e398a89edbd01bd,"external_gw_port['ip_cidr'],",1,0,0.0,2305
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': snat_ip}],",1,0,0.0,2306
326e25f932f3d30a163d82af5e398a89edbd01bd,"'device_owner': 'network:router_centralized_snat',",1,0,0.0,2307
326e25f932f3d30a163d82af5e398a89edbd01bd,"'network_id': port['network_id'],",1,0,0.0,2308
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': snat_subnet['gateway_ip'],",1,0,0.0,2309
326e25f932f3d30a163d82af5e398a89edbd01bd,'device_id': _uuid()},1,0,0.0,2310
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': _uuid(),",1,0,0.0,2311
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': fip_gw_port_ip}],",1,0,0.0,2312
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ipv6_ra_mode': ra_mode,",1,0,0.0,2313
326e25f932f3d30a163d82af5e398a89edbd01bd,'ipv6_address_mode': addr_mode}}),1,0,0.0,2314
326e25f932f3d30a163d82af5e398a89edbd01bd,extra_routes=False):,1,0,0.0,2315
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'ip_address': ip_addr,",1,0,0.0,2316
326e25f932f3d30a163d82af5e398a89edbd01bd,self.assertTrue(ri.ns_name.endswith(id)),1,0,0.0,2317
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': '19.4.4.1'}},1,0,0.0,2318
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet': {'cidr': '19.4.4.0/24',",1,0,0.0,2319
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '152.10.0.13'}],",1,0,0.0,2320
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_cidr': '152.10.0.13/16',",1,0,0.0,2321
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '152.10.0.1',",1,0,0.0,2322
326e25f932f3d30a163d82af5e398a89edbd01bd,"{'subnet': {'cidr': '152.10.0.0/16',",1,0,0.0,2323
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_address': '152.2.0.13'}],",1,0,0.0,2324
326e25f932f3d30a163d82af5e398a89edbd01bd,"'fixed_ips': [{'subnet_id': _uuid(),",1,0,0.0,2325
326e25f932f3d30a163d82af5e398a89edbd01bd,"'ip_cidr': '152.2.0.13/16',",1,0,0.0,2326
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '152.2.0.1',",1,0,0.0,2327
326e25f932f3d30a163d82af5e398a89edbd01bd,"'id': _uuid()},",1,0,0.0,2328
326e25f932f3d30a163d82af5e398a89edbd01bd,"'gateway_ip': '169.254.255.254',",1,0,0.0,2329
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet': {'cidr': '169.254.192.0/18',",1,0,0.0,2330
326e25f932f3d30a163d82af5e398a89edbd01bd,ip_version=ip_version),1,0,0.0,2331
326e25f932f3d30a163d82af5e398a89edbd01bd,'gateway_ip': gateway_ip}},1,0,0.0,2332
326e25f932f3d30a163d82af5e398a89edbd01bd,"'subnet': {'cidr': cidr,",1,0,0.0,2333
326e25f932f3d30a163d82af5e398a89edbd01bd,"dev='dev0', ttl='ttl0',",1,0,0.0,2334
