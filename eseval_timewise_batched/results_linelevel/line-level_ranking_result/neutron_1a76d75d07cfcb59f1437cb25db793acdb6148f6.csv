commit_id,line,line_level_label,count,line_score,row
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# By default user is admin - now test non admin user,0,7,1.0,1
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# By default user is admin - now test non admin user,0,7,1.0,2
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# The plugin supports the port security feature such as,1,5,0.7142857142857142,3
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# we just check an operation for the port succeed.,0,4,0.5714285714285714,4
1a76d75d07cfcb59f1437cb25db793acdb6148f6,VIF_TYPE = portbindings.VIF_TYPE_BRIDGE,0,3,0.42857142857142855,5
1a76d75d07cfcb59f1437cb25db793acdb6148f6,VIF_TYPE = portbindings.VIF_TYPE_BRIDGE,1,3,0.42857142857142855,6
1a76d75d07cfcb59f1437cb25db793acdb6148f6,VIF_TYPE = portbindings.VIF_TYPE_OVS,0,3,0.42857142857142855,7
1a76d75d07cfcb59f1437cb25db793acdb6148f6,VIF_TYPE = portbindings.VIF_TYPE_OVS,1,3,0.42857142857142855,8
1a76d75d07cfcb59f1437cb25db793acdb6148f6,port[portbindings.CAPABILITIES] = {,1,3,0.42857142857142855,9
1a76d75d07cfcb59f1437cb25db793acdb6148f6,'security-group' in self.supported_extension_aliases},1,3,0.42857142857142855,10
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# in update() in neutron.api.v2.base.Controller.,0,3,0.42857142857142855,11
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# TODO(rkukura): Replace with new VIF security details,1,3,0.42857142857142855,12
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"port = self._update('ports', port_id, {'port': profile_arg},",0,2,0.2857142857142857,13
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"port = plugin.get_port(ctx, port_id)",1,2,0.2857142857142857,14
1a76d75d07cfcb59f1437cb25db793acdb6148f6,ports = plugin.get_ports(ctx),1,2,0.2857142857142857,15
1a76d75d07cfcb59f1437cb25db793acdb6148f6,ctx = self._get_non_admin_context(),0,2,0.2857142857142857,16
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"# print ""(1) %s"" % port",0,2,0.2857142857142857,17
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# security groups and anti spoofing.,1,2,0.2857142857142857,18
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"port = self._update('ports', port_id,",0,2,0.2857142857142857,19
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"ctx = context.Context(user_id=None,",1,2,0.2857142857142857,20
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# VIF_DETAILS must be overridden according to plugin vif_details,0,2,0.2857142857142857,21
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# but all replacement of HAS_PORT_FILTER in successor has not been,0,2,0.2857142857142857,22
1a76d75d07cfcb59f1437cb25db793acdb6148f6,for port in ports:,0,2,0.2857142857142857,23
1a76d75d07cfcb59f1437cb25db793acdb6148f6,plugin = QuantumManager.get_plugin(),1,2,0.2857142857142857,24
1a76d75d07cfcb59f1437cb25db793acdb6148f6,ctx = context.get_admin_context(),0,2,0.2857142857142857,25
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"ctx = context.Context(user_id=None,",0,2,0.2857142857142857,26
1a76d75d07cfcb59f1437cb25db793acdb6148f6,#TODO(nati) filter by security group,1,2,0.2857142857142857,27
1a76d75d07cfcb59f1437cb25db793acdb6148f6,ctx = context.get_admin_context(),0,2,0.2857142857142857,28
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.extra_binding_dict = {,0,2,0.2857142857142857,29
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"ports = super(OVSQuantumPluginV2,",0,2,0.2857142857142857,30
1a76d75d07cfcb59f1437cb25db793acdb6148f6,port[portbindings.VIF_TYPE] = portbindings.VIF_TYPE_OVS,1,2,0.2857142857142857,31
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"ports = super(OVSQuantumPluginV2, self).get_ports(",1,2,0.2857142857142857,32
1a76d75d07cfcb59f1437cb25db793acdb6148f6,'security-group' in self.supported_extension_aliases}},0,2,0.2857142857142857,33
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return [self._fields(port, fields) for port in ports]",1,2,0.2857142857142857,34
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"port = self._show('ports', port_id, quantum_context=ctx)['port']",0,2,0.2857142857142857,35
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"ports = self._list('ports', quantum_context=ctx)['ports']",0,2,0.2857142857142857,36
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# Check a response of create_port,0,2,0.2857142857142857,37
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# Check a response of get_port,0,2,0.2857142857142857,38
1a76d75d07cfcb59f1437cb25db793acdb6148f6,profile_arg = {portbindings.PROFILE: {'dummy': 'dummy'}},0,1,0.14285714285714285,39
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# See comment for PolicyNotAuthorized except clause,0,1,0.14285714285714285,40
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# Note that 404 is returned when prohibit by policy.,0,1,0.14285714285714285,41
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# fail with binding:profile,0,1,0.14285714285714285,42
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# succeed without binding:profile,0,1,0.14285714285714285,43
1a76d75d07cfcb59f1437cb25db793acdb6148f6,profile_arg = {portbindings.PROFILE: profile},0,1,0.14285714285714285,44
1a76d75d07cfcb59f1437cb25db793acdb6148f6,port_id = port['port']['id'],0,1,0.14285714285714285,45
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"req = self.new_update_request('ports', data, port1['port']['id'])",0,1,0.14285714285714285,46
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# For plugins which does not use binding:profile attr,0,1,0.14285714285714285,47
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"req = self.new_update_request('ports', data, port2['port']['id'])",0,1,0.14285714285714285,48
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.assertFalse(portbindings.CAPABILITIES in port),1,1,0.14285714285714285,49
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.assertFalse(portbindings.VIF_TYPE in port),1,1,0.14285714285714285,50
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# completed.,0,1,0.14285714285714285,51
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.assertTrue('status' in port),1,1,0.14285714285714285,52
1a76d75d07cfcb59f1437cb25db793acdb6148f6,VIF_DETAILS = None,0,1,0.14285714285714285,53
1a76d75d07cfcb59f1437cb25db793acdb6148f6,# NOTE(r-mibu): The following six lines are just for backward,0,1,0.14285714285714285,54
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"# compatibility.  In this class, HAS_PORT_FILTER has been replaced",0,1,0.14285714285714285,55
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"# by VIF_DETAILS which can be set expected vif_details to check,",0,1,0.14285714285714285,56
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"expected = getattr(self, 'HAS_PORT_FILTER', False)",0,1,0.14285714285714285,57
1a76d75d07cfcb59f1437cb25db793acdb6148f6,vif_details = port[portbindings.VIF_DETAILS],0,1,0.14285714285714285,58
1a76d75d07cfcb59f1437cb25db793acdb6148f6,port_filter = vif_details[portbindings.CAP_PORT_FILTER],0,1,0.14285714285714285,59
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = False,1,1,0.14285714285714285,60
1a76d75d07cfcb59f1437cb25db793acdb6148f6,vif_details = port[portbindings.VIF_DETAILS],1,1,0.14285714285714285,61
1a76d75d07cfcb59f1437cb25db793acdb6148f6,for non_admin_port in ports:,0,1,0.14285714285714285,62
1a76d75d07cfcb59f1437cb25db793acdb6148f6,data = {'port': {portbindings.HOST_ID: 'testhosttemp'}},0,1,0.14285714285714285,63
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"non_admin_port = plugin.get_port(ctx, port_id)",1,1,0.14285714285714285,64
1a76d75d07cfcb59f1437cb25db793acdb6148f6,port_id = port['port']['id'],0,1,0.14285714285714285,65
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = True,1,1,0.14285714285714285,66
1a76d75d07cfcb59f1437cb25db793acdb6148f6,host_arg = {portbindings.HOST_ID: self.hostname},0,1,0.14285714285714285,67
1a76d75d07cfcb59f1437cb25db793acdb6148f6,from quantum.tests.unit import test_security_groups_rpc as test_sg_rpc,0,1,0.14285714285714285,68
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = True,0,1,0.14285714285714285,69
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = False,0,1,0.14285714285714285,70
1a76d75d07cfcb59f1437cb25db793acdb6148f6,FIREWALL_DRIVER = test_sg_rpc.FIREWALL_NOOP_DRIVER,0,1,0.14285714285714285,71
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = True,1,1,0.14285714285714285,72
1a76d75d07cfcb59f1437cb25db793acdb6148f6,from quantum.tests.unit import test_security_groups_rpc as test_sg_rpc,0,1,0.14285714285714285,73
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = True,0,1,0.14285714285714285,74
1a76d75d07cfcb59f1437cb25db793acdb6148f6,FIREWALL_DRIVER = test_sg_rpc.FIREWALL_HYBRID_DRIVER,0,1,0.14285714285714285,75
1a76d75d07cfcb59f1437cb25db793acdb6148f6,HAS_PORT_FILTER = False,0,1,0.14285714285714285,76
1a76d75d07cfcb59f1437cb25db793acdb6148f6,FIREWALL_DRIVER = test_sg_rpc.FIREWALL_NOOP_DRIVER,0,1,0.14285714285714285,77
1a76d75d07cfcb59f1437cb25db793acdb6148f6,FIREWALL_DRIVER = test_sg_rpc.FIREWALL_IPTABLES_DRIVER,0,1,0.14285714285714285,78
1a76d75d07cfcb59f1437cb25db793acdb6148f6,portbindings.CAPABILITIES: {,0,1,0.14285714285714285,79
1a76d75d07cfcb59f1437cb25db793acdb6148f6,portbindings.CAP_PORT_FILTER:,1,1,0.14285714285714285,80
1a76d75d07cfcb59f1437cb25db793acdb6148f6,portbindings.CAP_PORT_FILTER:,0,1,0.14285714285714285,81
1a76d75d07cfcb59f1437cb25db793acdb6148f6,hostname = 'testhost',0,1,0.14285714285714285,82
1a76d75d07cfcb59f1437cb25db793acdb6148f6,non_admin_port = self._show(,0,1,0.14285714285714285,83
1a76d75d07cfcb59f1437cb25db793acdb6148f6,return port,1,1,0.14285714285714285,84
1a76d75d07cfcb59f1437cb25db793acdb6148f6,fmt = 'json',0,1,0.14285714285714285,85
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"binding_set = ""extension:port_binding:set""",1,1,0.14285714285714285,86
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"binding_view = ""extension:port_binding:view""",1,1,0.14285714285714285,87
1a76d75d07cfcb59f1437cb25db793acdb6148f6,res_ports = [],0,1,0.14285714285714285,88
1a76d75d07cfcb59f1437cb25db793acdb6148f6,port_data = port['port'],0,1,0.14285714285714285,89
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def _test_update_port_binding_profile(self, profile):",0,0,0.0,90
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with self.port() as port:,0,0,0.0,91
1a76d75d07cfcb59f1437cb25db793acdb6148f6,neutron_context=ctx)['port'],0,0,0.0,92
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._check_default_port_binding_profile(port),0,0,0.0,93
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_update_port_binding_profile_none(self):,0,0,0.0,94
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._test_update_port_binding_profile(None),0,0,0.0,95
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_update_port_binding_profile_with_empty_dict(self):,0,0,0.0,96
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._test_update_port_binding_profile({}),0,0,0.0,97
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_port_create_portinfo_non_admin(self):,0,0,0.0,98
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.network(set_context=True, tenant_id='test') as net1:",0,0,0.0,99
1a76d75d07cfcb59f1437cb25db793acdb6148f6,try:,0,0,0.0,100
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with self.subnet(network=net1) as subnet1:,0,0,0.0,101
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(subnet=subnet1,",0,0,0.0,102
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"set_context=True, tenant_id='test'):",0,0,0.0,103
1a76d75d07cfcb59f1437cb25db793acdb6148f6,pass,0,0,0.0,104
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"expected_res_status=403,",0,0,0.0,105
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"arg_list=(portbindings.PROFILE,),",0,0,0.0,106
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"set_context=True, tenant_id='test',",0,0,0.0,107
1a76d75d07cfcb59f1437cb25db793acdb6148f6,except exc.HTTPClientError:,0,0,0.0,108
1a76d75d07cfcb59f1437cb25db793acdb6148f6,**profile_arg):,0,0,0.0,109
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_create_port_binding_profile_with_empty_dict(self):,0,0,0.0,110
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._test_create_port_binding_profile({}),0,0,0.0,111
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return context.Context(user_id=None,",0,0,0.0,112
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._test_create_port_binding_profile(None),0,0,0.0,113
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"query_params='%s=%s' % (portbindings.HOST_ID, self.hostname))",0,0,0.0,114
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with self.network() as net1:,0,0,0.0,115
1a76d75d07cfcb59f1437cb25db793acdb6148f6,req.get_response(self.api),0,0,0.0,116
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertEqual('testhosttemp', port[portbindings.HOST_ID])",0,0,0.0,117
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_ports_vif_host_list(self):,0,0,0.0,118
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name2'),",0,0,0.0,119
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name3',",0,0,0.0,120
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg),) as (port1, _port2, port3):",0,0,0.0,121
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._test_list_resources(,0,0,0.0,122
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"'port', (port1, port3),",0,0,0.0,123
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def _get_non_admin_context(self):,0,0,0.0,124
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_create_port_binding_profile_none(self):,0,0,0.0,125
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"tenant_id=self._tenant_id,",0,0,0.0,126
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"is_admin=False,",0,0,0.0,127
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"read_deleted=""no"")",0,0,0.0,128
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def _check_default_port_binding_profile(self, port):",0,0,0.0,129
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertIn('id', port)",0,0,0.0,130
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def _test_create_port_binding_profile(self, profile):",0,0,0.0,131
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(arg_list=(portbindings.PROFILE,),",0,0,0.0,132
1a76d75d07cfcb59f1437cb25db793acdb6148f6,**profile_arg) as port:,0,0,0.0,133
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._check_default_port_binding_profile(port['port']),0,0,0.0,134
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_port_update_portinfo_non_admin(self):,0,0,0.0,135
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"arg_list=(portbindings.VNIC_TYPE,),",1,0,0.0,136
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with self.port(subnet=subnet1) as port:,0,0,0.0,137
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"{'port': profile_arg},",0,0,0.0,138
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(name='name1', arg_list=(portbindings.VNIC_TYPE,),",0,0,0.0,139
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**vnic_arg), self.port(name='name2'):",0,0,0.0,140
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"arg_list=(portbindings.VNIC_TYPE,),",0,0,0.0,141
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**vnic_arg) as port1,\",0,0,0.0,142
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name2') as port2,\",0,0,0.0,143
1a76d75d07cfcb59f1437cb25db793acdb6148f6,**vnic_arg) as port3:,0,0,0.0,144
1a76d75d07cfcb59f1437cb25db793acdb6148f6,import contextlib,1,0,0.0,145
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with contextlib.nested(self.port(), self.port()):",1,0,0.0,146
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with contextlib.nested(,1,0,0.0,147
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name1',",1,0,0.0,148
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"arg_list=(portbindings.HOST_ID,),",1,0,0.0,149
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg),",1,0,0.0,150
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.port(name='name2')):,1,0,0.0,151
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name2')) as (port1, port2):",1,0,0.0,152
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name2'),",1,0,0.0,153
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name3',",1,0,0.0,154
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg),) as (port1, _port2, port3):",1,0,0.0,155
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_ports_vif_host_update(self):,0,0,0.0,156
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**vnic_arg),",1,0,0.0,157
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**vnic_arg),) as (port1, port2, port3):",1,0,0.0,158
1a76d75d07cfcb59f1437cb25db793acdb6148f6,from oslo_config import cfg,1,0,0.0,159
1a76d75d07cfcb59f1437cb25db793acdb6148f6,**host_arg) as port3:,0,0,0.0,160
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name3',",0,0,0.0,161
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name2'),\",0,0,0.0,162
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertEqual(expected, port_filter)",0,0,0.0,163
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"expected_code=404,",0,0,0.0,164
1a76d75d07cfcb59f1437cb25db793acdb6148f6,neutron_context=ctx),0,0,0.0,165
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"tenant_id=self._tenant_id,",1,0,0.0,166
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"is_admin=False,",1,0,0.0,167
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"read_deleted=""no"")",1,0,0.0,168
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertNotIn(portbindings.VIF_TYPE, port)",0,0,0.0,169
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertNotIn(portbindings.CAPABILITIES, port)",0,0,0.0,170
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertIn('status', port)",0,0,0.0,171
1a76d75d07cfcb59f1437cb25db793acdb6148f6,if self.VIF_DETAILS is None:,0,0,0.0,172
1a76d75d07cfcb59f1437cb25db793acdb6148f6,return,0,0,0.0,173
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg) as port1,\",0,0,0.0,174
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertEqual(self.VIF_DETAILS, port[portbindings.VIF_DETAILS])",0,0,0.0,175
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertEqual(vif_details[portbindings.CAP_PORT_FILTER],",1,0,0.0,176
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.HAS_PORT_FILTER),1,0,0.0,177
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(), self.port():",0,0,0.0,178
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(name='name1',",0,0,0.0,179
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"arg_list=(portbindings.HOST_ID,),",0,0,0.0,180
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg), self.port(name='name2'):",0,0,0.0,181
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(name='name1', arg_list=(portbindings.HOST_ID,),",0,0,0.0,182
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg) as port1, self.port(name='name2') as port2:",0,0,0.0,183
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name2')) as (port1, port2):",0,0,0.0,184
1a76d75d07cfcb59f1437cb25db793acdb6148f6,page_reverse=False):,1,0,0.0,185
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.assertFalse(port[portbindings.HOST_ID]),0,0,0.0,186
1a76d75d07cfcb59f1437cb25db793acdb6148f6,fields),0,0,0.0,187
1a76d75d07cfcb59f1437cb25db793acdb6148f6,test_bindings.PortBindingsTestCase):,1,0,0.0,188
1a76d75d07cfcb59f1437cb25db793acdb6148f6,from quantum.db import portbindings_db,0,0,0.0,189
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"agentschedulers_db.AgentSchedulerDbMixin,",0,0,0.0,190
1a76d75d07cfcb59f1437cb25db793acdb6148f6,portbindings_db.PortBindingMixin):,0,0,0.0,191
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,",0,0,0.0,192
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self._process_portbindings_create_and_update(context,",0,0,0.0,193
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"port_data, port)",0,0,0.0,194
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return self._check_portbindings_view_auth(context, port)",0,0,0.0,195
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"id,",0,0,0.0,196
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"sorts=None, limit=None, marker=None, page_reverse=False):",0,0,0.0,197
1a76d75d07cfcb59f1437cb25db793acdb6148f6,class TestOpenvswitchPortBindingNoSG(TestOpenvswitchPortBinding):,0,0,0.0,198
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self).get_ports(context, filters, fields, sorts,",0,0,0.0,199
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"limit, marker, page_reverse)",0,0,0.0,200
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self._check_portbindings_view_auth(context, port)",0,0,0.0,201
1a76d75d07cfcb59f1437cb25db793acdb6148f6,res_ports.append(port),0,0,0.0,202
1a76d75d07cfcb59f1437cb25db793acdb6148f6,return res_ports,0,0,0.0,203
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"port['port'],",0,0,0.0,204
1a76d75d07cfcb59f1437cb25db793acdb6148f6,updated_port),0,0,0.0,205
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return self._check_portbindings_view_auth(context, updated_port)",0,0,0.0,206
1a76d75d07cfcb59f1437cb25db793acdb6148f6,agentschedulers_db.AgentSchedulerDbMixin):,1,0,0.0,207
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"OpenvswitchPluginV2TestCase,",1,0,0.0,208
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"super(TestOpenvswitchPortBinding, self).setUp()",0,0,0.0,209
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"if self._check_view_auth(context, port, self.binding_view):",1,0,0.0,210
1a76d75d07cfcb59f1437cb25db793acdb6148f6,class TestLinuxBridgePortBindingNoSG(TestLinuxBridgePortBinding):,0,0,0.0,211
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"class TestLinuxBridgeNetworksV2(test_plugin.TestNetworksV2,",0,0,0.0,212
1a76d75d07cfcb59f1437cb25db793acdb6148f6,LinuxBridgePluginV2TestCase):,0,0,0.0,213
1a76d75d07cfcb59f1437cb25db793acdb6148f6,pass,0,0,0.0,214
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"class TestLinuxBridgePortsV2(test_plugin.TestPortsV2,",0,0,0.0,215
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"class TestLinuxBridgePortBinding(LinuxBridgePluginV2TestCase,",0,0,0.0,216
1a76d75d07cfcb59f1437cb25db793acdb6148f6,test_bindings.PortBindingsTestCase):,0,0,0.0,217
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def setUp(self):,0,0,0.0,218
1a76d75d07cfcb59f1437cb25db793acdb6148f6,test_sg_rpc.set_firewall_driver(self.FIREWALL_DRIVER),0,0,0.0,219
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"super(TestLinuxBridgePortBinding, self).setUp()",0,0,0.0,220
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"class TestLinuxBridgePortsV2(test_plugin.TestPortsV2,",1,0,0.0,221
1a76d75d07cfcb59f1437cb25db793acdb6148f6,test_sg_rpc.set_firewall_driver(self.FIREWALL_DRIVER),0,0,0.0,222
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"LinuxBridgePluginV2TestCase,",1,0,0.0,223
1a76d75d07cfcb59f1437cb25db793acdb6148f6,test_bindings.PortBindingsTestCase):,1,0,0.0,224
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"class TestLinuxBridgeNetworksV2(test_plugin.TestNetworksV2,",1,0,0.0,225
1a76d75d07cfcb59f1437cb25db793acdb6148f6,LinuxBridgePluginV2TestCase):,1,0,0.0,226
1a76d75d07cfcb59f1437cb25db793acdb6148f6,pass,1,0,0.0,227
1a76d75d07cfcb59f1437cb25db793acdb6148f6,OpenvswitchPluginV2TestCase):,0,0,0.0,228
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"class TestOpenvswitchPortBinding(OpenvswitchPluginV2TestCase,",0,0,0.0,229
1a76d75d07cfcb59f1437cb25db793acdb6148f6,test_bindings.PortBindingsTestCase):,0,0,0.0,230
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def setUp(self, firewall_driver=None):",0,0,0.0,231
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def _extend_port_dict_binding(self, context, port):",1,0,0.0,232
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return self._extend_port_dict_binding(context, port)",1,0,0.0,233
1a76d75d07cfcb59f1437cb25db793acdb6148f6,else:,0,0,0.0,234
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"is_admin=False,",0,0,0.0,235
1a76d75d07cfcb59f1437cb25db793acdb6148f6,**host_arg):,0,0,0.0,236
1a76d75d07cfcb59f1437cb25db793acdb6148f6,pass,0,0,0.0,237
1a76d75d07cfcb59f1437cb25db793acdb6148f6,except exc.HTTPClientError:,0,0,0.0,238
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_port_vif_host(self):,0,0,0.0,239
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(name='name', arg_list=(portbindings.HOST_ID,),",0,0,0.0,240
1a76d75d07cfcb59f1437cb25db793acdb6148f6,**host_arg) as port:,0,0,0.0,241
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._check_response_portbindings_host(port['port']),0,0,0.0,242
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._check_response_portbindings_host(port),0,0,0.0,243
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"tenant_id=self._tenant_id,",0,0,0.0,244
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"read_deleted=""no"")",0,0,0.0,245
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"set_context=True,",0,0,0.0,246
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self._check_response_no_portbindings_host(non_admin_port),0,0,0.0,247
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_ports_vif_host(self):,0,0,0.0,248
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"cfg.CONF.set_default('allow_overlapping_ips', True)",0,0,0.0,249
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with contextlib.nested(,0,0,0.0,250
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.port(name='name1',",0,0,0.0,251
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"**host_arg),",0,0,0.0,252
1a76d75d07cfcb59f1437cb25db793acdb6148f6,self.port(name='name2')):,0,0,0.0,253
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertEqual(2, len(ports))",0,0,0.0,254
1a76d75d07cfcb59f1437cb25db793acdb6148f6,if port['name'] == 'name1':,0,0,0.0,255
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"tenant_id='test',",0,0,0.0,256
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"arg_list=(portbindings.HOST_ID,),",0,0,0.0,257
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"id, fields)",1,0,0.0,258
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def _check_response_portbindings_host(self, port):",0,0,0.0,259
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self._extend_port_dict_binding(context, port)",1,0,0.0,260
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return self._fields(port, fields)",1,0,0.0,261
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"sorts=None, limit=None, marker=None,",1,0,0.0,262
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"context, filters, fields, sorts, limit, marker,",1,0,0.0,263
1a76d75d07cfcb59f1437cb25db793acdb6148f6,page_reverse),1,0,0.0,264
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"return self._extend_port_dict_binding(context, updated_port)",1,0,0.0,265
1a76d75d07cfcb59f1437cb25db793acdb6148f6,from webob import exc,0,0,0.0,266
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"'ports', port_id, quantum_context=ctx)['port']",0,0,0.0,267
1a76d75d07cfcb59f1437cb25db793acdb6148f6,class PortBindingsHostTestCaseMixin(object):,0,0,0.0,268
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertEqual(port[portbindings.HOST_ID], self.hostname)",0,0,0.0,269
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"expected_res_status=403,",0,0,0.0,270
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"def _check_response_no_portbindings_host(self, port):",0,0,0.0,271
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertIn('status', port)",0,0,0.0,272
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"self.assertNotIn(portbindings.HOST_ID, port)",0,0,0.0,273
1a76d75d07cfcb59f1437cb25db793acdb6148f6,def test_port_vif_non_admin(self):,0,0,0.0,274
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.network(set_context=True,",0,0,0.0,275
1a76d75d07cfcb59f1437cb25db793acdb6148f6,tenant_id='test') as net1:,0,0,0.0,276
1a76d75d07cfcb59f1437cb25db793acdb6148f6,with self.subnet(network=net1) as subnet1:,0,0,0.0,277
1a76d75d07cfcb59f1437cb25db793acdb6148f6,try:,0,0,0.0,278
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"with self.port(subnet=subnet1,",0,0,0.0,279
1a76d75d07cfcb59f1437cb25db793acdb6148f6,"cfg.CONF.set_default('allow_overlapping_ips', True)",1,0,0.0,280
