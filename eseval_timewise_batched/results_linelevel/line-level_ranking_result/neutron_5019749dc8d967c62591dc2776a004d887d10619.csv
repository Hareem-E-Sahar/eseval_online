commit_id,line,line_level_label,count,line_score,row
5019749dc8d967c62591dc2776a004d887d10619,msg = (_('Cannot add floating IP to port on subnet %s ',1,10,1.0,1
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%s' is not a valid IP subnet"") % data",1,9,0.9,2
5019749dc8d967c62591dc2776a004d887d10619,"help=_('number of ports allowed per tenant, minus for '",1,9,0.9,3
5019749dc8d967c62591dc2776a004d887d10619,"msg = (_(""Router already has a port on subnet %s"")",0,9,0.9,4
5019749dc8d967c62591dc2776a004d887d10619,"msg = (_(""Router already has a port on subnet %s"")",1,9,0.9,5
5019749dc8d967c62591dc2776a004d887d10619,help=_('True to delete all ports on all the OpenvSwitch ',1,9,0.9,6
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%s' is not a valid IP subnet"") % data",0,9,0.9,7
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%s' is not a valid nameserver"") % ip",1,8,0.8,8
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Peer patch port in integration bridge for tunnel """,1,8,0.8,9
5019749dc8d967c62591dc2776a004d887d10619,'bridges. False to delete ports created by ',1,8,0.8,10
5019749dc8d967c62591dc2776a004d887d10619,"""creation of a subnet is being called without a """,0,8,0.8,11
5019749dc8d967c62591dc2776a004d887d10619,'but it must match here and in the configuration used ',0,8,0.8,12
5019749dc8d967c62591dc2776a004d887d10619,"""provide the metadata IP but the DHCP server can be """,0,8,0.8,13
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Cannot have multiple router ports with the """,0,8,0.8,14
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Peer patch port in tunnel bridge for integration """,1,8,0.8,15
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""%(host)s is not a valid IP or hostname. Details: """,0,8,0.8,16
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Extension %s not supported by any of loaded """,0,8,0.8,17
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Unable to find bridge for device: %s'), device.name)",1,8,0.8,18
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of ports allowed per tenant, minus for '",1,8,0.8,19
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of routers allowed per tenant, -1 for '",1,8,0.8,20
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of ports allowed per tenant, minus for '",0,8,0.8,21
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Extension %s not supported by any of loaded plugins""),",1,8,0.8,22
5019749dc8d967c62591dc2776a004d887d10619,"""will only be activated when the subnet does not """,0,7,0.7000000000000001,23
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Hostname to be used by the Neutron server, agents and """,0,7,0.7000000000000001,24
5019749dc8d967c62591dc2776a004d887d10619,"""to create a subnet and that subnet will not be """,0,7,0.7000000000000001,25
5019749dc8d967c62591dc2776a004d887d10619,"""Specifies by UUID the pool to be used in case where """,0,7,0.7000000000000001,26
5019749dc8d967c62591dc2776a004d887d10619,' a specific IP when assigning a floating IP') %,1,7,0.7000000000000001,27
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Name of bridge used for external network """,0,7,0.7000000000000001,28
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Name of bridge used for external network """,1,7,0.7000000000000001,29
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Name of bridge used for external network """,1,7,0.7000000000000001,30
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Network %s does not contain any IPv4 subnet"") % f_net_id",0,7,0.7000000000000001,31
5019749dc8d967c62591dc2776a004d887d10619,"""reason to. This is the name of the OVS integration """,0,7,0.7000000000000001,32
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%s' is not a list"") % data",1,7,0.7000000000000001,33
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Hostname to be used by the neutron server, agents and """,1,7,0.7000000000000001,34
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%s' is not a list"") % data",0,7,0.7000000000000001,35
5019749dc8d967c62591dc2776a004d887d10619,"'If not specified, the default is equal to the number '",0,7,0.7000000000000001,36
5019749dc8d967c62591dc2776a004d887d10619,"'If not specified, the default is equal to the number '",1,7,0.7000000000000001,37
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""TCP Port to listen for metadata server """,1,7,0.7000000000000001,38
5019749dc8d967c62591dc2776a004d887d10619,"""reason to. This is the name of the OVS integration """,1,7,0.7000000000000001,39
5019749dc8d967c62591dc2776a004d887d10619,"""option in the ML2 plug-in configuration file on the """,1,7,0.7000000000000001,40
5019749dc8d967c62591dc2776a004d887d10619,"""an IP address that belongs to the port from which """,1,7,0.7000000000000001,41
5019749dc8d967c62591dc2776a004d887d10619,# Add new prefix to an existing ipv6 port with the same network id,0,7,0.7000000000000001,42
5019749dc8d967c62591dc2776a004d887d10619,"msg = (_('Cannot create floating IP and bind it to %s, '",0,7,0.7000000000000001,43
5019749dc8d967c62591dc2776a004d887d10619,help=_('Keep in track in the database of current resource ',1,7,0.7000000000000001,44
5019749dc8d967c62591dc2776a004d887d10619,# Only allow one router port with IPv6 subnets per network id,0,7,0.7000000000000001,45
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_('Attempted to remove chain %s which does not exist'),",1,7,0.7000000000000001,46
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Unable to find requested field: %(field)s in """,1,7,0.7000000000000001,47
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of floating IPs allowed per tenant, '",1,7,0.7000000000000001,48
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of security rules allowed per tenant, '",1,7,0.7000000000000001,49
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Default number of resource allowed per tenant, '",1,7,0.7000000000000001,50
5019749dc8d967c62591dc2776a004d887d10619,# Minimize the cost of checking for child exit by extending the,0,7,0.7000000000000001,51
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The driver used to manage the virtual """,1,7,0.7000000000000001,52
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The driver used to manage the virtual """,1,7,0.7000000000000001,53
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('Killing dhcpmasq for network since all subnets have ',1,7,0.7000000000000001,54
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW('Attempted to remove chain %s which does not exist'),",0,7,0.7000000000000001,55
5019749dc8d967c62591dc2776a004d887d10619,message = _('Pidfile %s already exist. Daemon already running?'),1,7,0.7000000000000001,56
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_('Error unable to destroy namespace: %s'), namespace)",1,7,0.7000000000000001,57
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""%(tap_device_name)s already exists on bridge """,1,7,0.7000000000000001,58
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Attribute type descriptor is not a dict. Unable to """,1,7,0.7000000000000001,59
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('DHCP port deletion for %(network_id)s request from ',1,7,0.7000000000000001,60
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%(data)s' is not a valid hostname. Reason: %(reason)s"") % {",0,7,0.7000000000000001,61
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%(host)s' is not a valid nameserver. %(msg)s"") % {",0,7,0.7000000000000001,62
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Attribute type descriptor is not a dict. Unable to """,0,7,0.7000000000000001,63
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Tap device: %s does not exist on """,1,7,0.7000000000000001,64
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Tap device: %s does not exist on """,0,7,0.7000000000000001,65
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('DHCP port remove fixed_ip for %(subnet_id)s request ',1,7,0.7000000000000001,66
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Default IPv4 subnet pool to be used for automatic """,0,6,0.6000000000000001,67
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Force to use DHCP to get Metadata on all networks."")),",1,6,0.6000000000000001,68
5019749dc8d967c62591dc2776a004d887d10619,"""configured on the server should have mappings to """,0,6,0.6000000000000001,69
5019749dc8d967c62591dc2776a004d887d10619,"""exist, and should have a physical network interface """,0,6,0.6000000000000001,70
5019749dc8d967c62591dc2776a004d887d10619,"""node-specific Open vSwitch bridge names to be used """,0,6,0.6000000000000001,71
5019749dc8d967c62591dc2776a004d887d10619,"""tuples mapping physical network names to the agent's """,0,6,0.6000000000000001,72
5019749dc8d967c62591dc2776a004d887d10619,"""virtual functions that should not be used for virtual """,0,6,0.6000000000000001,73
5019749dc8d967c62591dc2776a004d887d10619,"""function to be used for VLAN networks. All physical """,0,6,0.6000000000000001,74
5019749dc8d967c62591dc2776a004d887d10619,"""node-specific physical network interfaces to be used """,0,6,0.6000000000000001,75
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Default IPv6 subnet pool to be used for automatic """,0,6,0.6000000000000001,76
5019749dc8d967c62591dc2776a004d887d10619,"""will be used unless passed explicitly to the subnet """,0,6,0.6000000000000001,77
5019749dc8d967c62591dc2776a004d887d10619,"""configured to request host routes via DHCP (Option """,0,6,0.6000000000000001,78
5019749dc8d967c62591dc2776a004d887d10619,'by the Nova Metadata Server. NOTE: Nova uses the same ',0,6,0.6000000000000001,79
5019749dc8d967c62591dc2776a004d887d10619,"""This value should be set to the UUID of that external """,0,6,0.6000000000000001,80
5019749dc8d967c62591dc2776a004d887d10619,"""False for all agents if all routers must have an """,0,6,0.6000000000000001,81
5019749dc8d967c62591dc2776a004d887d10619,"""single agent in a Neutron deployment, and may be """,0,6,0.6000000000000001,82
5019749dc8d967c62591dc2776a004d887d10619,"""configured. This option should be True only for a """,0,6,0.6000000000000001,83
5019749dc8d967c62591dc2776a004d887d10619,"""not be injected in VMs, as they will be able to reach """,0,6,0.6000000000000001,84
5019749dc8d967c62591dc2776a004d887d10619,"""connected to a Neutron router from which the VMs send """,0,6,0.6000000000000001,85
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Allows for serving metadata requests coming from a """,0,6,0.6000000000000001,86
5019749dc8d967c62591dc2776a004d887d10619,"""to the DHCP request. If this option is set, then the """,0,6,0.6000000000000001,87
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""In some cases the Neutron router is not present to """,0,6,0.6000000000000001,88
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""UUID of external network for routers implemented """,1,6,0.6000000000000001,89
5019749dc8d967c62591dc2776a004d887d10619,"""contain any router port. The guest instance must be """,0,6,0.6000000000000001,90
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Allows for serving metadata requests from a """,1,6,0.6000000000000001,91
5019749dc8d967c62591dc2776a004d887d10619,help=_('Range of seconds to randomly delay when starting the ',0,6,0.6000000000000001,92
5019749dc8d967c62591dc2776a004d887d10619,"""list of virtual functions that should not be used """,1,6,0.6000000000000001,93
5019749dc8d967c62591dc2776a004d887d10619,:returns: a dict mapping keys to values or to list of values,0,6,0.6000000000000001,94
5019749dc8d967c62591dc2776a004d887d10619,"""not required, set this to False for a performance """,0,6,0.6000000000000001,95
5019749dc8d967c62591dc2776a004d887d10619,"""added to any ports that have port security disabled. """,1,6,0.6000000000000001,96
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The number of seconds the agent will wait between """,1,6,0.6000000000000001,97
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Use veths instead of patch ports to interconnect the """,1,6,0.6000000000000001,98
5019749dc8d967c62591dc2776a004d887d10619,"""configured on the server should have mappings to """,1,6,0.6000000000000001,99
5019749dc8d967c62591dc2776a004d887d10619,"""exist, and should have a physical network interface """,1,6,0.6000000000000001,100
5019749dc8d967c62591dc2776a004d887d10619,"""node-specific Open vSwitch bridge names to be used """,1,6,0.6000000000000001,101
5019749dc8d967c62591dc2776a004d887d10619,"""tuples mapping physical network names to the agent's """,1,6,0.6000000000000001,102
5019749dc8d967c62591dc2776a004d887d10619,"""value must match the value of the 'overlay_ip_version' """,1,6,0.6000000000000001,103
5019749dc8d967c62591dc2776a004d887d10619,"""of the host network interfaces. The IP version of this """,1,6,0.6000000000000001,104
5019749dc8d967c62591dc2776a004d887d10619,help=_('Location of Metadata Proxy UNIX domain ',1,6,0.6000000000000001,105
5019749dc8d967c62591dc2776a004d887d10619,help=_('Location of Metadata Proxy UNIX domain ',0,6,0.6000000000000001,106
5019749dc8d967c62591dc2776a004d887d10619,#    not use this file except in compliance with the License. You may obtain,0,6,0.6000000000000001,107
5019749dc8d967c62591dc2776a004d887d10619,'Neutron on integration and external network ',1,6,0.6000000000000001,108
5019749dc8d967c62591dc2776a004d887d10619,help=_('Range of seconds to randomly delay when starting the ',1,6,0.6000000000000001,109
5019749dc8d967c62591dc2776a004d887d10619,#    not use this file except in compliance with the License. You may obtain,0,6,0.6000000000000001,110
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of subnets allowed per tenant, '",1,6,0.6000000000000001,111
5019749dc8d967c62591dc2776a004d887d10619,help=_('Default number of resource allowed per tenant. ',1,6,0.6000000000000001,112
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Key %(key)s in mapping: '%(mapping)s' not """,1,6,0.6000000000000001,113
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Key %(key)s in mapping: '%(mapping)s' not """,0,6,0.6000000000000001,114
5019749dc8d967c62591dc2776a004d887d10619,:returns: a dict mapping keys to values or to list of values,0,6,0.6000000000000001,115
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Key %(key)s in mapping: '%(mapping)s' not """,1,6,0.6000000000000001,116
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Key %(key)s in mapping: '%(mapping)s' not """,0,6,0.6000000000000001,117
5019749dc8d967c62591dc2776a004d887d10619,"""Set to false to disallow the addition of comments to """,0,6,0.6000000000000001,118
5019749dc8d967c62591dc2776a004d887d10619,"""force the DHCP server to append specific host routes """,0,6,0.6000000000000001,119
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Use the root helper when listing the namespaces on a """,0,6,0.6000000000000001,120
5019749dc8d967c62591dc2776a004d887d10619,"for multiple l3 agents on the same host, without stepping on each",1,6,0.6000000000000001,121
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('Killing dhcpmasq for network since all subnets have ',0,6,0.6000000000000001,122
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('Pidfile %s already exist. Daemon already ',0,6,0.6000000000000001,123
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""The external network bridge '%s' does not exist""),",1,6,0.6000000000000001,124
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Info for router %s were not found. """,1,6,0.6000000000000001,125
5019749dc8d967c62591dc2776a004d887d10619,msg = _('Failed trying to delete namespace: %s') % ns,1,6,0.6000000000000001,126
5019749dc8d967c62591dc2776a004d887d10619,msg = _('An interface driver must be specified'),1,6,0.6000000000000001,127
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Info for router %s were not found. """,0,6,0.6000000000000001,128
5019749dc8d967c62591dc2776a004d887d10619,msg = _LE('An interface driver must be specified'),0,6,0.6000000000000001,129
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The driver used to manage the DHCP server."")),",1,6,0.6000000000000001,130
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Unable to retrieve bridges. Exception: %s""), e)",1,6,0.6000000000000001,131
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Unable to retrieve bridges. Exception: %s""), e)",0,6,0.6000000000000001,132
5019749dc8d967c62591dc2776a004d887d10619,"""""""Destroy router namespaces on the host to eliminate all stale",1,6,0.6000000000000001,133
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('No DHCP started for %s'), self.network.id)",1,6,0.6000000000000001,134
5019749dc8d967c62591dc2776a004d887d10619,The argument routers is the list of routers that are recorded in,0,6,0.6000000000000001,135
5019749dc8d967c62591dc2776a004d887d10619,help=_('Default number of resource allowed per tenant. ',0,6,0.6000000000000001,136
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of security rules allowed per tenant. ',0,6,0.6000000000000001,137
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of security groups allowed per tenant. ',0,6,0.6000000000000001,138
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of floating IPs allowed per tenant. ',0,6,0.6000000000000001,139
5019749dc8d967c62591dc2776a004d887d10619,' periodic task scheduler to reduce stampeding.',1,6,0.6000000000000001,140
5019749dc8d967c62591dc2776a004d887d10619,help=_('Range of seconds to randomly delay when starting the ',0,6,0.6000000000000001,141
5019749dc8d967c62591dc2776a004d887d10619,help=_('Location of Metadata Proxy UNIX domain ',1,6,0.6000000000000001,142
5019749dc8d967c62591dc2776a004d887d10619,help=_('Location of Metadata Proxy UNIX domain ',0,6,0.6000000000000001,143
5019749dc8d967c62591dc2776a004d887d10619,raise Exception(_('No port for this device %s') % device_name),1,6,0.6000000000000001,144
5019749dc8d967c62591dc2776a004d887d10619,msg = (_('Port %s has multiple fixed IPv4 addresses.  Must ',0,6,0.6000000000000001,145
5019749dc8d967c62591dc2776a004d887d10619,"' does not yet exist. Checking for a reserved port.',",0,6,0.6000000000000001,146
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of security groups allowed per tenant,'",1,6,0.6000000000000001,147
5019749dc8d967c62591dc2776a004d887d10619,msg = _('An interface driver must be specified'),1,6,0.6000000000000001,148
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('DHCP port remove fixed_ip for %(subnet_id)s request ',0,6,0.6000000000000001,149
5019749dc8d967c62591dc2776a004d887d10619,"LOG, _LW(""Registering resources to apply quota limits to using the """,0,6,0.6000000000000001,150
5019749dc8d967c62591dc2776a004d887d10619,"' does not yet exist. Checking for a reserved port.'),",1,6,0.6000000000000001,151
5019749dc8d967c62591dc2776a004d887d10619,# only one subnet on port - delete the port,0,6,0.6000000000000001,152
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Unable to find requested field: %(field)s in target: """,0,6,0.6000000000000001,153
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_('Option ""%(option)s"" must be supported by command '",1,6,0.6000000000000001,154
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Adding device %(tap_device_name)s to bridge """,1,6,0.6000000000000001,155
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_LW('Option ""%(option)s"" must be supported by command '",0,6,0.6000000000000001,156
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Method %(func_name)s cannot be cached due to """,1,6,0.6000000000000001,157
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Method %(func_name)s cannot be cached due to """,0,6,0.6000000000000001,158
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('DHCP port %(device_id)s on network %(network_id)s ',1,6,0.6000000000000001,159
5019749dc8d967c62591dc2776a004d887d10619,"raise TypeError(_(""TLD '%s' must not be all numeric"") % names[-1])",0,6,0.6000000000000001,160
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('DHCP port deletion for %(network_id)s request from ',0,6,0.6000000000000001,161
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Unable to retrieve bridges. Exception: %s""), e)",0,6,0.6000000000000001,162
5019749dc8d967c62591dc2776a004d887d10619,LOG.info(_('Attempted to remove port filter which is not ',1,6,0.6000000000000001,163
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Extension file %(f)s wasn't loaded due to """,1,6,0.6000000000000001,164
5019749dc8d967c62591dc2776a004d887d10619,LOG.info(_LI('Attempted to remove port filter which is not ',0,6,0.6000000000000001,165
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_LW('Attempted to get traffic counters of chain %s which ',0,6,0.6000000000000001,166
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_('Attempted to get traffic counters of chain %s which ',1,6,0.6000000000000001,167
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Unable to retrieve bridges. Exception: %s""), e)",1,6,0.6000000000000001,168
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Unable to find bridge for device: %s', device.name)",0,6,0.6000000000000001,169
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE('Error unable to destroy namespace: %s'), namespace)",0,6,0.6000000000000001,170
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Extension file %(f)s wasn't loaded due to """,0,6,0.6000000000000001,171
5019749dc8d967c62591dc2776a004d887d10619,"""metadata service will be activated for all the """,0,5,0.5,172
5019749dc8d967c62591dc2776a004d887d10619,"""Set to True to enable IPv6 Prefix Delegation for """,0,5,0.5,173
5019749dc8d967c62591dc2776a004d887d10619,'Instance-ID header with a shared secret to prevent ',0,5,0.5,174
5019749dc8d967c62591dc2776a004d887d10619,"'spoofing. You may select any string for a secret, '",0,5,0.5,175
5019749dc8d967c62591dc2776a004d887d10619,"""host routes to the DHCP request. The metadata service """,0,5,0.5,176
5019749dc8d967c62591dc2776a004d887d10619,"""octet is not 00, it will also be used. The others """,0,5,0.5,177
5019749dc8d967c62591dc2776a004d887d10619,"""create. If no pool is used, then a CIDR must be passed """,0,5,0.5,178
5019749dc8d967c62591dc2776a004d887d10619,"""allocated from any pool; it will be considered part of """,0,5,0.5,179
5019749dc8d967c62591dc2776a004d887d10619,"""To reserve a unique group for each possible """,0,5,0.5,180
5019749dc8d967c62591dc2776a004d887d10619,"""making subnet creation requests for IPv6 subnets """,0,5,0.5,181
5019749dc8d967c62591dc2776a004d887d10619,"""False if Neutron is being used in conjunction with """,0,5,0.5,182
5019749dc8d967c62591dc2776a004d887d10619,"""spurious broadcast traffic to the tunnel endpoints. """,0,5,0.5,183
5019749dc8d967c62591dc2776a004d887d10619,"""mapping physical network names to the agent's """,0,5,0.5,184
5019749dc8d967c62591dc2776a004d887d10619,"""listed in network_vlan_ranges on the server should """,0,5,0.5,185
5019749dc8d967c62591dc2776a004d887d10619,"""physical network device interfaces of SR-IOV physical """,0,5,0.5,186
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The DHCP server can assist with providing metadata """,0,5,0.5,187
5019749dc8d967c62591dc2776a004d887d10619,"""networks listed in network_vlan_ranges on the server """,0,5,0.5,188
5019749dc8d967c62591dc2776a004d887d10619,"""True will cause the DHCP server to append specific """,0,5,0.5,189
5019749dc8d967c62591dc2776a004d887d10619,msg = _('Router port must have exactly one fixed IP'),1,5,0.5,190
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The DHCP agent will resync its state with Neutron to """,0,5,0.5,191
5019749dc8d967c62591dc2776a004d887d10619,"""network. This option is deprecated and will be removed """,0,5,0.5,192
5019749dc8d967c62591dc2776a004d887d10619,"""Note: If you remove a bridge from this """,0,5,0.5,193
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of backlog requests to configure the ',1,5,0.5,194
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%s' Blank strings are not permitted"") % data",0,5,0.5,195
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Validator '%s' does not exist."") % k",0,5,0.5,196
5019749dc8d967c62591dc2776a004d887d10619,"# add_by_subnet is not used here, because the validation logic of",0,5,0.5,197
5019749dc8d967c62591dc2776a004d887d10619,"# remove_by_subnet is not used here, because the validation logic of",0,5,0.5,198
5019749dc8d967c62591dc2776a004d887d10619,# This should be True unless adding an IPv6 prefix to an existing port,0,5,0.5,199
5019749dc8d967c62591dc2776a004d887d10619,msg = (_('Floating IP %(floatingip_id) is associated ',0,5,0.5,200
5019749dc8d967c62591dc2776a004d887d10619,'provide a specific IPv4 address when assigning a ',0,5,0.5,201
5019749dc8d967c62591dc2776a004d887d10619,msg = (_('Port %s has multiple fixed IPs.  Must provide',1,5,0.5,202
5019749dc8d967c62591dc2776a004d887d10619,"""traffic. This option is deprecated and will be """,0,5,0.5,203
5019749dc8d967c62591dc2776a004d887d10619,"""traffic. This option is deprecated and will be """,1,5,0.5,204
5019749dc8d967c62591dc2776a004d887d10619,"""to skip the filtering and just run the command """,0,5,0.5,205
5019749dc8d967c62591dc2776a004d887d10619,"""system. This may not be required depending on the """,0,5,0.5,206
5019749dc8d967c62591dc2776a004d887d10619,"""traffic. This should be set to an empty value for the """,0,5,0.5,207
5019749dc8d967c62591dc2776a004d887d10619,"""list of virtual functions to exclude from """,0,5,0.5,208
5019749dc8d967c62591dc2776a004d887d10619,"""integration bridge as it won't be managed by the """,1,5,0.5,209
5019749dc8d967c62591dc2776a004d887d10619,"""integration bridge as it won't be managed by the """,0,5,0.5,210
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Port to listen on for OpenFlow connections. """,1,5,0.5,211
5019749dc8d967c62591dc2776a004d887d10619,help=_('Resource name(s) that are supported in quota ',1,5,0.5,212
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of ports allowed per tenant. ',1,5,0.5,213
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""IP address of local overlay (tunnel) network endpoint. """,1,5,0.5,214
5019749dc8d967c62591dc2776a004d887d10619,"""Note: If you remove a bridge from this """,1,5,0.5,215
5019749dc8d967c62591dc2776a004d887d10619,"""Support kernel without Open vSwitch patch port """,1,5,0.5,216
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""OVS datapath to use. 'system' is the default value and """,1,5,0.5,217
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Address to listen on for OpenFlow connections. """,1,5,0.5,218
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Timeout in seconds to wait for a single """,1,5,0.5,219
5019749dc8d967c62591dc2776a004d887d10619,"""Support kernel without Open vSwitch patch port """,0,5,0.5,220
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The number of seconds to wait before respawning the """,1,5,0.5,221
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Network types supported by the agent """,1,5,0.5,222
5019749dc8d967c62591dc2776a004d887d10619,"""this flag set to True). Spoofing rules will not be """,1,5,0.5,223
5019749dc8d967c62591dc2776a004d887d10619,"""the only way to disable protection will be via the """,1,5,0.5,224
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Set new timeout in seconds for new rpc calls after """,1,5,0.5,225
5019749dc8d967c62591dc2776a004d887d10619,"help=(_(""The subproject to execute the command against. """,1,5,0.5,226
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""TCP Port used by Nova metadata server."")),",1,5,0.5,227
5019749dc8d967c62591dc2776a004d887d10619,"msg = (_(""Cidr %(subnet_cidr)s of subnet """,1,5,0.5,228
5019749dc8d967c62591dc2776a004d887d10619,"msg = (_(""Cidr %(subnet_cidr)s of subnet """,0,5,0.5,229
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Value %(value)s in mapping: '%(mapping)s' """,1,5,0.5,230
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Value %(value)s in mapping: '%(mapping)s' """,0,5,0.5,231
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""OVS datapath to use. 'system' is the default value and """,0,5,0.5,232
5019749dc8d967c62591dc2776a004d887d10619,help=_('Use the root helper to read the namespaces from ',1,5,0.5,233
5019749dc8d967c62591dc2776a004d887d10619,"""traffic. This option is deprecated and will be removed """,1,5,0.5,234
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Default IPv4 subnet-pool to be used for automatic """,1,5,0.5,235
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Default IPv6 subnet-pool to be used for automatic """,1,5,0.5,236
5019749dc8d967c62591dc2776a004d887d10619,"""notation. To reserve a unique group for each possible """,1,5,0.5,237
5019749dc8d967c62591dc2776a004d887d10619,"""physical network device of SR-IOV physical """,1,5,0.5,238
5019749dc8d967c62591dc2776a004d887d10619,"""function to be used for VLAN networks. """,1,5,0.5,239
5019749dc8d967c62591dc2776a004d887d10619,"""on the server should have mappings to appropriate """,1,5,0.5,240
5019749dc8d967c62591dc2776a004d887d10619,"""The network_device in the mapping should appear in """,1,5,0.5,241
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Duplicate items in the list: '%s'"") % ', '.join(data)",0,5,0.5,242
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Duplicate items in the list: '%s'"") % ', '.join(data)",1,5,0.5,243
5019749dc8d967c62591dc2776a004d887d10619,help=_('MTU setting for device. This option will be removed in ',0,5,0.5,244
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Value %(value)s in mapping: '%(mapping)s' """,0,5,0.5,245
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Value %(value)s in mapping: '%(mapping)s' """,1,5,0.5,246
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Location for Metadata Proxy UNIX domain socket')),",1,5,0.5,247
5019749dc8d967c62591dc2776a004d887d10619,help=_('TCP Port to listen for metadata server',0,5,0.5,248
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""IP address used by Nova metadata server."")),",1,5,0.5,249
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Unable to configure IP address for """,0,5,0.5,250
5019749dc8d967c62591dc2776a004d887d10619,#NOTE (ameade): the has_atom should be removed after all of the,1,5,0.5,251
5019749dc8d967c62591dc2776a004d887d10619,# is not possible because of the way data are serialized.,1,5,0.5,252
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Cannot understand XML"")",1,5,0.5,253
5019749dc8d967c62591dc2776a004d887d10619,"""""""Provide the XML namespace to use if none is otherwise specified.""""""",1,5,0.5,254
5019749dc8d967c62591dc2776a004d887d10619,msg = _LE('Router id is required if not using namespaces.'),0,5,0.5,255
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('Failed to destroy stale router namespace ',0,5,0.5,256
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Ignoring multiple IPs on router port %s""),",0,5,0.5,257
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""The external network bridge '%s' does not exist""),",0,5,0.5,258
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('DHCP for %(net_id)s is stale, pid %(pid)d '",0,5,0.5,259
5019749dc8d967c62591dc2776a004d887d10619,"msg = _LE(""Failed to fetch router information for '%s'"")",0,5,0.5,260
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Error importing interface driver """,1,5,0.5,261
5019749dc8d967c62591dc2776a004d887d10619,msg = _('Router id is required if not using namespaces.'),1,5,0.5,262
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('Failed to destroy stale router namespace ',1,5,0.5,263
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Ignoring multiple IPs on router port %s""),",1,5,0.5,264
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Unable to configure IP address for """,1,5,0.5,265
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Failed to fetch router information for '%s'"")",1,5,0.5,266
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('DHCP for %(net_id)s pid %(pid)d is stale, ignoring '",1,5,0.5,267
5019749dc8d967c62591dc2776a004d887d10619,"""""""Fake RPC plugin to bypass any RPC calls.""""""",0,5,0.5,268
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('Setting gateway for dhcp netns on net %(n)s to ',0,5,0.5,269
5019749dc8d967c62591dc2776a004d887d10619,"As some stale router namespaces may not be able to be deleted, only",0,5,0.5,270
5019749dc8d967c62591dc2776a004d887d10619,# RFC 1123 hints that a TLD can't be all numeric. last is a TLD if,0,5,0.5,271
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Failed to set-up %(type)s tunnel port to %(ip)s""),",0,5,0.5,272
5019749dc8d967c62591dc2776a004d887d10619,help=_('range of seconds to randomly delay when starting the',1,5,0.5,273
5019749dc8d967c62591dc2776a004d887d10619,# Log only once the context has been configured to prevent,0,5,0.5,274
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of routers allowed per tenant. ',0,5,0.5,275
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of ports allowed per tenant. ',0,5,0.5,276
5019749dc8d967c62591dc2776a004d887d10619,"""""""Destroy stale router namespaces on host when L3 agent restarts",0,5,0.5,277
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('Failed to destroy stale router namespace ',0,5,0.5,278
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Failed unplugging interface '%s'""), device_name)",0,5,0.5,279
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Failed synchronizing routers due to RPC error""))",0,5,0.5,280
5019749dc8d967c62591dc2776a004d887d10619,# Resync is not necessary for the cleanup of stale,0,5,0.5,281
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Location for Metadata Proxy UNIX domain socket')),",0,5,0.5,282
5019749dc8d967c62591dc2776a004d887d10619,help=_('Location for Metadata Proxy UNIX domain socket')),1,5,0.5,283
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Cannot understand XML"")",0,5,0.5,284
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Cannot understand XML"")",1,5,0.5,285
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'%(data)s' isn't a recognized IP subnet cidr,""",0,5,0.5,286
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Failed synchronizing routers due to RPC error""))",1,5,0.5,287
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The type of tunnels to use when utilizing tunnels, """,1,5,0.5,288
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('DHCP for %(net_id)s is stale, pid %(pid)d '",1,5,0.5,289
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Unable to obtain MAC address for unique ID. """,0,5,0.5,290
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW('Failed to delete namespace %s'), namespace)",0,5,0.5,291
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Reusing existing device: %s.'), interface_name)",1,5,0.5,292
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_('Failed to delete namespace %s'), namespace)",1,5,0.5,293
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Unable to add vxlan interface for network %s""),",0,5,0.5,294
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""No mapping for physical network %s""),",0,5,0.5,295
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done removing device %(interface_name)s from bridge """,0,5,0.5,296
5019749dc8d967c62591dc2776a004d887d10619,LOG.warning(_LW('VXLAN muticast group must be provided in ',0,5,0.5,297
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to add vxlan interface for network %s""),",1,5,0.5,298
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('Port %(device_id)s for %(network_id)s requested from ',1,5,0.5,299
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""No mapping for physical network %s""),",1,5,0.5,300
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done removing device %(interface_name)s from bridge """,1,5,0.5,301
5019749dc8d967c62591dc2776a004d887d10619,LOG.warning(_('VXLAN muticast group must be provided in ',1,5,0.5,302
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to obtain MAC address for unique ID. """,1,5,0.5,303
5019749dc8d967c62591dc2776a004d887d10619,# Trailing periods are allowed to indicate that a name is fully,0,5,0.5,304
5019749dc8d967c62591dc2776a004d887d10619,msg = _('Failed trying to delete namespace: %s'),1,5,0.5,305
5019749dc8d967c62591dc2776a004d887d10619,"_(""Name '%s' must not start or end with a hyphen."") % name)",0,5,0.5,306
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Reloading cached file %s""), filename)",1,5,0.5,307
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""%(tap_device_name)s already exists on bridge """,0,5,0.5,308
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('DHCP port %(device_id)s on network %(network_id)s ',0,5,0.5,309
5019749dc8d967c62591dc2776a004d887d10619,"' %(chain)r %(rule)r %(wrap)r %(top)r'),",0,5,0.5,310
5019749dc8d967c62591dc2776a004d887d10619,"msg = (_(""Error importing interface driver '%(driver)s': """,1,5,0.5,311
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('Port %(device_id)s for %(network_id)s requested from ',0,5,0.5,312
5019749dc8d967c62591dc2776a004d887d10619,msg = _('Removing gateway for dhcp netns on net %s'),1,5,0.5,313
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Reusing existing device: %s.'), interface_name)",1,5,0.5,314
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Failed unplugging interface '%s'""), device_name)",1,5,0.5,315
5019749dc8d967c62591dc2776a004d887d10619,LOG.info(_LI('Attempted to update port filter which is not ',0,5,0.5,316
5019749dc8d967c62591dc2776a004d887d10619,LOG.info(_('Attempted to update port filter which is not ',1,5,0.5,317
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_LW('Tried to remove rule that was not there:',0,5,0.5,318
5019749dc8d967c62591dc2776a004d887d10619,m = _('Setting gateway for dhcp netns on net %(n)s to %(ip)s'),1,5,0.5,319
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""IPTablesManager.apply failed to apply the """,0,5,0.5,320
5019749dc8d967c62591dc2776a004d887d10619,"' %(chain)r %(rule)r %(wrap)r %(top)r'),",1,5,0.5,321
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""IPTablesManager.apply failed to apply the """,1,5,0.5,322
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""OVS flows could not be applied on bridge %s""),",0,5,0.5,323
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""OVS flows could not be applied on bridge %s""),",1,5,0.5,324
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_('Tried to remove rule that was not there:',1,5,0.5,325
5019749dc8d967c62591dc2776a004d887d10619,'segment MTU is indeterminate and no calculation takes ',0,4,0.4,326
5019749dc8d967c62591dc2776a004d887d10619,"""without providing a CIDR or subnetpool ID will be """,0,4,0.4,327
5019749dc8d967c62591dc2776a004d887d10619,"""given a CIDR via the Prefix Delegation mechanism. """,0,4,0.4,328
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Allow overlapping IP support in Neutron. """,0,4,0.4,329
5019749dc8d967c62591dc2776a004d887d10619,"""Attention: the following parameter MUST be set to """,0,4,0.4,330
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Neutron IPAM (IP address management) driver to use. """,0,4,0.4,331
5019749dc8d967c62591dc2776a004d887d10619,"""driver is used. In order to use the reference """,0,4,0.4,332
5019749dc8d967c62591dc2776a004d887d10619,'the path MTU is indeterminate and no calculation ',0,4,0.4,333
5019749dc8d967c62591dc2776a004d887d10619,"""network_device to the agent's node-specific list of """,0,4,0.4,334
5019749dc8d967c62591dc2776a004d887d10619,"""have mappings to appropriate interfaces on each """,0,4,0.4,335
5019749dc8d967c62591dc2776a004d887d10619,"""mapping, make sure to disconnect it from the """,0,4,0.4,336
5019749dc8d967c62591dc2776a004d887d10619,"""network_device. The network_device in the mapping """,0,4,0.4,337
5019749dc8d967c62591dc2776a004d887d10619,"""bridge. There is one per hypervisor. The integration """,0,4,0.4,338
5019749dc8d967c62591dc2776a004d887d10619,"""attached to this bridge and then 'patched' according """,0,4,0.4,339
5019749dc8d967c62591dc2776a004d887d10619,"""for flat and VLAN networks. The length of bridge """,0,4,0.4,340
5019749dc8d967c62591dc2776a004d887d10619,"""names should be no more than 11. Each bridge must """,0,4,0.4,341
5019749dc8d967c62591dc2776a004d887d10619,"""the tenant's private address space. This option is """,0,4,0.4,342
5019749dc8d967c62591dc2776a004d887d10619,"""option is deprecated for removal in the N release."")),",0,4,0.4,343
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Either subnet_id or port_id must be specified"")",1,4,0.4,344
5019749dc8d967c62591dc2776a004d887d10619,"""The __path__ of neutron.extensions is appended to """,0,4,0.4,345
5019749dc8d967c62591dc2776a004d887d10619,'Support kernels with limited namespace support ',0,4,0.4,346
5019749dc8d967c62591dc2776a004d887d10619,"""corresponds to the kernel datapath. To enable the """,0,4,0.4,347
5019749dc8d967c62591dc2776a004d887d10619,for existing_port in (rp.port for rp in router.attached_ports):,0,4,0.4,348
5019749dc8d967c62591dc2776a004d887d10619,if len([s for s in subnets if s['ip_version'] == 4]) > 1:,0,4,0.4,349
5019749dc8d967c62591dc2776a004d887d10619,# multiple prefix port - delete prefix from port,0,4,0.4,350
5019749dc8d967c62591dc2776a004d887d10619,'features. This option is now deprecated for ',0,4,0.4,351
5019749dc8d967c62591dc2776a004d887d10619,ips = [ip['ip_address'] for ip in internal_port['fixed_ips']],1,4,0.4,352
5019749dc8d967c62591dc2776a004d887d10619,# Ensure IP addresses are allocated on external port,1,4,0.4,353
5019749dc8d967c62591dc2776a004d887d10619,"""purpose. System must support the iptables comments """,0,4,0.4,354
5019749dc8d967c62591dc2776a004d887d10619,"""Note that this can be a colon-separated list of paths. """,0,4,0.4,355
5019749dc8d967c62591dc2776a004d887d10619,"""agent can be associated with no more than one external """,0,4,0.4,356
5019749dc8d967c62591dc2776a004d887d10619,"""recover from any transient notification or RPC errors. """,0,4,0.4,357
5019749dc8d967c62591dc2776a004d887d10619,"""The interval is number of seconds between attempts."")),",0,4,0.4,358
5019749dc8d967c62591dc2776a004d887d10619,"""121). This option doesn't have any effect when """,0,4,0.4,359
5019749dc8d967c62591dc2776a004d887d10619,"""dedicated metadata access network whose CIDR is """,0,4,0.4,360
5019749dc8d967c62591dc2776a004d887d10619,"""routers that do not have an external network gateway """,0,4,0.4,361
5019749dc8d967c62591dc2776a004d887d10619,"""network. To allow L3 agent support multiple external """,0,4,0.4,362
5019749dc8d967c62591dc2776a004d887d10619,"""integration bridge to physical networks. """,0,4,0.4,363
5019749dc8d967c62591dc2776a004d887d10619,'Support kernels with limited namespace support ',1,4,0.4,364
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Shared secret to sign instance-id request'),",1,4,0.4,365
5019749dc8d967c62591dc2776a004d887d10619,"""remote MAC and IPs and improve tunnel scalability."")),",1,4,0.4,366
5019749dc8d967c62591dc2776a004d887d10619,"""for flat and VLAN networks. The length of bridge """,1,4,0.4,367
5019749dc8d967c62591dc2776a004d887d10619,"""names should be no more than 11. Each bridge must """,1,4,0.4,368
5019749dc8d967c62591dc2776a004d887d10619,"""mapping, make sure to disconnect it from the """,1,4,0.4,369
5019749dc8d967c62591dc2776a004d887d10619,"""integration bridge to physical networks. """,1,4,0.4,370
5019749dc8d967c62591dc2776a004d887d10619,"""corresponds to the kernel datapath. To enable the """,1,4,0.4,371
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Timeout in seconds to wait for """,1,4,0.4,372
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Minimize polling by monitoring ovsdb for interface """,1,4,0.4,373
5019749dc8d967c62591dc2776a004d887d10619,"""to respond to an ARP request locally without """,1,4,0.4,374
5019749dc8d967c62591dc2776a004d887d10619,"""bridge. There is one per hypervisor. The integration """,1,4,0.4,375
5019749dc8d967c62591dc2776a004d887d10619,"""from other devices which have the capability to spoof """,1,4,0.4,376
5019749dc8d967c62591dc2776a004d887d10619,"""headers. This option will be removed in Ocata so """,1,4,0.4,377
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Reset flow table on start. Setting this to True will """,1,4,0.4,378
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Set or un-set the tunnel header checksum  on """,1,4,0.4,379
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Location to store child pid files')),",1,4,0.4,380
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Name of Open vSwitch bridge to use')),",1,4,0.4,381
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Cannot specify both subnet-id and port-id"")",0,4,0.4,382
5019749dc8d967c62591dc2776a004d887d10619,"""attached to this bridge and then 'patched' according """,1,4,0.4,383
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Watch file log. Log watch should be disabled when """,1,4,0.4,384
5019749dc8d967c62591dc2776a004d887d10619,"""subnet CIDR allocation. This option is deprecated for """,1,4,0.4,385
5019749dc8d967c62591dc2776a004d887d10619,'features. This option is now deprecated for ',1,4,0.4,386
5019749dc8d967c62591dc2776a004d887d10619,"""for virtual networking. excluded_devices is a """,1,4,0.4,387
5019749dc8d967c62591dc2776a004d887d10619,:returns: a dict mapping keys to values,1,4,0.4,388
5019749dc8d967c62591dc2776a004d887d10619,:returns: a dict mapping keys to values,1,4,0.4,389
5019749dc8d967c62591dc2776a004d887d10619,new_subnet_ids = {s['id'] for s in new_subnets},0,4,0.4,390
5019749dc8d967c62591dc2776a004d887d10619,for p in (rp.port for rp in router.attached_ports):,0,4,0.4,391
5019749dc8d967c62591dc2776a004d887d10619,new_subnets = [s for s in new_subnets,0,4,0.4,392
5019749dc8d967c62591dc2776a004d887d10619,for p in (rp.port for rp in router.attached_ports):,1,4,0.4,393
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of networks allowed per tenant. ',1,4,0.4,394
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Location of pid file of this process.')),",1,4,0.4,395
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Default driver to use for quota checks')),",1,4,0.4,396
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of RPC worker processes dedicated to state ',0,4,0.4,397
5019749dc8d967c62591dc2776a004d887d10619,'periodic task scheduler to reduce stampeding. ',0,4,0.4,398
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of RPC worker processes dedicated to state ',1,4,0.4,399
5019749dc8d967c62591dc2776a004d887d10619,'periodic task scheduler to reduce stampeding. ',1,4,0.4,400
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Location of pid file of this process.')),",0,4,0.4,401
5019749dc8d967c62591dc2776a004d887d10619,help=_('Watch file log. Log watch should be disabled when ',0,4,0.4,402
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Cannot specify both subnet-id and port-id"")",1,4,0.4,403
5019749dc8d967c62591dc2776a004d887d10619,"""should have mappings to appropriate interfaces on """,0,4,0.4,404
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of separate worker processes for metadata ',1,4,0.4,405
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Deleting stale internal router device: %s'),",1,4,0.4,406
5019749dc8d967c62591dc2776a004d887d10619,"""""""Recursive method to convert data members to XML nodes.""""""",1,4,0.4,407
5019749dc8d967c62591dc2776a004d887d10619,# root_tag = constants.VIRTUAL_ROOT_KEY and links is not None,1,4,0.4,408
5019749dc8d967c62591dc2776a004d887d10619,# Adding a migration path to allow us to remove unncessary classes,1,4,0.4,409
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE('Failed trying to delete namespace: %s'), ns)",0,4,0.4,410
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Failed synchronizing routers due to RPC error""))",0,4,0.4,411
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Neutron server does not support state report.""",0,4,0.4,412
5019749dc8d967c62591dc2776a004d887d10619,""" State report for this agent will be disabled.""))",0,4,0.4,413
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Deleting stale external router device: %s'),",1,4,0.4,414
5019749dc8d967c62591dc2776a004d887d10619,:param xmlns: XML namespace to include with serialized xml,1,4,0.4,415
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Failed sending gratuitous ARP: %s""), str(e))",1,4,0.4,416
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Neutron server does not support state report.""",1,4,0.4,417
5019749dc8d967c62591dc2776a004d887d10619,""" State report for this agent will be disabled.""))",1,4,0.4,418
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('DHCP for %(net_id)s is stale, pid %(pid)d '",0,4,0.4,419
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('No DHCP started for %s', self.network.id)",0,4,0.4,420
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE('Failed trying to delete namespace: %s'),",0,4,0.4,421
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('An interface driver must be specified')),0,4,0.4,422
5019749dc8d967c62591dc2776a004d887d10619,":param data: expect data to contain a single key as XML root, or",1,4,0.4,423
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Network type for tenant networks """,1,4,0.4,424
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Done building host file %s'), filename)",1,4,0.4,425
5019749dc8d967c62591dc2776a004d887d10619,"' (Disable by setting to 0)')),",1,4,0.4,426
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Allow to perform insecure SSL (https) requests to """,1,4,0.4,427
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Lifetime of a DHCP lease in seconds')),",1,4,0.4,428
5019749dc8d967c62591dc2776a004d887d10619,"# for each tunnel type, and resubmit to table LEARN_FROM_TUN where",0,4,0.4,429
5019749dc8d967c62591dc2776a004d887d10619,# LEARN_FROM_TUN table will have a single flow using a learn action to,0,4,0.4,430
5019749dc8d967c62591dc2776a004d887d10619,# adresses (assumes that lvid has already been set by a previous flow),0,4,0.4,431
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_('port_unbound: vif_id %s not in local_vlan_map'),",1,4,0.4,432
5019749dc8d967c62591dc2776a004d887d10619,'periodic task scheduler to reduce stampeding. ',0,4,0.4,433
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of networks allowed per tenant,'",1,4,0.4,434
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Device %s already exists""), device_name)",1,4,0.4,435
5019749dc8d967c62591dc2776a004d887d10619,This routine is called when self._delete_stale_namespaces is True.,0,4,0.4,436
5019749dc8d967c62591dc2776a004d887d10619,ns_to_ignore = set(NS_PREFIX + r['id'] for r in routers),0,4,0.4,437
5019749dc8d967c62591dc2776a004d887d10619,The argumenet router_namespaces is a list of stale router namespaces,0,4,0.4,438
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of separate worker processes for metadata ',0,4,0.4,439
5019749dc8d967c62591dc2776a004d887d10619,help=_('Comma-separated list of the DNS servers which will be ',0,4,0.4,440
5019749dc8d967c62591dc2776a004d887d10619,help=_('Use another DNS server before any in ',1,4,0.4,441
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Unable to deserialize body as provided """,0,4,0.4,442
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Reloading allocations for network: %s'), self.network.id)",1,4,0.4,443
5019749dc8d967c62591dc2776a004d887d10619,# Add flow in default table to resubmit to the right,0,4,0.4,444
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('DHCP port %(device_id)s on network %(network_id)s',1,4,0.4,445
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Duplicate nameserver '%s'"") % ip",1,4,0.4,446
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Cannot delete bridge %s, does not exist""),",1,4,0.4,447
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Removing device %(interface_name)s from bridge """,1,4,0.4,448
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Cannot remove device %(interface_name)s bridge """,1,4,0.4,449
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Interface mappings: %s""), interface_mappings)",1,4,0.4,450
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""Duplicate nameserver '%s'"") % host",0,4,0.4,451
5019749dc8d967c62591dc2776a004d887d10619,# because its easier to make correct. Feel free to replace with a,0,4,0.4,452
5019749dc8d967c62591dc2776a004d887d10619,"_(""Name '%s' must be 1-63 characters long, each of """,0,4,0.4,453
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Unable to find ':' as separator in %s.""),",1,4,0.4,454
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_('VXLAN is enabled, a valid local_ip '",1,4,0.4,455
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""ConfDriver is used as quota_driver because the """,0,4,0.4,456
5019749dc8d967c62591dc2776a004d887d10619,"""loaded plugin does not support 'quotas' table.""))",0,4,0.4,457
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""ConfDriver is used as quota_driver because the """,1,4,0.4,458
5019749dc8d967c62591dc2776a004d887d10619,"""loaded plugin does not support 'quotas' table.""))",1,4,0.4,459
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Network service endpoint type to pull from """,1,4,0.4,460
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Failed unplugging interface '%s'""), device_name)",0,4,0.4,461
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Shared secret to sign instance-id request'),",1,4,0.4,462
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Failed creating vxlan interface for """,1,4,0.4,463
5019749dc8d967c62591dc2776a004d887d10619,"msg = _(""'rpc_workers = %d' ignored because start_rpc_listeners """,1,4,0.4,464
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Cannot remove device %(interface_name)s bridge """,0,4,0.4,465
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('Network %(network_id)s requested from ',0,4,0.4,466
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Removing device %(interface_name)s from bridge """,0,4,0.4,467
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Unplugged interface '%s'""), device_name)",1,4,0.4,468
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Unable to execute %(cmd)s. Exception: """,0,4,0.4,469
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""It was impossible to process the following """,0,4,0.4,470
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_LW('Did not find expected name ',0,4,0.4,471
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""It was impossible to process the following """,1,4,0.4,472
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_('Did not find expected name ',1,4,0.4,473
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Unable to find table %s'), table_name)",1,4,0.4,474
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Network %s could not be found, it might have """,0,4,0.4,475
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_LW('VXLAN is enabled, a valid local_ip '",0,4,0.4,476
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Cannot delete bridge %s, does not exist""),",0,4,0.4,477
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('get_active_networks requested from %s'), host)",1,4,0.4,478
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Adding device %(tap_device_name)s to bridge """,0,4,0.4,479
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Failed unplugging interface '%s'""),",1,4,0.4,480
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('Network %(network_id)s requested from ',1,4,0.4,481
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Network %s could not be found, it might have """,1,4,0.4,482
5019749dc8d967c62591dc2776a004d887d10619,"""to use the real root filter facility. Change to 'sudo' """,0,3,0.30000000000000004,483
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The base MAC address Neutron will use for VIFs. """,0,3,0.30000000000000004,484
5019749dc8d967c62591dc2776a004d887d10619,"help=_('When proxying metadata requests, Neutron signs the '",0,3,0.30000000000000004,485
5019749dc8d967c62591dc2776a004d887d10619,"""networks, both the external_network_bridge and """,0,3,0.30000000000000004,486
5019749dc8d967c62591dc2776a004d887d10619,"""be associated with no more than one external network. """,0,3,0.30000000000000004,487
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""When external_network_bridge is set, each L3 agent can """,0,3,0.30000000000000004,488
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Indicates that this L3 agent should also handle """,0,3,0.30000000000000004,489
5019749dc8d967c62591dc2776a004d887d10619,'Should not exceed connection pool size configured on ',0,3,0.30000000000000004,490
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Maximum number of DNS nameservers per subnet"")),",0,3,0.30000000000000004,491
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of threads to use during sync process. ',0,3,0.30000000000000004,492
5019749dc8d967c62591dc2776a004d887d10619,"""169.254.169.254 through a router. This option """,0,3,0.30000000000000004,493
5019749dc8d967c62591dc2776a004d887d10619,'(e.g. RHEL 6.5) so long as ovs_use_veth is set to ',0,3,0.30000000000000004,494
5019749dc8d967c62591dc2776a004d887d10619,"""used to provide this info. Setting this value will """,0,3,0.30000000000000004,495
5019749dc8d967c62591dc2776a004d887d10619,"""support on isolated networks. Setting this value to """,0,3,0.30000000000000004,496
5019749dc8d967c62591dc2776a004d887d10619,"""security configuration. If the root helper is """,0,3,0.30000000000000004,497
5019749dc8d967c62591dc2776a004d887d10619,"""169.254.169.254/16 (or larger prefix), and is """,0,3,0.30000000000000004,498
5019749dc8d967c62591dc2776a004d887d10619,'encapsulated Neutron traffic is sent. ',0,3,0.30000000000000004,499
5019749dc8d967c62591dc2776a004d887d10619,"""deprecated for removal in the N release."")),",0,3,0.30000000000000004,500
5019749dc8d967c62591dc2776a004d887d10619,"""for flat and VLAN networks. All physical networks """,0,3,0.30000000000000004,501
5019749dc8d967c62591dc2776a004d887d10619,"""bridge acts as a virtual 'patch bay'. All VM VIFs are """,0,3,0.30000000000000004,502
5019749dc8d967c62591dc2776a004d887d10619,'no fixed IP addresses') % internal_port['id']),1,3,0.30000000000000004,503
5019749dc8d967c62591dc2776a004d887d10619,"""Do not change this parameter unless you have a good """,0,3,0.30000000000000004,504
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Integration bridge to use. """,0,3,0.30000000000000004,505
5019749dc8d967c62591dc2776a004d887d10619,"""should appear in the physical_device_mappings """,0,3,0.30000000000000004,506
5019749dc8d967c62591dc2776a004d887d10619,"""networking. vfs_to_exclude is a semicolon-separated """,0,3,0.30000000000000004,507
5019749dc8d967c62591dc2776a004d887d10619,"""notation. Specifying a range allows different VNIs to """,0,3,0.30000000000000004,508
5019749dc8d967c62591dc2776a004d887d10619,"""subnet pool ID. See the description for """,0,3,0.30000000000000004,509
5019749dc8d967c62591dc2776a004d887d10619,"'tenant requests based on this value (typically, '",0,3,0.30000000000000004,510
5019749dc8d967c62591dc2776a004d887d10619,'Drivers calculate maximum viable MTU for validating ',0,3,0.30000000000000004,511
5019749dc8d967c62591dc2776a004d887d10619,"""networks. The default value 'local' is useful for """,0,3,0.30000000000000004,512
5019749dc8d967c62591dc2776a004d887d10619,"""If ipam_driver is not set (default behavior), no IPAM """,0,3,0.30000000000000004,513
5019749dc8d967c62591dc2776a004d887d10619,"""Note that enabling PD will override the behavior of """,0,3,0.30000000000000004,514
5019749dc8d967c62591dc2776a004d887d10619,"""subnet allocation in a PD-capable environment. Users """,0,3,0.30000000000000004,515
5019749dc8d967c62591dc2776a004d887d10619,help=_('Uses veth for an OVS interface or not. ',0,3,0.30000000000000004,516
5019749dc8d967c62591dc2776a004d887d10619,"msg = _LE(""Cannot have multiple """,0,3,0.30000000000000004,517
5019749dc8d967c62591dc2776a004d887d10619,return any(s.ip_version == 4 for s in net.subnets),0,3,0.30000000000000004,518
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Exception occurs when waiting for timer""))",0,3,0.30000000000000004,519
5019749dc8d967c62591dc2776a004d887d10619,"""same network id if both contain IPv6 """,0,3,0.30000000000000004,520
5019749dc8d967c62591dc2776a004d887d10619,"return _(""Validator '%s' does not exist."") % k",1,3,0.30000000000000004,521
5019749dc8d967c62591dc2776a004d887d10619,"return _(""'%s' Blank strings are not permitted"") % data",1,3,0.30000000000000004,522
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The type of authentication to use"")),",1,3,0.30000000000000004,523
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Exception occurs when waiting for timer""))",1,3,0.30000000000000004,524
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Exception occurs when timer stops""))",1,3,0.30000000000000004,525
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Exception occurs when timer stops""))",0,3,0.30000000000000004,526
5019749dc8d967c62591dc2776a004d887d10619,'since that is not an IPv4 address.') %,0,3,0.30000000000000004,527
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('Unrecoverable error: please check log for ',0,3,0.30000000000000004,528
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_('%s is already registered.'), resource.name)",1,3,0.30000000000000004,529
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW('%s is already registered.'), resource.name)",0,3,0.30000000000000004,530
5019749dc8d967c62591dc2776a004d887d10619,"""generate any sub-attr policy rule for %s.""),",1,3,0.30000000000000004,531
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Unable to find ':' as separator in %s."",",0,3,0.30000000000000004,532
5019749dc8d967c62591dc2776a004d887d10619,"""appropriate bridges on each agent. """,0,3,0.30000000000000004,533
5019749dc8d967c62591dc2776a004d887d10619,"""subnets. Existing port %(p)s has IPv6 """,0,3,0.30000000000000004,534
5019749dc8d967c62591dc2776a004d887d10619,"""subnet(s) and network id %(nid)s"")",0,3,0.30000000000000004,535
5019749dc8d967c62591dc2776a004d887d10619,"""IPv4 subnets on router port"")",0,3,0.30000000000000004,536
5019749dc8d967c62591dc2776a004d887d10619,for port in router.attached_ports:,0,3,0.30000000000000004,537
5019749dc8d967c62591dc2776a004d887d10619,[subnet['id'] for subnet in subnets]),0,3,0.30000000000000004,538
5019749dc8d967c62591dc2776a004d887d10619,if subnet_id and subnet_id not in port_subnet_ids:,0,3,0.30000000000000004,539
5019749dc8d967c62591dc2776a004d887d10619,port_subnets = [fip['subnet_id'] for fip in p['fixed_ips']],0,3,0.30000000000000004,540
5019749dc8d967c62591dc2776a004d887d10619,fixed_ips = [fip for fip in p['fixed_ips'] if,0,3,0.30000000000000004,541
5019749dc8d967c62591dc2776a004d887d10619,[subnet['id'] for subnet in,0,3,0.30000000000000004,542
5019749dc8d967c62591dc2776a004d887d10619,# This operation is now deprecated. All the neutron core and extended,0,3,0.30000000000000004,543
5019749dc8d967c62591dc2776a004d887d10619,# resource for which  quota limits are enforced explicitly register,0,3,0.30000000000000004,544
5019749dc8d967c62591dc2776a004d887d10619,# themselves with the quota engine.,0,3,0.30000000000000004,545
5019749dc8d967c62591dc2776a004d887d10619,"""quota_items option is deprecated as of Liberty.""",0,3,0.30000000000000004,546
5019749dc8d967c62591dc2776a004d887d10619,"""resources with the quota engine.""))",0,3,0.30000000000000004,547
5019749dc8d967c62591dc2776a004d887d10619,return [ip for ip in port['fixed_ips'],0,3,0.30000000000000004,548
5019749dc8d967c62591dc2776a004d887d10619,'with non-IPv4 address %s(internal_ip)s and ',0,3,0.30000000000000004,549
5019749dc8d967c62591dc2776a004d887d10619,'therefore cannot be bound.') % data),0,3,0.30000000000000004,550
5019749dc8d967c62591dc2776a004d887d10619,"""configured as a port. All physical networks """,0,3,0.30000000000000004,551
5019749dc8d967c62591dc2776a004d887d10619,help=_('Network that will have instance metadata ',0,3,0.30000000000000004,552
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Support Metadata requests on isolated networks."")),",1,3,0.30000000000000004,553
5019749dc8d967c62591dc2776a004d887d10619,"""permissions on metadata proxy log file."")),",1,3,0.30000000000000004,554
5019749dc8d967c62591dc2776a004d887d10619,"""appropriate bridges on each agent. """,1,3,0.30000000000000004,555
5019749dc8d967c62591dc2776a004d887d10619,"""configured as a port. All physical networks """,1,3,0.30000000000000004,556
5019749dc8d967c62591dc2776a004d887d10619,"""Use either an IPv4 or IPv6 address that resides on one """,1,3,0.30000000000000004,557
5019749dc8d967c62591dc2776a004d887d10619,"""bridge acts as a virtual 'patch bay'. All VM VIFs are """,1,3,0.30000000000000004,558
5019749dc8d967c62591dc2776a004d887d10619,"""Do not change this parameter unless you have a good """,1,3,0.30000000000000004,559
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Integration bridge to use. """,1,3,0.30000000000000004,560
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Group (gid or name) running metadata proxy after """,1,3,0.30000000000000004,561
5019749dc8d967c62591dc2776a004d887d10619,"#    Unless required by applicable law or agreed to in writing, software",0,3,0.30000000000000004,562
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""User (uid or name) running metadata proxy after """,1,3,0.30000000000000004,563
5019749dc8d967c62591dc2776a004d887d10619,help=_('Network that will have instance metadata ',1,3,0.30000000000000004,564
5019749dc8d967c62591dc2776a004d887d10619,"'permissions on metadata proxy log file.')),",0,3,0.30000000000000004,565
5019749dc8d967c62591dc2776a004d887d10619,help=_('Group (gid or name) running metadata proxy after ',0,3,0.30000000000000004,566
5019749dc8d967c62591dc2776a004d887d10619,help=_('User (uid or name) running metadata proxy after ',0,3,0.30000000000000004,567
5019749dc8d967c62591dc2776a004d887d10619,#    License for the specific language governing permissions and limitations,0,3,0.30000000000000004,568
5019749dc8d967c62591dc2776a004d887d10619,"""the local switch connecting the controller. """,1,3,0.30000000000000004,569
5019749dc8d967c62591dc2776a004d887d10619,"""polling for local device changes."")),",1,3,0.30000000000000004,570
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The UDP port to use for VXLAN tunnels."")),",1,3,0.30000000000000004,571
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Use ML2 l2population mechanism driver to learn """,1,3,0.30000000000000004,572
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Enable local ARP responder if it is supported. """,1,3,0.30000000000000004,573
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Enable suppression of ARP responses that don't match """,1,3,0.30000000000000004,574
5019749dc8d967c62591dc2776a004d887d10619,"""to this agent from spoofing, it doesn't protect them """,1,3,0.30000000000000004,575
5019749dc8d967c62591dc2776a004d887d10619,"""(e.g. bare metal or VMs attached to agents without """,1,3,0.30000000000000004,576
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Set or un-set the don't fragment (DF) bit on """,1,3,0.30000000000000004,577
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Make the l2 agent run in DVR mode."")),",1,3,0.30000000000000004,578
5019749dc8d967c62591dc2776a004d887d10619,"""agent receives SIGTERM. If value is set to 0, rpc """,1,3,0.30000000000000004,579
5019749dc8d967c62591dc2776a004d887d10619,help=_('Uses veth for an OVS interface or not. ',1,3,0.30000000000000004,580
5019749dc8d967c62591dc2776a004d887d10619,'(e.g. RHEL 6.5) so long as ovs_use_veth is set to ',1,3,0.30000000000000004,581
5019749dc8d967c62591dc2776a004d887d10619,INSTALLED_SUBPROJECTS = [project_ for project_ in migration_entrypoints],1,3,0.30000000000000004,582
5019749dc8d967c62591dc2776a004d887d10619,"""Neutron must implement split (contract and expand) """,1,3,0.30000000000000004,583
5019749dc8d967c62591dc2776a004d887d10619,help=_('Database engine for which script will be generated ',1,3,0.30000000000000004,584
5019749dc8d967c62591dc2776a004d887d10619,for ip in data:,1,3,0.30000000000000004,585
5019749dc8d967c62591dc2776a004d887d10619,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,3,0.30000000000000004,586
5019749dc8d967c62591dc2776a004d887d10619,#    a copy of the License at,0,3,0.30000000000000004,587
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Allow overlapping IP support in Neutron"")),",1,3,0.30000000000000004,588
5019749dc8d967c62591dc2776a004d887d10619,":param unique_keys: keys must be unique if True, else implies that keys",0,3,0.30000000000000004,589
5019749dc8d967c62591dc2776a004d887d10619,"""not unique"") % {'value': value,",0,3,0.30000000000000004,590
5019749dc8d967c62591dc2776a004d887d10619,and values are not unique,0,3,0.30000000000000004,591
5019749dc8d967c62591dc2776a004d887d10619,":param unique_keys: keys must be unique if True, else implies that keys",0,3,0.30000000000000004,592
5019749dc8d967c62591dc2776a004d887d10619,"""not unique"") % {'value': value,",1,3,0.30000000000000004,593
5019749dc8d967c62591dc2776a004d887d10619,"""not unique"") % {'value': value,",0,3,0.30000000000000004,594
5019749dc8d967c62591dc2776a004d887d10619,and values are not unique,0,3,0.30000000000000004,595
5019749dc8d967c62591dc2776a004d887d10619,'which the agents will take into account when wiring ',0,3,0.30000000000000004,596
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of RPC worker processes for service')),",1,3,0.30000000000000004,597
5019749dc8d967c62591dc2776a004d887d10619,"""integration bridge to physical bridges."")),",1,3,0.30000000000000004,598
5019749dc8d967c62591dc2776a004d887d10619,"""semicolon separated list of virtual functions """,1,3,0.30000000000000004,599
5019749dc8d967c62591dc2776a004d887d10619,"""mapping network_device to the agent's node-specific """,1,3,0.30000000000000004,600
5019749dc8d967c62591dc2776a004d887d10619,"""All physical networks listed in network_vlan_ranges """,1,3,0.30000000000000004,601
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""List of <physical_network>:<network_device> mapping """,1,3,0.30000000000000004,602
5019749dc8d967c62591dc2776a004d887d10619,"'encapsulated Neutron traffic is sent.  If <= 0, '",1,3,0.30000000000000004,603
5019749dc8d967c62591dc2776a004d887d10619,"""not unique"") % {'value': value,",1,3,0.30000000000000004,604
5019749dc8d967c62591dc2776a004d887d10619,"# It's possible these ports are on the same network, but",0,3,0.30000000000000004,605
5019749dc8d967c62591dc2776a004d887d10619,for ip in p['fixed_ips']:,0,3,0.30000000000000004,606
5019749dc8d967c62591dc2776a004d887d10619,for s in new_subnets:,0,3,0.30000000000000004,607
5019749dc8d967c62591dc2776a004d887d10619,for subnet in subnets:,1,3,0.30000000000000004,608
5019749dc8d967c62591dc2776a004d887d10619,"# It's possible these ports are on the same network, but",1,3,0.30000000000000004,609
5019749dc8d967c62591dc2776a004d887d10619,for ip in p['fixed_ips']:,1,3,0.30000000000000004,610
5019749dc8d967c62591dc2776a004d887d10619,'quota usage. Plugins which do not leverage the ',1,3,0.30000000000000004,611
5019749dc8d967c62591dc2776a004d887d10619,#    a copy of the License at,0,3,0.30000000000000004,612
5019749dc8d967c62591dc2776a004d887d10619,"#    Unless required by applicable law or agreed to in writing, software",0,3,0.30000000000000004,613
5019749dc8d967c62591dc2776a004d887d10619,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,3,0.30000000000000004,614
5019749dc8d967c62591dc2776a004d887d10619,#    License for the specific language governing permissions and limitations,0,3,0.30000000000000004,615
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Seconds between running periodic tasks.')),",0,3,0.30000000000000004,616
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of separate API worker processes for service. ',0,3,0.30000000000000004,617
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Number of RPC worker processes for service.')),",0,3,0.30000000000000004,618
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Seconds between running periodic tasks')),",1,3,0.30000000000000004,619
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of separate API worker processes for service. ',1,3,0.30000000000000004,620
5019749dc8d967c62591dc2776a004d887d10619,"""generate any sub-attr policy rule for %s."",",0,3,0.30000000000000004,621
5019749dc8d967c62591dc2776a004d887d10619,# Ensure IPv4 addresses are allocated on external port,0,3,0.30000000000000004,622
5019749dc8d967c62591dc2776a004d887d10619,"""which can only be alphanumeric or a hyphen."") % name)",0,3,0.30000000000000004,623
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Deleting stale internal router device: %s',",0,3,0.30000000000000004,624
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Got router deleted notification for %s'), router_id)",1,3,0.30000000000000004,625
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('RuntimeError in obtaining router list ',1,3,0.30000000000000004,626
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Got router added to agent :%r', payload)",0,3,0.30000000000000004,627
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Got router removed from agent :%r', payload)",0,3,0.30000000000000004,628
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Failed sending gratuitous ARP: %s""), str(e))",0,3,0.30000000000000004,629
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Deleting stale external router device: %s',",0,3,0.30000000000000004,630
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('RuntimeError in obtaining router list ',0,3,0.30000000000000004,631
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Got router added to agent :%r'), payload)",1,3,0.30000000000000004,632
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Error importing interface driver """,0,3,0.30000000000000004,633
5019749dc8d967c62591dc2776a004d887d10619,for child in children:,1,3,0.30000000000000004,634
5019749dc8d967c62591dc2776a004d887d10619,elif not len(node) and not node.text:,1,3,0.30000000000000004,635
5019749dc8d967c62591dc2776a004d887d10619,"""""""Convert a minidom node to a simple Python type.",1,3,0.30000000000000004,636
5019749dc8d967c62591dc2776a004d887d10619,# Deserialize link node was needed by unit test for verifying,1,3,0.30000000000000004,637
5019749dc8d967c62591dc2776a004d887d10619,# Remove link node in order to avoid link node process as,1,3,0.30000000000000004,638
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Got router removed from agent :%r'), payload)",1,3,0.30000000000000004,639
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Added route entry is '%s'""), route)",1,3,0.30000000000000004,640
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Device %s already exists""), device_name)",1,3,0.30000000000000004,641
5019749dc8d967c62591dc2776a004d887d10619,"' does not yet exist.', {'device_id': device_id,",0,3,0.30000000000000004,642
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Device %s already exists""), device_name)",0,3,0.30000000000000004,643
5019749dc8d967c62591dc2776a004d887d10619,"' does not yet exist.'), {'device_id': device_id,",1,3,0.30000000000000004,644
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Building host file: %s'), filename)",1,3,0.30000000000000004,645
5019749dc8d967c62591dc2776a004d887d10619,"'turned off DHCP: %s'), self.network.id)",1,3,0.30000000000000004,646
5019749dc8d967c62591dc2776a004d887d10619,'Please ensure that its version is %s ',1,3,0.30000000000000004,647
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Reusing existing device: %s.', interface_name)",0,3,0.30000000000000004,648
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('DHCP port %(device_id)s on network %(network_id)s',0,3,0.30000000000000004,649
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Removed route entry is '%s'""), route)",1,3,0.30000000000000004,650
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Removing gateway for dhcp netns on net %s', network.id)",0,3,0.30000000000000004,651
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Error importing interface driver '%(driver)s': """,0,3,0.30000000000000004,652
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Done building host file %s', filename)",0,3,0.30000000000000004,653
5019749dc8d967c62591dc2776a004d887d10619,'Please ensure that its version is %s ',0,3,0.30000000000000004,654
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Error while handling pidfile: %s""), pidfile)",1,3,0.30000000000000004,655
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Error while handling pidfile: %s""), pidfile)",0,3,0.30000000000000004,656
5019749dc8d967c62591dc2776a004d887d10619,"for k, v in data.items():",1,3,0.30000000000000004,657
5019749dc8d967c62591dc2776a004d887d10619,# flag is to prevent current tests from breaking,1,3,0.30000000000000004,658
5019749dc8d967c62591dc2776a004d887d10619,"# spec that required all responses include the xmlns:atom, the has_atom",1,3,0.30000000000000004,659
5019749dc8d967c62591dc2776a004d887d10619,# Update flooding flows to include the new tunnel,0,3,0.30000000000000004,660
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('RuntimeError in obtaining router list ',0,3,0.30000000000000004,661
5019749dc8d967c62591dc2776a004d887d10619,router_namespaces = set(ns for ns in host_namespaces,0,3,0.30000000000000004,662
5019749dc8d967c62591dc2776a004d887d10619,the database as being hosted on this node.,0,3,0.30000000000000004,663
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of networks allowed per tenant.',0,3,0.30000000000000004,664
5019749dc8d967c62591dc2776a004d887d10619,"'context: %s'), kwargs)",1,3,0.30000000000000004,665
5019749dc8d967c62591dc2776a004d887d10619,"'context: %s'), kwargs)",0,3,0.30000000000000004,666
5019749dc8d967c62591dc2776a004d887d10619,# tunelling table (lvid will be set in the latter),0,3,0.30000000000000004,667
5019749dc8d967c62591dc2776a004d887d10619,# xml serializers and view builders have been updated to the current,1,3,0.30000000000000004,668
5019749dc8d967c62591dc2776a004d887d10619,"# for now, add a default drop action",0,3,0.30000000000000004,669
5019749dc8d967c62591dc2776a004d887d10619,# and resubmit to Table LEARN_FROM_TUN for mac learning,0,3,0.30000000000000004,670
5019749dc8d967c62591dc2776a004d887d10619,# inbound from tunnels: set lvid in the right table,0,3,0.30000000000000004,671
5019749dc8d967c62591dc2776a004d887d10619,""" '%(cidr)s' is recommended"") % {""data"": data,",0,3,0.30000000000000004,672
5019749dc8d967c62591dc2776a004d887d10619,"device = ip_lib.IPDevice(device_name, self.root_helper, namespace)",1,3,0.30000000000000004,673
5019749dc8d967c62591dc2776a004d887d10619,for name in names:,0,3,0.30000000000000004,674
5019749dc8d967c62591dc2776a004d887d10619,one attempt will be made to delete them.,0,3,0.30000000000000004,675
5019749dc8d967c62591dc2776a004d887d10619,"If only_router_id is passed, only destroy single namespace, to allow",1,3,0.30000000000000004,676
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Failed deleting namespace '%s'""), ns)",1,3,0.30000000000000004,677
5019749dc8d967c62591dc2776a004d887d10619,# For the case where only one process is required.,0,3,0.30000000000000004,678
5019749dc8d967c62591dc2776a004d887d10619,for server in self.conf.dnsmasq_dns_servers),0,3,0.30000000000000004,679
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to execute %(cmd)s. """,0,3,0.30000000000000004,680
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to execute %(cmd)s. Exception: %(exception)s""),",1,3,0.30000000000000004,681
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Unable to deserialize body as provided Content-Type""))",1,3,0.30000000000000004,682
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Device %s already exists""), device_name)",0,3,0.30000000000000004,683
5019749dc8d967c62591dc2776a004d887d10619,"{'net_id': self.network.id, 'pid': pid})",0,3,0.30000000000000004,684
5019749dc8d967c62591dc2776a004d887d10619,"'command'), {'net_id': self.network.id, 'pid': pid})",1,3,0.30000000000000004,685
5019749dc8d967c62591dc2776a004d887d10619,"""(local, vlan, gre, vxlan, or none)."")),",1,3,0.30000000000000004,686
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""List of <physical_network>:<vlan_min>:<vlan_max> """,1,3,0.30000000000000004,687
5019749dc8d967c62591dc2776a004d887d10619,:param metadata: information needed to deserialize xml into,1,3,0.30000000000000004,688
5019749dc8d967c62591dc2776a004d887d10619,link_keys = [k for k in data.iterkeys() or [],1,3,0.30000000000000004,689
5019749dc8d967c62591dc2776a004d887d10619,root_key = (len(data) == 1 and,1,3,0.30000000000000004,690
5019749dc8d967c62591dc2776a004d887d10619,"# Provides a migration path to a cleaner WSGI layer, this",1,3,0.30000000000000004,691
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Failed unplugging interface '%s'""),",0,3,0.30000000000000004,692
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The type of authentication to use"")),",0,3,0.30000000000000004,693
5019749dc8d967c62591dc2776a004d887d10619,"'filtered %s'), port['device'])",0,3,0.30000000000000004,694
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Deleting vxlan interface %s for vlan"",",0,3,0.30000000000000004,695
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Interface mappings: %s""), interface_mappings)",0,3,0.30000000000000004,696
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Error in agent loop. Devices info: %s""),",0,3,0.30000000000000004,697
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Device %s not defined on plugin"", device)",0,3,0.30000000000000004,698
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Device %s not defined on plugin""), device)",0,3,0.30000000000000004,699
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('Linux kernel vxlan module and iproute2 3.8 or ',0,3,0.30000000000000004,700
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('No valid Segmentation ID to perform UCAST test.')),0,3,0.30000000000000004,701
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Unknown network_type %(network_type)s for network """,0,3,0.30000000000000004,702
5019749dc8d967c62591dc2776a004d887d10619,"device = ip_lib.IPDevice(device_name, self.conf.root_helper, namespace)",0,3,0.30000000000000004,703
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done starting bridge %(bridge_name)s for """,0,3,0.30000000000000004,704
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Starting bridge %(bridge_name)s for subinterface """,0,3,0.30000000000000004,705
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Creating vxlan interface %(interface)s for """,0,3,0.30000000000000004,706
5019749dc8d967c62591dc2776a004d887d10619,"""VLAN %(vlan_id)s on interface """,0,3,0.30000000000000004,707
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Failed creating vxlan interface for """,0,3,0.30000000000000004,708
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_LW(""Invalid Interface ID, will lead to incorrect """,0,3,0.30000000000000004,709
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_(""Invalid Interface ID, will lead to incorrect """,1,3,0.30000000000000004,710
5019749dc8d967c62591dc2776a004d887d10619,"""VLAN %(vlan_id)s on interface """,1,3,0.30000000000000004,711
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Creating vxlan interface %(interface)s for """,1,3,0.30000000000000004,712
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Starting bridge %(bridge_name)s for subinterface """,1,3,0.30000000000000004,713
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done starting bridge %(bridge_name)s for """,1,3,0.30000000000000004,714
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to add %(interface)s to %(bridge_name)s! """,1,3,0.30000000000000004,715
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unknown network_type %(network_type)s for network """,1,3,0.30000000000000004,716
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Deleting vxlan interface %s for vlan""),",1,3,0.30000000000000004,717
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('No valid Segmentation ID to perform UCAST test.')),1,3,0.30000000000000004,718
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('Linux kernel vxlan module and iproute2 3.8 or above ',1,3,0.30000000000000004,719
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""port_update RPC received for port: %s""), port_id)",1,3,0.30000000000000004,720
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Device %s not defined on plugin""), device)",1,3,0.30000000000000004,721
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""port_removed failed for %(device)s: %(e)s""),",1,3,0.30000000000000004,722
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Device %s not defined on plugin""), device)",1,3,0.30000000000000004,723
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Error in agent loop. Devices info: %s""),",1,3,0.30000000000000004,724
5019749dc8d967c62591dc2776a004d887d10619,for host in data:,0,3,0.30000000000000004,725
5019749dc8d967c62591dc2776a004d887d10619,"'filtered %r'), port)",0,3,0.30000000000000004,726
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Reusing existing device: %s.', interface_name)",0,3,0.30000000000000004,727
5019749dc8d967c62591dc2776a004d887d10619,# This may be an IP or a hostname,0,3,0.30000000000000004,728
5019749dc8d967c62591dc2776a004d887d10619,"""cannot be cached for %(func_name)s.""),",1,3,0.30000000000000004,729
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('Unable to create VXLAN tunnel port. Please ensure ',0,3,0.30000000000000004,730
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Error fetching extended attributes for """,1,3,0.30000000000000004,731
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Loaded plugins do not implement extension %s interface""),",0,3,0.30000000000000004,732
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Error fetching extended attributes for """,0,3,0.30000000000000004,733
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('Unable to create VXLAN tunnel port. Please ensure ',1,3,0.30000000000000004,734
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to execute %(cmd)s. Exception: %(exception)s""),",1,3,0.30000000000000004,735
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Unable to execute %(cmd)s. """,1,3,0.30000000000000004,736
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Unable to execute %(cmd)s. """,0,3,0.30000000000000004,737
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Action %(action)s for network %(net_id)s """,0,3,0.30000000000000004,738
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist'), chain)",1,3,0.30000000000000004,739
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""IPTablesManager.apply completed with success""))",1,3,0.30000000000000004,740
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist'), chain)",0,3,0.30000000000000004,741
5019749dc8d967c62591dc2776a004d887d10619,"'filtered %r'), port)",1,3,0.30000000000000004,742
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Instance of class %(module)s.%(class)s doesn't """,1,3,0.30000000000000004,743
5019749dc8d967c62591dc2776a004d887d10619,"'filtered %s'), port['device'])",1,3,0.30000000000000004,744
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Loaded plugins do not implement extension %s interface""),",1,3,0.30000000000000004,745
5019749dc8d967c62591dc2776a004d887d10619,# NOTE: An individual name regex instead of an entire FQDN was used,0,3,0.30000000000000004,746
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('get_active_networks requested from %s', host)",0,3,0.30000000000000004,747
5019749dc8d967c62591dc2776a004d887d10619,LOG.warning(_('Updating lease expiration is now deprecated. Issued  ',1,3,0.30000000000000004,748
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist on %(host)s',",0,3,0.30000000000000004,749
5019749dc8d967c62591dc2776a004d887d10619,"""cannot be cached for %(func_name)s."",",0,3,0.30000000000000004,750
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Instance of class %(module)s.%(class)s doesn't """,0,3,0.30000000000000004,751
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('Update dhcp port %(port)s ',1,3,0.30000000000000004,752
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(_('Create dhcp port %(port)s ',1,3,0.30000000000000004,753
5019749dc8d967c62591dc2776a004d887d10619,"'from host %s.'), host)",1,3,0.30000000000000004,754
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Reloading cached file %s"", filename)",0,3,0.30000000000000004,755
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist on %(host)s'),",1,3,0.30000000000000004,756
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('Create dhcp port %(port)s ',0,3,0.30000000000000004,757
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('get_active_networks_info from %s'), host)",1,3,0.30000000000000004,758
5019749dc8d967c62591dc2776a004d887d10619,LOG.warning(_LW('Updating lease expiration is now deprecated. Issued  ',0,3,0.30000000000000004,759
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug('Update dhcp port %(port)s ',0,3,0.30000000000000004,760
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Action %(action)s for network %(net_id)s """,1,3,0.30000000000000004,761
5019749dc8d967c62591dc2776a004d887d10619,"'from host %s.'), host)",0,3,0.30000000000000004,762
5019749dc8d967c62591dc2776a004d887d10619,'no fixed IPv4 addresses') % internal_port['id']),0,2,0.2,763
5019749dc8d967c62591dc2776a004d887d10619,"""removed in the M release."")),",0,2,0.2,764
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Uses veth for an interface or not')),",1,2,0.2,765
5019749dc8d967c62591dc2776a004d887d10619,"""gateway_external_network_id must be left empty."")),",0,2,0.2,766
5019749dc8d967c62591dc2776a004d887d10619,"""removed in the M release."")),",1,2,0.2,767
5019749dc8d967c62591dc2776a004d887d10619,for resource_item in cfg.CONF.QUOTAS.quota_items:,1,2,0.2,768
5019749dc8d967c62591dc2776a004d887d10619,"""generated iptables rules that describe each rule's """,0,2,0.2,769
5019749dc8d967c62591dc2776a004d887d10619,"""module for addition of comments."")),",0,2,0.2,770
5019749dc8d967c62591dc2776a004d887d10619,"""Linux Bridge. When this parameter is set, each L3 """,0,2,0.2,771
5019749dc8d967c62591dc2776a004d887d10619,"""force_metadata is set to True."")),",0,2,0.2,772
5019749dc8d967c62591dc2776a004d887d10619,"""metadata:1 request. In this case DHCP Option 121 will """,0,2,0.2,773
5019749dc8d967c62591dc2776a004d887d10619,from neutron.agent.common import config,0,2,0.2,774
5019749dc8d967c62591dc2776a004d887d10619,"data = {'floatingip_id': fip['id'],",0,2,0.2,775
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Add comments to iptables rules. """,0,2,0.2,776
5019749dc8d967c62591dc2776a004d887d10619,"""this, so if your extensions are in there you don't """,0,2,0.2,777
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The path for API extensions. """,0,2,0.2,778
5019749dc8d967c62591dc2776a004d887d10619,"""<physical_network>:<network_device> tuples mapping """,0,2,0.2,779
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The base MAC address Neutron will use for VIFs"")),",1,2,0.2,780
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Agent should implement routers with no gateway"")),",1,2,0.2,781
5019749dc8d967c62591dc2776a004d887d10619,help=_('Number of threads to use during sync process.')),1,2,0.2,782
5019749dc8d967c62591dc2776a004d887d10619,"""support so long as it is set to True."")),",0,2,0.2,783
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Comma-separated list of <physical_network>:<bridge> """,0,2,0.2,784
5019749dc8d967c62591dc2776a004d887d10619,"""<network_device>:<vfs_to_exclude> tuples, mapping """,0,2,0.2,785
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Comma-separated list of """,0,2,0.2,786
5019749dc8d967c62591dc2776a004d887d10619,"""For example: api_extensions_path = """,0,2,0.2,787
5019749dc8d967c62591dc2776a004d887d10619,"""use different group addresses, reducing or eliminating """,0,2,0.2,788
5019749dc8d967c62591dc2776a004d887d10619,"""implementation of Neutron IPAM driver, """,0,2,0.2,789
5019749dc8d967c62591dc2776a004d887d10619,for resource_item in (set(cfg.CONF.QUOTAS.quota_items) -,0,2,0.2,790
5019749dc8d967c62591dc2776a004d887d10619,"""subnet pool ID. If not set then no pool """,0,2,0.2,791
5019749dc8d967c62591dc2776a004d887d10619,"""will be randomly generated."")),",0,2,0.2,792
5019749dc8d967c62591dc2776a004d887d10619,"""The first 3 octets will remain unchanged. If the 4th """,0,2,0.2,793
5019749dc8d967c62591dc2776a004d887d10619,"""default_ipv4_subnet_pool for more information. This """,0,2,0.2,794
5019749dc8d967c62591dc2776a004d887d10619,"port, subnets = self._remove_interface_by_subnet(",0,2,0.2,795
5019749dc8d967c62591dc2776a004d887d10619,"""Resource REST controllers should take care of registering """,0,2,0.2,796
5019749dc8d967c62591dc2776a004d887d10619,from neutron.common import config,1,2,0.2,797
5019749dc8d967c62591dc2776a004d887d10619,subnets = [],0,2,0.2,798
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='router', msg=msg % {",0,2,0.2,799
5019749dc8d967c62591dc2776a004d887d10619,# _validate_interface_info ensures that either of add_by_* is True.,0,2,0.2,800
5019749dc8d967c62591dc2776a004d887d10619,'metadata server socket with')),1,2,0.2,801
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Client certificate for nova metadata api server."")),",1,2,0.2,802
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Turn off verification of the certificate for""",1,2,0.2,803
5019749dc8d967c62591dc2776a004d887d10619,from neutron.agent.common import config as agent_conf,1,2,0.2,804
5019749dc8d967c62591dc2776a004d887d10619,"port, subnet = self._remove_interface_by_subnet(",1,2,0.2,805
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('Unrecoverable error: please check log ',1,2,0.2,806
5019749dc8d967c62591dc2776a004d887d10619,"""start_rpc_listeners is not implemented.""),",0,2,0.2,807
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""'rpc_workers = %d' ignored because """,0,2,0.2,808
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('Unrecoverable error: please check log ',0,2,0.2,809
5019749dc8d967c62591dc2776a004d887d10619,"""removal in the N release."")),",1,2,0.2,810
5019749dc8d967c62591dc2776a004d887d10619,if ip in ips:,1,2,0.2,811
5019749dc8d967c62591dc2776a004d887d10619,for fixed_ip in fixed_ips:,0,2,0.2,812
5019749dc8d967c62591dc2776a004d887d10619,"subnet = self._core_plugin._get_subnet(context,",0,2,0.2,813
5019749dc8d967c62591dc2776a004d887d10619,# Keep the restriction against multiple IPv4 subnets,0,2,0.2,814
5019749dc8d967c62591dc2776a004d887d10619,for fixed_ip in port['fixed_ips']:,0,2,0.2,815
5019749dc8d967c62591dc2776a004d887d10619,new_port = True,0,2,0.2,816
5019749dc8d967c62591dc2776a004d887d10619,"port, subnets = self._add_interface_by_port(",0,2,0.2,817
5019749dc8d967c62591dc2776a004d887d10619,for fixed_ip in port_db['fixed_ips']],0,2,0.2,818
5019749dc8d967c62591dc2776a004d887d10619,"subnets = [self._core_plugin._get_subnet(context, port_subnet_id)",0,2,0.2,819
5019749dc8d967c62591dc2776a004d887d10619,for port_subnet_id in port_subnet_ids],0,2,0.2,820
5019749dc8d967c62591dc2776a004d887d10619,for port_subnet_id in port_subnet_ids:,0,2,0.2,821
5019749dc8d967c62591dc2776a004d887d10619,if subnet_id in port_subnets and len(port_subnets) > 1:,0,2,0.2,822
5019749dc8d967c62591dc2776a004d887d10619,"port, subnets = self._remove_interface_by_port(context, router_id,",0,2,0.2,823
5019749dc8d967c62591dc2776a004d887d10619,"subnet = self._core_plugin._get_subnet(context, subnet_id)",1,2,0.2,824
5019749dc8d967c62591dc2776a004d887d10619,port = self._add_interface_by_port(,1,2,0.2,825
5019749dc8d967c62591dc2776a004d887d10619,port = self._add_interface_by_subnet(,1,2,0.2,826
5019749dc8d967c62591dc2776a004d887d10619,"subnet = self._core_plugin._get_subnet(context, port_subnet_id)",1,2,0.2,827
5019749dc8d967c62591dc2776a004d887d10619,"port, subnet = self._remove_interface_by_port(context, router_id,",1,2,0.2,828
5019749dc8d967c62591dc2776a004d887d10619,"port = self._find_ipv6_router_port_by_network(router,",0,2,0.2,829
5019749dc8d967c62591dc2776a004d887d10619,QUOTA_DB_DRIVER = '%s.DbQuotaDriver' % QUOTA_DB_MODULE,1,2,0.2,830
5019749dc8d967c62591dc2776a004d887d10619,"help=_('IPAM driver to use.')),",1,2,0.2,831
5019749dc8d967c62591dc2776a004d887d10619,"""metadata_proxy_user/group has no read/write """,1,2,0.2,832
5019749dc8d967c62591dc2776a004d887d10619,"""Allows the switch (when supporting an overlay) """,1,2,0.2,833
5019749dc8d967c62591dc2776a004d887d10619,"""Requires OVS 2.1 and ML2 l2population driver. """,1,2,0.2,834
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""OpenFlow interface to use."")),",1,2,0.2,835
5019749dc8d967c62591dc2776a004d887d10619,"""support so long as it is set to True."")),",1,2,0.2,836
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Comma-separated list of <physical_network>:<bridge> """,1,2,0.2,837
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Tunnel bridge to use."")),",1,2,0.2,838
5019749dc8d967c62591dc2776a004d887d10619,'metadata_proxy_user/group has no read/write ',0,2,0.2,839
5019749dc8d967c62591dc2776a004d887d10619,"'(Disable by setting to 0)')),",0,2,0.2,840
5019749dc8d967c62591dc2776a004d887d10619,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,2,0.2,841
5019749dc8d967c62591dc2776a004d887d10619,from neutron.conf.agent.metadata import namespace_proxy as namespace,0,2,0.2,842
5019749dc8d967c62591dc2776a004d887d10619,"manager = CONF.get('%s_manager' % topic, None)",1,2,0.2,843
5019749dc8d967c62591dc2776a004d887d10619,host = CONF.host,1,2,0.2,844
5019749dc8d967c62591dc2776a004d887d10619,"'(Disable by setting to 0)')),",1,2,0.2,845
5019749dc8d967c62591dc2776a004d887d10619,"manager = cfg.CONF.get('%s_manager' % topic, None)",0,2,0.2,846
5019749dc8d967c62591dc2776a004d887d10619,"""performing a costly ARP broadcast into the overlay."")),",1,2,0.2,847
5019749dc8d967c62591dc2776a004d887d10619,"""they originate. Note: This prevents the VMs attached """,1,2,0.2,848
5019749dc8d967c62591dc2776a004d887d10619,"""requires a version that supports matching ARP """,1,2,0.2,849
5019749dc8d967c62591dc2776a004d887d10619,'which has no gateway_ip') % internal_subnet_id),1,2,0.2,850
5019749dc8d967c62591dc2776a004d887d10619,LOG = logging.getLogger(__name__),0,2,0.2,851
5019749dc8d967c62591dc2776a004d887d10619,LOG = logging.getLogger(__name__),1,2,0.2,852
5019749dc8d967c62591dc2776a004d887d10619,if project not in migration_cli.migration_entrypoints:,0,2,0.2,853
5019749dc8d967c62591dc2776a004d887d10619,if subproject not in migration_cli.migration_entrypoints:,0,2,0.2,854
5019749dc8d967c62591dc2776a004d887d10619,for subproject in migration_cli.migration_entrypoints:,0,2,0.2,855
5019749dc8d967c62591dc2776a004d887d10619,return [obj for obj in migration_cli.DB_OPTS if obj.name == 'engine'],0,2,0.2,856
5019749dc8d967c62591dc2776a004d887d10619,for entrypoint in pkg_resources.iter_entry_points(MIGRATION_ENTRYPOINTS),1,2,0.2,857
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""DEPRECATED. Alembic environments integrating with """,1,2,0.2,858
5019749dc8d967c62591dc2776a004d887d10619,if project not in migration_entrypoints:,1,2,0.2,859
5019749dc8d967c62591dc2776a004d887d10619,if subproject not in migration_entrypoints:,1,2,0.2,860
5019749dc8d967c62591dc2776a004d887d10619,for subproject in migration_entrypoints:,1,2,0.2,861
5019749dc8d967c62591dc2776a004d887d10619,return [obj for obj in _db_opts if obj.name == 'engine'],1,2,0.2,862
5019749dc8d967c62591dc2776a004d887d10619,# This may be a hostname,1,2,0.2,863
5019749dc8d967c62591dc2776a004d887d10619,host = cfg.CONF.host,0,2,0.2,864
5019749dc8d967c62591dc2776a004d887d10619,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,2,0.2,865
5019749dc8d967c62591dc2776a004d887d10619,"'the path MTU is indeterminate.')),",1,2,0.2,866
5019749dc8d967c62591dc2776a004d887d10619,for item in data:,1,2,0.2,867
5019749dc8d967c62591dc2776a004d887d10619,if unique_values and value in mappings.values():,0,2,0.2,868
5019749dc8d967c62591dc2776a004d887d10619,if key in mappings:,0,2,0.2,869
5019749dc8d967c62591dc2776a004d887d10619,'Newton. Please use the system-wide segment_mtu setting ',0,2,0.2,870
5019749dc8d967c62591dc2776a004d887d10619,msg = _validate_uuid(item),1,2,0.2,871
5019749dc8d967c62591dc2776a004d887d10619,msg = _validate_subnet(item),1,2,0.2,872
5019749dc8d967c62591dc2776a004d887d10619,"msg = _validate_string(item, max_string_len)",1,2,0.2,873
5019749dc8d967c62591dc2776a004d887d10619,"msg = item_validator(item, *args, **kwargs)",0,2,0.2,874
5019749dc8d967c62591dc2776a004d887d10619,"'neutron database should set this flag to False')),",1,2,0.2,875
5019749dc8d967c62591dc2776a004d887d10619,for item in data:,0,2,0.2,876
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""List of <physical_network>:<bridge>. """,1,2,0.2,877
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Integration bridge to use."")),",1,2,0.2,878
5019749dc8d967c62591dc2776a004d887d10619,"""(BDF format).to exclude from network_device. """,1,2,0.2,879
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""List of <network_device>:<excluded_devices> """,1,2,0.2,880
5019749dc8d967c62591dc2776a004d887d10619,"'segment MTU is indeterminate.')),",1,2,0.2,881
5019749dc8d967c62591dc2776a004d887d10619,if value not in mappings[key]:,0,2,0.2,882
5019749dc8d967c62591dc2776a004d887d10619,if key in mappings:,1,2,0.2,883
5019749dc8d967c62591dc2776a004d887d10619,if unique_values and value in mappings.values():,1,2,0.2,884
5019749dc8d967c62591dc2776a004d887d10619,if key in mappings:,0,2,0.2,885
5019749dc8d967c62591dc2776a004d887d10619,if unique_values and value in mappings.values():,0,2,0.2,886
5019749dc8d967c62591dc2776a004d887d10619,if value not in mappings[key]:,0,2,0.2,887
5019749dc8d967c62591dc2776a004d887d10619,if key in mappings:,1,2,0.2,888
5019749dc8d967c62591dc2776a004d887d10619,if unique_values and value in mappings.values():,1,2,0.2,889
5019749dc8d967c62591dc2776a004d887d10619,"subnets = self._core_plugin.get_subnets(context.elevated(),",0,2,0.2,890
5019749dc8d967c62591dc2776a004d887d10619,for sub in subnets:,0,2,0.2,891
5019749dc8d967c62591dc2776a004d887d10619,"data = {'subnet_cidr': new_cidr,",0,2,0.2,892
5019749dc8d967c62591dc2776a004d887d10619,"""%(subnet_id)s overlaps with cidr %(cidr)s """,0,2,0.2,893
5019749dc8d967c62591dc2776a004d887d10619,"""of subnet %(sub_id)s"") % data)",0,2,0.2,894
5019749dc8d967c62591dc2776a004d887d10619,"data = {'subnet_cidr': subnet_cidr,",1,2,0.2,895
5019749dc8d967c62591dc2776a004d887d10619,"""%(subnet_id)s overlaps with cidr %(cidr)s """,1,2,0.2,896
5019749dc8d967c62591dc2776a004d887d10619,"""of subnet %(sub_id)s"") % data)",1,2,0.2,897
5019749dc8d967c62591dc2776a004d887d10619,from neutron.conf import quota,0,2,0.2,898
5019749dc8d967c62591dc2776a004d887d10619,"msg = _validate_regex(ip, HOSTNAME_PATTERN)",1,2,0.2,899
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Maximum number of DNS nameservers"")),",1,2,0.2,900
5019749dc8d967c62591dc2776a004d887d10619,msg = _validate_ip_address(ip),1,2,0.2,901
5019749dc8d967c62591dc2776a004d887d10619,self.id = id,1,2,0.2,902
5019749dc8d967c62591dc2776a004d887d10619,"# ""default"" stuff and extreme extensibility isn't being used",1,2,0.2,903
5019749dc8d967c62591dc2776a004d887d10619,has_atom = True,1,2,0.2,904
5019749dc8d967c62591dc2776a004d887d10619,if data is None:,1,2,0.2,905
5019749dc8d967c62591dc2776a004d887d10619,has_atom = False,1,2,0.2,906
5019749dc8d967c62591dc2776a004d887d10619,"""""""Return data as XML string.",1,2,0.2,907
5019749dc8d967c62591dc2776a004d887d10619,self.metadata = metadata or {},1,2,0.2,908
5019749dc8d967c62591dc2776a004d887d10619,from neutron.agent.linux import interface,0,2,0.2,909
5019749dc8d967c62591dc2776a004d887d10619,ctxt.reraise = False,0,2,0.2,910
5019749dc8d967c62591dc2776a004d887d10619,for fault in faults:,1,2,0.2,911
5019749dc8d967c62591dc2776a004d887d10619,for fault in faults:,0,2,0.2,912
5019749dc8d967c62591dc2776a004d887d10619,parseError = True,1,2,0.2,913
5019749dc8d967c62591dc2776a004d887d10619,parseError = False,1,2,0.2,914
5019749dc8d967c62591dc2776a004d887d10619,parseError = True,0,2,0.2,915
5019749dc8d967c62591dc2776a004d887d10619,parseError = False,0,2,0.2,916
5019749dc8d967c62591dc2776a004d887d10619,for prefix in used_prefixes:,1,2,0.2,917
5019749dc8d967c62591dc2776a004d887d10619,#TODO(bcwaldon): accomplish this without a type-check,1,2,0.2,918
5019749dc8d967c62591dc2776a004d887d10619,for item in data:,1,2,0.2,919
5019749dc8d967c62591dc2776a004d887d10619,elif data is None:,1,2,0.2,920
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Data %(data)s type is %(type)s""),",1,2,0.2,921
5019749dc8d967c62591dc2776a004d887d10619,for link in links:,1,2,0.2,922
5019749dc8d967c62591dc2776a004d887d10619,"for prefix, _ns in ext_ns.items():",1,2,0.2,923
5019749dc8d967c62591dc2776a004d887d10619,"for prefix, _ns in ext_ns_bc.items():",1,2,0.2,924
5019749dc8d967c62591dc2776a004d887d10619,"link_key = ""%s_links"" % root_tag",1,2,0.2,925
5019749dc8d967c62591dc2776a004d887d10619,for link in link_nodes:,1,2,0.2,926
5019749dc8d967c62591dc2776a004d887d10619,parseError = False,1,2,0.2,927
5019749dc8d967c62591dc2776a004d887d10619,parseError = True,1,2,0.2,928
5019749dc8d967c62591dc2776a004d887d10619,:param listnames: list of XML node names whose subnodes should,1,2,0.2,929
5019749dc8d967c62591dc2776a004d887d10619,if attrType and attrType in converters:,1,2,0.2,930
5019749dc8d967c62591dc2776a004d887d10619,"return [self._from_xml_node(n, listnames) for n in node]",1,2,0.2,931
5019749dc8d967c62591dc2776a004d887d10619,for attr in node.keys():,1,2,0.2,932
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Got router deleted notification for %s', router_id)",0,2,0.2,933
5019749dc8d967c62591dc2776a004d887d10619,ctxt.reraise = False,0,2,0.2,934
5019749dc8d967c62591dc2776a004d887d10619,'--server=%s' % server,0,2,0.2,935
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Added route entry is '%s'"", route)",0,2,0.2,936
5019749dc8d967c62591dc2776a004d887d10619,# Table 0 (default) will sort incoming traffic depending on in_port,0,2,0.2,937
5019749dc8d967c62591dc2776a004d887d10619,# will resubmit unknown unicasts to table FLOOD_TO_TUN to treat them,0,2,0.2,938
5019749dc8d967c62591dc2776a004d887d10619,"# mac adresses will be learned. For now, just add a default flow that",0,2,0.2,939
5019749dc8d967c62591dc2776a004d887d10619,"# Egress unicast will be handled in table UCAST_TO_TUN, where remote",0,2,0.2,940
5019749dc8d967c62591dc2776a004d887d10619,"# Once remote mac adresses are learnt, packet is outputed to patch_int",0,2,0.2,941
5019749dc8d967c62591dc2776a004d887d10619,# dynamically set-up flows in UCAST_TO_TUN corresponding to remote mac,0,2,0.2,942
5019749dc8d967c62591dc2776a004d887d10619,for tunnel_type in constants.TUNNEL_NETWORK_TYPES:,0,2,0.2,943
5019749dc8d967c62591dc2776a004d887d10619,msg = None,0,2,0.2,944
5019749dc8d967c62591dc2776a004d887d10619,# wait interval past the default of 0.01s.,0,2,0.2,945
5019749dc8d967c62591dc2776a004d887d10619,help=_('Mapping between flavor and LinuxInterfaceDriver')),1,2,0.2,946
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Mapping between flavor and LinuxInterfaceDriver')),",0,2,0.2,947
5019749dc8d967c62591dc2776a004d887d10619,"driver = self._get_driver_by_device_name(device_name, namespace=None)",1,2,0.2,948
5019749dc8d967c62591dc2776a004d887d10619,ports = self.quantum.list_ports(mac_address=mac_address),1,2,0.2,949
5019749dc8d967c62591dc2776a004d887d10619,driver = self.flavor_driver_map[plugin_tag],0,2,0.2,950
5019749dc8d967c62591dc2776a004d887d10619,"plugin_tag = self._get_device_plugin_tag(device_name, namespace)",0,2,0.2,951
5019749dc8d967c62591dc2776a004d887d10619,"# FLOOD_TO_TUN will handle flooding in tunnels based on lvid,",0,2,0.2,952
5019749dc8d967c62591dc2776a004d887d10619,"for network_id, vlan_mapping in self.local_vlan_map.iteritems():",0,2,0.2,953
5019749dc8d967c62591dc2776a004d887d10619,if self.enable_tunneling and lvm.network_type in (,1,2,0.2,954
5019749dc8d967c62591dc2776a004d887d10619,"'(Disable by setting to 0)')),",0,2,0.2,955
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_('Arguments dropped when creating ',0,2,0.2,956
5019749dc8d967c62591dc2776a004d887d10619,LOG.warn(_('Arguments dropped when creating ',1,2,0.2,957
5019749dc8d967c62591dc2776a004d887d10619,"'-1 for unlimited')),",1,2,0.2,958
5019749dc8d967c62591dc2776a004d887d10619,"'-1 for unlimited')),",1,2,0.2,959
5019749dc8d967c62591dc2776a004d887d10619,"'minus for unlimited')),",1,2,0.2,960
5019749dc8d967c62591dc2776a004d887d10619,self._delete_stale_namespaces = (self.conf.use_namespaces and,0,2,0.2,961
5019749dc8d967c62591dc2776a004d887d10619,"""""""Destroys the stale router namespaces",0,2,0.2,962
5019749dc8d967c62591dc2776a004d887d10619,for ns in router_namespaces:,0,2,0.2,963
5019749dc8d967c62591dc2776a004d887d10619,self._delete_stale_namespaces = False,0,2,0.2,964
5019749dc8d967c62591dc2776a004d887d10619,self.fullsync = True,0,2,0.2,965
5019749dc8d967c62591dc2776a004d887d10619,other's toes on init.  This only makes sense if only_router_id is set.,1,2,0.2,966
5019749dc8d967c62591dc2776a004d887d10619,for ns in root_ip.get_namespaces(self.root_helper):,1,2,0.2,967
5019749dc8d967c62591dc2776a004d887d10619,if only_router_id and not only_router_id == router_id:,1,2,0.2,968
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""DVR: Failed updating arp entry""))",0,2,0.2,969
5019749dc8d967c62591dc2776a004d887d10619,if 'Exit code: 1\n' not in str(e):,1,2,0.2,970
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Removed route entry is '%s'"", route)",0,2,0.2,971
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""port_removed failed for %(device)s: %(e)s"",",0,2,0.2,972
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done creating vxlan interface %s""), interface)",1,2,0.2,973
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Creating subinterface %(interface)s for """,1,2,0.2,974
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_(""Invalid Segmentation ID: %s, will lead to """,1,2,0.2,975
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_(""Invalid VLAN ID, will lead to incorrect """,1,2,0.2,976
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Agent out of sync with plugin!""))",0,2,0.2,977
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""LinuxBridge Agent RPC Daemon Started!""))",0,2,0.2,978
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""port_update RPC received for port: %s"", port_id)",0,2,0.2,979
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Deleting bridge %s""), bridge_name)",1,2,0.2,980
5019749dc8d967c62591dc2776a004d887d10619,'vxlan_group option to enable VXLAN MCAST mode')),0,2,0.2,981
5019749dc8d967c62591dc2776a004d887d10619,"'""%(command)s"" to enable %(mode)s mode') %",0,2,0.2,982
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Deleting subinterface %s for vlan"", interface)",0,2,0.2,983
5019749dc8d967c62591dc2776a004d887d10619,"""%(bridge_name)s does not exist"",",0,2,0.2,984
5019749dc8d967c62591dc2776a004d887d10619,"""! Exception: %(e)s""),",0,2,0.2,985
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Unable to add %(interface)s to %(bridge_name)s""",0,2,0.2,986
5019749dc8d967c62591dc2776a004d887d10619,"""%(bridge_name)s"") % data",1,2,0.2,987
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done deleting bridge %s""), bridge_name)",1,2,0.2,988
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_LW(""Invalid Segmentation ID: %s, will lead to """,0,2,0.2,989
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Agent loop found changes! %s""), device_info)",1,2,0.2,990
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""agent_updated by server side %s!""), payload)",0,2,0.2,991
5019749dc8d967c62591dc2776a004d887d10619,"_(""'%s' exceeds the 255 character hostname limit"") % trimmed)",0,2,0.2,992
5019749dc8d967c62591dc2776a004d887d10619,trimmed = data if data[-1] != '.' else data[:-1],0,2,0.2,993
5019749dc8d967c62591dc2776a004d887d10619,if host in hosts:,0,2,0.2,994
5019749dc8d967c62591dc2776a004d887d10619,msg = _validate_ip_or_hostname(host),0,2,0.2,995
5019749dc8d967c62591dc2776a004d887d10619,""" Agent terminated!""), e)",1,2,0.2,996
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Agent out of sync with plugin!""))",1,2,0.2,997
5019749dc8d967c62591dc2776a004d887d10619,"""%(bridge_name)s does not exist""),",1,2,0.2,998
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""LinuxBridge Agent RPC Daemon Started!""))",1,2,0.2,999
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Failed reporting state!""))",1,2,0.2,1000
5019749dc8d967c62591dc2776a004d887d10619,'vxlan_group option to enable VXLAN MCAST mode')),1,2,0.2,1001
5019749dc8d967c62591dc2776a004d887d10619,"'""%(command)s"" to enable %(mode)s mode') %",1,2,0.2,1002
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done deleting vxlan interface %s""), interface)",1,2,0.2,1003
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Deleting subinterface %s for vlan""), interface)",1,2,0.2,1004
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Creating subinterface %(interface)s for """,0,2,0.2,1005
5019749dc8d967c62591dc2776a004d887d10619,"if len(names) > 1 and re.match(""^[0-9]+$"", names[-1]):",0,2,0.2,1006
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_LW(""Invalid VLAN ID, will lead to incorrect """,0,2,0.2,1007
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""IPTablesManager.apply completed with success"")",0,2,0.2,1008
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Failed reporting state!""))",1,2,0.2,1009
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""agent_updated by server side %s!""), payload)",1,2,0.2,1010
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('Unable to determine dnsmasq version. ',0,2,0.2,1011
5019749dc8d967c62591dc2776a004d887d10619,"'turned off DHCP: %s', self.network.id)",0,2,0.2,1012
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Reloading allocations for network: %s', self.network.id)",0,2,0.2,1013
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Building host file: %s', filename)",0,2,0.2,1014
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('Unable to determine dnsmasq version. ',1,2,0.2,1015
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Unplugged interface '%s'"", device_name)",0,2,0.2,1016
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Preparing device (%s) filter"", port['device'])",0,2,0.2,1017
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Updating device (%s) filter"", port['device'])",0,2,0.2,1018
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Removing device (%s) filter"", port['device'])",0,2,0.2,1019
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Preparing device (%s) filter""), port['device'])",1,2,0.2,1020
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Updating device (%s) filter""), port['device'])",1,2,0.2,1021
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Removing device (%s) filter""), port['device'])",1,2,0.2,1022
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""DVR: Failed updating arp entry""))",1,2,0.2,1023
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Unable to find table %s', table_name)",0,2,0.2,1024
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Found failed openvswitch port: %s""), row)",1,2,0.2,1025
5019749dc8d967c62591dc2776a004d887d10619,'that an openvswitch version that supports VXLAN is ',0,2,0.2,1026
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('get_active_networks_info from %s', host)",0,2,0.2,1027
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Ext namespace: %s'), extension.get_namespace())",1,2,0.2,1028
5019749dc8d967c62591dc2776a004d887d10619,"""extensions: %s because of missing requirements.""),",1,2,0.2,1029
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Bridge %s not found.""), bridge)",1,2,0.2,1030
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Interface %s not found.""), iface)",1,2,0.2,1031
5019749dc8d967c62591dc2776a004d887d10619,"""extensions: %s because of missing requirements.""),",0,2,0.2,1032
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_(""Found not yet ready openvswitch port: %s""), row)",1,2,0.2,1033
5019749dc8d967c62591dc2776a004d887d10619,'that an openvswitch version that supports VXLAN is ',1,2,0.2,1034
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Bridge %s not found.""), bridge)",0,2,0.2,1035
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Interface %s not found.""), iface)",0,2,0.2,1036
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Found failed openvswitch port: %s""), row)",0,2,0.2,1037
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warn(_LW(""Found not yet ready openvswitch port: %s""), row)",0,2,0.2,1038
5019749dc8d967c62591dc2776a004d887d10619,"'subnet_id': subnet_id,  # deprecated by IPv6 multi-prefix",0,1,0.1,1039
5019749dc8d967c62591dc2776a004d887d10619,if p['network_id'] == net_id and self._port_has_ipv6_address(p):,0,1,0.1,1040
5019749dc8d967c62591dc2776a004d887d10619,return port,0,1,0.1,1041
5019749dc8d967c62591dc2776a004d887d10619,# if one exists,0,1,0.1,1042
5019749dc8d967c62591dc2776a004d887d10619,fixed_ips = list(port['port']['fixed_ips']),0,1,0.1,1043
5019749dc8d967c62591dc2776a004d887d10619,"{'fixed_ips': fixed_ips}}), [subnet], False",0,1,0.1,1044
5019749dc8d967c62591dc2776a004d887d10619,"'name': ''}}), [subnet], True",0,1,0.1,1045
5019749dc8d967c62591dc2776a004d887d10619,subnet_id = fixed_ips[0]['subnet_id'],1,1,0.1,1046
5019749dc8d967c62591dc2776a004d887d10619,"port, subnets, new_port = self._add_interface_by_subnet(",0,1,0.1,1047
5019749dc8d967c62591dc2776a004d887d10619,with context.session.begin(subtransactions=True):,0,1,0.1,1048
5019749dc8d967c62591dc2776a004d887d10619,router_port = RouterPort(,0,1,0.1,1049
5019749dc8d967c62591dc2776a004d887d10619,port_subnet_ids = [fixed_ip['subnet_id'],0,1,0.1,1050
5019749dc8d967c62591dc2776a004d887d10619,elif subnet_id in port_subnets:,0,1,0.1,1051
5019749dc8d967c62591dc2776a004d887d10619,from neutron.i18n import _LI,1,1,0.1,1052
5019749dc8d967c62591dc2776a004d887d10619,return True,0,1,0.1,1053
5019749dc8d967c62591dc2776a004d887d10619,p = port['port'],0,1,0.1,1054
5019749dc8d967c62591dc2776a004d887d10619,# is True.,0,1,0.1,1055
5019749dc8d967c62591dc2776a004d887d10619,"return port, subnets",0,1,0.1,1056
5019749dc8d967c62591dc2776a004d887d10619,if (existing_port['network_id'] == port['network_id'] and,0,1,0.1,1057
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.i18n import _LI, _LE",0,1,0.1,1058
5019749dc8d967c62591dc2776a004d887d10619,if not interface_info:,1,1,0.1,1059
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='router', msg=msg)",1,1,0.1,1060
5019749dc8d967c62591dc2776a004d887d10619,if port_id_specified and subnet_id_specified:,1,1,0.1,1061
5019749dc8d967c62591dc2776a004d887d10619,# _validate_interface_info ensures that at least one of remote_by_*,0,1,0.1,1062
5019749dc8d967c62591dc2776a004d887d10619,"remove_by_port, remove_by_subnet = (",0,1,0.1,1063
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='router', msg=msg)",0,1,0.1,1064
5019749dc8d967c62591dc2776a004d887d10619,if port_id_specified and subnet_id_specified:,0,1,0.1,1065
5019749dc8d967c62591dc2776a004d887d10619,if not for_removal:,0,1,0.1,1066
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),1,1,0.1,1067
5019749dc8d967c62591dc2776a004d887d10619,return msg,0,1,0.1,1068
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),0,1,0.1,1069
5019749dc8d967c62591dc2776a004d887d10619,with context.session.begin(subtransactions=True):,1,1,0.1,1070
5019749dc8d967c62591dc2776a004d887d10619,return port,1,1,0.1,1071
5019749dc8d967c62591dc2776a004d887d10619,floating_fixed_ip = external_ipv4_ips[0],0,1,0.1,1072
5019749dc8d967c62591dc2776a004d887d10619,router_port = RouterPort(,1,1,0.1,1073
5019749dc8d967c62591dc2776a004d887d10619,"""Use 'sudo neutron-rootwrap /etc/neutron/rootwrap.conf' """,0,1,0.1,1074
5019749dc8d967c62591dc2776a004d887d10619,if not external_port['fixed_ips']:,1,1,0.1,1075
5019749dc8d967c62591dc2776a004d887d10619,floating_fixed_ip = external_port['fixed_ips'][0],1,1,0.1,1076
5019749dc8d967c62591dc2776a004d887d10619,from oslo_config import cfg,1,1,0.1,1077
5019749dc8d967c62591dc2776a004d887d10619,OPTS = [,1,1,0.1,1078
5019749dc8d967c62591dc2776a004d887d10619,# Needed for drivers,1,1,0.1,1079
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Root helper application. """,0,1,0.1,1080
5019749dc8d967c62591dc2776a004d887d10619,EXT_NET_BRIDGE_OPTS = [,0,1,0.1,1081
5019749dc8d967c62591dc2776a004d887d10619,port_subnet_id = port_db['fixed_ips'][0]['subnet_id'],1,1,0.1,1082
5019749dc8d967c62591dc2776a004d887d10619,"""in the M release."")),",0,1,0.1,1083
5019749dc8d967c62591dc2776a004d887d10619,"""requires enable_isolated_metadata = True."")),",0,1,0.1,1084
5019749dc8d967c62591dc2776a004d887d10619,"""external network gateway."")),",0,1,0.1,1085
5019749dc8d967c62591dc2776a004d887d10619,"'config key, but in [neutron] section.'),",0,1,0.1,1086
5019749dc8d967c62591dc2776a004d887d10619,"""extensions:/path/to/more/exts:/even/more/exts. """,0,1,0.1,1087
5019749dc8d967c62591dc2776a004d887d10619,"""need to specify them here."")),",0,1,0.1,1088
5019749dc8d967c62591dc2776a004d887d10619,internal_subnet_id = internal_port['fixed_ips'][0]['subnet_id'],1,1,0.1,1089
5019749dc8d967c62591dc2776a004d887d10619,internal_ip_address = internal_port['fixed_ips'][0]['ip_address'],1,1,0.1,1090
5019749dc8d967c62591dc2776a004d887d10619,if not ips:,1,1,0.1,1091
5019749dc8d967c62591dc2776a004d887d10619,proxy = UnixDomainMetadataProxy(cfg.CONF),1,1,0.1,1092
5019749dc8d967c62591dc2776a004d887d10619,if not external_ipv4_ips:,0,1,0.1,1093
5019749dc8d967c62591dc2776a004d887d10619,external_ipv4_ips = self._port_ipv4_fixed_ips(external_port),0,1,0.1,1094
5019749dc8d967c62591dc2776a004d887d10619,"if not self._is_ipv4_network(context, f_net_id):",0,1,0.1,1095
5019749dc8d967c62591dc2776a004d887d10619,"net = self._core_plugin._get_network(context, net_id)",0,1,0.1,1096
5019749dc8d967c62591dc2776a004d887d10619,internal_subnet_id = ipv4_fixed_ips[0]['subnet_id'],0,1,0.1,1097
5019749dc8d967c62591dc2776a004d887d10619,internal_ip_address = ipv4_fixed_ips[0]['ip_address'],0,1,0.1,1098
5019749dc8d967c62591dc2776a004d887d10619,'floating IP') % internal_port['id']),0,1,0.1,1099
5019749dc8d967c62591dc2776a004d887d10619,if not ipv4_fixed_ips:,0,1,0.1,1100
5019749dc8d967c62591dc2776a004d887d10619,ipv4_fixed_ips = self._port_ipv4_fixed_ips(internal_port),0,1,0.1,1101
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='floatingip', msg=msg)",0,1,0.1,1102
5019749dc8d967c62591dc2776a004d887d10619,if 'id' in fip:,0,1,0.1,1103
5019749dc8d967c62591dc2776a004d887d10619,"default_quota_items = ['network', 'subnet', 'port']",0,1,0.1,1104
5019749dc8d967c62591dc2776a004d887d10619,if subnet_id and port_subnet_id != subnet_id:,1,1,0.1,1105
5019749dc8d967c62591dc2776a004d887d10619,"""subnet CIDR allocation. """,0,1,0.1,1106
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done deleting bridge %s"", bridge_name)",0,1,0.1,1107
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Private key of client certificate.""))",1,1,0.1,1108
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""RPC agent_id: %s""), self.agent_id)",1,1,0.1,1109
5019749dc8d967c62591dc2776a004d887d10619,"""Exception: %(e)s""),",1,1,0.1,1110
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),1,1,0.1,1111
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done deleting subinterface %s""), interface)",1,1,0.1,1112
5019749dc8d967c62591dc2776a004d887d10619,'are required to enable VXLAN.')),1,1,0.1,1113
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Using %s VXLAN mode'), self.vxlan_mode)",1,1,0.1,1114
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Delete %s""), bridge_name)",1,1,0.1,1115
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Attachment %s removed""), device)",1,1,0.1,1116
5019749dc8d967c62591dc2776a004d887d10619,"""%(ip_err)s, %(name_err)s"") % {'ip_err': ip_err, 'host': host,",0,1,0.1,1117
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Port %s updated.""), device)",1,1,0.1,1118
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Loop iteration exceeded interval """,1,1,0.1,1119
5019749dc8d967c62591dc2776a004d887d10619,ip_err = _validate_ip_address(host),0,1,0.1,1120
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done creating vxlan interface %s"", interface)",0,1,0.1,1121
5019749dc8d967c62591dc2776a004d887d10619,if not ip_err:,0,1,0.1,1122
5019749dc8d967c62591dc2776a004d887d10619,name_err = _validate_hostname(host),0,1,0.1,1123
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Done creating subinterface %s""), interface)",1,1,0.1,1124
5019749dc8d967c62591dc2776a004d887d10619,"""incorrect vxlan device name""), segmentation_id)",1,1,0.1,1125
5019749dc8d967c62591dc2776a004d887d10619,"""tap device name""))",1,1,0.1,1126
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_(""Invalid Network ID, will lead to incorrect bridge""",1,1,0.1,1127
5019749dc8d967c62591dc2776a004d887d10619,'must be provided')),1,1,0.1,1128
5019749dc8d967c62591dc2776a004d887d10619,"""Agent terminated!""), e)",0,1,0.1,1129
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Parsing physical_interface_mappings failed: %s. """,0,1,0.1,1130
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Loop iteration exceeded interval """,0,1,0.1,1131
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Agent loop found changes! %s"", device_info)",0,1,0.1,1132
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Port %s updated.""), device)",0,1,0.1,1133
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Attachment %s removed""), device)",0,1,0.1,1134
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""RPC agent_id: %s""), self.agent_id)",0,1,0.1,1135
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Failed reporting state!""))",0,1,0.1,1136
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Using %s VXLAN mode', self.vxlan_mode)",0,1,0.1,1137
5019749dc8d967c62591dc2776a004d887d10619,'above are required to enable VXLAN.')),0,1,0.1,1138
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done deleting vxlan interface %s"", interface)",0,1,0.1,1139
5019749dc8d967c62591dc2776a004d887d10619,"""Nova security groups."")),",0,1,0.1,1140
5019749dc8d967c62591dc2776a004d887d10619,if not name_err:,0,1,0.1,1141
5019749dc8d967c62591dc2776a004d887d10619,return msg,0,1,0.1,1142
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Protocol to access nova metadata, http or https"")),",1,1,0.1,1143
5019749dc8d967c62591dc2776a004d887d10619,"""is not implemented."")",1,1,0.1,1144
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI('Loaded quota_driver: %s.'), _driver_class)",0,1,0.1,1145
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_('Loaded quota_driver: %s.'), _driver_class)",1,1,0.1,1146
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.i18n import _LE, _LI",0,1,0.1,1147
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Active plugin doesn't implement start_rpc_listeners"")",0,1,0.1,1148
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Neutron service started, listening on %(host)s:%(port)s""),",0,1,0.1,1149
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Active plugin doesn't implement start_rpc_listeners""))",1,1,0.1,1150
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Neutron service started, listening on %(host)s:%(port)s""),",1,1,0.1,1151
5019749dc8d967c62591dc2776a004d887d10619,hosts = [],0,1,0.1,1152
5019749dc8d967c62591dc2776a004d887d10619,import sys,1,1,0.1,1153
5019749dc8d967c62591dc2776a004d887d10619,OPTS = [,1,1,0.1,1154
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Admin tenant name"")),",1,1,0.1,1155
5019749dc8d967c62591dc2776a004d887d10619,""" ssl"")),",1,1,0.1,1156
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Certificate Authority public key (CA cert) """,1,1,0.1,1157
5019749dc8d967c62591dc2776a004d887d10619,"""file for ssl"")),",1,1,0.1,1158
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.i18n import _LI, _LW",0,1,0.1,1159
5019749dc8d967c62591dc2776a004d887d10619,"{'field': self.field,",1,1,0.1,1160
5019749dc8d967c62591dc2776a004d887d10619,"{'field': self.field, 'target_dict': target_dict})",0,1,0.1,1161
5019749dc8d967c62591dc2776a004d887d10619,"HOSTNAME_PATTERN = (""(?=^.{1,254}$)(^(?:(?!\d+.|-)[a-zA-Z0-9_\-]{1,62}""",1,1,0.1,1162
5019749dc8d967c62591dc2776a004d887d10619,return msg,1,1,0.1,1163
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),1,1,0.1,1164
5019749dc8d967c62591dc2776a004d887d10619,ips = [],1,1,0.1,1165
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),0,1,0.1,1166
5019749dc8d967c62591dc2776a004d887d10619,"if not re.match(hostname_pattern, name):",0,1,0.1,1167
5019749dc8d967c62591dc2776a004d887d10619,"raise TypeError(_(""Encountered an empty component.""))",0,1,0.1,1168
5019749dc8d967c62591dc2776a004d887d10619,if not name:,0,1,0.1,1169
5019749dc8d967c62591dc2776a004d887d10619,names = trimmed.split('.'),0,1,0.1,1170
5019749dc8d967c62591dc2776a004d887d10619,raise TypeError(,0,1,0.1,1171
5019749dc8d967c62591dc2776a004d887d10619,# qualified per RFC 1034 (page 7).,0,1,0.1,1172
5019749dc8d967c62591dc2776a004d887d10619,"hostname_pattern = ""[a-zA-Z0-9-]{1,63}$""",0,1,0.1,1173
5019749dc8d967c62591dc2776a004d887d10619,# matches RFC 1123 (section 2.1) and RFC 952.,0,1,0.1,1174
5019749dc8d967c62591dc2776a004d887d10619,# full regex solution. The logic should validate that the hostname,0,1,0.1,1175
5019749dc8d967c62591dc2776a004d887d10619,"""CIDR allocation. """,0,1,0.1,1176
5019749dc8d967c62591dc2776a004d887d10619,:param manager: defaults to cfg.CONF.<topic>_manager,0,1,0.1,1177
5019749dc8d967c62591dc2776a004d887d10619,"""single-box testing but provides no connectivity """,0,1,0.1,1178
5019749dc8d967c62591dc2776a004d887d10619,OPTS = [,0,1,0.1,1179
5019749dc8d967c62591dc2776a004d887d10619,"from neutron._i18n import _, _LI",1,1,0.1,1180
5019749dc8d967c62591dc2776a004d887d10619,opts = [,1,1,0.1,1181
5019749dc8d967c62591dc2776a004d887d10619,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,1,0.1,1182
5019749dc8d967c62591dc2776a004d887d10619,#    under the License.,0,1,0.1,1183
5019749dc8d967c62591dc2776a004d887d10619,from oslo_config import cfg,0,1,0.1,1184
5019749dc8d967c62591dc2776a004d887d10619,from neutron._i18n import _,0,1,0.1,1185
5019749dc8d967c62591dc2776a004d887d10619,help=_('Router that will have connected instances\' ',0,1,0.1,1186
5019749dc8d967c62591dc2776a004d887d10619,DEFAULT_BRIDGE_MAPPINGS = [],1,1,0.1,1187
5019749dc8d967c62591dc2776a004d887d10619,opts = [,1,1,0.1,1188
5019749dc8d967c62591dc2776a004d887d10619,help=_('Router that will have connected instances\' ',1,1,0.1,1189
5019749dc8d967c62591dc2776a004d887d10619,from neutron.conf.plugins.ml2.drivers import ovs_conf,0,1,0.1,1190
5019749dc8d967c62591dc2776a004d887d10619,from neutron_lib import constants as n_const,1,1,0.1,1191
5019749dc8d967c62591dc2776a004d887d10619,from neutron._i18n import _,1,1,0.1,1192
5019749dc8d967c62591dc2776a004d887d10619,from neutron.plugins.common import constants as p_const,1,1,0.1,1193
5019749dc8d967c62591dc2776a004d887d10619,from neutron.conf.agent import cmd,0,1,0.1,1194
5019749dc8d967c62591dc2776a004d887d10619,from neutron._i18n import _LI,0,1,0.1,1195
5019749dc8d967c62591dc2776a004d887d10619,periodic_fuzzy_delay = CONF.periodic_fuzzy_delay,1,1,0.1,1196
5019749dc8d967c62591dc2776a004d887d10619,periodic_interval = CONF.periodic_interval,1,1,0.1,1197
5019749dc8d967c62591dc2776a004d887d10619,report_interval = CONF.report_interval,1,1,0.1,1198
5019749dc8d967c62591dc2776a004d887d10619,:param periodic_fuzzy_delay: defaults to CONF.periodic_fuzzy_delay,1,1,0.1,1199
5019749dc8d967c62591dc2776a004d887d10619,:param periodic_interval: defaults to CONF.periodic_interval,1,1,0.1,1200
5019749dc8d967c62591dc2776a004d887d10619,:param report_interval: defaults to CONF.report_interval,1,1,0.1,1201
5019749dc8d967c62591dc2776a004d887d10619,:param manager: defaults to CONF.<topic>_manager,1,1,0.1,1202
5019749dc8d967c62591dc2776a004d887d10619,:param host: defaults to CONF.host,1,1,0.1,1203
5019749dc8d967c62591dc2776a004d887d10619,CONF = cfg.CONF,1,1,0.1,1204
5019749dc8d967c62591dc2776a004d887d10619,"'of CPUs available for best performance.')),",1,1,0.1,1205
5019749dc8d967c62591dc2776a004d887d10619,service_opts = [,1,1,0.1,1206
5019749dc8d967c62591dc2776a004d887d10619,"from neutron._i18n import _, _LE, _LI",1,1,0.1,1207
5019749dc8d967c62591dc2776a004d887d10619,periodic_fuzzy_delay = cfg.CONF.periodic_fuzzy_delay,0,1,0.1,1208
5019749dc8d967c62591dc2776a004d887d10619,periodic_interval = cfg.CONF.periodic_interval,0,1,0.1,1209
5019749dc8d967c62591dc2776a004d887d10619,report_interval = cfg.CONF.report_interval,0,1,0.1,1210
5019749dc8d967c62591dc2776a004d887d10619,from neutron.plugins.ml2.drivers.openvswitch.agent.common \,1,1,0.1,1211
5019749dc8d967c62591dc2776a004d887d10619,DEFAULT_TUNNEL_TYPES = [],1,1,0.1,1212
5019749dc8d967c62591dc2776a004d887d10619,"'path_mtu - maxmum encapsulation header size). If <= 0, '",0,1,0.1,1213
5019749dc8d967c62591dc2776a004d887d10619,MIGRATION_ENTRYPOINTS = 'neutron.db.alembic_migrations',1,1,0.1,1214
5019749dc8d967c62591dc2776a004d887d10619,from neutron._i18n import _,1,1,0.1,1215
5019749dc8d967c62591dc2776a004d887d10619,OPTS = [,1,1,0.1,1216
5019749dc8d967c62591dc2776a004d887d10619,from oslo_config import cfg,1,1,0.1,1217
5019749dc8d967c62591dc2776a004d887d10619,from neutron._i18n import _,1,1,0.1,1218
5019749dc8d967c62591dc2776a004d887d10619,OPTS = [,1,1,0.1,1219
5019749dc8d967c62591dc2776a004d887d10619,from neutron.conf.db import migration_cli,0,1,0.1,1220
5019749dc8d967c62591dc2776a004d887d10619,migration_entrypoints = {,1,1,0.1,1221
5019749dc8d967c62591dc2776a004d887d10619,ovs_opts = [,1,1,0.1,1222
5019749dc8d967c62591dc2776a004d887d10619,_core_opts = [,1,1,0.1,1223
5019749dc8d967c62591dc2776a004d887d10619,"""Can be one of: '%s'."")",1,1,0.1,1224
5019749dc8d967c62591dc2776a004d887d10619,"% ""', '"".join(INSTALLED_SUBPROJECTS))),",1,1,0.1,1225
5019749dc8d967c62591dc2776a004d887d10619,"""branches file structure.""))",1,1,0.1,1226
5019749dc8d967c62591dc2776a004d887d10619,_db_opts = [,1,1,0.1,1227
5019749dc8d967c62591dc2776a004d887d10619,"help=_('URL to database')),",1,1,0.1,1228
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='floatingip', msg=msg)",1,1,0.1,1229
5019749dc8d967c62591dc2776a004d887d10619,if not subnet['gateway_ip']:,1,1,0.1,1230
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Selects the Agent Type reported""))",1,1,0.1,1231
5019749dc8d967c62591dc2776a004d887d10619,"""cause brief traffic interruption."")),",1,1,0.1,1232
5019749dc8d967c62591dc2776a004d887d10619,"""timeout won't be changed"")),",1,1,0.1,1233
5019749dc8d967c62591dc2776a004d887d10619,"""outgoing IP packet carrying GRE/VXLAN tunnel."")),",1,1,0.1,1234
5019749dc8d967c62591dc2776a004d887d10619,"""port security extension."")),",1,1,0.1,1235
5019749dc8d967c62591dc2776a004d887d10619,"""For LinuxBridge, this requires ebtables. For OVS, it """,1,1,0.1,1236
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""MTU size of veth interfaces"")),",1,1,0.1,1237
5019749dc8d967c62591dc2776a004d887d10619,"""ovsdb monitor after losing communication with it."")),",1,1,0.1,1238
5019749dc8d967c62591dc2776a004d887d10619,agent_opts = [,1,1,0.1,1239
5019749dc8d967c62591dc2776a004d887d10619,"""OpenFlow request. """,1,1,0.1,1240
5019749dc8d967c62591dc2776a004d887d10619,"""Used only for 'native' driver."")),",1,1,0.1,1241
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""OVS vhost-user socket directory."")),",1,1,0.1,1242
5019749dc8d967c62591dc2776a004d887d10619,"""userspace datapath set this value to 'netdev'."")),",1,1,0.1,1243
5019749dc8d967c62591dc2776a004d887d10619,"""neutron server node(s)."")),",1,1,0.1,1244
5019749dc8d967c62591dc2776a004d887d10619,"""to their network connectivity."")),",1,1,0.1,1245
5019749dc8d967c62591dc2776a004d887d10619,:param periodic_fuzzy_delay: defaults to cfg.CONF.periodic_fuzzy_delay,0,1,0.1,1246
5019749dc8d967c62591dc2776a004d887d10619,:param periodic_interval: defaults to cfg.CONF.periodic_interval,0,1,0.1,1247
5019749dc8d967c62591dc2776a004d887d10619,:param report_interval: defaults to cfg.CONF.report_interval,0,1,0.1,1248
5019749dc8d967c62591dc2776a004d887d10619,mappings[key] = value,0,1,0.1,1249
5019749dc8d967c62591dc2776a004d887d10619,"validate_list_of_unique_strings = functools.partial(_validate_list_of_items,",0,1,0.1,1250
5019749dc8d967c62591dc2776a004d887d10619,"if not isinstance(data, list):",1,1,0.1,1251
5019749dc8d967c62591dc2776a004d887d10619,return msg,1,1,0.1,1252
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),1,1,0.1,1253
5019749dc8d967c62591dc2776a004d887d10619,"help=_('MTU setting for device.')),",1,1,0.1,1254
5019749dc8d967c62591dc2776a004d887d10619,"""unique"") % {'key': key,",0,1,0.1,1255
5019749dc8d967c62591dc2776a004d887d10619,"""unique"") % {'key': key, 'mapping': mapping})",1,1,0.1,1256
5019749dc8d967c62591dc2776a004d887d10619,:param host: defaults to cfg.CONF.host,0,1,0.1,1257
5019749dc8d967c62591dc2776a004d887d10619,mappings[key] = value,1,1,0.1,1258
5019749dc8d967c62591dc2776a004d887d10619,"""unique"") % {'key': key,",0,1,0.1,1259
5019749dc8d967c62591dc2776a004d887d10619,mappings[key] = value,0,1,0.1,1260
5019749dc8d967c62591dc2776a004d887d10619,"""unique"") % {'key': key, 'mapping': mapping})",1,1,0.1,1261
5019749dc8d967c62591dc2776a004d887d10619,mappings[key] = value,1,1,0.1,1262
5019749dc8d967c62591dc2776a004d887d10619,router_subnets = [],0,1,0.1,1263
5019749dc8d967c62591dc2776a004d887d10619,return msg,0,1,0.1,1264
5019749dc8d967c62591dc2776a004d887d10619,"if not isinstance(data, list):",0,1,0.1,1265
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""OVS datapath to use."")),",1,1,0.1,1266
5019749dc8d967c62591dc2776a004d887d10619,"""Deprecated for ofagent."")),",1,1,0.1,1267
5019749dc8d967c62591dc2776a004d887d10619,"""interfaces on each agent"")),",1,1,0.1,1268
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""List of <physical_network>:<physical_interface>"")),",1,1,0.1,1269
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""The path for API extensions"")),",1,1,0.1,1270
5019749dc8d967c62591dc2776a004d887d10619,"""by the agents."")),",1,1,0.1,1271
5019749dc8d967c62591dc2776a004d887d10619,"""in the M release."")),",1,1,0.1,1272
5019749dc8d967c62591dc2776a004d887d10619,"""enable_isolated_metadata = True"")),",1,1,0.1,1273
5019749dc8d967c62591dc2776a004d887d10619,"""dedicated network. Requires """,1,1,0.1,1274
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Interval to resync."")),",1,1,0.1,1275
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Add comments to iptables rules."")),",1,1,0.1,1276
5019749dc8d967c62591dc2776a004d887d10619,"""userspace datapath set this value to 'netdev'."")),",0,1,0.1,1277
5019749dc8d967c62591dc2776a004d887d10619,"""agent anymore. Deprecated for ofagent."")),",0,1,0.1,1278
5019749dc8d967c62591dc2776a004d887d10619,"""to their network connectivity."")),",0,1,0.1,1279
5019749dc8d967c62591dc2776a004d887d10619,"""<physical_network>:<physical_interface> tuples """,0,1,0.1,1280
5019749dc8d967c62591dc2776a004d887d10619,if ip['subnet_id'] in new_subnet_ids:,0,1,0.1,1281
5019749dc8d967c62591dc2776a004d887d10619,% ip['subnet_id']),0,1,0.1,1282
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='router', msg=msg)",0,1,0.1,1283
5019749dc8d967c62591dc2776a004d887d10619,QUOTA_DB_DRIVER = quota.QUOTA_DB_DRIVER,0,1,0.1,1284
5019749dc8d967c62591dc2776a004d887d10619,from neutron.conf import service,0,1,0.1,1285
5019749dc8d967c62591dc2776a004d887d10619,"from neutron._i18n import _LE, _LI",0,1,0.1,1286
5019749dc8d967c62591dc2776a004d887d10619,"'of CPUs available for best performance.')),",0,1,0.1,1287
5019749dc8d967c62591dc2776a004d887d10619,service_opts = [,0,1,0.1,1288
5019749dc8d967c62591dc2776a004d887d10619,from neutron._i18n import _,0,1,0.1,1289
5019749dc8d967c62591dc2776a004d887d10619,from oslo_config import cfg,0,1,0.1,1290
5019749dc8d967c62591dc2776a004d887d10619,#    under the License.,0,1,0.1,1291
5019749dc8d967c62591dc2776a004d887d10619,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,1,0.1,1292
5019749dc8d967c62591dc2776a004d887d10619,quota_opts = [,1,1,0.1,1293
5019749dc8d967c62591dc2776a004d887d10619,"default_quota_items = ['network', 'subnet', 'port']",1,1,0.1,1294
5019749dc8d967c62591dc2776a004d887d10619,QUOTA_CONF_DRIVER = 'neutron.quota.ConfDriver',1,1,0.1,1295
5019749dc8d967c62591dc2776a004d887d10619,QUOTA_DB_MODULE = 'neutron.db.quota.driver',1,1,0.1,1296
5019749dc8d967c62591dc2776a004d887d10619,default_quota_items = quota.default_quota_items,0,1,0.1,1297
5019749dc8d967c62591dc2776a004d887d10619,QUOTA_CONF_DRIVER = quota.QUOTA_CONF_DRIVER,0,1,0.1,1298
5019749dc8d967c62591dc2776a004d887d10619,QUOTA_DB_MODULE = quota.QUOTA_DB_MODULE,0,1,0.1,1299
5019749dc8d967c62591dc2776a004d887d10619,id_filter = {'id': router_subnets},0,1,0.1,1300
5019749dc8d967c62591dc2776a004d887d10619,"match2 = netaddr.all_matching_cidrs(ipnet, [subnet_cidr])",1,1,0.1,1301
5019749dc8d967c62591dc2776a004d887d10619,"match1 = netaddr.all_matching_cidrs(new_ipnet, [cidr])",1,1,0.1,1302
5019749dc8d967c62591dc2776a004d887d10619,ipnet = netaddr.IPNetwork(cidr),1,1,0.1,1303
5019749dc8d967c62591dc2776a004d887d10619,"cidr = self._core_plugin.get_subnet(context.elevated(),",1,1,0.1,1304
5019749dc8d967c62591dc2776a004d887d10619,sub_id = ip['subnet_id'],1,1,0.1,1305
5019749dc8d967c62591dc2776a004d887d10619,"raise n_exc.BadRequest(resource='router', msg=msg)",1,1,0.1,1306
5019749dc8d967c62591dc2776a004d887d10619,% subnet_id),1,1,0.1,1307
5019749dc8d967c62591dc2776a004d887d10619,new_ipnet = netaddr.IPNetwork(subnet_cidr),1,1,0.1,1308
5019749dc8d967c62591dc2776a004d887d10619,"match2 = netaddr.all_matching_cidrs(ipnet, [new_cidr])",0,1,0.1,1309
5019749dc8d967c62591dc2776a004d887d10619,"match1 = netaddr.all_matching_cidrs(new_ipnet, [cidr])",0,1,0.1,1310
5019749dc8d967c62591dc2776a004d887d10619,new_ipnet = netaddr.IPNetwork(new_cidr),0,1,0.1,1311
5019749dc8d967c62591dc2776a004d887d10619,new_cidr = s['cidr'],0,1,0.1,1312
5019749dc8d967c62591dc2776a004d887d10619,ipnet = netaddr.IPNetwork(cidr),0,1,0.1,1313
5019749dc8d967c62591dc2776a004d887d10619,cidr = sub['cidr'],0,1,0.1,1314
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Deleting bridge %s"", bridge_name)",0,1,0.1,1315
5019749dc8d967c62591dc2776a004d887d10619,"""extension '%s'""), ext.get_name())",1,1,0.1,1316
5019749dc8d967c62591dc2776a004d887d10619,"""incorrect vxlan device name""), segmentation_id)",0,1,0.1,1317
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_('%s failed'), action)",0,1,0.1,1318
5019749dc8d967c62591dc2776a004d887d10619,"if (hasattr(etree, 'ParseError') and",1,1,0.1,1319
5019749dc8d967c62591dc2776a004d887d10619,raise exception.MalformedRequestBody(reason=msg),1,1,0.1,1320
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Use Linux network namespaces"")),",1,1,0.1,1321
5019749dc8d967c62591dc2776a004d887d10619,mapped_exc = faults[fault],0,1,0.1,1322
5019749dc8d967c62591dc2776a004d887d10619,mapped_exc = webob.exc.HTTPInternalServerError,0,1,0.1,1323
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_('%(action)s failed (client error): %(exc)s'),",0,1,0.1,1324
5019749dc8d967c62591dc2776a004d887d10619,raise mapped_exc(**kwargs),0,1,0.1,1325
5019749dc8d967c62591dc2776a004d887d10619,"cmd = ['kill', '-9', pid]",0,1,0.1,1326
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_('%s failed'), action)",1,1,0.1,1327
5019749dc8d967c62591dc2776a004d887d10619,raise faults[fault](**kwargs),1,1,0.1,1328
5019749dc8d967c62591dc2776a004d887d10619,raise webob.exc.HTTPInternalServerError(**kwargs),1,1,0.1,1329
5019749dc8d967c62591dc2776a004d887d10619,from neutron.agent import dhcp_agent,0,1,0.1,1330
5019749dc8d967c62591dc2776a004d887d10619,class FakeDhcpPlugin(object):,0,1,0.1,1331
5019749dc8d967c62591dc2776a004d887d10619,class FakeNetwork(object):,1,1,0.1,1332
5019749dc8d967c62591dc2776a004d887d10619,raise,1,1,0.1,1333
5019749dc8d967c62591dc2776a004d887d10619,raise exception.MalformedRequestBody(reason=msg),0,1,0.1,1334
5019749dc8d967c62591dc2776a004d887d10619,"if (hasattr(etree, 'ParseError') and",0,1,0.1,1335
5019749dc8d967c62591dc2776a004d887d10619,with excutils.save_and_reraise_exception():,0,1,0.1,1336
5019749dc8d967c62591dc2776a004d887d10619,with excutils.save_and_reraise_exception() as ctxt:,0,1,0.1,1337
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common import excutils,0,1,0.1,1338
5019749dc8d967c62591dc2776a004d887d10619,result = self.run_vsctl(args),1,1,0.1,1339
5019749dc8d967c62591dc2776a004d887d10619,"ofport = self.db_get_val(""Interface"", name, ""ofport"")",1,1,0.1,1340
5019749dc8d967c62591dc2776a004d887d10619,"external_ids = self.db_get_map(""Interface"", name, ""external_ids"")",1,1,0.1,1341
5019749dc8d967c62591dc2776a004d887d10619,"res = self.run_vsctl([""list-ports"", self.br_name])",1,1,0.1,1342
5019749dc8d967c62591dc2776a004d887d10619,"output = self.run_vsctl([""get"", table, record, column])",1,1,0.1,1343
5019749dc8d967c62591dc2776a004d887d10619,return False,1,1,0.1,1344
5019749dc8d967c62591dc2776a004d887d10619,if 'Exit code: 2\n' in str(e):,1,1,0.1,1345
5019749dc8d967c62591dc2776a004d887d10619,raise,1,1,0.1,1346
5019749dc8d967c62591dc2776a004d887d10619,"result = self.run_vsctl(args, check_error=True)",0,1,0.1,1347
5019749dc8d967c62591dc2776a004d887d10619,"ofport = self.db_get_val(""Interface"", name, ""ofport"",",0,1,0.1,1348
5019749dc8d967c62591dc2776a004d887d10619,"external_ids = self.db_get_map(""Interface"", name, ""external_ids"",",0,1,0.1,1349
5019749dc8d967c62591dc2776a004d887d10619,opts = [,1,1,0.1,1350
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist, performing cleanup'),",0,1,0.1,1351
5019749dc8d967c62591dc2776a004d887d10619,"result = etree.SubElement(parent, nodename)",1,1,0.1,1352
5019749dc8d967c62591dc2776a004d887d10619,root_value = None,1,1,0.1,1353
5019749dc8d967c62591dc2776a004d887d10619,xmlns = self.metadata.get('xmlns'),1,1,0.1,1354
5019749dc8d967c62591dc2776a004d887d10619,xmlns = constants.XML_NS_V20,1,1,0.1,1355
5019749dc8d967c62591dc2776a004d887d10619,self.xmlns = xmlns,1,1,0.1,1356
5019749dc8d967c62591dc2776a004d887d10619,case will use 'VIRTUAL_ROOT_KEY' as XML root.,1,1,0.1,1357
5019749dc8d967c62591dc2776a004d887d10619,links = None,1,1,0.1,1358
5019749dc8d967c62591dc2776a004d887d10619,root_key = constants.VIRTUAL_ROOT_KEY,1,1,0.1,1359
5019749dc8d967c62591dc2776a004d887d10619,"links = data.pop(link_keys[0], None)",1,1,0.1,1360
5019749dc8d967c62591dc2776a004d887d10619,"cmd = ['kill', '-9', pid]",1,1,0.1,1361
5019749dc8d967c62591dc2776a004d887d10619,"root_value = data.get(root_key, data)",1,1,0.1,1362
5019749dc8d967c62591dc2776a004d887d10619,"doc = etree.Element(""_temp_root"")",1,1,0.1,1363
5019749dc8d967c62591dc2776a004d887d10619,used_prefixes = [],1,1,0.1,1364
5019749dc8d967c62591dc2776a004d887d10619,"ext_ns = self.metadata.get(constants.EXT_NS, {})",1,1,0.1,1365
5019749dc8d967c62591dc2776a004d887d10619,"ext_ns_bc = self.metadata.get(constants.EXT_NS_COMP, {})",1,1,0.1,1366
5019749dc8d967c62591dc2776a004d887d10619,if prefix in ext_ns:,1,1,0.1,1367
5019749dc8d967c62591dc2776a004d887d10619,if not xmlns:,1,1,0.1,1368
5019749dc8d967c62591dc2776a004d887d10619,a dictionary.,1,1,0.1,1369
5019749dc8d967c62591dc2776a004d887d10619,class XMLDictSerializer(DictSerializer):,1,1,0.1,1370
5019749dc8d967c62591dc2776a004d887d10619,"allowed_types = (""application/xml"", ""application/json"")",1,1,0.1,1371
5019749dc8d967c62591dc2776a004d887d10619,"ctypes = ['application/json', 'application/xml']",1,1,0.1,1372
5019749dc8d967c62591dc2776a004d887d10619,"if _format in ['json', 'xml']:",1,1,0.1,1373
5019749dc8d967c62591dc2776a004d887d10619,from neutron.common import constants,1,1,0.1,1374
5019749dc8d967c62591dc2776a004d887d10619,from xml.parsers import expat,1,1,0.1,1375
5019749dc8d967c62591dc2776a004d887d10619,from xml.etree import ElementTree as etree,1,1,0.1,1376
5019749dc8d967c62591dc2776a004d887d10619,serializer = Serializer(_metadata),0,1,0.1,1377
5019749dc8d967c62591dc2776a004d887d10619,"body = self._serialize(result, content_type)",0,1,0.1,1378
5019749dc8d967c62591dc2776a004d887d10619,"action_result = Fault(ex, self._fault_body_function)",0,1,0.1,1379
5019749dc8d967c62591dc2776a004d887d10619,"allowed_types = (""application/json"")",0,1,0.1,1380
5019749dc8d967c62591dc2776a004d887d10619,ctypes = ['application/json'],0,1,0.1,1381
5019749dc8d967c62591dc2776a004d887d10619,if _format in ['json']:,0,1,0.1,1382
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""List of <tun_min>:<tun_max>."")),",1,1,0.1,1383
5019749dc8d967c62591dc2776a004d887d10619,"""or <physical_network>."")),",1,1,0.1,1384
5019749dc8d967c62591dc2776a004d887d10619,with excutils.save_and_reraise_exception():,0,1,0.1,1385
5019749dc8d967c62591dc2776a004d887d10619,"res = self.run_vsctl([""list-ports"", self.br_name], check_error=True)",0,1,0.1,1386
5019749dc8d967c62591dc2776a004d887d10619,"output = self.run_vsctl([""get"", table, record, column], check_error)",0,1,0.1,1387
5019749dc8d967c62591dc2776a004d887d10619,"actions=""resubmit(,%s)"" % constants.FLOOD_TO_TUN)",0,1,0.1,1388
5019749dc8d967c62591dc2776a004d887d10619,lvm = self.local_vlan_map[net_uuid],0,1,0.1,1389
5019749dc8d967c62591dc2776a004d887d10619,"actions=""resubmit(,%s)"" %",0,1,0.1,1390
5019749dc8d967c62591dc2776a004d887d10619,# PATCH_LV_TO_TUN table will handle packets coming from patch_int,0,1,0.1,1391
5019749dc8d967c62591dc2776a004d887d10619,# unicasts go to table UCAST_TO_TUN where remote adresses are learnt,0,1,0.1,1392
5019749dc8d967c62591dc2776a004d887d10619,"actions=""resubmit(,%s)"" % constants.UCAST_TO_TUN)",0,1,0.1,1393
5019749dc8d967c62591dc2776a004d887d10619,# Broadcasts/multicasts go to table FLOOD_TO_TUN that handles flooding,0,1,0.1,1394
5019749dc8d967c62591dc2776a004d887d10619,# Tables [tunnel_type]_TUN_TO_LV will set lvid depending on tun_id,0,1,0.1,1395
5019749dc8d967c62591dc2776a004d887d10619,if 'Exit code: 1\n' in str(e):,0,1,0.1,1396
5019749dc8d967c62591dc2776a004d887d10619,# remote mac adresses will be learnt,0,1,0.1,1397
5019749dc8d967c62591dc2776a004d887d10619,"learned_flow = (""table=%s,""",0,1,0.1,1398
5019749dc8d967c62591dc2776a004d887d10619,"""output:NXM_OF_IN_PORT[]"" %",0,1,0.1,1399
5019749dc8d967c62591dc2776a004d887d10619,"actions=""learn(%s),output:%s"" %",0,1,0.1,1400
5019749dc8d967c62591dc2776a004d887d10619,"ofport = self.tun_br.add_tunnel_port(port_name,",0,1,0.1,1401
5019749dc8d967c62591dc2776a004d887d10619,"ofports = ','.join(self.tun_br_ofports[tunnel_type])",0,1,0.1,1402
5019749dc8d967c62591dc2776a004d887d10619,"""output:%s"" % (segmentation_id, ofports))",0,1,0.1,1403
5019749dc8d967c62591dc2776a004d887d10619,"ofports = ','.join(self.tun_br_ofports[network_type])",0,1,0.1,1404
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br_ofports = {constants.TYPE_GRE: set(),",0,1,0.1,1405
5019749dc8d967c62591dc2776a004d887d10619,"proxy_socket = cfg.StrOpt('metadata_proxy_socket',",1,1,0.1,1406
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),1,1,0.1,1407
5019749dc8d967c62591dc2776a004d887d10619,LOG.debug(msg),0,1,0.1,1408
5019749dc8d967c62591dc2776a004d887d10619,cidr = str(net.cidr),0,1,0.1,1409
5019749dc8d967c62591dc2776a004d887d10619,net = netaddr.IPNetwork(_validate_no_whitespace(data)),0,1,0.1,1410
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Admin tenant name"")),",0,1,0.1,1411
5019749dc8d967c62591dc2776a004d887d10619,if not ports.get('ports'):,1,1,0.1,1412
5019749dc8d967c62591dc2776a004d887d10619,mac_address = device.link.address,1,1,0.1,1413
5019749dc8d967c62591dc2776a004d887d10619,flavor = network['network'][FLAVOR_NETWORK],1,1,0.1,1414
5019749dc8d967c62591dc2776a004d887d10619,"self._set_device_plugin_tag(network_id, device_name, namespace)",0,1,0.1,1415
5019749dc8d967c62591dc2776a004d887d10619,"ret = driver.plug(network_id, port_id, device_name, mac_address,",0,1,0.1,1416
5019749dc8d967c62591dc2776a004d887d10619,plugin_tag = self._get_flavor_by_network_id(network_id),0,1,0.1,1417
5019749dc8d967c62591dc2776a004d887d10619,flavor = self._get_flavor_by_network_id(network_id),0,1,0.1,1418
5019749dc8d967c62591dc2776a004d887d10619,"""tap device name""))",0,1,0.1,1419
5019749dc8d967c62591dc2776a004d887d10619,"""set_tunnel:%s,output:%s"" %",0,1,0.1,1420
5019749dc8d967c62591dc2776a004d887d10619,"actions=""set_tunnel:%s,normal"" %",1,1,0.1,1421
5019749dc8d967c62591dc2776a004d887d10619,"actions=""mod_vlan_vid:%s,output:%s"" %",1,1,0.1,1422
5019749dc8d967c62591dc2776a004d887d10619,"self._server = self._service.pool.spawn(self._service._run,",0,1,0.1,1423
5019749dc8d967c62591dc2776a004d887d10619,return False,0,1,0.1,1424
5019749dc8d967c62591dc2776a004d887d10619,if 'Exit code: 2\n' in str(e):,0,1,0.1,1425
5019749dc8d967c62591dc2776a004d887d10619,if not check_error:,0,1,0.1,1426
5019749dc8d967c62591dc2776a004d887d10619,with excutils.save_and_reraise_exception() as ctxt:,0,1,0.1,1427
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common import excutils,0,1,0.1,1428
5019749dc8d967c62591dc2776a004d887d10619,cmd.append('--server=%s' % self.conf.dnsmasq_dns_server),1,1,0.1,1429
5019749dc8d967c62591dc2776a004d887d10619,"sock = eventlet.listen(file_socket,",1,1,0.1,1430
5019749dc8d967c62591dc2776a004d887d10619,"self._server = WorkerService(self, application)",0,1,0.1,1431
5019749dc8d967c62591dc2776a004d887d10619,self._launcher = service.ProcessLauncher(wait_interval=1.0),0,1,0.1,1432
5019749dc8d967c62591dc2776a004d887d10619,"self._server = self.pool.spawn_n(self._run, application,",0,1,0.1,1433
5019749dc8d967c62591dc2776a004d887d10619,"self._socket = eventlet.listen(file_socket,",0,1,0.1,1434
5019749dc8d967c62591dc2776a004d887d10619,self._server = None,0,1,0.1,1435
5019749dc8d967c62591dc2776a004d887d10619,self._launcher = None,0,1,0.1,1436
5019749dc8d967c62591dc2776a004d887d10619,self._socket = None,0,1,0.1,1437
5019749dc8d967c62591dc2776a004d887d10619,class WorkerService(wsgi.WorkerService):,0,1,0.1,1438
5019749dc8d967c62591dc2776a004d887d10619,if network_type in constants.TUNNEL_NETWORK_TYPES:,1,1,0.1,1439
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common import service,0,1,0.1,1440
5019749dc8d967c62591dc2776a004d887d10619,except Exception:,1,1,0.1,1441
5019749dc8d967c62591dc2776a004d887d10619,router_id = ns[len(NS_PREFIX):],1,1,0.1,1442
5019749dc8d967c62591dc2776a004d887d10619,root_ip = ip_lib.IPWrapper(self.root_helper),1,1,0.1,1443
5019749dc8d967c62591dc2776a004d887d10619,"linux devices, iptables rules, and namespaces.",1,1,0.1,1444
5019749dc8d967c62591dc2776a004d887d10619,'for namespace cleanup.')),0,1,0.1,1445
5019749dc8d967c62591dc2776a004d887d10619,ns_to_destroy = router_namespaces - ns_to_ignore,0,1,0.1,1446
5019749dc8d967c62591dc2776a004d887d10619,host_namespaces = root_ip.get_namespaces(self.root_helper),0,1,0.1,1447
5019749dc8d967c62591dc2776a004d887d10619,root_ip = ip_lib.IPWrapper(self.root_helper),0,1,0.1,1448
5019749dc8d967c62591dc2776a004d887d10619,vif_id),1,1,0.1,1449
5019749dc8d967c62591dc2776a004d887d10619,# remove inbound unicast flow,1,1,0.1,1450
5019749dc8d967c62591dc2776a004d887d10619,"vif_port = lvm.vif_ports.pop(vif_id, None)",1,1,0.1,1451
5019749dc8d967c62591dc2776a004d887d10619,lvm = self.local_vlan_map[net_uuid],1,1,0.1,1452
5019749dc8d967c62591dc2776a004d887d10619,"actions=""mod_vlan_vid:%s,normal"" %",1,1,0.1,1453
5019749dc8d967c62591dc2776a004d887d10619,if prefix in ext_ns_bc:,1,1,0.1,1454
5019749dc8d967c62591dc2776a004d887d10619,"actions=""mod_vlan_vid:%s,resubmit(,%s)"" %",0,1,0.1,1455
5019749dc8d967c62591dc2776a004d887d10619,"if "":"" in nodename:",1,1,0.1,1456
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LI,0,1,0.1,1457
5019749dc8d967c62591dc2776a004d887d10619,'DHCP AGENT MAY NOT RUN CORRECTLY! ',1,1,0.1,1458
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Pid %d is stale, relaunching dnsmasq'), self.pid)",1,1,0.1,1459
5019749dc8d967c62591dc2776a004d887d10619,"""%(inner)s"") % {'driver': conf.interface_driver,",1,1,0.1,1460
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LI",0,1,0.1,1461
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LE,1,1,0.1,1462
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Driver location: %s""), driver_provider)",1,1,0.1,1463
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LW",0,1,0.1,1464
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Ext namespace: %s', extension.get_namespace())",0,1,0.1,1465
5019749dc8d967c62591dc2776a004d887d10619,"""following set of iptables rules:\n%s""),",0,1,0.1,1466
5019749dc8d967c62591dc2776a004d887d10619,"""following set of iptables rules:\n%s""),",1,1,0.1,1467
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LI, _LW",0,1,0.1,1468
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LI, _LW",1,1,0.1,1469
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LE,0,1,0.1,1470
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LI, _LW",0,1,0.1,1471
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('FAILED VERSION REQUIREMENT FOR DNSMASQ. ',1,1,0.1,1472
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist, performing cleanup'),",1,1,0.1,1473
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Pid %d is stale, relaunching dnsmasq', self.pid)",0,1,0.1,1474
5019749dc8d967c62591dc2776a004d887d10619,'DHCP AGENT MAY NOT RUN CORRECTLY! ',0,1,0.1,1475
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('FAILED VERSION REQUIREMENT FOR DNSMASQ. ',0,1,0.1,1476
5019749dc8d967c62591dc2776a004d887d10619,"'does not exist, performing cleanup',",0,1,0.1,1477
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LE,0,1,0.1,1478
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(message, self.pidfile)",1,1,0.1,1479
5019749dc8d967c62591dc2776a004d887d10619,"'running?'), self.pidfile)",0,1,0.1,1480
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LE,0,1,0.1,1481
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Report state task successfully completed""))",1,1,0.1,1482
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Report state task started""))",1,1,0.1,1483
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""L3 agent started""))",1,1,0.1,1484
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Failed synchronizing routers""))",1,1,0.1,1485
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Got routers updated notification :%s'), routers)",1,1,0.1,1486
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('DVR: error adding redirection logic')),1,1,0.1,1487
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('DVR: no map match_port found!')),1,1,0.1,1488
5019749dc8d967c62591dc2776a004d887d10619,"""extension '%s'""), ext.get_name())",0,1,0.1,1489
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Exception loading extension: %s""), unicode(ex))",0,1,0.1,1490
5019749dc8d967c62591dc2776a004d887d10619,"""Skipping router removal""), router_id)",1,1,0.1,1491
5019749dc8d967c62591dc2776a004d887d10619,"""contain attribute _cache therefore results """,0,1,0.1,1492
5019749dc8d967c62591dc2776a004d887d10619,"""been deleted concurrently.""), network_id)",1,1,0.1,1493
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LI",0,1,0.1,1494
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI('%(action)s failed (client error): %(exc)s'),",0,1,0.1,1495
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE('%s failed'), action)",0,1,0.1,1496
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_('%s failed'), action)",1,1,0.1,1497
5019749dc8d967c62591dc2776a004d887d10619,"""unhashable parameters: args: %(args)s, kwargs: """,0,1,0.1,1498
5019749dc8d967c62591dc2776a004d887d10619,"""unhashable parameters: args: %(args)s, kwargs: """,1,1,0.1,1499
5019749dc8d967c62591dc2776a004d887d10619,"'""%(ext_name)s"" in %(file)s'),",0,1,0.1,1500
5019749dc8d967c62591dc2776a004d887d10619,"""contain attribute _cache therefore results """,1,1,0.1,1501
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LW,0,1,0.1,1502
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LI, _LW",0,1,0.1,1503
5019749dc8d967c62591dc2776a004d887d10619,'must be provided')),0,1,0.1,1504
5019749dc8d967c62591dc2776a004d887d10619,if not data:,1,1,0.1,1505
5019749dc8d967c62591dc2776a004d887d10619,"LOG.warning(_LW(""Invalid Network ID, will lead to incorrect bridge""",0,1,0.1,1506
5019749dc8d967c62591dc2776a004d887d10619,"% {""action"": action, ""net_id"": net_id, 'reason': e})",1,1,0.1,1507
5019749dc8d967c62591dc2776a004d887d10619,"""could not complete successfully: %(reason)s"")",1,1,0.1,1508
5019749dc8d967c62591dc2776a004d887d10619,"""been deleted concurrently.""), network_id)",0,1,0.1,1509
5019749dc8d967c62591dc2776a004d887d10619,"""could not complete successfully: %(reason)s""),",0,1,0.1,1510
5019749dc8d967c62591dc2776a004d887d10619,from neutron.openstack.common.gettextutils import _LW,0,1,0.1,1511
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_('Loaded extension: %s'), alias)",1,1,0.1,1512
5019749dc8d967c62591dc2776a004d887d10619,"'""%(ext_name)s"" in %(file)s'),",1,1,0.1,1513
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Loading extension file: %s'), f)",1,1,0.1,1514
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_(""Exception loading extension: %s""), unicode(ex))",1,1,0.1,1515
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Ext updated: %s'), extension.get_updated())",1,1,0.1,1516
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Ext description: %s'), extension.get_description())",1,1,0.1,1517
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Ext alias: %s'), extension.get_alias())",1,1,0.1,1518
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Ext name: %s'), extension.get_name())",1,1,0.1,1519
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Extended request: %s'), request_ext.key)",1,1,0.1,1520
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Extended action: %s'), action.action_name)",1,1,0.1,1521
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Extended resource: %s'),",1,1,0.1,1522
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI('Loaded extension: %s'), alias)",0,1,0.1,1523
5019749dc8d967c62591dc2776a004d887d10619,"""floating IP: %s""), fip['id'])",1,1,0.1,1524
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_('%(action)s failed (client error): %(exc)s'),",1,1,0.1,1525
5019749dc8d967c62591dc2776a004d887d10619,"""'%s'"") % self.conf.interface_driver",1,1,0.1,1526
5019749dc8d967c62591dc2776a004d887d10619,"plurals = set(self.metadata.get('plurals', {}))",1,1,0.1,1527
5019749dc8d967c62591dc2776a004d887d10619,root_tag = self._get_key(node.tag),1,1,0.1,1528
5019749dc8d967c62591dc2776a004d887d10619,link_list = [],1,1,0.1,1529
5019749dc8d967c62591dc2776a004d887d10619,# an item in _from_xml_node,1,1,0.1,1530
5019749dc8d967c62591dc2776a004d887d10619,return link_list and {link_key: link_list} or {},1,1,0.1,1531
5019749dc8d967c62591dc2776a004d887d10619,parser = ProtectedXMLParser(),1,1,0.1,1532
5019749dc8d967c62591dc2776a004d887d10619,if datastring is None:,1,1,0.1,1533
5019749dc8d967c62591dc2776a004d887d10619,node = self._parseXML(datastring),1,1,0.1,1534
5019749dc8d967c62591dc2776a004d887d10619,be considered list items.,1,1,0.1,1535
5019749dc8d967c62591dc2776a004d887d10619,# the request's response,1,1,0.1,1536
5019749dc8d967c62591dc2776a004d887d10619,"links = self._get_links(root_tag, node)",1,1,0.1,1537
5019749dc8d967c62591dc2776a004d887d10619,"result = self._from_xml_node(node, plurals)",1,1,0.1,1538
5019749dc8d967c62591dc2776a004d887d10619,except Exception as e:,1,1,0.1,1539
5019749dc8d967c62591dc2776a004d887d10619,with excutils.save_and_reraise_exception():,1,1,0.1,1540
5019749dc8d967c62591dc2776a004d887d10619,"if (hasattr(etree, 'ParseError') and",1,1,0.1,1541
5019749dc8d967c62591dc2776a004d887d10619,link_nodes = node.findall(constants.ATOM_LINK_NOTATION),1,1,0.1,1542
5019749dc8d967c62591dc2776a004d887d10619,bare_tag = tags[1],1,1,0.1,1543
5019749dc8d967c62591dc2776a004d887d10619,ns = tags[0][1:],1,1,0.1,1544
5019749dc8d967c62591dc2776a004d887d10619,"tags = tag.split(""}"", 1)",1,1,0.1,1545
5019749dc8d967c62591dc2776a004d887d10619,class XMLDeserializer(TextDeserializer):,1,1,0.1,1546
5019749dc8d967c62591dc2776a004d887d10619,"raise ValueError(_(""Inline DTD forbidden""))",1,1,0.1,1547
5019749dc8d967c62591dc2776a004d887d10619,self._parser.StartDoctypeDeclHandler = self.start_doctype_decl,1,1,0.1,1548
5019749dc8d967c62591dc2776a004d887d10619,class ProtectedXMLParser(etree.XMLParser):,1,1,0.1,1549
5019749dc8d967c62591dc2776a004d887d10619,"link_node = etree.SubElement(xml_doc, 'atom:link')",1,1,0.1,1550
5019749dc8d967c62591dc2776a004d887d10619,result.text = unicode(data),1,1,0.1,1551
5019749dc8d967c62591dc2776a004d887d10619,"result.text = unicode(data, 'utf-8')",1,1,0.1,1552
5019749dc8d967c62591dc2776a004d887d10619,"attrs = metadata.get('attributes', {}).get(nodename, {})",1,1,0.1,1553
5019749dc8d967c62591dc2776a004d887d10619,singular = 'item',1,1,0.1,1554
5019749dc8d967c62591dc2776a004d887d10619,singular = nodename[:-1],1,1,0.1,1555
5019749dc8d967c62591dc2776a004d887d10619,"singular = metadata.get('plurals', {}).get(nodename, None)",1,1,0.1,1556
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LW",1,1,0.1,1557
5019749dc8d967c62591dc2776a004d887d10619,if singular is None:,1,1,0.1,1558
5019749dc8d967c62591dc2776a004d887d10619,raise exception.MalformedRequestBody(reason=msg),1,1,0.1,1559
5019749dc8d967c62591dc2776a004d887d10619,if k in attrs:,1,1,0.1,1560
5019749dc8d967c62591dc2776a004d887d10619,"attrNil = node.get(str(etree.QName(constants.XSI_NAMESPACE, ""nil"")))",1,1,0.1,1561
5019749dc8d967c62591dc2776a004d887d10619,"""floating IP: %s""), fip['id'])",0,1,0.1,1562
5019749dc8d967c62591dc2776a004d887d10619,default_xmlns = self.get_default_xmlns(req),1,1,0.1,1563
5019749dc8d967c62591dc2776a004d887d10619,"body = self._serialize(result, content_type, default_xmlns)",1,1,0.1,1564
5019749dc8d967c62591dc2776a004d887d10619,"serializer = Serializer(_metadata, default_xmlns)",1,1,0.1,1565
5019749dc8d967c62591dc2776a004d887d10619,self.default_xmlns = default_xmlns,1,1,0.1,1566
5019749dc8d967c62591dc2776a004d887d10619,"from neutron.openstack.common.gettextutils import _LE, _LI, _LW",0,1,0.1,1567
5019749dc8d967c62591dc2776a004d887d10619,"""Skipping router removal""), router_id)",0,1,0.1,1568
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('DVR: no map match_port found!')),0,1,0.1,1569
5019749dc8d967c62591dc2776a004d887d10619,self._xmlns = xmlns,1,1,0.1,1570
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('DVR: error adding redirection logic')),0,1,0.1,1571
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""L3 agent started""))",0,1,0.1,1572
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Failed reporting state!""))",0,1,0.1,1573
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Report state task started"")",0,1,0.1,1574
5019749dc8d967c62591dc2776a004d887d10619,attrType = node.get(str(etree.QName(,1,1,0.1,1575
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Report state task successfully completed"")",0,1,0.1,1576
5019749dc8d967c62591dc2776a004d887d10619,"xml_serializer = XMLDictSerializer(metadata, self._xmlns)",1,1,0.1,1577
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Got routers updated notification :%s', routers)",0,1,0.1,1578
5019749dc8d967c62591dc2776a004d887d10619,"action_result = Fault(ex,",1,1,0.1,1579
5019749dc8d967c62591dc2776a004d887d10619,result[self._get_key(attr)] = node.get(attr),1,1,0.1,1580
5019749dc8d967c62591dc2776a004d887d10619,elif (attrType and attrType == constants.TYPE_LIST):,1,1,0.1,1581
5019749dc8d967c62591dc2776a004d887d10619,elif (len(node) == 0 and node.text):,1,1,0.1,1582
5019749dc8d967c62591dc2776a004d887d10619,if (attrType and attrType == constants.TYPE_DICT):,1,1,0.1,1583
5019749dc8d967c62591dc2776a004d887d10619,elif self._get_key(node.tag) in listnames:,1,1,0.1,1584
5019749dc8d967c62591dc2776a004d887d10619,result = dict(),1,1,0.1,1585
5019749dc8d967c62591dc2776a004d887d10619,converters = {constants.TYPE_BOOL:,1,1,0.1,1586
5019749dc8d967c62591dc2776a004d887d10619,children = list(node),1,1,0.1,1587
5019749dc8d967c62591dc2776a004d887d10619,self._xmlns = xml_serializer.xmlns,1,1,0.1,1588
5019749dc8d967c62591dc2776a004d887d10619,if (attrNil and attrNil.lower() == 'true'):,1,1,0.1,1589
5019749dc8d967c62591dc2776a004d887d10619,# use serializer's xmlns for populating Fault generator xmlns,1,1,0.1,1590
5019749dc8d967c62591dc2776a004d887d10619,xml_serializer = self.serializer.body_serializers['application/xml'],1,1,0.1,1591
5019749dc8d967c62591dc2776a004d887d10619,result[self._get_key(child.tag)] = self._from_xml_node(,1,1,0.1,1592
5019749dc8d967c62591dc2776a004d887d10619,"self._core_plugin.update_port(context, p['id'],",0,0,0.0,1593
5019749dc8d967c62591dc2776a004d887d10619,"port_id, subnet_id,",0,0,0.0,1594
5019749dc8d967c62591dc2776a004d887d10619,"return (p, [subnet])",0,0,0.0,1595
5019749dc8d967c62591dc2776a004d887d10619,{'fixed_ips': fixed_ips}}),0,0,0.0,1596
5019749dc8d967c62591dc2776a004d887d10619,{'port':,0,0,0.0,1597
5019749dc8d967c62591dc2776a004d887d10619,"return (port_db, subnets)",0,0,0.0,1598
5019749dc8d967c62591dc2776a004d887d10619,fip['subnet_id'] != subnet_id],0,0,0.0,1599
5019749dc8d967c62591dc2776a004d887d10619,"context, router_id, port_subnet_id)",0,0,0.0,1600
5019749dc8d967c62591dc2776a004d887d10619,self._confirm_router_interface_not_in_use(,0,0,0.0,1601
5019749dc8d967c62591dc2776a004d887d10619,"router.id, port['tenant_id'], port['id'], subnets[-1]['id'],",0,0,0.0,1602
5019749dc8d967c62591dc2776a004d887d10619,context.session.add(router_port),0,0,0.0,1603
5019749dc8d967c62591dc2776a004d887d10619,device_owner),0,0,0.0,1604
5019749dc8d967c62591dc2776a004d887d10619,"self._check_for_dup_router_subnet(context, router,",1,0,0.0,1605
5019749dc8d967c62591dc2776a004d887d10619,"context, router_id, subnet_id, device_owner)",0,0,0.0,1606
5019749dc8d967c62591dc2776a004d887d10619,"port['id'], subnets[0]['id'],",0,0,0.0,1607
5019749dc8d967c62591dc2776a004d887d10619,subnets]),0,0,0.0,1608
5019749dc8d967c62591dc2776a004d887d10619,if len(fixed_ips) != 1:,1,0,0.0,1609
5019749dc8d967c62591dc2776a004d887d10619,"port_id=port['id'],",1,0,0.0,1610
5019749dc8d967c62591dc2776a004d887d10619,"port['network_id'],",1,0,0.0,1611
5019749dc8d967c62591dc2776a004d887d10619,"subnet['id'],",1,0,0.0,1612
5019749dc8d967c62591dc2776a004d887d10619,subnet['cidr']),1,0,0.0,1613
5019749dc8d967c62591dc2776a004d887d10619,'name': ''}}),1,0,0.0,1614
5019749dc8d967c62591dc2776a004d887d10619,"router_id, tenant_id, port_id, subnet_id):",1,0,0.0,1615
5019749dc8d967c62591dc2776a004d887d10619,'subnet_id': subnet_id,1,0,0.0,1616
5019749dc8d967c62591dc2776a004d887d10619,port_type=device_owner,0,0,0.0,1617
5019749dc8d967c62591dc2776a004d887d10619,"context, router, interface_info['port_id'], device_owner)",1,0,0.0,1618
5019749dc8d967c62591dc2776a004d887d10619,"context, router, interface_info['subnet_id'], device_owner)",1,0,0.0,1619
5019749dc8d967c62591dc2776a004d887d10619,),0,0,0.0,1620
5019749dc8d967c62591dc2776a004d887d10619,if netaddr.IPNetwork(fixed_ip['ip_address']).version == 6:,0,0,0.0,1621
5019749dc8d967c62591dc2776a004d887d10619,"router_id=router.id,",0,0,0.0,1622
5019749dc8d967c62591dc2776a004d887d10619,"port_id=port['id'],",0,0,0.0,1623
5019749dc8d967c62591dc2776a004d887d10619,elif add_by_sub:,1,0,0.0,1624
5019749dc8d967c62591dc2776a004d887d10619,if port_id:,1,0,0.0,1625
5019749dc8d967c62591dc2776a004d887d10619,port_type=device_owner,1,0,0.0,1626
5019749dc8d967c62591dc2776a004d887d10619,elif subnet_id:,1,0,0.0,1627
5019749dc8d967c62591dc2776a004d887d10619,if self._port_has_ipv6_address(port):,0,0,0.0,1628
5019749dc8d967c62591dc2776a004d887d10619,self._port_has_ipv6_address(existing_port)):,0,0,0.0,1629
5019749dc8d967c62591dc2776a004d887d10619,"'p': existing_port['id'],",0,0,0.0,1630
5019749dc8d967c62591dc2776a004d887d10619,'nid': existing_port['network_id']}),0,0,0.0,1631
5019749dc8d967c62591dc2776a004d887d10619,fixed_ip['subnet_id']),0,0,0.0,1632
5019749dc8d967c62591dc2776a004d887d10619,subnets.append(subnet),0,0,0.0,1633
5019749dc8d967c62591dc2776a004d887d10619,"self._check_for_dup_router_subnet(context, router,",0,0,0.0,1634
5019749dc8d967c62591dc2776a004d887d10619,"port['network_id'],",0,0,0.0,1635
5019749dc8d967c62591dc2776a004d887d10619,"subnet['id'],",0,0,0.0,1636
5019749dc8d967c62591dc2776a004d887d10619,subnet['cidr']),0,0,0.0,1637
5019749dc8d967c62591dc2776a004d887d10619,"def _port_has_ipv6_address(self, port):",0,0,0.0,1638
5019749dc8d967c62591dc2776a004d887d10619,"def _find_ipv6_router_port_by_network(self, router, net_id):",0,0,0.0,1639
5019749dc8d967c62591dc2776a004d887d10619,if subnet['ip_version'] == 6:,0,0,0.0,1640
5019749dc8d967c62591dc2776a004d887d10619,subnet['network_id']),0,0,0.0,1641
5019749dc8d967c62591dc2776a004d887d10619,if port:,0,0,0.0,1642
5019749dc8d967c62591dc2776a004d887d10619,fixed_ips.append(fixed_ip),0,0,0.0,1643
5019749dc8d967c62591dc2776a004d887d10619,"return self._core_plugin.update_port(context,",0,0,0.0,1644
5019749dc8d967c62591dc2776a004d887d10619,"port['port_id'], {'port':",0,0,0.0,1645
5019749dc8d967c62591dc2776a004d887d10619,"router_id, tenant_id, port_id, subnet_id, subnet_ids):",0,0,0.0,1646
5019749dc8d967c62591dc2776a004d887d10619,'subnet_ids': subnet_ids,0,0,0.0,1647
5019749dc8d967c62591dc2776a004d887d10619,"context, router, interface_info['port_id'], device_owner)",0,0,0.0,1648
5019749dc8d967c62591dc2776a004d887d10619,"context, router, interface_info['subnet_id'], device_owner)",0,0,0.0,1649
5019749dc8d967c62591dc2776a004d887d10619,if new_port:,0,0,0.0,1650
5019749dc8d967c62591dc2776a004d887d10619,"router_id=router.id,",1,0,0.0,1651
5019749dc8d967c62591dc2776a004d887d10619,"'True.')),",0,0,0.0,1652
5019749dc8d967c62591dc2776a004d887d10619,),1,0,0.0,1653
5019749dc8d967c62591dc2776a004d887d10619,context.session.add(router_port),1,0,0.0,1654
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",1,0,0.0,1655
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1656
5019749dc8d967c62591dc2776a004d887d10619,"""directly."")),",0,0,0.0,1657
5019749dc8d967c62591dc2776a004d887d10619,"""improvement."")),",0,0,0.0,1658
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('external_network_bridge', default='br-ex',",0,0,0.0,1659
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",0,0,0.0,1660
5019749dc8d967c62591dc2776a004d887d10619,],0,0,0.0,1661
5019749dc8d967c62591dc2776a004d887d10619,"""networks."")),",0,0,0.0,1662
5019749dc8d967c62591dc2776a004d887d10619,'server.')),0,0,0.0,1663
5019749dc8d967c62591dc2776a004d887d10619,OPTS += config.EXT_NET_BRIDGE_OPTS,0,0,0.0,1664
5019749dc8d967c62591dc2776a004d887d10619,"""the default IPv6 subnetpool."")),",0,0,0.0,1665
5019749dc8d967c62591dc2776a004d887d10619,"sample_default='example.domain',",0,0,0.0,1666
5019749dc8d967c62591dc2776a004d887d10619,"""use 'internal'."")),",0,0,0.0,1667
5019749dc8d967c62591dc2776a004d887d10619,"""between hosts."")),",0,0,0.0,1668
5019749dc8d967c62591dc2776a004d887d10619,"'takes place.')),",0,0,0.0,1669
5019749dc8d967c62591dc2776a004d887d10619,"'place.')),",0,0,0.0,1670
5019749dc8d967c62591dc2776a004d887d10619,"""agent."")),",0,0,0.0,1671
5019749dc8d967c62591dc2776a004d887d10619,"""each agent."")),",0,0,0.0,1672
5019749dc8d967c62591dc2776a004d887d10619,"""list."")),",0,0,0.0,1673
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Root helper application.')),",1,0,0.0,1674
5019749dc8d967c62591dc2776a004d887d10619,"'the operating system.')),",1,0,0.0,1675
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('external_network_bridge', default='br-ex',",1,0,0.0,1676
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",1,0,0.0,1677
5019749dc8d967c62591dc2776a004d887d10619,"""CIDR allocation"")),",1,0,0.0,1678
5019749dc8d967c62591dc2776a004d887d10619,"""networks."")),",1,0,0.0,1679
5019749dc8d967c62591dc2776a004d887d10619,if remove_by_port:,0,0,0.0,1680
5019749dc8d967c62591dc2776a004d887d10619,"""the physical_device_mappings list."")),",1,0,0.0,1681
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('external_network_bridge', default='br-ex',",1,0,0.0,1682
5019749dc8d967c62591dc2776a004d887d10619,"""traffic."")),",1,0,0.0,1683
5019749dc8d967c62591dc2776a004d887d10619,internal_port['id']),1,0,0.0,1684
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",0,0,0.0,1685
5019749dc8d967c62591dc2776a004d887d10619,"router.id, port['tenant_id'], port['id'],",1,0,0.0,1686
5019749dc8d967c62591dc2776a004d887d10619,port['fixed_ips'][0]['subnet_id']),1,0,0.0,1687
5019749dc8d967c62591dc2776a004d887d10619,self._confirm_router_interface_not_in_use(,1,0,0.0,1688
5019749dc8d967c62591dc2776a004d887d10619,"context, router_id, port_subnet_id)",1,0,0.0,1689
5019749dc8d967c62591dc2776a004d887d10619,"return (port_db, subnet)",1,0,0.0,1690
5019749dc8d967c62591dc2776a004d887d10619,if p['fixed_ips'][0]['subnet_id'] == subnet_id:,1,0,0.0,1691
5019749dc8d967c62591dc2776a004d887d10619,"return (p, subnet)",1,0,0.0,1692
5019749dc8d967c62591dc2776a004d887d10619,"port_id, subnet_id,",1,0,0.0,1693
5019749dc8d967c62591dc2776a004d887d10619,device_owner),1,0,0.0,1694
5019749dc8d967c62591dc2776a004d887d10619,"context, router_id, subnet_id, device_owner)",1,0,0.0,1695
5019749dc8d967c62591dc2776a004d887d10619,"port['id'], subnet['id'])",1,0,0.0,1696
5019749dc8d967c62591dc2776a004d887d10619,"default=default_quota_items,",0,0,0.0,1697
5019749dc8d967c62591dc2776a004d887d10619,"'removal.')),",0,0,0.0,1698
5019749dc8d967c62591dc2776a004d887d10619,if len(ips) > 1:,1,0,0.0,1699
5019749dc8d967c62591dc2776a004d887d10619,versionutils.report_deprecated_feature(,0,0,0.0,1700
5019749dc8d967c62591dc2776a004d887d10619,set(default_quota_items)):,0,0,0.0,1701
5019749dc8d967c62591dc2776a004d887d10619,"default=['network', 'subnet', 'port'],",1,0,0.0,1702
5019749dc8d967c62591dc2776a004d887d10619,"'features')),",1,0,0.0,1703
5019749dc8d967c62591dc2776a004d887d10619,"def _port_ipv4_fixed_ips(self, port):",0,0,0.0,1704
5019749dc8d967c62591dc2776a004d887d10619,if netaddr.IPAddress(ip['ip_address']).version == 4],0,0,0.0,1705
5019749dc8d967c62591dc2776a004d887d10619,if netaddr.IPAddress(internal_ip_address).version != 4:,0,0,0.0,1706
5019749dc8d967c62591dc2776a004d887d10619,'internal_ip': internal_ip_address},0,0,0.0,1707
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,1708
5019749dc8d967c62591dc2776a004d887d10619,internal_ip_address),0,0,0.0,1709
5019749dc8d967c62591dc2776a004d887d10619,if len(ipv4_fixed_ips) > 1:,0,0,0.0,1710
5019749dc8d967c62591dc2776a004d887d10619,"def _is_ipv4_network(self, context, net_id):",0,0,0.0,1711
5019749dc8d967c62591dc2776a004d887d10619,"def _validate_interface_info(self, interface_info):",1,0,0.0,1712
5019749dc8d967c62591dc2776a004d887d10619,if msg:,1,0,0.0,1713
5019749dc8d967c62591dc2776a004d887d10619,),0,0,0.0,1714
5019749dc8d967c62591dc2776a004d887d10619,"""%(network_id)s.""), {network_type: network_type,",1,0,0.0,1715
5019749dc8d967c62591dc2776a004d887d10619,"""%(bridge_name)s""),",1,0,0.0,1716
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""network_delete received""))",1,0,0.0,1717
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""fdb_add received""))",1,0,0.0,1718
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""fdb_remove received""))",1,0,0.0,1719
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""update chg_ip received""))",1,0,0.0,1720
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""fdb_update received""))",1,0,0.0,1721
5019749dc8d967c62591dc2776a004d887d10619,"""Agent terminated!""))",1,0,0.0,1722
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Port %(device)s updated. Details: %(details)s""),",1,0,0.0,1723
5019749dc8d967c62591dc2776a004d887d10619,"""(%(polling_interval)s vs. %(elapsed)s)!""),",1,0,0.0,1724
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Parsing physical_interface_mappings failed: %s.""",1,0,0.0,1725
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_(""Agent initialized successfully, now running... ""))",1,0,0.0,1726
5019749dc8d967c62591dc2776a004d887d10619,def _validate_ip_or_hostname(host):,0,0,0.0,1727
5019749dc8d967c62591dc2776a004d887d10619,return,0,0,0.0,1728
5019749dc8d967c62591dc2776a004d887d10619,'name_err': name_err},0,0,0.0,1729
5019749dc8d967c62591dc2776a004d887d10619,"'host': host, 'msg': msg}",0,0,0.0,1730
5019749dc8d967c62591dc2776a004d887d10619,hosts.append(host),0,0,0.0,1731
5019749dc8d967c62591dc2776a004d887d10619,def _validate_hostname(data):,0,0,0.0,1732
5019749dc8d967c62591dc2776a004d887d10619,try:,0,0,0.0,1733
5019749dc8d967c62591dc2776a004d887d10619,if len(trimmed) > 255:,0,0,0.0,1734
5019749dc8d967c62591dc2776a004d887d10619,if name[-1] == '-' or name[0] == '-':,0,0,0.0,1735
5019749dc8d967c62591dc2776a004d887d10619,# it's an FQDN.,0,0,0.0,1736
5019749dc8d967c62591dc2776a004d887d10619,except TypeError as e:,0,0,0.0,1737
5019749dc8d967c62591dc2776a004d887d10619,"'data': data, 'reason': e.message}",0,0,0.0,1738
5019749dc8d967c62591dc2776a004d887d10619,ips.append(ip),1,0,0.0,1739
5019749dc8d967c62591dc2776a004d887d10619,"""[a-zA-Z0-9]\.?)+(?:[a-zA-Z]{2,})$)"")",1,0,0.0,1740
5019749dc8d967c62591dc2776a004d887d10619,"""%(target_dict)s"",",0,0,0.0,1741
5019749dc8d967c62591dc2776a004d887d10619,"""target: %(target_dict)s""),",1,0,0.0,1742
5019749dc8d967c62591dc2776a004d887d10619,"""this host, skipped""), tap_device_name)",1,0,0.0,1743
5019749dc8d967c62591dc2776a004d887d10619,"""subinterface %(interface)s""),",1,0,0.0,1744
5019749dc8d967c62591dc2776a004d887d10619,"self._validate_interface_info(interface_info, for_removal=True)",0,0,0.0,1745
5019749dc8d967c62591dc2776a004d887d10619,"""%(interface)s""),",1,0,0.0,1746
5019749dc8d967c62591dc2776a004d887d10619,"def _validate_list_of_items(item_validator, data, *args, **kwargs):",0,0,0.0,1747
5019749dc8d967c62591dc2776a004d887d10619,"""%(segmentation_id)s""),",0,0,0.0,1748
5019749dc8d967c62591dc2776a004d887d10619,"""%(physical_interface)s"",",0,0,0.0,1749
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done creating subinterface %s"", interface)",0,0,0.0,1750
5019749dc8d967c62591dc2776a004d887d10619,"""VNI %(segmentation_id)s"",",0,0,0.0,1751
5019749dc8d967c62591dc2776a004d887d10619,"""%(interface)s"",",0,0,0.0,1752
5019749dc8d967c62591dc2776a004d887d10619,"""subinterface %(interface)s"",",0,0,0.0,1753
5019749dc8d967c62591dc2776a004d887d10619,"""%(network_id)s.""), {network_type: network_type,",0,0,0.0,1754
5019749dc8d967c62591dc2776a004d887d10619,"""this host, skipped"", tap_device_name)",0,0,0.0,1755
5019749dc8d967c62591dc2776a004d887d10619,"""%(bridge_name)s"", data)",0,0,0.0,1756
5019749dc8d967c62591dc2776a004d887d10619,"""%(bridge_name)s"",",0,0,0.0,1757
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Done deleting subinterface %s"", interface)",0,0,0.0,1758
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""network_delete received"")",0,0,0.0,1759
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Delete %s"", bridge_name)",0,0,0.0,1760
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""fdb_add received"")",0,0,0.0,1761
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""fdb_remove received"")",0,0,0.0,1762
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""update chg_ip received"")",0,0,0.0,1763
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""fdb_update received"")",0,0,0.0,1764
5019749dc8d967c62591dc2776a004d887d10619,"""Agent terminated!""))",0,0,0.0,1765
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Port %(device)s updated. Details: %(details)s""),",0,0,0.0,1766
5019749dc8d967c62591dc2776a004d887d10619,"""(%(polling_interval)s vs. %(elapsed)s)!"",",0,0,0.0,1767
5019749dc8d967c62591dc2776a004d887d10619,"LOG.info(_LI(""Agent initialized successfully, now running... ""))",0,0,0.0,1768
5019749dc8d967c62591dc2776a004d887d10619,"""name""))",1,0,0.0,1769
5019749dc8d967c62591dc2776a004d887d10619,"""subinterface name""))",1,0,0.0,1770
5019749dc8d967c62591dc2776a004d887d10619,"""%(segmentation_id)s""),",1,0,0.0,1771
5019749dc8d967c62591dc2776a004d887d10619,"""%(physical_interface)s""),",1,0,0.0,1772
5019749dc8d967c62591dc2776a004d887d10619,"""VNI %(segmentation_id)s""),",1,0,0.0,1773
5019749dc8d967c62591dc2776a004d887d10619,'target_dict': target_dict}),1,0,0.0,1774
5019749dc8d967c62591dc2776a004d887d10619,'for details.')),0,0,0.0,1775
5019749dc8d967c62591dc2776a004d887d10619,cfg.CONF.rpc_workers),0,0,0.0,1776
5019749dc8d967c62591dc2776a004d887d10619,'details.')),0,0,0.0,1777
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('nova_metadata_protocol',",1,0,0.0,1778
5019749dc8d967c62591dc2776a004d887d10619,"default='http',",1,0,0.0,1779
5019749dc8d967c62591dc2776a004d887d10619,"choices=['http', 'https'],",1,0,0.0,1780
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('nova_metadata_insecure', default=False,",1,0,0.0,1781
5019749dc8d967c62591dc2776a004d887d10619,"""nova metadata"")),",1,0,0.0,1782
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('nova_client_cert',",1,0,0.0,1783
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('nova_client_priv_key',",1,0,0.0,1784
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1785
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_socket',",1,0,0.0,1786
5019749dc8d967c62591dc2776a004d887d10619,"default='$state_path/metadata_proxy',",1,0,0.0,1787
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('metadata_workers',",1,0,0.0,1788
5019749dc8d967c62591dc2776a004d887d10619,"default=utils.cpu_count() // 2,",1,0,0.0,1789
5019749dc8d967c62591dc2776a004d887d10619,"'server')),",1,0,0.0,1790
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('metadata_backlog',",1,0,0.0,1791
5019749dc8d967c62591dc2776a004d887d10619,"default=4096,",1,0,0.0,1792
5019749dc8d967c62591dc2776a004d887d10619,def main():,1,0,0.0,1793
5019749dc8d967c62591dc2776a004d887d10619,cfg.CONF.register_opts(UnixDomainMetadataProxy.OPTS),1,0,0.0,1794
5019749dc8d967c62591dc2776a004d887d10619,cfg.CONF.register_opts(MetadataProxyHandler.OPTS),1,0,0.0,1795
5019749dc8d967c62591dc2776a004d887d10619,cache.register_oslo_configs(cfg.CONF),1,0,0.0,1796
5019749dc8d967c62591dc2776a004d887d10619,"cfg.CONF.set_default(name='cache_url', default='memory://?default_ttl=5')",1,0,0.0,1797
5019749dc8d967c62591dc2776a004d887d10619,agent_conf.register_agent_state_opts_helper(cfg.CONF),1,0,0.0,1798
5019749dc8d967c62591dc2776a004d887d10619,config.init(sys.argv[1:]),1,0,0.0,1799
5019749dc8d967c62591dc2776a004d887d10619,config.setup_logging(),1,0,0.0,1800
5019749dc8d967c62591dc2776a004d887d10619,utils.log_opt_values(LOG),1,0,0.0,1801
5019749dc8d967c62591dc2776a004d887d10619,proxy.run(),1,0,0.0,1802
5019749dc8d967c62591dc2776a004d887d10619,"def _validate_interface_info(self, interface_info, for_removal=False):",0,0,0.0,1803
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,1804
5019749dc8d967c62591dc2776a004d887d10619,"default='',",1,0,0.0,1805
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_shared_secret',",1,0,0.0,1806
5019749dc8d967c62591dc2776a004d887d10619,"default=8775,",1,0,0.0,1807
5019749dc8d967c62591dc2776a004d887d10619,"secret=True),",1,0,0.0,1808
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('No known API applications configured.')),0,0,0.0,1809
5019749dc8d967c62591dc2776a004d887d10619,"{'host': cfg.CONF.bind_host, 'port': cfg.CONF.bind_port})",0,0,0.0,1810
5019749dc8d967c62591dc2776a004d887d10619,'for details.')),1,0,0.0,1811
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(msg, cfg.CONF.rpc_workers)",1,0,0.0,1812
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('No known API applications configured.')),1,0,0.0,1813
5019749dc8d967c62591dc2776a004d887d10619,"{'host': cfg.CONF.bind_host,",1,0,0.0,1814
5019749dc8d967c62591dc2776a004d887d10619,'port': cfg.CONF.bind_port}),1,0,0.0,1815
5019749dc8d967c62591dc2776a004d887d10619,pass,1,0,0.0,1816
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('admin_user',",1,0,0.0,1817
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Admin user"")),",1,0,0.0,1818
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('admin_password',",1,0,0.0,1819
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Admin password""),",1,0,0.0,1820
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('admin_tenant_name',",1,0,0.0,1821
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('nova_metadata_port',",1,0,0.0,1822
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_url',",1,0,0.0,1823
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Authentication URL"")),",1,0,0.0,1824
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_strategy', default='keystone',",1,0,0.0,1825
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_region',",1,0,0.0,1826
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Authentication region"")),",1,0,0.0,1827
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('auth_insecure',",1,0,0.0,1828
5019749dc8d967c62591dc2776a004d887d10619,"default=False,",1,0,0.0,1829
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_ca_cert',",1,0,0.0,1830
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('endpoint_type',",1,0,0.0,1831
5019749dc8d967c62591dc2776a004d887d10619,"default='adminURL',",1,0,0.0,1832
5019749dc8d967c62591dc2776a004d887d10619,"""the keystone catalog"")),",1,0,0.0,1833
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('nova_metadata_ip', default='127.0.0.1',",1,0,0.0,1834
5019749dc8d967c62591dc2776a004d887d10619,import functools,0,0,0.0,1835
5019749dc8d967c62591dc2776a004d887d10619,"'requests.')),",0,0,0.0,1836
5019749dc8d967c62591dc2776a004d887d10619,if len(set(data)) != len(data):,0,0,0.0,1837
5019749dc8d967c62591dc2776a004d887d10619,"default=True,",1,0,0.0,1838
5019749dc8d967c62591dc2776a004d887d10619,"cfg.PortOpt('metadata_port',",1,0,0.0,1839
5019749dc8d967c62591dc2776a004d887d10619,"default=9697,",1,0,0.0,1840
5019749dc8d967c62591dc2776a004d887d10619,"""requests."")),",1,0,0.0,1841
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_socket',",1,0,0.0,1842
5019749dc8d967c62591dc2776a004d887d10619,"default='$state_path/metadata_proxy',",1,0,0.0,1843
5019749dc8d967c62591dc2776a004d887d10619,"'socket')),",1,0,0.0,1844
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_user',",1,0,0.0,1845
5019749dc8d967c62591dc2776a004d887d10619,"""its initialization"")),",1,0,0.0,1846
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_group',",1,0,0.0,1847
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('metadata_proxy_watch_log',",1,0,0.0,1848
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1849
5019749dc8d967c62591dc2776a004d887d10619,cfg.CONF.register_cli_opts(opts),1,0,0.0,1850
5019749dc8d967c62591dc2776a004d887d10619,ovs_conf.register_ovs_agent_opts(),0,0,0.0,1851
5019749dc8d967c62591dc2776a004d887d10619,import constants,1,0,0.0,1852
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('integration_bridge', default='br-int',",1,0,0.0,1853
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('tunnel_bridge', default='br-tun',",1,0,0.0,1854
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('int_peer_patch_port', default='patch-tun',",1,0,0.0,1855
5019749dc8d967c62591dc2776a004d887d10619,"""bridge."")),",1,0,0.0,1856
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('tun_peer_patch_port', default='patch-int',",1,0,0.0,1857
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IPOpt('local_ip',",1,0,0.0,1858
5019749dc8d967c62591dc2776a004d887d10619,"cfg.ListOpt('bridge_mappings',",1,0,0.0,1859
5019749dc8d967c62591dc2776a004d887d10619,"default=DEFAULT_BRIDGE_MAPPINGS,",1,0,0.0,1860
5019749dc8d967c62591dc2776a004d887d10619,"""agent anymore."")),",1,0,0.0,1861
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('use_veth_interconnection', default=False,",1,0,0.0,1862
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('of_interface', default='native',",1,0,0.0,1863
5019749dc8d967c62591dc2776a004d887d10619,"choices=['ovs-ofctl', 'native'],",1,0,0.0,1864
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('datapath_type', default=constants.OVS_DATAPATH_SYSTEM,",1,0,0.0,1865
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Run as daemon.')),",1,0,0.0,1866
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('daemonize',",1,0,0.0,1867
5019749dc8d967c62591dc2776a004d887d10619,if msg:,0,0,0.0,1868
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('pid_file',",1,0,0.0,1869
5019749dc8d967c62591dc2776a004d887d10619,#,0,0,0.0,1870
5019749dc8d967c62591dc2776a004d887d10619,#         http://www.apache.org/licenses/LICENSE-2.0,0,0,0.0,1871
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('network_id',",0,0,0.0,1872
5019749dc8d967c62591dc2776a004d887d10619,"'proxied.')),",0,0,0.0,1873
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('router_id',",0,0,0.0,1874
5019749dc8d967c62591dc2776a004d887d10619,"'metadata proxied.')),",0,0,0.0,1875
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('pid_file',",0,0,0.0,1876
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('daemonize',",0,0,0.0,1877
5019749dc8d967c62591dc2776a004d887d10619,"default=True,",0,0,0.0,1878
5019749dc8d967c62591dc2776a004d887d10619,"help=_('Run as daemon.')),",0,0,0.0,1879
5019749dc8d967c62591dc2776a004d887d10619,"cfg.PortOpt('metadata_port',",0,0,0.0,1880
5019749dc8d967c62591dc2776a004d887d10619,"default=9697,",0,0,0.0,1881
5019749dc8d967c62591dc2776a004d887d10619,"""name""))",0,0,0.0,1882
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_socket',",0,0,0.0,1883
5019749dc8d967c62591dc2776a004d887d10619,"default='$state_path/metadata_proxy',",0,0,0.0,1884
5019749dc8d967c62591dc2776a004d887d10619,"'socket')),",0,0,0.0,1885
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_user',",0,0,0.0,1886
5019749dc8d967c62591dc2776a004d887d10619,"'its initialization')),",0,0,0.0,1887
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_group',",0,0,0.0,1888
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('metadata_proxy_watch_log',",0,0,0.0,1889
5019749dc8d967c62591dc2776a004d887d10619,],0,0,0.0,1890
5019749dc8d967c62591dc2776a004d887d10619,def register_namespace_proxy_opts(cfg=cfg.CONF):,0,0,0.0,1891
5019749dc8d967c62591dc2776a004d887d10619,cfg.register_cli_opts(OPTS),0,0,0.0,1892
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('network_id',",1,0,0.0,1893
5019749dc8d967c62591dc2776a004d887d10619,"'proxied.')),",1,0,0.0,1894
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('router_id',",1,0,0.0,1895
5019749dc8d967c62591dc2776a004d887d10619,"'metadata proxied.')),",1,0,0.0,1896
5019749dc8d967c62591dc2776a004d887d10619,"choices=[constants.OVS_DATAPATH_SYSTEM,",1,0,0.0,1897
5019749dc8d967c62591dc2776a004d887d10619,"constants.OVS_DATAPATH_NETDEV],",1,0,0.0,1898
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('vhostuser_socket_dir', default=constants.VHOST_USER_SOCKET_DIR,",1,0,0.0,1899
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IPOpt('of_listen_address', default='127.0.0.1',",1,0,0.0,1900
5019749dc8d967c62591dc2776a004d887d10619,cfg.CONF.register_opts(OPTS),1,0,0.0,1901
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('ovs_integration_bridge',",1,0,0.0,1902
5019749dc8d967c62591dc2776a004d887d10619,"default='br-int',",1,0,0.0,1903
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('ovs_use_veth',",1,0,0.0,1904
5019749dc8d967c62591dc2776a004d887d10619,"default=False,",1,0,0.0,1905
5019749dc8d967c62591dc2776a004d887d10619,"'True.')),",1,0,0.0,1906
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1907
5019749dc8d967c62591dc2776a004d887d10619,migration_cli.register_db_cli_opts(CONF),0,0,0.0,1908
5019749dc8d967c62591dc2776a004d887d10619,return migration_cli.migration_entrypoints[project],0,0,0.0,1909
5019749dc8d967c62591dc2776a004d887d10619,return migration_cli.migration_entrypoints[subproject],0,0,0.0,1910
5019749dc8d967c62591dc2776a004d887d10619,import pkg_resources,1,0,0.0,1911
5019749dc8d967c62591dc2776a004d887d10619,entrypoint.name: entrypoint,1,0,0.0,1912
5019749dc8d967c62591dc2776a004d887d10619,},1,0,0.0,1913
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('subproject',",1,0,0.0,1914
5019749dc8d967c62591dc2776a004d887d10619,"choices=INSTALLED_SUBPROJECTS,",1,0,0.0,1915
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('split_branches',",1,0,0.0,1916
5019749dc8d967c62591dc2776a004d887d10619,"default=True,",1,0,0.0,1917
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",1,0,0.0,1918
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1919
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('connection',",1,0,0.0,1920
5019749dc8d967c62591dc2776a004d887d10619,"default='',",1,0,0.0,1921
5019749dc8d967c62591dc2776a004d887d10619,"secret=True,",1,0,0.0,1922
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('engine',",1,0,0.0,1923
5019749dc8d967c62591dc2776a004d887d10619,"'when using offline migration.')),",1,0,0.0,1924
5019749dc8d967c62591dc2776a004d887d10619,CONF.register_cli_opts(_core_opts),1,0,0.0,1925
5019749dc8d967c62591dc2776a004d887d10619,"CONF.register_cli_opts(_db_opts, 'database')",1,0,0.0,1926
5019749dc8d967c62591dc2776a004d887d10619,return migration_entrypoints[project],1,0,0.0,1927
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1928
5019749dc8d967c62591dc2776a004d887d10619,"default='$state_path/external/pids',",1,0,0.0,1929
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('external_pids',",1,0,0.0,1930
5019749dc8d967c62591dc2776a004d887d10619,"cfg.PortOpt('vxlan_udp_port', default=p_const.VXLAN_UDP_PORT,",1,0,0.0,1931
5019749dc8d967c62591dc2776a004d887d10619,"cfg.PortOpt('of_listen_port', default=6633,",1,0,0.0,1932
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('of_connect_timeout', default=30,",1,0,0.0,1933
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('of_request_timeout', default=10,",1,0,0.0,1934
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,1935
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('polling_interval', default=2,",1,0,0.0,1936
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('minimize_polling',",1,0,0.0,1937
5019749dc8d967c62591dc2776a004d887d10619,"default=True,",1,0,0.0,1938
5019749dc8d967c62591dc2776a004d887d10619,"""changes."")),",1,0,0.0,1939
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('ovsdb_monitor_respawn_interval',",1,0,0.0,1940
5019749dc8d967c62591dc2776a004d887d10619,"default=constants.DEFAULT_OVSDBMON_RESPAWN,",1,0,0.0,1941
5019749dc8d967c62591dc2776a004d887d10619,"cfg.ListOpt('tunnel_types', default=DEFAULT_TUNNEL_TYPES,",1,0,0.0,1942
5019749dc8d967c62591dc2776a004d887d10619,"""(gre and/or vxlan)."")),",1,0,0.0,1943
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('veth_mtu', default=9000,",1,0,0.0,1944
5019749dc8d967c62591dc2776a004d887d10619,agent_cfg.register_external_process_opts(),0,0,0.0,1945
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('l2_population', default=False,",1,0,0.0,1946
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('arp_responder', default=False,",1,0,0.0,1947
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('prevent_arp_spoofing', default=True,",1,0,0.0,1948
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",1,0,0.0,1949
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('dont_fragment', default=True,",1,0,0.0,1950
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('enable_distributed_routing', default=False,",1,0,0.0,1951
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('quitting_rpc_timeout', default=10,",1,0,0.0,1952
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('drop_flows_on_start', default=False,",1,0,0.0,1953
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('tunnel_csum', default=False,",1,0,0.0,1954
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('agent_type', default=n_const.AGENT_TYPE_OVS,",1,0,0.0,1955
5019749dc8d967c62591dc2776a004d887d10619,"cfg.CONF.register_opts(ovs_opts, ""OVS"")",1,0,0.0,1956
5019749dc8d967c62591dc2776a004d887d10619,"cfg.CONF.register_opts(agent_opts, ""AGENT"")",1,0,0.0,1957
5019749dc8d967c62591dc2776a004d887d10619,"# Copyright 2016 New Dream Network, LLC (DreamHost)",0,0,0.0,1958
5019749dc8d967c62591dc2776a004d887d10619,namespace.register_namespace_proxy_opts(cfg.CONF),0,0,0.0,1959
5019749dc8d967c62591dc2776a004d887d10619,conf.register_cli_opts(opts),1,0,0.0,1960
5019749dc8d967c62591dc2776a004d887d10619,"'subnet_id': subnet_id,",1,0,0.0,1961
5019749dc8d967c62591dc2776a004d887d10619,"def _check_for_dup_router_subnets(self, context, router,",0,0,0.0,1962
5019749dc8d967c62591dc2776a004d887d10619,"network_id, new_subnets):",0,0,0.0,1963
5019749dc8d967c62591dc2776a004d887d10619,# different subnets.,0,0,0.0,1964
5019749dc8d967c62591dc2776a004d887d10619,router_subnets.append(ip['subnet_id']),0,0,0.0,1965
5019749dc8d967c62591dc2776a004d887d10619,# Ignore temporary Prefix Delegation CIDRs,0,0,0.0,1966
5019749dc8d967c62591dc2776a004d887d10619,if s['cidr'] != l3_constants.PROVISIONAL_IPV6_PD_PREFIX],0,0,0.0,1967
5019749dc8d967c62591dc2776a004d887d10619,filters=id_filter),0,0,0.0,1968
5019749dc8d967c62591dc2776a004d887d10619,if match1 or match2:,0,0,0.0,1969
5019749dc8d967c62591dc2776a004d887d10619,"'subnet_id': s['id'],",0,0,0.0,1970
5019749dc8d967c62591dc2776a004d887d10619,"'cidr': cidr,",0,0,0.0,1971
5019749dc8d967c62591dc2776a004d887d10619,'sub_id': sub['id']},0,0,0.0,1972
5019749dc8d967c62591dc2776a004d887d10619,if subnets:,0,0,0.0,1973
5019749dc8d967c62591dc2776a004d887d10619,"port['network_id'],",0,0,0.0,1974
5019749dc8d967c62591dc2776a004d887d10619,subnets),0,0,0.0,1975
5019749dc8d967c62591dc2776a004d887d10619,"subnet['network_id'], [subnet])",0,0,0.0,1976
5019749dc8d967c62591dc2776a004d887d10619,"self._check_for_dup_router_subnet(context, router,",1,0,0.0,1977
5019749dc8d967c62591dc2776a004d887d10619,"new_network_id, subnet['id'],",1,0,0.0,1978
5019749dc8d967c62591dc2776a004d887d10619,subnet['cidr']),1,0,0.0,1979
5019749dc8d967c62591dc2776a004d887d10619,"def _check_for_dup_router_subnet(self, context, router,",1,0,0.0,1980
5019749dc8d967c62591dc2776a004d887d10619,"network_id, subnet_id, subnet_cidr):",1,0,0.0,1981
5019749dc8d967c62591dc2776a004d887d10619,try:,1,0,0.0,1982
5019749dc8d967c62591dc2776a004d887d10619,# different subnets.,1,0,0.0,1983
5019749dc8d967c62591dc2776a004d887d10619,if ip['subnet_id'] == subnet_id:,1,0,0.0,1984
5019749dc8d967c62591dc2776a004d887d10619,# Ignore temporary Prefix Delegation CIDRs,1,0,0.0,1985
5019749dc8d967c62591dc2776a004d887d10619,if subnet_cidr == l3_constants.PROVISIONAL_IPV6_PD_PREFIX:,1,0,0.0,1986
5019749dc8d967c62591dc2776a004d887d10619,continue,1,0,0.0,1987
5019749dc8d967c62591dc2776a004d887d10619,sub_id)['cidr'],1,0,0.0,1988
5019749dc8d967c62591dc2776a004d887d10619,"new_network_id, subnets)",0,0,0.0,1989
5019749dc8d967c62591dc2776a004d887d10619,"self._check_for_dup_router_subnets(context, router,",0,0,0.0,1990
5019749dc8d967c62591dc2776a004d887d10619,"def parse_mappings(mapping_list, unique_values=True):",1,0,0.0,1991
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",0,0,0.0,1992
5019749dc8d967c62591dc2776a004d887d10619,_validate_string),0,0,0.0,1993
5019749dc8d967c62591dc2776a004d887d10619,"'type:subnet_list': functools.partial(_validate_list_of_items,",0,0,0.0,1994
5019749dc8d967c62591dc2776a004d887d10619,"_validate_subnet),",0,0,0.0,1995
5019749dc8d967c62591dc2776a004d887d10619,"'type:uuid_list': functools.partial(_validate_list_of_items,",0,0,0.0,1996
5019749dc8d967c62591dc2776a004d887d10619,"_validate_uuid),",0,0,0.0,1997
5019749dc8d967c62591dc2776a004d887d10619,"def validate_list_of_unique_strings(data, max_string_len=None):",1,0,0.0,1998
5019749dc8d967c62591dc2776a004d887d10619,if len(set(data)) != len(data):,1,0,0.0,1999
5019749dc8d967c62591dc2776a004d887d10619,if msg:,1,0,0.0,2000
5019749dc8d967c62591dc2776a004d887d10619,"def _validate_subnet_list(data, valid_values=None):",1,0,0.0,2001
5019749dc8d967c62591dc2776a004d887d10619,"def _validate_uuid_list(data, valid_values=None):",1,0,0.0,2002
5019749dc8d967c62591dc2776a004d887d10619,"'type:subnet_list': _validate_subnet_list,",1,0,0.0,2003
5019749dc8d967c62591dc2776a004d887d10619,"'type:uuid_list': _validate_uuid_list,",1,0,0.0,2004
5019749dc8d967c62591dc2776a004d887d10619,"'VIFs.')),",0,0,0.0,2005
5019749dc8d967c62591dc2776a004d887d10619,mappings[key].append(value),0,0,0.0,2006
5019749dc8d967c62591dc2776a004d887d10619,"def parse_mappings(mapping_list, unique_values=True, unique_keys=True):",0,0,0.0,2007
5019749dc8d967c62591dc2776a004d887d10619,if unique_keys:,0,0,0.0,2008
5019749dc8d967c62591dc2776a004d887d10619,'mapping': mapping}),0,0,0.0,2009
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2010
5019749dc8d967c62591dc2776a004d887d10619,"mappings.setdefault(key, [])",0,0,0.0,2011
5019749dc8d967c62591dc2776a004d887d10619,mappings[key].append(value),0,0,0.0,2012
5019749dc8d967c62591dc2776a004d887d10619,"def parse_mappings(mapping_list, unique_values=True):",1,0,0.0,2013
5019749dc8d967c62591dc2776a004d887d10619,"def parse_mappings(mapping_list, unique_values=True, unique_keys=True):",0,0,0.0,2014
5019749dc8d967c62591dc2776a004d887d10619,if unique_keys:,0,0,0.0,2015
5019749dc8d967c62591dc2776a004d887d10619,'mapping': mapping}),0,0,0.0,2016
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2017
5019749dc8d967c62591dc2776a004d887d10619,"mappings.setdefault(key, [])",0,0,0.0,2018
5019749dc8d967c62591dc2776a004d887d10619,if match1 or match2:,1,0,0.0,2019
5019749dc8d967c62591dc2776a004d887d10619,"'cidr': cidr,",1,0,0.0,2020
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,2021
5019749dc8d967c62591dc2776a004d887d10619,'sub_id': sub_id},1,0,0.0,2022
5019749dc8d967c62591dc2776a004d887d10619,"default=40,",0,0,0.0,2023
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('api_workers',",0,0,0.0,2024
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('rpc_workers',",0,0,0.0,2025
5019749dc8d967c62591dc2776a004d887d10619,"default=1,",0,0,0.0,2026
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('rpc_state_report_workers',",0,0,0.0,2027
5019749dc8d967c62591dc2776a004d887d10619,"'reports queue.')),",0,0,0.0,2028
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('periodic_fuzzy_delay',",0,0,0.0,2029
5019749dc8d967c62591dc2776a004d887d10619,"default=5,",0,0,0.0,2030
5019749dc8d967c62591dc2776a004d887d10619,],0,0,0.0,2031
5019749dc8d967c62591dc2776a004d887d10619,"def register_service_opts(opts, conf=cfg.CONF):",0,0,0.0,2032
5019749dc8d967c62591dc2776a004d887d10619,conf.register_opts(opts),0,0,0.0,2033
5019749dc8d967c62591dc2776a004d887d10619,service.register_service_opts(service.service_opts),0,0,0.0,2034
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('periodic_interval',",1,0,0.0,2035
5019749dc8d967c62591dc2776a004d887d10619,"default=40,",1,0,0.0,2036
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('api_workers',",1,0,0.0,2037
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('rpc_workers',",1,0,0.0,2038
5019749dc8d967c62591dc2776a004d887d10619,"default=1,",1,0,0.0,2039
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('rpc_state_report_workers',",1,0,0.0,2040
5019749dc8d967c62591dc2776a004d887d10619,"'reports queue')),",1,0,0.0,2041
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('periodic_fuzzy_delay',",1,0,0.0,2042
5019749dc8d967c62591dc2776a004d887d10619,"default=5,",1,0,0.0,2043
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,2044
5019749dc8d967c62591dc2776a004d887d10619,CONF.register_opts(service_opts),1,0,0.0,2045
5019749dc8d967c62591dc2776a004d887d10619,"cmd.register_cmd_opts(cmd.ovs_opts, conf)",0,0,0.0,2046
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('ovs_all_ports',",1,0,0.0,2047
5019749dc8d967c62591dc2776a004d887d10619,"default=False,",1,0,0.0,2048
5019749dc8d967c62591dc2776a004d887d10619,'bridges.')),1,0,0.0,2049
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('periodic_interval',",0,0,0.0,2050
5019749dc8d967c62591dc2776a004d887d10619,#         http://www.apache.org/licenses/LICENSE-2.0,0,0,0.0,2051
5019749dc8d967c62591dc2776a004d887d10619,#,0,0,0.0,2052
5019749dc8d967c62591dc2776a004d887d10619,"default=-1,",1,0,0.0,2053
5019749dc8d967c62591dc2776a004d887d10619,except exc.NoResultFound:,1,0,0.0,2054
5019749dc8d967c62591dc2776a004d887d10619,pass,1,0,0.0,2055
5019749dc8d967c62591dc2776a004d887d10619,"port['network_id'],",1,0,0.0,2056
5019749dc8d967c62591dc2776a004d887d10619,"subnet['id'],",1,0,0.0,2057
5019749dc8d967c62591dc2776a004d887d10619,"subnet['network_id'],",1,0,0.0,2058
5019749dc8d967c62591dc2776a004d887d10619,"subnet_id,",1,0,0.0,2059
5019749dc8d967c62591dc2776a004d887d10619,quota.register_quota_opts(quota.core_quota_opts),0,0,0.0,2060
5019749dc8d967c62591dc2776a004d887d10619,"cfg.ListOpt('quota_items',",1,0,0.0,2061
5019749dc8d967c62591dc2776a004d887d10619,"default=default_quota_items,",1,0,0.0,2062
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_for_removal=True,",1,0,0.0,2063
5019749dc8d967c62591dc2776a004d887d10619,"'removal.')),",1,0,0.0,2064
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('default_quota',",1,0,0.0,2065
5019749dc8d967c62591dc2776a004d887d10619,"'A negative value means unlimited.')),",1,0,0.0,2066
5019749dc8d967c62591dc2776a004d887d10619,# All Rights Reserved.,0,0,0.0,2067
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('quota_network',",1,0,0.0,2068
5019749dc8d967c62591dc2776a004d887d10619,"default=10,",1,0,0.0,2069
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('quota_subnet',",1,0,0.0,2070
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('quota_port',",1,0,0.0,2071
5019749dc8d967c62591dc2776a004d887d10619,"default=50,",1,0,0.0,2072
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('quota_driver',",1,0,0.0,2073
5019749dc8d967c62591dc2776a004d887d10619,"default=QUOTA_DB_DRIVER,",1,0,0.0,2074
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('track_quota_usage',",1,0,0.0,2075
5019749dc8d967c62591dc2776a004d887d10619,"default=True,",1,0,0.0,2076
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,2077
5019749dc8d967c62591dc2776a004d887d10619,"cfg.CONF.register_opts(quota_opts, 'QUOTAS')",1,0,0.0,2078
5019749dc8d967c62591dc2776a004d887d10619,"# Copyright 2011 VMware, Inc",0,0,0.0,2079
5019749dc8d967c62591dc2776a004d887d10619,"""subinterface name""))",0,0,0.0,2080
5019749dc8d967c62591dc2776a004d887d10619,"def _get_key(self, tag):",1,0,0.0,2081
5019749dc8d967c62591dc2776a004d887d10619,"""%(kwargs)s""),",1,0,0.0,2082
5019749dc8d967c62591dc2776a004d887d10619,if self.conf.use_namespaces:,1,0,0.0,2083
5019749dc8d967c62591dc2776a004d887d10619,"def _destroy_router_namespaces(self, only_router_id=None):",1,0,0.0,2084
5019749dc8d967c62591dc2776a004d887d10619,if ns.startswith(NS_PREFIX):,1,0,0.0,2085
5019749dc8d967c62591dc2776a004d887d10619,continue,1,0,0.0,2086
5019749dc8d967c62591dc2776a004d887d10619,if self.conf.enable_metadata_proxy:,1,0,0.0,2087
5019749dc8d967c62591dc2776a004d887d10619,"self._destroy_metadata_proxy(router_id, ns)",1,0,0.0,2088
5019749dc8d967c62591dc2776a004d887d10619,try:,1,0,0.0,2089
5019749dc8d967c62591dc2776a004d887d10619,self._destroy_router_namespace(ns),1,0,0.0,2090
5019749dc8d967c62591dc2776a004d887d10619,def start(self):,0,0,0.0,2091
5019749dc8d967c62591dc2776a004d887d10619,"self._application,",0,0,0.0,2092
5019749dc8d967c62591dc2776a004d887d10619,self._service._socket),0,0,0.0,2093
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, name):",0,0,0.0,2094
5019749dc8d967c62591dc2776a004d887d10619,"super(UnixDomainWSGIServer, self).__init__(name)",0,0,0.0,2095
5019749dc8d967c62591dc2776a004d887d10619,"def start(self, application, file_socket, workers, backlog=128):",0,0,0.0,2096
5019749dc8d967c62591dc2776a004d887d10619,"family=socket.AF_UNIX,",0,0,0.0,2097
5019749dc8d967c62591dc2776a004d887d10619,backlog=backlog),0,0,0.0,2098
5019749dc8d967c62591dc2776a004d887d10619,if workers < 1:,0,0,0.0,2099
5019749dc8d967c62591dc2776a004d887d10619,self._socket),0,0,0.0,2100
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2101
5019749dc8d967c62591dc2776a004d887d10619,"self._launcher.launch_service(self._server, workers=workers)",0,0,0.0,2102
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('metadata_workers',",0,0,0.0,2103
5019749dc8d967c62591dc2776a004d887d10619,"default=0,",0,0,0.0,2104
5019749dc8d967c62591dc2776a004d887d10619,'server')),0,0,0.0,2105
5019749dc8d967c62591dc2776a004d887d10619,"self.conf.metadata_proxy_socket,",0,0,0.0,2106
5019749dc8d967c62591dc2776a004d887d10619,workers=self.conf.metadata_workers),0,0,0.0,2107
5019749dc8d967c62591dc2776a004d887d10619,"def start(self, application, file_socket, backlog=128):",1,0,0.0,2108
5019749dc8d967c62591dc2776a004d887d10619,"family=socket.AF_UNIX,",1,0,0.0,2109
5019749dc8d967c62591dc2776a004d887d10619,backlog=backlog),1,0,0.0,2110
5019749dc8d967c62591dc2776a004d887d10619,self._destroy_router_namespaces(self.conf.router_id),1,0,0.0,2111
5019749dc8d967c62591dc2776a004d887d10619,self._cleanup_namespaces(routers),0,0,0.0,2112
5019749dc8d967c62591dc2776a004d887d10619,return fake_method,0,0,0.0,2113
5019749dc8d967c62591dc2776a004d887d10619,if self._delete_stale_namespaces:,0,0,0.0,2114
5019749dc8d967c62591dc2776a004d887d10619,"tunnel_type,",1,0,0.0,2115
5019749dc8d967c62591dc2776a004d887d10619,self.vxlan_udp_port),1,0,0.0,2116
5019749dc8d967c62591dc2776a004d887d10619,# format errors.,0,0,0.0,2117
5019749dc8d967c62591dc2776a004d887d10619,if kwargs:,0,0,0.0,2118
5019749dc8d967c62591dc2776a004d887d10619,"'project_name': self.tenant_name,",0,0,0.0,2119
5019749dc8d967c62591dc2776a004d887d10619,if kwargs:,1,0,0.0,2120
5019749dc8d967c62591dc2776a004d887d10619,"'A negative value means unlimited.')),",0,0,0.0,2121
5019749dc8d967c62591dc2776a004d887d10619,"'unlimited')),",1,0,0.0,2122
5019749dc8d967c62591dc2776a004d887d10619,"'A negative value means unlimited.')),",0,0,0.0,2123
5019749dc8d967c62591dc2776a004d887d10619,"'A negative value means unlimited.')),",0,0,0.0,2124
5019749dc8d967c62591dc2776a004d887d10619,"'unlimited')),",1,0,0.0,2125
5019749dc8d967c62591dc2776a004d887d10619,self.conf.router_delete_namespaces),0,0,0.0,2126
5019749dc8d967c62591dc2776a004d887d10619,"def _cleanup_namespaces(self, routers):",0,0,0.0,2127
5019749dc8d967c62591dc2776a004d887d10619,try:,0,0,0.0,2128
5019749dc8d967c62591dc2776a004d887d10619,if ns.startswith(NS_PREFIX)),0,0,0.0,2129
5019749dc8d967c62591dc2776a004d887d10619,except RuntimeError:,0,0,0.0,2130
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2131
5019749dc8d967c62591dc2776a004d887d10619,self._destroy_stale_router_namespaces(ns_to_destroy),0,0,0.0,2132
5019749dc8d967c62591dc2776a004d887d10619,"def _destroy_stale_router_namespaces(self, router_namespaces):",0,0,0.0,2133
5019749dc8d967c62591dc2776a004d887d10619,"""""""",0,0,0.0,2134
5019749dc8d967c62591dc2776a004d887d10619,if self.conf.enable_metadata_proxy:,0,0,0.0,2135
5019749dc8d967c62591dc2776a004d887d10619,"self._destroy_metadata_proxy(ns[len(NS_PREFIX):], ns)",0,0,0.0,2136
5019749dc8d967c62591dc2776a004d887d10619,self._destroy_router_namespace(ns),0,0,0.0,2137
5019749dc8d967c62591dc2776a004d887d10619,"'%s'), ns)",0,0,0.0,2138
5019749dc8d967c62591dc2776a004d887d10619,except rpc_common.RPCException:,0,0,0.0,2139
5019749dc8d967c62591dc2776a004d887d10619,return,0,0,0.0,2140
5019749dc8d967c62591dc2776a004d887d10619,# namespaces.,0,0,0.0,2141
5019749dc8d967c62591dc2776a004d887d10619,"self.pool.spawn_n(self._run, application, sock)",1,0,0.0,2142
5019749dc8d967c62591dc2776a004d887d10619,self.conf.metadata_proxy_socket),1,0,0.0,2143
5019749dc8d967c62591dc2776a004d887d10619,"cfg.ListOpt('dnsmasq_dns_servers',",0,0,0.0,2144
5019749dc8d967c62591dc2776a004d887d10619,"'used as forwarders.'),",0,0,0.0,2145
5019749dc8d967c62591dc2776a004d887d10619,# Python2.6,1,0,0.0,2146
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(e, expat.ExpatError):",1,0,0.0,2147
5019749dc8d967c62591dc2776a004d887d10619,if parseError:,1,0,0.0,2148
5019749dc8d967c62591dc2776a004d887d10619,else:,1,0,0.0,2149
5019749dc8d967c62591dc2776a004d887d10619,config.register_interface_driver_opts_helper(conf),0,0,0.0,2150
5019749dc8d967c62591dc2776a004d887d10619,config.register_use_namespaces_opts_helper(conf),0,0,0.0,2151
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('interface_driver',",1,0,0.0,2152
5019749dc8d967c62591dc2776a004d887d10619,"""interface."")),",1,0,0.0,2153
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('use_namespaces', default=True,",1,0,0.0,2154
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Allow overlapping IP."")),",1,0,0.0,2155
5019749dc8d967c62591dc2776a004d887d10619,"cfg.BoolOpt('use_namespaces', default=True,",1,0,0.0,2156
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('interface_driver',",1,0,0.0,2157
5019749dc8d967c62591dc2776a004d887d10619,"""interface."")),",1,0,0.0,2158
5019749dc8d967c62591dc2776a004d887d10619,"if isinstance(e, fault):",0,0,0.0,2159
5019749dc8d967c62591dc2776a004d887d10619,break,0,0,0.0,2160
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2161
5019749dc8d967c62591dc2776a004d887d10619,if 400 <= mapped_exc.code < 500:,0,0,0.0,2162
5019749dc8d967c62591dc2776a004d887d10619,"{'action': action, 'exc': e})",0,0,0.0,2163
5019749dc8d967c62591dc2776a004d887d10619,"if isinstance(e, fault):",1,0,0.0,2164
5019749dc8d967c62591dc2776a004d887d10619,self.check_bridge_exists(bridge),0,0,0.0,2165
5019749dc8d967c62591dc2776a004d887d10619,try:,0,0,0.0,2166
5019749dc8d967c62591dc2776a004d887d10619,device.link.delete(),0,0,0.0,2167
5019749dc8d967c62591dc2776a004d887d10619,except RuntimeError:,0,0,0.0,2168
5019749dc8d967c62591dc2776a004d887d10619,self.check_bridge_exists(bridge),1,0,0.0,2169
5019749dc8d967c62591dc2776a004d887d10619,device.link.delete(),1,0,0.0,2170
5019749dc8d967c62591dc2776a004d887d10619,"def __getattribute__(self, name):",0,0,0.0,2171
5019749dc8d967c62591dc2776a004d887d10619,def fake_method(*args):,0,0,0.0,2172
5019749dc8d967c62591dc2776a004d887d10619,"isinstance(e, getattr(etree, 'ParseError'))):",1,0,0.0,2173
5019749dc8d967c62591dc2776a004d887d10619,# Python2.7,1,0,0.0,2174
5019749dc8d967c62591dc2776a004d887d10619,eventlet.sleep(0.1),1,0,0.0,2175
5019749dc8d967c62591dc2776a004d887d10619,"{'cmd': full_args, 'exception': e})",1,0,0.0,2176
5019749dc8d967c62591dc2776a004d887d10619,"deprecated_name='dnsmasq_dns_server'),",0,0,0.0,2177
5019749dc8d967c62591dc2776a004d887d10619,if self.conf.dnsmasq_dns_servers:,0,0,0.0,2178
5019749dc8d967c62591dc2776a004d887d10619,cmd.extend(,0,0,0.0,2179
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('dnsmasq_dns_server',",1,0,0.0,2180
5019749dc8d967c62591dc2776a004d887d10619,"'/etc/resolv.conf.')),",1,0,0.0,2181
5019749dc8d967c62591dc2776a004d887d10619,if self.conf.dnsmasq_dns_server:,1,0,0.0,2182
5019749dc8d967c62591dc2776a004d887d10619,"""Exception: %(exception)s""),",0,0,0.0,2183
5019749dc8d967c62591dc2776a004d887d10619,"{'cmd': full_args, 'exception': e})",0,0,0.0,2184
5019749dc8d967c62591dc2776a004d887d10619,"def db_get_map(self, table, record, column, check_error=False):",0,0,0.0,2185
5019749dc8d967c62591dc2776a004d887d10619,"def db_get_val(self, table, record, column, check_error=False):",0,0,0.0,2186
5019749dc8d967c62591dc2776a004d887d10619,"{'cmd': args, 'exception': e})",0,0,0.0,2187
5019749dc8d967c62591dc2776a004d887d10619,check_error=True),0,0,0.0,2188
5019749dc8d967c62591dc2776a004d887d10619,if check_error:,1,0,0.0,2189
5019749dc8d967c62591dc2776a004d887d10619,if err.errno != errno.EADDRINUSE:,1,0,0.0,2190
5019749dc8d967c62591dc2776a004d887d10619,"def db_get_map(self, table, record, column):",1,0,0.0,2191
5019749dc8d967c62591dc2776a004d887d10619,"def db_get_val(self, table, record, column):",1,0,0.0,2192
5019749dc8d967c62591dc2776a004d887d10619,"{'cmd': args, 'exception': e})",1,0,0.0,2193
5019749dc8d967c62591dc2776a004d887d10619,return [],1,0,0.0,2194
5019749dc8d967c62591dc2776a004d887d10619,if err.errno == errno.EADDRINUSE:,0,0,0.0,2195
5019749dc8d967c62591dc2776a004d887d10619,eventlet.sleep(0.1),0,0,0.0,2196
5019749dc8d967c62591dc2776a004d887d10619,# Python2.7,0,0,0.0,2197
5019749dc8d967c62591dc2776a004d887d10619,"isinstance(e, getattr(etree, 'ParseError'))):",0,0,0.0,2198
5019749dc8d967c62591dc2776a004d887d10619,# Python2.6,0,0,0.0,2199
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(e, expat.ExpatError):",0,0,0.0,2200
5019749dc8d967c62591dc2776a004d887d10619,if parseError:,0,0,0.0,2201
5019749dc8d967c62591dc2776a004d887d10619,"""Content-Type""))",0,0,0.0,2202
5019749dc8d967c62591dc2776a004d887d10619,"self.local_ip,",1,0,0.0,2203
5019749dc8d967c62591dc2776a004d887d10619,"tunnel['ip_address'],",1,0,0.0,2204
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_tunnel_port(tun_name,",1,0,0.0,2205
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(priority=0, actions=""drop"")",0,0,0.0,2206
5019749dc8d967c62591dc2776a004d887d10619,"""cidr"": cidr}",0,0,0.0,2207
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2208
5019749dc8d967c62591dc2776a004d887d10619,if msg:,0,0,0.0,2209
5019749dc8d967c62591dc2776a004d887d10619,netaddr.IPNetwork(_validate_no_whitespace(data)),1,0,0.0,2210
5019749dc8d967c62591dc2776a004d887d10619,if len(data.split('/')) == 2:,1,0,0.0,2211
5019749dc8d967c62591dc2776a004d887d10619,pass,1,0,0.0,2212
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('metadata_proxy_socket',",0,0,0.0,2213
5019749dc8d967c62591dc2776a004d887d10619,"default='$state_path/metadata_proxy',",0,0,0.0,2214
5019749dc8d967c62591dc2776a004d887d10619,'socket')),0,0,0.0,2215
5019749dc8d967c62591dc2776a004d887d10619,"default='$state_path/metadata_proxy',",1,0,0.0,2216
5019749dc8d967c62591dc2776a004d887d10619,'socket')),1,0,0.0,2217
5019749dc8d967c62591dc2776a004d887d10619,cfg.CONF.register_opt(proxy_socket),1,0,0.0,2218
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_VXLAN: set()},0,0,0.0,2219
5019749dc8d967c62591dc2776a004d887d10619,"self.setup_tunnel_port(tun_name, tunnel_ip, tunnel_type)",0,0,0.0,2220
5019749dc8d967c62591dc2776a004d887d10619,# outbound broadcast/multicast,0,0,0.0,2221
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.mod_flow(table=constants.FLOOD_TO_TUN,",0,0,0.0,2222
5019749dc8d967c62591dc2776a004d887d10619,"priority=1,",0,0,0.0,2223
5019749dc8d967c62591dc2776a004d887d10619,"actions=""strip_vlan,set_tunnel:%s,""",0,0,0.0,2224
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(table=constants.TUN_TABLE[network_type],",0,0,0.0,2225
5019749dc8d967c62591dc2776a004d887d10619,"tun_id=segmentation_id,",0,0,0.0,2226
5019749dc8d967c62591dc2776a004d887d10619,"(lvid, constants.LEARN_FROM_TUN))",0,0,0.0,2227
5019749dc8d967c62591dc2776a004d887d10619,self.tun_br.delete_flows(,0,0,0.0,2228
5019749dc8d967c62591dc2776a004d887d10619,"table=constants.TUN_TABLE[lvm.network_type],",0,0,0.0,2229
5019749dc8d967c62591dc2776a004d887d10619,tun_id=lvm.segmentation_id),0,0,0.0,2230
5019749dc8d967c62591dc2776a004d887d10619,"lvm.vif_ports.pop(vif_id, None)",0,0,0.0,2231
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(priority=1,",0,0,0.0,2232
5019749dc8d967c62591dc2776a004d887d10619,"in_port=self.patch_int_ofport,",0,0,0.0,2233
5019749dc8d967c62591dc2776a004d887d10619,if (cidr != data):,0,0,0.0,2234
5019749dc8d967c62591dc2776a004d887d10619,self.conf.dhcp_lease_time)),1,0,0.0,2235
5019749dc8d967c62591dc2776a004d887d10619,"default=120,",1,0,0.0,2236
5019749dc8d967c62591dc2776a004d887d10619,"return driver.plug(network_id, port_id, device_name, mac_address,",1,0,0.0,2237
5019749dc8d967c62591dc2776a004d887d10619,"def _get_flavor_by_network_id(self, network_id):",0,0,0.0,2238
5019749dc8d967c62591dc2776a004d887d10619,return network['network'][FLAVOR_NETWORK],0,0,0.0,2239
5019749dc8d967c62591dc2776a004d887d10619,"def _get_driver_by_network_id(self, network_id):",0,0,0.0,2240
5019749dc8d967c62591dc2776a004d887d10619,"def _set_device_plugin_tag(self, network_id, device_name, namespace=None):",0,0,0.0,2241
5019749dc8d967c62591dc2776a004d887d10619,device.link.set_alias(plugin_tag),0,0,0.0,2242
5019749dc8d967c62591dc2776a004d887d10619,"def _get_device_plugin_tag(self, device_name, namespace=None):",0,0,0.0,2243
5019749dc8d967c62591dc2776a004d887d10619,return device.link.alias,0,0,0.0,2244
5019749dc8d967c62591dc2776a004d887d10619,"bridge=bridge, namespace=namespace, prefix=prefix)",0,0,0.0,2245
5019749dc8d967c62591dc2776a004d887d10619,return ret,0,0,0.0,2246
5019749dc8d967c62591dc2776a004d887d10619,"def _get_driver_by_network_id(self, network_id):",1,0,0.0,2247
5019749dc8d967c62591dc2776a004d887d10619,"def _get_driver_by_device_name(self, device_name, namespace=None):",1,0,0.0,2248
5019749dc8d967c62591dc2776a004d887d10619,return self._get_driver_by_network_id(ports['ports'][0]['network_id']),1,0,0.0,2249
5019749dc8d967c62591dc2776a004d887d10619,"bridge=bridge, namespace=namespace, prefix=prefix)",1,0,0.0,2250
5019749dc8d967c62591dc2776a004d887d10619,"cfg.IntOpt('dhcp_lease_time',",1,0,0.0,2251
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('admin_user',",0,0,0.0,2252
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Admin username"")),",0,0,0.0,2253
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('admin_password',",0,0,0.0,2254
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Admin password""),",0,0,0.0,2255
5019749dc8d967c62591dc2776a004d887d10619,"secret=True),",0,0,0.0,2256
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('admin_tenant_name',",0,0,0.0,2257
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_url',",0,0,0.0,2258
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Authentication URL"")),",0,0,0.0,2259
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_strategy', default='keystone',",0,0,0.0,2260
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('auth_region',",0,0,0.0,2261
5019749dc8d967c62591dc2776a004d887d10619,"help=_(""Authentication region"")),",0,0,0.0,2262
5019749dc8d967c62591dc2776a004d887d10619,self.conf.dhcp_lease_duration)),0,0,0.0,2263
5019749dc8d967c62591dc2776a004d887d10619,constants.PATCH_LV_TO_TUN),0,0,0.0,2264
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(table=constants.PATCH_LV_TO_TUN,",0,0,0.0,2265
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(priority=1, actions=""drop"")",1,0,0.0,2266
5019749dc8d967c62591dc2776a004d887d10619,"dl_dst=""00:00:00:00:00:00/01:00:00:00:00:00"",",0,0,0.0,2267
5019749dc8d967c62591dc2776a004d887d10619,"(vlan_mapping.segmentation_id,",0,0,0.0,2268
5019749dc8d967c62591dc2776a004d887d10619,ofports)),0,0,0.0,2269
5019749dc8d967c62591dc2776a004d887d10619,"self.setup_tunnel_port(tun_name,",0,0,0.0,2270
5019749dc8d967c62591dc2776a004d887d10619,"tunnel['ip_address'],",0,0,0.0,2271
5019749dc8d967c62591dc2776a004d887d10619,tunnel_type),0,0,0.0,2272
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_tunnel_port(tun_name, tunnel_ip, self.local_ip,",1,0,0.0,2273
5019749dc8d967c62591dc2776a004d887d10619,"tunnel_type, self.vxlan_udp_port)",1,0,0.0,2274
5019749dc8d967c62591dc2776a004d887d10619,# outbound,1,0,0.0,2275
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(priority=4, in_port=self.patch_int_ofport,",1,0,0.0,2276
5019749dc8d967c62591dc2776a004d887d10619,segmentation_id),1,0,0.0,2277
5019749dc8d967c62591dc2776a004d887d10619,# inbound bcast/mcast,1,0,0.0,2278
5019749dc8d967c62591dc2776a004d887d10619,self.tun_br.add_flow(,1,0,0.0,2279
5019749dc8d967c62591dc2776a004d887d10619,"priority=3,",1,0,0.0,2280
5019749dc8d967c62591dc2776a004d887d10619,"tun_id=segmentation_id,",1,0,0.0,2281
5019749dc8d967c62591dc2776a004d887d10619,"dl_dst=""01:00:00:00:00:00/01:00:00:00:00:00"",",1,0,0.0,2282
5019749dc8d967c62591dc2776a004d887d10619,"(lvid, self.patch_int_ofport))",1,0,0.0,2283
5019749dc8d967c62591dc2776a004d887d10619,self.tun_br.delete_flows(tun_id=lvm.segmentation_id),1,0,0.0,2284
5019749dc8d967c62591dc2776a004d887d10619,if self.enable_tunneling:,1,0,0.0,2285
5019749dc8d967c62591dc2776a004d887d10619,# inbound unicast,1,0,0.0,2286
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(priority=3, tun_id=segmentation_id,",1,0,0.0,2287
5019749dc8d967c62591dc2776a004d887d10619,"dl_dst=port.vif_mac,",1,0,0.0,2288
5019749dc8d967c62591dc2776a004d887d10619,lvm.vlan),1,0,0.0,2289
5019749dc8d967c62591dc2776a004d887d10619,if vif_port:,1,0,0.0,2290
5019749dc8d967c62591dc2776a004d887d10619,constants.TUNNEL_NETWORK_TYPES):,1,0,0.0,2291
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.delete_flows(tun_id=lvm.segmentation_id,",1,0,0.0,2292
5019749dc8d967c62591dc2776a004d887d10619,dl_dst=vif_port.vif_mac),1,0,0.0,2293
5019749dc8d967c62591dc2776a004d887d10619,else:,1,0,0.0,2294
5019749dc8d967c62591dc2776a004d887d10619,"actions=""strip_vlan,""",0,0,0.0,2295
5019749dc8d967c62591dc2776a004d887d10619,"dl_vlan=vlan_mapping.vlan,",0,0,0.0,2296
5019749dc8d967c62591dc2776a004d887d10619,if vlan_mapping.network_type == tunnel_type:,0,0,0.0,2297
5019749dc8d967c62591dc2776a004d887d10619,# as broadcasts/multicasts,0,0,0.0,2298
5019749dc8d967c62591dc2776a004d887d10619,"dl_dst=""01:00:00:00:00:00/01:00:00:00:00:00"",",0,0,0.0,2299
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(table=constants.TUN_TABLE[tunnel_type],",0,0,0.0,2300
5019749dc8d967c62591dc2776a004d887d10619,"priority=0,",0,0,0.0,2301
5019749dc8d967c62591dc2776a004d887d10619,"actions=""drop"")",0,0,0.0,2302
5019749dc8d967c62591dc2776a004d887d10619,"""priority=1,""",0,0,0.0,2303
5019749dc8d967c62591dc2776a004d887d10619,"""hard_timeout=300,""",0,0,0.0,2304
5019749dc8d967c62591dc2776a004d887d10619,"""NXM_OF_VLAN_TCI[0..11],""",0,0,0.0,2305
5019749dc8d967c62591dc2776a004d887d10619,"""load:0->NXM_OF_VLAN_TCI[],""",0,0,0.0,2306
5019749dc8d967c62591dc2776a004d887d10619,"""load:NXM_NX_TUN_ID[]->NXM_NX_TUN_ID[],""",0,0,0.0,2307
5019749dc8d967c62591dc2776a004d887d10619,constants.UCAST_TO_TUN),0,0,0.0,2308
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(table=constants.LEARN_FROM_TUN,",0,0,0.0,2309
5019749dc8d967c62591dc2776a004d887d10619,"(learned_flow, self.patch_int_ofport))",0,0,0.0,2310
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(table=constants.UCAST_TO_TUN,",0,0,0.0,2311
5019749dc8d967c62591dc2776a004d887d10619,constants.TUN_TABLE[tunnel_type]),0,0,0.0,2312
5019749dc8d967c62591dc2776a004d887d10619,constants.FLOOD_TO_TUN),0,0,0.0,2313
5019749dc8d967c62591dc2776a004d887d10619,"self.tun_br.add_flow(table=constants.FLOOD_TO_TUN,",0,0,0.0,2314
5019749dc8d967c62591dc2776a004d887d10619,"def setup_tunnel_port(self, port_name, remote_ip, tunnel_type):",0,0,0.0,2315
5019749dc8d967c62591dc2776a004d887d10619,"remote_ip,",0,0,0.0,2316
5019749dc8d967c62591dc2776a004d887d10619,"self.local_ip,",0,0,0.0,2317
5019749dc8d967c62591dc2776a004d887d10619,"tunnel_type,",0,0,0.0,2318
5019749dc8d967c62591dc2776a004d887d10619,self.vxlan_udp_port),0,0,0.0,2319
5019749dc8d967c62591dc2776a004d887d10619,if ofport < 0:,0,0,0.0,2320
5019749dc8d967c62591dc2776a004d887d10619,"{'type': tunnel_type, 'ip': remote_ip})",0,0,0.0,2321
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2322
5019749dc8d967c62591dc2776a004d887d10619,self.tun_br_ofports[tunnel_type].add(ofport),0,0,0.0,2323
5019749dc8d967c62591dc2776a004d887d10619,"in_port=ofport,",0,0,0.0,2324
5019749dc8d967c62591dc2776a004d887d10619,pass,0,0,0.0,2325
5019749dc8d967c62591dc2776a004d887d10619,agent_config.register_use_namespaces_opts_helper(conf),0,0,0.0,2326
5019749dc8d967c62591dc2776a004d887d10619,"""%(kwargs)s"",",0,0,0.0,2327
5019749dc8d967c62591dc2776a004d887d10619,"'application/xml': XMLDeserializer(),",1,0,0.0,2328
5019749dc8d967c62591dc2776a004d887d10619,"return Fault(webob.exc.HTTPBadRequest(explanation=msg),",1,0,0.0,2329
5019749dc8d967c62591dc2776a004d887d10619,self._xmlns),1,0,0.0,2330
5019749dc8d967c62591dc2776a004d887d10619,"self._xmlns,",1,0,0.0,2331
5019749dc8d967c62591dc2776a004d887d10619,self._fault_body_function),1,0,0.0,2332
5019749dc8d967c62591dc2776a004d887d10619,"return Fault(webob.exc.HTTPBadRequest(),",1,0,0.0,2333
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, exception, xmlns=None, body_function=None):",1,0,0.0,2334
5019749dc8d967c62591dc2776a004d887d10619,"'application/xml': xml_serializer,",1,0,0.0,2335
5019749dc8d967c62591dc2776a004d887d10619,"def _serialize(self, data, content_type, default_xmlns):",1,0,0.0,2336
5019749dc8d967c62591dc2776a004d887d10619,"def get_default_xmlns(self, req):",1,0,0.0,2337
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, metadata=None, default_xmlns=None):",1,0,0.0,2338
5019749dc8d967c62591dc2776a004d887d10619,"'application/xml': XMLDictSerializer(self.metadata),",1,0,0.0,2339
5019749dc8d967c62591dc2776a004d887d10619,"'application/xml': XMLDeserializer(self.metadata),",1,0,0.0,2340
5019749dc8d967c62591dc2776a004d887d10619,"""'%s'""), self.conf.interface_driver)",0,0,0.0,2341
5019749dc8d967c62591dc2776a004d887d10619,"'%s'), ns)",0,0,0.0,2342
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('DVR: removed snat failed')),0,0,0.0,2343
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_LE('Missing subnet/agent_gateway_port')),0,0,0.0,2344
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Starting _sync_routers_task - fullsync:%s"",",0,0,0.0,2345
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Processing :%r', routers)",0,0,0.0,2346
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""_sync_routers_task successfully completed"")",0,0,0.0,2347
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(_LE(""Failed synchronizing routers""))",0,0,0.0,2348
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(msg),1,0,0.0,2349
5019749dc8d967c62591dc2776a004d887d10619,"'%s'), ns)",1,0,0.0,2350
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(msg),1,0,0.0,2351
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('DVR: removed snat failed')),1,0,0.0,2352
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(_('Missing subnet/agent_gateway_port')),1,0,0.0,2353
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""Starting _sync_routers_task - fullsync:%s""),",1,0,0.0,2354
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Processing :%r'), routers)",1,0,0.0,2355
5019749dc8d967c62591dc2776a004d887d10619,"if hasattr(xml_serializer, 'xmlns'):",1,0,0.0,2356
5019749dc8d967c62591dc2776a004d887d10619,return self.default(datastring),1,0,0.0,2357
5019749dc8d967c62591dc2776a004d887d10619,conf.register_opts(dhcp_agent.DhcpAgent.OPTS),0,0,0.0,2358
5019749dc8d967c62591dc2776a004d887d10619,"def __call__(self, datastring):",1,0,0.0,2359
5019749dc8d967c62591dc2776a004d887d10619,"return dict({root_tag: result}, **links)",1,0,0.0,2360
5019749dc8d967c62591dc2776a004d887d10619,# Python2.7,1,0,0.0,2361
5019749dc8d967c62591dc2776a004d887d10619,"isinstance(e, getattr(etree, 'ParseError'))):",1,0,0.0,2362
5019749dc8d967c62591dc2776a004d887d10619,# Python2.6,1,0,0.0,2363
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(e, expat.ExpatError):",1,0,0.0,2364
5019749dc8d967c62591dc2776a004d887d10619,if parseError:,1,0,0.0,2365
5019749dc8d967c62591dc2776a004d887d10619,"def _from_xml_node(self, node, listnames):",1,0,0.0,2366
5019749dc8d967c62591dc2776a004d887d10619,"self.metadata.get('xmlns'), ""type"")))",1,0,0.0,2367
5019749dc8d967c62591dc2776a004d887d10619,return {},1,0,0.0,2368
5019749dc8d967c62591dc2776a004d887d10619,return [],1,0,0.0,2369
5019749dc8d967c62591dc2776a004d887d10619,"lambda x: x.lower() == 'true',",1,0,0.0,2370
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_INT:,1,0,0.0,2371
5019749dc8d967c62591dc2776a004d887d10619,"lambda x: int(x),",1,0,0.0,2372
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_LONG:,1,0,0.0,2373
5019749dc8d967c62591dc2776a004d887d10619,"lambda x: long(x),",1,0,0.0,2374
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_FLOAT:,1,0,0.0,2375
5019749dc8d967c62591dc2776a004d887d10619,lambda x: float(x)},1,0,0.0,2376
5019749dc8d967c62591dc2776a004d887d10619,return converters[attrType](node.text),1,0,0.0,2377
5019749dc8d967c62591dc2776a004d887d10619,return node.text,1,0,0.0,2378
5019749dc8d967c62591dc2776a004d887d10619,if (attr == 'xmlns' or,1,0,0.0,2379
5019749dc8d967c62591dc2776a004d887d10619,attr.startswith('xmlns:') or,1,0,0.0,2380
5019749dc8d967c62591dc2776a004d887d10619,attr == constants.XSI_ATTR or,1,0,0.0,2381
5019749dc8d967c62591dc2776a004d887d10619,attr == constants.TYPE_ATTR):,1,0,0.0,2382
5019749dc8d967c62591dc2776a004d887d10619,continue,1,0,0.0,2383
5019749dc8d967c62591dc2776a004d887d10619,"child, listnames)",1,0,0.0,2384
5019749dc8d967c62591dc2776a004d887d10619,"def default(self, datastring):",1,0,0.0,2385
5019749dc8d967c62591dc2776a004d887d10619,return {'body': self._from_xml(datastring)},1,0,0.0,2386
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_(""_sync_routers_task successfully completed""))",1,0,0.0,2387
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_LE('Fork failed')),0,0,0.0,2388
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(_('Fork failed')),1,0,0.0,2389
5019749dc8d967c62591dc2776a004d887d10619,self.network.namespace),0,0,0.0,2390
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Ext name: %s', extension.get_name())",0,0,0.0,2391
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Ext alias: %s', extension.get_alias())",0,0,0.0,2392
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Ext description: %s', extension.get_description())",0,0,0.0,2393
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Ext updated: %s', extension.get_updated())",0,0,0.0,2394
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_LE(""Extension path '%s' doesn't exist!""), path)",0,0,0.0,2395
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Loading extension file: %s', f)",0,0,0.0,2396
5019749dc8d967c62591dc2776a004d887d10619,"""%(exception)s""),",0,0,0.0,2397
5019749dc8d967c62591dc2776a004d887d10619,"{'f': f, 'exception': exception})",0,0,0.0,2398
5019749dc8d967c62591dc2776a004d887d10619,"""plugins""),",0,0,0.0,2399
5019749dc8d967c62591dc2776a004d887d10619,LOG.info(_('Initializing extension manager.')),1,0,0.0,2400
5019749dc8d967c62591dc2776a004d887d10619,"LOG.error(_(""Extension path '%s' doesn't exist!""), path)",1,0,0.0,2401
5019749dc8d967c62591dc2776a004d887d10619,"""%(exception)s""), {'f': f, 'exception': exception})",1,0,0.0,2402
5019749dc8d967c62591dc2776a004d887d10619,"{""action"": action, ""net_id"": net_id, 'reason': e})",0,0,0.0,2403
5019749dc8d967c62591dc2776a004d887d10619,"'%(host)s', {'network_id': network_id,",0,0,0.0,2404
5019749dc8d967c62591dc2776a004d887d10619,'host': host}),0,0,0.0,2405
5019749dc8d967c62591dc2776a004d887d10619,"'%(host)s', {'device_id': device_id,",0,0,0.0,2406
5019749dc8d967c62591dc2776a004d887d10619,"'network_id': network_id,",0,0,0.0,2407
5019749dc8d967c62591dc2776a004d887d10619,"'%(host)s',",0,0,0.0,2408
5019749dc8d967c62591dc2776a004d887d10619,"'from %(host)s',",0,0,0.0,2409
5019749dc8d967c62591dc2776a004d887d10619,"'from %(host)s.',",0,0,0.0,2410
5019749dc8d967c62591dc2776a004d887d10619,"'%(host)s'), {'network_id': network_id,",1,0,0.0,2411
5019749dc8d967c62591dc2776a004d887d10619,'host': host}),1,0,0.0,2412
5019749dc8d967c62591dc2776a004d887d10619,"'%(host)s'), {'device_id': device_id,",1,0,0.0,2413
5019749dc8d967c62591dc2776a004d887d10619,"'network_id': network_id,",1,0,0.0,2414
5019749dc8d967c62591dc2776a004d887d10619,"'%(host)s'),",1,0,0.0,2415
5019749dc8d967c62591dc2776a004d887d10619,"'from %(host)s'),",1,0,0.0,2416
5019749dc8d967c62591dc2776a004d887d10619,"'from %(host)s.'),",1,0,0.0,2417
5019749dc8d967c62591dc2776a004d887d10619,LOG.info(_LI('Initializing extension manager.')),0,0,0.0,2418
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Extended request: %s', request_ext.key)",0,0,0.0,2419
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Extended action: %s', action.action_name)",0,0,0.0,2420
5019749dc8d967c62591dc2776a004d887d10619,'inner': e}),1,0,0.0,2421
5019749dc8d967c62591dc2776a004d887d10619,"'or above!'), cls.MINIMUM_VERSION)",0,0,0.0,2422
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Adding %(mac)s : %(name)s : %(ip)s',",0,0,0.0,2423
5019749dc8d967c62591dc2776a004d887d10619,"""%(inner)s""),",0,0,0.0,2424
5019749dc8d967c62591dc2776a004d887d10619,"{'driver': conf.interface_driver,",0,0,0.0,2425
5019749dc8d967c62591dc2776a004d887d10619,'inner': e}),0,0,0.0,2426
5019749dc8d967c62591dc2776a004d887d10619,"'%(ip)s',",0,0,0.0,2427
5019749dc8d967c62591dc2776a004d887d10619,"{'n': network.id, 'ip': subnet.gateway_ip})",0,0,0.0,2428
5019749dc8d967c62591dc2776a004d887d10619,'network_id': network.id}),0,0,0.0,2429
5019749dc8d967c62591dc2776a004d887d10619,"LOG.exception(msg, self.network.namespace)",1,0,0.0,2430
5019749dc8d967c62591dc2776a004d887d10619,"'or above!'), cls.MINIMUM_VERSION)",1,0,0.0,2431
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Adding %(mac)s : %(name)s : %(ip)s'),",1,0,0.0,2432
5019749dc8d967c62591dc2776a004d887d10619,LOG.error(msg),1,0,0.0,2433
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(m, {'n': network.id, 'ip': subnet.gateway_ip})",1,0,0.0,2434
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Extended resource: %s',",0,0,0.0,2435
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(msg, network.id)",1,0,0.0,2436
5019749dc8d967c62591dc2776a004d887d10619,'network_id': network.id}),1,0,0.0,2437
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(""Driver location: %s"", driver_provider)",0,0,0.0,2438
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Got semaphore / lock ""%s""', lock_name)",0,0,0.0,2439
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug('Semaphore / lock released ""%s""', lock_name)",0,0,0.0,2440
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Got semaphore / lock ""%s""'), lock_name)",1,0,0.0,2441
5019749dc8d967c62591dc2776a004d887d10619,"LOG.debug(_('Semaphore / lock released ""%s""'), lock_name)",1,0,0.0,2442
5019749dc8d967c62591dc2776a004d887d10619,"""Exception: %(exception)s""),",0,0,0.0,2443
5019749dc8d967c62591dc2776a004d887d10619,"""%(exception)s""),",0,0,0.0,2444
5019749dc8d967c62591dc2776a004d887d10619,'installed.')),0,0,0.0,2445
5019749dc8d967c62591dc2776a004d887d10619,"""Exception: %(exception)s""),",1,0,0.0,2446
5019749dc8d967c62591dc2776a004d887d10619,'installed.')),1,0,0.0,2447
5019749dc8d967c62591dc2776a004d887d10619,if root_tag == constants.VIRTUAL_ROOT_KEY:,1,0,0.0,2448
5019749dc8d967c62591dc2776a004d887d10619,return None,1,0,0.0,2449
5019749dc8d967c62591dc2776a004d887d10619,"def _from_xml(self, datastring):",1,0,0.0,2450
5019749dc8d967c62591dc2776a004d887d10619,return self.default(data),1,0,0.0,2451
5019749dc8d967c62591dc2776a004d887d10619,1) URI extension (.json),0,0,0.0,2452
5019749dc8d967c62591dc2776a004d887d10619,return Fault(webob.exc.HTTPBadRequest(explanation=msg)),0,0,0.0,2453
5019749dc8d967c62591dc2776a004d887d10619,return Fault(webob.exc.HTTPBadRequest()),0,0,0.0,2454
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, exception, body_function=None):",0,0,0.0,2455
5019749dc8d967c62591dc2776a004d887d10619,"def _serialize(self, data, content_type):",0,0,0.0,2456
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, metadata=None):",0,0,0.0,2457
5019749dc8d967c62591dc2776a004d887d10619,1) URI extension (.json/.xml),1,0,0.0,2458
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, metadata=None, xmlns=None):",1,0,0.0,2459
5019749dc8d967c62591dc2776a004d887d10619,"""""""Object initialization.",1,0,0.0,2460
5019749dc8d967c62591dc2776a004d887d10619,"""""""",1,0,0.0,2461
5019749dc8d967c62591dc2776a004d887d10619,"super(XMLDictSerializer, self).__init__()",1,0,0.0,2462
5019749dc8d967c62591dc2776a004d887d10619,"def default(self, data):",1,0,0.0,2463
5019749dc8d967c62591dc2776a004d887d10619,contain another '*_links' key as atom links. Other,1,0,0.0,2464
5019749dc8d967c62591dc2776a004d887d10619,try:,1,0,0.0,2465
5019749dc8d967c62591dc2776a004d887d10619,else:,1,0,0.0,2466
5019749dc8d967c62591dc2776a004d887d10619,if k.endswith('_links')],1,0,0.0,2467
5019749dc8d967c62591dc2776a004d887d10619,if link_keys:,1,0,0.0,2468
5019749dc8d967c62591dc2776a004d887d10619,data.keys()[0] or constants.VIRTUAL_ROOT_KEY),1,0,0.0,2469
5019749dc8d967c62591dc2776a004d887d10619,"self._to_xml_node(doc, self.metadata, root_key,",1,0,0.0,2470
5019749dc8d967c62591dc2776a004d887d10619,"root_value, used_prefixes)",1,0,0.0,2471
5019749dc8d967c62591dc2776a004d887d10619,if links:,1,0,0.0,2472
5019749dc8d967c62591dc2776a004d887d10619,"self._create_link_nodes(list(doc)[0], links)",1,0,0.0,2473
5019749dc8d967c62591dc2776a004d887d10619,"return self.to_xml_string(list(doc)[0], used_prefixes, has_atom)",1,0,0.0,2474
5019749dc8d967c62591dc2776a004d887d10619,except AttributeError as e:,1,0,0.0,2475
5019749dc8d967c62591dc2776a004d887d10619,LOG.exception(str(e)),1,0,0.0,2476
5019749dc8d967c62591dc2776a004d887d10619,return '',1,0,0.0,2477
5019749dc8d967c62591dc2776a004d887d10619,"def __call__(self, data):",1,0,0.0,2478
5019749dc8d967c62591dc2776a004d887d10619,"""either 'gre' or 'vxlan'."")),",1,0,0.0,2479
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('tunnel_type', default='',",1,0,0.0,2480
5019749dc8d967c62591dc2776a004d887d10619,"default=DEFAULT_TUNNEL_RANGES,",1,0,0.0,2481
5019749dc8d967c62591dc2776a004d887d10619,root_helper),1,0,0.0,2482
5019749dc8d967c62591dc2776a004d887d10619,conf.register_opts(interface.OPTS),0,0,0.0,2483
5019749dc8d967c62591dc2776a004d887d10619,"conf=conf,",0,0,0.0,2484
5019749dc8d967c62591dc2776a004d887d10619,"network=dhcp.NetModel(conf.use_namespaces, {'id': network_id}),",0,0,0.0,2485
5019749dc8d967c62591dc2776a004d887d10619,"root_helper=root_helper,",0,0,0.0,2486
5019749dc8d967c62591dc2776a004d887d10619,plugin=FakeDhcpPlugin()),0,0,0.0,2487
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, id):",1,0,0.0,2488
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('dhcp_driver',",1,0,0.0,2489
5019749dc8d967c62591dc2776a004d887d10619,"default='neutron.agent.linux.dhcp.Dnsmasq',",1,0,0.0,2490
5019749dc8d967c62591dc2776a004d887d10619,],1,0,0.0,2491
5019749dc8d967c62591dc2776a004d887d10619,conf.register_opts(opts),1,0,0.0,2492
5019749dc8d967c62591dc2776a004d887d10619,"conf,",1,0,0.0,2493
5019749dc8d967c62591dc2776a004d887d10619,"FakeNetwork(network_id),",1,0,0.0,2494
5019749dc8d967c62591dc2776a004d887d10619,if pid:,0,0,0.0,2495
5019749dc8d967c62591dc2776a004d887d10619,"cfg.ListOpt('tunnel_id_ranges',",1,0,0.0,2496
5019749dc8d967c62591dc2776a004d887d10619,if self.active:,0,0,0.0,2497
5019749dc8d967c62591dc2776a004d887d10619,"utils.execute(cmd, self.root_helper)",0,0,0.0,2498
5019749dc8d967c62591dc2776a004d887d10619,else:,0,0,0.0,2499
5019749dc8d967c62591dc2776a004d887d10619,"self.device_manager.destroy(self.network,",0,0,0.0,2500
5019749dc8d967c62591dc2776a004d887d10619,self.interface_name),0,0,0.0,2501
5019749dc8d967c62591dc2776a004d887d10619,if self.active:,1,0,0.0,2502
5019749dc8d967c62591dc2776a004d887d10619,"utils.execute(cmd, self.root_helper)",1,0,0.0,2503
5019749dc8d967c62591dc2776a004d887d10619,"self.device_manager.destroy(self.network, self.interface_name)",1,0,0.0,2504
5019749dc8d967c62591dc2776a004d887d10619,elif pid:,1,0,0.0,2505
5019749dc8d967c62591dc2776a004d887d10619,"cfg.StrOpt('tenant_network_type', default='local',",1,0,0.0,2506
5019749dc8d967c62591dc2776a004d887d10619,"cfg.ListOpt('network_vlan_ranges',",1,0,0.0,2507
5019749dc8d967c62591dc2776a004d887d10619,"default=DEFAULT_VLAN_RANGES,",1,0,0.0,2508
5019749dc8d967c62591dc2776a004d887d10619,# like originally intended,1,0,0.0,2509
5019749dc8d967c62591dc2776a004d887d10619,"def to_xml_string(self, node, used_prefixes, has_atom=False):",1,0,0.0,2510
5019749dc8d967c62591dc2776a004d887d10619,return parser.close(),1,0,0.0,2511
5019749dc8d967c62591dc2776a004d887d10619,"self._add_xmlns(node, used_prefixes, has_atom)",1,0,0.0,2512
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(data, float):",1,0,0.0,2513
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_FLOAT),1,0,0.0,2514
5019749dc8d967c62591dc2776a004d887d10619,"{'data': data,",1,0,0.0,2515
5019749dc8d967c62591dc2776a004d887d10619,'type': type(data)}),1,0,0.0,2516
5019749dc8d967c62591dc2776a004d887d10619,"if isinstance(data, str):",1,0,0.0,2517
5019749dc8d967c62591dc2776a004d887d10619,"def _create_link_nodes(self, xml_doc, links):",1,0,0.0,2518
5019749dc8d967c62591dc2776a004d887d10619,"link_node.set('rel', link['rel'])",1,0,0.0,2519
5019749dc8d967c62591dc2776a004d887d10619,"link_node.set('href', link['href'])",1,0,0.0,2520
5019749dc8d967c62591dc2776a004d887d10619,"'application/xml': XMLDictSerializer(),",1,0,0.0,2521
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, *args, **kwargs):",1,0,0.0,2522
5019749dc8d967c62591dc2776a004d887d10619,"etree.XMLParser.__init__(self, *args, **kwargs)",1,0,0.0,2523
5019749dc8d967c62591dc2776a004d887d10619,"def start_doctype_decl(self, name, sysid, pubid, internal):",1,0,0.0,2524
5019749dc8d967c62591dc2776a004d887d10619,"def doctype(self, name, pubid, system):",1,0,0.0,2525
5019749dc8d967c62591dc2776a004d887d10619,"def __init__(self, metadata=None):",1,0,0.0,2526
5019749dc8d967c62591dc2776a004d887d10619,"super(XMLDeserializer, self).__init__()",1,0,0.0,2527
5019749dc8d967c62591dc2776a004d887d10619,if len(tags) == 2:,1,0,0.0,2528
5019749dc8d967c62591dc2776a004d887d10619,if ns == self.xmlns:,1,0,0.0,2529
5019749dc8d967c62591dc2776a004d887d10619,return bare_tag,1,0,0.0,2530
5019749dc8d967c62591dc2776a004d887d10619,if ns == _ns:,1,0,0.0,2531
5019749dc8d967c62591dc2776a004d887d10619,"return prefix + "":"" + bare_tag",1,0,0.0,2532
5019749dc8d967c62591dc2776a004d887d10619,return tag,1,0,0.0,2533
5019749dc8d967c62591dc2776a004d887d10619,"def _get_links(self, root_tag, node):",1,0,0.0,2534
5019749dc8d967c62591dc2776a004d887d10619,"link_list.append({'rel': link.get('rel'),",1,0,0.0,2535
5019749dc8d967c62591dc2776a004d887d10619,'href': link.get('href')}),1,0,0.0,2536
5019749dc8d967c62591dc2776a004d887d10619,node.remove(link),1,0,0.0,2537
5019749dc8d967c62591dc2776a004d887d10619,"def _parseXML(self, text):",1,0,0.0,2538
5019749dc8d967c62591dc2776a004d887d10619,parser.feed(text),1,0,0.0,2539
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_LONG),1,0,0.0,2540
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(data, long):",1,0,0.0,2541
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_INT),1,0,0.0,2542
5019749dc8d967c62591dc2776a004d887d10619,result.set(,1,0,0.0,2543
5019749dc8d967c62591dc2776a004d887d10619,"return etree.tostring(node, encoding='UTF-8')",1,0,0.0,2544
5019749dc8d967c62591dc2776a004d887d10619,"def _add_xmlns(self, node, used_prefixes, has_atom=False):",1,0,0.0,2545
5019749dc8d967c62591dc2776a004d887d10619,"node.set('xmlns', self.xmlns)",1,0,0.0,2546
5019749dc8d967c62591dc2776a004d887d10619,"node.set(constants.TYPE_XMLNS, self.xmlns)",1,0,0.0,2547
5019749dc8d967c62591dc2776a004d887d10619,if has_atom:,1,0,0.0,2548
5019749dc8d967c62591dc2776a004d887d10619,"node.set(constants.ATOM_XMLNS, constants.ATOM_NAMESPACE)",1,0,0.0,2549
5019749dc8d967c62591dc2776a004d887d10619,"node.set(constants.XSI_NIL_ATTR, constants.XSI_NAMESPACE)",1,0,0.0,2550
5019749dc8d967c62591dc2776a004d887d10619,"node.set('xmlns:' + prefix, ext_ns[prefix])",1,0,0.0,2551
5019749dc8d967c62591dc2776a004d887d10619,"node.set('xmlns:' + prefix, ext_ns_bc[prefix])",1,0,0.0,2552
5019749dc8d967c62591dc2776a004d887d10619,"def _to_xml_node(self, parent, metadata, nodename, data, used_prefixes):",1,0,0.0,2553
5019749dc8d967c62591dc2776a004d887d10619,"used_prefixes.append(nodename.split("":"", 1)[0])",1,0,0.0,2554
5019749dc8d967c62591dc2776a004d887d10619,"if isinstance(data, list):",1,0,0.0,2555
5019749dc8d967c62591dc2776a004d887d10619,"constants.TYPE_ATTR,",1,0,0.0,2556
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(data, int):",1,0,0.0,2557
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_LIST),1,0,0.0,2558
5019749dc8d967c62591dc2776a004d887d10619,return result,1,0,0.0,2559
5019749dc8d967c62591dc2776a004d887d10619,if nodename.endswith('s'):,1,0,0.0,2560
5019749dc8d967c62591dc2776a004d887d10619,"self._to_xml_node(result, metadata, singular, item,",1,0,0.0,2561
5019749dc8d967c62591dc2776a004d887d10619,used_prefixes),1,0,0.0,2562
5019749dc8d967c62591dc2776a004d887d10619,"elif isinstance(data, dict):",1,0,0.0,2563
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_DICT),1,0,0.0,2564
5019749dc8d967c62591dc2776a004d887d10619,"result.set(k, str(v))",1,0,0.0,2565
5019749dc8d967c62591dc2776a004d887d10619,"self._to_xml_node(result, metadata, k, v,",1,0,0.0,2566
5019749dc8d967c62591dc2776a004d887d10619,"result.set(constants.XSI_ATTR, 'true')",1,0,0.0,2567
5019749dc8d967c62591dc2776a004d887d10619,"if isinstance(data, bool):",1,0,0.0,2568
5019749dc8d967c62591dc2776a004d887d10619,constants.TYPE_BOOL),1,0,0.0,2569
5019749dc8d967c62591dc2776a004d887d10619,return migration_entrypoints[subproject],1,0,0.0,2570
