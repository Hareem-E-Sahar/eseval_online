commit_id,line,line_level_label,count,line_score,row
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.warn(_(""Overlapping IPs must be enabled in order to setup """,1,8,1.0,1
9951582d33f57ed53e0a3ece9f1f81623faba032,"""the metadata access network. Metadata access in """,1,7,0.875,2
9951582d33f57ed53e0a3ece9f1f81623faba032,# Password is guaranteed to be the same across all controllers,1,3,0.375,3
9951582d33f57ed53e0a3ece9f1f81623faba032,# FIXME(salvatore-orlando): This is not going to work,1,3,0.375,4
9951582d33f57ed53e0a3ece9f1f81623faba032,if not self.clusters_opts:,1,2,0.25,5
9951582d33f57ed53e0a3ece9f1f81623faba032,# unless we store the nova_id in the database once we'll,1,2,0.25,6
9951582d33f57ed53e0a3ece9f1f81623faba032,if not pairs:,1,2,0.25,7
9951582d33f57ed53e0a3ece9f1f81623faba032,"""the NVP Plugin configuration file."")",1,2,0.25,8
9951582d33f57ed53e0a3ece9f1f81623faba032,"""Unable to start. Please ensure at least a """,1,2,0.25,9
9951582d33f57ed53e0a3ece9f1f81623faba032,"msg = _(""No cluster specified in NVP plugin configuration. """,1,2,0.25,10
9951582d33f57ed53e0a3ece9f1f81623faba032,"""""""Figure out the set of lswitches on each cluster that maps to this",1,2,0.25,11
9951582d33f57ed53e0a3ece9f1f81623faba032,if not clusters:,1,2,0.25,12
9951582d33f57ed53e0a3ece9f1f81623faba032,# in the same NVP cluster.,1,2,0.25,13
9951582d33f57ed53e0a3ece9f1f81623faba032,"""routed mode will not work with this configuration""))",1,2,0.25,14
9951582d33f57ed53e0a3ece9f1f81623faba032,if not cfg.CONF.api_extensions_path:,1,2,0.25,15
9951582d33f57ed53e0a3ece9f1f81623faba032,# want to support deprecated options in the nvp config file,0,2,0.25,16
9951582d33f57ed53e0a3ece9f1f81623faba032,"""'nvp_controller_connection' is specified in the """,1,2,0.25,17
9951582d33f57ed53e0a3ece9f1f81623faba032,if 'nova_id' in resource:,1,1,0.125,18
9951582d33f57ed53e0a3ece9f1f81623faba032,# FIXME(salvatore-orlando): Failures here might lead NVP,1,1,0.125,19
9951582d33f57ed53e0a3ece9f1f81623faba032,return networks,1,1,0.125,20
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.debug(_(""get_all_networks() completed for tenant """,1,1,0.125,21
9951582d33f57ed53e0a3ece9f1f81623faba032,return self._novazone_to_cluster(resource['nova_id']),1,1,0.125,22
9951582d33f57ed53e0a3ece9f1f81623faba032,If the resource being configured has a paremeter expressing,1,1,0.125,23
9951582d33f57ed53e0a3ece9f1f81623faba032,otherwise return default cluster.,1,1,0.125,24
9951582d33f57ed53e0a3ece9f1f81623faba032,"the zone id (nova_id), then select corresponding cluster,",1,1,0.125,25
9951582d33f57ed53e0a3ece9f1f81623faba032,"""""""Return cluster where configuration should be applied",1,1,0.125,26
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.error(_(""Unable to find cluster config entry for nova zone: %s""),",1,1,0.125,27
9951582d33f57ed53e0a3ece9f1f81623faba032,network id,1,1,0.125,28
9951582d33f57ed53e0a3ece9f1f81623faba032,# and quantum state to diverge,1,1,0.125,29
9951582d33f57ed53e0a3ece9f1f81623faba032,# FIXME(salvatore-orlando): We need to,1,1,0.125,30
9951582d33f57ed53e0a3ece9f1f81623faba032,return pairs,1,1,0.125,31
9951582d33f57ed53e0a3ece9f1f81623faba032,# enable multiple clusters,1,1,0.125,32
9951582d33f57ed53e0a3ece9f1f81623faba032,# cannot be or-ed,1,1,0.125,33
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.warn(_(""Lswitch %s not found in NVP""), lswitch)",1,1,0.125,34
9951582d33f57ed53e0a3ece9f1f81623faba032,if ports:,1,1,0.125,35
9951582d33f57ed53e0a3ece9f1f81623faba032,"if tag[""scope""] == ""q_port_id"":",1,1,0.125,36
9951582d33f57ed53e0a3ece9f1f81623faba032,#TODO(salvatore-orlando): pass the appropriate cluster here,1,1,0.125,37
9951582d33f57ed53e0a3ece9f1f81623faba032,if x.zone == str(novazone_id):,1,1,0.125,38
9951582d33f57ed53e0a3ece9f1f81623faba032,# find the appropriate cluster!,1,1,0.125,39
9951582d33f57ed53e0a3ece9f1f81623faba032,"# TODO(salvatore-orlando): Identify the appropriate cluster, instead",1,1,0.125,40
9951582d33f57ed53e0a3ece9f1f81623faba032,# of always defaulting to self.default_cluster,1,1,0.125,41
9951582d33f57ed53e0a3ece9f1f81623faba032,return x,1,1,0.125,42
9951582d33f57ed53e0a3ece9f1f81623faba032,return self.default_cluster,1,1,0.125,43
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.debug(_(""Looking for nova zone %(novazone_id)s in """,1,1,0.125,44
9951582d33f57ed53e0a3ece9f1f81623faba032,# Will store the first cluster in case is needed for default,1,1,0.125,45
9951582d33f57ed53e0a3ece9f1f81623faba032,return self.novazone_cluster_map[novazone_id],1,1,0.125,46
9951582d33f57ed53e0a3ece9f1f81623faba032,return cluster,0,1,0.125,47
9951582d33f57ed53e0a3ece9f1f81623faba032,"return self._handle_lswitch_selection(self.cluster, network,",0,1,0.125,48
9951582d33f57ed53e0a3ece9f1f81623faba032,# cannot be or-ed,0,1,0.125,49
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.warn(_(""Lswitch %s not found in NVP""), lswitch)",0,1,0.125,50
9951582d33f57ed53e0a3ece9f1f81623faba032,if ports:,0,1,0.125,51
9951582d33f57ed53e0a3ece9f1f81623faba032,"""""""Parse the supplied plugin configuration.",1,1,0.125,52
9951582d33f57ed53e0a3ece9f1f81623faba032,# If no api_extensions_path is provided set the following,1,1,0.125,53
9951582d33f57ed53e0a3ece9f1f81623faba032,"if (cfg.CONF.NVP.metadata_mode == ""access_network"" and",1,1,0.125,54
9951582d33f57ed53e0a3ece9f1f81623faba032,not cfg.CONF.allow_overlapping_ips):,1,1,0.125,55
9951582d33f57ed53e0a3ece9f1f81623faba032,"return cfg.CONF.NVP, clusters_options",1,1,0.125,56
9951582d33f57ed53e0a3ece9f1f81623faba032,"if tag[""scope""] == ""q_port_id"":",0,1,0.125,57
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.exception(_(""Invalid connection parameters for """,1,1,0.125,58
9951582d33f57ed53e0a3ece9f1f81623faba032,"return (clusters, default_cluster)",1,1,0.125,59
9951582d33f57ed53e0a3ece9f1f81623faba032,if novazone_id in self.novazone_cluster_map:,1,1,0.125,60
9951582d33f57ed53e0a3ece9f1f81623faba032,"""controller %(ctrl)s in """,1,1,0.125,61
9951582d33f57ed53e0a3ece9f1f81623faba032,return self._handle_lswitch_selection(,1,1,0.125,62
9951582d33f57ed53e0a3ece9f1f81623faba032,# Extend the fault map,1,1,0.125,63
9951582d33f57ed53e0a3ece9f1f81623faba032,# Default controller cluster (to be used when nova zone id is unspecified),1,1,0.125,64
9951582d33f57ed53e0a3ece9f1f81623faba032,"""[CLUSTER:<cluster_name>] section is specified in """,1,1,0.125,65
9951582d33f57ed53e0a3ece9f1f81623faba032,if default_cluster_name and default_cluster_name in clusters:,1,1,0.125,66
9951582d33f57ed53e0a3ece9f1f81623faba032,"""configuration. Please ensure at least a value for """,1,1,0.125,67
9951582d33f57ed53e0a3ece9f1f81623faba032,"msg = _(""No controller connection specified in cluster """,1,1,0.125,68
9951582d33f57ed53e0a3ece9f1f81623faba032,"{'novazone_id': novazone_id, 'x': x})",1,0,0.0,69
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster,",1,0,0.0,70
9951582d33f57ed53e0a3ece9f1f81623faba032,self.novazone_cluster_map[x.zone] = x,1,0,0.0,71
9951582d33f57ed53e0a3ece9f1f81623faba032,"""cluster: %(x)s""),",1,0,0.0,72
9951582d33f57ed53e0a3ece9f1f81623faba032,for x in self.clusters:,1,0,0.0,73
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.debug(_(""Looking for nova zone: %s""), novazone_id)",1,0,0.0,74
9951582d33f57ed53e0a3ece9f1f81623faba032,"def _novazone_to_cluster(self, novazone_id):",1,0,0.0,75
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_router_lport(cluster,",1,0,0.0,76
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.default_cluster.default_l3_gw_service_uuid,",1,0,0.0,77
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id, ""SourceNatRule"",",1,0,0.0,78
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id,",1,0,0.0,79
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, context, router_id, port_data,",1,0,0.0,80
9951582d33f57ed53e0a3ece9f1f81623faba032,"lr_port = nvplib.find_router_gw_port(context, cluster, router_id)",1,0,0.0,81
9951582d33f57ed53e0a3ece9f1f81623faba032,raise nvp_exc.NvpInvalidNovaZone(nova_zone=novazone_id),1,0,0.0,82
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_peer_router_lport(self.default_cluster,",1,0,0.0,83
9951582d33f57ed53e0a3ece9f1f81623faba032,novazone_id),1,0,0.0,84
9951582d33f57ed53e0a3ece9f1f81623faba032,"net_data.get(pnet.PHYSICAL_NETWORK),",1,0,0.0,85
9951582d33f57ed53e0a3ece9f1f81623faba032,"def _find_target_cluster(self, resource):",1,0,0.0,86
9951582d33f57ed53e0a3ece9f1f81623faba032,# TODO(savatore-orlando) Find main_ls too!,1,0,0.0,87
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_port_id = self._nvp_get_port_id(context, self.default_cluster,",1,0,0.0,88
9951582d33f57ed53e0a3ece9f1f81623faba032,"def _get_lswitch_cluster_pairs(self, netw_id, tenant_id):",1,0,0.0,89
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_networks(cluster, id, switches)",1,0,0.0,90
9951582d33f57ed53e0a3ece9f1f81623faba032,"for (cluster, switches) in pairs:",1,0,0.0,91
9951582d33f57ed53e0a3ece9f1f81623faba032,"pairs = self._get_lswitch_cluster_pairs(id, context.tenant_id)",1,0,0.0,92
9951582d33f57ed53e0a3ece9f1f81623faba032,"context, self.default_cluster, port)",1,0,0.0,93
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_binding_type,",1,0,0.0,94
9951582d33f57ed53e0a3ece9f1f81623faba032,"target_cluster, tenant_id, net_data.get('name'),",1,0,0.0,95
9951582d33f57ed53e0a3ece9f1f81623faba032,target_cluster = self._find_target_cluster(net_data),1,0,0.0,96
9951582d33f57ed53e0a3ece9f1f81623faba032,"{'tenant_id': tenant_id, 'networks': networks})",1,0,0.0,97
9951582d33f57ed53e0a3ece9f1f81623faba032,"""%(tenant_id)s: %(networks)s""),",1,0,0.0,98
9951582d33f57ed53e0a3ece9f1f81623faba032,"networks.extend(nvplib.get_all_networks(c, tenant_id, networks))",1,0,0.0,99
9951582d33f57ed53e0a3ece9f1f81623faba032,for c in self.clusters:,1,0,0.0,100
9951582d33f57ed53e0a3ece9f1f81623faba032,networks = [],1,0,0.0,101
9951582d33f57ed53e0a3ece9f1f81623faba032,"def get_all_networks(self, tenant_id, **kwargs):",1,0,0.0,102
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_port(self.default_cluster,",1,0,0.0,103
9951582d33f57ed53e0a3ece9f1f81623faba032,conn_params=ctrl_conn),1,0,0.0,104
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.plug_interface(cluster, selected_lswitch['uuid'],",1,0,0.0,105
9951582d33f57ed53e0a3ece9f1f81623faba032,"lport = self._nvp_create_port_helper(cluster,",1,0,0.0,106
9951582d33f57ed53e0a3ece9f1f81623faba032,"redirects=cluster.redirects,",1,0,0.0,107
9951582d33f57ed53e0a3ece9f1f81623faba032,"retries=cluster.retries,",1,0,0.0,108
9951582d33f57ed53e0a3ece9f1f81623faba032,"http_timeout=cluster.http_timeout,",1,0,0.0,109
9951582d33f57ed53e0a3ece9f1f81623faba032,"request_timeout=cluster.request_timeout,",1,0,0.0,110
9951582d33f57ed53e0a3ece9f1f81623faba032,"api_providers, cluster.user, cluster.password,",1,0,0.0,111
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster.api_client = NvpApiClient.NVPApiHelper(,1,0,0.0,112
9951582d33f57ed53e0a3ece9f1f81623faba032,for x in cluster.controllers],1,0,0.0,113
9951582d33f57ed53e0a3ece9f1f81623faba032,"api_providers = [(x['ip'], x['port'], True)",1,0,0.0,114
9951582d33f57ed53e0a3ece9f1f81623faba032,raise nvp_exc.NvpPluginException(err_msg=msg),1,0,0.0,115
9951582d33f57ed53e0a3ece9f1f81623faba032,LOG.exception(msg),1,0,0.0,116
9951582d33f57ed53e0a3ece9f1f81623faba032,"""[CLUSTER:%s] section"") % c_opts['name']",1,0,0.0,117
9951582d33f57ed53e0a3ece9f1f81623faba032,except TypeError:,1,0,0.0,118
9951582d33f57ed53e0a3ece9f1f81623faba032,for c in self.clusters.itervalues():,1,0,0.0,119
9951582d33f57ed53e0a3ece9f1f81623faba032,raise nvp_exc.NvpInvalidConnection(,1,0,0.0,120
9951582d33f57ed53e0a3ece9f1f81623faba032,'cluster': c_opts['name']}),1,0,0.0,121
9951582d33f57ed53e0a3ece9f1f81623faba032,"concurrent_connections=concurrent_connections,",1,0,0.0,122
9951582d33f57ed53e0a3ece9f1f81623faba032,nvp_gen_timeout=nvp_gen_timeout),1,0,0.0,123
9951582d33f57ed53e0a3ece9f1f81623faba032,first_cluster = cluster,1,0,0.0,124
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.clusters_opts, self.nvp_opts.concurrent_connections,",1,0,0.0,125
9951582d33f57ed53e0a3ece9f1f81623faba032,allow_extra_lswitches),1,0,0.0,126
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, network, network_binding, max_ports,",1,0,0.0,127
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = self._find_target_cluster(port_data),1,0,0.0,128
9951582d33f57ed53e0a3ece9f1f81623faba032,def_l2_gw_uuid = self.default_cluster.default_l2_gw_service_uuid,1,0,0.0,129
9951582d33f57ed53e0a3ece9f1f81623faba032,# TODO(salvatore-orlando): Handle default gateways in multiple clusters,1,0,0.0,130
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.nvp_opts.nvp_gen_timeout, self.nvp_opts.default_cluster_name)",1,0,0.0,131
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.clusters, self.default_cluster = parse_clusters_opts(",1,0,0.0,132
9951582d33f57ed53e0a3ece9f1f81623faba032,clusters[c_opts['name']] = cluster,1,0,0.0,133
9951582d33f57ed53e0a3ece9f1f81623faba032,LOG.error(msg),1,0,0.0,134
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.nvp_opts, self.clusters_opts = parse_config()",1,0,0.0,135
9951582d33f57ed53e0a3ece9f1f81623faba032,default_cluster = None,1,0,0.0,136
9951582d33f57ed53e0a3ece9f1f81623faba032,default_cluster = first_cluster,1,0,0.0,137
9951582d33f57ed53e0a3ece9f1f81623faba032,else:,1,0,0.0,138
9951582d33f57ed53e0a3ece9f1f81623faba032,default_cluster = clusters[default_cluster_name],1,0,0.0,139
9951582d33f57ed53e0a3ece9f1f81623faba032,pairs = [],1,0,0.0,140
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.default_cluster, quantum_db_port['network_id'],",1,0,0.0,141
9951582d33f57ed53e0a3ece9f1f81623faba032,lswitches = [],1,0,0.0,142
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id, ""DestinationNatRule"",",1,0,0.0,143
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_router_lport(cluster, router_id, lrouter_port_id)",1,0,0.0,144
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id, ""NoSourceNatRule"",",1,0,0.0,145
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, '*', relations=""LogicalPortAttachment"",",1,0,0.0,146
9951582d33f57ed53e0a3ece9f1f81623faba032,# TODO(salvatore-orlando): Usual thing about cluster selection,1,0,0.0,147
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id, snat_ip, snat_ip,",1,0,0.0,148
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, context, router_id, port,",1,0,0.0,149
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, '*',",1,0,0.0,150
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_lrouters = nvplib.get_lrouters(self.default_cluster,",1,0,0.0,151
9951582d33f57ed53e0a3ece9f1f81623faba032,"lrouter = nvplib.get_lrouter(cluster, id)",1,0,0.0,152
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = self.default_cluster,1,0,0.0,153
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_lrouter(self.default_cluster, id)",1,0,0.0,154
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_lrouter(cluster, id,",1,0,0.0,155
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster.default_l3_gw_service_uuid),1,0,0.0,156
9951582d33f57ed53e0a3ece9f1f81623faba032,"""L3GatewayAttachment"",",1,0,0.0,157
9951582d33f57ed53e0a3ece9f1f81623faba032,"{'fake_ext_gw': True},",1,0,0.0,158
9951582d33f57ed53e0a3ece9f1f81623faba032,#TODO(salvatore-orlando): Multiple cluster support,1,0,0.0,159
9951582d33f57ed53e0a3ece9f1f81623faba032,"context, self.default_cluster, router_id)['uuid']",1,0,0.0,160
9951582d33f57ed53e0a3ece9f1f81623faba032,"results = nvplib.get_lswitches(c, netw_id)",1,0,0.0,161
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_lrouter_port_ips(self.default_cluster,",1,0,0.0,162
9951582d33f57ed53e0a3ece9f1f81623faba032,"q['id'] = nvplib.create_lqueue(self.default_cluster,",1,0,0.0,163
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.default_cluster, sgid, current_rules)",1,0,0.0,164
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_security_group_rules(self.default_cluster,",1,0,0.0,165
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_security_profile(self.default_cluster,",1,0,0.0,166
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_secgroup = nvplib.create_security_profile(self.default_cluster,",1,0,0.0,167
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_l2_gw_service(self.default_cluster, id)",1,0,0.0,168
9951582d33f57ed53e0a3ece9f1f81623faba032,devices),1,0,0.0,169
9951582d33f57ed53e0a3ece9f1f81623faba032,"gw_data['name'],",1,0,0.0,170
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_res = nvplib.create_l2_gw_service(cluster, tenant_id,",1,0,0.0,171
9951582d33f57ed53e0a3ece9f1f81623faba032,device['interface_name'] = cluster.default_interface_name,1,0,0.0,172
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = self._find_target_cluster(gw_data),1,0,0.0,173
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_lrouter_port_ips(cluster,",1,0,0.0,174
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id, floating_ip, floating_ip,",1,0,0.0,175
9951582d33f57ed53e0a3ece9f1f81623faba032,"cluster, router_id, internal_ip,",1,0,0.0,176
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = self._find_target_cluster(fip),1,0,0.0,177
9951582d33f57ed53e0a3ece9f1f81623faba032,"lrouter['uuid'],",1,0,0.0,178
9951582d33f57ed53e0a3ece9f1f81623faba032,"context,",1,0,0.0,179
9951582d33f57ed53e0a3ece9f1f81623faba032,"self._create_and_attach_router_port(cluster,",1,0,0.0,180
9951582d33f57ed53e0a3ece9f1f81623faba032,"lrouter = nvplib.create_lrouter(cluster, tenant_id,",1,0,0.0,181
9951582d33f57ed53e0a3ece9f1f81623faba032,res_shared = nvplib.get_all_query_pages(,1,0,0.0,182
9951582d33f57ed53e0a3ece9f1f81623faba032,# We cannot unfortunately use just a single query because tags,1,0,0.0,183
9951582d33f57ed53e0a3ece9f1f81623faba032,# Issue a second query for fetching shared networks.,1,0,0.0,184
9951582d33f57ed53e0a3ece9f1f81623faba032,"(ls['uuid'], ls) for ls in res))",1,0,0.0,185
9951582d33f57ed53e0a3ece9f1f81623faba032,nvp_lswitches.update(dict(,1,0,0.0,186
9951582d33f57ed53e0a3ece9f1f81623faba032,"lswitch_url_path_1, c)",1,0,0.0,187
9951582d33f57ed53e0a3ece9f1f81623faba032,res = nvplib.get_all_query_pages(,1,0,0.0,188
9951582d33f57ed53e0a3ece9f1f81623faba032,"lswitches = nvplib.get_lswitches(cluster, id)",1,0,0.0,189
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = self._find_target_cluster(network),1,0,0.0,190
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.debug(_(""Returning pairs for network: %s""), pairs)",1,0,0.0,191
9951582d33f57ed53e0a3ece9f1f81623faba032,raise q_exc.NetworkNotFound(net_id=netw_id),1,0,0.0,192
9951582d33f57ed53e0a3ece9f1f81623faba032,"pairs.append((c, lswitches))",1,0,0.0,193
9951582d33f57ed53e0a3ece9f1f81623faba032,continue,1,0,0.0,194
9951582d33f57ed53e0a3ece9f1f81623faba032,except q_exc.NetworkNotFound:,1,0,0.0,195
9951582d33f57ed53e0a3ece9f1f81623faba032,lswitches.extend([ls['uuid'] for ls in results]),1,0,0.0,196
9951582d33f57ed53e0a3ece9f1f81623faba032,"lswitch_url_path_2, c)",1,0,0.0,197
9951582d33f57ed53e0a3ece9f1f81623faba032,"(ls['uuid'], ls) for ls in res_shared))",1,0,0.0,198
9951582d33f57ed53e0a3ece9f1f81623faba032,lport_query_path = (,1,0,0.0,199
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_lports[tag[""tag""]] = port",1,0,0.0,200
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = self._find_target_cluster(router),1,0,0.0,201
9951582d33f57ed53e0a3ece9f1f81623faba032,"""cluster %(cluster)s""),",1,0,0.0,202
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_id = self._nvp_get_port_id(context, self.default_cluster,",1,0,0.0,203
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.default_cluster, ret_port['network_id'], nvp_port_id)",1,0,0.0,204
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_port(self.default_cluster,",1,0,0.0,205
9951582d33f57ed53e0a3ece9f1f81623faba032,"context, self.default_cluster, ret_port)",1,0,0.0,206
9951582d33f57ed53e0a3ece9f1f81623faba032,"for tag in port[""tags""]:",1,0,0.0,207
9951582d33f57ed53e0a3ece9f1f81623faba032,"""/ws.v1/lswitch/%s/lport?fields=%s&%s%stag_scope=q_port_id""",1,0,0.0,208
9951582d33f57ed53e0a3ece9f1f81623faba032,for port in ports:,1,0,0.0,209
9951582d33f57ed53e0a3ece9f1f81623faba032,ports = None,1,0,0.0,210
9951582d33f57ed53e0a3ece9f1f81623faba032,except q_exc.NotFound:,1,0,0.0,211
9951582d33f57ed53e0a3ece9f1f81623faba032,"ports = nvplib.get_all_query_pages(lport_query_path, c)",1,0,0.0,212
9951582d33f57ed53e0a3ece9f1f81623faba032,"(lswitch, lport_fields_str, vm_filter, tenant_filter))",1,0,0.0,213
9951582d33f57ed53e0a3ece9f1f81623faba032,"""&relations=LogicalPortStatus"" %",1,0,0.0,214
9951582d33f57ed53e0a3ece9f1f81623faba032,"{'ctrl': ctrl_conn,",1,0,0.0,215
9951582d33f57ed53e0a3ece9f1f81623faba032,'nvp_cluster_uuid':,1,0,0.0,216
9951582d33f57ed53e0a3ece9f1f81623faba032,except Exception:,1,0,0.0,217
9951582d33f57ed53e0a3ece9f1f81623faba032,"""/ws.v1/lswitch/%s/lport?fields=%s&%s%stag_scope=q_port_id""",0,0,0.0,218
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_lswitches.update(dict((ls['uuid'], ls) for ls in res_shared))",0,0,0.0,219
9951582d33f57ed53e0a3ece9f1f81623faba032,self.cluster),0,0,0.0,220
9951582d33f57ed53e0a3ece9f1f81623faba032,"res_shared = nvplib.get_all_query_pages(lswitch_url_path_2,",0,0,0.0,221
9951582d33f57ed53e0a3ece9f1f81623faba032,# We cannot unfortunately use just a single query because tags,0,0,0.0,222
9951582d33f57ed53e0a3ece9f1f81623faba032,# Issue a second query for fetching shared networks.,0,0,0.0,223
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_lswitches.update(dict((ls['uuid'], ls) for ls in res))",0,0,0.0,224
9951582d33f57ed53e0a3ece9f1f81623faba032,"res = nvplib.get_all_query_pages(lswitch_url_path_1, self.cluster)",0,0,0.0,225
9951582d33f57ed53e0a3ece9f1f81623faba032,"lswitches = nvplib.get_lswitches(self.cluster, id)",0,0,0.0,226
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_networks(self.cluster, id, lswitch_ids)",0,0,0.0,227
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.get_lswitches(self.cluster, id)]",0,0,0.0,228
9951582d33f57ed53e0a3ece9f1f81623faba032,lswitch_ids = [ls['uuid'] for ls in,0,0,0.0,229
9951582d33f57ed53e0a3ece9f1f81623faba032,"context, self.cluster, port)",0,0,0.0,230
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_binding_type, net_data.get(pnet.PHYSICAL_NETWORK),",0,0,0.0,231
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, tenant_id, net_data.get('name'),",0,0,0.0,232
9951582d33f57ed53e0a3ece9f1f81623faba032,# TODO(salvatore-orlando) find main_ls too!,0,0,0.0,233
9951582d33f57ed53e0a3ece9f1f81623faba032,lport_query_path = (,0,0,0.0,234
9951582d33f57ed53e0a3ece9f1f81623faba032,"""&relations=LogicalPortStatus"" %",0,0,0.0,235
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster.add_controller(*args),1,0,0.0,236
9951582d33f57ed53e0a3ece9f1f81623faba032,"(lswitch, lport_fields_str, vm_filter, tenant_filter))",0,0,0.0,237
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, context, lrouter['uuid'], {'fake_ext_gw': True},",0,0,0.0,238
9951582d33f57ed53e0a3ece9f1f81623faba032,self._create_and_attach_router_port(,0,0,0.0,239
9951582d33f57ed53e0a3ece9f1f81623faba032,"lrouter = nvplib.create_lrouter(self.cluster, tenant_id,",0,0,0.0,240
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, quantum_db_port['network_id'],",0,0,0.0,241
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_id = self._nvp_get_port_id(context, self.cluster,",0,0,0.0,242
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, ret_port['network_id'], nvp_port_id)",0,0,0.0,243
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_port(self.cluster,",0,0,0.0,244
9951582d33f57ed53e0a3ece9f1f81623faba032,"context, self.cluster, ret_port)",0,0,0.0,245
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_lports[tag[""tag""]] = port",0,0,0.0,246
9951582d33f57ed53e0a3ece9f1f81623faba032,"for tag in port[""tags""]:",0,0,0.0,247
9951582d33f57ed53e0a3ece9f1f81623faba032,for port in ports:,0,0,0.0,248
9951582d33f57ed53e0a3ece9f1f81623faba032,ports = None,0,0,0.0,249
9951582d33f57ed53e0a3ece9f1f81623faba032,except q_exc.NotFound:,0,0,0.0,250
9951582d33f57ed53e0a3ece9f1f81623faba032,"ports = nvplib.get_all_query_pages(lport_query_path,",0,0,0.0,251
9951582d33f57ed53e0a3ece9f1f81623faba032,try:,0,0,0.0,252
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster,",0,0,0.0,253
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster.default_l3_gw_service_uuid,",0,0,0.0,254
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id, ""SourceNatRule"",",0,0,0.0,255
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id,",0,0,0.0,256
9951582d33f57ed53e0a3ece9f1f81623faba032,"retries=cluster.retries,",0,0,0.0,257
9951582d33f57ed53e0a3ece9f1f81623faba032,"http_timeout=cluster.http_timeout,",0,0,0.0,258
9951582d33f57ed53e0a3ece9f1f81623faba032,"request_timeout=cluster.req_timeout,",0,0,0.0,259
9951582d33f57ed53e0a3ece9f1f81623faba032,"api_providers, cluster.nvp_user, cluster.nvp_password,",0,0,0.0,260
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster.api_client = NvpApiClient.NVPApiHelper(,0,0,0.0,261
9951582d33f57ed53e0a3ece9f1f81623faba032,for ctrl in cluster.nvp_controllers],0,0,0.0,262
9951582d33f57ed53e0a3ece9f1f81623faba032,api_providers = [ctrl.split(':') + [True],0,0,0.0,263
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = nvp_cluster.NVPCluster(**cluster_opts),0,0,0.0,264
9951582d33f57ed53e0a3ece9f1f81623faba032,# ### END,0,0,0.0,265
9951582d33f57ed53e0a3ece9f1f81623faba032,config.register_deprecated(cfg.CONF),0,0,0.0,266
9951582d33f57ed53e0a3ece9f1f81623faba032,# ### BEGIN,0,0,0.0,267
9951582d33f57ed53e0a3ece9f1f81623faba032,# NOTE(armando-migliaccio): remove this block once we no longer,0,0,0.0,268
9951582d33f57ed53e0a3ece9f1f81623faba032,nvp_gen_timeout):,0,0,0.0,269
9951582d33f57ed53e0a3ece9f1f81623faba032,"def create_nvp_cluster(cluster_opts, concurrent_connections,",0,0,0.0,270
9951582d33f57ed53e0a3ece9f1f81623faba032,from quantum.plugins.nicira.common import config  # noqa,0,0,0.0,271
9951582d33f57ed53e0a3ece9f1f81623faba032,"redirects=cluster.redirects,",0,0,0.0,272
9951582d33f57ed53e0a3ece9f1f81623faba032,"concurrent_connections=concurrent_connections,",0,0,0.0,273
9951582d33f57ed53e0a3ece9f1f81623faba032,nvp_gen_timeout=nvp_gen_timeout),0,0,0.0,274
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.plug_interface(self.cluster, selected_lswitch['uuid'],",0,0,0.0,275
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, context, router_id, port_data,",0,0,0.0,276
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_router_lport(self.cluster,",0,0,0.0,277
9951582d33f57ed53e0a3ece9f1f81623faba032,"lr_port = nvplib.find_router_gw_port(context, self.cluster, router_id)",0,0,0.0,278
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_peer_router_lport(self.cluster,",0,0,0.0,279
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_port(self.cluster,",0,0,0.0,280
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_port_id = self._nvp_get_port_id(context, self.cluster,",0,0,0.0,281
9951582d33f57ed53e0a3ece9f1f81623faba032,"lport = self._nvp_create_port_helper(self.cluster,",0,0,0.0,282
9951582d33f57ed53e0a3ece9f1f81623faba032,self.nvp_opts = cfg.CONF.NVP,0,0,0.0,283
9951582d33f57ed53e0a3ece9f1f81623faba032,allow_extra_lswitches),0,0,0.0,284
9951582d33f57ed53e0a3ece9f1f81623faba032,"network_binding, max_ports,",0,0,0.0,285
9951582d33f57ed53e0a3ece9f1f81623faba032,def_l2_gw_uuid = self.cluster.default_l2_gw_service_uuid,0,0,0.0,286
9951582d33f57ed53e0a3ece9f1f81623faba032,self.nvp_opts.nvp_gen_timeout),0,0,0.0,287
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.nvp_opts.concurrent_connections,",0,0,0.0,288
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster = create_nvp_cluster(cfg.CONF,",0,0,0.0,289
9951582d33f57ed53e0a3ece9f1f81623faba032,"""L3GatewayAttachment"", self.cluster.default_l3_gw_service_uuid)",0,0,0.0,290
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_lrouter(self.cluster, id,",0,0,0.0,291
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_lrouter(self.cluster, id)",0,0,0.0,292
9951582d33f57ed53e0a3ece9f1f81623faba032,clusters_options.append(,1,0,0.0,293
9951582d33f57ed53e0a3ece9f1f81623faba032,cfg.CONF.set_override(,1,0,0.0,294
9951582d33f57ed53e0a3ece9f1f81623faba032,"LOG.debug(_(""Cluster options:%s""), clusters_options)",1,0,0.0,295
9951582d33f57ed53e0a3ece9f1f81623faba032,nvp_conf[cluster_name].default_interface_name}),1,0,0.0,296
9951582d33f57ed53e0a3ece9f1f81623faba032,'default_interface_name':,1,0,0.0,297
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf[cluster_name].default_l2_gw_service_uuid,",1,0,0.0,298
9951582d33f57ed53e0a3ece9f1f81623faba032,'default_l2_gw_service_uuid':,1,0,0.0,299
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf[cluster_name].default_l3_gw_service_uuid,",1,0,0.0,300
9951582d33f57ed53e0a3ece9f1f81623faba032,'default_l3_gw_service_uuid':,1,0,0.0,301
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf[cluster_name].nvp_controller_connection,",1,0,0.0,302
9951582d33f57ed53e0a3ece9f1f81623faba032,'nvp_controller_connection':,1,0,0.0,303
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf[cluster_name].nova_zone_id,",1,0,0.0,304
9951582d33f57ed53e0a3ece9f1f81623faba032,'nova_zone_id':,1,0,0.0,305
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf[cluster_name].nvp_cluster_uuid,",1,0,0.0,306
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf[cluster_name].default_tz_uuid,",1,0,0.0,307
9951582d33f57ed53e0a3ece9f1f81623faba032,'default_tz_uuid':,1,0,0.0,308
9951582d33f57ed53e0a3ece9f1f81623faba032,"'api_extensions_path',",1,0,0.0,309
9951582d33f57ed53e0a3ece9f1f81623faba032,'quantum/plugins/nicira/extensions'),1,0,0.0,310
9951582d33f57ed53e0a3ece9f1f81623faba032,"def parse_clusters_opts(clusters_opts, concurrent_connections,",1,0,0.0,311
9951582d33f57ed53e0a3ece9f1f81623faba032,args = ctrl_conn.split(':'),1,0,0.0,312
9951582d33f57ed53e0a3ece9f1f81623faba032,c_opts['default_interface_name']]),1,0,0.0,313
9951582d33f57ed53e0a3ece9f1f81623faba032,"c_opts['default_l2_gw_service_uuid'],",1,0,0.0,314
9951582d33f57ed53e0a3ece9f1f81623faba032,"c_opts['default_l3_gw_service_uuid'],",1,0,0.0,315
9951582d33f57ed53e0a3ece9f1f81623faba032,"c_opts['nova_zone_id'],",1,0,0.0,316
9951582d33f57ed53e0a3ece9f1f81623faba032,"c_opts['nvp_cluster_uuid'],",1,0,0.0,317
9951582d33f57ed53e0a3ece9f1f81623faba032,"args.extend([c_opts['default_tz_uuid'],",1,0,0.0,318
9951582d33f57ed53e0a3ece9f1f81623faba032,for ctrl_conn in c_opts['nvp_controller_connection']:,1,0,0.0,319
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_gen_timeout, default_cluster_name):",1,0,0.0,320
9951582d33f57ed53e0a3ece9f1f81623faba032,try:,1,0,0.0,321
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster = nvp_cluster.NVPCluster(c_opts['name']),1,0,0.0,322
9951582d33f57ed53e0a3ece9f1f81623faba032,for c_opts in clusters_opts:,1,0,0.0,323
9951582d33f57ed53e0a3ece9f1f81623faba032,first_cluster = None,1,0,0.0,324
9951582d33f57ed53e0a3ece9f1f81623faba032,clusters = {},1,0,0.0,325
9951582d33f57ed53e0a3ece9f1f81623faba032,# cluster assignment,1,0,0.0,326
9951582d33f57ed53e0a3ece9f1f81623faba032,"{'name': cluster_name,",1,0,0.0,327
9951582d33f57ed53e0a3ece9f1f81623faba032,for cluster_name in cluster_names:,1,0,0.0,328
9951582d33f57ed53e0a3ece9f1f81623faba032,"lrouter = nvplib.get_lrouter(self.cluster, id)",0,0,0.0,329
9951582d33f57ed53e0a3ece9f1f81623faba032,clusters_options = [],1,0,0.0,330
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_res = nvplib.create_l2_gw_service(self.cluster, tenant_id,",0,0,0.0,331
9951582d33f57ed53e0a3ece9f1f81623faba032,device['interface_name'] = self.cluster.default_interface_name,0,0,0.0,332
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id, floating_ip, floating_ip,",0,0,0.0,333
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id, internal_ip,",0,0,0.0,334
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_lrouter_port_ips(self.cluster,",0,0,0.0,335
9951582d33f57ed53e0a3ece9f1f81623faba032,"context, self.cluster, router_id)['uuid']",0,0,0.0,336
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id, ""DestinationNatRule"",",0,0,0.0,337
9951582d33f57ed53e0a3ece9f1f81623faba032,"router_id, lrouter_port_id)",0,0,0.0,338
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_router_lport(self.cluster,",0,0,0.0,339
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id, ""NoSourceNatRule"",",0,0,0.0,340
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, '*', relations=""LogicalPortAttachment"",",0,0,0.0,341
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, router_id, snat_ip, snat_ip,",0,0,0.0,342
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, context, router_id, port,",0,0,0.0,343
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, '*',",0,0,0.0,344
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_lrouters = nvplib.get_lrouters(self.cluster,",0,0,0.0,345
9951582d33f57ed53e0a3ece9f1f81623faba032,"gw_data['name'], devices)",0,0,0.0,346
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_l2_gw_service(self.cluster, id)",0,0,0.0,347
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_secgroup = nvplib.create_security_profile(self.cluster,",0,0,0.0,348
9951582d33f57ed53e0a3ece9f1f81623faba032,":returns: A tuple: (clusters, plugin_config). 'clusters' is a list of",1,0,0.0,349
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvp_conf.log_opt_values(LOG, logging.DEBUG)",1,0,0.0,350
9951582d33f57ed53e0a3ece9f1f81623faba032,cluster_names = config.register_cluster_groups(nvp_conf),1,0,0.0,351
9951582d33f57ed53e0a3ece9f1f81623faba032,nvp_conf = config.ClusterConfigOptions(cfg.CONF),1,0,0.0,352
9951582d33f57ed53e0a3ece9f1f81623faba032,"""""""",1,0,0.0,353
9951582d33f57ed53e0a3ece9f1f81623faba032,parameters (currently only 'max_lp_per_bridged_ls').,1,0,0.0,354
9951582d33f57ed53e0a3ece9f1f81623faba032,"NVPCluster objects, 'plugin_config' is a dictionary with plugin",1,0,0.0,355
9951582d33f57ed53e0a3ece9f1f81623faba032,:param config: a ConfigParser() object encapsulating nvp.ini.,1,0,0.0,356
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_security_profile(self.cluster,",0,0,0.0,357
9951582d33f57ed53e0a3ece9f1f81623faba032,def parse_config():,1,0,0.0,358
9951582d33f57ed53e0a3ece9f1f81623faba032,from quantum.plugins.nicira.common import config,1,0,0.0,359
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_lqueue(self.cluster, id)",0,0,0.0,360
9951582d33f57ed53e0a3ece9f1f81623faba032,"q['id'] = nvplib.create_lqueue(self.cluster,",0,0,0.0,361
9951582d33f57ed53e0a3ece9f1f81623faba032,"self.cluster, sgid, current_rules)",0,0,0.0,362
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.update_security_group_rules(self.cluster,",0,0,0.0,363
9951582d33f57ed53e0a3ece9f1f81623faba032,"nvplib.delete_lqueue(self.default_cluster, id)",1,0,0.0,364
