commit_id,line,line_level_label,count,line_score,row
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"# Second, try to match extension method in order of plugin list",1,5,1.0,1
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._update('routers', r['router']['id'],",1,4,0.8,2
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,If any route cannot reach any subnet CIDR from any interface or the,0,4,0.8,3
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#    License for the specific language governing permissions and limitations,0,4,0.8,4
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#    not use this file except in compliance with the License. You may obtain,0,4,0.8,5
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = [{'destination': '135.207.0.0/16', 'nexthop': '10.0.1.3'}]",0,4,0.8,6
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = [{'destination': '135.207.0.0/16', 'nexthop': '10.0.1.3'}]",1,4,0.8,7
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._update('routers', r['router']['id'],",0,4,0.8,8
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._update('routers', r['router']['id'],",1,4,0.8,9
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return [self._make_router_dict(c, fields) for c in collection]",1,3,0.6000000000000001,10
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for method_name, flavor in extension_list:",1,3,0.6000000000000001,11
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# The hooks are applied for each target plugin instance when,1,3,0.6000000000000001,12
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# calling the base class to get networks/ports so that only records,1,3,0.6000000000000001,13
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# which belong to the plugin are selected.,1,3,0.6000000000000001,14
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"# At first,  try to pickup extension command from extension_map",1,3,0.6000000000000001,15
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for flavor, plugin in self.plugins.items():",1,3,0.6000000000000001,16
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"# if no plugin support the method, then raise",1,3,0.6000000000000001,17
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for key, value in filters.iteritems():",1,3,0.6000000000000001,18
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#    a copy of the License at,0,3,0.6000000000000001,19
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for router in routers],1,3,0.6000000000000001,20
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = [{'destination': '135.207.0.0/16',",0,3,0.6000000000000001,21
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = [{'destination': '135.207.0.0/16',",1,3,0.6000000000000001,22
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# NOTE(yamamoto): the extra_routes argument is either object or db row,0,3,0.6000000000000001,23
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# loading the plugin instance if rpc_flavor is specified.,1,3,0.6000000000000001,24
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.conf.db import extraroute_db,0,3,0.6000000000000001,25
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""""""Validate a router routes with its interface subnets CIDRs and IPs",0,3,0.6000000000000001,26
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for ip in port['fixed_ips']:,0,3,0.6000000000000001,27
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for ip in port['fixed_ips']:,1,3,0.6000000000000001,28
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# This enforces the plugin specified by rpc_flavor is only,1,3,0.6000000000000001,29
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,3,0.6000000000000001,30
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.supported_extension_aliases = ['flavor', 'external-net']",1,3,0.6000000000000001,31
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_LE('RuntimeError in obtaining router list ',0,3,0.6000000000000001,32
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"message = _(""Failed to add flavor binding"")",1,3,0.6000000000000001,33
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.db import securitygroups_rpc_base as sg_db_rpc,0,3,0.6000000000000001,34
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.db import agentschedulers_db,0,3,0.6000000000000001,35
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = [{'destination': '135.207.0.0/16',",0,3,0.6000000000000001,36
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = [{'destination': '135.207.0.0/16',",1,3,0.6000000000000001,37
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for ip in port['fixed_ips']:,0,3,0.6000000000000001,38
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for route in query:,0,3,0.6000000000000001,39
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for ip in port['fixed_ips']],1,3,0.6000000000000001,40
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for ip in port['fixed_ips']:,1,3,0.6000000000000001,41
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return [self._fields(port, fields) for port in ports]",0,3,0.6000000000000001,42
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Got router removed from agent :%r', payload)",0,3,0.6000000000000001,43
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"msg = _(""Failed to fetch router information for '%s'"")",1,3,0.6000000000000001,44
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"msg = _LE(""Failed to fetch router information for '%s'"")",0,3,0.6000000000000001,45
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.db import extraroute_db,1,3,0.6000000000000001,46
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron import context as neutron_context,1,3,0.6000000000000001,47
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.extensions import flavor as ext_flavor,1,3,0.6000000000000001,48
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Got router removed from agent :%r'), payload)",1,3,0.6000000000000001,49
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_('RuntimeError in obtaining router list ',1,3,0.6000000000000001,50
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.plugins.metaplugin.common import config  # noqa,1,3,0.6000000000000001,51
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _get_plugin_by_network_id(self, context, network_id):",1,2,0.4,52
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor = self._get_flavor_by_network_id(context, network_id)",1,2,0.4,53
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,context = neutron_context.get_admin_context(),1,2,0.4,54
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def create_port(self, context, port):",1,2,0.4,55
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,p = port['port'],1,2,0.4,56
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"plugin = self._get_plugin_by_network_id(context, p['network_id'])",1,2,0.4,57
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def update_port(self, context, id, port):",1,2,0.4,58
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"plugin = self._get_plugin_by_network_id(context,",1,2,0.4,59
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def delete_port(self, context, id, l3_port_check=True):",1,2,0.4,60
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,s = subnet['subnet'],1,2,0.4,61
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_port(self, context, id, fields=None):",1,2,0.4,62
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_ports(self, context, filters=None, fields=None):",1,2,0.4,63
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def create_subnet(self, context, subnet):",1,2,0.4,64
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def update_subnet(self, context, id, subnet):",1,2,0.4,65
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"s = self.get_subnet(context, id)",1,2,0.4,66
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def delete_subnet(self, context, id):",1,2,0.4,67
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _extend_router_dict(self, context, router):",1,2,0.4,68
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _get_flavor_by_network_id(self, context, network_id):",1,2,0.4,69
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor = self._get_flavor_by_router_id(context, router['id'])",1,2,0.4,70
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _get_flavor_by_router_id(self, context, router_id):",1,2,0.4,71
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Created network: %(net_id)s with flavor """,1,2,0.4,72
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,net[ext_flavor.FLAVOR_NETWORK] = flavor,1,2,0.4,73
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for net in plugin_nets:,1,2,0.4,74
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def create_router(self, context, router):",1,2,0.4,75
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if key in self.extension_map:,1,2,0.4,76
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,flavor = self.extension_map[key],1,2,0.4,77
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin = self._get_plugin(flavor),1,2,0.4,78
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _extend_network_dict(self, context, network):",1,2,0.4,79
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor = self._get_flavor_by_network_id(context, network['id'])",1,2,0.4,80
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,network[ext_flavor.FLAVOR_NETWORK] = flavor,1,2,0.4,81
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def create_network(self, context, network):",1,2,0.4,82
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,flavor = n.get(ext_flavor.FLAVOR_NETWORK),1,2,0.4,83
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,flavor = self.default_flavor,1,2,0.4,84
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def update_network(self, context, id, network):",1,2,0.4,85
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor = meta_db_v2.get_flavor_by_network(context.session, id)",1,2,0.4,86
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def delete_network(self, context, id):",1,2,0.4,87
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_network(self, context, id, fields=None):",1,2,0.4,88
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,net['id'] = id,1,2,0.4,89
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_networks(self, context, filters=None, fields=None):",1,2,0.4,90
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,flavor not in filters[ext_flavor.FLAVOR_NETWORK]):,1,2,0.4,91
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,router[ext_flavor.FLAVOR_ROUTER] = flavor,1,2,0.4,92
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._show('routers', r['router']['id'])",1,2,0.4,93
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,r = router['router'],1,2,0.4,94
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#    under the License.,0,2,0.4,95
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes1 = [{'destination': '135.207.0.0/16',",1,2,0.4,96
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes2 = [{'destination': '12.0.0.0/8',",1,2,0.4,97
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if flavor not in self.plugins:,1,2,0.4,98
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return [{'destination': str(route['destination']),",0,2,0.4,99
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return [{'destination': route['destination'],",1,2,0.4,100
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,2,0.4,101
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"#    Unless required by applicable law or agreed to in writing, software",0,2,0.4,102
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,2,0.4,103
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo_config import cfg,0,2,0.4,104
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,flavor = r.get(ext_flavor.FLAVOR_ROUTER),1,2,0.4,105
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron._i18n import _,0,2,0.4,106
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# TODO(nati): use quota framework when it support quota for attributes,0,2,0.4,107
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _validate_routes(self, context, router_id, routes, cidrs=None,",0,2,0.4,108
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"route nethop match any interface IP address, this route is invalid.",0,2,0.4,109
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,:param routes: router routes (list of dictionaries),0,2,0.4,110
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for port in ports:,0,2,0.4,111
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _validate_routes(self, context,",1,2,0.4,112
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for port in ports:,1,2,0.4,113
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._show('routers', r['router']['id'])",0,2,0.4,114
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes2 = [{'destination': '12.0.0.0/8',",0,2,0.4,115
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes1 = [{'destination': '135.207.0.0/16',",0,2,0.4,116
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"subnet = self._core_plugin.get_subnet(context, subnet_id)",0,2,0.4,117
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,flavor = self.default_l3_flavor,1,2,0.4,118
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin = self._get_l3_plugin(flavor),1,2,0.4,119
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Created router: %(router_id)s with flavor """,1,2,0.4,120
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def update_router(self, context, id, router):",1,2,0.4,121
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor = meta_db_v2.get_flavor_by_router(context.session, id)",1,2,0.4,122
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def delete_router(self, context, id):",1,2,0.4,123
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_router(self, context, id, fields=None):",1,2,0.4,124
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"router = plugin.get_router(context, id, fields)",1,2,0.4,125
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return router,1,2,0.4,126
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_routers_with_flavor(self, context, filters=None,",1,2,0.4,127
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_routers(self, context, filters=None, fields=None):",1,2,0.4,128
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routers = self.get_routers_with_flavor(context, filters,",1,2,0.4,129
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_router(self, context, id, fields=None):",1,2,0.4,130
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"router = super(ExtraRoute_dbonly_mixin, self).get_router(",1,2,0.4,131
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_routers(self, context, filters=None, fields=None,",1,2,0.4,132
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routers = super(ExtraRoute_dbonly_mixin, self).get_routers(",1,2,0.4,133
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return routers,1,2,0.4,134
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if flavor not in self.l3_plugins:,1,2,0.4,135
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return router,1,2,0.4,136
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# for running whole unit tests.,1,2,0.4,137
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for keyvalue in string.split(','):",0,2,0.4,138
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._show('routers', r['router']['id'])",1,2,0.4,139
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._router_interface_action('add',",1,2,0.4,140
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._update('routers', r['router']['id'],",1,2,0.4,141
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_orig = [{'destination': '135.207.0.0/16',",1,2,0.4,142
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_left = [{'destination': '135.207.0.0/16',",1,2,0.4,143
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes = self._get_extra_routes_by_router_id(context, id)",0,2,0.4,144
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,router_updated['routes'] = routes,0,2,0.4,145
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,query = query.filter_by(router_id=id),0,2,0.4,146
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for keyvalue in string.split(',', 1):",1,2,0.4,147
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_orig = [{'destination': '135.207.0.0/16',",0,2,0.4,148
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.common import constants,0,2,0.4,149
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if nexthop in ips:,0,2,0.4,150
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for port in ports:,0,2,0.4,151
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _get_extra_routes_dict_by_router_id(self, context, id):",0,2,0.4,152
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,query = context.session.query(RouterRoute),0,2,0.4,153
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,query = query.filter_by(router_id=id),0,2,0.4,154
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes = [],0,2,0.4,155
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_dict[(route['destination'], route['nexthop'])] = route",0,2,0.4,156
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_left = [{'destination': '135.207.0.0/16',",0,2,0.4,157
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"None, r['router']['id'], [])",0,2,0.4,158
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for port in ports:,1,2,0.4,159
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_ports(self, context, filters=None, fields=None):",0,2,0.4,160
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.extension_map[method_name] = flavor,1,2,0.4,161
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.agent import securitygroups_rpc as sg_rpc,0,2,0.4,162
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.openstack.common import cfg,0,2,0.4,163
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.openstack.common.rpc import proxy,0,2,0.4,164
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def port_update(self, context, port):",0,2,0.4,165
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"supported_extension_aliases = [""router"", ""extraroute"", ""security-group""]",0,2,0.4,166
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,session = context.session,0,2,0.4,167
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_port(self, context, id, fields=None):",0,2,0.4,168
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for port in ports:,0,2,0.4,169
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"body = self._routes_update_prepare(r['router']['id'],",0,2,0.4,170
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"supported_extension_aliases = [""router"", ""extraroute""]",1,2,0.4,171
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,session = context.session,1,2,0.4,172
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.api.rpc.agentnotifiers import dhcp_rpc_agent_api,0,2,0.4,173
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.api.rpc.agentnotifiers import l3_rpc_agent_api,0,2,0.4,174
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.openstack.common import importutils,0,2,0.4,175
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""security-group"", ""agent"", ""extraroute"",",0,2,0.4,176
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""security-group"", ""agent"", ""extraroute""]",1,2,0.4,177
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._update('routers', router_id, {'router': {'routes': routes}})",0,2,0.4,178
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _validate_routes_nexthop(self, context, ports, routes, nexthop):",1,2,0.4,179
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from quantum.extensions import securitygroup as ext_sg,0,2,0.4,180
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"from neutron.openstack.common.gettextutils import _LE, _LI, _LW",0,2,0.4,181
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return query,1,2,0.4,182
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.db import db_base_plugin_v2,1,2,0.4,183
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.db import external_net_db,1,2,0.4,184
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.db import l3_db,1,2,0.4,185
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.db import models_v2,1,2,0.4,186
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.i18n import _LE,1,2,0.4,187
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.openstack.common import log as logging,1,2,0.4,188
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.plugins.metaplugin import meta_db_v2,1,2,0.4,189
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.plugins.metaplugin import meta_models_v2,1,2,0.4,190
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"message = _(""Flavor %(flavor)s could not be found"")",1,2,0.4,191
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.common import exceptions as exc,1,2,0.4,192
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.supported_extension_aliases += cfg_aliases,1,2,0.4,193
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return True,1,2,0.4,194
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for flavor, plugin_provider in plugin_list:",1,2,0.4,195
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# Rename topic used by a plugin other than rpc_flavor during,1,2,0.4,196
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"for flavor, plugin_provider in l3_plugin_list:",1,2,0.4,197
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if flavor in self.plugins:,1,2,0.4,198
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# For l3 only plugin,1,2,0.4,199
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,msg = _LE('Router id is required if not using namespaces.'),0,2,0.4,200
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from neutron.common import topics,1,2,0.4,201
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.supported_extension_aliases += ['router', 'ext-gw-mode',",1,2,0.4,202
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo_utils import importutils,1,2,0.4,203
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Got router deleted notification for %s'), router_id)",1,2,0.4,204
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo_config import cfg,1,2,0.4,205
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.warn(_LW(""Info for router %s were not found. """,0,2,0.4,206
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Got router deleted notification for %s', router_id)",0,2,0.4,207
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Got router added to agent :%r', payload)",0,2,0.4,208
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,""" State report for this agent will be disabled.""))",0,2,0.4,209
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"from neutron.openstack.common.gettextutils import _LE, _LW",1,2,0.4,210
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_('Failed to destroy stale router namespace ',1,2,0.4,211
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.warn(_(""Info for router %s were not found. """,1,2,0.4,212
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,msg = _('Router id is required if not using namespaces.'),1,2,0.4,213
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Got router added to agent :%r'), payload)",1,2,0.4,214
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,""" State report for this agent will be disabled.""))",1,2,0.4,215
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo_config import cfg,0,2,0.4,216
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_LE('Failed to destroy stale router namespace ',0,2,0.4,217
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo.config import cfg,1,2,0.4,218
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo_config import cfg,0,2,0.4,219
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from oslo.config import cfg,1,2,0.4,220
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,from metaplugin.plugin import meta_neutron_plugin,0,2,0.4,221
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"# to handle RPC, rpc_flavor must be specified.",1,1,0.2,222
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return net,1,1,0.2,223
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_LE('Failed to add flavor bindings')),1,1,0.2,224
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"net = plugin.create_network(context, network)",1,1,0.2,225
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if str(flavor) not in self.plugins:,1,1,0.2,226
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,n = network['network'],1,1,0.2,227
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return (self.rpc_flavor and,1,1,0.2,228
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return self.l3_plugins[flavor],1,1,0.2,229
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#NOTE: If a plugin which supports multiple RPC workers is desired,1,1,0.2,230
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def rpc_workers_supported(self):,1,1,0.2,231
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return self.plugins[self.rpc_flavor].start_rpc_listeners(),1,1,0.2,232
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def start_rpc_listeners(self):,1,1,0.2,233
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return getattr(plugin, key)",1,1,0.2,234
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"if plugin and hasattr(plugin, key):",1,1,0.2,235
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def __getattr__(self, key):",1,1,0.2,236
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.delete_network(context, id)",1,1,0.2,237
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _get_l3_plugin(self, flavor):",1,1,0.2,238
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return self.plugins[flavor],1,1,0.2,239
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.update_network(context, id, network)",1,1,0.2,240
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin_filters = filters.copy(),1,1,0.2,241
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"net = plugin.get_network(context, id, fields)",1,1,0.2,242
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if not fields or ext_flavor.FLAVOR_NETWORK in fields:,1,1,0.2,243
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.delete_port(context, id, l3_port_check)",1,1,0.2,244
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _get_plugin(self, flavor):",1,1,0.2,245
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port_in_db = self._get_port(context, id)",1,1,0.2,246
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.create_port(context, port)",1,1,0.2,247
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if 'network_id' not in p:,1,1,0.2,248
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return self._get_plugin(flavor),1,1,0.2,249
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return meta_db_v2.get_flavor_by_router(context.session, router_id)",1,1,0.2,250
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return meta_db_v2.get_flavor_by_network(context.session, network_id)",1,1,0.2,251
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return nets,1,1,0.2,252
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"plugin_nets = plugin.get_networks(context, plugin_filters, fields)",1,1,0.2,253
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin_filters[ext_flavor.FLAVOR_NETWORK] = [flavor],1,1,0.2,254
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin_filters = {},1,1,0.2,255
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# plugin_filters.,1,1,0.2,256
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#NOTE: copy each time since a target plugin may modify,1,1,0.2,257
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if (filters and ext_flavor.FLAVOR_NETWORK in filters and,1,1,0.2,258
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,nets = [],1,1,0.2,259
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if fields and 'id' not in fields:,1,1,0.2,260
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.update_port(context, id, port)",1,1,0.2,261
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.l3_plugins[flavor] = self.plugins[flavor],1,1,0.2,262
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return plugin_klass(),1,1,0.2,263
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin_list = [plugin_set.split(':'),1,1,0.2,264
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.plugins[flavor] = self._load_plugin(plugin_provider),1,1,0.2,265
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,topics.PLUGIN = topic_fake,1,1,0.2,266
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# bad effect.,1,1,0.2,267
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,topic_fake = topic_save + '-metaplugin',1,1,0.2,268
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,topic_save = topics.PLUGIN,1,1,0.2,269
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.rpc_flavor = cfg.CONF.META.rpc_flavor,1,1,0.2,270
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"in cfg.CONF.META.plugin_list.split(',')]",1,1,0.2,271
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for plugin_set,1,1,0.2,272
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.plugins = {},1,1,0.2,273
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin_klass = importutils.import_class(plugin_provider),1,1,0.2,274
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cfg._is_opt_registered = _is_opt_registered,1,1,0.2,275
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return False,1,1,0.2,276
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if opt.dest in opts:,1,1,0.2,277
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _is_opt_registered(opts, opt):",1,1,0.2,278
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# Ignore config option overapping,1,1,0.2,279
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cfg_aliases = cfg.CONF.META.supported_extension_aliases.split(',')",1,1,0.2,280
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# NeutronManager.get_plugin()._make_port_dict is called.,1,1,0.2,281
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def __init__(self, configfile=None):",1,1,0.2,282
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,topics.PLUGIN = topic_save,1,1,0.2,283
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.l3_plugins = {},1,1,0.2,284
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,l3_plugin_list = [plugin_set.split(':'),1,1,0.2,285
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"in cfg.CONF.META.l3_plugin_list.split(',')]",1,1,0.2,286
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _load_plugin(self, plugin_provider):",1,1,0.2,287
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"None,",1,1,0.2,288
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# registration when merely importing this file. This is only,1,1,0.2,289
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# Register hooks.,1,1,0.2,290
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"in cfg.CONF.META.extension_map.split(',')]",1,1,0.2,291
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,for method_set,1,1,0.2,292
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,extension_list = [method_set.split(':'),1,1,0.2,293
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.extension_map = {},1,1,0.2,294
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise exc.Invalid(_('rpc_flavor %s is not plugin list') %,1,1,0.2,295
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if self.rpc_flavor and self.rpc_flavor not in self.plugins:,1,1,0.2,296
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise exc.Invalid(_('default_l3_flavor %s is not plugin list'),1,1,0.2,297
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if self.default_l3_flavor not in self.l3_plugins:,1,1,0.2,298
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.default_l3_flavor = cfg.CONF.META.default_l3_flavor,1,1,0.2,299
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise exc.Invalid(_('default_flavor %s is not plugin list') %,1,1,0.2,300
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if self.default_flavor not in self.plugins:,1,1,0.2,301
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.default_flavor = cfg.CONF.META.default_flavor,1,1,0.2,302
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.l3_plugins[flavor] = self._load_plugin(,1,1,0.2,303
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# This is necessary since there is a case that,1,1,0.2,304
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.port(subnet=s) as p1,\",0,1,0.2,305
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _make_port_dict(self, port):",1,1,0.2,306
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.0.3'}],1,1,0.2,307
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': route['nexthop']},1,1,0.2,308
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': str(route['nexthop'])},0,1,0.2,309
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,gw_info = body['router']['external_gateway_info'],1,1,0.2,310
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"r['router']['id'],",1,1,0.2,311
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,{'router': {'routes':,1,1,0.2,312
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.1.3'}],1,1,0.2,313
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.port(subnet=s) as p1, self.port(subnet=s) as p2:",1,1,0.2,314
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.0.4'}],1,1,0.2,315
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.subnet(cidr='10.0.1.0/24', tenant_id='notme') as subnet:",1,1,0.2,316
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': p2_ip}],0,1,0.2,317
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.subnet(cidr='10.0.1.0/24', tenant_id='notme') as ext_subnet:",1,1,0.2,318
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with self.port(subnet=s) as p:,1,1,0.2,319
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,gw_info = body['router']['external_gateway_info'],0,1,0.2,320
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"r['router']['id'],",0,1,0.2,321
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,{'router': {'routes':,0,1,0.2,322
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': next_hop}],0,1,0.2,323
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,next_hop = p['port']['fixed_ips'][0]['ip_address'],0,1,0.2,324
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with self.port(subnet=s) as p:,0,1,0.2,325
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#,0,1,0.2,326
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#         http://www.apache.org/licenses/LICENSE-2.0,0,1,0.2,327
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,EXTRA_ROUTE_OPTS = [,0,1,0.2,328
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"help=_(""Maximum number of routes per router"")),",0,1,0.2,329
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return query.filter(meta_models_v2.NetworkFlavor.flavor ==,1,1,0.2,330
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, ip['subnet_id'])['cidr'])",1,1,0.2,331
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ips = [],1,1,0.2,332
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs = [],1,1,0.2,333
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"ports = self._core_plugin.get_ports(context, filters)",1,1,0.2,334
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, ip['subnet_id'])['cidr'])",0,1,0.2,335
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"ports = self._core_plugin.get_ports(context, filters)",0,1,0.2,336
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ip_addresses = ip_addresses or [],0,1,0.2,337
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs = cidrs or [],0,1,0.2,338
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,:param ip_addresses: (optional) list of IP addresses (strings),0,1,0.2,339
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,:param cidrs: (optional) list of CIDRs (strings),0,1,0.2,340
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,:param router_id: router ID,0,1,0.2,341
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,:param context: Neutron request context,0,1,0.2,342
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"help=_(""Maximum number of routes per router"")),",1,1,0.2,343
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#TODO(nati): use quota framework when it support quota for attributes,1,1,0.2,344
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,extra_route_opts = [,1,1,0.2,345
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def register_db_extraroute_opts(conf=cfg.CONF):,0,1,0.2,346
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': p1_ip}],0,1,0.2,347
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,p2_ip = p2['port']['fixed_ips'][0]['ip_address'],0,1,0.2,348
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return plugin._make_port_dict(port),1,1,0.2,349
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if str(flavor) not in self.l3_plugins:,1,1,0.2,350
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"collection = collection.join(r_model,",1,1,0.2,351
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,r_model = meta_models_v2.RouterFlavor,1,1,0.2,352
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"collection = self._model_query(context, l3_db.Router)",1,1,0.2,353
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if not fields or ext_flavor.FLAVOR_ROUTER in fields:,1,1,0.2,354
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.delete_router(context, id)",1,1,0.2,355
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.update_router(context, id, router)",1,1,0.2,356
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return r_in_db,1,1,0.2,357
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"r_in_db = plugin.create_router(context, router)",1,1,0.2,358
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.delete_subnet(context, id)",1,1,0.2,359
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,p1_ip = p1['port']['fixed_ips'][0]['ip_address'],0,1,0.2,360
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.update_subnet(context, id, subnet)",1,1,0.2,361
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.create_subnet(context, subnet)",1,1,0.2,362
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if 'network_id' not in s:,1,1,0.2,363
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return all_ports,1,1,0.2,364
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,all_ports += ports,1,1,0.2,365
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"ports = plugin.get_ports(context, plugin_filters, fields)",1,1,0.2,366
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,all_ports = [],1,1,0.2,367
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return plugin.get_port(context, id, fields)",1,1,0.2,368
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if key == ext_flavor.FLAVOR_ROUTER:,1,1,0.2,369
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,column = meta_models_v2.RouterFlavor.flavor,1,1,0.2,370
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"column = getattr(l3_db.Router, key, None)",1,1,0.2,371
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,collection = collection.filter(column.in_(value)),1,1,0.2,372
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.subnet(cidr='10.0.1.0/24', tenant_id='notme') as subnet,\",0,1,0.2,373
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': nexthop_ip}],0,1,0.2,374
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,nexthop_ip = nexthop_port['port']['fixed_ips'][0]['ip_address'],0,1,0.2,375
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.subnet(cidr='10.0.1.0/24', tenant_id='notme') as ext_subnet,\",0,1,0.2,376
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.port(subnet=s, fixed_ips=fixed_ip_data) as p:",0,1,0.2,377
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,fixed_ip_data = [{'ip_address': '10.0.1.2'}],0,1,0.2,378
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"help=_(""Maximum number of routes per router"")),",0,1,0.2,379
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,subnet_cidr = netaddr.IPNetwork(subnet_db['cidr']),1,1,0.2,380
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"subnet_db = self._core_plugin._get_subnet(context, subnet_id)",1,1,0.2,381
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,subnet_cidr = netaddr.IPNetwork(subnet['cidr']),0,1,0.2,382
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return ""http://docs.openstack.org/ext/neutron/extraroutes/api/v1.0""",1,1,0.2,383
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def get_namespace(cls):,1,1,0.2,384
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,@classmethod,1,1,0.2,385
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, filters, fields, sorts=sorts, limit=limit,",1,1,0.2,386
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id, fields)",1,1,0.2,387
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with context.session.begin(subtransactions=True):,1,1,0.2,388
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return [self.get_router(context, router['id'],",1,1,0.2,389
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# Metaplugin  Exceptions,1,1,0.2,390
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# consumer of 'q-plugin'. It is a bit tricky but there is no,1,1,0.2,391
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if ext_flavor.FLAVOR_NETWORK in filters:,1,1,0.2,392
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'nexthop': '10.0.1.4'},",0,1,0.2,393
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"r['router']['id'],",1,1,0.2,394
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.1.3'}],0,1,0.2,395
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,{'router': {'routes': None}}),0,1,0.2,396
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"None, p['port']['id'], routes)",0,1,0.2,397
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.port(subnet=s, no_delete=True) as p:",0,1,0.2,398
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with self.subnet(cidr='10.0.1.0/24') as s:,0,1,0.2,399
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with self.router() as r:,0,1,0.2,400
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.1.5'}],0,1,0.2,401
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'nexthop': '10.0.1.3'},",0,1,0.2,402
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return port,1,1,0.2,403
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_route_clear_routes_with_None(self):,0,1,0.2,404
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"None, p['port']['id'],",0,1,0.2,405
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _routes_update_cleanup(self, port_id, subnet_id, router_id, routes):",0,1,0.2,406
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return self._show('routers', router_id)",0,1,0.2,407
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _routes_update_prepare(self, router_id, subnet_id,",0,1,0.2,408
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.l3_agent_notifier = l3_rpc_agent_api.L3AgentNotify,0,1,0.2,409
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.dhcp_agent_notifier = dhcp_rpc_agent_api.DhcpAgentNotifyAPI(),0,1,0.2,410
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.router_scheduler = importutils.import_object(,0,1,0.2,411
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"None,",1,1,0.2,412
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,p['port']['id']),1,1,0.2,413
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.1.3'}],1,1,0.2,414
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,{'router': {'routes': routes}}),1,1,0.2,415
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_add_floating_ip(self):,0,1,0.2,416
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_remove_external_gateway(self):,0,1,0.2,417
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_add_external_gateway(self):,0,1,0.2,418
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_remove_internal_network(self):,0,1,0.2,419
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_add_internal_network(self):,0,1,0.2,420
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_create(self):,0,1,0.2,421
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_router_info_create(self):,0,1,0.2,422
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.debug('Removed routes are %s' % removed),1,1,0.2,423
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.debug('Added routes are %s' % added),1,1,0.2,424
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Removed routes are %s'), removed)",0,1,0.2,425
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Added routes are %s'), added)",0,1,0.2,426
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,{'router': {'routes':,1,1,0.2,427
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': '10.0.1.5'}],1,1,0.2,428
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'nexthop': '10.0.1.4'},",1,1,0.2,429
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'nexthop': '10.0.1.3'},",1,1,0.2,430
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# clean-up,1,1,0.2,431
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,{'router': {'routes': []}}),1,1,0.2,432
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.network_scheduler = importutils.import_object(,0,1,0.2,433
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port = super(RyuQuantumPluginV2, self).update_port(context, id, port)",1,1,0.2,434
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_routing_table_updated(self):,0,1,0.2,435
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return port,0,1,0.2,436
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, network['network'])",0,1,0.2,437
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,tenant_id = self._get_tenant_id_for_create(,0,1,0.2,438
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#set up default security groups,0,1,0.2,439
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.notifier = AgentNotifierApi(topics.AGENT),0,1,0.2,440
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"extraroute_db.ExtraRoute_db_mixin,",0,1,0.2,441
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.topic_port_update = topics.get_topic_name(topic,",0,1,0.2,442
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def __init__(self, topic):",0,1,0.2,443
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,BASE_RPC_API_VERSION = '1.0',0,1,0.2,444
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,port['device'] = device,0,1,0.2,445
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return super(RyuQuantumPluginV2, self).delete_port(context, id)",1,1,0.2,446
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,port = db_api_v2.get_port_from_device(device),0,1,0.2,447
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def get_port_from_device(cls, device):",0,1,0.2,448
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,@classmethod,0,1,0.2,449
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,RPC_API_VERSION = '1.1',0,1,0.2,450
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,down_revision = '1d76643bcec4',1,1,0.2,451
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,Revises: 1d76643bcec4,1,1,0.2,452
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,down_revision = '45680af419f9',0,1,0.2,453
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _meta_flavor_filter_hook(query, filters):",1,1,0.2,454
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with session.begin(subtransactions=True):,0,1,0.2,455
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"sgids = self._get_security_groups_on_port(context, port)",0,1,0.2,456
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port = super(RyuQuantumPluginV2, self).create_port(context, port)",0,1,0.2,457
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, port['id'], sgids)",0,1,0.2,458
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port = super(RyuQuantumPluginV2, self).create_port(context, port)",1,1,0.2,459
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,RPC_API_VERSION = '1.0',1,1,0.2,460
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, filters, fields)",0,1,0.2,461
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"ports = super(RyuQuantumPluginV2, self).get_ports(",0,1,0.2,462
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return self._fields(port, fields)",0,1,0.2,463
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port = super(RyuQuantumPluginV2, self).get_port(context, id,",0,1,0.2,464
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,return updated_port,0,1,0.2,465
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, original_port, updated_port)",0,1,0.2,466
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id, port, original_port, updated_port)",0,1,0.2,467
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,need_port_update_notify = self.update_security_group_on_port(,0,1,0.2,468
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id, port)",0,1,0.2,469
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"updated_port = super(RyuQuantumPluginV2, self).update_port(",0,1,0.2,470
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id)",0,1,0.2,471
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"original_port = super(RyuQuantumPluginV2, self).get_port(",0,1,0.2,472
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,need_port_update_notify = False,0,1,0.2,473
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port = self.get_port(context, id)",0,1,0.2,474
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,with context.session.begin(subtransactions=True):,0,1,0.2,475
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_remove_floating_ip(self):,0,1,0.2,476
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, port.get(ext_sg.SECURITYGROUPS))",0,1,0.2,477
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_agent_routing_table_updated_no_namespace(self):,0,1,0.2,478
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Deleting stale internal router device: %s',",0,1,0.2,479
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Removed route entry is '%s'"", route)",0,1,0.2,480
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Added route entry is '%s'"", route)",0,1,0.2,481
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.info(_LI(""L3 agent started""))",0,1,0.2,482
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_LE(""Failed synchronizing routers due to RPC error""))",0,1,0.2,483
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Starting _sync_routers_task - fullsync:%s"",",0,1,0.2,484
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Got routers updated notification :%s', routers)",0,1,0.2,485
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.warn(_LW(""Unable to configure IP address for """,0,1,0.2,486
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Deleting stale external router device: %s',",0,1,0.2,487
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_LE(""Ignoring multiple IPs on router port %s""),",0,1,0.2,488
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cidrs += [self._core_plugin._get_subnet(context,",1,1,0.2,489
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""Skipping router removal""), router_id)",0,1,0.2,490
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,msg = _LE('An interface driver must be specified'),0,1,0.2,491
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.port(subnet=s, no_delete=True) as p:",1,1,0.2,492
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"with self.port(subnet=s, do_delete=False) as p:",0,1,0.2,493
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,del_context = context.session.query(RouterRoute),1,1,0.2,494
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,old_routes = self._get_extra_routes_by_router_id(,1,1,0.2,495
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, ports, routes, route['nexthop'])",1,1,0.2,496
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,reason=_('the nexthop is used by router')),1,1,0.2,497
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"msg = _(""Error importing interface driver """,1,1,0.2,498
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,msg = _('An interface driver must be specified'),1,1,0.2,499
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,msg = _('Failed trying to delete namespace: %s') % ns,1,1,0.2,500
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""Skipping router removal""), router_id)",1,1,0.2,501
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return query.join(meta_models_v2.NetworkFlavor,",1,1,0.2,502
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_routes_updated(self):,0,1,0.2,503
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _meta_port_model_hook(context, original_model, query):",1,1,0.2,504
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return query.outerjoin(meta_models_v2.NetworkFlavor,",1,1,0.2,505
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _meta_network_model_hook(context, original_model, query):",1,1,0.2,506
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,# Hooks used to select records which belong a target plugin.,1,1,0.2,507
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG = logging.getLogger(__name__),1,1,0.2,508
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,MetaPluginV2 = meta_neutron_plugin.MetaPluginV2,0,1,0.2,509
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_(""Removed route entry is '%s'""), route)",1,1,0.2,510
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_(""Added route entry is '%s'""), route)",1,1,0.2,511
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.info(_(""L3 agent started""))",1,1,0.2,512
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_(""Failed synchronizing routers due to RPC error""))",1,1,0.2,513
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Got routers updated notification :%s'), routers)",1,1,0.2,514
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.warn(_(""Unable to configure IP address for """,1,1,0.2,515
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Deleting stale external router device: %s'),",1,1,0.2,516
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Deleting stale internal router device: %s'),",1,1,0.2,517
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_(""Ignoring multiple IPs on router port %s""),",1,1,0.2,518
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if nexthop == ip['ip_address']:,1,1,0.2,519
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_(""Starting _sync_routers_task - fullsync:%s""),",1,1,0.2,520
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs = [],1,1,0.2,521
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentAddExternalGateway(self):,1,1,0.2,522
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testProcessRouter(self):,1,1,0.2,523
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testRoutesUpdatedNoNamespace(self):,1,1,0.2,524
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testRoutesUpdated(self):,1,1,0.2,525
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentRoutingTableUpdatedNoNameSpace(self):,1,1,0.2,526
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentRoutingTableUpdated(self):,1,1,0.2,527
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentRemoveFloatingIP(self):,1,1,0.2,528
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentAddFloatingIP(self):,1,1,0.2,529
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentRemoveExternalGateway(self):,1,1,0.2,530
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentRemoveInternalNetwork(self):,1,1,0.2,531
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testDestroyNamespace(self):,1,1,0.2,532
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentAddInternalNetwork(self):,1,1,0.2,533
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testRouterInfoCreate(self):,1,1,0.2,534
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_destroy_namespace_with_router_id(self):,0,1,0.2,535
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_destroy_namespace(self):,0,1,0.2,536
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_routers_with_admin_state_down(self):,0,1,0.2,537
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"return routes, routes_dict",0,1,0.2,538
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_routes_updated_no_namespace(self):,0,1,0.2,539
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def test_process_router(self):,0,1,0.2,540
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testRoutersWithAdminStateDown(self):,1,1,0.2,541
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testAgentCreate(self):,1,1,0.2,542
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,def testDestroyNamespaceWithRouterId(self):,1,1,0.2,543
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port_res = self._list_ports('json',",1,1,0.2,544
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"old_routes, routes_dict = self._get_extra_routes_dict_by_router_id(",0,1,0.2,545
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes_dict = {},0,1,0.2,546
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"router_updated = super(ExtraRoute_db_mixin, self).update_router(",0,1,0.2,547
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'nexthop': route['nexthop']}),0,1,0.2,548
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, ip['subnet_id'])['cidr'])",0,1,0.2,549
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ips = [],0,1,0.2,550
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,reason=_('the nexthop is used by router')),0,1,0.2,551
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"def _validate_routes_nexthop(self, cidrs, ips, routes, nexthop):",0,1,0.2,552
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs = [],0,1,0.2,553
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"DEVICE_OWNER_ROUTER_GW = ""network:router_gateway""",1,1,0.2,554
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id)",1,1,0.2,555
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id, router)",0,1,0.2,556
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,router_updated['routes'] = self._get_extra_routes_by_router_id(,1,1,0.2,557
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"router_updated = super(ExtraRoute_db_mixin, self).update_router(",1,1,0.2,558
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,port_res = self._list_ports(,0,1,0.2,559
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"context, id, router)",1,1,0.2,560
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"_meta_network_model_hook,",1,0,0.0,561
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,'extraroute'],1,0,0.0,562
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'metaplugin_port',",1,0,0.0,563
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"models_v2.Port,",1,0,0.0,564
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,_meta_flavor_filter_hook),1,0,0.0,565
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'metaplugin_net',",1,0,0.0,566
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"models_v2.Network,",1,0,0.0,567
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,db_base_plugin_v2.NeutronDbPluginV2.register_model_query_hook(,1,0,0.0,568
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,#NOTE: Doing registration here (within __init__()) is to avoid,1,0,0.0,569
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.rpc_flavor),1,0,0.0,570
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Plugin location: %s"", plugin_provider)",1,0,0.0,571
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if not cfg.CONF.META.extension_map == '':,1,0,0.0,572
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"_meta_port_model_hook,",1,0,0.0,573
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"meta_db_v2.add_network_flavor_binding(context.session,",1,0,0.0,574
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise FlavorNotFound(flavor=flavor),1,0,0.0,575
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"if hasattr(plugin, key):",1,0,0.0,576
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise AttributeError(),1,0,0.0,577
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.plugins[self.rpc_flavor].rpc_workers_supported()),1,0,0.0,578
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""%(flavor)s"", {'net_id': net['id'], 'flavor': flavor})",1,0,0.0,579
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,try:,1,0,0.0,580
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor, str(net['id']))",1,0,0.0,581
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,except Exception:,1,0,0.0,582
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"plugin.delete_network(context, net['id'])",1,0,0.0,583
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise FaildToAddFlavorBinding(),1,0,0.0,584
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Created network: %s"", net['id'])",1,0,0.0,585
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._extend_network_dict(context, net)",1,0,0.0,586
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if self.l3_plugins:,1,0,0.0,587
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,del net['id'],1,0,0.0,588
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,continue,1,0,0.0,589
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,% self.default_l3_flavor),1,0,0.0,590
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.info(_(""agent_updated by server side %s!""), payload)",1,0,0.0,591
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.default_flavor),1,0,0.0,592
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,meta_models_v2.NetworkFlavor.network_id ==,1,0,0.0,593
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_('DVR: error adding redirection logic')),1,0,0.0,594
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,nets.append(net),1,0,0.0,595
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_('DVR: removed snat failed')),1,0,0.0,596
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.error(_('Missing subnet/agent_gateway_port')),1,0,0.0,597
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_(""DVR: Failed updating arp entry""))",1,0,0.0,598
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_(""The external network bridge '%s' does not exist""),",1,0,0.0,599
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_('Processing :%r'), routers)",1,0,0.0,600
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_(""_sync_routers_task successfully completed""))",1,0,0.0,601
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_(""Failed synchronizing routers""))",1,0,0.0,602
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_(""Report state task started""))",1,0,0.0,603
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(_(""Report state task successfully completed""))",1,0,0.0,604
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.warn(_(""Neutron server does not support state report.""",1,0,0.0,605
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_(""Failed reporting state!""))",1,0,0.0,606
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,models_v2.Network.id),1,0,0.0,607
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,plugin_provider),1,0,0.0,608
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,models_v2.Port.network_id),1,0,0.0,609
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,filters[ext_flavor.FLAVOR_NETWORK][0]),1,0,0.0,610
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,class FlavorNotFound(exc.NotFound):,1,0,0.0,611
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,class FaildToAddFlavorBinding(exc.NeutronException):,1,0,0.0,612
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"class MetaPluginV2(db_base_plugin_v2.NeutronDbPluginV2,",1,0,0.0,613
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"external_net_db.External_net_db_mixin,",1,0,0.0,614
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,extraroute_db.ExtraRoute_db_mixin):,1,0,0.0,615
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"super(MetaPluginV2, self).__init__()",1,0,0.0,616
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Start initializing metaplugin"")",1,0,0.0,617
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if cfg.CONF.META.supported_extension_aliases:,1,0,0.0,618
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,else:,1,0,0.0,619
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if self.rpc_flavor and self.rpc_flavor != flavor:,1,0,0.0,620
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if cfg.CONF.META.l3_plugin_list:,1,0,0.0,621
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if filters:,1,0,0.0,622
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.assertIsNone(gw_info),0,0,0.0,623
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise exc.NotFound(),1,0,0.0,624
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,conf.register_opts(EXTRA_ROUTE_OPTS),0,0,0.0,625
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.port(subnet=subnet) as nexthop_port:,0,0,0.0,626
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.port(subnet=s) as p2:,0,0,0.0,627
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes}}),0,0,0.0,628
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(routes, body['router']['routes'])",0,0,0.0,629
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self._remove_external_gateway_from_router(,0,0,0.0,630
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,s['subnet']['network_id']),0,0,0.0,631
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes}}),1,0,0.0,632
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(routes, body['router']['routes'])",1,0,0.0,633
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self._remove_external_gateway_from_router(,1,0,0.0,634
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,s['subnet']['network_id']),1,0,0.0,635
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.assertIsNone(gw_info),1,0,0.0,636
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cfg.IntOpt('max_routes', default=30,",0,0,0.0,637
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,],0,0,0.0,638
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,extraroute_db.register_db_extraroute_opts(),0,0,0.0,639
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes),1,0,0.0,640
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cfg.IntOpt('max_routes', default=30,",1,0,0.0,641
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,],1,0,0.0,642
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cfg.CONF.register_opts(extra_route_opts),1,0,0.0,643
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ip_addresses=None):,0,0,0.0,644
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""""""",0,0,0.0,645
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if not (cidrs or ip_addresses):,0,0,0.0,646
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs.append(self._core_plugin.get_subnet(,0,0,0.0,647
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ip_addresses.append(ip['ip_address']),0,0,0.0,648
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cidrs, ip_addresses, routes, route['nexthop'])",0,0,0.0,649
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"router_id, routes):",1,0,0.0,650
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs.append(self._core_plugin.get_subnet(,1,0,0.0,651
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ips.append(ip['ip_address']),1,0,0.0,652
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_(""Failed sending gratuitous ARP: %s""), str(e))",1,0,0.0,653
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.port(subnet=ext_subnet) as nexthop_port:,0,0,0.0,654
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'],",1,0,0.0,655
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,port_in_db['network_id']),1,0,0.0,656
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,None),1,0,0.0,657
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,port['network_id']),1,0,0.0,658
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,s['network_id']),1,0,0.0,659
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""%(flavor)s"",",1,0,0.0,660
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"{'router_id': r_in_db['id'], 'flavor': flavor})",1,0,0.0,661
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"meta_db_v2.add_router_flavor_binding(context.session,",1,0,0.0,662
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"flavor, str(r_in_db['id']))",1,0,0.0,663
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"plugin.delete_router(context, r_in_db['id'])",1,0,0.0,664
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Created router: %s"", r_in_db['id'])",1,0,0.0,665
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._extend_router_dict(context, r_in_db)",1,0,0.0,666
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._extend_router_dict(context, router)",1,0,0.0,667
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,fields=None):,1,0,0.0,668
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,l3_db.Router.id == r_model.router_id),1,0,0.0,669
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if column:,1,0,0.0,670
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,fields),1,0,0.0,671
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(len(port_list['ports']), 1)",1,0,0.0,672
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"sorts=None, limit=None, marker=None,",1,0,0.0,673
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,page_reverse=False):,1,0,0.0,674
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"marker=marker, page_reverse=page_reverse)",1,0,0.0,675
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs.append(self._core_plugin.get_subnet(,0,0,0.0,676
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs.append(self._core_plugin._get_subnet(,1,0,0.0,677
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"help=_(""Maximum number of routes"")),",1,0,0.0,678
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(routes, body['router']['routes'])",0,0,0.0,679
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(routes1, body['router']['routes'])",0,0,0.0,680
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(routes2, body['router']['routes'])",0,0,0.0,681
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(1, len(port_list['ports']))",0,0,0.0,682
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'], routes)",1,0,0.0,683
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'], routes1)",1,0,0.0,684
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'], routes2)",1,0,0.0,685
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.error(_('DVR: no map match_port found!')),1,0,0.0,686
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,agentschedulers_db.AgentSchedulerDbMixin):,0,0,0.0,687
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""floating IP: %s""), fip['id'])",1,0,0.0,688
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,agents_db.AgentDbMixin):,1,0,0.0,689
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,extraroute_db.ExtraRoute_db_mixin):,1,0,0.0,690
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.disassociate_floatingips(context, id)",1,0,0.0,691
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'],",0,0,0.0,692
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes),0,0,0.0,693
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(net_id, s['subnet']['network_id'])",0,0,0.0,694
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(gw_info, None)",0,0,0.0,695
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEquals(body['router']['routes'],",1,0,0.0,696
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes),1,0,0.0,697
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEquals(net_id, s['subnet']['network_id'])",1,0,0.0,698
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEquals(gw_info, None)",1,0,0.0,699
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""agent_scheduler""]",0,0,0.0,700
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cfg.CONF.network_scheduler_driver),0,0,0.0,701
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cfg.CONF.router_scheduler_driver),0,0,0.0,702
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"port_id, routes, skip_add=False):",0,0,0.0,703
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,fields),0,0,0.0,704
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if not skip_add:,0,0,0.0,705
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._router_interface_action('add', router_id, subnet_id, port_id)",0,0,0.0,706
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._router_interface_action('remove', router_id, subnet_id, port_id)",0,0,0.0,707
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes),0,0,0.0,708
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'], routes)",0,0,0.0,709
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._routes_update_cleanup(p['port']['id'],",0,0,0.0,710
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"{'destination': '12.0.0.0/8',",0,0,0.0,711
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"{'destination': '141.212.0.0/16',",0,0,0.0,712
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._routes_update_prepare(r['router']['id'],",0,0,0.0,713
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'], [])",0,0,0.0,714
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes_orig),0,0,0.0,715
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_left,",0,0,0.0,716
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,skip_add=True),0,0,0.0,717
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,l3_rpc_base.L3RpcCallbackMixin):,1,0,0.0,718
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.notifier.port_update(context, updated_port)",0,0,0.0,719
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(msg),1,0,0.0,720
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,sg_db_rpc.SecurityGroupServerRpcMixin):,0,0,0.0,721
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,Revises: 45680af419f9,0,0,0.0,722
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"l3_rpc_base.L3RpcCallbackMixin,",0,0,0.0,723
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,sg_db_rpc.SecurityGroupServerRpcCallbackMixin):,0,0,0.0,724
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if port:,0,0,0.0,725
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"class AgentNotifierApi(proxy.RpcProxy,",0,0,0.0,726
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,sg_rpc.SecurityGroupAgentRpcApiMixin):,0,0,0.0,727
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"super(AgentNotifierApi, self).__init__(",0,0,0.0,728
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"topic=topic, default_version=self.BASE_RPC_API_VERSION)",0,0,0.0,729
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"topics.PORT,",0,0,0.0,730
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,topics.UPDATE),0,0,0.0,731
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.fanout_cast(context,",0,0,0.0,732
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.make_msg('port_update', port=port),",0,0,0.0,733
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,topic=self.topic_port_update),0,0,0.0,734
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._ensure_default_security_group(context, tenant_id)",0,0,0.0,735
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if need_port_update_notify:,0,0,0.0,736
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._ensure_default_security_group_on_port(context, port)",0,0,0.0,737
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self._process_port_create_security_group(,0,0,0.0,738
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._extend_port_dict_security_group(context, port)",0,0,0.0,739
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,if port['device_owner'] == q_const.DEVICE_OWNER_DHCP:,0,0,0.0,740
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.notifier.security_groups_provider_updated(context),0,0,0.0,741
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,else:,0,0,0.0,742
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,self.notifier.security_groups_member_updated(,0,0,0.0,743
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.disassociate_floatingips(context, id)",0,0,0.0,744
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._delete_port_security_group_bindings(context, id)",0,0,0.0,745
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"super(RyuQuantumPluginV2, self).delete_port(context, id)",0,0,0.0,746
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,need_port_update_notify |= self.is_security_group_member_updated(,0,0,0.0,747
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,need_port_update_notify |= (original_port['admin_state_up'] !=,0,0,0.0,748
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,updated_port['admin_state_up']),0,0,0.0,749
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'],",1,0,0.0,750
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes),1,0,0.0,751
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._router_interface_action('remove',",1,0,0.0,752
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_LE('DVR: removed snat failed')),0,0,0.0,753
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,nexthop=route['nexthop']).delete(),1,0,0.0,754
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.port(subnet=s, do_delete=False),",0,0,0.0,755
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.port(subnet=s, do_delete=False)) as (p1, p2):",0,0,0.0,756
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.port(subnet=s, no_delete=True),",1,0,0.0,757
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.port(subnet=s, no_delete=True)) as (p1, p2):",1,0,0.0,758
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_LE(""Error importing interface driver """,0,0,0.0,759
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""'%s'""), self.conf.interface_driver)",0,0,0.0,760
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'%s'), ns)",0,0,0.0,761
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_LE('Failed trying to delete namespace: %s'), ns)",0,0,0.0,762
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""floating IP: %s""), fip['id'])",0,0,0.0,763
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_LE(""Failed sending gratuitous ARP: %s""), str(e))",0,0,0.0,764
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.error(_LE('DVR: no map match_port found!')),0,0,0.0,765
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.exception(_LE('DVR: error adding redirection logic')),0,0,0.0,766
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.error(_LE('Missing subnet/agent_gateway_port')),0,0,0.0,767
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"{'destination': '12.0.0.0/8',",1,0,0.0,768
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_LE(""DVR: Failed updating arp entry""))",0,0,0.0,769
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.error(_LE(""The external network bridge '%s' does not exist""),",0,0,0.0,770
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug('Processing :%r', routers)",0,0,0.0,771
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""_sync_routers_task successfully completed"")",0,0,0.0,772
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_LE(""Failed synchronizing routers""))",0,0,0.0,773
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Report state task started"")",0,0,0.0,774
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.debug(""Report state task successfully completed"")",0,0,0.0,775
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.warn(_LW(""Neutron server does not support state report.""",0,0,0.0,776
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.exception(_LE(""Failed reporting state!""))",0,0,0.0,777
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"LOG.info(_LI(""agent_updated by server side %s!""), payload)",0,0,0.0,778
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"""'%s'"") % self.conf.interface_driver",1,0,0.0,779
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,LOG.error(msg),1,0,0.0,780
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'%s'), ns)",1,0,0.0,781
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"destination=route['destination'],",1,0,0.0,782
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"del_context.filter_by(router_id=router['id'],",1,0,0.0,783
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes=routes,",1,0,0.0,784
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise extraroute.InvalidRoutes(,1,0,0.0,785
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"{'destination': '141.212.0.0/16',",1,0,0.0,786
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes_orig}}),1,0,0.0,787
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,routes_left}}),1,0,0.0,788
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self.assertEqual(body['router']['routes'], [])",1,0,0.0,789
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._update_extra_routes(context, router_db, r['routes'])",0,0,0.0,790
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"self._update_extra_routes(context,",1,0,0.0,791
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"router_db,",1,0,0.0,792
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,r['routes']),1,0,0.0,793
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,query.filter(RouterRoute.router_id == id),1,0,0.0,794
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"'json',",0,0,0.0,795
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"200,",0,0,0.0,796
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"s['subnet']['network_id'],",0,0,0.0,797
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"tenant_id=r['router']['tenant_id'],",0,0,0.0,798
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,device_own=constants.DEVICE_OWNER_ROUTER_GW),0,0,0.0,799
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"200,",1,0,0.0,800
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"s['subnet']['network_id'],",1,0,0.0,801
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"tenant_id=r['router']['tenant_id'],",1,0,0.0,802
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,device_own=DEVICE_OWNER_ROUTER_GW),1,0,0.0,803
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,raise extraroute.InvalidRoutes(,0,0,0.0,804
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes=routes,",0,0,0.0,805
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,cidrs.append(self._core_plugin._get_subnet(,0,0,0.0,806
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ips.append(ip['ip_address']),0,0,0.0,807
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cidrs, ips, routes, route['nexthop'])",0,0,0.0,808
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,context.session.delete(,0,0,0.0,809
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes_dict[(route['destination'], route['nexthop'])])",0,0,0.0,810
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"routes.append({'destination': route['destination'],",0,0,0.0,811
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,ip['subnet_id'])['cidr'],1,0,0.0,812
7ffc2a2b6fbf3938e92e75374dbf7fdced5be4ea,"cidrs, ips, routes, route['nexthop'])",1,0,0.0,813
