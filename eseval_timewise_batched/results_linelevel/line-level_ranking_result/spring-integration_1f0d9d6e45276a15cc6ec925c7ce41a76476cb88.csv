commit_id,line,line_level_label,count,line_score,row
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"private volatile Map<String, Expression> headerExpressions = new HashMap<String, Expression>();",1,8,1.0,1
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Expression> headers = new HashMap<String, Expression>();",1,7,0.875,2
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"private Map<String, Object> evaluateHeaders(EvaluationContext methodInvocationEvaluationContext, Map<String, Expression> headerExpressions) {",0,6,0.75,3
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> header = new HashMap<String, Object>();",1,5,0.625,4
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"private final Map<String, Expression> headerExpressions = new HashMap<>();",0,5,0.625,5
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"public void setHeaderExpressions(@Nullable Map<String, Expression> headerExpressions) {",0,5,0.625,6
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"public void setHeaderExpressions(Map<String, Expression> headerExpressions) {",1,5,0.625,7
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Expression> headers = new HashMap<>();",0,5,0.625,8
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> headers = new HashMap<String, Object>();",1,5,0.625,9
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"final Map<String, Object> gatewayAttributes = new HashMap<String, Object>();",1,4,0.5,10
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> headers = new HashMap<>();",0,4,0.5,11
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"private void headers(final Element element, final Map<String, Object> gatewayAttributes) {",1,4,0.5,12
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> mapB = new HashMap<String, Object>();",1,4,0.5,13
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> header = new HashMap<>();",0,4,0.5,14
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> evaluatedHeaders = new HashMap<String, Object>();",0,4,0.5,15
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> evaluatedHeaders = new HashMap<String, Object>();",1,4,0.5,16
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private volatile String replyTimeout;,1,3,0.375,17
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> headerExpressions = new ManagedMap<String, Object>();",1,3,0.375,18
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,public Expression getPayloadExpression() {,0,3,0.375,19
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private volatile String payloadExpression;,1,3,0.375,20
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private volatile String requestChannelName;,1,3,0.375,21
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private volatile String replyChannelName;,1,3,0.375,22
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private volatile String requestTimeout;,1,3,0.375,23
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,public String getPayloadExpression() {,1,3,0.375,24
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,this.headerExpressions = headerExpressions;,1,3,0.375,25
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<Integer, String> headers = new HashMap<>();",0,3,0.375,26
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> mapB = new HashMap<>();",0,3,0.375,27
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<Integer, String> headers = new HashMap<Integer, String>();",1,3,0.375,28
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Method method = TestService.class.getMethod(""noArgs"", new Class<?>[] {});",1,3,0.375,29
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> headerExpressions = new ManagedMap<>();",0,3,0.375,30
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, BeanDefinition> methodMetadataMap = new ManagedMap<String, BeanDefinition>();",1,3,0.375,31
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"List<Map<String, Object>> headers = new ArrayList<Map<String, Object>>(headerElements.size());",1,3,0.375,32
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, BeanDefinition> methodMetadataMap = new ManagedMap<>();",0,3,0.375,33
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"for (Map.Entry<String, Expression> entry : headerExpressions.entrySet()) {",0,3,0.375,34
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,Object value = argumentValue.get(key);,0,3,0.375,35
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private static final SpelExpressionParser PARSER = new SpelExpressionParser();,1,3,0.375,36
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"throw new IllegalArgumentException(""Invalid header name ["" + key +",1,3,0.375,37
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"private final Map<String, Expression> globalHeaderExpressions;",0,3,0.375,38
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"public GatewayMethodInboundMessageMapper(Method method, Map<String, Expression> headerExpressions,",0,3,0.375,39
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Expression> globalHeaderExpressions) {",0,3,0.375,40
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,Object value = argumentValue.get(key);,1,3,0.375,41
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,Object value = entry.getValue().getValue(methodInvocationEvaluationContext);,0,3,0.375,42
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"for (Map.Entry<String, Expression> entry : this.headerExpressions.entrySet()) {",1,3,0.375,43
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,Object value = entry.getValue().getValue(methodInvocationEvaluationContext);,1,3,0.375,44
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"final Map<String, Object> gatewayAttributes = new HashMap<>();",0,3,0.375,45
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"private void headers(Element element, Map<String, Object> gatewayAttributes) {",0,3,0.375,46
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"List<Map<String, Object>> headers = new ArrayList<>(headerElements.size());",0,3,0.375,47
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private static final SpelExpressionParser PARSER = new SpelExpressionParser();,0,3,0.375,48
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,".isThrownBy(() -> mapper.toMessage(new Object[] { ""test"", headers }));",0,2,0.25,49
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private String requestChannelName;,0,2,0.25,50
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private String replyChannelName;,0,2,0.25,51
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private String requestTimeout;,0,2,0.25,52
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private String replyTimeout;,0,2,0.25,53
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,public void setPayloadExpression(Expression payloadExpression) {,0,2,0.25,54
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (headerExpressions != null) {,0,2,0.25,55
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,public void setPayloadExpression(String payloadExpression) {,1,2,0.25,56
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<Integer, Object> map = new HashMap<Integer, Object>();",1,2,0.25,57
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,".isThrownBy(() -> mapper.toMessage(new Object[] { inputMessage, null }));",0,2,0.25,58
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Method method = TestService.class.getMethod(""noArgs"");",0,2,0.25,59
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<Integer, Object> map = new HashMap<>();",0,2,0.25,60
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<Integer, Object> mapA = new HashMap<>();",0,2,0.25,61
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"mapper.toMessage(new Object[] { ""test"", null });",1,2,0.25,62
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"mapper.toMessage(new Object[] { ""test"", headers });",1,2,0.25,63
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"mapper.toMessage(new Object[] { inputMessage, null });",1,2,0.25,64
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (StringUtils.hasText(payloadExpression)) {,0,2,0.25,65
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<Integer, Object> mapA = new HashMap<Integer, Object>();",1,2,0.25,66
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private Expression payloadExpression;,0,2,0.25,67
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,".isThrownBy(() -> mapper.toMessage(new Object[] { ""test"", null }));",0,2,0.25,68
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"String payloadExpression = methodElement.getAttribute(""payload-expression"");",0,2,0.25,69
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,Object argumentValue = arguments[i];,1,2,0.25,70
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (value != null) {,1,2,0.25,71
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,private final Log logger = LogFactory.getLog(this.getClass());,0,2,0.25,72
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,Object argumentValue = arguments[i];,0,2,0.25,73
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"for (Object key : ((Map<?, ?>) argumentValue).keySet()) {",0,2,0.25,74
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"throw new MessagingException(""Ambiguous method parameters; found more than one "" +",0,2,0.25,75
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,for (Object key : argumentValue.keySet()) {,0,2,0.25,76
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"this.logger.warn(""Invalid header name ["" + key +",0,2,0.25,77
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,ParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();,0,2,0.25,78
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"""], name type must be String. Skipping mapping of this header to MessageHeaders."");",0,2,0.25,79
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"for (Object key : ((Map<?, ?>) argumentValue).keySet()) {",1,2,0.25,80
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"throw new MessagingException(""Ambiguous method parameters; found more than one "" +",1,2,0.25,81
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,for (Object key : argumentValue.keySet()) {,1,2,0.25,82
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,ParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();,1,2,0.25,83
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> evaluatedHeaders = evaluateHeaders(methodInvocationEvaluationContext, this.headerExpressions);",0,2,0.25,84
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (!CollectionUtils.isEmpty(this.globalHeaderExpressions)) {,0,2,0.25,85
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Map<String, Object> evaluatedHeaders = evaluateHeaders(methodInvocationEvaluationContext, this.globalHeaderExpressions);",0,2,0.25,86
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (value != null) {,0,2,0.25,87
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,".isThrownBy(() -> mapper.toMessage(new Object[] { ""test"", ""oops"" }));",0,1,0.125,88
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"mapper.toMessage(new Object[] { ""abc"", ""def"" });",1,1,0.125,89
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,@Test(expected = MessageMappingException.class),1,1,0.125,90
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,@Test(expected = IllegalArgumentException.class),1,1,0.125,91
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,".isThrownBy(() -> mapper.toMessage(new Object[] { ""abc"", ""def"" }));",0,1,0.125,92
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"mapper.toMessage(new Object[] { ""test"", ""oops"" });",1,1,0.125,93
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,// ...whereas global (default) headers do not...,0,1,0.125,94
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,else {,0,1,0.125,95
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,// Explicit headers in XML override any @Header annotations...,0,1,0.125,96
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (this.logger.isWarnEnabled()){,0,1,0.125,97
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,if (payloadExpression == null){,0,1,0.125,98
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,this.globalHeaderExpressions = globalHeaderExpressions;,0,1,0.125,99
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"gatewayAttributes.put(""defaultHeaders"", headers.toArray(new Map[0]));",1,0,0.0,100
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Assert.state(!hasMapper || !StringUtils.hasText(element.getAttribute(""payload-expression"")),",1,0,0.0,101
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"IntegrationNamespaceUtils.setValueIfAttributeDefined(methodMetadataBuilder, methodElement,",1,0,0.0,102
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"""payload-expression"");",1,0,0.0,103
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,* Copyright 2002-2022 the original author or authors.,0,0,0.0,104
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,* @author Artem Bilan,0,0,0.0,105
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,*,0,0,0.0,106
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,@Nullable,0,0,0.0,107
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,this.headerExpressions.clear();,0,0,0.0,108
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,this.headerExpressions.putAll(headerExpressions);,0,0,0.0,109
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,},0,0,0.0,110
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import org.springframework.lang.Nullable;,0,0,0.0,111
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;,0,0,0.0,112
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import static org.assertj.core.api.Assertions.assertThatExceptionOfType;,0,0,0.0,113
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import org.junit.jupiter.api.Test;,0,0,0.0,114
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,* @author Artem Bilan,0,0,0.0,115
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,@Test,0,0,0.0,116
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,assertThatIllegalArgumentException(),0,0,0.0,117
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,.isThrownBy(() -> mapper.toMessage(new Object[] {}));,0,0,0.0,118
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,assertThatExceptionOfType(MessageMappingException.class),0,0,0.0,119
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"@Payload(""args[0]"")",0,0,0.0,120
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,* Copyright 2002-2019 the original author or authors.,1,0,0.0,121
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import org.junit.Test;,1,0,0.0,122
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,mapper.toMessage(new Object[] {});,1,0,0.0,123
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,},0,0,0.0,124
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"@SuppressWarnings(""rawtypes"")",1,0,0.0,125
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"this(method, headerExpressions, null);",0,0,0.0,126
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,.getBeanDefinition());,0,0,0.0,127
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,},0,0,0.0,128
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import org.apache.commons.logging.Log;,0,0,0.0,129
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import org.apache.commons.logging.LogFactory;,0,0,0.0,130
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,*,0,0,0.0,131
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"""Map-typed parameter and neither one contains a @Payload annotation"");",0,0,0.0,132
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,},0,0,0.0,133
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"headers.put((String) key, value);",0,0,0.0,134
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,*,1,0,0.0,135
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"""Map-typed parameter and neither one contains a @Payload annotation"");",1,0,0.0,136
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"""], name type must be String."");",1,0,0.0,137
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"headers.put((String) key, value);",1,0,0.0,138
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,* @author Gary Russell,0,0,0.0,139
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,builder.copyHeadersIfAbsent(evaluatedHeaders);,0,0,0.0,140
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,.addConstructorArgValue(payloadExpression),0,0,0.0,141
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"evaluatedHeaders.put(entry.getKey(), value);",0,0,0.0,142
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,return evaluatedHeaders;,0,0,0.0,143
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,// TODO deprecated in 3.0/4.0 - retained for backwards compatibility,0,0,0.0,144
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"context.setVariable(""gatewayMethod"", this.method);",0,0,0.0,145
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"evaluatedHeaders.put(entry.getKey(), value);",1,0,0.0,146
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,},1,0,0.0,147
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,import org.springframework.integration.config.ExpressionFactoryBean;,0,0,0.0,148
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"gatewayAttributes.put(""defaultHeaders"", headers.toArray(new Map<?, ?>[0]));",0,0,0.0,149
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"Assert.state(!hasMapper || !StringUtils.hasText(payloadExpression),",0,0,0.0,150
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"methodMetadataBuilder.addPropertyValue(""payloadExpression"",",0,0,0.0,151
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,BeanDefinitionBuilder.genericBeanDefinition(ExpressionFactoryBean.class),0,0,0.0,152
1f0d9d6e45276a15cc6ec925c7ce41a76476cb88,"@Payload(""#args[0]"")",1,0,0.0,153
