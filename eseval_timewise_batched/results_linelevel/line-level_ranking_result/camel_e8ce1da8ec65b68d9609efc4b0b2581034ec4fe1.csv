commit_id,line,line_level_label,count,line_score,row
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private String propertyPrefix;,1,3,1.0,1
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private String propertySuffix;,1,3,1.0,2
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private transient String propertySuffixResolved;,1,2,0.6666666666666666,3
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Parses the input text and resolve all property placeholders.,1,2,0.6666666666666666,4
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private static final long serialVersionUID = 1L;,1,2,0.6666666666666666,5
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"* before falling back the plain property name specified. If false, only the augmented property name is searched.",1,2,0.6666666666666666,6
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertySuffixResolved = propertySuffix;,1,2,0.6666666666666666,7
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertySuffix = propertySuffix;,1,2,0.6666666666666666,8
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertyPrefix = propertyPrefix;,1,2,0.6666666666666666,9
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"String endpointUri = parseUri(remaining, paths);",1,2,0.6666666666666666,10
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"String locations = getAndRemoveParameter(parameters, ""locations"", String.class);",1,2,0.6666666666666666,11
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private boolean fallbackToUnaugmentedProperty = true;,1,2,0.6666666666666666,12
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@Metadata(label = ""advanced"", defaultValue = ""true"")",1,2,0.6666666666666666,13
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertyPrefixResolved = propertyPrefix;,1,2,0.6666666666666666,14
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private boolean cache = true;,1,2,0.6666666666666666,15
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Parses the input text and resolve all property placeholders from within the text.,0,2,0.6666666666666666,16
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private transient String propertyPrefixResolved;,1,2,0.6666666666666666,17
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private final PropertiesLookup propertiesLookup = new DefaultPropertiesLookup(this);,0,2,0.6666666666666666,18
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private final List<PropertiesSource> sources = new ArrayList<>();,0,2,0.6666666666666666,19
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private List<PropertiesLocation> locations = Collections.emptyList();,0,2,0.6666666666666666,20
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"String value = parseUri(key, propertiesLookup);",0,2,0.6666666666666666,21
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,String endpointUri = parseUri(remaining);,0,2,0.6666666666666666,22
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"private final Map<CacheKey, Properties> cacheMap = LRUCacheFactory.newLRUSoftCache(1000);",1,2,0.6666666666666666,23
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private PropertiesResolver propertiesResolver = new DefaultPropertiesResolver(this);,1,2,0.6666666666666666,24
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private List<PropertiesLocation> locations = Collections.emptyList();,1,2,0.6666666666666666,25
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private List<PropertiesSource> sources = new ArrayList<>();,1,2,0.6666666666666666,26
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Optional suffix appended to property names before resolution.,1,1,0.3333333333333333,27
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return propertyPrefix;,1,1,0.3333333333333333,28
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return propertySuffix;,1,1,0.3333333333333333,29
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public String getPropertySuffix() {,1,1,0.3333333333333333,30
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertyPrefixResolved = FilePathResolver.resolvePath(this.propertyPrefix);,1,1,0.3333333333333333,31
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Optional prefix prepended to property names before resolution.,1,1,0.3333333333333333,32
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,List<PropertiesLocation> current = getLocations();,1,1,0.3333333333333333,33
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public String getPropertyPrefix() {,1,1,0.3333333333333333,34
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.cache = cache;,1,1,0.3333333333333333,35
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@ManagedAttribute(description = ""Whether to cache loaded properties"")",1,1,0.3333333333333333,36
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertiesResolver = propertiesResolver;,1,1,0.3333333333333333,37
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* To use a custom PropertiesResolver,1,1,0.3333333333333333,38
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"* If true, first attempt resolution of property name augmented with propertyPrefix and propertySuffix",1,1,0.3333333333333333,39
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.propertySuffixResolved = FilePathResolver.resolvePath(this.propertySuffix);,1,1,0.3333333333333333,40
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"String parseUri(String uri, String... locations);",1,1,0.3333333333333333,41
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.fallbackToUnaugmentedProperty = fallbackToUnaugmentedProperty;,1,1,0.3333333333333333,42
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"// its chicken and egg, we cannot resolve placeholders on ourselves",1,1,0.3333333333333333,43
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@ManagedOperation(description = ""Clears the cache"")",1,1,0.3333333333333333,44
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"Object ps = getCamelContext().getInjector().newInstance(type, false);",1,1,0.3333333333333333,45
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,cachedProperties = null;,1,1,0.3333333333333333,46
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private static final class CacheKey implements Serializable {,1,1,0.3333333333333333,47
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private final List<PropertiesLocation> locations;,1,1,0.3333333333333333,48
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private CacheKey(List<PropertiesLocation> locations) {,1,1,0.3333333333333333,49
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.locations = new ArrayList<>(locations);,1,1,0.3333333333333333,50
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,CacheKey that = (CacheKey) o;,1,1,0.3333333333333333,51
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public String toString() {,1,1,0.3333333333333333,52
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @return text with resolved property placeholders,1,1,0.3333333333333333,53
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,Properties prop = doLoadProperties(paths);,1,1,0.3333333333333333,54
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"protected String parseUri(String uri, Properties prop) {",1,1,0.3333333333333333,55
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* This option will override any default locations and only use the locations from this option.,1,1,0.3333333333333333,56
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"protected String parseUri(String uri, List<PropertiesLocation> paths) {",1,1,0.3333333333333333,57
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Adds a custom {@link PropertiesSource} to use as source for loading and/or looking up property values.,0,1,0.3333333333333333,58
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"locationsProp = propertiesResolver.resolveProperties(getCamelContext(), ignoreMissingLocation, locations);",1,1,0.3333333333333333,59
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,Properties p = lps.loadProperties();,0,1,0.3333333333333333,60
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"protected String parseUri(String uri, PropertiesLookup properties) {",0,1,0.3333333333333333,61
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,locations = parseLocations(locations);,0,1,0.3333333333333333,62
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// we need to re-create the property sources which may have already been created from locations,0,1,0.3333333333333333,63
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,List<PropertiesLocation> current = locations;,0,1,0.3333333333333333,64
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"Object obj = getCamelContext().getInjector().newInstance(type, false);",0,1,0.3333333333333333,65
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,PropertiesSource ps = (PropertiesSource) obj;,0,1,0.3333333333333333,66
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private void addPropertiesLocationsAsPropertiesSource(PropertiesLocation location) {,0,1,0.3333333333333333,67
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Component for property placeholders and loading properties from sources,0,1,0.3333333333333333,68
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Looks up the property with the given key,0,1,0.3333333333333333,69
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @param key  the name of the property,0,1,0.3333333333333333,70
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @return the property value if present,0,1,0.3333333333333333,71
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,LoadablePropertiesSource lps = (LoadablePropertiesSource) ps;,0,1,0.3333333333333333,72
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,private transient Properties cachedProperties;,1,1,0.3333333333333333,73
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"public String parseUri(String uri, String... locations) {",1,1,0.3333333333333333,74
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,Properties locationsProp = cache ? cacheMap.get(key) : null;,1,1,0.3333333333333333,75
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@Metadata(label = ""advanced"")",1,1,0.3333333333333333,76
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,CacheKey key = new CacheKey(locations);,1,1,0.3333333333333333,77
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// location may contain JVM system property or OS environment variables,1,1,0.3333333333333333,78
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,Properties p = ps.loadProperties();,1,1,0.3333333333333333,79
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,List<PropertiesLocation> locations = parseLocations(paths);,1,1,0.3333333333333333,80
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,cachedProperties = doLoadProperties(locations);,1,1,0.3333333333333333,81
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"paths = Arrays.stream(locations.split("","")).map(PropertiesLocation::new).collect(Collectors.toList());",1,1,0.3333333333333333,82
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,ignoreMissingLocation = ignoreMissingLocationLoc;,1,1,0.3333333333333333,83
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"Boolean ignoreMissingLocationLoc = getAndRemoveParameter(parameters, ""ignoreMissingLocation"", Boolean.class);",1,1,0.3333333333333333,84
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,List<PropertiesLocation> paths = locations;,1,1,0.3333333333333333,85
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@Metadata(defaultValue = ""true"")",1,1,0.3333333333333333,86
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public void setPropertiesResolver(PropertiesResolver propertiesResolver) {,1,0,0.0,87
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"return propertiesParser.parseUri(uri, prop, prefixToken, suffixToken);",1,0,0.0,88
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public List<PropertiesLocation> getLocations() {,1,0,0.0,89
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return locations;,1,0,0.0,90
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public PropertiesResolver getPropertiesResolver() {,1,0,0.0,91
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return propertiesResolver;,1,0,0.0,92
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,/**,1,0,0.0,93
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,*/,1,0,0.0,94
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ObjectHelper.isNotEmpty(this.propertyPrefix)) {,1,0,0.0,95
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public boolean isCache() {,1,0,0.0,96
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return cache;,1,0,0.0,97
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Whether or not to cache loaded properties. The default value is true.,1,0,0.0,98
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public void setCache(boolean cache) {,1,0,0.0,99
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public void setPropertyPrefix(String propertyPrefix) {,1,0,0.0,100
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,defaultFallbackEnabled);,1,0,0.0,101
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public void setPropertySuffix(String propertySuffix) {,1,0,0.0,102
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ObjectHelper.isNotEmpty(this.propertySuffix)) {,1,0,0.0,103
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public boolean isFallbackToUnaugmentedProperty() {,1,0,0.0,104
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,} else {,1,0,0.0,105
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return ((AugmentedPropertyNameAwarePropertiesParser) propertiesParser).parseUri(,1,0,0.0,106
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"fallbackToUnaugmentedProperty,",1,0,0.0,107
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (cache) {,1,0,0.0,108
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,protected Properties doLoadProperties(List<PropertiesLocation> paths) {,1,0,0.0,109
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// add 3rd party sources,1,0,0.0,110
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,prop.putAll(p);,1,0,0.0,111
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// use locations,1,0,0.0,112
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (paths != null) {,1,0,0.0,113
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// so we need to parse those,1,0,0.0,114
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return fallbackToUnaugmentedProperty;,1,0,0.0,115
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (locationsProp == null) {,1,0,0.0,116
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"cacheMap.put(key, locationsProp);",1,0,0.0,117
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"propertySuffixResolved,",1,0,0.0,118
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,prop.putAll(locationsProp);,1,0,0.0,119
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"return parseUri(uri, prop);",1,0,0.0,120
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"log.trace(""Parsing uri {} with properties: {}"", uri, prop);",1,0,0.0,121
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (propertiesParser instanceof AugmentedPropertyNameAwarePropertiesParser) {,1,0,0.0,122
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"prop,",1,0,0.0,123
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"prefixToken,",1,0,0.0,124
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"suffixToken,",1,0,0.0,125
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"propertyPrefixResolved,",1,0,0.0,126
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// check cache first,1,0,0.0,127
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,((CamelContextAware) ps).setCamelContext(getCamelContext());,1,0,0.0,128
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public void setFallbackToUnaugmentedProperty(boolean fallbackToUnaugmentedProperty) {,1,0,0.0,129
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"return ""LocationKey["" + locations.toString() + ""]"";",1,0,0.0,130
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Key used in the locations cache,1,0,0.0,131
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public boolean equals(Object o) {,1,0,0.0,132
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (this == o) {,1,0,0.0,133
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return true;,1,0,0.0,134
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (o == null || getClass() != o.getClass()) {,1,0,0.0,135
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return locations.equals(that.locations);,1,0,0.0,136
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public int hashCode() {,1,0,0.0,137
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return locations.hashCode();,1,0,0.0,138
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import java.io.IOError;,1,0,0.0,139
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,ServiceHelper.stopAndShutdownService(sources);,1,0,0.0,140
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public interface PropertiesComponent extends Component {,1,0,0.0,141
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @param uri  input text,1,0,0.0,142
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @param locations locations to load as properties (will not use the default locations),1,0,0.0,143
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @throws IllegalArgumentException is thrown if error during parsing,1,0,0.0,144
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @throws IOError is thrown if error loading properties,1,0,0.0,145
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Loads the properties from the given locations,1,0,0.0,146
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @return the properties loaded.,1,0,0.0,147
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return doLoadProperties(Arrays.stream(locations).map(PropertiesLocation::new).collect(Collectors.toList()));,1,0,0.0,148
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,super.doStop();,1,0,0.0,149
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,cacheMap.clear();,1,0,0.0,150
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,*,1,0,0.0,151
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Adds a custom {@link PropertiesSource},1,0,0.0,152
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @param initialProperties properties that are added first,1,0,0.0,153
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* @param overrideProperties properties that is used first,1,0,0.0,154
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,@Override,1,0,0.0,155
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public boolean isResolvePropertyPlaceholders() {,1,0,0.0,156
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return false;,1,0,0.0,157
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Clears the cache,1,0,0.0,158
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public void clearCache() {,1,0,0.0,159
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.cacheMap.clear();,1,0,0.0,160
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// prepare properties sources which we must do eager,1,0,0.0,161
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,super.doStart();,1,0,0.0,162
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,for (PropertiesSource ps : sources) {,1,0,0.0,163
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ps instanceof CamelContextAware) {,1,0,0.0,164
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,ServiceHelper.initService(propertiesSource);,1,0,0.0,165
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ps != null) {,1,0,0.0,166
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ps instanceof PropertiesSource) {,1,0,0.0,167
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"LOG.info(""PropertiesComponent added custom PropertiesSource: {}"", ps);",1,0,0.0,168
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,addPropertiesSource((PropertiesSource) ps);,1,0,0.0,169
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"LOG.warn(""PropertiesComponent cannot add custom PropertiesSource as the type is not a org.apache.camel.component.properties.PropertiesSource but: "" + type.getName());",1,0,0.0,170
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return new OrderedProperties();,1,0,0.0,171
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,ServiceHelper.initService(sources);,0,0,0.0,172
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public Properties loadProperties(String... locations) {,1,0,0.0,173
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,addPropertiesLocationsAsPropertiesSource(loc);,0,0,0.0,174
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (locations.isEmpty()) {,0,0,0.0,175
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return Collections.EMPTY_LIST;,0,0,0.0,176
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,} else {,0,0,0.0,177
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return locations.stream().map(PropertiesLocation::toString).collect(Collectors.toList());,0,0,0.0,178
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,},0,0,0.0,179
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// reset locations,0,0,0.0,180
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,this.sources.removeIf(s -> s instanceof LocationPropertiesSource);,0,0,0.0,181
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,for (PropertiesLocation loc : locations) {,0,0,0.0,182
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (propertiesSource instanceof CamelContextAware) {,0,0,0.0,183
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@SuppressWarnings(""unchecked"")",0,0,0.0,184
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,((CamelContextAware) propertiesSource).setCamelContext(getCamelContext());,0,0,0.0,185
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (!this.isNew()) {,0,0,0.0,186
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// if we have already initialized or started then we should also init the source,0,0,0.0,187
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,ServiceHelper.initService(propertiesSource);,0,0,0.0,188
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public List<PropertiesSource> getSources() {,0,0,0.0,189
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return sources;,0,0,0.0,190
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (obj instanceof PropertiesSource) {,0,0,0.0,191
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,addPropertiesSource(ps);,0,0,0.0,192
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public List<String> getLocations() {,0,0,0.0,193
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"return propertiesParser.parseUri(uri, properties, prefixToken, suffixToken, defaultFallbackEnabled);",0,0,0.0,194
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return doLoadProperties(locations);,1,0,0.0,195
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* A list of locations to load properties. You can use comma to separate multiple locations.,0,0,0.0,196
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import java.util.Optional;,0,0,0.0,197
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.StaticService;,0,0,0.0,198
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.spi.LoadablePropertiesSource;,0,0,0.0,199
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.spi.PropertiesSource;,0,0,0.0,200
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.support.OrderedComparator;,0,0,0.0,201
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.util.URISupport;,0,0,0.0,202
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"public class PropertiesComponent extends DefaultComponent implements org.apache.camel.spi.PropertiesComponent, StaticService {",0,0,0.0,203
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,/**,0,0,0.0,204
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,*/,0,0,0.0,205
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"log.trace(""Parsing uri {}"", uri);",0,0,0.0,206
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* A list of locations to load properties.,0,0,0.0,207
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (LOG.isDebugEnabled()) {,0,0,0.0,208
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"log.debug(""Endpoint uri parsed as: {}"", URISupport.sanitizeUri(endpointUri));",0,0,0.0,209
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"return parseUri(uri, propertiesLookup);",0,0,0.0,210
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public Optional<String> resolveProperty(String key) {,0,0,0.0,211
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return Optional.of(value);,0,0,0.0,212
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ps instanceof LoadablePropertiesSource) {,0,0,0.0,213
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,prop.putAll(p);,0,0,0.0,214
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"LOG.info(""PropertiesComponent added custom PropertiesSource: {}"", ps);",0,0,0.0,215
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,} else if (obj != null) {,0,0,0.0,216
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"LOG.warn(""PropertiesComponent cannot add custom PropertiesSource as the type is not a org.apache.camel.component.properties.PropertiesSource but: "" + type.getName());",0,0,0.0,217
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,},1,0,0.0,218
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.api.management.ManagedOperation;,1,0,0.0,219
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import org.apache.camel.support.LRUCacheFactory;,1,0,0.0,220
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,public class PropertiesComponent extends DefaultComponent implements org.apache.camel.spi.PropertiesComponent {,1,0,0.0,221
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"@SuppressWarnings(""unchecked"")",1,0,0.0,222
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (ignoreMissingLocationLoc != null) {,1,0,0.0,223
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// override default locations,1,0,0.0,224
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (locations != null) {,1,0,0.0,225
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"log.trace(""Overriding default locations with location: {}"", locations);",1,0,0.0,226
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"log.debug(""Endpoint uri parsed as: {}"", endpointUri);",1,0,0.0,227
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,sources.sort(OrderedComparator.get());,0,0,0.0,228
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,// optimise to only load properties once as we use the configured locations,1,0,0.0,229
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,if (cachedProperties == null) {,1,0,0.0,230
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"return parseUri(uri, cachedProperties);",1,0,0.0,231
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,return parseUri(,1,0,0.0,232
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"uri,",1,0,0.0,233
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,locations != null,1,0,0.0,234
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,? Arrays.stream(locations).map(PropertiesLocation::new).collect(Collectors.toList()),1,0,0.0,235
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,: Collections.emptyList());,1,0,0.0,236
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import java.util.Arrays;,1,0,0.0,237
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import java.io.Serializable;,1,0,0.0,238
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,void addPropertiesSource(PropertiesSource propertiesSource);,0,0,0.0,239
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,List<String> getLocations();,0,0,0.0,240
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,ServiceHelper.stopAndShutdownServices(sources);,0,0,0.0,241
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"if (""ref"".equals(location.getResolver())) {",0,0,0.0,242
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"addPropertiesSource(new RefPropertiesSource(this, location));",0,0,0.0,243
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"} else if (""file"".equals(location.getResolver())) {",0,0,0.0,244
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"addPropertiesSource(new FilePropertiesSource(this, location));",0,0,0.0,245
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"} else if (""classpath"".equals(location.getResolver())) {",0,0,0.0,246
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"addPropertiesSource(new ClasspathPropertiesSource(this, location));",0,0,0.0,247
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,import java.util.List;,0,0,0.0,248
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* (such as .properties file from classpath or file system),0,0,0.0,249
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,"public interface PropertiesComponent extends Component, StaticService {",0,0,0.0,250
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* The value of the prefix token used to identify properties to replace.,0,0,0.0,251
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Is default {@link #DEFAULT_PREFIX_TOKEN},0,0,0.0,252
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* The value of the suffix token used to identify properties to replace.,0,0,0.0,253
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Is default {@link #DEFAULT_SUFFIX_TOKEN},0,0,0.0,254
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,Optional<String> resolveProperty(String key);,0,0,0.0,255
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* Gets the configured properties locations.,0,0,0.0,256
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,* This may be empty if the properties component has only been configured with {@link PropertiesSource}.,0,0,0.0,257
e8ce1da8ec65b68d9609efc4b0b2581034ec4fe1,Properties loadProperties(String... locations);,1,0,0.0,258
