commit_id,line,line_level_label,count,line_score,row
6261364651966fe767b592fc32c6e263ffec1d7f,or the first line in setUp if all the test methods in the class are,0,12,1.0,1
6261364651966fe767b592fc32c6e263ffec1d7f,Creates a pass-through logger that does not create the real logger,1,11,0.9166666666666666,2
6261364651966fe767b592fc32c6e263ffec1d7f,"Imports a class and return an instance of it, first by trying",1,11,0.9166666666666666,3
6261364651966fe767b592fc32c6e263ffec1d7f,lock files on disk with a meaningful prefix. The prefix should end with a,1,10,0.8333333333333333,4
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Returns a class from a string including module and class.""""""",1,10,0.8333333333333333,5
6261364651966fe767b592fc32c6e263ffec1d7f,# Skip %% and deal with the case where % is first character on the line,1,9,0.75,6
6261364651966fe767b592fc32c6e263ffec1d7f,help='The format for an instance UUID that is passed with the ',1,9,0.75,7
6261364651966fe767b592fc32c6e263ffec1d7f,help='The format for an instance that is passed with the log ',1,9,0.75,8
6261364651966fe767b592fc32c6e263ffec1d7f,"Make it return a constant time or a list thereof, one at a time.",1,9,0.75,9
6261364651966fe767b592fc32c6e263ffec1d7f,"# name like '_'. The ""L"" is for ""log"" and the other letter comes from",0,9,0.75,10
6261364651966fe767b592fc32c6e263ffec1d7f,:param lock_path: The lock_path keyword argument is used to specify a,1,9,0.75,11
6261364651966fe767b592fc32c6e263ffec1d7f,a temporary directory will be created for all your locks and passed to all,0,9,0.75,12
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Create a dir for locks and pass it to command from arguments",0,9,0.75,13
6261364651966fe767b592fc32c6e263ffec1d7f,:param lock_path: The lock_path keyword argument is used to specify a,0,9,0.75,14
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Try to import a module and if it fails return default.""""""",1,8,0.6666666666666666,15
6261364651966fe767b592fc32c6e263ffec1d7f,until it is really needed and delegates all calls to the real logger,1,8,0.6666666666666666,16
6261364651966fe767b592fc32c6e263ffec1d7f,"may be passed as part of the log message, which is intended to make it easier",1,8,0.6666666666666666,17
6261364651966fe767b592fc32c6e263ffec1d7f,a context object when calling the various log methods.  If the context object,1,8,0.6666666666666666,18
6261364651966fe767b592fc32c6e263ffec1d7f,"special location for external lock files to live. If nothing is set, then",1,8,0.6666666666666666,19
6261364651966fe767b592fc32c6e263ffec1d7f,a full path if not found in the default namespace.,1,8,0.6666666666666666,20
6261364651966fe767b592fc32c6e263ffec1d7f,"to find the class in a default namespace, then failing back to",1,8,0.6666666666666666,21
6261364651966fe767b592fc32c6e263ffec1d7f,# to avoid carrying a lot of unnecessary weight around in the message,1,8,0.6666666666666666,22
6261364651966fe767b592fc32c6e263ffec1d7f,"special location for external lock files to live. If nothing is set, then",0,8,0.6666666666666666,23
6261364651966fe767b592fc32c6e263ffec1d7f,# The abbreviated names are meant to reflect the usual use of a short,0,7,0.5833333333333333,24
6261364651966fe767b592fc32c6e263ffec1d7f,# to an empty string so we don't throw an exception if,1,7,0.5833333333333333,25
6261364651966fe767b592fc32c6e263ffec1d7f,Takes additional keyword arguments which can be used in the message,1,7,0.5833333333333333,26
6261364651966fe767b592fc32c6e263ffec1d7f,# Just in case the caller is not setting the,1,7,0.5833333333333333,27
6261364651966fe767b592fc32c6e263ffec1d7f,#                before it can get to the python logging and,1,7,0.5833333333333333,28
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Normalize time in arbitrary timezone to UTC naive object.""""""",1,7,0.5833333333333333,29
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Import a class and return an instance of it.""""""",1,7,0.5833333333333333,30
6261364651966fe767b592fc32c6e263ffec1d7f,:param lock_file_prefix: The lock_file_prefix argument is used to provide,0,7,0.5833333333333333,31
6261364651966fe767b592fc32c6e263ffec1d7f,# mapping between the log level name and the translator. The domain,0,7,0.5833333333333333,32
6261364651966fe767b592fc32c6e263ffec1d7f,:param external: The external keyword argument denotes whether this lock,1,7,0.5833333333333333,33
6261364651966fe767b592fc32c6e263ffec1d7f,:param lock_file_prefix: The lock_file_prefix argument is used to provide,1,7,0.5833333333333333,34
6261364651966fe767b592fc32c6e263ffec1d7f,:param external: The external keyword argument denotes whether this lock,0,7,0.5833333333333333,35
6261364651966fe767b592fc32c6e263ffec1d7f,the lock context for locking between tests. The fixture is recommended to,0,7,0.5833333333333333,36
6261364651966fe767b592fc32c6e263ffec1d7f,# locale for this Message we need to set it for those Messages too.,0,7,0.5833333333333333,37
6261364651966fe767b592fc32c6e263ffec1d7f,meaningful prefix. The prefix should end with a hyphen ('-') if specified.,1,7,0.5833333333333333,38
6261364651966fe767b592fc32c6e263ffec1d7f,This module adds to logging functionality by adding the option to specify,1,6,0.5,39
6261364651966fe767b592fc32c6e263ffec1d7f,#    not use this file except in compliance with the License. You may obtain,1,6,0.5,40
6261364651966fe767b592fc32c6e263ffec1d7f,# ISO 8601 extended time format with microseconds,1,6,0.5,41
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Determines if time is going to happen in the next window seconds.",1,6,0.5,42
6261364651966fe767b592fc32c6e263ffec1d7f,:param window: minimum seconds to remain to consider the time not soon,1,6,0.5,43
6261364651966fe767b592fc32c6e263ffec1d7f,#    not use this file except in compliance with the License. You may obtain,1,6,0.5,44
6261364651966fe767b592fc32c6e263ffec1d7f,#                module aware of it so it acts like other levels.,1,6,0.5,45
6261364651966fe767b592fc32c6e263ffec1d7f,"is not specified, default formatting is used. Additionally, an instance uuid",1,6,0.5,46
6261364651966fe767b592fc32c6e263ffec1d7f,"# a full instance (and could include more information), and other times we",1,6,0.5,47
6261364651966fe767b592fc32c6e263ffec1d7f,# cannot be found when using a LoggerAdapter as the,1,6,0.5,48
6261364651966fe767b592fc32c6e263ffec1d7f,# Using a list because a tuple with dict can't be stored in a set.,1,6,0.5,49
6261364651966fe767b592fc32c6e263ffec1d7f,#    not use this file except in compliance with the License. You may obtain,1,6,0.5,50
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Tries to import object from default namespace.",1,6,0.5,51
6261364651966fe767b592fc32c6e263ffec1d7f,If the system is configured for fatal deprecations then the message,1,6,0.5,52
6261364651966fe767b592fc32c6e263ffec1d7f,# ourselves from losing values if we are called through an,1,6,0.5,53
6261364651966fe767b592fc32c6e263ffec1d7f,This is because addCleanups are put on a LIFO queue that gets run after the,0,6,0.5,54
6261364651966fe767b592fc32c6e263ffec1d7f,# This Message object may have been constructed with one or more,0,6,0.5,55
6261364651966fe767b592fc32c6e263ffec1d7f,function to use lazy gettext functionality. This is useful if,0,6,0.5,56
6261364651966fe767b592fc32c6e263ffec1d7f,"# Message, or a tuple or Map containing some, so when setting the",0,6,0.5,57
6261364651966fe767b592fc32c6e263ffec1d7f,#    not use this file except in compliance with the License. You may obtain,0,6,0.5,58
6261364651966fe767b592fc32c6e263ffec1d7f,"# Message objects as substitution parameters, given as a single",0,6,0.5,59
6261364651966fe767b592fc32c6e263ffec1d7f,lock files on disk with a meaningful prefix.,0,6,0.5,60
6261364651966fe767b592fc32c6e263ffec1d7f,# We need a copy of lock_path because it is non-local,0,6,0.5,61
6261364651966fe767b592fc32c6e263ffec1d7f,# We need a copy of lock_path because it is non-local,1,6,0.5,62
6261364651966fe767b592fc32c6e263ffec1d7f,#             to create one. This is used to,1,6,0.5,63
6261364651966fe767b592fc32c6e263ffec1d7f,# That is  why we add the locales here explicitly if necessary so that,0,6,0.5,64
6261364651966fe767b592fc32c6e263ffec1d7f,if locale in language_list and alias not in language_list:,0,6,0.5,65
6261364651966fe767b592fc32c6e263ffec1d7f,# This method was added in python 2.7 (and it does the exact,1,5,0.41666666666666663,66
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Returns an iso8601 formatted date from timestamp.""""""",1,5,0.41666666666666663,67
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Unless required by applicable law or agreed to in writing, software",1,5,0.41666666666666663,68
6261364651966fe767b592fc32c6e263ffec1d7f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,5,0.41666666666666663,69
6261364651966fe767b592fc32c6e263ffec1d7f,help='The name of a logging configuration file. This file ',1,5,0.41666666666666663,70
6261364651966fe767b592fc32c6e263ffec1d7f,help='(Optional) The base directory used for relative ',1,5,0.41666666666666663,71
6261364651966fe767b592fc32c6e263ffec1d7f,"help='Data to append to log format when level is DEBUG.'),",1,5,0.41666666666666663,72
6261364651966fe767b592fc32c6e263ffec1d7f,logging_debug_format_suffix to append extra formatting if the log level is,1,5,0.41666666666666663,73
6261364651966fe767b592fc32c6e263ffec1d7f,:raises: :class:`DeprecatedConfig` if the system is configured for,1,5,0.41666666666666663,74
6261364651966fe767b592fc32c6e263ffec1d7f,"# NOTE(jecarey): If msg is not unicode, coerce it into unicode",1,5,0.41666666666666663,75
6261364651966fe767b592fc32c6e263ffec1d7f,"# Use old style calls, if the type is 'classobj' (Python 2.6)",1,5,0.41666666666666663,76
6261364651966fe767b592fc32c6e263ffec1d7f,# pass sys.stdout as a positional argument,1,5,0.41666666666666663,77
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""A thin wrapper that responds to `write` and logs.""""""",1,5,0.41666666666666663,78
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Stringify time in ISO 8601 format.""""""",1,5,0.41666666666666663,79
6261364651966fe767b592fc32c6e263ffec1d7f,For information about what variables are available for the formatter see:,1,5,0.41666666666666663,80
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Turn a formatted time back into a datetime.""""""",1,5,0.41666666666666663,81
6261364651966fe767b592fc32c6e263ffec1d7f,# are just handed a UUID for the instance.,1,5,0.41666666666666663,82
6261364651966fe767b592fc32c6e263ffec1d7f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,5,0.41666666666666663,83
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(mikal): the lock name cannot contain directory,0,5,0.41666666666666663,84
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Unless required by applicable law or agreed to in writing, software",1,5,0.41666666666666663,85
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Unless required by applicable law or agreed to in writing, software",0,5,0.41666666666666663,86
6261364651966fe767b592fc32c6e263ffec1d7f,This fixture is basically an alternative to the synchronized decorator with,0,5,0.41666666666666663,87
6261364651966fe767b592fc32c6e263ffec1d7f,the external flag so that tearDowns and addCleanups will be included in,0,5,0.41666666666666663,88
6261364651966fe767b592fc32c6e263ffec1d7f,"be the first line in a test method, like so::",0,5,0.41666666666666663,89
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.lock_path is used as a default.,0,5,0.41666666666666663,90
6261364651966fe767b592fc32c6e263ffec1d7f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,5,0.41666666666666663,91
6261364651966fe767b592fc32c6e263ffec1d7f,help=('Directory to use for lock files. Default to a ',1,5,0.41666666666666663,92
6261364651966fe767b592fc32c6e263ffec1d7f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,5,0.41666666666666663,93
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(mikal): the lock name cannot contain directory,1,5,0.41666666666666663,94
6261364651966fe767b592fc32c6e263ffec1d7f,"# only some params are used, and additionally we prevent errors for",1,5,0.41666666666666663,95
6261364651966fe767b592fc32c6e263ffec1d7f,# (erroneous) chain that builds a valid Message with,1,5,0.41666666666666663,96
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Unless required by applicable law or agreed to in writing, software",1,5,0.41666666666666663,97
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.lock_path is used as a default.,1,5,0.41666666666666663,98
6261364651966fe767b592fc32c6e263ffec1d7f,for admins to find messages related to a specific instance.,1,4,0.3333333333333333,99
6261364651966fe767b592fc32c6e263ffec1d7f,#    License for the specific language governing permissions and limitations,1,4,0.3333333333333333,100
6261364651966fe767b592fc32c6e263ffec1d7f,#    a copy of the License at,1,4,0.3333333333333333,101
6261364651966fe767b592fc32c6e263ffec1d7f,# Administrator of the National Aeronautics and Space Administration.,1,4,0.3333333333333333,102
6261364651966fe767b592fc32c6e263ffec1d7f,# Copyright 2010 United States Government as represented by the,1,4,0.3333333333333333,103
6261364651966fe767b592fc32c6e263ffec1d7f,:return: True if expiration is within the given duration,1,4,0.3333333333333333,104
6261364651966fe767b592fc32c6e263ffec1d7f,from neutron.openstack.common import log as logging,1,4,0.3333333333333333,105
6261364651966fe767b592fc32c6e263ffec1d7f,from oslo_log import log as logging,0,4,0.3333333333333333,106
6261364651966fe767b592fc32c6e263ffec1d7f,"Compute the difference in seconds between two date, time, or",1,4,0.3333333333333333,107
6261364651966fe767b592fc32c6e263ffec1d7f,"Note: tzinfo is stripped, but not required for relative times.",1,4,0.3333333333333333,108
6261364651966fe767b592fc32c6e263ffec1d7f,:param override_time: datetime instance or list thereof. If not,1,4,0.3333333333333333,109
6261364651966fe767b592fc32c6e263ffec1d7f,'A logging.Formatter log message format string which may ',1,4,0.3333333333333333,110
6261364651966fe767b592fc32c6e263ffec1d7f,It also allows setting of formatting information through conf.,1,4,0.3333333333333333,111
6261364651966fe767b592fc32c6e263ffec1d7f,# TODO(bogdando) use the format provided by RFCSysLogHandler,1,4,0.3333333333333333,112
6261364651966fe767b592fc32c6e263ffec1d7f,"'If no default is set, logging will go to stdout.'),",1,4,0.3333333333333333,113
6261364651966fe767b592fc32c6e263ffec1d7f,"help='Format string to use for log messages with context.'),",1,4,0.3333333333333333,114
6261364651966fe767b592fc32c6e263ffec1d7f,"# NOTE(jkoelker) Since we synthesized an audit level, make the logging",1,4,0.3333333333333333,115
6261364651966fe767b592fc32c6e263ffec1d7f,"# same logic, so we need to do the exact same logic so that",1,4,0.3333333333333333,116
6261364651966fe767b592fc32c6e263ffec1d7f,if facility is None and CONF.syslog_log_facility in facility_names:,1,4,0.3333333333333333,117
6261364651966fe767b592fc32c6e263ffec1d7f,"# python2.6 calls the argument strm, in 2.7 it's stream",1,4,0.3333333333333333,118
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(AAzza) in python2.6 Logger.setLevel doesn't convert string name,1,4,0.3333333333333333,119
6261364651966fe767b592fc32c6e263ffec1d7f,if name not in _loggers:,1,4,0.3333333333333333,120
6261364651966fe767b592fc32c6e263ffec1d7f,once it is created.,1,4,0.3333333333333333,121
6261364651966fe767b592fc32c6e263ffec1d7f,The flags used to set format strings are: logging_context_format_string,1,4,0.3333333333333333,122
6261364651966fe767b592fc32c6e263ffec1d7f,"# Cache this on the record, Logger will respect our formatted copy",1,4,0.3333333333333333,123
6261364651966fe767b592fc32c6e263ffec1d7f,"message = _(""Fatal call to deprecated config: %(msg)s"")",1,4,0.3333333333333333,124
6261364651966fe767b592fc32c6e263ffec1d7f,#    License for the specific language governing permissions and limitations,1,4,0.3333333333333333,125
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Parse time from ISO 8601 format.""""""",1,4,0.3333333333333333,126
6261364651966fe767b592fc32c6e263ffec1d7f,# should be deprecated in favor of context aware formatting.,1,4,0.3333333333333333,127
6261364651966fe767b592fc32c6e263ffec1d7f,#    a copy of the License at,1,4,0.3333333333333333,128
6261364651966fe767b592fc32c6e263ffec1d7f,if name not in _semaphores:,1,4,0.3333333333333333,129
6261364651966fe767b592fc32c6e263ffec1d7f,#    License for the specific language governing permissions and limitations,1,4,0.3333333333333333,130
6261364651966fe767b592fc32c6e263ffec1d7f,Call this at the start of execution to enable the gettextutils._,0,4,0.3333333333333333,131
6261364651966fe767b592fc32c6e263ffec1d7f,your project is importing _ directly instead of using the,0,4,0.3333333333333333,132
6261364651966fe767b592fc32c6e263ffec1d7f,#    a copy of the License at,0,4,0.3333333333333333,133
6261364651966fe767b592fc32c6e263ffec1d7f,#    License for the specific language governing permissions and limitations,0,4,0.3333333333333333,134
6261364651966fe767b592fc32c6e263ffec1d7f,test method exits. (either by completing or raising an exception),0,4,0.3333333333333333,135
6261364651966fe767b592fc32c6e263ffec1d7f,"workers both run a a method decorated with @synchronized('mylock',",0,4,0.3333333333333333,136
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Convenience function for configuring _() to use lazy gettext",0,4,0.3333333333333333,137
6261364651966fe767b592fc32c6e263ffec1d7f,if external and not CONF.disable_process_locking:,0,4,0.3333333333333333,138
6261364651966fe767b592fc32c6e263ffec1d7f,local_lock_path = lock_path or CONF.lock_path,0,4,0.3333333333333333,139
6261364651966fe767b592fc32c6e263ffec1d7f,your tests in an environment variable. The temporary dir will be deleted,0,4,0.3333333333333333,140
6261364651966fe767b592fc32c6e263ffec1d7f,"workers both run a a method decorated with @synchronized('mylock',",1,4,0.3333333333333333,141
6261364651966fe767b592fc32c6e263ffec1d7f,"external=True), only one of them will execute at a time.",1,4,0.3333333333333333,142
6261364651966fe767b592fc32c6e263ffec1d7f,"external=True), only one of them will execute at a time.",0,4,0.3333333333333333,143
6261364651966fe767b592fc32c6e263ffec1d7f,if external and not CONF.disable_process_locking:,1,4,0.3333333333333333,144
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(luisg): Here we trim down the dictionary passed as parameters,1,4,0.3333333333333333,145
6261364651966fe767b592fc32c6e263ffec1d7f,"# for the log level is project_name + ""-log-"" + log_level so messages",0,4,0.3333333333333333,146
6261364651966fe767b592fc32c6e263ffec1d7f,# where kwds is an empty dictionary.,1,4,0.3333333333333333,147
6261364651966fe767b592fc32c6e263ffec1d7f,# Apparently the full dictionary is the parameter,1,4,0.3333333333333333,148
6261364651966fe767b592fc32c6e263ffec1d7f,"if not keys and re.findall('(?:[^%]|^)%[a-z]', self.msgid):",1,4,0.3333333333333333,149
6261364651966fe767b592fc32c6e263ffec1d7f,"# object, for example if someone passes in Message() % locals() but",1,4,0.3333333333333333,150
6261364651966fe767b592fc32c6e263ffec1d7f,# Look for %(param) keys in msgid;,1,4,0.3333333333333333,151
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Return a dict that only has matching entries in the msgid.""""""",1,4,0.3333333333333333,152
6261364651966fe767b592fc32c6e263ffec1d7f,"# they are still not explicitly ""listed"" by locale_identifiers().",0,4,0.3333333333333333,153
6261364651966fe767b592fc32c6e263ffec1d7f,# Copy each item in case one does not support deep copy.,0,4,0.3333333333333333,154
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Build a single translation of a log message",0,4,0.3333333333333333,155
6261364651966fe767b592fc32c6e263ffec1d7f,#    a copy of the License at,1,4,0.3333333333333333,156
6261364651966fe767b592fc32c6e263ffec1d7f,"if not isinstance(context, dict) and getattr(context, 'to_dict', None):",1,3,0.25,157
6261364651966fe767b592fc32c6e263ffec1d7f,"'format without the APP-NAME is deprecated in I, '",1,3,0.25,158
6261364651966fe767b592fc32c6e263ffec1d7f,if context is None:,1,3,0.25,159
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(mikal): there are two options here because sometimes we are handed,1,3,0.25,160
6261364651966fe767b592fc32c6e263ffec1d7f,"help='Prefix each line of exception output with this format.'),",1,3,0.25,161
6261364651966fe767b592fc32c6e263ffec1d7f,"help='Format string to use for log messages without context.'),",1,3,0.25,162
6261364651966fe767b592fc32c6e263ffec1d7f,"'see the Python logging module documentation.'),",1,3,0.25,163
6261364651966fe767b592fc32c6e263ffec1d7f,'syslog message with APP-NAME (RFC5424). The ',1,3,0.25,164
6261364651966fe767b592fc32c6e263ffec1d7f,"'for logging. If enabled, prefixes the MSG part of the '",1,3,0.25,165
6261364651966fe767b592fc32c6e263ffec1d7f,#    syslog format deprecation in J,1,3,0.25,166
6261364651966fe767b592fc32c6e263ffec1d7f,help='(Optional) Name of log file to output to. ',1,3,0.25,167
6261364651966fe767b592fc32c6e263ffec1d7f,help='Format string for %%(asctime)s in log records. ',1,3,0.25,168
6261364651966fe767b592fc32c6e263ffec1d7f,help='Print more verbose output (set logging level to ',1,3,0.25,169
6261364651966fe767b592fc32c6e263ffec1d7f,"# In Python 3, the code fails because the 'manager' attribute",1,3,0.25,170
6261364651966fe767b592fc32c6e263ffec1d7f,if logfile and not logdir:,1,3,0.25,171
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(sdague): default the fancier formatting params,1,3,0.25,172
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Call this method when a deprecated feature is used.",1,3,0.25,173
6261364651966fe767b592fc32c6e263ffec1d7f,is logged at the 'critical' level and :class:`DeprecatedConfig` will,1,3,0.25,174
6261364651966fe767b592fc32c6e263ffec1d7f,"Otherwise, the message will be logged (once) at the 'warn' level.",1,3,0.25,175
6261364651966fe767b592fc32c6e263ffec1d7f,if 'extra' not in kwargs:,1,3,0.25,176
6261364651966fe767b592fc32c6e263ffec1d7f,message = _('Error loading logging config %(log_config)s: %(err_msg)s'),1,3,0.25,177
6261364651966fe767b592fc32c6e263ffec1d7f,# later in a backwards in-compatible change,1,3,0.25,178
6261364651966fe767b592fc32c6e263ffec1d7f,if default_log_levels is not None:,1,3,0.25,179
6261364651966fe767b592fc32c6e263ffec1d7f,msg = self.binary_name + ' ' + msg,1,3,0.25,180
6261364651966fe767b592fc32c6e263ffec1d7f,for pair in CONF.default_log_levels:,1,3,0.25,181
6261364651966fe767b592fc32c6e263ffec1d7f,#   after existing syslog format deprecation in J,1,3,0.25,182
6261364651966fe767b592fc32c6e263ffec1d7f,and logging_default_format_string.  You can also specify,1,3,0.25,183
6261364651966fe767b592fc32c6e263ffec1d7f,"If available, uses the context value stored in TLS - local.store.context",1,3,0.25,184
6261364651966fe767b592fc32c6e263ffec1d7f,# store request info,1,3,0.25,185
6261364651966fe767b592fc32c6e263ffec1d7f,:param dt: the time,1,3,0.25,186
6261364651966fe767b592fc32c6e263ffec1d7f,if key not in record.__dict__:,1,3,0.25,187
6261364651966fe767b592fc32c6e263ffec1d7f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.25,188
6261364651966fe767b592fc32c6e263ffec1d7f,if logging_context_format_string is not None:,1,3,0.25,189
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Return the total seconds of datetime.timedelta object.",1,3,0.25,190
6261364651966fe767b592fc32c6e263ffec1d7f,# so GC won't remove the item and there was no IO switch,1,3,0.25,191
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Advance overridden time using a datetime.timedelta.""""""",1,3,0.25,192
6261364651966fe767b592fc32c6e263ffec1d7f,for param in self.params:,0,3,0.25,193
6261364651966fe767b592fc32c6e263ffec1d7f,for param in self.params.values():,0,3,0.25,194
6261364651966fe767b592fc32c6e263ffec1d7f,if domain in _AVAILABLE_LANGUAGES:,0,3,0.25,195
6261364651966fe767b592fc32c6e263ffec1d7f,for param in self.params.values():,0,3,0.25,196
6261364651966fe767b592fc32c6e263ffec1d7f,for param in self.params.values():,1,3,0.25,197
6261364651966fe767b592fc32c6e263ffec1d7f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,3,0.25,198
6261364651966fe767b592fc32c6e263ffec1d7f,help=('Directory to use for lock files.')),0,3,0.25,199
6261364651966fe767b592fc32c6e263ffec1d7f,should work across multiple processes. This means that if two different,0,3,0.25,200
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Attempting to grab file lock ""%(lock)s""'),",0,3,0.25,201
6261364651966fe767b592fc32c6e263ffec1d7f,with lock as lock:,0,3,0.25,202
6261364651966fe767b592fc32c6e263ffec1d7f,afterwards and the return value will be preserved.,0,3,0.25,203
6261364651966fe767b592fc32c6e263ffec1d7f,should work across multiple processes. This means that if two different,1,3,0.25,204
6261364651966fe767b592fc32c6e263ffec1d7f,# this check is not racy - we're already holding ref locally,1,3,0.25,205
6261364651966fe767b592fc32c6e263ffec1d7f,"True, in which case, it'll yield an InterProcessLock instance.",0,3,0.25,206
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Attempting to grab file lock ""%(lock)s"" '",1,3,0.25,207
6261364651966fe767b592fc32c6e263ffec1d7f,# If we don't find any %(param) keys but have a %s,1,3,0.25,208
6261364651966fe767b592fc32c6e263ffec1d7f,"given, defaults to the current UTC time.",1,3,0.25,209
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(vish): This removes the tempdir if we needed,1,3,0.25,210
6261364651966fe767b592fc32c6e263ffec1d7f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.25,211
6261364651966fe767b592fc32c6e263ffec1d7f,module = 'neutron.v%s' % version,1,3,0.25,212
6261364651966fe767b592fc32c6e263ffec1d7f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,3,0.25,213
6261364651966fe767b592fc32c6e263ffec1d7f,# Save our existing parameters as defaults to protect,1,3,0.25,214
6261364651966fe767b592fc32c6e263ffec1d7f,"# arguments, and then does something like ""msg % kwds""",1,3,0.25,215
6261364651966fe767b592fc32c6e263ffec1d7f,# they are listed as supported.,0,3,0.25,216
6261364651966fe767b592fc32c6e263ffec1d7f,"# In Babel 1.3 they fixed the bug and they support these locales, but",0,3,0.25,217
6261364651966fe767b592fc32c6e263ffec1d7f,"# NOTE(luisg): Babel>=1.0,<1.3 has a bug where some OpenStack supported",0,3,0.25,218
6261364651966fe767b592fc32c6e263ffec1d7f,# for each level end up in their own catalog.,0,3,0.25,219
6261364651966fe767b592fc32c6e263ffec1d7f,"# We use separate translation catalogs for each log level, so set up a",0,3,0.25,220
6261364651966fe767b592fc32c6e263ffec1d7f,#             cleanup the locks left behind by unit,1,3,0.25,221
6261364651966fe767b592fc32c6e263ffec1d7f,return context,1,2,0.16666666666666666,222
6261364651966fe767b592fc32c6e263ffec1d7f,if not self._logger:,1,2,0.16666666666666666,223
6261364651966fe767b592fc32c6e263ffec1d7f,if logfile and logdir:,1,2,0.16666666666666666,224
6261364651966fe767b592fc32c6e263ffec1d7f,binary = binary or _get_binary_name(),1,2,0.16666666666666666,225
6261364651966fe767b592fc32c6e263ffec1d7f,# python 2.6 has this capability as well).,1,2,0.16666666666666666,226
6261364651966fe767b592fc32c6e263ffec1d7f,self.name = name,1,2,0.16666666666666666,227
6261364651966fe767b592fc32c6e263ffec1d7f,self.version = version,1,2,0.16666666666666666,228
6261364651966fe767b592fc32c6e263ffec1d7f,"if not isinstance(msg, six.text_type):",1,2,0.16666666666666666,229
6261364651966fe767b592fc32c6e263ffec1d7f,# underlying logger. Work around this issue.,1,2,0.16666666666666666,230
6261364651966fe767b592fc32c6e263ffec1d7f,self.logger = logger,1,2,0.16666666666666666,231
6261364651966fe767b592fc32c6e263ffec1d7f,"stdmsg = _(""Deprecated: %s"") % msg",1,2,0.16666666666666666,232
6261364651966fe767b592fc32c6e263ffec1d7f,if args in sent_args:,1,2,0.16666666666666666,233
6261364651966fe767b592fc32c6e263ffec1d7f,"# Already logged this message, so don't log it again.",1,2,0.16666666666666666,234
6261364651966fe767b592fc32c6e263ffec1d7f,#                possibly cause string encoding trouble,1,2,0.16666666666666666,235
6261364651966fe767b592fc32c6e263ffec1d7f,msg = six.text_type(msg),1,2,0.16666666666666666,236
6261364651966fe767b592fc32c6e263ffec1d7f,except AttributeError:  # NOTE(jkoelker) NullHandler added in Python 2.7,1,2,0.16666666666666666,237
6261364651966fe767b592fc32c6e263ffec1d7f,context = context.to_dict(),1,2,0.16666666666666666,238
6261364651966fe767b592fc32c6e263ffec1d7f,from neutron.openstack.common._i18n import _,1,2,0.16666666666666666,239
6261364651966fe767b592fc32c6e263ffec1d7f,logging.AUDIT = logging.INFO + 1,1,2,0.16666666666666666,240
6261364651966fe767b592fc32c6e263ffec1d7f,'is appended to any existing logging configuration ',1,2,0.16666666666666666,241
6261364651966fe767b592fc32c6e263ffec1d7f,from oslo.serialization import jsonutils,1,2,0.16666666666666666,242
6261364651966fe767b592fc32c6e263ffec1d7f,from six import moves,1,2,0.16666666666666666,243
6261364651966fe767b592fc32c6e263ffec1d7f,"context = kwargs.pop('context', None)",1,2,0.16666666666666666,244
6261364651966fe767b592fc32c6e263ffec1d7f,from neutron.openstack.common import local,1,2,0.16666666666666666,245
6261364651966fe767b592fc32c6e263ffec1d7f,help='Print debugging output (set logging level to ',1,2,0.16666666666666666,246
6261364651966fe767b592fc32c6e263ffec1d7f,"'DEBUG instead of default WARNING level).'),",1,2,0.16666666666666666,247
6261364651966fe767b592fc32c6e263ffec1d7f,"'INFO instead of default WARNING level).'),",1,2,0.16666666666666666,248
6261364651966fe767b592fc32c6e263ffec1d7f,"'files. For details about logging configuration files, '",1,2,0.16666666666666666,249
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Entry point for oslo.config-generator.""""""",1,2,0.16666666666666666,250
6261364651966fe767b592fc32c6e263ffec1d7f,'use any of the available logging.LogRecord attributes. ',1,2,0.16666666666666666,251
6261364651966fe767b592fc32c6e263ffec1d7f,"'Existing syslog format is DEPRECATED during I, '",1,2,0.16666666666666666,252
6261364651966fe767b592fc32c6e263ffec1d7f,"'and will change in J to honor RFC5424.'),",1,2,0.16666666666666666,253
6261364651966fe767b592fc32c6e263ffec1d7f,# TODO(bogdando) remove or use True after existing,1,2,0.16666666666666666,254
6261364651966fe767b592fc32c6e263ffec1d7f,help='(Optional) Enables or disables syslog rfc5424 format ',1,2,0.16666666666666666,255
6261364651966fe767b592fc32c6e263ffec1d7f,"help='Enables or disables publication of error events.'),",1,2,0.16666666666666666,256
6261364651966fe767b592fc32c6e263ffec1d7f,"help='Enables or disables fatal status of deprecations.'),",1,2,0.16666666666666666,257
6261364651966fe767b592fc32c6e263ffec1d7f,extra = kwargs['extra'],1,2,0.16666666666666666,258
6261364651966fe767b592fc32c6e263ffec1d7f,#  is 'type' (Python 2.7).,1,2,0.16666666666666666,259
6261364651966fe767b592fc32c6e263ffec1d7f,if not context:,1,2,0.16666666666666666,260
6261364651966fe767b592fc32c6e263ffec1d7f,# store project info,1,2,0.16666666666666666,261
6261364651966fe767b592fc32c6e263ffec1d7f,logger = logging.getLogger(mod),1,2,0.16666666666666666,262
6261364651966fe767b592fc32c6e263ffec1d7f,# to integer code.,1,2,0.16666666666666666,263
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.error('Unable to add syslog handler. Verify that syslog ',1,2,0.16666666666666666,264
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Returns lazy logger.",1,2,0.16666666666666666,265
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""A context.RequestContext aware formatter configured through flags.",1,2,0.16666666666666666,266
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Uses contextstring if request_id is set, otherwise default.""""""",1,2,0.16666666666666666,267
6261364651966fe767b592fc32c6e263ffec1d7f,"if not isinstance(record.msg, six.text_type):",1,2,0.16666666666666666,268
6261364651966fe767b592fc32c6e263ffec1d7f,"for k, v in d.items():",1,2,0.16666666666666666,269
6261364651966fe767b592fc32c6e263ffec1d7f,"context = getattr(local.store, 'context', None)",1,2,0.16666666666666666,270
6261364651966fe767b592fc32c6e263ffec1d7f,# they get used,1,2,0.16666666666666666,271
6261364651966fe767b592fc32c6e263ffec1d7f,"for key in ('instance', 'color', 'user_identity'):",1,2,0.16666666666666666,272
6261364651966fe767b592fc32c6e263ffec1d7f,if (record.levelno == logging.DEBUG and,1,2,0.16666666666666666,273
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Format exception output with CONF.logging_exception_prefix.""""""",1,2,0.16666666666666666,274
6261364651966fe767b592fc32c6e263ffec1d7f,if not record:,1,2,0.16666666666666666,275
6261364651966fe767b592fc32c6e263ffec1d7f,for line in lines:,1,2,0.16666666666666666,276
6261364651966fe767b592fc32c6e263ffec1d7f,import os,1,2,0.16666666666666666,277
6261364651966fe767b592fc32c6e263ffec1d7f,'be removed in the next release'),1,2,0.16666666666666666,278
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.info('Deprecated: log_format is now deprecated and will ',1,2,0.16666666666666666,279
6261364651966fe767b592fc32c6e263ffec1d7f,for handler in log_root.handlers:,1,2,0.16666666666666666,280
6261364651966fe767b592fc32c6e263ffec1d7f,"def _setup_logging_from_conf(project, version):",1,2,0.16666666666666666,281
6261364651966fe767b592fc32c6e263ffec1d7f,"instance = kwargs.pop('instance', None)",1,2,0.16666666666666666,282
6261364651966fe767b592fc32c6e263ffec1d7f,instance_uuid = (extra.get('instance_uuid') or,1,2,0.16666666666666666,283
6261364651966fe767b592fc32c6e263ffec1d7f,instance_extra = CONF.instance_format % instance,1,2,0.16666666666666666,284
6261364651966fe767b592fc32c6e263ffec1d7f,"return msg, kwargs",1,2,0.16666666666666666,285
6261364651966fe767b592fc32c6e263ffec1d7f,"# NOTE(jkoelker) we ignore the fmt argument, but its still there",1,2,0.16666666666666666,286
6261364651966fe767b592fc32c6e263ffec1d7f,line.rstrip().splitlines()) for line in lines],1,2,0.16666666666666666,287
6261364651966fe767b592fc32c6e263ffec1d7f,"message = {'message': record.getMessage(),",1,2,0.16666666666666666,288
6261364651966fe767b592fc32c6e263ffec1d7f,"extra = {'exc_info': (exc_type, value, tb)}",1,2,0.16666666666666666,289
6261364651966fe767b592fc32c6e263ffec1d7f,# default_log_level. This is insurance because,1,2,0.16666666666666666,290
6261364651966fe767b592fc32c6e263ffec1d7f,# we introduced the default_log_level parameter,1,2,0.16666666666666666,291
6261364651966fe767b592fc32c6e263ffec1d7f,if facility is None:,1,2,0.16666666666666666,292
6261364651966fe767b592fc32c6e263ffec1d7f,for fac in valid_facilities)),1,2,0.16666666666666666,293
6261364651966fe767b592fc32c6e263ffec1d7f,# Do not use super() unless type(logging.handlers.SysLogHandler),1,2,0.16666666666666666,294
6261364651966fe767b592fc32c6e263ffec1d7f,"msg = logging.handlers.SysLogHandler.format(self, record)",1,2,0.16666666666666666,295
6261364651966fe767b592fc32c6e263ffec1d7f,return msg,1,2,0.16666666666666666,296
6261364651966fe767b592fc32c6e263ffec1d7f,from oslo.config import cfg,1,2,0.16666666666666666,297
6261364651966fe767b592fc32c6e263ffec1d7f,from oslo.utils import importutils,1,2,0.16666666666666666,298
6261364651966fe767b592fc32c6e263ffec1d7f,import logging,1,2,0.16666666666666666,299
6261364651966fe767b592fc32c6e263ffec1d7f,if not local_lock_path:,1,2,0.16666666666666666,300
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Got file lock ""%(lock)s"" at %(path)s'),",0,2,0.16666666666666666,301
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Released file lock ""%(lock)s"" at %(path)s'),",0,2,0.16666666666666666,302
6261364651966fe767b592fc32c6e263ffec1d7f,from eventlet import semaphore,1,2,0.16666666666666666,303
6261364651966fe767b592fc32c6e263ffec1d7f,hyphen ('-') if specified.,1,2,0.16666666666666666,304
6261364651966fe767b592fc32c6e263ffec1d7f,# (only valid in greenthreads),1,2,0.16666666666666666,305
6261364651966fe767b592fc32c6e263ffec1d7f,"if not hasattr(local.strong_store, 'locks_held'):",1,2,0.16666666666666666,306
6261364651966fe767b592fc32c6e263ffec1d7f,local_lock_path = lock_path,1,2,0.16666666666666666,307
6261364651966fe767b592fc32c6e263ffec1d7f,local_lock_path = CONF.lock_path,1,2,0.16666666666666666,308
6261364651966fe767b592fc32c6e263ffec1d7f,sep = '' if prefix.endswith('-') else '-',0,2,0.16666666666666666,309
6261364651966fe767b592fc32c6e263ffec1d7f,if not os.path.exists(local_lock_path):,1,2,0.16666666666666666,310
6261364651966fe767b592fc32c6e263ffec1d7f,lock = InterProcessLock(lock_file_path),1,2,0.16666666666666666,311
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Got file lock ""%(lock)s"" at '",1,2,0.16666666666666666,312
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Released file lock ""%(lock)s"" at '",1,2,0.16666666666666666,313
6261364651966fe767b592fc32c6e263ffec1d7f,"for level in ['info', 'warning', 'error', 'critical']",0,2,0.16666666666666666,314
6261364651966fe767b592fc32c6e263ffec1d7f,# Translators for log levels.,0,2,0.16666666666666666,315
6261364651966fe767b592fc32c6e263ffec1d7f,# the level.,0,2,0.16666666666666666,316
6261364651966fe767b592fc32c6e263ffec1d7f,lock = InterProcessLock(lock_file_path),0,2,0.16666666666666666,317
6261364651966fe767b592fc32c6e263ffec1d7f,return name,0,2,0.16666666666666666,318
6261364651966fe767b592fc32c6e263ffec1d7f,"for key, val in self.params.items():",0,2,0.16666666666666666,319
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,2,0.16666666666666666,320
6261364651966fe767b592fc32c6e263ffec1d7f,import logging,0,2,0.16666666666666666,321
6261364651966fe767b592fc32c6e263ffec1d7f,#    under the License.,1,2,0.16666666666666666,322
6261364651966fe767b592fc32c6e263ffec1d7f,import UserString as _userString,0,2,0.16666666666666666,323
6261364651966fe767b592fc32c6e263ffec1d7f,import collections as _userString,0,2,0.16666666666666666,324
6261364651966fe767b592fc32c6e263ffec1d7f,gettextutils.install() way of importing the _ function.,0,2,0.16666666666666666,325
6261364651966fe767b592fc32c6e263ffec1d7f,if not self.params:,0,2,0.16666666666666666,326
6261364651966fe767b592fc32c6e263ffec1d7f,from six import moves,0,2,0.16666666666666666,327
6261364651966fe767b592fc32c6e263ffec1d7f,#    under the License.,0,2,0.16666666666666666,328
6261364651966fe767b592fc32c6e263ffec1d7f,if not prefix:,0,2,0.16666666666666666,329
6261364651966fe767b592fc32c6e263ffec1d7f,from neutron.openstack.common import lockutils,0,2,0.16666666666666666,330
6261364651966fe767b592fc32c6e263ffec1d7f,import subprocess,0,2,0.16666666666666666,331
6261364651966fe767b592fc32c6e263ffec1d7f,This function yields a `threading.Semaphore` instance (if we don't use,0,2,0.16666666666666666,332
6261364651966fe767b592fc32c6e263ffec1d7f,"if not hasattr(local.strong_store, 'locks_held'):",0,2,0.16666666666666666,333
6261364651966fe767b592fc32c6e263ffec1d7f,if not local_lock_path:,0,2,0.16666666666666666,334
6261364651966fe767b592fc32c6e263ffec1d7f,if not os.path.exists(local_lock_path):,0,2,0.16666666666666666,335
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.info(_('Created lock path: %s'), local_lock_path)",0,2,0.16666666666666666,336
6261364651966fe767b592fc32c6e263ffec1d7f,# Merge the dictionaries,0,2,0.16666666666666666,337
6261364651966fe767b592fc32c6e263ffec1d7f,"eventlet.monkey_patch(), else `semaphore.Semaphore`) unless external is",0,2,0.16666666666666666,338
6261364651966fe767b592fc32c6e263ffec1d7f,"for key, val in other.items():",0,2,0.16666666666666666,339
6261364651966fe767b592fc32c6e263ffec1d7f,utcnow.override_time = override_time or datetime.datetime.utcnow(),1,2,0.16666666666666666,340
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Return True if after is newer than seconds.""""""",1,2,0.16666666666666666,341
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Timestamp version of our utcnow function.""""""",1,2,0.16666666666666666,342
6261364651966fe767b592fc32c6e263ffec1d7f,if utcnow.override_time is None:,1,2,0.16666666666666666,343
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(kgriffs): This is several times faster,1,2,0.16666666666666666,344
6261364651966fe767b592fc32c6e263ffec1d7f,# than going through calendar.timegm(...),1,2,0.16666666666666666,345
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.16666666666666666,346
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Overridable version of utils.utcnow.""""""",1,2,0.16666666666666666,347
6261364651966fe767b592fc32c6e263ffec1d7f,assert utcnow.override_time is not None,1,2,0.16666666666666666,348
6261364651966fe767b592fc32c6e263ffec1d7f,if offset is None:,1,2,0.16666666666666666,349
6261364651966fe767b592fc32c6e263ffec1d7f,for dt in utcnow.override_time:,1,2,0.16666666666666666,350
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Make an rpc-safe datetime with microseconds.",1,2,0.16666666666666666,351
6261364651966fe767b592fc32c6e263ffec1d7f,if not now:,1,2,0.16666666666666666,352
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Return the difference between two timing objects.",1,2,0.16666666666666666,353
6261364651966fe767b592fc32c6e263ffec1d7f,"datetime objects (as a float, to microsecond resolution).",1,2,0.16666666666666666,354
6261364651966fe767b592fc32c6e263ffec1d7f,"doesn't have method total_seconds in Python2.6, calculate it manually.",1,2,0.16666666666666666,355
6261364651966fe767b592fc32c6e263ffec1d7f,"# locales (e.g. 'zh_CN', and 'zh_TW') aren't supported even though they",0,2,0.16666666666666666,356
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Return True if before is older than seconds.""""""",1,2,0.16666666666666666,357
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Advance overridden time by seconds.""""""",1,2,0.16666666666666666,358
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Returns formatted utcnow.""""""",1,2,0.16666666666666666,359
6261364651966fe767b592fc32c6e263ffec1d7f,"module = '.'.join((module, submodule))",1,2,0.16666666666666666,360
6261364651966fe767b592fc32c6e263ffec1d7f,# are perfectly legitimate locales:,0,2,0.16666666666666666,361
6261364651966fe767b592fc32c6e263ffec1d7f,tz = at.tzinfo.tzname(None) if at.tzinfo else 'UTC',1,2,0.16666666666666666,362
6261364651966fe767b592fc32c6e263ffec1d7f,"for (locale, alias) in six.iteritems(aliases):",0,2,0.16666666666666666,363
6261364651966fe767b592fc32c6e263ffec1d7f,# non-deepcopyable objects by unicoding() them.,1,2,0.16666666666666666,364
6261364651966fe767b592fc32c6e263ffec1d7f,for key in keys:,1,2,0.16666666666666666,365
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.16666666666666666,366
6261364651966fe767b592fc32c6e263ffec1d7f,#    under the License.,1,2,0.16666666666666666,367
6261364651966fe767b592fc32c6e263ffec1d7f,"keys = re.findall('(?:[^%]|^)?%\((\w*)\)[a-z]', self.msgid)",1,2,0.16666666666666666,368
6261364651966fe767b592fc32c6e263ffec1d7f,return default,1,2,0.16666666666666666,369
6261364651966fe767b592fc32c6e263ffec1d7f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,2,0.16666666666666666,370
6261364651966fe767b592fc32c6e263ffec1d7f,#    under the License.,1,2,0.16666666666666666,371
6261364651966fe767b592fc32c6e263ffec1d7f,import time,1,2,0.16666666666666666,372
6261364651966fe767b592fc32c6e263ffec1d7f,import iso8601,1,2,0.16666666666666666,373
6261364651966fe767b592fc32c6e263ffec1d7f,if not subsecond,1,2,0.16666666666666666,374
6261364651966fe767b592fc32c6e263ffec1d7f,if not at:,1,2,0.16666666666666666,375
6261364651966fe767b592fc32c6e263ffec1d7f,#                since logging.config.fileConfig passes it.,1,1,0.08333333333333333,376
6261364651966fe767b592fc32c6e263ffec1d7f,"def audit(self, msg, *args, **kwargs):",1,1,0.08333333333333333,377
6261364651966fe767b592fc32c6e263ffec1d7f,"def isEnabledFor(self, level):",1,1,0.08333333333333333,378
6261364651966fe767b592fc32c6e263ffec1d7f,if _PY26:,1,1,0.08333333333333333,379
6261364651966fe767b592fc32c6e263ffec1d7f,return self.logger.isEnabledFor(level),1,1,0.08333333333333333,380
6261364651966fe767b592fc32c6e263ffec1d7f,class LazyAdapter(BaseLoggerAdapter):,1,1,0.08333333333333333,381
6261364651966fe767b592fc32c6e263ffec1d7f,"return super(BaseLoggerAdapter, self).isEnabledFor(level)",1,1,0.08333333333333333,382
6261364651966fe767b592fc32c6e263ffec1d7f,self.extra = {},1,1,0.08333333333333333,383
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, name='unknown', version='unknown'):",1,1,0.08333333333333333,384
6261364651966fe767b592fc32c6e263ffec1d7f,self._logger = None,1,1,0.08333333333333333,385
6261364651966fe767b592fc32c6e263ffec1d7f,"return '%s.log' % (os.path.join(logdir, binary),)",1,1,0.08333333333333333,386
6261364651966fe767b592fc32c6e263ffec1d7f,class BaseLoggerAdapter(logging.LoggerAdapter):,1,1,0.08333333333333333,387
6261364651966fe767b592fc32c6e263ffec1d7f,def _get_binary_name():,1,1,0.08333333333333333,388
6261364651966fe767b592fc32c6e263ffec1d7f,if logdir:,1,1,0.08333333333333333,389
6261364651966fe767b592fc32c6e263ffec1d7f,"return os.path.join(logdir, logfile)",1,1,0.08333333333333333,390
6261364651966fe767b592fc32c6e263ffec1d7f,return logfile,1,1,0.08333333333333333,391
6261364651966fe767b592fc32c6e263ffec1d7f,logdir = CONF.log_dir,1,1,0.08333333333333333,392
6261364651966fe767b592fc32c6e263ffec1d7f,logfile = CONF.log_file,1,1,0.08333333333333333,393
6261364651966fe767b592fc32c6e263ffec1d7f,def _get_log_file_path(binary=None):,1,1,0.08333333333333333,394
6261364651966fe767b592fc32c6e263ffec1d7f,return os.path.basename(inspect.stack()[-1][1]),1,1,0.08333333333333333,395
6261364651966fe767b592fc32c6e263ffec1d7f,return None,1,1,0.08333333333333333,396
6261364651966fe767b592fc32c6e263ffec1d7f,def _dictify_context(context):,1,1,0.08333333333333333,397
6261364651966fe767b592fc32c6e263ffec1d7f,self.lock = None,1,1,0.08333333333333333,398
6261364651966fe767b592fc32c6e263ffec1d7f,def createLock(self):,1,1,0.08333333333333333,399
6261364651966fe767b592fc32c6e263ffec1d7f,"self._logger = getLogger(self.name, self.version)",1,1,0.08333333333333333,400
6261364651966fe767b592fc32c6e263ffec1d7f,def logger(self):,1,1,0.08333333333333333,401
6261364651966fe767b592fc32c6e263ffec1d7f,if context:,1,1,0.08333333333333333,402
6261364651966fe767b592fc32c6e263ffec1d7f,if six.PY3:,1,1,0.08333333333333333,403
6261364651966fe767b592fc32c6e263ffec1d7f,self._logger.manager = self._logger.logger.manager,1,1,0.08333333333333333,404
6261364651966fe767b592fc32c6e263ffec1d7f,pass,1,1,0.08333333333333333,405
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, fmt=None, datefmt=None):",1,1,0.08333333333333333,406
6261364651966fe767b592fc32c6e263ffec1d7f,class JSONFormatter(logging.Formatter):,1,1,0.08333333333333333,407
6261364651966fe767b592fc32c6e263ffec1d7f,extra['extra'] = extra.copy(),1,1,0.08333333333333333,408
6261364651966fe767b592fc32c6e263ffec1d7f,extra['version'] = self.version,1,1,0.08333333333333333,409
6261364651966fe767b592fc32c6e263ffec1d7f,extra['project'] = self.project,1,1,0.08333333333333333,410
6261364651966fe767b592fc32c6e263ffec1d7f,extra['instance'] = instance_extra,1,1,0.08333333333333333,411
6261364651966fe767b592fc32c6e263ffec1d7f,instance_extra = (CONF.instance_uuid_format,1,1,0.08333333333333333,412
6261364651966fe767b592fc32c6e263ffec1d7f,if instance:,1,1,0.08333333333333333,413
6261364651966fe767b592fc32c6e263ffec1d7f,instance_extra = '',1,1,0.08333333333333333,414
6261364651966fe767b592fc32c6e263ffec1d7f,kwargs['extra'] = {},1,1,0.08333333333333333,415
6261364651966fe767b592fc32c6e263ffec1d7f,"def process(self, msg, kwargs):",1,1,0.08333333333333333,416
6261364651966fe767b592fc32c6e263ffec1d7f,return,1,1,0.08333333333333333,417
6261364651966fe767b592fc32c6e263ffec1d7f,"sent_args = self._deprecated_messages_sent.setdefault(msg, list())",1,1,0.08333333333333333,418
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.fatal_deprecations:,1,1,0.08333333333333333,419
6261364651966fe767b592fc32c6e263ffec1d7f,"def deprecated(self, msg, *args, **kwargs):",1,1,0.08333333333333333,420
6261364651966fe767b592fc32c6e263ffec1d7f,return self.logger.handlers,1,1,0.08333333333333333,421
6261364651966fe767b592fc32c6e263ffec1d7f,def handlers(self):,1,1,0.08333333333333333,422
6261364651966fe767b592fc32c6e263ffec1d7f,self._deprecated_messages_sent = dict(),1,1,0.08333333333333333,423
6261364651966fe767b592fc32c6e263ffec1d7f,self.version = version_string,1,1,0.08333333333333333,424
6261364651966fe767b592fc32c6e263ffec1d7f,self.project = project_name,1,1,0.08333333333333333,425
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, logger, project_name, version_string):",1,1,0.08333333333333333,426
6261364651966fe767b592fc32c6e263ffec1d7f,warn = logging.LoggerAdapter.warning,1,1,0.08333333333333333,427
6261364651966fe767b592fc32c6e263ffec1d7f,class ContextAdapter(BaseLoggerAdapter):,1,1,0.08333333333333333,428
6261364651966fe767b592fc32c6e263ffec1d7f,return self._logger,1,1,0.08333333333333333,429
6261364651966fe767b592fc32c6e263ffec1d7f,"def emit(self, record):",1,1,0.08333333333333333,430
6261364651966fe767b592fc32c6e263ffec1d7f,return normalize_time(dt) <= soon,1,1,0.08333333333333333,431
6261364651966fe767b592fc32c6e263ffec1d7f,"def handle(self, record):",1,1,0.08333333333333333,432
6261364651966fe767b592fc32c6e263ffec1d7f,class NullHandler(logging.Handler):,1,1,0.08333333333333333,433
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""",1,1,0.08333333333333333,434
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""OpenStack logging handler.",1,1,0.08333333333333333,435
6261364651966fe767b592fc32c6e263ffec1d7f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.08333333333333333,436
6261364651966fe767b592fc32c6e263ffec1d7f,#,1,1,0.08333333333333333,437
6261364651966fe767b592fc32c6e263ffec1d7f,# All Rights Reserved.,1,1,0.08333333333333333,438
6261364651966fe767b592fc32c6e263ffec1d7f,# Copyright 2011 OpenStack Foundation.,1,1,0.08333333333333333,439
6261364651966fe767b592fc32c6e263ffec1d7f,"def formatException(self, ei, strip_newlines=True):",1,1,0.08333333333333333,440
6261364651966fe767b592fc32c6e263ffec1d7f,soon = (utcnow() + datetime.timedelta(seconds=window)),1,1,0.08333333333333333,441
6261364651966fe767b592fc32c6e263ffec1d7f,"def is_soon(dt, window):",1,1,0.08333333333333333,442
6261364651966fe767b592fc32c6e263ffec1d7f,return ((delta.days * 24 * 3600) + delta.seconds +,1,1,0.08333333333333333,443
6261364651966fe767b592fc32c6e263ffec1d7f,return delta.total_seconds(),1,1,0.08333333333333333,444
6261364651966fe767b592fc32c6e263ffec1d7f,"Compute total seconds of datetime.timedelta, datetime.timedelta",1,1,0.08333333333333333,445
6261364651966fe767b592fc32c6e263ffec1d7f,def total_seconds(delta):,1,1,0.08333333333333333,446
6261364651966fe767b592fc32c6e263ffec1d7f,return total_seconds(delta),1,1,0.08333333333333333,447
6261364651966fe767b592fc32c6e263ffec1d7f,delta = after - before,1,1,0.08333333333333333,448
6261364651966fe767b592fc32c6e263ffec1d7f,"def delta_seconds(before, after):",1,1,0.08333333333333333,449
6261364651966fe767b592fc32c6e263ffec1d7f,"return datetime.datetime(day=tyme['day'],",1,1,0.08333333333333333,450
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Unmarshall a datetime dict.""""""",1,1,0.08333333333333333,451
6261364651966fe767b592fc32c6e263ffec1d7f,def unmarshall_time(tyme):,1,1,0.08333333333333333,452
6261364651966fe767b592fc32c6e263ffec1d7f,"return dict(day=now.day, month=now.month, year=now.year, hour=now.hour,",1,1,0.08333333333333333,453
6261364651966fe767b592fc32c6e263ffec1d7f,now = utcnow(),1,1,0.08333333333333333,454
6261364651966fe767b592fc32c6e263ffec1d7f,def marshall_now(now=None):,1,1,0.08333333333333333,455
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Remove the overridden time.""""""",1,1,0.08333333333333333,456
6261364651966fe767b592fc32c6e263ffec1d7f,def clear_time_override():,1,1,0.08333333333333333,457
6261364651966fe767b592fc32c6e263ffec1d7f,def advance_time_seconds(seconds):,1,1,0.08333333333333333,458
6261364651966fe767b592fc32c6e263ffec1d7f,import copy,1,1,0.08333333333333333,459
6261364651966fe767b592fc32c6e263ffec1d7f,import inspect,1,1,0.08333333333333333,460
6261364651966fe767b592fc32c6e263ffec1d7f,import itertools,1,1,0.08333333333333333,461
6261364651966fe767b592fc32c6e263ffec1d7f,"'and will be removed in J.'),",1,1,0.08333333333333333,462
6261364651966fe767b592fc32c6e263ffec1d7f,NullHandler = logging.NullHandler,1,1,0.08333333333333333,463
6261364651966fe767b592fc32c6e263ffec1d7f,# our new audit level,1,1,0.08333333333333333,464
6261364651966fe767b592fc32c6e263ffec1d7f,"return [(None, copy.deepcopy(common_cli_opts)),",1,1,0.08333333333333333,465
6261364651966fe767b592fc32c6e263ffec1d7f,def list_opts():,1,1,0.08333333333333333,466
6261364651966fe767b592fc32c6e263ffec1d7f,CONF = cfg.CONF,1,1,0.08333333333333333,467
6261364651966fe767b592fc32c6e263ffec1d7f,"help='List of logger=LEVEL pairs.'),",1,1,0.08333333333333333,468
6261364651966fe767b592fc32c6e263ffec1d7f,log_opts = [,1,1,0.08333333333333333,469
6261364651966fe767b592fc32c6e263ffec1d7f,"DEFAULT_LOG_LEVELS = ['amqp=WARN', 'amqplib=WARN', 'boto=WARN',",1,1,0.08333333333333333,470
6261364651966fe767b592fc32c6e263ffec1d7f,help='Log output to standard error.'),1,1,0.08333333333333333,471
6261364651966fe767b592fc32c6e263ffec1d7f,generic_log_opts = [,1,1,0.08333333333333333,472
6261364651966fe767b592fc32c6e263ffec1d7f,help='Syslog facility to receive log lines.'),1,1,0.08333333333333333,473
6261364651966fe767b592fc32c6e263ffec1d7f,help='Use syslog for logging. ',1,1,0.08333333333333333,474
6261364651966fe767b592fc32c6e263ffec1d7f,import logging.config,1,1,0.08333333333333333,475
6261364651966fe767b592fc32c6e263ffec1d7f,'logging_context_format_string and ',1,1,0.08333333333333333,476
6261364651966fe767b592fc32c6e263ffec1d7f,'This option is deprecated.  Please use ',1,1,0.08333333333333333,477
6261364651966fe767b592fc32c6e263ffec1d7f,logging_cli_opts = [,1,1,0.08333333333333333,478
6261364651966fe767b592fc32c6e263ffec1d7f,common_cli_opts = [,1,1,0.08333333333333333,479
6261364651966fe767b592fc32c6e263ffec1d7f,"_DEFAULT_LOG_DATE_FORMAT = ""%Y-%m-%d %H:%M:%S""",1,1,0.08333333333333333,480
6261364651966fe767b592fc32c6e263ffec1d7f,"_PY26 = sys.version_info[0:2] == (2, 6)",1,1,0.08333333333333333,481
6261364651966fe767b592fc32c6e263ffec1d7f,import six,1,1,0.08333333333333333,482
6261364651966fe767b592fc32c6e263ffec1d7f,import traceback,1,1,0.08333333333333333,483
6261364651966fe767b592fc32c6e263ffec1d7f,import sys,1,1,0.08333333333333333,484
6261364651966fe767b592fc32c6e263ffec1d7f,import socket,1,1,0.08333333333333333,485
6261364651966fe767b592fc32c6e263ffec1d7f,import logging.handlers,1,1,0.08333333333333333,486
6261364651966fe767b592fc32c6e263ffec1d7f,self.datefmt = datefmt,1,1,0.08333333333333333,487
6261364651966fe767b592fc32c6e263ffec1d7f,logpath = _get_log_file_path(),1,1,0.08333333333333333,488
6261364651966fe767b592fc32c6e263ffec1d7f,lines = traceback.format_exception(*ei),1,1,0.08333333333333333,489
6261364651966fe767b592fc32c6e263ffec1d7f,self._fmt = fmt,1,1,0.08333333333333333,490
6261364651966fe767b592fc32c6e263ffec1d7f,fmt = CONF.logging_default_format_string,1,1,0.08333333333333333,491
6261364651966fe767b592fc32c6e263ffec1d7f,fmt = CONF.logging_context_format_string,1,1,0.08333333333333333,492
6261364651966fe767b592fc32c6e263ffec1d7f,if record.__dict__.get('request_id'):,1,1,0.08333333333333333,493
6261364651966fe767b592fc32c6e263ffec1d7f,record.__dict__[key] = '',1,1,0.08333333333333333,494
6261364651966fe767b592fc32c6e263ffec1d7f,d = _dictify_context(context),1,1,0.08333333333333333,495
6261364651966fe767b592fc32c6e263ffec1d7f,record.version = self.version,1,1,0.08333333333333333,496
6261364651966fe767b592fc32c6e263ffec1d7f,record.project = self.project,1,1,0.08333333333333333,497
6261364651966fe767b592fc32c6e263ffec1d7f,record.msg = six.text_type(record.msg),1,1,0.08333333333333333,498
6261364651966fe767b592fc32c6e263ffec1d7f,"self.version = kwargs.pop('version', 'unknown')",1,1,0.08333333333333333,499
6261364651966fe767b592fc32c6e263ffec1d7f,"self.project = kwargs.pop('project', 'unknown')",1,1,0.08333333333333333,500
6261364651966fe767b592fc32c6e263ffec1d7f,:type version: string,1,1,0.08333333333333333,501
6261364651966fe767b592fc32c6e263ffec1d7f,:keyword version: project version,1,1,0.08333333333333333,502
6261364651966fe767b592fc32c6e263ffec1d7f,:type project: string,1,1,0.08333333333333333,503
6261364651966fe767b592fc32c6e263ffec1d7f,:keyword project: project name,1,1,0.08333333333333333,504
6261364651966fe767b592fc32c6e263ffec1d7f,format string.,1,1,0.08333333333333333,505
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Initialize ContextFormatter instance",1,1,0.08333333333333333,506
6261364651966fe767b592fc32c6e263ffec1d7f,class ContextFormatter(logging.Formatter):,1,1,0.08333333333333333,507
6261364651966fe767b592fc32c6e263ffec1d7f,"def write(self, msg):",1,1,0.08333333333333333,508
6261364651966fe767b592fc32c6e263ffec1d7f,self.level = level,1,1,0.08333333333333333,509
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, logger, level=logging.INFO):",1,1,0.08333333333333333,510
6261364651966fe767b592fc32c6e263ffec1d7f,class WritableLogger(object):,1,1,0.08333333333333333,511
6261364651966fe767b592fc32c6e263ffec1d7f,"return LazyAdapter(name, version)",1,1,0.08333333333333333,512
6261364651966fe767b592fc32c6e263ffec1d7f,"def getLazyLogger(name='unknown', version='unknown'):",1,1,0.08333333333333333,513
6261364651966fe767b592fc32c6e263ffec1d7f,return _loggers[name],1,1,0.08333333333333333,514
6261364651966fe767b592fc32c6e263ffec1d7f,"_loggers[name] = ContextAdapter(logging.getLogger(name),",1,1,0.08333333333333333,515
6261364651966fe767b592fc32c6e263ffec1d7f,"if sys.version_info < (3, 2):",1,1,0.08333333333333333,516
6261364651966fe767b592fc32c6e263ffec1d7f,self._style = logging.PercentStyle(fmt),1,1,0.08333333333333333,517
6261364651966fe767b592fc32c6e263ffec1d7f,if strip_newlines:,1,1,0.08333333333333333,518
6261364651966fe767b592fc32c6e263ffec1d7f,self._fmt = self._style._fmt,1,1,0.08333333333333333,519
6261364651966fe767b592fc32c6e263ffec1d7f,def set_time_override(override_time=None):,1,1,0.08333333333333333,520
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, msg):",1,1,0.08333333333333333,521
6261364651966fe767b592fc32c6e263ffec1d7f,class DeprecatedConfig(Exception):,1,1,0.08333333333333333,522
6261364651966fe767b592fc32c6e263ffec1d7f,"return logging.StreamHandler.format(self, record)",1,1,0.08333333333333333,523
6261364651966fe767b592fc32c6e263ffec1d7f,record.color = self.LEVEL_COLORS[record.levelno],1,1,0.08333333333333333,524
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.CRITICAL: '\033[01;31m',  # BOLD RED",1,1,0.08333333333333333,525
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.ERROR: '\033[01;31m',  # BOLD RED",1,1,0.08333333333333333,526
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.WARN: '\033[01;33m',  # BOLD YELLOW",1,1,0.08333333333333333,527
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.AUDIT: '\033[01;36m',  # BOLD CYAN",1,1,0.08333333333333333,528
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.INFO: '\033[00;36m',  # CYAN",1,1,0.08333333333333333,529
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.DEBUG: '\033[00;32m',  # GREEN",1,1,0.08333333333333333,530
6261364651966fe767b592fc32c6e263ffec1d7f,LEVEL_COLORS = {,1,1,0.08333333333333333,531
6261364651966fe767b592fc32c6e263ffec1d7f,class ColorHandler(logging.StreamHandler):,1,1,0.08333333333333333,532
6261364651966fe767b592fc32c6e263ffec1d7f,return '\n'.join(formatted_lines),1,1,0.08333333333333333,533
6261364651966fe767b592fc32c6e263ffec1d7f,"fl = '%s%s' % (pl, line)",1,1,0.08333333333333333,534
6261364651966fe767b592fc32c6e263ffec1d7f,pl = CONF.logging_exception_prefix % record.__dict__,1,1,0.08333333333333333,535
6261364651966fe767b592fc32c6e263ffec1d7f,formatted_lines = [],1,1,0.08333333333333333,536
6261364651966fe767b592fc32c6e263ffec1d7f,"record.asctime = self.formatTime(record, self.datefmt)",1,1,0.08333333333333333,537
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.logging_exception_prefix.find('%(asctime)') != -1:,1,1,0.08333333333333333,538
6261364651966fe767b592fc32c6e263ffec1d7f,lines = stringbuffer.getvalue().split('\n'),1,1,0.08333333333333333,539
6261364651966fe767b592fc32c6e263ffec1d7f,stringbuffer = moves.StringIO(),1,1,0.08333333333333333,540
6261364651966fe767b592fc32c6e263ffec1d7f,"return logging.Formatter.formatException(self, exc_info)",1,1,0.08333333333333333,541
6261364651966fe767b592fc32c6e263ffec1d7f,"def formatException(self, exc_info, record=None):",1,1,0.08333333333333333,542
6261364651966fe767b592fc32c6e263ffec1d7f,"return logging.Formatter.format(self, record)",1,1,0.08333333333333333,543
6261364651966fe767b592fc32c6e263ffec1d7f,"record.exc_text = self.formatException(record.exc_info, record)",1,1,0.08333333333333333,544
6261364651966fe767b592fc32c6e263ffec1d7f,"def getLogger(name='unknown', version='unknown'):",1,1,0.08333333333333333,545
6261364651966fe767b592fc32c6e263ffec1d7f,_loggers = {},1,1,0.08333333333333333,546
6261364651966fe767b592fc32c6e263ffec1d7f,"syslog = logging.handlers.SysLogHandler(address='/dev/log',",1,1,0.08333333333333333,547
6261364651966fe767b592fc32c6e263ffec1d7f,"syslog = RFCSysLogHandler(address='/dev/log',",1,1,0.08333333333333333,548
6261364651966fe767b592fc32c6e263ffec1d7f,def _find_facility_from_conf():,1,1,0.08333333333333333,549
6261364651966fe767b592fc32c6e263ffec1d7f,"def set_defaults(logging_context_format_string=None,",1,1,0.08333333333333333,550
6261364651966fe767b592fc32c6e263ffec1d7f,sys.excepthook = _create_logging_excepthook(product_name),1,1,0.08333333333333333,551
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.log_config_append:,1,1,0.08333333333333333,552
6261364651966fe767b592fc32c6e263ffec1d7f,"def setup(product_name, version='unknown'):",1,1,0.08333333333333333,553
6261364651966fe767b592fc32c6e263ffec1d7f,"except (moves.configparser.Error, KeyError) as exc:",1,1,0.08333333333333333,554
6261364651966fe767b592fc32c6e263ffec1d7f,def _load_log_config(log_config_append):,1,1,0.08333333333333333,555
6261364651966fe767b592fc32c6e263ffec1d7f,"return self.message % dict(log_config=self.log_config,",1,1,0.08333333333333333,556
6261364651966fe767b592fc32c6e263ffec1d7f,def __str__(self):,1,1,0.08333333333333333,557
6261364651966fe767b592fc32c6e263ffec1d7f,self.err_msg = err_msg,1,1,0.08333333333333333,558
6261364651966fe767b592fc32c6e263ffec1d7f,self.log_config = log_config,1,1,0.08333333333333333,559
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, log_config, err_msg):",1,1,0.08333333333333333,560
6261364651966fe767b592fc32c6e263ffec1d7f,class LogConfigError(Exception):,1,1,0.08333333333333333,561
6261364651966fe767b592fc32c6e263ffec1d7f,return logging_excepthook,1,1,0.08333333333333333,562
6261364651966fe767b592fc32c6e263ffec1d7f,"def logging_excepthook(exc_type, value, tb):",1,1,0.08333333333333333,563
6261364651966fe767b592fc32c6e263ffec1d7f,def _create_logging_excepthook(product_name):,1,1,0.08333333333333333,564
6261364651966fe767b592fc32c6e263ffec1d7f,return jsonutils.dumps(message),1,1,0.08333333333333333,565
6261364651966fe767b592fc32c6e263ffec1d7f,message['traceback'] = self.formatException(record.exc_info),1,1,0.08333333333333333,566
6261364651966fe767b592fc32c6e263ffec1d7f,if record.exc_info:,1,1,0.08333333333333333,567
6261364651966fe767b592fc32c6e263ffec1d7f,message['extra'] = record.extra,1,1,0.08333333333333333,568
6261364651966fe767b592fc32c6e263ffec1d7f,"if hasattr(record, 'extra'):",1,1,0.08333333333333333,569
6261364651966fe767b592fc32c6e263ffec1d7f,"def format(self, record):",1,1,0.08333333333333333,570
6261364651966fe767b592fc32c6e263ffec1d7f,return lines,1,1,0.08333333333333333,571
6261364651966fe767b592fc32c6e263ffec1d7f,lines = list(itertools.chain(*lines)),1,1,0.08333333333333333,572
6261364651966fe767b592fc32c6e263ffec1d7f,lines = [moves.filter(,1,1,0.08333333333333333,573
6261364651966fe767b592fc32c6e263ffec1d7f,facility_names = logging.handlers.SysLogHandler.facility_names,1,1,0.08333333333333333,574
6261364651966fe767b592fc32c6e263ffec1d7f,"facility = getattr(logging.handlers.SysLogHandler,",1,1,0.08333333333333333,575
6261364651966fe767b592fc32c6e263ffec1d7f,facility = facility_names.get(CONF.syslog_log_facility),1,1,0.08333333333333333,576
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.publish_errors:,1,1,0.08333333333333333,577
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.use_syslog_rfc_format:,1,1,0.08333333333333333,578
6261364651966fe767b592fc32c6e263ffec1d7f,facility = _find_facility_from_conf(),1,1,0.08333333333333333,579
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.use_syslog:,1,1,0.08333333333333333,580
6261364651966fe767b592fc32c6e263ffec1d7f,level = logging.getLevelName(level_name),1,1,0.08333333333333333,581
6261364651966fe767b592fc32c6e263ffec1d7f,"if sys.version_info < (2, 7):",1,1,0.08333333333333333,582
6261364651966fe767b592fc32c6e263ffec1d7f,"mod, _sep, level_name = pair.partition('=')",1,1,0.08333333333333333,583
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.debug:,1,1,0.08333333333333333,584
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.log_format:,1,1,0.08333333333333333,585
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(alaski): CONF.log_format overrides everything currently.  This,1,1,0.08333333333333333,586
6261364651966fe767b592fc32c6e263ffec1d7f,datefmt = CONF.log_date_format,1,1,0.08333333333333333,587
6261364651966fe767b592fc32c6e263ffec1d7f,handler = importutils.import_object(,1,1,0.08333333333333333,588
6261364651966fe767b592fc32c6e263ffec1d7f,streamlog = logging.StreamHandler(sys.stdout),1,1,0.08333333333333333,589
6261364651966fe767b592fc32c6e263ffec1d7f,valid_facilities = facility_names.keys(),1,1,0.08333333333333333,590
6261364651966fe767b592fc32c6e263ffec1d7f,elif not logpath:,1,1,0.08333333333333333,591
6261364651966fe767b592fc32c6e263ffec1d7f,streamlog = ColorHandler(),1,1,0.08333333333333333,592
6261364651966fe767b592fc32c6e263ffec1d7f,if CONF.use_stderr:,1,1,0.08333333333333333,593
6261364651966fe767b592fc32c6e263ffec1d7f,filelog = logging.handlers.WatchedFileHandler(logpath),1,1,0.08333333333333333,594
6261364651966fe767b592fc32c6e263ffec1d7f,if logpath:,1,1,0.08333333333333333,595
6261364651966fe767b592fc32c6e263ffec1d7f,log_root = getLogger(None).logger,1,1,0.08333333333333333,596
6261364651966fe767b592fc32c6e263ffec1d7f,self.binary_name = _get_binary_name(),1,1,0.08333333333333333,597
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, *args, **kwargs):",1,1,0.08333333333333333,598
6261364651966fe767b592fc32c6e263ffec1d7f,class RFCSysLogHandler(logging.handlers.SysLogHandler):,1,1,0.08333333333333333,599
6261364651966fe767b592fc32c6e263ffec1d7f,return facility,1,1,0.08333333333333333,600
6261364651966fe767b592fc32c6e263ffec1d7f,"consts = ['LOG_AUTH', 'LOG_AUTHPRIV', 'LOG_CRON', 'LOG_DAEMON',",1,1,0.08333333333333333,601
6261364651966fe767b592fc32c6e263ffec1d7f,def advance_time_delta(timedelta):,1,1,0.08333333333333333,602
6261364651966fe767b592fc32c6e263ffec1d7f,return sys.modules[import_str],1,1,0.08333333333333333,603
6261364651966fe767b592fc32c6e263ffec1d7f,utcnow.override_time = None,1,1,0.08333333333333333,604
6261364651966fe767b592fc32c6e263ffec1d7f,# Copyright 2011 OpenStack Foundation.,0,1,0.08333333333333333,605
6261364651966fe767b592fc32c6e263ffec1d7f,"def add_prefix(name, prefix):",0,1,0.08333333333333333,606
6261364651966fe767b592fc32c6e263ffec1d7f,local.strong_store.locks_held = [],0,1,0.08333333333333333,607
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(mikal): I know this looks odd,0,1,0.08333333333333333,608
6261364651966fe767b592fc32c6e263ffec1d7f,with sem:,0,1,0.08333333333333333,609
6261364651966fe767b592fc32c6e263ffec1d7f,_semaphores[name] = sem,0,1,0.08333333333333333,610
6261364651966fe767b592fc32c6e263ffec1d7f,sem = threading.Semaphore(),0,1,0.08333333333333333,611
6261364651966fe767b592fc32c6e263ffec1d7f,sem = _semaphores[name],0,1,0.08333333333333333,612
6261364651966fe767b592fc32c6e263ffec1d7f,with _semaphores_lock:,0,1,0.08333333333333333,613
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Context based lock",0,1,0.08333333333333333,614
6261364651966fe767b592fc32c6e263ffec1d7f,"def lock(name, lock_file_prefix=None, external=False, lock_path=None):",0,1,0.08333333333333333,615
6261364651966fe767b592fc32c6e263ffec1d7f,_semaphores_lock = threading.Lock(),0,1,0.08333333333333333,616
6261364651966fe767b592fc32c6e263ffec1d7f,import threading,0,1,0.08333333333333333,617
6261364651966fe767b592fc32c6e263ffec1d7f,import sys,0,1,0.08333333333333333,618
6261364651966fe767b592fc32c6e263ffec1d7f,import contextlib,0,1,0.08333333333333333,619
6261364651966fe767b592fc32c6e263ffec1d7f,"self.mgr = lockutils.lock(name, lock_file_prefix, True)",0,1,0.08333333333333333,620
6261364651966fe767b592fc32c6e263ffec1d7f,"def __init__(self, name, lock_file_prefix=None):",0,1,0.08333333333333333,621
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""",0,1,0.08333333333333333,622
6261364651966fe767b592fc32c6e263ffec1d7f,def setUp(self):,0,1,0.08333333333333333,623
6261364651966fe767b592fc32c6e263ffec1d7f,class TestCase(testtools.testcase):,0,1,0.08333333333333333,624
6261364651966fe767b592fc32c6e263ffec1d7f,required to be serialized. Something like::,0,1,0.08333333333333333,625
6261364651966fe767b592fc32c6e263ffec1d7f,def test_method(self):,0,1,0.08333333333333333,626
6261364651966fe767b592fc32c6e263ffec1d7f,class LockFixture(fixtures.Fixture):,0,1,0.08333333333333333,627
6261364651966fe767b592fc32c6e263ffec1d7f,import fixtures,0,1,0.08333333333333333,628
6261364651966fe767b592fc32c6e263ffec1d7f,#         http://www.apache.org/licenses/LICENSE-2.0,0,1,0.08333333333333333,629
6261364651966fe767b592fc32c6e263ffec1d7f,#,0,1,0.08333333333333333,630
6261364651966fe767b592fc32c6e263ffec1d7f,"return '%s%s%s' % (prefix, sep, name)",0,1,0.08333333333333333,631
6261364651966fe767b592fc32c6e263ffec1d7f,# separators,0,1,0.08333333333333333,632
6261364651966fe767b592fc32c6e263ffec1d7f,"lock_file_name = add_prefix(name.replace(os.sep, '_'),",0,1,0.08333333333333333,633
6261364651966fe767b592fc32c6e263ffec1d7f,if __name__ == '__main__':,0,1,0.08333333333333333,634
6261364651966fe767b592fc32c6e263ffec1d7f,local.strong_store.locks_held = [],1,1,0.08333333333333333,635
6261364651966fe767b592fc32c6e263ffec1d7f,# NOTE(mikal): I know this looks odd,1,1,0.08333333333333333,636
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Got semaphore ""%(lock)s"" for method '",1,1,0.08333333333333333,637
6261364651966fe767b592fc32c6e263ffec1d7f,with sem:,1,1,0.08333333333333333,638
6261364651966fe767b592fc32c6e263ffec1d7f,_semaphores[name] = sem,1,1,0.08333333333333333,639
6261364651966fe767b592fc32c6e263ffec1d7f,"sem = _semaphores.get(name, semaphore.Semaphore())",1,1,0.08333333333333333,640
6261364651966fe767b592fc32c6e263ffec1d7f,#              amically-allocating-and-destroying-mutexes,1,1,0.08333333333333333,641
6261364651966fe767b592fc32c6e263ffec1d7f,#              See http://stackoverflow.com/questions/5390569/dyn,1,1,0.08333333333333333,642
6261364651966fe767b592fc32c6e263ffec1d7f,"# NOTE(soren): If we ever go natively threaded, this will be racy.",1,1,0.08333333333333333,643
6261364651966fe767b592fc32c6e263ffec1d7f,"def synchronized(name, lock_file_prefix, external=False, lock_path=None):",1,1,0.08333333333333333,644
6261364651966fe767b592fc32c6e263ffec1d7f,# vim: tabstop=4 shiftwidth=4 softtabstop=4,1,1,0.08333333333333333,645
6261364651966fe767b592fc32c6e263ffec1d7f,return ret_val,0,1,0.08333333333333333,646
6261364651966fe767b592fc32c6e263ffec1d7f,"lock_file_path = os.path.join(local_lock_path, lock_file_name)",0,1,0.08333333333333333,647
6261364651966fe767b592fc32c6e263ffec1d7f,ret_val = subprocess.call(argv[1:]),0,1,0.08333333333333333,648
6261364651966fe767b592fc32c6e263ffec1d7f,"os.environ[""NEUTRON_LOCK_PATH""] = lock_dir",0,1,0.08333333333333333,649
6261364651966fe767b592fc32c6e263ffec1d7f,lock_dir = tempfile.mkdtemp(),0,1,0.08333333333333333,650
6261364651966fe767b592fc32c6e263ffec1d7f,def main(argv):,0,1,0.08333333333333333,651
6261364651966fe767b592fc32c6e263ffec1d7f,meaningful prefix.,0,1,0.08333333333333333,652
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Semaphore / lock released ""%(function)s""'),",0,1,0.08333333333333333,653
6261364651966fe767b592fc32c6e263ffec1d7f,"return f(*args, **kwargs)",0,1,0.08333333333333333,654
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Got semaphore / lock ""%(function)s""'),",0,1,0.08333333333333333,655
6261364651966fe767b592fc32c6e263ffec1d7f,"with lock(name, lock_file_prefix, external, lock_path):",0,1,0.08333333333333333,656
6261364651966fe767b592fc32c6e263ffec1d7f,"def synchronized(name, lock_file_prefix=None, external=False, lock_path=None):",0,1,0.08333333333333333,657
6261364651966fe767b592fc32c6e263ffec1d7f,yield lock,0,1,0.08333333333333333,658
6261364651966fe767b592fc32c6e263ffec1d7f,# All Rights Reserved.,0,1,0.08333333333333333,659
6261364651966fe767b592fc32c6e263ffec1d7f,return unicode(message),1,1,0.08333333333333333,660
6261364651966fe767b592fc32c6e263ffec1d7f,cleanup_dir = True,1,1,0.08333333333333333,661
6261364651966fe767b592fc32c6e263ffec1d7f,self.params = unicode(other),1,1,0.08333333333333333,662
6261364651966fe767b592fc32c6e263ffec1d7f,_AVAILABLE_LANGUAGES[domain] = language_list,0,1,0.08333333333333333,663
6261364651966fe767b592fc32c6e263ffec1d7f,language_list = ['en_US'],0,1,0.08333333333333333,664
6261364651966fe767b592fc32c6e263ffec1d7f,return copy.copy(_AVAILABLE_LANGUAGES[domain]),0,1,0.08333333333333333,665
6261364651966fe767b592fc32c6e263ffec1d7f,"return _userString.UserString.__getattribute__(self, name)",0,1,0.08333333333333333,666
6261364651966fe767b592fc32c6e263ffec1d7f,param.locale = value,0,1,0.08333333333333333,667
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(param, Message):",0,1,0.08333333333333333,668
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(self.params, tuple):",0,1,0.08333333333333333,669
6261364651966fe767b592fc32c6e263ffec1d7f,self.params.locale = value,0,1,0.08333333333333333,670
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(self.params, Message):",0,1,0.08333333333333333,671
6261364651966fe767b592fc32c6e263ffec1d7f,return,0,1,0.08333333333333333,672
6261364651966fe767b592fc32c6e263ffec1d7f,self._locale = value,0,1,0.08333333333333333,673
6261364651966fe767b592fc32c6e263ffec1d7f,"def locale(self, value):",0,1,0.08333333333333333,674
6261364651966fe767b592fc32c6e263ffec1d7f,return self._locale,0,1,0.08333333333333333,675
6261364651966fe767b592fc32c6e263ffec1d7f,def locale(self):,0,1,0.08333333333333333,676
6261364651966fe767b592fc32c6e263ffec1d7f,self._locale = None,0,1,0.08333333333333333,677
6261364651966fe767b592fc32c6e263ffec1d7f,"class Message(_userString.UserString, object):",0,1,0.08333333333333333,678
6261364651966fe767b592fc32c6e263ffec1d7f,return _t.ugettext(msg),0,1,0.08333333333333333,679
6261364651966fe767b592fc32c6e263ffec1d7f,"return Message(msg, 'neutron')",0,1,0.08333333333333333,680
6261364651966fe767b592fc32c6e263ffec1d7f,if USE_LAZY:,0,1,0.08333333333333333,681
6261364651966fe767b592fc32c6e263ffec1d7f,USE_LAZY = True,0,1,0.08333333333333333,682
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""",0,1,0.08333333333333333,683
6261364651966fe767b592fc32c6e263ffec1d7f,def enable_lazy():,0,1,0.08333333333333333,684
6261364651966fe767b592fc32c6e263ffec1d7f,USE_LAZY = False,0,1,0.08333333333333333,685
6261364651966fe767b592fc32c6e263ffec1d7f,_AVAILABLE_LANGUAGES = {},0,1,0.08333333333333333,686
6261364651966fe767b592fc32c6e263ffec1d7f,return isotime(datetime.datetime.utcfromtimestamp(timestamp)),1,1,0.08333333333333333,687
6261364651966fe767b592fc32c6e263ffec1d7f,return copy.copy(language_list),0,1,0.08333333333333333,688
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(message, Message):",0,1,0.08333333333333333,689
6261364651966fe767b592fc32c6e263ffec1d7f,import logging.handlers,1,1,0.08333333333333333,690
6261364651966fe767b592fc32c6e263ffec1d7f,ugettext = lang.ugettext,0,1,0.08333333333333333,691
6261364651966fe767b592fc32c6e263ffec1d7f,params[key] = unicode(dict_param[key]),1,1,0.08333333333333333,692
6261364651966fe767b592fc32c6e263ffec1d7f,param.locale = value,1,1,0.08333333333333333,693
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(param, Message):",1,1,0.08333333333333333,694
6261364651966fe767b592fc32c6e263ffec1d7f,__builtin__.__dict__['_'] = _lazy_gettext,1,1,0.08333333333333333,695
6261364651966fe767b592fc32c6e263ffec1d7f,import __builtin__,1,1,0.08333333333333333,696
6261364651966fe767b592fc32c6e263ffec1d7f,return self.__unicode__(),0,1,0.08333333333333333,697
6261364651966fe767b592fc32c6e263ffec1d7f,self.params = six.text_type(other),0,1,0.08333333333333333,698
6261364651966fe767b592fc32c6e263ffec1d7f,params[key] = six.text_type(dict_param[key]),0,1,0.08333333333333333,699
6261364651966fe767b592fc32c6e263ffec1d7f,param.locale = value,0,1,0.08333333333333333,700
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(param, Message):",0,1,0.08333333333333333,701
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(self.params, dict):",0,1,0.08333333333333333,702
6261364651966fe767b592fc32c6e263ffec1d7f,ugettext = lang.gettext,0,1,0.08333333333333333,703
6261364651966fe767b592fc32c6e263ffec1d7f,import UserString,1,1,0.08333333333333333,704
6261364651966fe767b592fc32c6e263ffec1d7f,moves.builtins.__dict__['_'] = _lazy_gettext,0,1,0.08333333333333333,705
6261364651966fe767b592fc32c6e263ffec1d7f,return _t.gettext(msg),0,1,0.08333333333333333,706
6261364651966fe767b592fc32c6e263ffec1d7f,if six.PY3:,0,1,0.08333333333333333,707
6261364651966fe767b592fc32c6e263ffec1d7f,"if (isinstance(message, Message)):",1,1,0.08333333333333333,708
6261364651966fe767b592fc32c6e263ffec1d7f,return _AVAILABLE_LANGUAGES,1,1,0.08333333333333333,709
6261364651966fe767b592fc32c6e263ffec1d7f,if _AVAILABLE_LANGUAGES:,1,1,0.08333333333333333,710
6261364651966fe767b592fc32c6e263ffec1d7f,"return UserString.UserString.__getattribute__(self, name)",1,1,0.08333333333333333,711
6261364651966fe767b592fc32c6e263ffec1d7f,self.locale = None,1,1,0.08333333333333333,712
6261364651966fe767b592fc32c6e263ffec1d7f,"class Message(UserString.UserString, object):",1,1,0.08333333333333333,713
6261364651966fe767b592fc32c6e263ffec1d7f,return _t.ugettext(msg),1,1,0.08333333333333333,714
6261364651966fe767b592fc32c6e263ffec1d7f,_AVAILABLE_LANGUAGES = [],1,1,0.08333333333333333,715
6261364651966fe767b592fc32c6e263ffec1d7f,cleanup_dir = False,1,1,0.08333333333333333,716
6261364651966fe767b592fc32c6e263ffec1d7f,return six.text_type(message),0,1,0.08333333333333333,717
6261364651966fe767b592fc32c6e263ffec1d7f,local_lock_path = tempfile.mkdtemp(),1,1,0.08333333333333333,718
6261364651966fe767b592fc32c6e263ffec1d7f,def import_module(import_str):,1,1,0.08333333333333333,719
6261364651966fe767b592fc32c6e263ffec1d7f,except iso8601.ParseError as e:,1,1,0.08333333333333333,720
6261364651966fe767b592fc32c6e263ffec1d7f,return iso8601.parse_date(timestr),1,1,0.08333333333333333,721
6261364651966fe767b592fc32c6e263ffec1d7f,def parse_isotime(timestr):,1,1,0.08333333333333333,722
6261364651966fe767b592fc32c6e263ffec1d7f,return st,1,1,0.08333333333333333,723
6261364651966fe767b592fc32c6e263ffec1d7f,st += ('Z' if tz == 'UTC' else tz),1,1,0.08333333333333333,724
6261364651966fe767b592fc32c6e263ffec1d7f,st = at.strftime(_ISO8601_TIME_FORMAT,1,1,0.08333333333333333,725
6261364651966fe767b592fc32c6e263ffec1d7f,at = utcnow(),1,1,0.08333333333333333,726
6261364651966fe767b592fc32c6e263ffec1d7f,"def isotime(at=None, subsecond=False):",1,1,0.08333333333333333,727
6261364651966fe767b592fc32c6e263ffec1d7f,PERFECT_TIME_FORMAT = _ISO8601_TIME_FORMAT_SUBSECOND,1,1,0.08333333333333333,728
6261364651966fe767b592fc32c6e263ffec1d7f,_ISO8601_TIME_FORMAT = '%Y-%m-%dT%H:%M:%S',1,1,0.08333333333333333,729
6261364651966fe767b592fc32c6e263ffec1d7f,_ISO8601_TIME_FORMAT_SUBSECOND = '%Y-%m-%dT%H:%M:%S.%f',1,1,0.08333333333333333,730
6261364651966fe767b592fc32c6e263ffec1d7f,import six,1,1,0.08333333333333333,731
6261364651966fe767b592fc32c6e263ffec1d7f,import datetime,1,1,0.08333333333333333,732
6261364651966fe767b592fc32c6e263ffec1d7f,import calendar,1,1,0.08333333333333333,733
6261364651966fe767b592fc32c6e263ffec1d7f,Time related utilities and helper functions.,1,1,0.08333333333333333,734
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""",1,1,0.08333333333333333,735
6261364651966fe767b592fc32c6e263ffec1d7f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.08333333333333333,736
6261364651966fe767b592fc32c6e263ffec1d7f,#,1,1,0.08333333333333333,737
6261364651966fe767b592fc32c6e263ffec1d7f,# All Rights Reserved.,1,1,0.08333333333333333,738
6261364651966fe767b592fc32c6e263ffec1d7f,# Copyright 2011 OpenStack Foundation.,1,1,0.08333333333333333,739
6261364651966fe767b592fc32c6e263ffec1d7f,return import_module(import_str),1,1,0.08333333333333333,740
6261364651966fe767b592fc32c6e263ffec1d7f,"def try_import(import_str, default=None):",1,1,0.08333333333333333,741
6261364651966fe767b592fc32c6e263ffec1d7f,return import_module(module),1,1,0.08333333333333333,742
6261364651966fe767b592fc32c6e263ffec1d7f,if submodule:,1,1,0.08333333333333333,743
6261364651966fe767b592fc32c6e263ffec1d7f,"def import_versioned_module(version, submodule=None):",1,1,0.08333333333333333,744
6261364651966fe767b592fc32c6e263ffec1d7f,except TypeError as e:,1,1,0.08333333333333333,745
6261364651966fe767b592fc32c6e263ffec1d7f,"def strtime(at=None, fmt=PERFECT_TIME_FORMAT):",1,1,0.08333333333333333,746
6261364651966fe767b592fc32c6e263ffec1d7f,return at.strftime(fmt),1,1,0.08333333333333333,747
6261364651966fe767b592fc32c6e263ffec1d7f,after = after.replace(tzinfo=None),1,1,0.08333333333333333,748
6261364651966fe767b592fc32c6e263ffec1d7f,def iso8601_from_timestamp(timestamp):,1,1,0.08333333333333333,749
6261364651966fe767b592fc32c6e263ffec1d7f,# separators,1,1,0.08333333333333333,750
6261364651966fe767b592fc32c6e263ffec1d7f,return datetime.datetime.utcnow(),1,1,0.08333333333333333,751
6261364651966fe767b592fc32c6e263ffec1d7f,return utcnow.override_time,1,1,0.08333333333333333,752
6261364651966fe767b592fc32c6e263ffec1d7f,return utcnow.override_time.pop(0),1,1,0.08333333333333333,753
6261364651966fe767b592fc32c6e263ffec1d7f,if utcnow.override_time:,1,1,0.08333333333333333,754
6261364651966fe767b592fc32c6e263ffec1d7f,def utcnow():,1,1,0.08333333333333333,755
6261364651966fe767b592fc32c6e263ffec1d7f,return calendar.timegm(utcnow().timetuple()),1,1,0.08333333333333333,756
6261364651966fe767b592fc32c6e263ffec1d7f,return int(time.time()),1,1,0.08333333333333333,757
6261364651966fe767b592fc32c6e263ffec1d7f,def utcnow_ts():,1,1,0.08333333333333333,758
6261364651966fe767b592fc32c6e263ffec1d7f,return after - utcnow() > datetime.timedelta(seconds=seconds),1,1,0.08333333333333333,759
6261364651966fe767b592fc32c6e263ffec1d7f,after = parse_strtime(after).replace(tzinfo=None),1,1,0.08333333333333333,760
6261364651966fe767b592fc32c6e263ffec1d7f,"return datetime.datetime.strptime(timestr, fmt)",1,1,0.08333333333333333,761
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(after, six.string_types):",1,1,0.08333333333333333,762
6261364651966fe767b592fc32c6e263ffec1d7f,"def is_newer_than(after, seconds):",1,1,0.08333333333333333,763
6261364651966fe767b592fc32c6e263ffec1d7f,return utcnow() - before > datetime.timedelta(seconds=seconds),1,1,0.08333333333333333,764
6261364651966fe767b592fc32c6e263ffec1d7f,before = before.replace(tzinfo=None),1,1,0.08333333333333333,765
6261364651966fe767b592fc32c6e263ffec1d7f,before = parse_strtime(before).replace(tzinfo=None),1,1,0.08333333333333333,766
6261364651966fe767b592fc32c6e263ffec1d7f,"if isinstance(before, six.string_types):",1,1,0.08333333333333333,767
6261364651966fe767b592fc32c6e263ffec1d7f,"def is_older_than(before, seconds):",1,1,0.08333333333333333,768
6261364651966fe767b592fc32c6e263ffec1d7f,return timestamp.replace(tzinfo=None) - offset,1,1,0.08333333333333333,769
6261364651966fe767b592fc32c6e263ffec1d7f,return timestamp,1,1,0.08333333333333333,770
6261364651966fe767b592fc32c6e263ffec1d7f,offset = timestamp.utcoffset(),1,1,0.08333333333333333,771
6261364651966fe767b592fc32c6e263ffec1d7f,def normalize_time(timestamp):,1,1,0.08333333333333333,772
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Import a module.""""""",1,1,0.08333333333333333,773
6261364651966fe767b592fc32c6e263ffec1d7f,"def parse_strtime(timestr, fmt=PERFECT_TIME_FORMAT):",1,1,0.08333333333333333,774
6261364651966fe767b592fc32c6e263ffec1d7f,"return import_class(import_value)(*args, **kwargs)",1,1,0.08333333333333333,775
6261364651966fe767b592fc32c6e263ffec1d7f,params[key] = self._copy_param(val),0,1,0.08333333333333333,776
6261364651966fe767b592fc32c6e263ffec1d7f,"_LC = functools.partial(_log_translation, level='critical')",0,1,0.08333333333333333,777
6261364651966fe767b592fc32c6e263ffec1d7f,"_LE = functools.partial(_log_translation, level='error')",0,1,0.08333333333333333,778
6261364651966fe767b592fc32c6e263ffec1d7f,"_LW = functools.partial(_log_translation, level='warning')",0,1,0.08333333333333333,779
6261364651966fe767b592fc32c6e263ffec1d7f,"_LI = functools.partial(_log_translation, level='info')",0,1,0.08333333333333333,780
6261364651966fe767b592fc32c6e263ffec1d7f,#,0,1,0.08333333333333333,781
6261364651966fe767b592fc32c6e263ffec1d7f,return translator.ugettext(msg),0,1,0.08333333333333333,782
6261364651966fe767b592fc32c6e263ffec1d7f,return translator.gettext(msg),0,1,0.08333333333333333,783
6261364651966fe767b592fc32c6e263ffec1d7f,if six.PY3:,0,1,0.08333333333333333,784
6261364651966fe767b592fc32c6e263ffec1d7f,translator = _t_log_levels[level],0,1,0.08333333333333333,785
6261364651966fe767b592fc32c6e263ffec1d7f,"return Message(msg, domain='neutron' + '-log-' + level)",0,1,0.08333333333333333,786
6261364651966fe767b592fc32c6e263ffec1d7f,if USE_LAZY:,0,1,0.08333333333333333,787
6261364651966fe767b592fc32c6e263ffec1d7f,"def _log_translation(msg, level):",0,1,0.08333333333333333,788
6261364651966fe767b592fc32c6e263ffec1d7f,_t_log_levels = dict(,0,1,0.08333333333333333,789
6261364651966fe767b592fc32c6e263ffec1d7f,import functools,0,1,0.08333333333333333,790
6261364651966fe767b592fc32c6e263ffec1d7f,return retval,1,1,0.08333333333333333,791
6261364651966fe767b592fc32c6e263ffec1d7f,if cleanup_dir:,1,1,0.08333333333333333,792
6261364651966fe767b592fc32c6e263ffec1d7f,#             tests.,1,1,0.08333333333333333,793
6261364651966fe767b592fc32c6e263ffec1d7f,"'%(path)s for method ""%(method)s""...'),",1,1,0.08333333333333333,794
6261364651966fe767b592fc32c6e263ffec1d7f,"retval = f(*args, **kwargs)",1,1,0.08333333333333333,795
6261364651966fe767b592fc32c6e263ffec1d7f,'%(path)s for method ',1,1,0.08333333333333333,796
6261364651966fe767b592fc32c6e263ffec1d7f,with lock:,1,1,0.08333333333333333,797
6261364651966fe767b592fc32c6e263ffec1d7f,"lock_file_path = os.path.join(local_lock_path,",1,1,0.08333333333333333,798
6261364651966fe767b592fc32c6e263ffec1d7f,"import_value = ""%s.%s"" % (name_space, import_str)",1,1,0.08333333333333333,799
6261364651966fe767b592fc32c6e263ffec1d7f,"lock_file_name = '%s%s' % (lock_file_prefix, safe_name)",1,1,0.08333333333333333,800
6261364651966fe767b592fc32c6e263ffec1d7f,"safe_name = name.replace(os.sep, '_')",1,1,0.08333333333333333,801
6261364651966fe767b592fc32c6e263ffec1d7f,"def __new__(cls, msgid, msgtext=None, params=None,",0,1,0.08333333333333333,802
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""",0,1,0.08333333333333333,803
6261364651966fe767b592fc32c6e263ffec1d7f,params = self._copy_param(other),0,1,0.08333333333333333,804
6261364651966fe767b592fc32c6e263ffec1d7f,# All Rights Reserved.,1,1,0.08333333333333333,805
6261364651966fe767b592fc32c6e263ffec1d7f,"def import_object_ns(name_space, import_str, *args, **kwargs):",1,1,0.08333333333333333,806
6261364651966fe767b592fc32c6e263ffec1d7f,"return import_class(import_str)(*args, **kwargs)",1,1,0.08333333333333333,807
6261364651966fe767b592fc32c6e263ffec1d7f,"def import_object(import_str, *args, **kwargs):",1,1,0.08333333333333333,808
6261364651966fe767b592fc32c6e263ffec1d7f,#     https://github.com/mitsuhiko/babel/issues/37,0,1,0.08333333333333333,809
6261364651966fe767b592fc32c6e263ffec1d7f,"return getattr(sys.modules[mod_str], class_str)",1,1,0.08333333333333333,810
6261364651966fe767b592fc32c6e263ffec1d7f,"mod_str, _sep, class_str = import_str.rpartition('.')",1,1,0.08333333333333333,811
6261364651966fe767b592fc32c6e263ffec1d7f,def import_class(import_str):,1,1,0.08333333333333333,812
6261364651966fe767b592fc32c6e263ffec1d7f,import traceback,1,1,0.08333333333333333,813
6261364651966fe767b592fc32c6e263ffec1d7f,Import related utilities and helper functions.,1,1,0.08333333333333333,814
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""",1,1,0.08333333333333333,815
6261364651966fe767b592fc32c6e263ffec1d7f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.08333333333333333,816
6261364651966fe767b592fc32c6e263ffec1d7f,#,1,1,0.08333333333333333,817
6261364651966fe767b592fc32c6e263ffec1d7f,import sys,1,1,0.08333333333333333,818
6261364651966fe767b592fc32c6e263ffec1d7f,params = self._copy_param(other),1,1,0.08333333333333333,819
6261364651966fe767b592fc32c6e263ffec1d7f,params[key] = self._copy_param(src[key]),1,1,0.08333333333333333,820
6261364651966fe767b592fc32c6e263ffec1d7f,src = {},1,1,0.08333333333333333,821
6261364651966fe767b592fc32c6e263ffec1d7f,params = self._copy_param(dict_param),1,1,0.08333333333333333,822
6261364651966fe767b592fc32c6e263ffec1d7f,import re,1,1,0.08333333333333333,823
6261364651966fe767b592fc32c6e263ffec1d7f,"def _trim_dictionary_parameters(self, dict_param):",1,1,0.08333333333333333,824
6261364651966fe767b592fc32c6e263ffec1d7f,return params,1,1,0.08333333333333333,825
6261364651966fe767b592fc32c6e263ffec1d7f,"aliases = {'zh': 'zh_CN',",0,1,0.08333333333333333,826
6261364651966fe767b592fc32c6e263ffec1d7f,"def __new__(cls, msgid, msgtext=None, params=None, domain='neutron', *args):",1,1,0.08333333333333333,827
6261364651966fe767b592fc32c6e263ffec1d7f,params = self._trim_dictionary_parameters(other),1,1,0.08333333333333333,828
6261364651966fe767b592fc32c6e263ffec1d7f,# Copyright 2011 OpenStack Foundation.,1,1,0.08333333333333333,829
6261364651966fe767b592fc32c6e263ffec1d7f,sent_args.append(args),1,0,0.0,830
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.addLevelName(logging.AUDIT, 'AUDIT')",1,0,0.0,831
6261364651966fe767b592fc32c6e263ffec1d7f,"self.warn(stdmsg, *args, **kwargs)",1,0,0.0,832
6261364651966fe767b592fc32c6e263ffec1d7f,"self.critical(stdmsg, *args, **kwargs)",1,0,0.0,833
6261364651966fe767b592fc32c6e263ffec1d7f,"(None, copy.deepcopy(log_opts)),",1,0,0.0,834
6261364651966fe767b592fc32c6e263ffec1d7f,extra.update(_dictify_context(context)),1,0,0.0,835
6261364651966fe767b592fc32c6e263ffec1d7f,raise DeprecatedConfig(msg=stdmsg),1,0,0.0,836
6261364651966fe767b592fc32c6e263ffec1d7f,@property,1,0,0.0,837
6261364651966fe767b592fc32c6e263ffec1d7f,fatal deprecations.,1,0,0.0,838
6261364651966fe767b592fc32c6e263ffec1d7f,be raised.,1,0,0.0,839
6261364651966fe767b592fc32c6e263ffec1d7f,else:,1,0,0.0,840
6261364651966fe767b592fc32c6e263ffec1d7f,"self.log(logging.AUDIT, msg, *args, **kwargs)",1,0,0.0,841
6261364651966fe767b592fc32c6e263ffec1d7f,try:,1,0,0.0,842
6261364651966fe767b592fc32c6e263ffec1d7f,elif instance_uuid:,1,0,0.0,843
6261364651966fe767b592fc32c6e263ffec1d7f,"kwargs.pop('instance_uuid', None))",1,0,0.0,844
6261364651966fe767b592fc32c6e263ffec1d7f,"'pathname': record.pathname,",1,0,0.0,845
6261364651966fe767b592fc32c6e263ffec1d7f,% {'uuid': instance_uuid}),1,0,0.0,846
6261364651966fe767b592fc32c6e263ffec1d7f,"extra.setdefault('user_identity', kwargs.pop('user_identity', None))",1,0,0.0,847
6261364651966fe767b592fc32c6e263ffec1d7f,"lambda x: x,",1,0,0.0,848
6261364651966fe767b592fc32c6e263ffec1d7f,"'asctime': self.formatTime(record, self.datefmt),",1,0,0.0,849
6261364651966fe767b592fc32c6e263ffec1d7f,"'name': record.name,",1,0,0.0,850
6261364651966fe767b592fc32c6e263ffec1d7f,"'msg': record.msg,",1,0,0.0,851
6261364651966fe767b592fc32c6e263ffec1d7f,"'args': record.args,",1,0,0.0,852
6261364651966fe767b592fc32c6e263ffec1d7f,"'levelname': record.levelname,",1,0,0.0,853
6261364651966fe767b592fc32c6e263ffec1d7f,"'levelno': record.levelno,",1,0,0.0,854
6261364651966fe767b592fc32c6e263ffec1d7f,"'filename': record.filename,",1,0,0.0,855
6261364651966fe767b592fc32c6e263ffec1d7f,"'module': record.module,",1,0,0.0,856
6261364651966fe767b592fc32c6e263ffec1d7f,"'lineno': record.lineno,",1,0,0.0,857
6261364651966fe767b592fc32c6e263ffec1d7f,"'created': record.created,",1,0,0.0,858
6261364651966fe767b592fc32c6e263ffec1d7f,"(None, copy.deepcopy(logging_cli_opts)),",1,0,0.0,859
6261364651966fe767b592fc32c6e263ffec1d7f,"'funcname': record.funcName,",1,0,0.0,860
6261364651966fe767b592fc32c6e263ffec1d7f,"(None, copy.deepcopy(generic_log_opts)),",1,0,0.0,861
6261364651966fe767b592fc32c6e263ffec1d7f,"""stevedore=WARN""]",1,0,0.0,862
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.register_opts(log_opts),1,0,0.0,863
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.register_opts(generic_log_opts),1,0,0.0,864
6261364651966fe767b592fc32c6e263ffec1d7f,"default=True,",1,0,0.0,865
6261364651966fe767b592fc32c6e263ffec1d7f,"'relative_created': record.relativeCreated,",1,0,0.0,866
6261364651966fe767b592fc32c6e263ffec1d7f,"'qpid=WARN', 'sqlalchemy=WARN', 'suds=INFO',",1,0,0.0,867
6261364651966fe767b592fc32c6e263ffec1d7f,"'oslo.messaging=INFO', 'iso8601=WARN',",1,0,0.0,868
6261364651966fe767b592fc32c6e263ffec1d7f,"'requests.packages.urllib3.connectionpool=WARN',",1,0,0.0,869
6261364651966fe767b592fc32c6e263ffec1d7f,"'urllib3.connectionpool=WARN', 'websocket=WARN',",1,0,0.0,870
6261364651966fe767b592fc32c6e263ffec1d7f,"""keystonemiddleware=WARN"", ""routes.middleware=WARN"",",1,0,0.0,871
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('logging_context_format_string',",1,0,0.0,872
6261364651966fe767b592fc32c6e263ffec1d7f,default='%(asctime)s.%(msecs)03d %(process)d %(levelname)s ',1,0,0.0,873
6261364651966fe767b592fc32c6e263ffec1d7f,'%(name)s [%(request_id)s %(user_identity)s] ',1,0,0.0,874
6261364651966fe767b592fc32c6e263ffec1d7f,"'%(instance)s%(message)s',",1,0,0.0,875
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('logging_default_format_string',",1,0,0.0,876
6261364651966fe767b592fc32c6e263ffec1d7f,"'%(name)s [-] %(instance)s%(message)s',",1,0,0.0,877
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('logging_debug_format_suffix',",1,0,0.0,878
6261364651966fe767b592fc32c6e263ffec1d7f,"default='%(funcName)s %(pathname)s:%(lineno)d',",1,0,0.0,879
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('logging_exception_prefix',",1,0,0.0,880
6261364651966fe767b592fc32c6e263ffec1d7f,default='%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s ',1,0,0.0,881
6261364651966fe767b592fc32c6e263ffec1d7f,"'%(instance)s',",1,0,0.0,882
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.ListOpt('default_log_levels',",1,0,0.0,883
6261364651966fe767b592fc32c6e263ffec1d7f,"default=DEFAULT_LOG_LEVELS,",1,0,0.0,884
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('publish_errors',",1,0,0.0,885
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('fatal_deprecations',",1,0,0.0,886
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('instance_format',",1,0,0.0,887
6261364651966fe767b592fc32c6e263ffec1d7f,"default='[instance: %(uuid)s] ',",1,0,0.0,888
6261364651966fe767b592fc32c6e263ffec1d7f,"'message.'),",1,0,0.0,889
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('instance_uuid_format',",1,0,0.0,890
6261364651966fe767b592fc32c6e263ffec1d7f,"'log message.'),",1,0,0.0,891
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.register_cli_opts(common_cli_opts),1,0,0.0,892
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.register_cli_opts(logging_cli_opts),1,0,0.0,893
6261364651966fe767b592fc32c6e263ffec1d7f,"'msecs': record.msecs,",1,0,0.0,894
6261364651966fe767b592fc32c6e263ffec1d7f,http://docs.python.org/library/logging.html#formatter,1,0,0.0,895
6261364651966fe767b592fc32c6e263ffec1d7f,"'thread': record.thread,",1,0,0.0,896
6261364651966fe767b592fc32c6e263ffec1d7f,"""oslo.messaging.notify.log_handler.PublishErrorsHandler"",",1,0,0.0,897
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.addHandler(handler),1,0,0.0,898
6261364651966fe767b592fc32c6e263ffec1d7f,"handler.setFormatter(logging.Formatter(fmt=CONF.log_format,",1,0,0.0,899
6261364651966fe767b592fc32c6e263ffec1d7f,datefmt=datefmt)),1,0,0.0,900
6261364651966fe767b592fc32c6e263ffec1d7f,"handler.setFormatter(ContextFormatter(project=project,",1,0,0.0,901
6261364651966fe767b592fc32c6e263ffec1d7f,"version=version,",1,0,0.0,902
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.setLevel(logging.DEBUG),1,0,0.0,903
6261364651966fe767b592fc32c6e263ffec1d7f,elif CONF.verbose:,1,0,0.0,904
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.setLevel(logging.INFO),1,0,0.0,905
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.setLevel(logging.WARNING),1,0,0.0,906
6261364651966fe767b592fc32c6e263ffec1d7f,logger.setLevel(level),1,0,0.0,907
6261364651966fe767b592fc32c6e263ffec1d7f,logger.setLevel(level_name),1,0,0.0,908
6261364651966fe767b592fc32c6e263ffec1d7f,facility=facility),1,0,0.0,909
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.addHandler(syslog),1,0,0.0,910
6261364651966fe767b592fc32c6e263ffec1d7f,except socket.error:,1,0,0.0,911
6261364651966fe767b592fc32c6e263ffec1d7f,'is running.'),1,0,0.0,912
6261364651966fe767b592fc32c6e263ffec1d7f,"name,",1,0,0.0,913
6261364651966fe767b592fc32c6e263ffec1d7f,version),1,0,0.0,914
6261364651966fe767b592fc32c6e263ffec1d7f,"self.logger.log(self.level, msg.rstrip())",1,0,0.0,915
6261364651966fe767b592fc32c6e263ffec1d7f,debug.,1,0,0.0,916
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.Formatter.__init__(self, *args, **kwargs)",1,0,0.0,917
6261364651966fe767b592fc32c6e263ffec1d7f,"setattr(record, k, v)",1,0,0.0,918
6261364651966fe767b592fc32c6e263ffec1d7f,CONF.logging_debug_format_suffix):,1,0,0.0,919
6261364651966fe767b592fc32c6e263ffec1d7f,"fmt += "" "" + CONF.logging_debug_format_suffix",1,0,0.0,920
6261364651966fe767b592fc32c6e263ffec1d7f,"traceback.print_exception(exc_info[0], exc_info[1], exc_info[2],",1,0,0.0,921
6261364651966fe767b592fc32c6e263ffec1d7f,"None, stringbuffer)",1,0,0.0,922
6261364651966fe767b592fc32c6e263ffec1d7f,stringbuffer.close(),1,0,0.0,923
6261364651966fe767b592fc32c6e263ffec1d7f,formatted_lines.append(fl),1,0,0.0,924
6261364651966fe767b592fc32c6e263ffec1d7f,},1,0,0.0,925
6261364651966fe767b592fc32c6e263ffec1d7f,"default='LOG_USER',",1,0,0.0,926
6261364651966fe767b592fc32c6e263ffec1d7f,logging.ERROR),1,0,0.0,927
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.addHandler(streamlog),1,0,0.0,928
6261364651966fe767b592fc32c6e263ffec1d7f,"'thread_name': record.threadName,",1,0,0.0,929
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.addHandler(filelog),1,0,0.0,930
6261364651966fe767b592fc32c6e263ffec1d7f,"'process_name': record.processName,",1,0,0.0,931
6261364651966fe767b592fc32c6e263ffec1d7f,"'process': record.process,",1,0,0.0,932
6261364651966fe767b592fc32c6e263ffec1d7f,'traceback': None},1,0,0.0,933
6261364651966fe767b592fc32c6e263ffec1d7f,getLogger(product_name).critical(,1,0,0.0,934
6261364651966fe767b592fc32c6e263ffec1d7f,""""".join(traceback.format_exception_only(exc_type, value)),",1,0,0.0,935
6261364651966fe767b592fc32c6e263ffec1d7f,**extra),1,0,0.0,936
6261364651966fe767b592fc32c6e263ffec1d7f,err_msg=self.err_msg),1,0,0.0,937
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.config.fileConfig(log_config_append,",1,0,0.0,938
6261364651966fe767b592fc32c6e263ffec1d7f,disable_existing_loggers=False),1,0,0.0,939
6261364651966fe767b592fc32c6e263ffec1d7f,"raise LogConfigError(log_config_append, six.text_type(exc))",1,0,0.0,940
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Setup logging.""""""",1,0,0.0,941
6261364651966fe767b592fc32c6e263ffec1d7f,_load_log_config(CONF.log_config_append),1,0,0.0,942
6261364651966fe767b592fc32c6e263ffec1d7f,"_setup_logging_from_conf(product_name, version)",1,0,0.0,943
6261364651966fe767b592fc32c6e263ffec1d7f,default_log_levels=None):,1,0,0.0,944
6261364651966fe767b592fc32c6e263ffec1d7f,cfg.set_defaults(,1,0,0.0,945
6261364651966fe767b592fc32c6e263ffec1d7f,"log_opts,",1,0,0.0,946
6261364651966fe767b592fc32c6e263ffec1d7f,default_log_levels=default_log_levels),1,0,0.0,947
6261364651966fe767b592fc32c6e263ffec1d7f,logging_context_format_string=logging_context_format_string),1,0,0.0,948
6261364651966fe767b592fc32c6e263ffec1d7f,"CONF.syslog_log_facility,",1,0,0.0,949
6261364651966fe767b592fc32c6e263ffec1d7f,None),1,0,0.0,950
6261364651966fe767b592fc32c6e263ffec1d7f,"'LOG_FTP', 'LOG_KERN', 'LOG_LPR', 'LOG_MAIL', 'LOG_NEWS',",1,0,0.0,951
6261364651966fe767b592fc32c6e263ffec1d7f,"'LOG_AUTH', 'LOG_SYSLOG', 'LOG_USER', 'LOG_UUCP',",1,0,0.0,952
6261364651966fe767b592fc32c6e263ffec1d7f,"'LOG_LOCAL0', 'LOG_LOCAL1', 'LOG_LOCAL2', 'LOG_LOCAL3',",1,0,0.0,953
6261364651966fe767b592fc32c6e263ffec1d7f,"'LOG_LOCAL4', 'LOG_LOCAL5', 'LOG_LOCAL6', 'LOG_LOCAL7']",1,0,0.0,954
6261364651966fe767b592fc32c6e263ffec1d7f,valid_facilities.extend(consts),1,0,0.0,955
6261364651966fe767b592fc32c6e263ffec1d7f,raise TypeError(_('syslog facility must be one of: %s') %,1,0,0.0,956
6261364651966fe767b592fc32c6e263ffec1d7f,"', '.join(""'%s'"" % fac",1,0,0.0,957
6261364651966fe767b592fc32c6e263ffec1d7f,"logging.handlers.SysLogHandler.__init__(self, *args, **kwargs)",1,0,0.0,958
6261364651966fe767b592fc32c6e263ffec1d7f,log_root.removeHandler(handler),1,0,0.0,959
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('use_stderr',",1,0,0.0,960
6261364651966fe767b592fc32c6e263ffec1d7f,"localedir=os.environ.get(localedir),",1,0,0.0,961
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('syslog-log-facility',",1,0,0.0,962
6261364651966fe767b592fc32c6e263ffec1d7f,"LOG.debug(_('Got semaphore ""%(lock)s""'), {'lock': name})",0,0,0.0,963
6261364651966fe767b592fc32c6e263ffec1d7f,{'lock': name}),0,0,0.0,964
6261364651966fe767b592fc32c6e263ffec1d7f,raise cfg.RequiredOptError('lock_path'),0,0,0.0,965
6261364651966fe767b592fc32c6e263ffec1d7f,fileutils.ensure_tree(local_lock_path),0,0,0.0,966
6261364651966fe767b592fc32c6e263ffec1d7f,lock_file_prefix),0,0,0.0,967
6261364651966fe767b592fc32c6e263ffec1d7f,"{'lock': name, 'path': lock_file_path})",0,0,0.0,968
6261364651966fe767b592fc32c6e263ffec1d7f,finally:,0,0,0.0,969
6261364651966fe767b592fc32c6e263ffec1d7f,else:,0,0,0.0,970
6261364651966fe767b592fc32c6e263ffec1d7f,yield sem,0,0,0.0,971
6261364651966fe767b592fc32c6e263ffec1d7f,local.strong_store.locks_held.remove(name),0,0,0.0,972
6261364651966fe767b592fc32c6e263ffec1d7f,{'function': f.__name__}),0,0,0.0,973
6261364651966fe767b592fc32c6e263ffec1d7f,If you run this:,0,0,0.0,974
6261364651966fe767b592fc32c6e263ffec1d7f,python -m openstack.common.lockutils python setup.py testr <etc>,0,0,0.0,975
6261364651966fe767b592fc32c6e263ffec1d7f,"shutil.rmtree(lock_dir, ignore_errors=True)",0,0,0.0,976
6261364651966fe767b592fc32c6e263ffec1d7f,sys.exit(main(sys.argv)),0,0,0.0,977
6261364651966fe767b592fc32c6e263ffec1d7f,'temp directory')),1,0,0.0,978
6261364651966fe767b592fc32c6e263ffec1d7f,"'""%(method)s""...'), {'lock': name,",1,0,0.0,979
6261364651966fe767b592fc32c6e263ffec1d7f,'method': f.__name__}),1,0,0.0,980
6261364651966fe767b592fc32c6e263ffec1d7f,local.strong_store.locks_held.append(name),1,0,0.0,981
6261364651966fe767b592fc32c6e263ffec1d7f,try:,1,0,0.0,982
6261364651966fe767b592fc32c6e263ffec1d7f,"'for method ""%(method)s""...'),",1,0,0.0,983
6261364651966fe767b592fc32c6e263ffec1d7f,"{'lock': name, 'method': f.__name__})",1,0,0.0,984
6261364651966fe767b592fc32c6e263ffec1d7f,fileutils.ensure_tree(local_lock_path),1,0,0.0,985
6261364651966fe767b592fc32c6e263ffec1d7f,lock_file_name),1,0,0.0,986
6261364651966fe767b592fc32c6e263ffec1d7f,"'""%(method)s""...'),",1,0,0.0,987
6261364651966fe767b592fc32c6e263ffec1d7f,"{'lock': name,",1,0,0.0,988
6261364651966fe767b592fc32c6e263ffec1d7f,"'path': lock_file_path,",1,0,0.0,989
6261364651966fe767b592fc32c6e263ffec1d7f,finally:,1,0,0.0,990
6261364651966fe767b592fc32c6e263ffec1d7f,shutil.rmtree(local_lock_path),1,0,0.0,991
6261364651966fe767b592fc32c6e263ffec1d7f,else:,1,0,0.0,992
6261364651966fe767b592fc32c6e263ffec1d7f,local.strong_store.locks_held.append(name),0,0,0.0,993
6261364651966fe767b592fc32c6e263ffec1d7f,except KeyError:,0,0,0.0,994
6261364651966fe767b592fc32c6e263ffec1d7f,"(level, gettext.translation('neutron' + '-log-' + level,",0,0,0.0,995
6261364651966fe767b592fc32c6e263ffec1d7f,try:,0,0,0.0,996
6261364651966fe767b592fc32c6e263ffec1d7f,try:,0,0,0.0,997
6261364651966fe767b592fc32c6e263ffec1d7f,except ImportError:,0,0,0.0,998
6261364651966fe767b592fc32c6e263ffec1d7f,global USE_LAZY,0,0,0.0,999
6261364651966fe767b592fc32c6e263ffec1d7f,else:,0,0,0.0,1000
6261364651966fe767b592fc32c6e263ffec1d7f,@property,0,0,0.0,1001
6261364651966fe767b592fc32c6e263ffec1d7f,@locale.setter,0,0,0.0,1002
6261364651966fe767b592fc32c6e263ffec1d7f,"'domain', 'params', '_locale']",0,0,0.0,1003
6261364651966fe767b592fc32c6e263ffec1d7f,language_list.append(i),0,0,0.0,1004
6261364651966fe767b592fc32c6e263ffec1d7f,"'domain', 'params', 'locale']",1,0,0.0,1005
6261364651966fe767b592fc32c6e263ffec1d7f,_AVAILABLE_LANGUAGES.append('en_US'),1,0,0.0,1006
6261364651966fe767b592fc32c6e263ffec1d7f,_AVAILABLE_LANGUAGES.append(i),1,0,0.0,1007
6261364651966fe767b592fc32c6e263ffec1d7f,"gettext.install(domain,",0,0,0.0,1008
6261364651966fe767b592fc32c6e263ffec1d7f,localedir=os.environ.get(localedir)),0,0,0.0,1009
6261364651966fe767b592fc32c6e263ffec1d7f,else:,0,0,0.0,1010
6261364651966fe767b592fc32c6e263ffec1d7f,"localedir=os.environ.get(localedir),",0,0,0.0,1011
6261364651966fe767b592fc32c6e263ffec1d7f,unicode=True),0,0,0.0,1012
6261364651966fe767b592fc32c6e263ffec1d7f,ugettext(self._msg) +,0,0,0.0,1013
6261364651966fe767b592fc32c6e263ffec1d7f,"gettext.install(domain,",1,0,0.0,1014
6261364651966fe767b592fc32c6e263ffec1d7f,unicode=True),1,0,0.0,1015
6261364651966fe767b592fc32c6e263ffec1d7f,lang.ugettext(self._msg) +,1,0,0.0,1016
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""External locking fixture.",0,0,0.0,1017
6261364651966fe767b592fc32c6e263ffec1d7f,self.useFixture(LockFixture),0,0,0.0,1018
6261364651966fe767b592fc32c6e263ffec1d7f,...,0,0,0.0,1019
6261364651966fe767b592fc32c6e263ffec1d7f,"super(TestCase, self).setUp()",0,0,0.0,1020
6261364651966fe767b592fc32c6e263ffec1d7f,"super(LockFixture, self).setUp()",0,0,0.0,1021
6261364651966fe767b592fc32c6e263ffec1d7f,"self.addCleanup(self.mgr.__exit__, None, None, None)",0,0,0.0,1022
6261364651966fe767b592fc32c6e263ffec1d7f,self.mgr.__enter__(),0,0,0.0,1023
6261364651966fe767b592fc32c6e263ffec1d7f,"default=os.environ.get(""NEUTRON_LOCK_PATH""),",0,0,0.0,1024
6261364651966fe767b592fc32c6e263ffec1d7f,@contextlib.contextmanager,0,0,0.0,1025
6261364651966fe767b592fc32c6e263ffec1d7f,local.strong_store.locks_held.remove(name),1,0,0.0,1026
6261364651966fe767b592fc32c6e263ffec1d7f,"localedir=_localedir,",0,0,0.0,1027
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('use-syslog-rfc-format',",1,0,0.0,1028
6261364651966fe767b592fc32c6e263ffec1d7f,microsecond=now.microsecond),1,0,0.0,1029
6261364651966fe767b592fc32c6e263ffec1d7f,"year=tyme['year'],",1,0,0.0,1030
6261364651966fe767b592fc32c6e263ffec1d7f,"hour=tyme['hour'],",1,0,0.0,1031
6261364651966fe767b592fc32c6e263ffec1d7f,"minute=tyme['minute'],",1,0,0.0,1032
6261364651966fe767b592fc32c6e263ffec1d7f,"second=tyme['second'],",1,0,0.0,1033
6261364651966fe767b592fc32c6e263ffec1d7f,microsecond=tyme['microsecond']),1,0,0.0,1034
6261364651966fe767b592fc32c6e263ffec1d7f,float(delta.microseconds) / (10 ** 6)),1,0,0.0,1035
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('debug',",1,0,0.0,1036
6261364651966fe767b592fc32c6e263ffec1d7f,"short='d',",1,0,0.0,1037
6261364651966fe767b592fc32c6e263ffec1d7f,"default=False,",1,0,0.0,1038
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('verbose',",1,0,0.0,1039
6261364651966fe767b592fc32c6e263ffec1d7f,"short='v',",1,0,0.0,1040
6261364651966fe767b592fc32c6e263ffec1d7f,],1,0,0.0,1041
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('log-config-append',",1,0,0.0,1042
6261364651966fe767b592fc32c6e263ffec1d7f,"metavar='PATH',",1,0,0.0,1043
6261364651966fe767b592fc32c6e263ffec1d7f,"deprecated_name='log-config',",1,0,0.0,1044
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('log-format',",1,0,0.0,1045
6261364651966fe767b592fc32c6e263ffec1d7f,"metavar='FORMAT',",1,0,0.0,1046
6261364651966fe767b592fc32c6e263ffec1d7f,help='DEPRECATED. ',1,0,0.0,1047
6261364651966fe767b592fc32c6e263ffec1d7f,"'logging_default_format_string instead.'),",1,0,0.0,1048
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('log-date-format',",1,0,0.0,1049
6261364651966fe767b592fc32c6e263ffec1d7f,"default=_DEFAULT_LOG_DATE_FORMAT,",1,0,0.0,1050
6261364651966fe767b592fc32c6e263ffec1d7f,"metavar='DATE_FORMAT',",1,0,0.0,1051
6261364651966fe767b592fc32c6e263ffec1d7f,"'Default: %(default)s .'),",1,0,0.0,1052
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('log-file',",1,0,0.0,1053
6261364651966fe767b592fc32c6e263ffec1d7f,"deprecated_name='logfile',",1,0,0.0,1054
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.StrOpt('log-dir',",1,0,0.0,1055
6261364651966fe767b592fc32c6e263ffec1d7f,"deprecated_name='logdir',",1,0,0.0,1056
6261364651966fe767b592fc32c6e263ffec1d7f,"'--log-file paths.'),",1,0,0.0,1057
6261364651966fe767b592fc32c6e263ffec1d7f,"cfg.BoolOpt('use-syslog',",1,0,0.0,1058
6261364651966fe767b592fc32c6e263ffec1d7f,"month=tyme['month'],",1,0,0.0,1059
6261364651966fe767b592fc32c6e263ffec1d7f,"minute=now.minute, second=now.second,",1,0,0.0,1060
6261364651966fe767b592fc32c6e263ffec1d7f,fallback=True)),0,0,0.0,1061
6261364651966fe767b592fc32c6e263ffec1d7f,"advance_time_delta(datetime.timedelta(0, seconds))",1,0,0.0,1062
6261364651966fe767b592fc32c6e263ffec1d7f,),0,0,0.0,1063
6261364651966fe767b592fc32c6e263ffec1d7f,else:,0,0,0.0,1064
6261364651966fe767b592fc32c6e263ffec1d7f,"domain='neutron', *args):",0,0,0.0,1065
6261364651966fe767b592fc32c6e263ffec1d7f,except Exception:,0,0,0.0,1066
6261364651966fe767b592fc32c6e263ffec1d7f,"'zh_Hant_HK': 'zh_HK',",0,0,0.0,1067
6261364651966fe767b592fc32c6e263ffec1d7f,"'zh_Hant': 'zh_TW',",0,0,0.0,1068
6261364651966fe767b592fc32c6e263ffec1d7f,'fil': 'tl_PH'},0,0,0.0,1069
6261364651966fe767b592fc32c6e263ffec1d7f,language_list.append(alias),0,0,0.0,1070
6261364651966fe767b592fc32c6e263ffec1d7f,else:,1,0,0.0,1071
6261364651966fe767b592fc32c6e263ffec1d7f,src.update(self.params),1,0,0.0,1072
6261364651966fe767b592fc32c6e263ffec1d7f,src.update(dict_param),1,0,0.0,1073
6261364651966fe767b592fc32c6e263ffec1d7f,except TypeError:,1,0,0.0,1074
6261364651966fe767b592fc32c6e263ffec1d7f,__import__(mod_str),1,0,0.0,1075
6261364651966fe767b592fc32c6e263ffec1d7f,try:,1,0,0.0,1076
6261364651966fe767b592fc32c6e263ffec1d7f,except AttributeError:,1,0,0.0,1077
6261364651966fe767b592fc32c6e263ffec1d7f,raise ImportError('Class %s cannot be found (%s)' %,1,0,0.0,1078
6261364651966fe767b592fc32c6e263ffec1d7f,"(class_str,",1,0,0.0,1079
6261364651966fe767b592fc32c6e263ffec1d7f,traceback.format_exception(*sys.exc_info()))),1,0,0.0,1080
6261364651966fe767b592fc32c6e263ffec1d7f,except ImportError:,1,0,0.0,1081
6261364651966fe767b592fc32c6e263ffec1d7f,__import__(import_str),1,0,0.0,1082
6261364651966fe767b592fc32c6e263ffec1d7f,else _ISO8601_TIME_FORMAT_SUBSECOND),1,0,0.0,1083
6261364651966fe767b592fc32c6e263ffec1d7f,try:,1,0,0.0,1084
6261364651966fe767b592fc32c6e263ffec1d7f,raise ValueError(six.text_type(e)),1,0,0.0,1085
6261364651966fe767b592fc32c6e263ffec1d7f,else:,1,0,0.0,1086
6261364651966fe767b592fc32c6e263ffec1d7f,except AttributeError:,1,0,0.0,1087
6261364651966fe767b592fc32c6e263ffec1d7f,"""""""Overrides utils.utcnow.",1,0,0.0,1088
6261364651966fe767b592fc32c6e263ffec1d7f,dt += timedelta,1,0,0.0,1089
6261364651966fe767b592fc32c6e263ffec1d7f,except TypeError:,1,0,0.0,1090
6261364651966fe767b592fc32c6e263ffec1d7f,utcnow.override_time += timedelta,1,0,0.0,1091
6261364651966fe767b592fc32c6e263ffec1d7f,"super(Exception, self).__init__(self.message % dict(msg=msg))",1,0,0.0,1092
