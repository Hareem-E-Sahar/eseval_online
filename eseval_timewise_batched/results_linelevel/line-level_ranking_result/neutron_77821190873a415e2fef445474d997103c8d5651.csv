commit_id,line,line_level_label,count,line_score,row
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.common import exceptions as nsx_exc,1,5,1.0,1
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""An exception occurred while creating a port """,1,5,1.0,2
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.common import exceptions as nsx_exc,1,5,1.0,3
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.nsxlib import router as routerlib,1,4,0.8,4
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Network '%s' is not a valid external """,1,4,0.8,5
77821190873a415e2fef445474d997103c8d5651,from sqlalchemy.orm import exc as sa_exc,1,4,0.8,6
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Unable to create port on NSX logical router %s"") % name)",1,4,0.8,7
77821190873a415e2fef445474d997103c8d5651,from neutron.common import exceptions as n_exc,1,4,0.8,8
77821190873a415e2fef445474d997103c8d5651,"message = _(""Router %(router_id)s is in use by firewall Service """,1,4,0.8,9
77821190873a415e2fef445474d997103c8d5651,"message = _(""Router %(router_id)s is in use by Loadbalancer Service """,1,4,0.8,10
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.vshield.common import exceptions,1,3,0.6000000000000001,11
77821190873a415e2fef445474d997103c8d5651,from neutron.extensions import vpnaas as vpn_ext,1,3,0.6000000000000001,12
77821190873a415e2fef445474d997103c8d5651,from neutron.openstack.common import log as logging,1,3,0.6000000000000001,13
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.common import constants as service_constants,1,3,0.6000000000000001,14
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.api_client import exception as api_exc,1,3,0.6000000000000001,15
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.dbexts import servicerouter as sr_db,1,3,0.6000000000000001,16
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.extensions import servicerouter as sr,1,3,0.6000000000000001,17
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.nsxlib import switch as switchlib,1,3,0.6000000000000001,18
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.vshield.common import constants as vcns_const,1,3,0.6000000000000001,19
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id: %s is not an advanced router!"") % router_id",1,3,0.6000000000000001,20
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.vshield.tasks import constants as tasks_const,1,3,0.6000000000000001,21
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id is not provided!"")",1,3,0.6000000000000001,22
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id:%s is not an advanced router!"") % router_id",1,3,0.6000000000000001,23
77821190873a415e2fef445474d997103c8d5651,"msg = _(""A firewall is already associated with the router"")",1,3,0.6000000000000001,24
77821190873a415e2fef445474d997103c8d5651,from neutron.extensions import firewall as fw_ext,1,3,0.6000000000000001,25
77821190873a415e2fef445474d997103c8d5651,#TODO(linb)Add Exception handle if error,1,3,0.6000000000000001,26
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Failed to update ipsec vpn configuration on edge, since """,1,3,0.6000000000000001,27
77821190873a415e2fef445474d997103c8d5651,"msg = _(""a vpnservice is already associated with the router: %s""",1,3,0.6000000000000001,28
77821190873a415e2fef445474d997103c8d5651,# only update status to active if its status is pending create,1,3,0.6000000000000001,29
77821190873a415e2fef445474d997103c8d5651,from neutron.extensions import routedserviceinsertion as rsi,1,3,0.6000000000000001,30
77821190873a415e2fef445474d997103c8d5651,#Check whether the vip port is an external port,1,3,0.6000000000000001,31
77821190873a415e2fef445474d997103c8d5651,from neutron.db import routedserviceinsertion_db as rsi_db,1,3,0.6000000000000001,32
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""An exception occurred while creating the """,1,3,0.6000000000000001,33
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Monitor Resource binding with id:%s not found!"") % id",1,3,0.6000000000000001,34
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id is not provided!"")",0,3,0.6000000000000001,35
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id:%s is not an advanced router!"") % router['id']",0,3,0.6000000000000001,36
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id is not provided!"")",1,3,0.6000000000000001,37
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id:%s is not an advanced router!"") % router_id",1,3,0.6000000000000001,38
77821190873a415e2fef445474d997103c8d5651,"msg = _(""router_id: %s is not an advanced router!"") % router_id",1,3,0.6000000000000001,39
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""An error occurred while removing NAT rules """,0,3,0.6000000000000001,40
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Unable to create port on NSX logical router %s""),",1,3,0.6000000000000001,41
77821190873a415e2fef445474d997103c8d5651,from neutron import manager,0,3,0.6000000000000001,42
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Concurrent network deletion detected; Back-end Port """,1,3,0.6000000000000001,43
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""An error occurred while removing NAT rules """,1,3,0.6000000000000001,44
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Unable to remove gateway service from """,1,3,0.6000000000000001,45
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Pool Resource binding with id:%s not found!"") % id",1,3,0.6000000000000001,46
77821190873a415e2fef445474d997103c8d5651,"message = _(""Error happened in NSX VCNS Driver: %(err_msg)s"")",1,3,0.6000000000000001,47
77821190873a415e2fef445474d997103c8d5651,from sqlalchemy.orm import exc,1,3,0.6000000000000001,48
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Rule Resource binding with id:%s not found!"") % id",1,3,0.6000000000000001,49
77821190873a415e2fef445474d997103c8d5651,"msg = _(""VIP Resource binding with id:%s not found!"") % id",1,3,0.6000000000000001,50
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Unable to update port id: %s.""),",1,3,0.6000000000000001,51
77821190873a415e2fef445474d997103c8d5651,except api_exc.NsxApiException as e:,1,2,0.4,52
77821190873a415e2fef445474d997103c8d5651,# as we're not in a database transaction now,1,2,0.4,53
77821190873a415e2fef445474d997103c8d5651,# attach logic router port to switch port,1,2,0.4,54
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Unable to add router interface to integration lswitch """,1,2,0.4,55
77821190873a415e2fef445474d997103c8d5651,"lrouter = super(NsxAdvancedPlugin, self)._create_lrouter(",1,2,0.4,56
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Unable to create integration logic switch """,1,2,0.4,57
77821190873a415e2fef445474d997103c8d5651,"# The default gateway and vnic config has dependencies, if we",1,2,0.4,58
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Unable to create advance service router for %s"") % name)",1,2,0.4,59
77821190873a415e2fef445474d997103c8d5651,"# network changed, need to remove default gateway before vnic",1,2,0.4,60
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.plugins import base,1,2,0.4,61
77821190873a415e2fef445474d997103c8d5651,if edge_id is None:,1,2,0.4,62
77821190873a415e2fef445474d997103c8d5651,if router is None:,1,2,0.4,63
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.vshield import vcns_driver,1,2,0.4,64
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.dbexts import vcns_models,1,2,0.4,65
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.dbexts import vcns_db,1,2,0.4,66
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.common import utils,1,2,0.4,67
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.common import config  # noqa,1,2,0.4,68
77821190873a415e2fef445474d997103c8d5651,# configured on Edge. This can be done by checking if nexthop is in,1,2,0.4,69
77821190873a415e2fef445474d997103c8d5651,"from neutron.i18n import _LE, _LW",1,2,0.4,70
77821190873a415e2fef445474d997103c8d5651,if id in self._router_type:,1,2,0.4,71
77821190873a415e2fef445474d997103c8d5651,"v = super(NsxAdvancedPlugin, self).create_vip(context, vip)",1,2,0.4,72
77821190873a415e2fef445474d997103c8d5651,"lrouter = routerlib.get_lrouter(self.cluster, id)",1,2,0.4,73
77821190873a415e2fef445474d997103c8d5651,"v = self.get_vip(context, id)",1,2,0.4,74
77821190873a415e2fef445474d997103c8d5651,from neutron_vpnaas.db.vpn import vpn_db,1,2,0.4,75
77821190873a415e2fef445474d997103c8d5651,lrouter = jobdata['lrouter'],1,2,0.4,76
77821190873a415e2fef445474d997103c8d5651,# Test whether there is one ipsec site connection attached to,1,2,0.4,77
77821190873a415e2fef445474d997103c8d5651,if vpnservice['vpnservice'].get('admin_state_up') is None:,1,2,0.4,78
77821190873a415e2fef445474d997103c8d5651,"""the router: %s does not have a gateway yet!""",1,2,0.4,79
77821190873a415e2fef445474d997103c8d5651,#TODO(linb): Add exception handle if error,1,2,0.4,80
77821190873a415e2fef445474d997103c8d5651,"p = super(NsxAdvancedPlugin, self).update_pool(context, id, pool)",1,2,0.4,81
77821190873a415e2fef445474d997103c8d5651,#TODO(linb): do exception handle if error,1,2,0.4,82
77821190873a415e2fef445474d997103c8d5651,#TODO(linb): add exception handle if error,1,2,0.4,83
77821190873a415e2fef445474d997103c8d5651,if vse_status_level is None:,1,2,0.4,84
77821190873a415e2fef445474d997103c8d5651,"v = super(NsxAdvancedPlugin, self).update_vip(context, id, vip)",1,2,0.4,85
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Resource %(model)s : %(id)s not found!"") %",1,2,0.4,86
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Operation can't be performed, Since resource """,1,2,0.4,87
77821190873a415e2fef445474d997103c8d5651,# check if this policy is associated with firewall,1,2,0.4,88
77821190873a415e2fef445474d997103c8d5651,# check if this rule is associated with firewall,1,2,0.4,89
77821190873a415e2fef445474d997103c8d5651,"# Since there is only one firewall per edge,",1,2,0.4,90
77821190873a415e2fef445474d997103c8d5651,except exceptions.VcnsBadRequest as e:,1,2,0.4,91
77821190873a415e2fef445474d997103c8d5651,except exceptions.VcnsApiException as e:,1,2,0.4,92
77821190873a415e2fef445474d997103c8d5651,from neutron.extensions import l3,1,2,0.4,93
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Vcns right now can only support """,1,2,0.4,94
77821190873a415e2fef445474d997103c8d5651,from neutron_lbaas.db.loadbalancer import loadbalancer_db,1,2,0.4,95
77821190873a415e2fef445474d997103c8d5651,from neutron.i18n import _LE,1,2,0.4,96
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Unable to remove gateway service from """,0,2,0.4,97
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""Nat rules not found in nsx for port: %s""), id)",0,2,0.4,98
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""An error occurred while creating NAT """,0,2,0.4,99
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""Unable to remove NSX mapping for Neutron router """,0,2,0.4,100
77821190873a415e2fef445474d997103c8d5651,"""Gateway service %(def_l3_gw_svc)s id is """,0,2,0.4,101
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Unable to update port id: %s.""),",0,2,0.4,102
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_LE(""Unable to create port or set port """,0,2,0.4,103
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""Logical switch update on NSX backend failed. """,0,2,0.4,104
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""Unable to find NSX mappings for neutron """,0,2,0.4,105
77821190873a415e2fef445474d997103c8d5651,"_LW(""Neutron port %(port_id)s not found on NSX backend. """,0,2,0.4,106
77821190873a415e2fef445474d997103c8d5651,"""neutron port %s on the NSX plaform""), port_id)",0,2,0.4,107
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Unable to create port on NSX logical router """,0,2,0.4,108
77821190873a415e2fef445474d997103c8d5651,from neutron.tests.unit.vmware import PLUGIN_NAME,1,2,0.4,109
77821190873a415e2fef445474d997103c8d5651,from neutron.tests.unit.vmware import get_fake_conf,1,2,0.4,110
77821190873a415e2fef445474d997103c8d5651,from neutron.manager import NeutronManager,1,2,0.4,111
77821190873a415e2fef445474d997103c8d5651,from neutron.tests.unit import vmware,0,2,0.4,112
77821190873a415e2fef445474d997103c8d5651,# is removed  (with the network) if this the last subnet,1,2,0.4,113
77821190873a415e2fef445474d997103c8d5651,# is removed  (with the network) if this the last subnet,0,2,0.4,114
77821190873a415e2fef445474d997103c8d5651,from neutron.db import l3_db,1,2,0.4,115
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""Unable to update name on NSX backend """,0,2,0.4,116
77821190873a415e2fef445474d997103c8d5651,"from neutron.i18n import _LE, _LI, _LW",0,2,0.4,117
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Unable to plug attachment in NSX logical """,1,2,0.4,118
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Unable to update name on NSX backend """,1,2,0.4,119
77821190873a415e2fef445474d997103c8d5651,from neutron_fwaas.db.firewall import firewall_db,1,2,0.4,120
77821190873a415e2fef445474d997103c8d5651,"""neutron port %s on the NSX plaform"") % port_id)",1,2,0.4,121
77821190873a415e2fef445474d997103c8d5651,from neutron.common import constants,1,2,0.4,122
77821190873a415e2fef445474d997103c8d5651,from oslo.utils import excutils,1,2,0.4,123
77821190873a415e2fef445474d997103c8d5651,from oslo.config import cfg,1,2,0.4,124
77821190873a415e2fef445474d997103c8d5651,"msg = _(""Rule Resource binding not found!"")",1,2,0.4,125
77821190873a415e2fef445474d997103c8d5651,exceptions as vcns_exc),1,2,0.4,126
77821190873a415e2fef445474d997103c8d5651,from neutron.plugins.vmware.vshield.common import (,1,2,0.4,127
77821190873a415e2fef445474d997103c8d5651,"msg = (_(""Pool Resource binding with edge_id:%(edge_id)s """,1,2,0.4,128
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""Nat rules not found in nsx for port: %s""), id)",1,2,0.4,129
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Unable to remove NSX mapping for Neutron router """,1,2,0.4,130
77821190873a415e2fef445474d997103c8d5651,"""service %(def_l3_gw_svc)s id is correct""),",1,2,0.4,131
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Unable to create L3GW port on logical router """,1,2,0.4,132
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_(""Unable to create port or set port """,1,2,0.4,133
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Logical switch update on NSX backend failed. """,1,2,0.4,134
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Neutron port %(port_id)s not found on NSX backend. """,1,2,0.4,135
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""An error occurred while creating NAT """,1,2,0.4,136
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Unable to find NSX mappings for neutron """,1,2,0.4,137
77821190873a415e2fef445474d997103c8d5651,res = {,1,1,0.2,138
77821190873a415e2fef445474d997103c8d5651,router_id = firewall['firewall'].get(vcns_const.ROUTER_ID),1,1,0.2,139
77821190873a415e2fef445474d997103c8d5651,if not router_id:,1,1,0.2,140
77821190873a415e2fef445474d997103c8d5651,if self._get_resource_router_id_binding(,1,1,0.2,141
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.ServiceOverQuota(,1,1,0.2,142
77821190873a415e2fef445474d997103c8d5651,"fw = super(NsxAdvancedPlugin, self).create_firewall(context, firewall)",1,1,0.2,143
77821190873a415e2fef445474d997103c8d5651,rule_list_pre = self._make_firewall_rule_list_by_policy_id(,1,1,0.2,144
77821190873a415e2fef445474d997103c8d5651,fw[rsi.ROUTER_ID] = router_id,1,1,0.2,145
77821190873a415e2fef445474d997103c8d5651,service_router_binding = self._get_resource_router_id_binding(,1,1,0.2,146
77821190873a415e2fef445474d997103c8d5651,firewall['firewall']['status'] = service_constants.PENDING_UPDATE,1,1,0.2,147
77821190873a415e2fef445474d997103c8d5651,fw_with_rules['firewall_rule_list'] = firewall_rule_list,1,1,0.2,148
77821190873a415e2fef445474d997103c8d5651,"fw = super(NsxAdvancedPlugin, self).update_firewall(",1,1,0.2,149
77821190873a415e2fef445474d997103c8d5651,fw[rsi.ROUTER_ID] = service_router_binding['router_id'],1,1,0.2,150
77821190873a415e2fef445474d997103c8d5651,#TODO(linb):do rollback on error,1,1,0.2,151
77821190873a415e2fef445474d997103c8d5651,"rule = self._get_firewall_rule(context, rule_id)",1,1,0.2,152
77821190873a415e2fef445474d997103c8d5651,fw_with_rules = fw,1,1,0.2,153
77821190873a415e2fef445474d997103c8d5651,firewall_rule_list = self._make_firewall_rule_list_by_policy_id(,1,1,0.2,154
77821190873a415e2fef445474d997103c8d5651,if not firewall_rule_list:,1,1,0.2,155
77821190873a415e2fef445474d997103c8d5651,firewall_rule_list = kwargs.get('firewall_rule_list'),1,1,0.2,156
77821190873a415e2fef445474d997103c8d5651,edge_id = self._get_edge_id_by_vcns_edge_binding(,1,1,0.2,157
77821190873a415e2fef445474d997103c8d5651,if not edge_id:,1,1,0.2,158
77821190873a415e2fef445474d997103c8d5651,# The firewall rule is not associated with firewall policy yet,1,1,0.2,159
77821190873a415e2fef445474d997103c8d5651,if not rule.firewall_policy_id:,1,1,0.2,160
77821190873a415e2fef445474d997103c8d5651,"firewall_policy_db = self._get_firewall_policy(context, policy_id)",1,1,0.2,161
77821190873a415e2fef445474d997103c8d5651,router_binding = vcns_db.get_vcns_router_binding(,1,1,0.2,162
77821190873a415e2fef445474d997103c8d5651,"firewall_policy_db = self._get_firewall_policy(context, fw_policy_id)",1,1,0.2,163
77821190873a415e2fef445474d997103c8d5651,if not fw_policy_id:,1,1,0.2,164
77821190873a415e2fef445474d997103c8d5651,if fw_rule.get('firewall_policy_id'):,1,1,0.2,165
77821190873a415e2fef445474d997103c8d5651,if rule_list_pre == rule_list_new:,1,1,0.2,166
77821190873a415e2fef445474d997103c8d5651,rule_list_new = self._make_firewall_rule_list_by_policy_id(,1,1,0.2,167
77821190873a415e2fef445474d997103c8d5651,"fwr = super(NsxAdvancedPlugin, self).get_firewall_rule(",1,1,0.2,168
77821190873a415e2fef445474d997103c8d5651,"fw = super(NsxAdvancedPlugin, self).get_firewall(",1,1,0.2,169
77821190873a415e2fef445474d997103c8d5651,if firewall_rules_pre == firewall_rules:,1,1,0.2,170
77821190873a415e2fef445474d997103c8d5651,"res = qry.filter_by(monitor_id=id,",1,1,0.2,171
77821190873a415e2fef445474d997103c8d5651,"if issubclass(model, loadbalancer_db.PoolMonitorAssociation):",1,1,0.2,172
77821190873a415e2fef445474d997103c8d5651,qry = context.session.query(model),1,1,0.2,173
77821190873a415e2fef445474d997103c8d5651,"vip = self.get_vip(context, vip_binding.resource_id)",1,1,0.2,174
77821190873a415e2fef445474d997103c8d5651,vip_addrs = [],1,1,0.2,175
77821190873a415e2fef445474d997103c8d5651,vip_bindings = self._get_resource_router_id_bindings(,1,1,0.2,176
77821190873a415e2fef445474d997103c8d5651,"fwp = super(NsxAdvancedPlugin, self).remove_rule(",1,1,0.2,177
77821190873a415e2fef445474d997103c8d5651,"#if insert_before or insert_after is set, we would call",1,1,0.2,178
77821190873a415e2fef445474d997103c8d5651,if rule_info.get('insert_before') or rule_info.get('insert_after'):,1,1,0.2,179
77821190873a415e2fef445474d997103c8d5651,"firewall_policy = self.get_firewall_policy(context, firewall_policy_id)",1,1,0.2,180
77821190873a415e2fef445474d997103c8d5651,"fwp = super(NsxAdvancedPlugin, self).insert_rule(",1,1,0.2,181
77821190873a415e2fef445474d997103c8d5651,# Get the router_service insertion binding with firewall id,1,1,0.2,182
77821190873a415e2fef445474d997103c8d5651,"fw_list = self._get_firewall_list_from_firewall_policy(context, id)",1,1,0.2,183
77821190873a415e2fef445474d997103c8d5651,firewall_rules = self._make_firewall_rule_list_by_policy_id(,1,1,0.2,184
77821190873a415e2fef445474d997103c8d5651,if fields and rsi.ROUTER_ID not in fields:,1,1,0.2,185
77821190873a415e2fef445474d997103c8d5651,"fwp = super(NsxAdvancedPlugin, self).update_firewall_policy(",1,1,0.2,186
77821190873a415e2fef445474d997103c8d5651,firewall_rules_pre = self._make_firewall_rule_list_by_policy_id(,1,1,0.2,187
77821190873a415e2fef445474d997103c8d5651,#TODO(linb): do rollback on error,1,1,0.2,188
77821190873a415e2fef445474d997103c8d5651,# get router service insertion binding with firewall id,1,1,0.2,189
77821190873a415e2fef445474d997103c8d5651,if not fw_list:,1,1,0.2,190
77821190873a415e2fef445474d997103c8d5651,"fw_list = self._get_firewall_list_from_firewall_rule(context, id)",1,1,0.2,191
77821190873a415e2fef445474d997103c8d5651,if fwr_pre == fwr:,1,1,0.2,192
77821190873a415e2fef445474d997103c8d5651,"fwr = super(NsxAdvancedPlugin, self).update_firewall_rule(",1,1,0.2,193
77821190873a415e2fef445474d997103c8d5651,"fwr_pre = self.get_firewall_rule(context, id)",1,1,0.2,194
77821190873a415e2fef445474d997103c8d5651,fw[rsi.ROUTER_ID] = mapping[fw['id']],1,1,0.2,195
77821190873a415e2fef445474d997103c8d5651,"mapping = dict([(binding['resource_id'], binding['router_id'])",1,1,0.2,196
77821190873a415e2fef445474d997103c8d5651,service_router_bindings = self._get_resource_router_id_bindings(,1,1,0.2,197
77821190873a415e2fef445474d997103c8d5651,"fws = super(NsxAdvancedPlugin, self).get_firewalls(",1,1,0.2,198
77821190873a415e2fef445474d997103c8d5651,"fw_rule = self.get_firewall_rule(context, firewall_rule_id)",1,1,0.2,199
77821190873a415e2fef445474d997103c8d5651,"# TODO(fank): do rollback on error, or have a dedicated thread",1,1,0.2,200
77821190873a415e2fef445474d997103c8d5651,"raise fw_ext.FirewallInPendingState(firewall_id=firewall_id,",1,1,0.2,201
77821190873a415e2fef445474d997103c8d5651,router_ids = [],1,1,0.2,202
77821190873a415e2fef445474d997103c8d5651,vse_status_level[router_id] = db_status_level,1,1,0.2,203
77821190873a415e2fef445474d997103c8d5651,vse_status_level[router_id] = status_level,1,1,0.2,204
77821190873a415e2fef445474d997103c8d5651,if status_level > db_status_level:,1,1,0.2,205
77821190873a415e2fef445474d997103c8d5651,db_status_level = vse_db_status_level[router_id],1,1,0.2,206
77821190873a415e2fef445474d997103c8d5651,router_id = edge_id_to_router_id[edge_id],1,1,0.2,207
77821190873a415e2fef445474d997103c8d5651,if edge_id in edge_id_to_router_id:,1,1,0.2,208
77821190873a415e2fef445474d997103c8d5651,edges_status_level = self.vcns_driver.get_edges_statuses(),1,1,0.2,209
77821190873a415e2fef445474d997103c8d5651,vse_status_level = {},1,1,0.2,210
77821190873a415e2fef445474d997103c8d5651,if not vse_db_status_level:,1,1,0.2,211
77821190873a415e2fef445474d997103c8d5651,vse_db_status_level[router_id] = (,1,1,0.2,212
77821190873a415e2fef445474d997103c8d5651,edge_id_to_router_id[binding['edge_id']] = router_id,1,1,0.2,213
77821190873a415e2fef445474d997103c8d5651,router_id = binding['router_id'],1,1,0.2,214
77821190873a415e2fef445474d997103c8d5651,if not binding['edge_id']:,1,1,0.2,215
77821190873a415e2fef445474d997103c8d5651,edge_id_to_router_id = {},1,1,0.2,216
77821190873a415e2fef445474d997103c8d5651,"if fwall['status'] in [service_constants.PENDING_CREATE,",1,1,0.2,217
77821190873a415e2fef445474d997103c8d5651,vse_db_status_level = {},1,1,0.2,218
77821190873a415e2fef445474d997103c8d5651,bindings = self._model_query(,1,1,0.2,219
77821190873a415e2fef445474d997103c8d5651,nsx_status[nsx_lrouter['uuid']] = (,1,1,0.2,220
77821190873a415e2fef445474d997103c8d5651,"if (nsx_lrouter[""_relations""][""LogicalRouterStatus""]",1,1,0.2,221
77821190873a415e2fef445474d997103c8d5651,nsx_status = {},1,1,0.2,222
77821190873a415e2fef445474d997103c8d5651,"nsx_lrouters = routerlib.get_lrouters(self.cluster,",1,1,0.2,223
77821190873a415e2fef445474d997103c8d5651,# get nsx lrouters status,1,1,0.2,224
77821190873a415e2fef445474d997103c8d5651,if edge_status_level > edge_db_status_level:,1,1,0.2,225
77821190873a415e2fef445474d997103c8d5651,edge_db_status_level = ROUTER_STATUS_LEVEL[binding.status],1,1,0.2,226
77821190873a415e2fef445474d997103c8d5651,edge_status_level = self.vcns_driver.get_edge_status(,1,1,0.2,227
77821190873a415e2fef445474d997103c8d5651,"binding = vcns_db.get_vcns_router_binding(context.session, id)",1,1,0.2,228
77821190873a415e2fef445474d997103c8d5651,nsx_status = vcns_const.RouterStatus.ROUTER_STATUS_ERROR,1,1,0.2,229
77821190873a415e2fef445474d997103c8d5651,"""%(model)s : %(id)s is in DELETEing status!"") %",1,1,0.2,230
77821190873a415e2fef445474d997103c8d5651,if fields and 'status' not in fields:,1,1,0.2,231
77821190873a415e2fef445474d997103c8d5651,"router = super(NsxAdvancedPlugin, self).get_router(context, id)",1,1,0.2,232
77821190873a415e2fef445474d997103c8d5651,if router_type == ROUTER_TYPE_ADVANCED:,1,1,0.2,233
77821190873a415e2fef445474d997103c8d5651,"vse_status_level = self._get_vse_status(context, id)",1,1,0.2,234
77821190873a415e2fef445474d997103c8d5651,"fwall = self.get_firewall(context, firewall_id)",1,1,0.2,235
77821190873a415e2fef445474d997103c8d5651,firewall['status'] = status,1,1,0.2,236
77821190873a415e2fef445474d997103c8d5651,if firewall:,1,1,0.2,237
77821190873a415e2fef445474d997103c8d5651,fw_db.status = status,1,1,0.2,238
77821190873a415e2fef445474d997103c8d5651,raise fw_ext.FirewallInPendingState(,1,1,0.2,239
77821190873a415e2fef445474d997103c8d5651,if status == service_constants.PENDING_UPDATE and (,1,1,0.2,240
77821190873a415e2fef445474d997103c8d5651,"fw_db = self._get_firewall(context, firewall_id)",1,1,0.2,241
77821190873a415e2fef445474d997103c8d5651,except sa_exc.NoResultFound:,1,1,0.2,242
77821190873a415e2fef445474d997103c8d5651,fip_dbs = fip_qry.filter_by(fixed_port_id=port_id),1,1,0.2,243
77821190873a415e2fef445474d997103c8d5651,routers = set(),1,1,0.2,244
77821190873a415e2fef445474d997103c8d5651,if fip_db.fixed_port_id:,1,1,0.2,245
77821190873a415e2fef445474d997103c8d5651,router_id = None,1,1,0.2,246
77821190873a415e2fef445474d997103c8d5651,"fip_db = self._get_floatingip(context, id)",1,1,0.2,247
77821190873a415e2fef445474d997103c8d5651,"fip = super(NsxAdvancedPlugin, self).update_floatingip(",1,1,0.2,248
77821190873a415e2fef445474d997103c8d5651,"if router_id and self._is_advanced_service_router(context, router_id):",1,1,0.2,249
77821190873a415e2fef445474d997103c8d5651,router_id = fip.get('router_id'),1,1,0.2,250
77821190873a415e2fef445474d997103c8d5651,"fip = super(NsxAdvancedPlugin, self).create_floatingip(",1,1,0.2,251
77821190873a415e2fef445474d997103c8d5651,"info = super(NsxAdvancedPlugin, self).remove_router_interface(",1,1,0.2,252
77821190873a415e2fef445474d997103c8d5651,if router.enable_snat:,1,1,0.2,253
77821190873a415e2fef445474d997103c8d5651,"if self._is_advanced_service_router(context, router_id):",1,1,0.2,254
77821190873a415e2fef445474d997103c8d5651,"info = super(NsxAdvancedPlugin, self).add_router_interface(",1,1,0.2,255
77821190873a415e2fef445474d997103c8d5651,vse_status_level = (,1,1,0.2,256
77821190873a415e2fef445474d997103c8d5651,vse_status_level = vse_status_all.get(router['id']),1,1,0.2,257
77821190873a415e2fef445474d997103c8d5651,vse_status_all = self._get_all_vse_statuses(context),1,1,0.2,258
77821190873a415e2fef445474d997103c8d5651,"routers = super(NsxAdvancedPlugin, self).get_routers(",1,1,0.2,259
77821190873a415e2fef445474d997103c8d5651,router['status'] = ROUTER_STATUS[vse_status_level],1,1,0.2,260
77821190873a415e2fef445474d997103c8d5651,if vse_status_level > ROUTER_STATUS_LEVEL[router['status']]:,1,1,0.2,261
77821190873a415e2fef445474d997103c8d5651,res = qry.filter_by(id=id).one(),1,1,0.2,262
77821190873a415e2fef445474d997103c8d5651,"raise exceptions.VcnsBadRequest(resource='router', msg=msg)",1,1,0.2,263
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.NsxPluginException(err_msg=msg),1,1,0.2,264
77821190873a415e2fef445474d997103c8d5651,"service = super(NsxAdvancedPlugin, self).create_vpnservice(",1,1,0.2,265
77821190873a415e2fef445474d997103c8d5651,edge_id = task.userdata.get('edge_id'),1,1,0.2,266
77821190873a415e2fef445474d997103c8d5651,context = jobdata['context'],1,1,0.2,267
77821190873a415e2fef445474d997103c8d5651,jobdata = task.userdata['jobdata'],1,1,0.2,268
77821190873a415e2fef445474d997103c8d5651,self.plugin = plugin,1,1,0.2,269
77821190873a415e2fef445474d997103c8d5651,class VcnsCallbacks(object):,1,1,0.2,270
77821190873a415e2fef445474d997103c8d5651,vpnservice_id = self.get_ipsec_site_connection(,1,1,0.2,271
77821190873a415e2fef445474d997103c8d5651,ipsec_site_connection['ipsec_site_connection']['status'] = (,1,1,0.2,272
77821190873a415e2fef445474d997103c8d5651,ipsec_site_conn = super(,1,1,0.2,273
77821190873a415e2fef445474d997103c8d5651,if not vpn_service_db.ipsec_site_connections:,1,1,0.2,274
77821190873a415e2fef445474d997103c8d5651,"vpn_service_db = self._get_vpnservice(context, vpnservice_id)",1,1,0.2,275
77821190873a415e2fef445474d997103c8d5651,# Only admin_state_up attribute is configurable on Edge.,1,1,0.2,276
77821190873a415e2fef445474d997103c8d5651,"service = super(NsxAdvancedPlugin, self).update_vpnservice(",1,1,0.2,277
77821190873a415e2fef445474d997103c8d5651,vpnservice['vpnservice']['status'] = service_constants.PENDING_UPDATE,1,1,0.2,278
77821190873a415e2fef445474d997103c8d5651,"if self.get_vpnservices(context, filters={'router_id': [router_id]}):",1,1,0.2,279
77821190873a415e2fef445474d997103c8d5651,"_LE(""Failed to update pool with pool_monitor!""))",1,1,0.2,280
77821190873a415e2fef445474d997103c8d5651,router_id = vpnservice['vpnservice'].get('router_id'),1,1,0.2,281
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to update ipsec VPN configuration """,1,1,0.2,282
77821190873a415e2fef445474d997103c8d5651,except exceptions.VcnsApiException:,1,1,0.2,283
77821190873a415e2fef445474d997103c8d5651,except exceptions.VcnsBadRequest:,1,1,0.2,284
77821190873a415e2fef445474d997103c8d5651,ipsecpolicy = self._make_ipsecpolicy_dict(,1,1,0.2,285
77821190873a415e2fef445474d997103c8d5651,ikepolicy = self._make_ikepolicy_dict(,1,1,0.2,286
77821190873a415e2fef445474d997103c8d5651,site = self._make_ipsec_site_connection_dict(ipsec_site_conn),1,1,0.2,287
77821190873a415e2fef445474d997103c8d5651,if ipsec_site_conn.id != removed_ipsec_conn_id:,1,1,0.2,288
77821190873a415e2fef445474d997103c8d5651,subnet = self._make_subnet_dict(vpn_service.subnet),1,1,0.2,289
77821190873a415e2fef445474d997103c8d5651,external_ip = vpn_service.router.gw_port['fixed_ips'][0]['ip_address'],1,1,0.2,290
77821190873a415e2fef445474d997103c8d5651,nsx_status = vcns_const.RouterStatus.ROUTER_STATUS_DOWN,1,1,0.2,291
77821190873a415e2fef445474d997103c8d5651,if not vpn_service.router.gw_port:,1,1,0.2,292
77821190873a415e2fef445474d997103c8d5651,"vpn_service = self._get_vpnservice(context, vpnservice_id)",1,1,0.2,293
77821190873a415e2fef445474d997103c8d5651,neutron_router_id = jobdata['neutron_router_id'],1,1,0.2,294
77821190873a415e2fef445474d997103c8d5651,name = task.userdata['router_name'],1,1,0.2,295
77821190873a415e2fef445474d997103c8d5651,if edge_id:,1,1,0.2,296
77821190873a415e2fef445474d997103c8d5651,router_db = None,1,1,0.2,297
77821190873a415e2fef445474d997103c8d5651,"""%(ext_net_id)s, attached to NSX router:%(router_id)s"",",1,1,0.2,298
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""_nsx_delete_ext_gw_port completed on external network """,1,1,0.2,299
77821190873a415e2fef445474d997103c8d5651,"""on NSX platform"") % router_id)",1,1,0.2,300
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.NsxPluginException(,1,1,0.2,301
77821190873a415e2fef445474d997103c8d5651,except api_exc.ResourceNotFound:,1,1,0.2,302
77821190873a415e2fef445474d997103c8d5651,"lr_port = self._find_router_gw_port(context, port_data)",1,1,0.2,303
77821190873a415e2fef445474d997103c8d5651,"""on NSX platform : the router may have """,0,1,0.2,304
77821190873a415e2fef445474d997103c8d5651,except n_exc.NotFound:,0,1,0.2,305
77821190873a415e2fef445474d997103c8d5651,"""%(ext_net_id)s, attached to NSX router:%(router_id)s"",",0,1,0.2,306
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""_nsx_delete_ext_gw_port completed on external network """,0,1,0.2,307
77821190873a415e2fef445474d997103c8d5651,"lr_port = self._find_router_gw_port(context, port_data)",0,1,0.2,308
77821190873a415e2fef445474d997103c8d5651,"if kwargs.get(""tags""):",1,1,0.2,309
77821190873a415e2fef445474d997103c8d5651,"if kwargs.get(""shared"", False) or len(args) >= 6:",1,1,0.2,310
77821190873a415e2fef445474d997103c8d5651,tz_config = args[4],1,1,0.2,311
77821190873a415e2fef445474d997103c8d5651,switch_name = args[3],1,1,0.2,312
77821190873a415e2fef445474d997103c8d5651,if args[2]:,1,1,0.2,313
77821190873a415e2fef445474d997103c8d5651,tags = utils.get_tags(),1,1,0.2,314
77821190873a415e2fef445474d997103c8d5651,router_id = task.userdata['router_id'],1,1,0.2,315
77821190873a415e2fef445474d997103c8d5651,router_db['status'] = service_constants.ERROR,1,1,0.2,316
77821190873a415e2fef445474d997103c8d5651,if router_db:,1,1,0.2,317
77821190873a415e2fef445474d997103c8d5651,if binding['status'] == service_constants.PENDING_CREATE:,1,1,0.2,318
77821190873a415e2fef445474d997103c8d5651,binding = vcns_db.get_vcns_router_binding(,1,1,0.2,319
77821190873a415e2fef445474d997103c8d5651,router_db['status'] = service_constants.ACTIVE,1,1,0.2,320
77821190873a415e2fef445474d997103c8d5651,if (router_db and,1,1,0.2,321
77821190873a415e2fef445474d997103c8d5651,if task.status == tasks_const.TaskStatus.COMPLETED:,1,1,0.2,322
77821190873a415e2fef445474d997103c8d5651,except l3.RouterNotFound:,1,1,0.2,323
77821190873a415e2fef445474d997103c8d5651,router_db = self.plugin._get_router(,1,1,0.2,324
77821190873a415e2fef445474d997103c8d5651,sites = [],1,1,0.2,325
77821190873a415e2fef445474d997103c8d5651,"monitor = self.get_health_monitor(context, monitor_id)",1,1,0.2,326
77821190873a415e2fef445474d997103c8d5651,res.status = status,1,1,0.2,327
77821190873a415e2fef445474d997103c8d5651,edge_id = router_binding.edge_id,1,1,0.2,328
77821190873a415e2fef445474d997103c8d5651,"router = self._get_router(context, router_binding.router_id)",1,1,0.2,329
77821190873a415e2fef445474d997103c8d5651,router_binding = self._get_resource_router_id_binding(,1,1,0.2,330
77821190873a415e2fef445474d997103c8d5651,"pool = self.get_pool(context, v['pool_id'])",1,1,0.2,331
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to update vip with id: %s!""), id)",1,1,0.2,332
77821190873a415e2fef445474d997103c8d5651,"old_pool = self.get_pool(context, old_vip['pool_id'])",1,1,0.2,333
77821190873a415e2fef445474d997103c8d5651,if old_vip['pool_id'] != v['pool_id']:,1,1,0.2,334
77821190873a415e2fef445474d997103c8d5651,v[rsi.ROUTER_ID] = self._get_resource_router_id_binding(,1,1,0.2,335
77821190873a415e2fef445474d997103c8d5651,vip['vip']['status'] = service_constants.PENDING_UPDATE,1,1,0.2,336
77821190873a415e2fef445474d997103c8d5651,session_persistence_update = bool(,1,1,0.2,337
77821190873a415e2fef445474d997103c8d5651,"old_vip = self.get_vip(context, id)",1,1,0.2,338
77821190873a415e2fef445474d997103c8d5651,return v,1,1,0.2,339
77821190873a415e2fef445474d997103c8d5651,v[rsi.ROUTER_ID] = router_id,1,1,0.2,340
77821190873a415e2fef445474d997103c8d5651,#Create the vip port on vShield Edge,1,1,0.2,341
77821190873a415e2fef445474d997103c8d5651,"network_id = self.get_subnet(context, subnet_id)['network_id']",1,1,0.2,342
77821190873a415e2fef445474d997103c8d5651,"res = super(NsxAdvancedPlugin,",1,1,0.2,343
77821190873a415e2fef445474d997103c8d5651,subnet_id = vip['vip']['subnet_id'],1,1,0.2,344
77821190873a415e2fef445474d997103c8d5651,router_id = vip['vip'].get(vcns_const.ROUTER_ID),1,1,0.2,345
77821190873a415e2fef445474d997103c8d5651,if not members:,1,1,0.2,346
77821190873a415e2fef445474d997103c8d5651,members = kwargs.get('members'),1,1,0.2,347
77821190873a415e2fef445474d997103c8d5651,"edge_id = self._get_edge_id_by_vip_id(context, pool['vip_id'])",1,1,0.2,348
77821190873a415e2fef445474d997103c8d5651,members = [,1,1,0.2,349
77821190873a415e2fef445474d997103c8d5651,if monitor_ide == monitor_id:,1,1,0.2,350
77821190873a415e2fef445474d997103c8d5651,"hm = self.get_health_monitor(context, monitor_id)",1,1,0.2,351
77821190873a415e2fef445474d997103c8d5651,#Check wheter the pool is already created on the router,1,1,0.2,352
77821190873a415e2fef445474d997103c8d5651,edge_id = self._get_edge_id_by_vip_id(,1,1,0.2,353
77821190873a415e2fef445474d997103c8d5651,"pool = self.get_pool(context, pool_id)",1,1,0.2,354
77821190873a415e2fef445474d997103c8d5651,obj['status'] = status,1,1,0.2,355
77821190873a415e2fef445474d997103c8d5651,if obj:,1,1,0.2,356
77821190873a415e2fef445474d997103c8d5651,"vip = super(NsxAdvancedPlugin, self).get_vip(context, id, fields)",1,1,0.2,357
77821190873a415e2fef445474d997103c8d5651,vip[rsi.ROUTER_ID] = service_router_binding['router_id'],1,1,0.2,358
77821190873a415e2fef445474d997103c8d5651,"vips = super(NsxAdvancedPlugin, self).get_vips(",1,1,0.2,359
77821190873a415e2fef445474d997103c8d5651,vip[rsi.ROUTER_ID] = mapping[vip['id']],1,1,0.2,360
77821190873a415e2fef445474d997103c8d5651,if len(monitors) > 0:,1,1,0.2,361
77821190873a415e2fef445474d997103c8d5651,monitors = pool.get('health_monitors'),1,1,0.2,362
77821190873a415e2fef445474d997103c8d5651,monitor_id = health_monitor['health_monitor']['id'],1,1,0.2,363
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to update monitor """,1,1,0.2,364
77821190873a415e2fef445474d997103c8d5651,if pool.get('vip_id'):,1,1,0.2,365
77821190873a415e2fef445474d997103c8d5651,pool_id = hm_pool['pool_id'],1,1,0.2,366
77821190873a415e2fef445474d997103c8d5651,"hm = super(NsxAdvancedPlugin, self).update_health_monitor(",1,1,0.2,367
77821190873a415e2fef445474d997103c8d5651,"old_hm = super(NsxAdvancedPlugin, self).get_health_monitor(",1,1,0.2,368
77821190873a415e2fef445474d997103c8d5651,"m = self.get_member(context, id)",1,1,0.2,369
77821190873a415e2fef445474d997103c8d5651,pool_id = m['pool_id'],1,1,0.2,370
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to update old pool """,1,1,0.2,371
77821190873a415e2fef445474d997103c8d5651,if old_pool.get('vip_id'):,1,1,0.2,372
77821190873a415e2fef445474d997103c8d5651,"old_pool = self.get_pool(context, old_pool_id)",1,1,0.2,373
77821190873a415e2fef445474d997103c8d5651,old_pool_id = old_member['pool_id'],1,1,0.2,374
77821190873a415e2fef445474d997103c8d5651,if m['pool_id'] != old_member['pool_id']:,1,1,0.2,375
77821190873a415e2fef445474d997103c8d5651,"m = super(NsxAdvancedPlugin, self).update_member(",1,1,0.2,376
77821190873a415e2fef445474d997103c8d5651,"old_member = self.get_member(context, id)",1,1,0.2,377
77821190873a415e2fef445474d997103c8d5651,member['member']['status'] = service_constants.PENDING_UPDATE,1,1,0.2,378
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to update pool with the member""))",1,1,0.2,379
77821190873a415e2fef445474d997103c8d5651,if not pool.get('vip_id'):,1,1,0.2,380
77821190873a415e2fef445474d997103c8d5651,pool_id = m.get('pool_id'),1,1,0.2,381
77821190873a415e2fef445474d997103c8d5651,"m = super(NsxAdvancedPlugin, self).create_member(context, member)",1,1,0.2,382
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to update pool with id: %s!""), id)",1,1,0.2,383
77821190873a415e2fef445474d997103c8d5651,return p,1,1,0.2,384
77821190873a415e2fef445474d997103c8d5651,if not p.get('vip_id'):,1,1,0.2,385
77821190873a415e2fef445474d997103c8d5651,#Check whether the pool is already associated with the vip,1,1,0.2,386
77821190873a415e2fef445474d997103c8d5651,pool['pool']['status'] = service_constants.PENDING_UPDATE,1,1,0.2,387
77821190873a415e2fef445474d997103c8d5651,except n_exc.NotFound:,1,1,0.2,388
77821190873a415e2fef445474d997103c8d5651,"edge_id = self._get_edge_id_by_vip_id(context, id)",1,1,0.2,389
77821190873a415e2fef445474d997103c8d5651,nsx_status = vcns_const.RouterStatus.ROUTER_STATUS_ACTIVE,1,1,0.2,390
77821190873a415e2fef445474d997103c8d5651,"""on NSX platform"") % router_id)",1,1,0.2,391
77821190873a415e2fef445474d997103c8d5651,"""associated with the Neutron security group """,1,1,0.2,392
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""The NSX security profile %(sec_profile_id)s, """,1,1,0.2,393
77821190873a415e2fef445474d997103c8d5651,LOG.error(_('Error while updating security profile ',1,1,0.2,394
77821190873a415e2fef445474d997103c8d5651,"""Neutron and NSX states have diverged.""),",1,1,0.2,395
77821190873a415e2fef445474d997103c8d5651,"""failed on NSX backend (NSX id:%(nsx_id)s). """,1,1,0.2,396
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Removal of gateway device: %(neutron_id)s """,1,1,0.2,397
77821190873a415e2fef445474d997103c8d5651,"""NSX backend (NSX id:%(nsx_id)s) because the NSX """,1,1,0.2,398
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Removal of gateway device: %(neutron_id)s failed on """,1,1,0.2,399
77821190873a415e2fef445474d997103c8d5651,"""for network gateway: %s""), id)",1,1,0.2,400
77821190873a415e2fef445474d997103c8d5651,"""rules on the NSX platform for floating """,1,1,0.2,401
77821190873a415e2fef445474d997103c8d5651,"""was found on the NSX platform""))",1,1,0.2,402
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""An incorrect number of matching NAT rules """,1,1,0.2,403
77821190873a415e2fef445474d997103c8d5651,"""on the NSX platform for floating ip:%s""),",1,1,0.2,404
77821190873a415e2fef445474d997103c8d5651,"""on NSX Platform""), router_id)",1,1,0.2,405
77821190873a415e2fef445474d997103c8d5651,class RouterInUseByLBService(n_exc.InUse):,1,1,0.2,406
77821190873a415e2fef445474d997103c8d5651,"""gateway. Router:%s has been removed from """,1,1,0.2,407
77821190873a415e2fef445474d997103c8d5651,"LOG.info(_(""Create router failed while setting external """,1,1,0.2,408
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""Failed to set gateway info for router being """,1,1,0.2,409
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""Logical switch for network %s was not """,1,1,0.2,410
77821190873a415e2fef445474d997103c8d5651,"""Neutron network id:%(net_id)s; """,1,1,0.2,411
77821190873a415e2fef445474d997103c8d5651,"""on the NSX backend:%s""), lswitch_ids)",1,1,0.2,412
77821190873a415e2fef445474d997103c8d5651,"""logical network %s""), network.id)",1,1,0.2,413
77821190873a415e2fef445474d997103c8d5651,"""for port '%s' has already been deleted.""),",1,1,0.2,414
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Ignoring exception as this means the peer """,1,1,0.2,415
77821190873a415e2fef445474d997103c8d5651,"""Terminating delete operation. A dangling router port """,1,1,0.2,416
77821190873a415e2fef445474d997103c8d5651,"""%(nsx_id)s creation to be rolled back for Neutron """,1,1,0.2,417
77821190873a415e2fef445474d997103c8d5651,"""router port %(r_port_id)s, associated with """,1,1,0.2,418
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""Unable to process default l2 gw service:%s""),",1,1,0.2,419
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_(""An exception occurred while removing the """,1,1,0.2,420
77821190873a415e2fef445474d997103c8d5651,class RouterInUseByFWService(n_exc.InUse):,1,1,0.2,421
77821190873a415e2fef445474d997103c8d5651,__native_sorting_support = False,1,1,0.2,422
77821190873a415e2fef445474d997103c8d5651,"if not qry.filter_by(monitor_id=id, edge_id=edge_id).delete():",1,1,0.2,423
77821190873a415e2fef445474d997103c8d5651,supported_extension_aliases = (,1,1,0.2,424
77821190873a415e2fef445474d997103c8d5651,"class NsxAdvancedPlugin(sr_db.ServiceRouter_mixin,",1,1,0.2,425
77821190873a415e2fef445474d997103c8d5651,ROUTER_STATUS_LEVEL = {,1,1,0.2,426
77821190873a415e2fef445474d997103c8d5651,ROUTER_STATUS = [,1,1,0.2,427
77821190873a415e2fef445474d997103c8d5651,ROUTER_TYPE_ADVANCED = 2,1,1,0.2,428
77821190873a415e2fef445474d997103c8d5651,ROUTER_TYPE_BASIC = 1,1,1,0.2,429
77821190873a415e2fef445474d997103c8d5651,LOG = logging.getLogger(__name__),1,1,0.2,430
77821190873a415e2fef445474d997103c8d5651,except Exception:,1,1,0.2,431
77821190873a415e2fef445474d997103c8d5651,import netaddr,1,1,0.2,432
77821190873a415e2fef445474d997103c8d5651,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.2,433
77821190873a415e2fef445474d997103c8d5651,#    a copy of the License at,1,1,0.2,434
77821190873a415e2fef445474d997103c8d5651,#    not use this file except in compliance with the License. You may obtain,1,1,0.2,435
77821190873a415e2fef445474d997103c8d5651,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,1,0.2,436
77821190873a415e2fef445474d997103c8d5651,qry = session.query(vcns_models.VcnsEdgeMonitorBinding),1,1,0.2,437
77821190873a415e2fef445474d997103c8d5651,class VcnsDriverException(NsxPluginException):,1,1,0.2,438
77821190873a415e2fef445474d997103c8d5651,binding = vcns_models.VcnsEdgeMonitorBinding(,1,1,0.2,439
77821190873a415e2fef445474d997103c8d5651,"if not qry.filter_by(pool_id=id, edge_id=edge_id).delete():",1,1,0.2,440
77821190873a415e2fef445474d997103c8d5651,"binding = qry.filter_by(edge_id=edge_id,",1,1,0.2,441
77821190873a415e2fef445474d997103c8d5651,qry = session.query(vcns_models.VcnsEdgePoolBinding),1,1,0.2,442
77821190873a415e2fef445474d997103c8d5651,binding = vcns_models.VcnsEdgePoolBinding(,1,1,0.2,443
77821190873a415e2fef445474d997103c8d5651,if not qry.filter_by(vip_id=id).delete():,1,1,0.2,444
77821190873a415e2fef445474d997103c8d5651,raise vcns_exc.VcnsNotFound(,1,1,0.2,445
77821190873a415e2fef445474d997103c8d5651,qry = session.query(vcns_models.VcnsEdgeVipBinding),1,1,0.2,446
77821190873a415e2fef445474d997103c8d5651,binding = vcns_models.VcnsEdgeVipBinding(,1,1,0.2,447
77821190873a415e2fef445474d997103c8d5651,except exc.NoResultFound:,1,1,0.2,448
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.NsxPluginException(err_msg=msg),1,1,0.2,449
77821190873a415e2fef445474d997103c8d5651,if not (session.query(vcns_models.VcnsEdgeFirewallRuleBinding).,1,1,0.2,450
77821190873a415e2fef445474d997103c8d5651,binding = vcns_models.VcnsEdgeFirewallRuleBinding(,1,1,0.2,451
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(_(""[%(rid)d] Released connection %(conn)s is not an """,1,1,0.2,452
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""An exception occurred while removing the """,0,1,0.2,453
77821190873a415e2fef445474d997103c8d5651,"""associated with the Neutron security group """,0,1,0.2,454
77821190873a415e2fef445474d997103c8d5651,NSX_INI_FULL_PATH = get_fake_conf('nsx.ini.full.test'),1,1,0.2,455
77821190873a415e2fef445474d997103c8d5651,"if not self._is_advanced_service_router(context, router_id):",1,1,0.2,456
77821190873a415e2fef445474d997103c8d5651,"raise n_exc.BadRequest(resource='router', msg=msg)",1,1,0.2,457
77821190873a415e2fef445474d997103c8d5651,if not router_id:,1,1,0.2,458
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.AdvRouterServiceUnavailable(router_id=router['id']),0,1,0.2,459
77821190873a415e2fef445474d997103c8d5651,if router['status'] != service_constants.ACTIVE:,0,1,0.2,460
77821190873a415e2fef445474d997103c8d5651,"if not self._is_advanced_service_router(context, router=router):",0,1,0.2,461
77821190873a415e2fef445474d997103c8d5651,"router = self._get_router(context, router_id)",0,1,0.2,462
77821190873a415e2fef445474d997103c8d5651,"raise n_exc.BadRequest(resource='router', msg=msg)",0,1,0.2,463
77821190873a415e2fef445474d997103c8d5651,NeutronManager),1,1,0.2,464
77821190873a415e2fef445474d997103c8d5651,"self.assertRaises(exceptions.NsxPluginException, NeutronManager)",1,1,0.2,465
77821190873a415e2fef445474d997103c8d5651,plugin = NeutronManager().get_plugin(),1,1,0.2,466
77821190873a415e2fef445474d997103c8d5651,NVP_INI_DEPR_PATH = get_fake_conf('nvp.ini.full.test'),1,1,0.2,467
77821190873a415e2fef445474d997103c8d5651,NSX_INI_AGENTLESS_PATH = get_fake_conf('nsx.ini.agentless.test'),1,1,0.2,468
77821190873a415e2fef445474d997103c8d5651,NSX_INI_PATH = get_fake_conf('nsx.ini.basic.test'),1,1,0.2,469
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""The NSX security profile %(sec_profile_id)s, """,0,1,0.2,470
77821190873a415e2fef445474d997103c8d5651,BASE_CONF_PATH = get_fake_conf('neutron.conf.test'),1,1,0.2,471
77821190873a415e2fef445474d997103c8d5651,plugin = manager.NeutronManager().get_plugin(),0,1,0.2,472
77821190873a415e2fef445474d997103c8d5651,NVP_INI_DEPR_PATH = vmware.get_fake_conf('nvp.ini.full.test'),0,1,0.2,473
77821190873a415e2fef445474d997103c8d5651,NSX_INI_AGENTLESS_PATH = vmware.get_fake_conf('nsx.ini.agentless.test'),0,1,0.2,474
77821190873a415e2fef445474d997103c8d5651,NSX_INI_FULL_PATH = vmware.get_fake_conf('nsx.ini.full.test'),0,1,0.2,475
77821190873a415e2fef445474d997103c8d5651,NSX_INI_PATH = vmware.get_fake_conf('nsx.ini.basic.test'),0,1,0.2,476
77821190873a415e2fef445474d997103c8d5651,BASE_CONF_PATH = vmware.get_fake_conf('neutron.conf.test'),0,1,0.2,477
77821190873a415e2fef445474d997103c8d5651,"""on NSX platform"") % router_id))",1,1,0.2,478
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.NsxPluginException(,1,1,0.2,479
77821190873a415e2fef445474d997103c8d5651,except api_exc.ResourceNotFound:,1,1,0.2,480
77821190873a415e2fef445474d997103c8d5651,"""on NSX platform"") % router_id)",0,1,0.2,481
77821190873a415e2fef445474d997103c8d5651,"if lr_status[""fabric_status""]:",1,1,0.2,482
77821190873a415e2fef445474d997103c8d5651,except n_exc.NotFound:,0,1,0.2,483
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.NsxPluginException(err_msg=msg),1,1,0.2,484
77821190873a415e2fef445474d997103c8d5651,"raise exceptions.VcnsBadRequest(resource='router', msg=msg)",1,1,0.2,485
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""[%(rid)d] Released connection %(conn)s is not an """,0,1,0.2,486
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Unable to plug attachment in NSX logical """,0,1,0.2,487
77821190873a415e2fef445474d997103c8d5651,LOG.error(_LE('Error while updating security profile ',0,1,0.2,488
77821190873a415e2fef445474d997103c8d5651,"""Neutron and NSX states have diverged.""),",0,1,0.2,489
77821190873a415e2fef445474d997103c8d5651,"""failed on NSX backend (NSX id:%(nsx_id)s). """,0,1,0.2,490
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Removal of gateway device: %(neutron_id)s """,0,1,0.2,491
77821190873a415e2fef445474d997103c8d5651,"""NSX backend (NSX id:%(nsx_id)s) because the NSX """,0,1,0.2,492
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""Removal of gateway device: %(neutron_id)s failed on """,0,1,0.2,493
77821190873a415e2fef445474d997103c8d5651,"""for network gateway: %s""), id)",0,1,0.2,494
77821190873a415e2fef445474d997103c8d5651,"""rules on the NSX platform for floating """,0,1,0.2,495
77821190873a415e2fef445474d997103c8d5651,"""was found on the NSX platform""))",0,1,0.2,496
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""An incorrect number of matching NAT rules """,0,1,0.2,497
77821190873a415e2fef445474d997103c8d5651,"""on the NSX platform for floating ip:%s""),",0,1,0.2,498
77821190873a415e2fef445474d997103c8d5651,"""on NSX platform""), router_id)",0,1,0.2,499
77821190873a415e2fef445474d997103c8d5651,"""on NSX Platform""), router_id)",0,1,0.2,500
77821190873a415e2fef445474d997103c8d5651,"""gateway. Router:%s has been removed from """,0,1,0.2,501
77821190873a415e2fef445474d997103c8d5651,"LOG.info(_LI(""Create router failed while setting external """,0,1,0.2,502
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""Failed to set gateway info for router being """,0,1,0.2,503
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Unable to create L3GW port on logical router """,0,1,0.2,504
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""Logical switch for network %s was not """,0,1,0.2,505
77821190873a415e2fef445474d997103c8d5651,"""Neutron network id:%(net_id)s; """,0,1,0.2,506
77821190873a415e2fef445474d997103c8d5651,"""found on the NSX backend:%s""), lswitch_ids)",0,1,0.2,507
77821190873a415e2fef445474d997103c8d5651,"""logical network %s""), network.id)",0,1,0.2,508
77821190873a415e2fef445474d997103c8d5651,"""for port '%s' has already been deleted.""),",0,1,0.2,509
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Ignoring exception as this means the peer """,0,1,0.2,510
77821190873a415e2fef445474d997103c8d5651,"""Terminating delete operation. A dangling router port """,0,1,0.2,511
77821190873a415e2fef445474d997103c8d5651,"_LW(""Concurrent network deletion detected; Back-end """,0,1,0.2,512
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""An exception occurred while creating the """,0,1,0.2,513
77821190873a415e2fef445474d997103c8d5651,"""router port %(r_port_id)s, associated with """,0,1,0.2,514
77821190873a415e2fef445474d997103c8d5651,__native_pagination_support = False,1,1,0.2,515
77821190873a415e2fef445474d997103c8d5651,if not router_id:,0,1,0.2,516
77821190873a415e2fef445474d997103c8d5651,self._super_create_ext_gw_port = (,1,1,0.2,517
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""VCNS: delete default gateway %s"", orgnexthop)",1,1,0.2,518
77821190873a415e2fef445474d997103c8d5651,# create logic router port,1,1,0.2,519
77821190873a415e2fef445474d997103c8d5651,raise n_exc.NeutronException(message=msg),1,1,0.2,520
77821190873a415e2fef445474d997103c8d5651,except api_exc.NsxApiException:,1,1,0.2,521
77821190873a415e2fef445474d997103c8d5651,ls_port = switchlib.create_lport(,1,1,0.2,522
77821190873a415e2fef445474d997103c8d5651,# create logic switch port,1,1,0.2,523
77821190873a415e2fef445474d997103c8d5651,transport_zone_config = [{,1,1,0.2,524
77821190873a415e2fef445474d997103c8d5651,jobdata = {,1,1,0.2,525
77821190873a415e2fef445474d997103c8d5651,binding = vcns_db.add_vcns_router_binding(,1,1,0.2,526
77821190873a415e2fef445474d997103c8d5651,router_id = fip_db.router_id,1,1,0.2,527
77821190873a415e2fef445474d997103c8d5651,if not self._is_advanced_service_router(router=router):,1,1,0.2,528
77821190873a415e2fef445474d997103c8d5651,if (new_ext_net_id == org_ext_net_id and,1,1,0.2,529
77821190873a415e2fef445474d997103c8d5651,if orgnexthop != newnexthop:,1,1,0.2,530
77821190873a415e2fef445474d997103c8d5651,if orgaddr != newaddr or orgmask != newmask:,1,1,0.2,531
77821190873a415e2fef445474d997103c8d5651,if new_ext_net_id != org_ext_net_id and orgnexthop:,1,1,0.2,532
77821190873a415e2fef445474d997103c8d5651,pname = name[:36] + '-lp',1,1,0.2,533
77821190873a415e2fef445474d997103c8d5651,"binding = vcns_db.get_vcns_router_binding(context.session, router_id)",1,1,0.2,534
77821190873a415e2fef445474d997103c8d5651,"newaddr, newmask, newnexthop = self._get_external_attachment_info(",1,1,0.2,535
77821190873a415e2fef445474d997103c8d5651,new_enable_snat = router.enable_snat,1,1,0.2,536
77821190873a415e2fef445474d997103c8d5651,new_ext_net_id = router.gw_port_id and router.gw_port.network_id,1,1,0.2,537
77821190873a415e2fef445474d997103c8d5651,"orgaddr, orgmask, orgnexthop = self._get_external_attachment_info(",1,1,0.2,538
77821190873a415e2fef445474d997103c8d5651,org_enable_snat = router.enable_snat,1,1,0.2,539
77821190873a415e2fef445474d997103c8d5651,org_ext_net_id = router.gw_port_id and router.gw_port.network_id,1,1,0.2,540
77821190873a415e2fef445474d997103c8d5651,if sync:,1,1,0.2,541
77821190873a415e2fef445474d997103c8d5651,task = self.vcns_driver.update_interface(,1,1,0.2,542
77821190873a415e2fef445474d997103c8d5651,"vip_addrs = self._get_all_vip_addrs_by_router_id(context,",1,1,0.2,543
77821190873a415e2fef445474d997103c8d5651,secondary = [],1,1,0.2,544
77821190873a415e2fef445474d997103c8d5651,"addr, mask, nexthop = self._get_external_attachment_info(",1,1,0.2,545
77821190873a415e2fef445474d997103c8d5651,"snat, dnat = self._get_nat_rules(context, router)",1,1,0.2,546
77821190873a415e2fef445474d997103c8d5651,neutron_port_id = '',1,1,0.2,547
77821190873a415e2fef445474d997103c8d5651,admin_status_enabled = True,1,1,0.2,548
77821190873a415e2fef445474d997103c8d5651,if gw_port and router.enable_snat:,1,1,0.2,549
77821190873a415e2fef445474d997103c8d5651,if vips:,1,1,0.2,550
77821190873a415e2fef445474d997103c8d5651,"lr_status = lrouter[""_relations""][""LogicalRouterStatus""]",1,1,0.2,551
77821190873a415e2fef445474d997103c8d5651,if (router_id and,1,1,0.2,552
77821190873a415e2fef445474d997103c8d5651,self._super_delete_ext_gw_port = (,1,1,0.2,553
77821190873a415e2fef445474d997103c8d5651,"router_id = self._get_fip_assoc_data(context, fip, floatingip_db)[2]",1,1,0.2,554
77821190873a415e2fef445474d997103c8d5651,"# physical network, and routes for phyiscal network needs to be",1,1,0.2,555
77821190873a415e2fef445474d997103c8d5651,"previous_routes = super(NsxAdvancedPlugin, self)._update_lrouter(",1,1,0.2,556
77821190873a415e2fef445474d997103c8d5651,# delete NSX logical router,1,1,0.2,557
77821190873a415e2fef445474d997103c8d5651,except exceptions.ResourceNotFound:,1,1,0.2,558
77821190873a415e2fef445474d997103c8d5651,lswitch_id = binding['lswitch_id'],1,1,0.2,559
77821190873a415e2fef445474d997103c8d5651,if not binding:,1,1,0.2,560
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.RouterInUseByFWService(,1,1,0.2,561
77821190873a415e2fef445474d997103c8d5651,if firewalls:,1,1,0.2,562
77821190873a415e2fef445474d997103c8d5651,raise nsx_exc.RouterInUseByLBService(,1,1,0.2,563
77821190873a415e2fef445474d997103c8d5651,vips = self.get_vips(,1,1,0.2,564
77821190873a415e2fef445474d997103c8d5651,lr_port = routerlib.create_router_lport(,1,1,0.2,565
77821190873a415e2fef445474d997103c8d5651,raise vpn_ext.RouterInUseByVPNService(,1,1,0.2,566
77821190873a415e2fef445474d997103c8d5651,if vpnservices:,1,1,0.2,567
77821190873a415e2fef445474d997103c8d5651,vpnservices = self.get_vpnservices(,1,1,0.2,568
77821190873a415e2fef445474d997103c8d5651,router_filter = {'router_id': [router_id]},1,1,0.2,569
77821190873a415e2fef445474d997103c8d5651,lrouter['status'] = service_constants.PENDING_CREATE,1,1,0.2,570
77821190873a415e2fef445474d997103c8d5651,lswitch = self._create_integration_lswitch(,1,1,0.2,571
77821190873a415e2fef445474d997103c8d5651,lsname = name[:36] + '-ls',1,1,0.2,572
77821190873a415e2fef445474d997103c8d5651,name = router['name'],1,1,0.2,573
77821190873a415e2fef445474d997103c8d5651,"tenant_id = self._get_tenant_id_for_create(context, router)",1,1,0.2,574
77821190873a415e2fef445474d997103c8d5651,return lrouter,1,1,0.2,575
77821190873a415e2fef445474d997103c8d5651,if router_type == ROUTER_TYPE_BASIC:,1,1,0.2,576
77821190873a415e2fef445474d997103c8d5651,router_type = self._find_router_type(router),1,1,0.2,577
77821190873a415e2fef445474d997103c8d5651,raise e,1,1,0.2,578
77821190873a415e2fef445474d997103c8d5651,snat_ip = gw_port['fixed_ips'][0]['ip_address'],1,1,0.2,579
77821190873a415e2fef445474d997103c8d5651,firewalls = self.get_firewalls(,1,1,0.2,580
77821190873a415e2fef445474d997103c8d5651,if fip.fixed_port_id:,1,1,0.2,581
77821190873a415e2fef445474d997103c8d5651,router_type = ROUTER_TYPE_ADVANCED,1,1,0.2,582
77821190873a415e2fef445474d997103c8d5651,nexthop = None,1,1,0.2,583
77821190873a415e2fef445474d997103c8d5651,netmask = None,1,1,0.2,584
77821190873a415e2fef445474d997103c8d5651,ipaddress = None,1,1,0.2,585
77821190873a415e2fef445474d997103c8d5651,gw_port = router.gw_port,1,1,0.2,586
77821190873a415e2fef445474d997103c8d5651,# NOP for Edge because currently the port will be create internally,1,1,0.2,587
77821190873a415e2fef445474d997103c8d5651,"if not self._is_advanced_service_router(context, router_id):",1,1,0.2,588
77821190873a415e2fef445474d997103c8d5651,router_id = port_data['device_id'],1,1,0.2,589
77821190873a415e2fef445474d997103c8d5651,"router_type = self._get_router_type(context, router_id)",1,1,0.2,590
77821190873a415e2fef445474d997103c8d5651,router_type = self._get_router_type(router=router),1,1,0.2,591
77821190873a415e2fef445474d997103c8d5651,if router:,1,1,0.2,592
77821190873a415e2fef445474d997103c8d5651,if is_service_router:,1,1,0.2,593
77821190873a415e2fef445474d997103c8d5651,"is_service_router = router.get(sr.SERVICE_ROUTER, False)",1,1,0.2,594
77821190873a415e2fef445474d997103c8d5651,router_type = ROUTER_TYPE_BASIC,1,1,0.2,595
77821190873a415e2fef445474d997103c8d5651,if router['extra_attributes']['service_router']:,1,1,0.2,596
77821190873a415e2fef445474d997103c8d5651,if gw_port.get('fixed_ips'):,1,1,0.2,597
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""EDGE: router = %s"", router)",1,1,0.2,598
77821190873a415e2fef445474d997103c8d5651,self._port_drivers['create'][l3_db.DEVICE_OWNER_ROUTER_GW] = (,1,1,0.2,599
77821190873a415e2fef445474d997103c8d5651,"router = self._get_router(context, router_id)",1,1,0.2,600
77821190873a415e2fef445474d997103c8d5651,if router_id in self._router_type:,1,1,0.2,601
77821190873a415e2fef445474d997103c8d5651,if not router:,1,1,0.2,602
77821190873a415e2fef445474d997103c8d5651,self._router_type[router_id] = router_type,1,1,0.2,603
77821190873a415e2fef445474d997103c8d5651,"name, tz_config, tags = (",1,1,0.2,604
77821190873a415e2fef445474d997103c8d5651,base.switchlib.create_lswitch = self._proxy_create_lswitch,1,1,0.2,605
77821190873a415e2fef445474d997103c8d5651,self.callbacks = VcnsCallbacks(self.safe_reference),1,1,0.2,606
77821190873a415e2fef445474d997103c8d5651,self._router_type = {},1,1,0.2,607
77821190873a415e2fef445474d997103c8d5651,self._port_drivers['delete'][l3_db.DEVICE_OWNER_ROUTER_GW] = (,1,1,0.2,608
77821190873a415e2fef445474d997103c8d5651,snat = [],1,1,0.2,609
77821190873a415e2fef445474d997103c8d5651,# cache router type based on router id,1,1,0.2,610
77821190873a415e2fef445474d997103c8d5651,if gw_port:,1,1,0.2,611
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver = vcns_driver.VcnsDriver(self.callbacks),1,1,0.2,612
77821190873a415e2fef445474d997103c8d5651,ipaddress = gw_port['fixed_ips'][0]['ip_address'],1,1,0.2,613
77821190873a415e2fef445474d997103c8d5651,"binding = vcns_db.get_vcns_router_binding(context.session,",1,1,0.2,614
77821190873a415e2fef445474d997103c8d5651,fip_db = fip_qry.filter_by(router_id=router['id']).all(),1,1,0.2,615
77821190873a415e2fef445474d997103c8d5651,fip_qry = context.session.query(l3_db.FloatingIP),1,1,0.2,616
77821190873a415e2fef445474d997103c8d5651,network_id = gw_port.get('network_id'),1,1,0.2,617
77821190873a415e2fef445474d997103c8d5651,dnat = [],1,1,0.2,618
77821190873a415e2fef445474d997103c8d5651,routes = [],1,1,0.2,619
77821190873a415e2fef445474d997103c8d5651,"subnets = self._find_router_subnets_cidrs(context.elevated(),",1,1,0.2,620
77821190873a415e2fef445474d997103c8d5651,if 'subnets' in kwargs:,1,1,0.2,621
77821190873a415e2fef445474d997103c8d5651,"nexthop = self._get_external_gateway_address(context,",1,1,0.2,622
77821190873a415e2fef445474d997103c8d5651,skippable = False,1,1,0.2,623
77821190873a415e2fef445474d997103c8d5651,# skip this route update,1,1,0.2,624
77821190873a415e2fef445474d997103c8d5651,nexthop = kwargs['nexthop'],1,1,0.2,625
77821190873a415e2fef445474d997103c8d5651,if 'nexthop' in kwargs:,1,1,0.2,626
77821190873a415e2fef445474d997103c8d5651,skippable = True,1,1,0.2,627
77821190873a415e2fef445474d997103c8d5651,edge_id = binding['edge_id'],1,1,0.2,628
77821190873a415e2fef445474d997103c8d5651,subnets = kwargs['subnets'],1,1,0.2,629
77821190873a415e2fef445474d997103c8d5651,edge_id = kwargs.get('edge_id'),1,1,0.2,630
77821190873a415e2fef445474d997103c8d5651,netmask = str(netaddr.IPNetwork(ext_subnet.cidr).netmask),1,1,0.2,631
77821190873a415e2fef445474d997103c8d5651,"ext_net = self._get_network(context, network_id)",1,1,0.2,632
77821190873a415e2fef445474d997103c8d5651,"router = self._get_router(context, kwargs['router_id'])",1,1,0.2,633
77821190873a415e2fef445474d997103c8d5651,"raise n_exc.BadRequest(resource='router', msg=msg)",1,1,0.2,634
77821190873a415e2fef445474d997103c8d5651,ext_subnet = ext_net.subnets[0],1,1,0.2,635
77821190873a415e2fef445474d997103c8d5651,if ext_net.subnets:,1,1,0.2,636
77821190873a415e2fef445474d997103c8d5651,nexthop = ext_subnet.gateway_ip,1,1,0.2,637
77821190873a415e2fef445474d997103c8d5651,"ipaddress, netmask, nexthop = self._get_external_attachment_info(",1,1,0.2,638
77821190873a415e2fef445474d997103c8d5651,if network_id:,1,1,0.2,639
77821190873a415e2fef445474d997103c8d5651,router = kwargs.get('router'),1,1,0.2,640
77821190873a415e2fef445474d997103c8d5651,if not ext_net.external:,1,1,0.2,641
77821190873a415e2fef445474d997103c8d5651,for fw in fws:,1,0,0.0,642
77821190873a415e2fef445474d997103c8d5651,"def update_firewall_rule(self, context, id, firewall_rule):",1,0,0.0,643
77821190873a415e2fef445474d997103c8d5651,for binding in service_router_bindings]),1,0,0.0,644
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.update_firewall_rule(context, id, edge_id, fwr)",1,0,0.0,645
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""update_firewall_rule() called"")",1,0,0.0,646
77821190873a415e2fef445474d997103c8d5651,"self._ensure_update_or_delete_firewall_rule(context, id)",1,0,0.0,647
77821190873a415e2fef445474d997103c8d5651,"context, id, firewall_rule)",1,0,0.0,648
77821190873a415e2fef445474d997103c8d5651,return fwr,1,0,0.0,649
77821190873a415e2fef445474d997103c8d5651,for fw in fw_list:,1,0,0.0,650
77821190873a415e2fef445474d997103c8d5651,"context, service_router_binding.router_id)",1,0,0.0,651
77821190873a415e2fef445474d997103c8d5651,"context, id)",1,0,0.0,652
77821190873a415e2fef445474d997103c8d5651,"def update_firewall_policy(self, context, id, firewall_policy):",1,0,0.0,653
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""update_firewall_policy() called"")",1,0,0.0,654
77821190873a415e2fef445474d997103c8d5651,"self._ensure_firewall_policy_update_allowed(context, id)",1,0,0.0,655
77821190873a415e2fef445474d997103c8d5651,"context, id, firewall_policy)",1,0,0.0,656
77821190873a415e2fef445474d997103c8d5651,return fwp,1,0,0.0,657
77821190873a415e2fef445474d997103c8d5651,# TODO(fank): optimized by using _get_resource_router_id_bindings,1,0,0.0,658
77821190873a415e2fef445474d997103c8d5651,firewall_rule_list=firewall_rules),1,0,0.0,659
77821190873a415e2fef445474d997103c8d5651,"def insert_rule(self, context, id, rule_info):",1,0,0.0,660
77821190873a415e2fef445474d997103c8d5651,"context, firewall_db.Firewall,",1,0,0.0,661
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""insert_rule() called"")",1,0,0.0,662
77821190873a415e2fef445474d997103c8d5651,"context, rule_info['firewall_rule_id'])",1,0,0.0,663
77821190873a415e2fef445474d997103c8d5651,"context, id, rule_info)",1,0,0.0,664
77821190873a415e2fef445474d997103c8d5651,resource_ids=[fw['id'] for fw in fws]),1,0,0.0,665
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""delete_firewall() called"")",1,0,0.0,666
77821190873a415e2fef445474d997103c8d5651,return fws,1,0,0.0,667
77821190873a415e2fef445474d997103c8d5651,"context, filters, fields)",1,0,0.0,668
77821190873a415e2fef445474d997103c8d5651,"context, fw['id'], service_constants.ACTIVE, fw)",1,0,0.0,669
77821190873a415e2fef445474d997103c8d5651,return fw,1,0,0.0,670
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.insert_rule(context, rule_info, edge_id, fwr)",1,0,0.0,671
77821190873a415e2fef445474d997103c8d5651,"def update_firewall(self, context, id, firewall):",1,0,0.0,672
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""update_firewall() called"")",1,0,0.0,673
77821190873a415e2fef445474d997103c8d5651,"self._ensure_firewall_update_allowed(context, id)",1,0,0.0,674
77821190873a415e2fef445474d997103c8d5651,"context, firewall_db.Firewall, resource_id=id)",1,0,0.0,675
77821190873a415e2fef445474d997103c8d5651,"context,",1,0,0.0,676
77821190873a415e2fef445474d997103c8d5651,"self.get_firewall(context, id)['firewall_policy_id'])",1,0,0.0,677
77821190873a415e2fef445474d997103c8d5651,"context, id, firewall)",1,0,0.0,678
77821190873a415e2fef445474d997103c8d5651,self._vcns_update_firewall(,1,0,0.0,679
77821190873a415e2fef445474d997103c8d5651,"context, fw, service_router_binding.router_id,",1,0,0.0,680
77821190873a415e2fef445474d997103c8d5651,firewall_rule_list=rule_list_new),1,0,0.0,681
77821190873a415e2fef445474d997103c8d5651,"def delete_firewall(self, context, id):",1,0,0.0,682
77821190873a415e2fef445474d997103c8d5651,"context, id, service_constants.PENDING_DELETE)",1,0,0.0,683
77821190873a415e2fef445474d997103c8d5651,"self._vcns_delete_firewall(context, service_router_binding.router_id)",1,0,0.0,684
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_firewall(context, id)",1,0,0.0,685
77821190873a415e2fef445474d997103c8d5651,self._delete_resource_router_id_binding(,1,0,0.0,686
77821190873a415e2fef445474d997103c8d5651,"context, id, firewall_db.Firewall)",1,0,0.0,687
77821190873a415e2fef445474d997103c8d5651,"def get_firewall(self, context, id, fields=None):",1,0,0.0,688
77821190873a415e2fef445474d997103c8d5651,"context, id, fields)",1,0,0.0,689
77821190873a415e2fef445474d997103c8d5651,"context, firewall_db.Firewall, resource_id=fw['id'])",1,0,0.0,690
77821190873a415e2fef445474d997103c8d5651,"def get_firewalls(self, context, filters=None, fields=None):",1,0,0.0,691
77821190873a415e2fef445474d997103c8d5651,#VCNS insert_rule API,1,0,0.0,692
77821190873a415e2fef445474d997103c8d5651,res.get('status') == service_constants.PENDING_DELETE):,1,0,0.0,693
77821190873a415e2fef445474d997103c8d5651,#Else we would call bulk configuration on the firewall,1,0,0.0,694
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.delete_health_monitor(,1,0,0.0,695
77821190873a415e2fef445474d997103c8d5651,'id': id}),1,0,0.0,696
77821190873a415e2fef445474d997103c8d5651,"def _vcns_create_pool_and_monitors(self, context, pool_id, **kwargs):",1,0,0.0,697
77821190873a415e2fef445474d997103c8d5651,"context, pool['vip_id'])",1,0,0.0,698
77821190873a415e2fef445474d997103c8d5651,#in case of future's M:N relation between Pool and Vip,1,0,0.0,699
77821190873a415e2fef445474d997103c8d5651,#Check associated HealthMonitors and then create them,1,0,0.0,700
77821190873a415e2fef445474d997103c8d5651,for monitor_id in pool.get('health_monitors'):,1,0,0.0,701
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.create_health_monitor(,1,0,0.0,702
77821190873a415e2fef445474d997103c8d5651,"context, edge_id, hm)",1,0,0.0,703
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to create healthmonitor """,1,0,0.0,704
77821190873a415e2fef445474d997103c8d5651,"""associated with pool id: %s!""), pool_id)",1,0,0.0,705
77821190873a415e2fef445474d997103c8d5651,for monitor_ide in pool.get('health_monitors'):,1,0,0.0,706
77821190873a415e2fef445474d997103c8d5651,"context, monitor_ide, edge_id)",1,0,0.0,707
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_firewall(context, fw, edge_id=edge_id)",1,0,0.0,708
77821190873a415e2fef445474d997103c8d5651,#Create the pool on the edge,1,0,0.0,709
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).get_member(",1,0,0.0,710
77821190873a415e2fef445474d997103c8d5651,"context, member_id)",1,0,0.0,711
77821190873a415e2fef445474d997103c8d5651,for member_id in pool.get('members'),1,0,0.0,712
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.create_pool(context, edge_id, pool, members)",1,0,0.0,713
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to create pool on vshield edge""))",1,0,0.0,714
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.delete_pool(,1,0,0.0,715
77821190873a415e2fef445474d997103c8d5651,"context, pool_id, edge_id)",1,0,0.0,716
77821190873a415e2fef445474d997103c8d5651,# here would be bulk configuration operation on firewall,1,0,0.0,717
77821190873a415e2fef445474d997103c8d5651,"def _vcns_update_pool(self, context, pool, **kwargs):",1,0,0.0,718
77821190873a415e2fef445474d997103c8d5651,"context, monitor_id, edge_id)",1,0,0.0,719
77821190873a415e2fef445474d997103c8d5651,"{'model': model,",1,0,0.0,720
77821190873a415e2fef445474d997103c8d5651,pool_id=pool_id).one(),1,0,0.0,721
77821190873a415e2fef445474d997103c8d5651,pool_id=None):,1,0,0.0,722
77821190873a415e2fef445474d997103c8d5651,"def _resource_set_status(self, context, model, id, status, obj=None,",1,0,0.0,723
77821190873a415e2fef445474d997103c8d5651,"def remove_rule(self, context, id, rule_info):",1,0,0.0,724
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""remove_rule() called"")",1,0,0.0,725
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.delete_firewall_rule(,1,0,0.0,726
77821190873a415e2fef445474d997103c8d5651,"context, fwr['id'], edge_id)",1,0,0.0,727
77821190873a415e2fef445474d997103c8d5651,# LBAAS service plugin implementation,1,0,0.0,728
77821190873a415e2fef445474d997103c8d5651,"def _get_edge_id_by_vip_id(self, context, vip_id):",1,0,0.0,729
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Vip, resource_id=vip_id)",1,0,0.0,730
77821190873a415e2fef445474d997103c8d5651,with excutils.save_and_reraise_exception():,1,0,0.0,731
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to find the edge with """,1,0,0.0,732
77821190873a415e2fef445474d997103c8d5651,"""vip_id: %s""), vip_id)",1,0,0.0,733
77821190873a415e2fef445474d997103c8d5651,return self._get_edge_id_by_vcns_edge_binding(,1,0,0.0,734
77821190873a415e2fef445474d997103c8d5651,def _get_all_vip_addrs_by_router_id(,1,0,0.0,735
77821190873a415e2fef445474d997103c8d5651,"self, context, router_id):",1,0,0.0,736
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Vip, router_ids=[router_id])",1,0,0.0,737
77821190873a415e2fef445474d997103c8d5651,for vip_binding in vip_bindings:,1,0,0.0,738
77821190873a415e2fef445474d997103c8d5651,vip_addrs.append(vip.get('address')),1,0,0.0,739
77821190873a415e2fef445474d997103c8d5651,return vip_addrs,1,0,0.0,740
77821190873a415e2fef445474d997103c8d5651,"def _add_router_service_insertion_binding(self, context, resource_id,",1,0,0.0,741
77821190873a415e2fef445474d997103c8d5651,"router_id,",1,0,0.0,742
77821190873a415e2fef445474d997103c8d5651,model):,1,0,0.0,743
77821190873a415e2fef445474d997103c8d5651,"'id': resource_id,",1,0,0.0,744
77821190873a415e2fef445474d997103c8d5651,"self._process_create_resource_router_id(context, res,",1,0,0.0,745
77821190873a415e2fef445474d997103c8d5651,model),1,0,0.0,746
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_firewall(context, fw, router_id)",1,0,0.0,747
77821190873a415e2fef445474d997103c8d5651,routers.add(fip_db.router_id),1,0,0.0,748
77821190873a415e2fef445474d997103c8d5651,"context, res, firewall_db.Firewall)",1,0,0.0,749
77821190873a415e2fef445474d997103c8d5651,"context, id, floatingip)",1,0,0.0,750
77821190873a415e2fef445474d997103c8d5651,"def add_router_interface(self, context, router_id, interface_info):",1,0,0.0,751
77821190873a415e2fef445474d997103c8d5651,"context, router_id, interface_info)",1,0,0.0,752
77821190873a415e2fef445474d997103c8d5651,"# do sync work (rollback, re-configure, or make router down)",1,0,0.0,753
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_static_routes(context, router=router)",1,0,0.0,754
77821190873a415e2fef445474d997103c8d5651,return info,1,0,0.0,755
77821190873a415e2fef445474d997103c8d5651,"def remove_router_interface(self, context, router_id, interface_info):",1,0,0.0,756
77821190873a415e2fef445474d997103c8d5651,"def create_floatingip(self, context, floatingip):",1,0,0.0,757
77821190873a415e2fef445474d997103c8d5651,"context, floatingip)",1,0,0.0,758
77821190873a415e2fef445474d997103c8d5651,"self._update_interface(context, router)",1,0,0.0,759
77821190873a415e2fef445474d997103c8d5651,return fip,1,0,0.0,760
77821190873a415e2fef445474d997103c8d5651,"def update_floatingip(self, context, id, floatingip):",1,0,0.0,761
77821190873a415e2fef445474d997103c8d5651,elif not router_id:,1,0,0.0,762
77821190873a415e2fef445474d997103c8d5651,self._process_create_resource_router_id(,1,0,0.0,763
77821190873a415e2fef445474d997103c8d5651,# The floating IP has been disassociated and should be set to DOWN,1,0,0.0,764
77821190873a415e2fef445474d997103c8d5651,"self.update_floatingip_status(context, fip['id'],",1,0,0.0,765
77821190873a415e2fef445474d997103c8d5651,constants.FLOATINGIP_STATUS_DOWN),1,0,0.0,766
77821190873a415e2fef445474d997103c8d5651,"def delete_floatingip(self, context, id):",1,0,0.0,767
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_floatingip(context, id)",1,0,0.0,768
77821190873a415e2fef445474d997103c8d5651,"def disassociate_floatingips(self, context, port_id):",1,0,0.0,769
77821190873a415e2fef445474d997103c8d5651,for fip_db in fip_dbs:,1,0,0.0,770
77821190873a415e2fef445474d997103c8d5651,pass,1,0,0.0,771
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).disassociate_floatingips(context,",1,0,0.0,772
77821190873a415e2fef445474d997103c8d5651,port_id),1,0,0.0,773
77821190873a415e2fef445474d997103c8d5651,for router_id in routers:,1,0,0.0,774
77821190873a415e2fef445474d997103c8d5651,vcns_const.RouterStatus.ROUTER_STATUS_ERROR),1,0,0.0,775
77821190873a415e2fef445474d997103c8d5651,"# no advanced service router, return here",1,0,0.0,776
77821190873a415e2fef445474d997103c8d5651,break,1,0,0.0,777
77821190873a415e2fef445474d997103c8d5651,for router in routers:,1,0,0.0,778
77821190873a415e2fef445474d997103c8d5651,for nsx_lrouter in nsx_lrouters:,1,0,0.0,779
77821190873a415e2fef445474d997103c8d5651,"def create_vip(self, context, vip):",1,0,0.0,780
77821190873a415e2fef445474d997103c8d5651,"[""fabric_status""]):",1,0,0.0,781
77821190873a415e2fef445474d997103c8d5651,vcns_const.RouterStatus.ROUTER_STATUS_ACTIVE,1,0,0.0,782
77821190873a415e2fef445474d997103c8d5651,vcns_const.RouterStatus.ROUTER_STATUS_DOWN,1,0,0.0,783
77821190873a415e2fef445474d997103c8d5651,"def _get_all_vse_statuses(self, context):",1,0,0.0,784
77821190873a415e2fef445474d997103c8d5651,"context, vcns_models.VcnsRouterBinding)",1,0,0.0,785
77821190873a415e2fef445474d997103c8d5651,for binding in bindings:,1,0,0.0,786
77821190873a415e2fef445474d997103c8d5651,continue,1,0,0.0,787
77821190873a415e2fef445474d997103c8d5651,router_ids.append(router_id),1,0,0.0,788
77821190873a415e2fef445474d997103c8d5651,ROUTER_STATUS_LEVEL[binding['status']]),1,0,0.0,789
77821190873a415e2fef445474d997103c8d5651,"# no advanced service router, no need to query",1,0,0.0,790
77821190873a415e2fef445474d997103c8d5651,return {},1,0,0.0,791
77821190873a415e2fef445474d997103c8d5651,"for edge_id, status_level in edges_status_level.iteritems():",1,0,0.0,792
77821190873a415e2fef445474d997103c8d5651,return vse_status_level,1,0,0.0,793
77821190873a415e2fef445474d997103c8d5651,"def get_router(self, context, id, fields=None):",1,0,0.0,794
77821190873a415e2fef445474d997103c8d5651,"return super(NsxAdvancedPlugin, self).get_router(",1,0,0.0,795
77821190873a415e2fef445474d997103c8d5651,"context, id, fields=fields)",1,0,0.0,796
77821190873a415e2fef445474d997103c8d5651,"return self._fields(router, fields)",1,0,0.0,797
77821190873a415e2fef445474d997103c8d5651,"def get_routers(self, context, filters=None, fields=None, **kwargs):",1,0,0.0,798
77821190873a415e2fef445474d997103c8d5651,"context, filters=filters, **kwargs)",1,0,0.0,799
77821190873a415e2fef445474d997103c8d5651,"# no status checking, just return regular get_routers",1,0,0.0,800
77821190873a415e2fef445474d997103c8d5651,"return [self._fields(router, fields) for router in routers]",1,0,0.0,801
77821190873a415e2fef445474d997103c8d5651,# FWaaS plugin implementation,1,0,0.0,802
77821190873a415e2fef445474d997103c8d5651,def _firewall_set_status(,1,0,0.0,803
77821190873a415e2fef445474d997103c8d5651,"self, context, firewall_id, status, firewall=None):",1,0,0.0,804
77821190873a415e2fef445474d997103c8d5651,self._make_firewall_dict(fw_db),1,0,0.0,805
77821190873a415e2fef445474d997103c8d5651,"def _get_firewall_list_from_firewall_rule(self, context, rule_id):",1,0,0.0,806
77821190873a415e2fef445474d997103c8d5651,return None,1,0,0.0,807
77821190873a415e2fef445474d997103c8d5651,return self._get_firewall_list_from_firewall_policy(,1,0,0.0,808
77821190873a415e2fef445474d997103c8d5651,"context, rule.firewall_policy_id)",1,0,0.0,809
77821190873a415e2fef445474d997103c8d5651,"def _vcns_update_firewall(self, context, fw, router_id=None, **kwargs):",1,0,0.0,810
77821190873a415e2fef445474d997103c8d5651,"context, router_id)",1,0,0.0,811
77821190873a415e2fef445474d997103c8d5651,"context, fw['firewall_policy_id'])",1,0,0.0,812
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.update_firewall(context, edge_id, fw_with_rules)",1,0,0.0,813
77821190873a415e2fef445474d997103c8d5651,self._firewall_set_status(,1,0,0.0,814
77821190873a415e2fef445474d997103c8d5651,"context, fw['id'], service_constants.ERROR)",1,0,0.0,815
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to create firewall on vShield Edge """,1,0,0.0,816
77821190873a415e2fef445474d997103c8d5651,"""bound on router %s""), router_id)",1,0,0.0,817
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Bad Firewall request Input""))",1,0,0.0,818
77821190873a415e2fef445474d997103c8d5651,"def _vcns_delete_firewall(self, context, router_id=None, **kwargs):",1,0,0.0,819
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.delete_firewall(context, edge_id)",1,0,0.0,820
77821190873a415e2fef445474d997103c8d5651,"def create_firewall(self, context, firewall):",1,0,0.0,821
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""create_firewall() called"")",1,0,0.0,822
77821190873a415e2fef445474d997103c8d5651,LOG.error(msg),1,0,0.0,823
77821190873a415e2fef445474d997103c8d5651,"context, firewall_db.Firewall, router_id=router_id):",1,0,0.0,824
77821190873a415e2fef445474d997103c8d5651,"overs='firewall', err_msg=msg)",1,0,0.0,825
77821190873a415e2fef445474d997103c8d5651,#Add router service insertion binding with firewall object,1,0,0.0,826
77821190873a415e2fef445474d997103c8d5651,"'id': fw['id'],",1,0,0.0,827
77821190873a415e2fef445474d997103c8d5651,'router_id': router_id,1,0,0.0,828
77821190873a415e2fef445474d997103c8d5651,for fw_db in firewall_policy_db['firewalls'],1,0,0.0,829
77821190873a415e2fef445474d997103c8d5651,"def _get_firewall_list_from_firewall_policy(self, context, policy_id):",1,0,0.0,830
77821190873a415e2fef445474d997103c8d5651,with context.session.begin(subtransactions=True):,1,0,0.0,831
77821190873a415e2fef445474d997103c8d5651,return router_binding.edge_id,1,0,0.0,832
77821190873a415e2fef445474d997103c8d5651,fw_db.status == service_constants.PENDING_DELETE):,1,0,0.0,833
77821190873a415e2fef445474d997103c8d5651,"firewall_id=firewall_id, pending_state=status)",1,0,0.0,834
77821190873a415e2fef445474d997103c8d5651,"def _ensure_firewall_update_allowed(self, context, firewall_id):",1,0,0.0,835
77821190873a415e2fef445474d997103c8d5651,"service_constants.PENDING_UPDATE,",1,0,0.0,836
77821190873a415e2fef445474d997103c8d5651,service_constants.PENDING_DELETE]:,1,0,0.0,837
77821190873a415e2fef445474d997103c8d5651,pending_state=fwall['status']),1,0,0.0,838
77821190873a415e2fef445474d997103c8d5651,def _ensure_firewall_policy_update_allowed(,1,0,0.0,839
77821190873a415e2fef445474d997103c8d5651,"self, context, firewall_policy_id):",1,0,0.0,840
77821190873a415e2fef445474d997103c8d5651,"for firewall_id in firewall_policy.get('firewall_list', []):",1,0,0.0,841
77821190873a415e2fef445474d997103c8d5651,"self._ensure_firewall_update_allowed(context, firewall_id)",1,0,0.0,842
77821190873a415e2fef445474d997103c8d5651,def _ensure_update_or_delete_firewall_rule(,1,0,0.0,843
77821190873a415e2fef445474d997103c8d5651,"self, context, firewall_rule_id):",1,0,0.0,844
77821190873a415e2fef445474d997103c8d5651,self._ensure_firewall_policy_update_allowed(,1,0,0.0,845
77821190873a415e2fef445474d997103c8d5651,"context, fw_rule['firewall_policy_id'])",1,0,0.0,846
77821190873a415e2fef445474d997103c8d5651,"def _make_firewall_rule_list_by_policy_id(self, context, fw_policy_id):",1,0,0.0,847
77821190873a415e2fef445474d997103c8d5651,return [],1,0,0.0,848
77821190873a415e2fef445474d997103c8d5651,return [,1,0,0.0,849
77821190873a415e2fef445474d997103c8d5651,self._make_firewall_rule_dict(fw_rule_db),1,0,0.0,850
77821190873a415e2fef445474d997103c8d5651,for fw_rule_db in firewall_policy_db['firewall_rules'],1,0,0.0,851
77821190873a415e2fef445474d997103c8d5651,"def _get_edge_id_by_vcns_edge_binding(self, context,",1,0,0.0,852
77821190873a415e2fef445474d997103c8d5651,router_id):,1,0,0.0,853
77821190873a415e2fef445474d997103c8d5651,#Get vcns_router_binding mapping between router and edge,1,0,0.0,854
77821190873a415e2fef445474d997103c8d5651,"context.session, router_id)",1,0,0.0,855
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.update_pool(context, edge_id, pool, members)",1,0,0.0,856
77821190873a415e2fef445474d997103c8d5651,LOG.warning(msg),1,0,0.0,857
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""create_vip() called"")",1,0,0.0,858
77821190873a415e2fef445474d997103c8d5651,"service['id'], service_constants.ERROR, service)",1,0,0.0,859
77821190873a415e2fef445474d997103c8d5651,"NsxAdvancedPlugin, self).create_ipsec_site_connection(",1,0,0.0,860
77821190873a415e2fef445474d997103c8d5651,"context, ipsec_site_connection)",1,0,0.0,861
77821190873a415e2fef445474d997103c8d5651,self._vcns_update_ipsec_config(,1,0,0.0,862
77821190873a415e2fef445474d997103c8d5651,"context, ipsec_site_conn['vpnservice_id'])",1,0,0.0,863
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_ipsec_site_connection(",1,0,0.0,864
77821190873a415e2fef445474d997103c8d5651,"context, ipsec_site_conn['id'])",1,0,0.0,865
77821190873a415e2fef445474d997103c8d5651,"context, vpn_db.IPsecSiteConnection,",1,0,0.0,866
77821190873a415e2fef445474d997103c8d5651,"ipsec_site_conn['id'], service_constants.ACTIVE, ipsec_site_conn)",1,0,0.0,867
77821190873a415e2fef445474d997103c8d5651,return ipsec_site_conn,1,0,0.0,868
77821190873a415e2fef445474d997103c8d5651,"def update_ipsec_site_connection(self, context, ipsec_site_connection_id,",1,0,0.0,869
77821190873a415e2fef445474d997103c8d5651,ipsec_site_connection):,1,0,0.0,870
77821190873a415e2fef445474d997103c8d5651,"NsxAdvancedPlugin, self).update_ipsec_site_connection(",1,0,0.0,871
77821190873a415e2fef445474d997103c8d5651,"context, ipsec_site_connection_id, ipsec_site_connection)",1,0,0.0,872
77821190873a415e2fef445474d997103c8d5651,"context, vpn_db.IPsecSiteConnection, ipsec_site_conn['id'],",1,0,0.0,873
77821190873a415e2fef445474d997103c8d5651,"service_constants.ERROR, ipsec_site_conn)",1,0,0.0,874
77821190873a415e2fef445474d997103c8d5651,"def delete_ipsec_site_connection(self, context, ipsec_site_conn_id):",1,0,0.0,875
77821190873a415e2fef445474d997103c8d5651,"ipsec_site_conn_id, service_constants.PENDING_DELETE)",1,0,0.0,876
77821190873a415e2fef445474d997103c8d5651,"context, ipsec_site_conn_id)['vpnservice_id']",1,0,0.0,877
77821190873a415e2fef445474d997103c8d5651,"context, vpnservice_id, ipsec_site_conn_id)",1,0,0.0,878
77821190873a415e2fef445474d997103c8d5651,"context, vpn_db.IPsecSiteConnection, ipsec_site_conn_id,",1,0,0.0,879
77821190873a415e2fef445474d997103c8d5651,service_constants.ERROR),1,0,0.0,880
77821190873a415e2fef445474d997103c8d5651,"context, ipsec_site_conn_id)",1,0,0.0,881
77821190873a415e2fef445474d997103c8d5651,"""""""Edge callback implementation Callback functions for",1,0,0.0,882
77821190873a415e2fef445474d997103c8d5651,"def create_ipsec_site_connection(self, context, ipsec_site_connection):",1,0,0.0,883
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_ipsec_config(context, service['id'])",1,0,0.0,884
77821190873a415e2fef445474d997103c8d5651,"""""""",1,0,0.0,885
77821190873a415e2fef445474d997103c8d5651,# config on edge side.,1,0,0.0,886
77821190873a415e2fef445474d997103c8d5651,"sites.append({'site': site,",1,0,0.0,887
77821190873a415e2fef445474d997103c8d5651,"'ikepolicy': ikepolicy,",1,0,0.0,888
77821190873a415e2fef445474d997103c8d5651,"'ipsecpolicy': ipsecpolicy,",1,0,0.0,889
77821190873a415e2fef445474d997103c8d5651,"'subnet': subnet,",1,0,0.0,890
77821190873a415e2fef445474d997103c8d5651,'external_ip': external_ip}),1,0,0.0,891
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.update_ipsec_config(,1,0,0.0,892
77821190873a415e2fef445474d997103c8d5651,"edge_id, sites, enabled=vpn_service.admin_state_up)",1,0,0.0,893
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Bad or unsupported Input request!""))",1,0,0.0,894
77821190873a415e2fef445474d997103c8d5651,"""with vpnservice: %(vpnservice_id)s on """,1,0,0.0,895
77821190873a415e2fef445474d997103c8d5651,"""vShield Edge: %(edge_id)s""),",1,0,0.0,896
77821190873a415e2fef445474d997103c8d5651,"{'vpnservice_id': vpnservice_id,",1,0,0.0,897
77821190873a415e2fef445474d997103c8d5651,'edge_id': edge_id}),1,0,0.0,898
77821190873a415e2fef445474d997103c8d5651,"def create_vpnservice(self, context, vpnservice):",1,0,0.0,899
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""create_vpnservice() called"")",1,0,0.0,900
77821190873a415e2fef445474d997103c8d5651,) % router_id,1,0,0.0,901
77821190873a415e2fef445474d997103c8d5651,"overs='vpnservice', err_msg=msg)",1,0,0.0,902
77821190873a415e2fef445474d997103c8d5651,"context, vpnservice)",1,0,0.0,903
77821190873a415e2fef445474d997103c8d5651,"context, vpn_db.VPNService,",1,0,0.0,904
77821190873a415e2fef445474d997103c8d5651,"service['id'], service_constants.ACTIVE, service)",1,0,0.0,905
77821190873a415e2fef445474d997103c8d5651,return service,1,0,0.0,906
77821190873a415e2fef445474d997103c8d5651,"def update_vpnservice(self, context, vpnservice_id, vpnservice):",1,0,0.0,907
77821190873a415e2fef445474d997103c8d5651,"context, vpnservice_id, vpnservice)",1,0,0.0,908
77821190873a415e2fef445474d997103c8d5651,"# the vpnservice. If not, just return without updating ipsec",1,0,0.0,909
77821190873a415e2fef445474d997103c8d5651,asynchronous tasks.,1,0,0.0,910
77821190873a415e2fef445474d997103c8d5651,"def __init__(self, plugin):",1,0,0.0,911
77821190873a415e2fef445474d997103c8d5651,ipsec_site_conn.ikepolicy),1,0,0.0,912
77821190873a415e2fef445474d997103c8d5651,"def snat_delete_result(self, task):",1,0,0.0,913
77821190873a415e2fef445474d997103c8d5651,"def dnat_create_result(self, task):",1,0,0.0,914
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""dnat_create_result %d"", task.status)",1,0,0.0,915
77821190873a415e2fef445474d997103c8d5651,"def dnat_delete_result(self, task):",1,0,0.0,916
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""dnat_delete_result %d"", task.status)",1,0,0.0,917
77821190873a415e2fef445474d997103c8d5651,"def routes_update_result(self, task):",1,0,0.0,918
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""routes_update_result %d"", task.status)",1,0,0.0,919
77821190873a415e2fef445474d997103c8d5651,"def nat_update_result(self, task):",1,0,0.0,920
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""nat_update_result %d"", task.status)",1,0,0.0,921
77821190873a415e2fef445474d997103c8d5651,"def _process_base_create_lswitch_args(*args, **kwargs):",1,0,0.0,922
77821190873a415e2fef445474d997103c8d5651,"tags.append({""tag"": args[1],",1,0,0.0,923
77821190873a415e2fef445474d997103c8d5651,"""scope"": ""quantum_net_id""})",1,0,0.0,924
77821190873a415e2fef445474d997103c8d5651,"tags.append({""tag"": args[2], ""scope"": ""os_tid""})",1,0,0.0,925
77821190873a415e2fef445474d997103c8d5651,"tags.append({""tag"": ""true"", ""scope"": ""shared""})",1,0,0.0,926
77821190873a415e2fef445474d997103c8d5651,"tags.extend(kwargs[""tags""])",1,0,0.0,927
77821190873a415e2fef445474d997103c8d5651,"return switch_name, tz_config, tags",1,0,0.0,928
77821190873a415e2fef445474d997103c8d5651,"{'ext_net_id': port_data['network_id'],",0,0,0.0,929
77821190873a415e2fef445474d997103c8d5651,'router_id': nsx_router_id}),0,0,0.0,930
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""Logical router resource %s not found """,0,0,0.0,931
77821190873a415e2fef445474d997103c8d5651,"""already been deleted"",",0,0,0.0,932
77821190873a415e2fef445474d997103c8d5651,port_data['device_id']),0,0,0.0,933
77821190873a415e2fef445474d997103c8d5651,"err_msg=_(""Logical router resource %s not found """,1,0,0.0,934
77821190873a415e2fef445474d997103c8d5651,"{'ext_net_id': port_data['network_id'],",1,0,0.0,935
77821190873a415e2fef445474d997103c8d5651,"tenant_id,",1,0,0.0,936
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""snat_delete_result %d"", task.status)",1,0,0.0,937
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""snat_create_result %d"", task.status)",1,0,0.0,938
77821190873a415e2fef445474d997103c8d5651,"def edge_deploy_started(self, task):",1,0,0.0,939
77821190873a415e2fef445474d997103c8d5651,"def snat_create_result(self, task):",1,0,0.0,940
77821190873a415e2fef445474d997103c8d5651,"""""""callback when deployment task started.""""""",1,0,0.0,941
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""Start deploying %(edge_id)s for router %(name)s"", {",1,0,0.0,942
77821190873a415e2fef445474d997103c8d5651,"'edge_id': edge_id,",1,0,0.0,943
77821190873a415e2fef445474d997103c8d5651,'name': name}),1,0,0.0,944
77821190873a415e2fef445474d997103c8d5651,"context.session, neutron_router_id, edge_id=edge_id)",1,0,0.0,945
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""Failed to deploy Edge for router %s"", name)",1,0,0.0,946
77821190873a415e2fef445474d997103c8d5651,"context.session, neutron_router_id,",1,0,0.0,947
77821190873a415e2fef445474d997103c8d5651,status=service_constants.ERROR),1,0,0.0,948
77821190873a415e2fef445474d997103c8d5651,"def edge_deploy_result(self, task):",1,0,0.0,949
77821190873a415e2fef445474d997103c8d5651,"""""""callback when deployment task finished.""""""",1,0,0.0,950
77821190873a415e2fef445474d997103c8d5651,"context, neutron_router_id)",1,0,0.0,951
77821190873a415e2fef445474d997103c8d5651,# Router might have been deleted before deploy finished,1,0,0.0,952
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Router %s not found""), lrouter['uuid'])",1,0,0.0,953
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""Successfully deployed %(edge_id)s for """,1,0,0.0,954
77821190873a415e2fef445474d997103c8d5651,"""router %(name)s"", {",1,0,0.0,955
77821190873a415e2fef445474d997103c8d5651,"'edge_id': task.userdata['edge_id'],",1,0,0.0,956
77821190873a415e2fef445474d997103c8d5651,router_db['status'] == service_constants.PENDING_CREATE):,1,0,0.0,957
77821190873a415e2fef445474d997103c8d5651,"context.session, neutron_router_id)",1,0,0.0,958
77821190873a415e2fef445474d997103c8d5651,status=service_constants.ACTIVE),1,0,0.0,959
77821190873a415e2fef445474d997103c8d5651,"def edge_delete_result(self, task):",1,0,0.0,960
77821190873a415e2fef445474d997103c8d5651,"vcns_db.delete_vcns_router_binding(context.session,",1,0,0.0,961
77821190873a415e2fef445474d997103c8d5651,"def interface_update_result(self, task):",1,0,0.0,962
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""interface_update_result %d"", task.status)",1,0,0.0,963
77821190873a415e2fef445474d997103c8d5651,ipsec_site_conn.ipsecpolicy),1,0,0.0,964
77821190873a415e2fef445474d997103c8d5651,for ipsec_site_conn in vpn_service.ipsec_site_connections:,1,0,0.0,965
77821190873a415e2fef445474d997103c8d5651,#Get edge_id for the resource,1,0,0.0,966
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.update_vip(context, v, session_persistence_update)",1,0,0.0,967
77821190873a415e2fef445474d997103c8d5651,"def delete_vip(self, context, id):",1,0,0.0,968
77821190873a415e2fef445474d997103c8d5651,self._resource_set_status(,1,0,0.0,969
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Vip,",1,0,0.0,970
77821190873a415e2fef445474d997103c8d5651,"id, service_constants.PENDING_DELETE)",1,0,0.0,971
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to delete vip with id: %s!""), id)",1,0,0.0,972
77821190873a415e2fef445474d997103c8d5651,"id, service_constants.ERROR)",1,0,0.0,973
77821190873a415e2fef445474d997103c8d5651,#Check associated HealthMonitors and then delete them,1,0,0.0,974
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.delete_pool(context, v['pool_id'], edge_id)",1,0,0.0,975
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Vip, resource_id=id)",1,0,0.0,976
77821190873a415e2fef445474d997103c8d5651,"context, id, loadbalancer_db.Vip)",1,0,0.0,977
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_vip(context, id)",1,0,0.0,978
77821190873a415e2fef445474d997103c8d5651,"def get_vip(self, context, id, fields=None):",1,0,0.0,979
77821190873a415e2fef445474d997103c8d5651,return vip,1,0,0.0,980
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Vip, resource_id=vip['id'])",1,0,0.0,981
77821190873a415e2fef445474d997103c8d5651,"def get_vips(self, context, filters=None, fields=None):",1,0,0.0,982
77821190873a415e2fef445474d997103c8d5651,return vips,1,0,0.0,983
77821190873a415e2fef445474d997103c8d5651,resource_ids=[vip['id'] for vip in vips]),1,0,0.0,984
77821190873a415e2fef445474d997103c8d5651,for vip in vips:,1,0,0.0,985
77821190873a415e2fef445474d997103c8d5651,"def update_pool(self, context, id, pool):",1,0,0.0,986
77821190873a415e2fef445474d997103c8d5651,"self._resource_set_status(context, loadbalancer_db.Pool,",1,0,0.0,987
77821190873a415e2fef445474d997103c8d5651,"p['id'], service_constants.ACTIVE, p)",1,0,0.0,988
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_pool(context, p)",1,0,0.0,989
77821190873a415e2fef445474d997103c8d5651,"p['id'], service_constants.ERROR, p)",1,0,0.0,990
77821190873a415e2fef445474d997103c8d5651,"id, service_constants.ERROR, v)",1,0,0.0,991
77821190873a415e2fef445474d997103c8d5651,#Create new pool/monitor object on the edge,1,0,0.0,992
77821190873a415e2fef445474d997103c8d5651,"self._resource_set_status(context, loadbalancer_db.Member,",1,0,0.0,993
77821190873a415e2fef445474d997103c8d5651,for monitor_id in old_pool.get('health_monitors'):,1,0,0.0,994
77821190873a415e2fef445474d997103c8d5651,"context.session,",1,0,0.0,995
77821190873a415e2fef445474d997103c8d5651,router_id),1,0,0.0,996
77821190873a415e2fef445474d997103c8d5651,#Add vip_router binding,1,0,0.0,997
77821190873a415e2fef445474d997103c8d5651,"self._add_router_service_insertion_binding(context, v['id'],",1,0,0.0,998
77821190873a415e2fef445474d997103c8d5651,loadbalancer_db.Vip),1,0,0.0,999
77821190873a415e2fef445474d997103c8d5651,"self._update_interface(context, router, sync=True)",1,0,0.0,1000
77821190873a415e2fef445474d997103c8d5651,#Create the vip and associated pool/monitor on the corresponding edge,1,0,0.0,1001
77821190873a415e2fef445474d997103c8d5651,self._vcns_create_pool_and_monitors(,1,0,0.0,1002
77821190873a415e2fef445474d997103c8d5651,"context, v['pool_id'], edge_id=edge_id)",1,0,0.0,1003
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.create_vip(context, edge_id, v)",1,0,0.0,1004
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to create vip!""))",1,0,0.0,1005
77821190873a415e2fef445474d997103c8d5651,"context, v['id'], loadbalancer_db.Vip)",1,0,0.0,1006
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_vip(context, v['id'])",1,0,0.0,1007
77821190873a415e2fef445474d997103c8d5651,"self._resource_set_status(context, loadbalancer_db.Vip,",1,0,0.0,1008
77821190873a415e2fef445474d997103c8d5651,"v['id'], service_constants.ACTIVE, v)",1,0,0.0,1009
77821190873a415e2fef445474d997103c8d5651,"def update_vip(self, context, id, vip):",1,0,0.0,1010
77821190873a415e2fef445474d997103c8d5651,vip['vip'].get('session_persistence')),1,0,0.0,1011
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Vip, resource_id=id)['router_id']",1,0,0.0,1012
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.delete_vip(context, id)",1,0,0.0,1013
77821190873a415e2fef445474d997103c8d5651,#Delete old pool/monitor on the edge,1,0,0.0,1014
77821190873a415e2fef445474d997103c8d5651,#TODO(linb): Factor out procedure for removing pool and health,1,0,0.0,1015
77821190873a415e2fef445474d997103c8d5651,#separate method,1,0,0.0,1016
77821190873a415e2fef445474d997103c8d5651,"context, old_vip['pool_id'], edge_id)",1,0,0.0,1017
77821190873a415e2fef445474d997103c8d5651,"def create_member(self, context, member):",1,0,0.0,1018
77821190873a415e2fef445474d997103c8d5651,"m['id'], service_constants.ACTIVE, m)",1,0,0.0,1019
77821190873a415e2fef445474d997103c8d5651,) % vpn_service.router_id,1,0,0.0,1020
77821190873a415e2fef445474d997103c8d5651,"health_monitor, pool_id):",1,0,0.0,1021
77821190873a415e2fef445474d997103c8d5651,"self).create_pool_health_monitor(context,",1,0,0.0,1022
77821190873a415e2fef445474d997103c8d5651,"health_monitor,",1,0,0.0,1023
77821190873a415e2fef445474d997103c8d5651,pool_id),1,0,0.0,1024
77821190873a415e2fef445474d997103c8d5651,return res,1,0,0.0,1025
77821190873a415e2fef445474d997103c8d5651,#Get the edge_id,1,0,0.0,1026
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.create_health_monitor(context, edge_id, monitor)",1,0,0.0,1027
77821190873a415e2fef445474d997103c8d5651,#Get updated pool,1,0,0.0,1028
77821190873a415e2fef445474d997103c8d5651,pool['health_monitors'].append(monitor['id']),1,0,0.0,1029
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Failed to associate monitor with pool!""))",1,0,0.0,1030
77821190873a415e2fef445474d997103c8d5651,"pool_id, service_constants.ERROR)",1,0,0.0,1031
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_pool_health_monitor(",1,0,0.0,1032
77821190873a415e2fef445474d997103c8d5651,"context, monitor_id, pool_id)",1,0,0.0,1033
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.PoolMonitorAssociation,",1,0,0.0,1034
77821190873a415e2fef445474d997103c8d5651,"monitor_id, service_constants.ACTIVE, res,",1,0,0.0,1035
77821190873a415e2fef445474d997103c8d5651,pool_id=pool_id),1,0,0.0,1036
77821190873a415e2fef445474d997103c8d5651,"def delete_pool_health_monitor(self, context, id, pool_id):",1,0,0.0,1037
77821190873a415e2fef445474d997103c8d5651,"context, id, pool_id)",1,0,0.0,1038
77821190873a415e2fef445474d997103c8d5651,#Delete the monitor on vshield edge,1,0,0.0,1039
77821190873a415e2fef445474d997103c8d5651,LOG.exception(,1,0,0.0,1040
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.delete_health_monitor(context, id, edge_id)",1,0,0.0,1041
77821190873a415e2fef445474d997103c8d5651,def _vcns_update_ipsec_config(,1,0,0.0,1042
77821190873a415e2fef445474d997103c8d5651,"self, context, vpnservice_id, removed_ipsec_conn_id=None):",1,0,0.0,1043
77821190873a415e2fef445474d997103c8d5651,"context, vpn_service.router_id)",1,0,0.0,1044
77821190873a415e2fef445474d997103c8d5651,"""one monitor per pool"")",1,0,0.0,1045
77821190873a415e2fef445474d997103c8d5651,"def create_pool_health_monitor(self, context,",1,0,0.0,1046
77821190873a415e2fef445474d997103c8d5651,return m,1,0,0.0,1047
77821190873a415e2fef445474d997103c8d5651,return hm,1,0,0.0,1048
77821190873a415e2fef445474d997103c8d5651,"pool_id,",1,0,0.0,1049
77821190873a415e2fef445474d997103c8d5651,service_constants.PENDING_UPDATE),1,0,0.0,1050
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_pool(context, pool)",1,0,0.0,1051
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_member(context, m['id'])",1,0,0.0,1052
77821190873a415e2fef445474d997103c8d5651,"pool_id, service_constants.ACTIVE)",1,0,0.0,1053
77821190873a415e2fef445474d997103c8d5651,"def update_member(self, context, id, member):",1,0,0.0,1054
77821190873a415e2fef445474d997103c8d5651,"context, id, member)",1,0,0.0,1055
77821190873a415e2fef445474d997103c8d5651,"context, loadbalancer_db.Pool,",1,0,0.0,1056
77821190873a415e2fef445474d997103c8d5651,"old_pool_id, service_constants.PENDING_UPDATE)",1,0,0.0,1057
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_pool(context, old_pool)",1,0,0.0,1058
77821190873a415e2fef445474d997103c8d5651,"""with the member""))",1,0,0.0,1059
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_member(",1,0,0.0,1060
77821190873a415e2fef445474d997103c8d5651,"context, m['id'])",1,0,0.0,1061
77821190873a415e2fef445474d997103c8d5651,"old_pool_id, service_constants.ACTIVE)",1,0,0.0,1062
77821190873a415e2fef445474d997103c8d5651,"def delete_member(self, context, id):",1,0,0.0,1063
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).delete_member(context, id)",1,0,0.0,1064
77821190873a415e2fef445474d997103c8d5651,"pool_id, service_constants.PENDING_UPDATE)",1,0,0.0,1065
77821190873a415e2fef445474d997103c8d5651,"def update_health_monitor(self, context, id, health_monitor):",1,0,0.0,1066
77821190873a415e2fef445474d997103c8d5651,"context, id, health_monitor)",1,0,0.0,1067
77821190873a415e2fef445474d997103c8d5651,for hm_pool in hm.get('pools'):,1,0,0.0,1068
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.update_health_monitor(,1,0,0.0,1069
77821190873a415e2fef445474d997103c8d5651,"context, edge_id, old_hm, hm)",1,0,0.0,1070
77821190873a415e2fef445474d997103c8d5651,"""with id: %s!""), id)",1,0,0.0,1071
77821190873a415e2fef445474d997103c8d5651,fields),1,0,0.0,1072
77821190873a415e2fef445474d997103c8d5651,"""found in NSX.""), port_data['network_id'])",1,0,0.0,1073
77821190873a415e2fef445474d997103c8d5651,"def _get_all_nsx_lrouters_statuses(self, tenant_id, fields):",1,0,0.0,1074
77821190873a415e2fef445474d997103c8d5651,# Edge Firewall binding methods,1,0,0.0,1075
77821190873a415e2fef445474d997103c8d5651,with session.begin(subtransactions=True):,1,0,0.0,1076
77821190873a415e2fef445474d997103c8d5651,"rule_id=map_info['rule_id'],",1,0,0.0,1077
77821190873a415e2fef445474d997103c8d5651,"rule_vseid=map_info['rule_vseid'],",1,0,0.0,1078
77821190873a415e2fef445474d997103c8d5651,edge_id=map_info['edge_id']),1,0,0.0,1079
77821190873a415e2fef445474d997103c8d5651,session.add(binding),1,0,0.0,1080
77821190873a415e2fef445474d997103c8d5651,return binding,1,0,0.0,1081
77821190873a415e2fef445474d997103c8d5651,"def delete_vcns_edge_firewallrule_binding(session, id, edge_id):",1,0,0.0,1082
77821190873a415e2fef445474d997103c8d5651,"filter_by(rule_id=id, edge_id=edge_id).delete()):",1,0,0.0,1083
77821190873a415e2fef445474d997103c8d5651,"def get_vcns_edge_firewallrule_binding(session, id, edge_id):",1,0,0.0,1084
77821190873a415e2fef445474d997103c8d5651,return (session.query(vcns_models.VcnsEdgeFirewallRuleBinding).,1,0,0.0,1085
77821190873a415e2fef445474d997103c8d5651,"filter_by(rule_id=id, edge_id=edge_id).first())",1,0,0.0,1086
77821190873a415e2fef445474d997103c8d5651,def get_vcns_edge_firewallrule_binding_by_vseid(,1,0,0.0,1087
77821190873a415e2fef445474d997103c8d5651,"session, edge_id, rule_vseid):",1,0,0.0,1088
77821190873a415e2fef445474d997103c8d5651,try:,1,0,0.0,1089
77821190873a415e2fef445474d997103c8d5651,"filter_by(edge_id=edge_id, rule_vseid=rule_vseid).one())",1,0,0.0,1090
77821190873a415e2fef445474d997103c8d5651,"def cleanup_vcns_edge_firewallrule_binding(session, edge_id):",1,0,0.0,1091
77821190873a415e2fef445474d997103c8d5651,session.query(,1,0,0.0,1092
77821190873a415e2fef445474d997103c8d5651,vcns_models.VcnsEdgeFirewallRuleBinding).filter_by(,1,0,0.0,1093
77821190873a415e2fef445474d997103c8d5651,edge_id=edge_id).delete(),1,0,0.0,1094
77821190873a415e2fef445474d997103c8d5651,"def add_vcns_edge_vip_binding(session, map_info):",1,0,0.0,1095
77821190873a415e2fef445474d997103c8d5651,"vip_id=map_info['vip_id'],",1,0,0.0,1096
77821190873a415e2fef445474d997103c8d5651,"edge_id=map_info['edge_id'],",1,0,0.0,1097
77821190873a415e2fef445474d997103c8d5651,"vip_vseid=map_info['vip_vseid'],",1,0,0.0,1098
77821190873a415e2fef445474d997103c8d5651,"def add_vcns_edge_firewallrule_binding(session, map_info):",1,0,0.0,1099
77821190873a415e2fef445474d997103c8d5651,#,1,0,0.0,1100
77821190873a415e2fef445474d997103c8d5651,"def get_vcns_edge_vip_binding(session, id):",1,0,0.0,1101
77821190873a415e2fef445474d997103c8d5651,"""%(firewall_id)s"")",1,0,0.0,1102
77821190873a415e2fef445474d997103c8d5651,"""network:%s""), id)",1,0,0.0,1103
77821190873a415e2fef445474d997103c8d5651,"""NSX lswitch id:%(lswitch_id)s;""",1,0,0.0,1104
77821190873a415e2fef445474d997103c8d5651,"""Error:%(error)s""),",1,0,0.0,1105
77821190873a415e2fef445474d997103c8d5651,"""attachment in NSX.""))",1,0,0.0,1106
77821190873a415e2fef445474d997103c8d5651,"""%(router_uuid)s. Verify Default Layer-3 Gateway """,1,0,0.0,1107
77821190873a415e2fef445474d997103c8d5651,"""created:%s - removing router""), router_id)",1,0,0.0,1108
77821190873a415e2fef445474d997103c8d5651,"""DB and backend""),",1,0,0.0,1109
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""Logical router '%s' not found """,1,0,0.0,1110
77821190873a415e2fef445474d997103c8d5651,"""%(router_id)s because of the following exception:""",1,0,0.0,1111
77821190873a415e2fef445474d997103c8d5651,"""%(d_exc)s""), {'router_id': router_id,",1,0,0.0,1112
77821190873a415e2fef445474d997103c8d5651,'d_exc': str(d_exc)}),1,0,0.0,1113
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_(""Logical router resource %s not found """,1,0,0.0,1114
77821190873a415e2fef445474d997103c8d5651,"""ip:%(floating_ip)s mapped to """,1,0,0.0,1115
77821190873a415e2fef445474d997103c8d5651,"""internal ip:%(internal_ip)s""),",1,0,0.0,1116
77821190873a415e2fef445474d997103c8d5651,"""NSX plaform - the resource was not found""))",1,0,0.0,1117
77821190873a415e2fef445474d997103c8d5651,"""resource was not found""),",1,0,0.0,1118
77821190873a415e2fef445474d997103c8d5651,'%(uuid)s with name %(name)s: %(error)s.'),1,0,0.0,1119
77821190873a415e2fef445474d997103c8d5651,"% {'uuid': secgroup_id, 'name': name, 'error': e})",1,0,0.0,1120
77821190873a415e2fef445474d997103c8d5651,"""%(sec_group_id)s was not found on the backend""),",1,0,0.0,1121
77821190873a415e2fef445474d997103c8d5651,"""NSX security profile %(sec_profile_id)s, """,1,0,0.0,1122
77821190873a415e2fef445474d997103c8d5651,"""associated with Netron security group """,1,0,0.0,1123
77821190873a415e2fef445474d997103c8d5651,"""%(sec_group_id)s""),",1,0,0.0,1124
77821190873a415e2fef445474d997103c8d5651,"""%(vip_id)s"")",1,0,0.0,1125
77821190873a415e2fef445474d997103c8d5651,app_profileid=map_info['app_profileid']),1,0,0.0,1126
77821190873a415e2fef445474d997103c8d5651,return qry.filter_by(vip_id=id).one(),1,0,0.0,1127
77821190873a415e2fef445474d997103c8d5651,"""network %s""), net_data.get('name', '<unknown>'))",1,0,0.0,1128
77821190873a415e2fef445474d997103c8d5651,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,1129
77821190873a415e2fef445474d997103c8d5651,#    under the License.,1,0,0.0,1130
77821190873a415e2fef445474d997103c8d5651,try:,1,0,0.0,1131
77821190873a415e2fef445474d997103c8d5651,"print(""WARNING: missing neutron-fwaas package"")",1,0,0.0,1132
77821190873a415e2fef445474d997103c8d5651,"print(""WARNING: missing neutron-lbaas package"")",1,0,0.0,1133
77821190873a415e2fef445474d997103c8d5651,"print(""WARNING: missing neutron-vpnaas package"")",1,0,0.0,1134
77821190873a415e2fef445474d997103c8d5651,"service_constants.ACTIVE,",1,0,0.0,1135
77821190873a415e2fef445474d997103c8d5651,"service_constants.DOWN,",1,0,0.0,1136
77821190873a415e2fef445474d997103c8d5651,"service_constants.PENDING_CREATE,",1,0,0.0,1137
77821190873a415e2fef445474d997103c8d5651,"service_constants.PENDING_DELETE,",1,0,0.0,1138
77821190873a415e2fef445474d997103c8d5651,service_constants.ERROR,1,0,0.0,1139
77821190873a415e2fef445474d997103c8d5651,],1,0,0.0,1140
77821190873a415e2fef445474d997103c8d5651,"service_constants.ACTIVE: vcns_const.RouterStatus.ROUTER_STATUS_ACTIVE,",1,0,0.0,1141
77821190873a415e2fef445474d997103c8d5651,"service_constants.DOWN: vcns_const.RouterStatus.ROUTER_STATUS_DOWN,",1,0,0.0,1142
77821190873a415e2fef445474d997103c8d5651,service_constants.PENDING_CREATE: (,1,0,0.0,1143
77821190873a415e2fef445474d997103c8d5651,vcns_const.RouterStatus.ROUTER_STATUS_PENDING_CREATE,1,0,0.0,1144
77821190873a415e2fef445474d997103c8d5651,"),",1,0,0.0,1145
77821190873a415e2fef445474d997103c8d5651,service_constants.PENDING_DELETE: (,1,0,0.0,1146
77821190873a415e2fef445474d997103c8d5651,vcns_const.RouterStatus.ROUTER_STATUS_PENDING_DELETE,1,0,0.0,1147
77821190873a415e2fef445474d997103c8d5651,service_constants.ERROR: vcns_const.RouterStatus.ROUTER_STATUS_ERROR,1,0,0.0,1148
77821190873a415e2fef445474d997103c8d5651,},1,0,0.0,1149
77821190873a415e2fef445474d997103c8d5651,"base.NsxPluginV2,",1,0,0.0,1150
77821190873a415e2fef445474d997103c8d5651,"rsi_db.RoutedServiceInsertionDbMixin,",1,0,0.0,1151
77821190873a415e2fef445474d997103c8d5651,"firewall_db.Firewall_db_mixin,",1,0,0.0,1152
77821190873a415e2fef445474d997103c8d5651,#    License for the specific language governing permissions and limitations,1,0,0.0,1153
77821190873a415e2fef445474d997103c8d5651,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,1154
77821190873a415e2fef445474d997103c8d5651,LOG.exception(msg),1,0,0.0,1155
77821190873a415e2fef445474d997103c8d5651,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,1156
77821190873a415e2fef445474d997103c8d5651,"resource='router_service_binding', msg=msg)",1,0,0.0,1157
77821190873a415e2fef445474d997103c8d5651,"def delete_vcns_edge_vip_binding(session, id):",1,0,0.0,1158
77821190873a415e2fef445474d997103c8d5651,"def add_vcns_edge_pool_binding(session, map_info):",1,0,0.0,1159
77821190873a415e2fef445474d997103c8d5651,"pool_id=map_info['pool_id'],",1,0,0.0,1160
77821190873a415e2fef445474d997103c8d5651,pool_vseid=map_info['pool_vseid']),1,0,0.0,1161
77821190873a415e2fef445474d997103c8d5651,"def get_vcns_edge_pool_binding(session, id, edge_id):",1,0,0.0,1162
77821190873a415e2fef445474d997103c8d5651,return (session.query(vcns_models.VcnsEdgePoolBinding).,1,0,0.0,1163
77821190873a415e2fef445474d997103c8d5651,"filter_by(pool_id=id, edge_id=edge_id).first())",1,0,0.0,1164
77821190873a415e2fef445474d997103c8d5651,"def get_vcns_edge_pool_binding_by_vseid(session, edge_id, pool_vseid):",1,0,0.0,1165
77821190873a415e2fef445474d997103c8d5651,pool_vseid=pool_vseid).one(),1,0,0.0,1166
77821190873a415e2fef445474d997103c8d5651,"""pool_vseid:%(pool_vseid)s not found!"") %",1,0,0.0,1167
77821190873a415e2fef445474d997103c8d5651,"{'edge_id': edge_id, 'pool_vseid': pool_vseid})",1,0,0.0,1168
77821190873a415e2fef445474d997103c8d5651,"def delete_vcns_edge_pool_binding(session, id, edge_id):",1,0,0.0,1169
77821190873a415e2fef445474d997103c8d5651,"def add_vcns_edge_monitor_binding(session, map_info):",1,0,0.0,1170
77821190873a415e2fef445474d997103c8d5651,"monitor_id=map_info['monitor_id'],",1,0,0.0,1171
77821190873a415e2fef445474d997103c8d5651,monitor_vseid=map_info['monitor_vseid']),1,0,0.0,1172
77821190873a415e2fef445474d997103c8d5651,"def get_vcns_edge_monitor_binding(session, id, edge_id):",1,0,0.0,1173
77821190873a415e2fef445474d997103c8d5651,return (session.query(vcns_models.VcnsEdgeMonitorBinding).,1,0,0.0,1174
77821190873a415e2fef445474d997103c8d5651,"filter_by(monitor_id=id, edge_id=edge_id).first())",1,0,0.0,1175
77821190873a415e2fef445474d997103c8d5651,"def delete_vcns_edge_monitor_binding(session, id, edge_id):",1,0,0.0,1176
77821190873a415e2fef445474d997103c8d5651,"# Copyright 2013 VMware, Inc.",1,0,0.0,1177
77821190873a415e2fef445474d997103c8d5651,# All Rights Reserved,1,0,0.0,1178
77821190873a415e2fef445474d997103c8d5651,#,1,0,0.0,1179
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""The following logical switches were not found """,1,0,0.0,1180
77821190873a415e2fef445474d997103c8d5651,"""supported by this plugin. Ignoring setting for """,1,0,0.0,1181
77821190873a415e2fef445474d997103c8d5651,vpn_db.VPNPluginDb,1,0,0.0,1182
77821190873a415e2fef445474d997103c8d5651,"""connection(s) available."",",0,0,0.0,1183
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""[%(rid)d] Connection returned in bad state, """,0,0,0.0,1184
77821190873a415e2fef445474d997103c8d5651,"""reconnecting to %(conn)s""),",0,0,0.0,1185
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""[%(rid)d] Released connection %(conn)s. %(qsize)d """,0,0,0.0,1186
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_LE(""Login request for an invalid connection: '%s'""),",0,0,0.0,1187
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""Waiting for auth to complete"")",0,0,0.0,1188
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""Invalid conn_params value: '%s'"",",0,0,0.0,1189
77821190873a415e2fef445474d997103c8d5651,"LOG.exception(_LE(""Unable to process default l2 gw service: """,0,0,0.0,1190
77821190873a415e2fef445474d997103c8d5651,"""%s""),",0,0,0.0,1191
77821190873a415e2fef445474d997103c8d5651,"""Neutron %(q_port_id)s""),",0,0,0.0,1192
77821190873a415e2fef445474d997103c8d5651,"LOG.info(_LI(""NSX plugin does not support regular VIF ports on """,0,0,0.0,1193
77821190873a415e2fef445474d997103c8d5651,"""external networks. Port %s will be down.""),",0,0,0.0,1194
77821190873a415e2fef445474d997103c8d5651,LOG.warning(,0,0,0.0,1195
77821190873a415e2fef445474d997103c8d5651,"""Port %(nsx_id)s creation to be rolled back for """,0,0,0.0,1196
77821190873a415e2fef445474d997103c8d5651,"""Neutron port: %(neutron_id)s""),",0,0,0.0,1197
77821190873a415e2fef445474d997103c8d5651,"{'nsx_id': lport['uuid'],",0,0,0.0,1198
77821190873a415e2fef445474d997103c8d5651,'neutron_id': port_data['id']}),0,0,0.0,1199
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""Port %s not found in NSX""), port_data['id'])",0,0,0.0,1200
77821190873a415e2fef445474d997103c8d5651,LOG.warn(,0,0,0.0,1201
77821190873a415e2fef445474d997103c8d5651,"""might have been left on router %(router_id)s""),",0,0,0.0,1202
77821190873a415e2fef445474d997103c8d5651,"{'port_id': port_data['id'],",0,0,0.0,1203
77821190873a415e2fef445474d997103c8d5651,'router_id': nsx_router_id}),0,0,0.0,1204
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_LE(""Maximum number of logical ports reached for """,0,0,0.0,1205
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""Network with admin_state_up=False are not yet """,0,0,0.0,1206
77821190873a415e2fef445474d997103c8d5651,"""API provider for the cluster"",",0,0,0.0,1207
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""[%(rid)d] Acquired connection %(conn)s. %(qsize)d """,0,0,0.0,1208
77821190873a415e2fef445474d997103c8d5651,"""network %s""), net_data.get('name', '<unknown>'))",0,0,0.0,1209
77821190873a415e2fef445474d997103c8d5651,"""seconds; reconnecting.""),",0,0,0.0,1210
77821190873a415e2fef445474d997103c8d5651,# Ensure the connection to the 'metadata access network',0,0,0.0,1211
77821190873a415e2fef445474d997103c8d5651,# on the router,0,0,0.0,1212
77821190873a415e2fef445474d997103c8d5651,self.handle_router_metadata_access(,0,0,0.0,1213
77821190873a415e2fef445474d997103c8d5651,"context, router_id, interface=info)",0,0,0.0,1214
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_(""Logical router resource %s not found """,0,0,0.0,1215
77821190873a415e2fef445474d997103c8d5651,# Ensure the connection to the 'metadata access network',1,0,0.0,1216
77821190873a415e2fef445474d997103c8d5651,# on the router,1,0,0.0,1217
77821190873a415e2fef445474d997103c8d5651,self.handle_router_metadata_access(,1,0,0.0,1218
77821190873a415e2fef445474d997103c8d5651,"context, router_id, interface=info)",1,0,0.0,1219
77821190873a415e2fef445474d997103c8d5651,"err_msg=(_(""Logical router resource %s not found """,1,0,0.0,1220
77821190873a415e2fef445474d997103c8d5651,"cfg.CONF.set_override('core_plugin', vmware.PLUGIN_NAME)",0,0,0.0,1221
77821190873a415e2fef445474d997103c8d5651,manager.NeutronManager().get_plugin(),0,0,0.0,1222
77821190873a415e2fef445474d997103c8d5651,"self.assertRaises(exceptions.NsxPluginException,",0,0,0.0,1223
77821190873a415e2fef445474d997103c8d5651,manager.NeutronManager),0,0,0.0,1224
77821190873a415e2fef445474d997103c8d5651,"cfg.CONF.set_override('core_plugin', PLUGIN_NAME)",1,0,0.0,1225
77821190873a415e2fef445474d997103c8d5651,NeutronManager().get_plugin(),1,0,0.0,1226
77821190873a415e2fef445474d997103c8d5651,"def check_router(self, context, router_id):",0,0,0.0,1227
77821190873a415e2fef445474d997103c8d5651,"self.check_router(context, router_id)",0,0,0.0,1228
77821190873a415e2fef445474d997103c8d5651,LOG.error(msg),1,0,0.0,1229
77821190873a415e2fef445474d997103c8d5651,LOG.warning(msg),1,0,0.0,1230
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_LW(""[%d] no API providers currently available.""), rid)",0,0,0.0,1231
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""[%d] Waiting to acquire API client connection."", rid)",0,0,0.0,1232
77821190873a415e2fef445474d997103c8d5651,"LOG.info(_LI(""[%(rid)d] Connection %(conn)s idle for %(sec)0.2f """,0,0,0.0,1233
77821190873a415e2fef445474d997103c8d5651,"""supported by this plugin. Ignoring setting for """,0,0,0.0,1234
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""The following logical switches were not """,0,0,0.0,1235
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""Network with admin_state_up=False are not yet """,1,0,0.0,1236
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(_(""[%d] Waiting to acquire API client connection.""), rid)",1,0,0.0,1237
77821190873a415e2fef445474d997103c8d5651,"""seconds; reconnecting.""),",1,0,0.0,1238
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(_(""[%(rid)d] Acquired connection %(conn)s. %(qsize)d """,1,0,0.0,1239
77821190873a415e2fef445474d997103c8d5651,"""connection(s) available.""),",1,0,0.0,1240
77821190873a415e2fef445474d997103c8d5651,"""API provider for the cluster""),",1,0,0.0,1241
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""[%(rid)d] Connection returned in bad state, """,1,0,0.0,1242
77821190873a415e2fef445474d997103c8d5651,"""reconnecting to %(conn)s""),",1,0,0.0,1243
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(_(""[%(rid)d] Released connection %(conn)s. %(qsize)d """,1,0,0.0,1244
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_(""Login request for an invalid connection: '%s'""),",1,0,0.0,1245
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(_(""Waiting for auth to complete""))",1,0,0.0,1246
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(_(""Invalid conn_params value: '%s'""),",1,0,0.0,1247
77821190873a415e2fef445474d997103c8d5651,"""Neutron %(q_port_id)s""),",1,0,0.0,1248
77821190873a415e2fef445474d997103c8d5651,LOG.exception(msg),1,0,0.0,1249
77821190873a415e2fef445474d997103c8d5651,"LOG.info(_(""NSX plugin does not support regular VIF ports on """,1,0,0.0,1250
77821190873a415e2fef445474d997103c8d5651,"""external networks. Port %s will be down.""),",1,0,0.0,1251
77821190873a415e2fef445474d997103c8d5651,"""port: %(neutron_id)s"")",1,0,0.0,1252
77821190873a415e2fef445474d997103c8d5651,"% {'nsx_id': lport['uuid'],",1,0,0.0,1253
77821190873a415e2fef445474d997103c8d5651,'neutron_id': port_data['id']}),1,0,0.0,1254
77821190873a415e2fef445474d997103c8d5651,LOG.warning(msg),1,0,0.0,1255
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_(""Port %s not found in NSX""), port_data['id'])",1,0,0.0,1256
77821190873a415e2fef445474d997103c8d5651,"""might have been left on router %(router_id)s""),",1,0,0.0,1257
77821190873a415e2fef445474d997103c8d5651,"{'port_id': port_data['id'],",1,0,0.0,1258
77821190873a415e2fef445474d997103c8d5651,'router_id': nsx_router_id}),1,0,0.0,1259
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_(""Maximum number of logical ports reached for """,1,0,0.0,1260
77821190873a415e2fef445474d997103c8d5651,"LOG.info(_(""[%(rid)d] Connection %(conn)s idle for %(sec)0.2f """,1,0,0.0,1261
77821190873a415e2fef445474d997103c8d5651,"LOG.warn(_(""[%d] no API providers currently available.""), rid)",1,0,0.0,1262
77821190873a415e2fef445474d997103c8d5651,"""network:%s""), id)",0,0,0.0,1263
77821190873a415e2fef445474d997103c8d5651,"""%(sec_group_id)s""),",0,0,0.0,1264
77821190873a415e2fef445474d997103c8d5651,"""NSX lswitch id:%(lswitch_id)s;""",0,0,0.0,1265
77821190873a415e2fef445474d997103c8d5651,"""Error:%(error)s""),",0,0,0.0,1266
77821190873a415e2fef445474d997103c8d5651,"""found in NSX.""), port_data['network_id'])",0,0,0.0,1267
77821190873a415e2fef445474d997103c8d5651,"""attachment in NSX.""))",0,0,0.0,1268
77821190873a415e2fef445474d997103c8d5651,"""%(router_uuid)s. Verify Default Layer-3 """,0,0,0.0,1269
77821190873a415e2fef445474d997103c8d5651,"""correct""),",0,0,0.0,1270
77821190873a415e2fef445474d997103c8d5651,"""created:%s - removing router""), router_id)",0,0,0.0,1271
77821190873a415e2fef445474d997103c8d5651,"""DB and backend""),",0,0,0.0,1272
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""Logical router '%s' not found """,0,0,0.0,1273
77821190873a415e2fef445474d997103c8d5651,"""%(router_id)s because of the following exception:""",0,0,0.0,1274
77821190873a415e2fef445474d997103c8d5651,"""%(d_exc)s""), {'router_id': router_id,",0,0,0.0,1275
77821190873a415e2fef445474d997103c8d5651,'d_exc': str(d_exc)}),0,0,0.0,1276
77821190873a415e2fef445474d997103c8d5651,"LOG.error(_LE(""Logical router resource %s not found """,0,0,0.0,1277
77821190873a415e2fef445474d997103c8d5651,"""ip:%(floating_ip)s mapped to """,0,0,0.0,1278
77821190873a415e2fef445474d997103c8d5651,"""internal ip:%(internal_ip)s""),",0,0,0.0,1279
77821190873a415e2fef445474d997103c8d5651,"""NSX plaform - the resource was not found""))",0,0,0.0,1280
77821190873a415e2fef445474d997103c8d5651,"""resource was not found""),",0,0,0.0,1281
77821190873a415e2fef445474d997103c8d5651,"'%(uuid)s with name %(name)s: %(error)s.'),",0,0,0.0,1282
77821190873a415e2fef445474d997103c8d5651,"{'uuid': secgroup_id, 'name': name, 'error': e})",0,0,0.0,1283
77821190873a415e2fef445474d997103c8d5651,"""%(sec_group_id)s was not found on the """,0,0,0.0,1284
77821190873a415e2fef445474d997103c8d5651,"""backend""),",0,0,0.0,1285
77821190873a415e2fef445474d997103c8d5651,"""NSX security profile %(sec_profile_id)s, """,0,0,0.0,1286
77821190873a415e2fef445474d997103c8d5651,"""associated with Netron security group """,0,0,0.0,1287
77821190873a415e2fef445474d997103c8d5651,"loadbalancer_db.LoadBalancerPluginDb,",1,0,0.0,1288
77821190873a415e2fef445474d997103c8d5651,):,1,0,0.0,1289
77821190873a415e2fef445474d997103c8d5651,return edge_db_status_level,1,0,0.0,1290
77821190873a415e2fef445474d997103c8d5651,}],1,0,0.0,1291
77821190873a415e2fef445474d997103c8d5651,"def _add_router_integration_interface(self, tenant_id, name,",1,0,0.0,1292
77821190873a415e2fef445474d997103c8d5651,"lrouter, lswitch):",1,0,0.0,1293
77821190873a415e2fef445474d997103c8d5651,"self.cluster, lswitch['uuid'], tenant_id,",1,0,0.0,1294
77821190873a415e2fef445474d997103c8d5651,"'', '', lrouter['uuid'], True)",1,0,0.0,1295
77821190873a415e2fef445474d997103c8d5651,"""on lswitch %s"") % lswitch['uuid'])",1,0,0.0,1296
77821190873a415e2fef445474d997103c8d5651,LOG.exception(msg),1,0,0.0,1297
77821190873a415e2fef445474d997103c8d5651,"self.cluster, lrouter['uuid'], tenant_id,",1,0,0.0,1298
77821190873a415e2fef445474d997103c8d5651,"neutron_port_id, pname, admin_status_enabled,",1,0,0.0,1299
77821190873a415e2fef445474d997103c8d5651,[vcns_const.INTEGRATION_LR_IPADDRESS]),1,0,0.0,1300
77821190873a415e2fef445474d997103c8d5651,switchlib.delete_port(,1,0,0.0,1301
77821190873a415e2fef445474d997103c8d5651,"self.cluster, lswitch['uuid'], ls_port['uuid'])",1,0,0.0,1302
77821190873a415e2fef445474d997103c8d5651,self._update_router_port_attachment(,1,0,0.0,1303
77821190873a415e2fef445474d997103c8d5651,"self.cluster, None, lrouter['uuid'], {}, lr_port['uuid'],",1,0,0.0,1304
77821190873a415e2fef445474d997103c8d5651,"'PatchAttachment', ls_port['uuid'], None)",1,0,0.0,1305
77821190873a415e2fef445474d997103c8d5651,# lr_port should have been deleted,1,0,0.0,1306
77821190873a415e2fef445474d997103c8d5651,"def _create_lrouter(self, context, router, nexthop):",1,0,0.0,1307
77821190873a415e2fef445474d997103c8d5651,"context, router, vcns_const.INTEGRATION_EDGE_IPADDRESS)",1,0,0.0,1308
77821190873a415e2fef445474d997103c8d5651,"self._set_router_type(lrouter['uuid'], router_type)",1,0,0.0,1309
77821190873a415e2fef445474d997103c8d5651,"tenant_id, lsname)",1,0,0.0,1310
77821190873a415e2fef445474d997103c8d5651,"""for router %s"") % name",1,0,0.0,1311
77821190873a415e2fef445474d997103c8d5651,"routerlib.delete_lrouter(self.cluster, lrouter['uuid'])",1,0,0.0,1312
77821190873a415e2fef445474d997103c8d5651,"self._add_router_integration_interface(tenant_id, name,",1,0,0.0,1313
77821190873a415e2fef445474d997103c8d5651,"lrouter, lswitch)",1,0,0.0,1314
77821190873a415e2fef445474d997103c8d5651,"return self.vcns_driver.create_lswitch(name, transport_zone_config)",1,0,0.0,1315
77821190873a415e2fef445474d997103c8d5651,"""transport_type"": cfg.CONF.NSX.default_transport_type",1,0,0.0,1316
77821190873a415e2fef445474d997103c8d5651,"context, router['id'], name, lrouter, lswitch)",1,0,0.0,1317
77821190873a415e2fef445474d997103c8d5651,"""zone_uuid"": self.cluster.default_tz_uuid,",1,0,0.0,1318
77821190873a415e2fef445474d997103c8d5651,"def _delete_subnet_snat_rule(self, context, router, subnet):",1,0,0.0,1319
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._delete_subnet_snat_rule(",1,0,0.0,1320
77821190873a415e2fef445474d997103c8d5651,"def _remove_floatingip_address(self, context, fip_db):",1,0,0.0,1321
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._remove_floatingip_address(",1,0,0.0,1322
77821190873a415e2fef445474d997103c8d5651,"context, fip_db)",1,0,0.0,1323
77821190873a415e2fef445474d997103c8d5651,"def _create_advanced_service_router(self, context, neutron_router_id,",1,0,0.0,1324
77821190873a415e2fef445474d997103c8d5651,"name, lrouter, lswitch):",1,0,0.0,1325
77821190873a415e2fef445474d997103c8d5651,# store binding,1,0,0.0,1326
77821190873a415e2fef445474d997103c8d5651,"context.session, neutron_router_id, None, lswitch['uuid'],",1,0,0.0,1327
77821190873a415e2fef445474d997103c8d5651,service_constants.PENDING_CREATE),1,0,0.0,1328
77821190873a415e2fef445474d997103c8d5651,# deploy edge,1,0,0.0,1329
77821190873a415e2fef445474d997103c8d5651,"'neutron_router_id': neutron_router_id,",1,0,0.0,1330
77821190873a415e2fef445474d997103c8d5651,"'lrouter': lrouter,",1,0,0.0,1331
77821190873a415e2fef445474d997103c8d5651,"'lswitch': lswitch,",1,0,0.0,1332
77821190873a415e2fef445474d997103c8d5651,'context': context,1,0,0.0,1333
77821190873a415e2fef445474d997103c8d5651,# deploy and wait until the deploy requeste has been requested,1,0,0.0,1334
77821190873a415e2fef445474d997103c8d5651,# so we will have edge_id ready. The wait here should be fine,1,0,0.0,1335
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.deploy_edge(,1,0,0.0,1336
77821190873a415e2fef445474d997103c8d5651,"lrouter['uuid'], name, lswitch['uuid'], jobdata=jobdata,",1,0,0.0,1337
77821190873a415e2fef445474d997103c8d5651,wait_for_exec=True),1,0,0.0,1338
77821190873a415e2fef445474d997103c8d5651,return binding,1,0,0.0,1339
77821190873a415e2fef445474d997103c8d5651,"def _create_integration_lswitch(self, tenant_id, name):",1,0,0.0,1340
77821190873a415e2fef445474d997103c8d5651,# use defautl transport zone,1,0,0.0,1341
77821190873a415e2fef445474d997103c8d5651,self._create_advanced_service_router(,1,0,0.0,1342
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.delete_lswitch(lswitch('uuid')),1,0,0.0,1343
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._add_subnet_snat_rule(",1,0,0.0,1344
77821190873a415e2fef445474d997103c8d5651,"vcns_const.INTEGRATION_EDGE_IPADDRESS, routes=routes)",1,0,0.0,1345
77821190873a415e2fef445474d997103c8d5651,# external network. But for now we only handle routes for logic,1,0,0.0,1346
77821190873a415e2fef445474d997103c8d5651,# space and leave it for future enhancement.,1,0,0.0,1347
77821190873a415e2fef445474d997103c8d5651,# Let _update_router_gw_info handle nexthop change,1,0,0.0,1348
77821190873a415e2fef445474d997103c8d5651,"#self._vcns_update_static_routes(context, router_id=router_id)",1,0,0.0,1349
77821190873a415e2fef445474d997103c8d5651,return previous_routes,1,0,0.0,1350
77821190873a415e2fef445474d997103c8d5651,"def _retrieve_and_delete_nat_rules(self, context, floating_ip_address,",1,0,0.0,1351
77821190873a415e2fef445474d997103c8d5651,"internal_ip, router_id,",1,0,0.0,1352
77821190873a415e2fef445474d997103c8d5651,min_num_rules_expected=0):,1,0,0.0,1353
77821190873a415e2fef445474d997103c8d5651,# NOP for advanced service router,1,0,0.0,1354
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._retrieve_and_delete_nat_rules(",1,0,0.0,1355
77821190873a415e2fef445474d997103c8d5651,"context, floating_ip_address, internal_ip, router_id,",1,0,0.0,1356
77821190873a415e2fef445474d997103c8d5651,min_num_rules_expected=min_num_rules_expected),1,0,0.0,1357
77821190873a415e2fef445474d997103c8d5651,"def _update_fip_assoc(self, context, fip, floatingip_db, external_port):",1,0,0.0,1358
77821190873a415e2fef445474d997103c8d5651,# Update DB model only  for advanced service router,1,0,0.0,1359
77821190873a415e2fef445474d997103c8d5651,"not self._is_advanced_service_router(context, router_id)):",1,0,0.0,1360
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._update_fip_assoc(",1,0,0.0,1361
77821190873a415e2fef445474d997103c8d5651,"context, fip, floatingip_db, external_port)",1,0,0.0,1362
77821190873a415e2fef445474d997103c8d5651,"super(base.NsxPluginV2, self)._update_fip_assoc(",1,0,0.0,1363
77821190873a415e2fef445474d997103c8d5651,"def _get_nsx_lrouter_status(self, id):",1,0,0.0,1364
77821190873a415e2fef445474d997103c8d5651,return nsx_status,1,0,0.0,1365
77821190873a415e2fef445474d997103c8d5651,"def _get_vse_status(self, context, id):",1,0,0.0,1366
77821190873a415e2fef445474d997103c8d5651,binding['edge_id']),1,0,0.0,1367
77821190873a415e2fef445474d997103c8d5651,return edge_status_level,1,0,0.0,1368
77821190873a415e2fef445474d997103c8d5651,# TODO(fank): Theoretically users can specify extra routes for,1,0,0.0,1369
77821190873a415e2fef445474d997103c8d5651,"context, router_id, name,",1,0,0.0,1370
77821190873a415e2fef445474d997103c8d5651,"def check_router_in_use(self, context, router_id):",1,0,0.0,1371
77821190873a415e2fef445474d997103c8d5651,"context, router_id, name, nexthop, routes=routes)",1,0,0.0,1372
77821190873a415e2fef445474d997103c8d5651,"context, filters={'router_id': [router_id]})",1,0,0.0,1373
77821190873a415e2fef445474d997103c8d5651,"router_id=router_id,",1,0,0.0,1374
77821190873a415e2fef445474d997103c8d5651,vpnservice_id=vpnservices[0]['id']),1,0,0.0,1375
77821190873a415e2fef445474d997103c8d5651,"context, filters=router_filter)",1,0,0.0,1376
77821190873a415e2fef445474d997103c8d5651,vip_id=vips[0]['id']),1,0,0.0,1377
77821190873a415e2fef445474d997103c8d5651,firewall_id=firewalls[0]['id']),1,0,0.0,1378
77821190873a415e2fef445474d997103c8d5651,"def _delete_lrouter(self, context, router_id, nsx_router_id):",1,0,0.0,1379
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._delete_lrouter(",1,0,0.0,1380
77821190873a415e2fef445474d997103c8d5651,"context, router_id, nsx_router_id)",1,0,0.0,1381
77821190873a415e2fef445474d997103c8d5651,#Check whether router has an advanced service inserted.,1,0,0.0,1382
77821190873a415e2fef445474d997103c8d5651,"self.check_router_in_use(context, router_id)",1,0,0.0,1383
77821190873a415e2fef445474d997103c8d5651,vcns_db.update_vcns_router_binding(,1,0,0.0,1384
77821190873a415e2fef445474d997103c8d5651,"context.session, router_id,",1,0,0.0,1385
77821190873a415e2fef445474d997103c8d5651,status=service_constants.PENDING_DELETE),1,0,0.0,1386
77821190873a415e2fef445474d997103c8d5651,# delete lswitch,1,0,0.0,1387
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.delete_lswitch(lswitch_id),1,0,0.0,1388
77821190873a415e2fef445474d997103c8d5651,"LOG.warning(_LW(""Did not found lswitch %s in NSX""), lswitch_id)",1,0,0.0,1389
77821190873a415e2fef445474d997103c8d5651,# delete edge,1,0,0.0,1390
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.delete_edge(router_id, edge_id, jobdata=jobdata)",1,0,0.0,1391
77821190873a415e2fef445474d997103c8d5651,"routerlib.delete_lrouter(self.cluster, nsx_router_id)",1,0,0.0,1392
77821190873a415e2fef445474d997103c8d5651,del self._router_type[router_id],1,0,0.0,1393
77821190873a415e2fef445474d997103c8d5651,"def _update_lrouter(self, context, router_id, name, nexthop, routes=None):",1,0,0.0,1394
77821190873a415e2fef445474d997103c8d5651,"return super(NsxAdvancedPlugin, self)._update_lrouter(",1,0,0.0,1395
77821190873a415e2fef445474d997103c8d5651,"context, router, subnet)",1,0,0.0,1396
77821190873a415e2fef445474d997103c8d5651,# NOP for service router,1,0,0.0,1397
77821190873a415e2fef445474d997103c8d5651,base.NsxPluginV2.supported_extension_aliases + [,1,0,0.0,1398
77821190873a415e2fef445474d997103c8d5651,def _load_vcns_drivers(self):,1,0,0.0,1399
77821190873a415e2fef445474d997103c8d5651,"def _get_router_type(self, context=None, router_id=None, router=None):",1,0,0.0,1400
77821190873a415e2fef445474d997103c8d5651,return self._router_type[router_id],1,0,0.0,1401
77821190873a415e2fef445474d997103c8d5651,else:,1,0,0.0,1402
77821190873a415e2fef445474d997103c8d5651,"self._set_router_type(router['id'], router_type)",1,0,0.0,1403
77821190873a415e2fef445474d997103c8d5651,return router_type,1,0,0.0,1404
77821190873a415e2fef445474d997103c8d5651,"def _find_router_type(self, router):",1,0,0.0,1405
77821190873a415e2fef445474d997103c8d5651,return ROUTER_TYPE_ADVANCED,1,0,0.0,1406
77821190873a415e2fef445474d997103c8d5651,return ROUTER_TYPE_BASIC,1,0,0.0,1407
77821190873a415e2fef445474d997103c8d5651,"def _is_advanced_service_router(self, context=None, router_id=None,",1,0,0.0,1408
77821190873a415e2fef445474d997103c8d5651,router=None):,1,0,0.0,1409
77821190873a415e2fef445474d997103c8d5651,return (router_type == ROUTER_TYPE_ADVANCED),1,0,0.0,1410
77821190873a415e2fef445474d997103c8d5651,"def _vcns_create_ext_gw_port(self, context, port_data):",1,0,0.0,1411
77821190873a415e2fef445474d997103c8d5651,"self._super_create_ext_gw_port(context, port_data)",1,0,0.0,1412
77821190873a415e2fef445474d997103c8d5651,return,1,0,0.0,1413
77821190873a415e2fef445474d997103c8d5651,# by VSM,1,0,0.0,1414
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""EDGE: _vcns_create_ext_gw_port"")",1,0,0.0,1415
77821190873a415e2fef445474d997103c8d5651,"def _vcns_delete_ext_gw_port(self, context, port_data):",1,0,0.0,1416
77821190873a415e2fef445474d997103c8d5651,"self._super_delete_ext_gw_port(context, port_data)",1,0,0.0,1417
77821190873a415e2fef445474d997103c8d5651,# NOP for Edge,1,0,0.0,1418
77821190873a415e2fef445474d997103c8d5651,"LOG.debug(""EDGE: _vcns_delete_ext_gw_port"")",1,0,0.0,1419
77821190873a415e2fef445474d997103c8d5651,"def _get_external_attachment_info(self, context, router):",1,0,0.0,1420
77821190873a415e2fef445474d997103c8d5651,"# gw_port may have multiple IPs, only configure the first one",1,0,0.0,1421
77821190873a415e2fef445474d997103c8d5651,"""network"") % network_id)",1,0,0.0,1422
77821190873a415e2fef445474d997103c8d5651,"def _set_router_type(self, router_id, router_type):",1,0,0.0,1423
77821190873a415e2fef445474d997103c8d5651,"port_isolation=None, replication_mode=None)",1,0,0.0,1424
77821190873a415e2fef445474d997103c8d5651,"def _get_external_gateway_address(self, context, router):",1,0,0.0,1425
77821190873a415e2fef445474d997103c8d5651,"name, tz_config, tags=tags,",1,0,0.0,1426
77821190873a415e2fef445474d997103c8d5651,"""service-router"",",1,0,0.0,1427
77821190873a415e2fef445474d997103c8d5651,"""routed-service-insertion"",",1,0,0.0,1428
77821190873a415e2fef445474d997103c8d5651,"""fwaas"",",1,0,0.0,1429
77821190873a415e2fef445474d997103c8d5651,"""lbaas"",",1,0,0.0,1430
77821190873a415e2fef445474d997103c8d5651,"""vpnaas""",1,0,0.0,1431
77821190873a415e2fef445474d997103c8d5651,]),1,0,0.0,1432
77821190873a415e2fef445474d997103c8d5651,# The service plugin cannot currently support pagination,1,0,0.0,1433
77821190873a415e2fef445474d997103c8d5651,def __init__(self):,1,0,0.0,1434
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self).__init__()",1,0,0.0,1435
77821190873a415e2fef445474d997103c8d5651,self._port_drivers['create'][l3_db.DEVICE_OWNER_ROUTER_GW]),1,0,0.0,1436
77821190873a415e2fef445474d997103c8d5651,self._port_drivers['delete'][l3_db.DEVICE_OWNER_ROUTER_GW]),1,0,0.0,1437
77821190873a415e2fef445474d997103c8d5651,self._vcns_create_ext_gw_port),1,0,0.0,1438
77821190873a415e2fef445474d997103c8d5651,self._vcns_delete_ext_gw_port),1,0,0.0,1439
77821190873a415e2fef445474d997103c8d5651,# load the vCNS driver,1,0,0.0,1440
77821190873a415e2fef445474d997103c8d5651,self._load_vcns_drivers(),1,0,0.0,1441
77821190873a415e2fef445474d997103c8d5651,# switchlib's create_lswitch needs to be replaced in order to proxy,1,0,0.0,1442
77821190873a415e2fef445474d997103c8d5651,# logical switch create requests to vcns,1,0,0.0,1443
77821190873a415e2fef445474d997103c8d5651,self._set_create_lswitch_proxy(),1,0,0.0,1444
77821190873a415e2fef445474d997103c8d5651,def _set_create_lswitch_proxy(self):,1,0,0.0,1445
77821190873a415e2fef445474d997103c8d5651,"def _proxy_create_lswitch(self, *args, **kwargs):",1,0,0.0,1446
77821190873a415e2fef445474d997103c8d5651,"_process_base_create_lswitch_args(*args, **kwargs)",1,0,0.0,1447
77821190873a415e2fef445474d997103c8d5651,),1,0,0.0,1448
77821190873a415e2fef445474d997103c8d5651,return self.vcns_driver.create_lswitch(,1,0,0.0,1449
77821190873a415e2fef445474d997103c8d5651,"return (ipaddress, netmask, nexthop)",1,0,0.0,1450
77821190873a415e2fef445474d997103c8d5651,"context, router)",1,0,0.0,1451
77821190873a415e2fef445474d997103c8d5651,"def _add_subnet_snat_rule(self, context, router, subnet):",1,0,0.0,1452
77821190873a415e2fef445474d997103c8d5651,secondary.append(fip.floating_ip_address),1,0,0.0,1453
77821190873a415e2fef445474d997103c8d5651,secondary.extend(vip_addrs),1,0,0.0,1454
77821190873a415e2fef445474d997103c8d5651,"router['id'], binding['edge_id'],",1,0,0.0,1455
77821190873a415e2fef445474d997103c8d5651,"vcns_const.EXTERNAL_VNIC_INDEX,",1,0,0.0,1456
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.external_network,",1,0,0.0,1457
77821190873a415e2fef445474d997103c8d5651,"addr, mask, secondary=secondary)",1,0,0.0,1458
77821190873a415e2fef445474d997103c8d5651,task.wait(tasks_const.TaskState.RESULT),1,0,0.0,1459
77821190873a415e2fef445474d997103c8d5651,"def _update_router_gw_info(self, context, router_id, info):",1,0,0.0,1460
77821190873a415e2fef445474d997103c8d5651,"super(NsxAdvancedPlugin, self)._update_router_gw_info(",1,0,0.0,1461
77821190873a415e2fef445474d997103c8d5651,"context, router_id, info)",1,0,0.0,1462
77821190873a415e2fef445474d997103c8d5651,# get original gw_port config,1,0,0.0,1463
77821190873a415e2fef445474d997103c8d5651,"super(base.NsxPluginV2, self)._update_router_gw_info(",1,0,0.0,1464
77821190873a415e2fef445474d997103c8d5651,"context, router_id, info, router=router)",1,0,0.0,1465
77821190873a415e2fef445474d997103c8d5651,# can be configured,1,0,0.0,1466
77821190873a415e2fef445474d997103c8d5651,"self._vcns_update_static_routes(context,",1,0,0.0,1467
77821190873a415e2fef445474d997103c8d5651,"router=router,",1,0,0.0,1468
77821190873a415e2fef445474d997103c8d5651,"edge_id=binding['edge_id'],",1,0,0.0,1469
77821190873a415e2fef445474d997103c8d5651,nexthop=None),1,0,0.0,1470
77821190873a415e2fef445474d997103c8d5651,self.vcns_driver.update_interface(,1,0,0.0,1471
77821190873a415e2fef445474d997103c8d5651,"router_id, binding['edge_id'],",1,0,0.0,1472
77821190873a415e2fef445474d997103c8d5651,"newaddr, newmask)",1,0,0.0,1473
77821190873a415e2fef445474d997103c8d5651,nexthop=newnexthop),1,0,0.0,1474
77821190873a415e2fef445474d997103c8d5651,org_enable_snat == new_enable_snat):,1,0,0.0,1475
77821190873a415e2fef445474d997103c8d5651,"self._update_nat_rules(context, router)",1,0,0.0,1476
77821190873a415e2fef445474d997103c8d5651,#Add all vip addresses bound on the router,1,0,0.0,1477
77821190873a415e2fef445474d997103c8d5651,"def _update_interface(self, context, router, sync=False):",1,0,0.0,1478
77821190873a415e2fef445474d997103c8d5651,return nexthop,1,0,0.0,1479
77821190873a415e2fef445474d997103c8d5651,"snat, dnat)",1,0,0.0,1480
77821190873a415e2fef445474d997103c8d5651,"def _vcns_update_static_routes(self, context, **kwargs):",1,0,0.0,1481
77821190873a415e2fef445474d997103c8d5651,router['id']),1,0,0.0,1482
77821190873a415e2fef445474d997103c8d5651,"# explicitly specify nexthop to change, tell the driver not to",1,0,0.0,1483
77821190873a415e2fef445474d997103c8d5651,router),1,0,0.0,1484
77821190873a415e2fef445474d997103c8d5651,for subnet in subnets:,1,0,0.0,1485
77821190873a415e2fef445474d997103c8d5651,routes.append({,1,0,0.0,1486
77821190873a415e2fef445474d997103c8d5651,"'cidr': subnet,",1,0,0.0,1487
77821190873a415e2fef445474d997103c8d5651,'nexthop': vcns_const.INTEGRATION_LR_IPADDRESS.split('/')[0],1,0,0.0,1488
77821190873a415e2fef445474d997103c8d5651,}),1,0,0.0,1489
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.update_routes(router['id'], edge_id, nexthop, routes,",1,0,0.0,1490
77821190873a415e2fef445474d997103c8d5651,skippable),1,0,0.0,1491
77821190873a415e2fef445474d997103c8d5651,"def _get_nat_rules(self, context, router):",1,0,0.0,1492
77821190873a415e2fef445474d997103c8d5651,for fip in fip_db:,1,0,0.0,1493
77821190873a415e2fef445474d997103c8d5651,dnat.append({,1,0,0.0,1494
77821190873a415e2fef445474d997103c8d5651,"'dst': fip.floating_ip_address,",1,0,0.0,1495
77821190873a415e2fef445474d997103c8d5651,'translated': fip.fixed_ip_address,1,0,0.0,1496
77821190873a415e2fef445474d997103c8d5651,snat.append({,1,0,0.0,1497
77821190873a415e2fef445474d997103c8d5651,"'src': subnet,",1,0,0.0,1498
77821190873a415e2fef445474d997103c8d5651,'translated': snat_ip,1,0,0.0,1499
77821190873a415e2fef445474d997103c8d5651,"return (snat, dnat)",1,0,0.0,1500
77821190873a415e2fef445474d997103c8d5651,"def _update_nat_rules(self, context, router):",1,0,0.0,1501
77821190873a415e2fef445474d997103c8d5651,"self.vcns_driver.update_nat_rules(router['id'],",1,0,0.0,1502
77821190873a415e2fef445474d997103c8d5651,"binding['edge_id'],",1,0,0.0,1503
77821190873a415e2fef445474d997103c8d5651,'router_id': nsx_router_id}),1,0,0.0,1504
