commit_id,line,line_level_label,count,line_score,row
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"# iproute2 we use find to see what is in the sysfs directory, as",1,5,1.0,1
c717a6365c1aecb0e3957f0857a06f2334f99d5d,i for i in os.listdir(SYS_NET_PATH),1,3,0.6000000000000001,2
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"""""""List all interfaces in a namespace",0,2,0.4,3
c717a6365c1aecb0e3957f0857a06f2334f99d5d,:return: a list of strings with the names of the interfaces in a namespace,0,2,0.4,4
c717a6365c1aecb0e3957f0857a06f2334f99d5d,# we call out manually because in order to avoid screen scraping,1,2,0.4,5
c717a6365c1aecb0e3957f0857a06f2334f99d5d,namespace = 'ns_test-' + uuidutils.generate_uuid(),0,1,0.2,6
c717a6365c1aecb0e3957f0857a06f2334f99d5d,output = (,1,1,0.2,7
c717a6365c1aecb0e3957f0857a06f2334f99d5d,for name in output:,1,1,0.2,8
c717a6365c1aecb0e3957f0857a06f2334f99d5d,#    not use this file except in compliance with the License. You may obtain,0,1,0.2,9
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"#    Unless required by applicable law or agreed to in writing, software",0,1,0.2,10
c717a6365c1aecb0e3957f0857a06f2334f99d5d,from neutron.privileged.agent.linux import ip_lib as priv_ip_lib,0,1,0.2,11
c717a6365c1aecb0e3957f0857a06f2334f99d5d,for device in devices:,0,1,0.2,12
c717a6365c1aecb0e3957f0857a06f2334f99d5d,for interface in interfaces:,0,1,0.2,13
c717a6365c1aecb0e3957f0857a06f2334f99d5d,devices = ip_lib.IPWrapper(namespace='foo').get_devices(),0,1,0.2,14
c717a6365c1aecb0e3957f0857a06f2334f99d5d,# Just return a empty list if the namespace is deleted.,1,1,0.2,15
c717a6365c1aecb0e3957f0857a06f2334f99d5d,retval = ip_lib.IPWrapper().get_devices(),1,1,0.2,16
c717a6365c1aecb0e3957f0857a06f2334f99d5d,retval = ip_lib.IPWrapper(namespace='foo').get_devices(),1,1,0.2,17
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"['ip', 'netns', 'exec', 'foo', 'find', '/sys/class/net',",1,1,0.2,18
c717a6365c1aecb0e3957f0857a06f2334f99d5d,with excutils.save_and_reraise_exception() as ctx:,1,1,0.2,19
c717a6365c1aecb0e3957f0857a06f2334f99d5d,for name in device_names:,0,1,0.2,20
c717a6365c1aecb0e3957f0857a06f2334f99d5d,output = utils.execute(,1,1,0.2,21
c717a6365c1aecb0e3957f0857a06f2334f99d5d,return retval,0,1,0.2,22
c717a6365c1aecb0e3957f0857a06f2334f99d5d,import os,0,1,0.2,23
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"'find', SYS_NET_PATH, '-maxdepth', '1',",1,1,0.2,24
c717a6365c1aecb0e3957f0857a06f2334f99d5d,import os,1,1,0.2,25
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual(retval, [ip_lib.IPDevice('lo', namespace='foo')])",1,1,0.2,26
c717a6365c1aecb0e3957f0857a06f2334f99d5d,devices = privileged.get_devices(self.namespace),0,1,0.2,27
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual(retval, [ip_lib.IPDevice('lo')])",1,1,0.2,28
c717a6365c1aecb0e3957f0857a06f2334f99d5d,for name in devices:,0,1,0.2,29
c717a6365c1aecb0e3957f0857a06f2334f99d5d,with _get_iproute(namespace) as ip:,0,1,0.2,30
c717a6365c1aecb0e3957f0857a06f2334f99d5d,for link in ip.get_links(**kwargs)],0,1,0.2,31
c717a6365c1aecb0e3957f0857a06f2334f99d5d,except OSError as e:,0,1,0.2,32
c717a6365c1aecb0e3957f0857a06f2334f99d5d,import os,1,1,0.2,33
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"cmd = ['ip', 'netns', 'exec', self.namespace,",1,1,0.2,34
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mocked_islink.assert_called_once_with('/sys/class/net/lo'),1,0,0.0,35
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertIn(device.name, interfaces)",0,0,0.0,36
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices(self, mocked_listdir, mocked_islink):",1,0,0.0,37
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"@mock.patch('os.listdir', return_value=['lo'])",1,0,0.0,38
c717a6365c1aecb0e3957f0857a06f2334f99d5d,@mock.patch('os.path.islink'),1,0,0.0,39
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual([], ip_lib.IPWrapper(namespace='foo').get_devices())",0,0,0.0,40
c717a6365c1aecb0e3957f0857a06f2334f99d5d,netns_name='foo'),0,0,0.0,41
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mock_get_devices.side_effect = priv_lib.NetworkNamespaceNotFound(,0,0,0.0,42
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices_no_netspace(self, mock_get_devices):",0,0,0.0,43
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual(0, len(interfaces))",0,0,0.0,44
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices(self, mock_get_devices):",0,0,0.0,45
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"exclude_loopback=False, exclude_fb_tun_devices=False)",0,0,0.0,46
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices_include_loopback_and_gre(self, mock_get_devices):",0,0,0.0,47
c717a6365c1aecb0e3957f0857a06f2334f99d5d,interfaces.remove(device.name),0,0,0.0,48
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual('br01', device.name)",0,0,0.0,49
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mock_get_devices.return_value = interfaces,0,0,0.0,50
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"interfaces = ['br01', 'lo', 'gre0']",0,0,0.0,51
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"@mock.patch.object(priv_lib, 'get_devices')",0,0,0.0,52
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertNotIn(name, interfaces)",0,0,0.0,53
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"priv_ip_lib.delete_interface(interface, namespace)",0,0,0.0,54
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertIn(name, interfaces_to_check)",0,0,0.0,55
c717a6365c1aecb0e3957f0857a06f2334f99d5d,@mock.patch('neutron.agent.common.utils.execute'),1,0,0.0,56
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual([], retval)",1,0,0.0,57
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertRaises(RuntimeError,",1,0,0.0,58
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices_namespaces(self, mocked_execute):",1,0,0.0,59
c717a6365c1aecb0e3957f0857a06f2334f99d5d,fake_str = mock.Mock(),1,0,0.0,60
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual(device_name, somedevice.name)",1,0,0.0,61
c717a6365c1aecb0e3957f0857a06f2334f99d5d,somedevice = devices.pop(),1,0,0.0,62
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"exclude_loopback=True, exclude_fb_tun_devices=True)",1,0,0.0,63
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mocked_execute.return_value = 'lo gre0 sit0 ip6gre0 ' + device_name,1,0,0.0,64
c717a6365c1aecb0e3957f0857a06f2334f99d5d,device_name = 'somedevice',1,0,0.0,65
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices_exclude_loopback_and_gre(self, mocked_execute):",1,0,0.0,66
c717a6365c1aecb0e3957f0857a06f2334f99d5d,ip_lib.IPWrapper(namespace='foo').get_devices),1,0,0.0,67
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"priv_ip_lib.create_interface(interface, namespace, 'dummy')",0,0,0.0,68
c717a6365c1aecb0e3957f0857a06f2334f99d5d,return_value=True):,1,0,0.0,69
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices_namespaces_ns_exists(self, mocked_execute):",1,0,0.0,70
c717a6365c1aecb0e3957f0857a06f2334f99d5d,return_value=False):,1,0,0.0,71
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"with mock.patch.object(ip_lib.IpNetnsCommand, 'exists',",1,0,0.0,72
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"""Cannot open network namespace"")",1,0,0.0,73
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mocked_execute.side_effect = RuntimeError(,1,0,0.0,74
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def test_get_devices_namespaces_ns_not_exists(self, mocked_execute):",1,0,0.0,75
c717a6365c1aecb0e3957f0857a06f2334f99d5d,self.assertTrue(fake_str.split.called),1,0,0.0,76
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"run_as_root=True, log_fail_as_error=True)",1,0,0.0,77
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"'-maxdepth', '1', '-type', 'l', '-printf', '%f '],",1,0,0.0,78
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mocked_execute.assert_called_once_with(,1,0,0.0,79
c717a6365c1aecb0e3957f0857a06f2334f99d5d,mocked_execute.return_value = fake_str,1,0,0.0,80
c717a6365c1aecb0e3957f0857a06f2334f99d5d,fake_str.split.return_value = ['lo'],1,0,0.0,81
c717a6365c1aecb0e3957f0857a06f2334f99d5d,device_names = priv_ip_lib.get_devices(namespace),0,0,0.0,82
c717a6365c1aecb0e3957f0857a06f2334f99d5d,#         http://www.apache.org/licenses/LICENSE-2.0,0,0,0.0,83
c717a6365c1aecb0e3957f0857a06f2334f99d5d,[ip_lib.LOOPBACK_DEVNAME]),0,0,0.0,84
c717a6365c1aecb0e3957f0857a06f2334f99d5d,interfaces_to_check = (interfaces + ip_lib.FB_TUNNEL_DEVICE_NAMES +,0,0,0.0,85
c717a6365c1aecb0e3957f0857a06f2334f99d5d,# We could be racing with a cron job deleting namespaces.,1,0,0.0,86
c717a6365c1aecb0e3957f0857a06f2334f99d5d,except RuntimeError:,1,0,0.0,87
c717a6365c1aecb0e3957f0857a06f2334f99d5d,log_fail_as_error=self.log_fail_as_error).split(),1,0,0.0,88
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"run_as_root=True,",1,0,0.0,89
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"cmd,",1,0,0.0,90
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"'-type', 'l', '-printf', '%f ']",1,0,0.0,91
c717a6365c1aecb0e3957f0857a06f2334f99d5d,try:,1,0,0.0,92
c717a6365c1aecb0e3957f0857a06f2334f99d5d,# suggested by Stephen Hemminger (iproute2 dev).,1,0,0.0,93
c717a6365c1aecb0e3957f0857a06f2334f99d5d,if self.namespace:,1,0,0.0,94
c717a6365c1aecb0e3957f0857a06f2334f99d5d,raise,0,0,0.0,95
c717a6365c1aecb0e3957f0857a06f2334f99d5d,raise NetworkNamespaceNotFound(netns_name=namespace),0,0,0.0,96
c717a6365c1aecb0e3957f0857a06f2334f99d5d,if e.errno == errno.ENOENT:,0,0,0.0,97
c717a6365c1aecb0e3957f0857a06f2334f99d5d,return [link.get_attr('IFLA_IFNAME'),0,0,0.0,98
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"""""""",0,0,0.0,99
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def get_devices(namespace, **kwargs):",0,0,0.0,100
c717a6365c1aecb0e3957f0857a06f2334f99d5d,@privileged.default.entrypoint,0,0,0.0,101
c717a6365c1aecb0e3957f0857a06f2334f99d5d,except privileged.NetworkNamespaceNotFound:,0,0,0.0,102
c717a6365c1aecb0e3957f0857a06f2334f99d5d,try:,0,0,0.0,103
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.assertEqual([], retval)",0,0,0.0,104
c717a6365c1aecb0e3957f0857a06f2334f99d5d,import re,1,0,0.0,105
c717a6365c1aecb0e3957f0857a06f2334f99d5d,import re,0,0,0.0,106
c717a6365c1aecb0e3957f0857a06f2334f99d5d,if not self.netns.exists(self.namespace):,1,0,0.0,107
c717a6365c1aecb0e3957f0857a06f2334f99d5d,ctx.reraise = False,1,0,0.0,108
c717a6365c1aecb0e3957f0857a06f2334f99d5d,return [],1,0,0.0,109
c717a6365c1aecb0e3957f0857a06f2334f99d5d,from oslo_utils import uuidutils,0,0,0.0,110
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"interfaces = ['int_01', 'int_02', 'int_03', 'int_04', 'int_05']",0,0,0.0,111
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"self.addCleanup(self._remove_ns, namespace)",0,0,0.0,112
c717a6365c1aecb0e3957f0857a06f2334f99d5d,priv_ip_lib.create_netns(namespace),0,0,0.0,113
c717a6365c1aecb0e3957f0857a06f2334f99d5d,def test_get_devices(self):,0,0,0.0,114
c717a6365c1aecb0e3957f0857a06f2334f99d5d,priv_ip_lib.remove_netns(namespace),0,0,0.0,115
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"def _remove_ns(self, namespace):",0,0,0.0,116
c717a6365c1aecb0e3957f0857a06f2334f99d5d,class GetDevicesTestCase(base.BaseTestCase):,0,0,0.0,117
c717a6365c1aecb0e3957f0857a06f2334f99d5d,from neutron.tests import base,0,0,0.0,118
c717a6365c1aecb0e3957f0857a06f2334f99d5d,from neutron.agent.linux import ip_lib,0,0,0.0,119
c717a6365c1aecb0e3957f0857a06f2334f99d5d,#    under the License.,0,0,0.0,120
c717a6365c1aecb0e3957f0857a06f2334f99d5d,else:,1,0,0.0,121
c717a6365c1aecb0e3957f0857a06f2334f99d5d,#    License for the specific language governing permissions and limitations,0,0,0.0,122
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",0,0,0.0,123
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",0,0,0.0,124
c717a6365c1aecb0e3957f0857a06f2334f99d5d,#    a copy of the License at,0,0,0.0,125
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",0,0,0.0,126
c717a6365c1aecb0e3957f0857a06f2334f99d5d,#,0,0,0.0,127
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"# Copyright 2018 Red Hat, Inc.",0,0,0.0,128
c717a6365c1aecb0e3957f0857a06f2334f99d5d,),1,0,0.0,129
c717a6365c1aecb0e3957f0857a06f2334f99d5d,"if os.path.islink(os.path.join(SYS_NET_PATH, i))",1,0,0.0,130
c717a6365c1aecb0e3957f0857a06f2334f99d5d,self.assertFalse(devices),1,0,0.0,131
