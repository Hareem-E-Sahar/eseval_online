commit_id,line,line_level_label,count,line_score,row
bba99f29ad8500770bd838366c96ae371787d98f,"# distributed under the License is distributed on an ""AS IS"" BASIS,",1,6,1.0,1
bba99f29ad8500770bd838366c96ae371787d98f,# You may obtain a copy of the License at,1,5,0.8333333333333333,2
bba99f29ad8500770bd838366c96ae371787d98f,# See the License for the specific language governing permissions and,1,5,0.8333333333333333,3
bba99f29ad8500770bd838366c96ae371787d98f,# you may not use this file except in compliance with the License.,1,5,0.8333333333333333,4
bba99f29ad8500770bd838366c96ae371787d98f,"def setUp(self, plugin=PLUGIN_NAME, ext_mgr=None, service_plugins=None):",1,4,0.6666666666666666,5
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.plugins.common import constants as p_const,0,4,0.6666666666666666,6
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.plugins.common import constants,1,4,0.6666666666666666,7
bba99f29ad8500770bd838366c96ae371787d98f,:param routers: list of routers,1,4,0.6666666666666666,8
bba99f29ad8500770bd838366c96ae371787d98f,# limitations under the License.,1,4,0.6666666666666666,9
bba99f29ad8500770bd838366c96ae371787d98f,"def setUp(self, plugin=None, ext_mgr=None,",1,4,0.6666666666666666,10
bba99f29ad8500770bd838366c96ae371787d98f,"# Licensed under the Apache License, Version 2.0 (the ""License"");",1,3,0.5,11
bba99f29ad8500770bd838366c96ae371787d98f,"#TODO(nati) This test fails if we run all test, but It success just one",1,3,0.5,12
bba99f29ad8500770bd838366c96ae371787d98f,"# Unless required by applicable law or agreed to in writing, software",1,3,0.5,13
bba99f29ad8500770bd838366c96ae371787d98f,"return status in (constants.PENDING_CREATE,",1,3,0.5,14
bba99f29ad8500770bd838366c96ae371787d98f,"return status in (p_const.PENDING_CREATE,",0,3,0.5,15
bba99f29ad8500770bd838366c96ae371787d98f,"def setUp(self, plugin=vmware.PLUGIN_NAME, ext_mgr=None,",0,3,0.5,16
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.openstack.common import excutils,1,2,0.3333333333333333,17
bba99f29ad8500770bd838366c96ae371787d98f,"LOG.warn(_LW('vpnservice %s in db is already deleted'),",0,2,0.3333333333333333,18
bba99f29ad8500770bd838366c96ae371787d98f,"LOG.warn(_('vpnservice %s in db is already deleted'),",1,2,0.3333333333333333,19
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.openstack.common.gettextutils import _LE,0,2,0.3333333333333333,20
bba99f29ad8500770bd838366c96ae371787d98f,"_LE(""Failed to disable vpn process on router %s""),",0,2,0.3333333333333333,21
bba99f29ad8500770bd838366c96ae371787d98f,"_(""Failed to enable vpn process on router %s""),",1,2,0.3333333333333333,22
bba99f29ad8500770bd838366c96ae371787d98f,"_(""Failed to disable vpn process on router %s""),",1,2,0.3333333333333333,23
bba99f29ad8500770bd838366c96ae371787d98f,from oslo.utils import excutils,0,2,0.3333333333333333,24
bba99f29ad8500770bd838366c96ae371787d98f,from oslo.utils import importutils,0,2,0.3333333333333333,25
bba99f29ad8500770bd838366c96ae371787d98f,# These keyword parameters ensure setUp methods always have the,1,2,0.3333333333333333,26
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.openstack.common import importutils,1,2,0.3333333333333333,27
bba99f29ad8500770bd838366c96ae371787d98f,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",1,2,0.3333333333333333,28
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit.metaplugin import test_metaplugin,1,2,0.3333333333333333,29
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit import test_db_plugin as test_plugin,1,2,0.3333333333333333,30
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit import test_l3_plugin,1,2,0.3333333333333333,31
bba99f29ad8500770bd838366c96ae371787d98f,"# NOTE(salv-orlando): The plugin keyword argument is ignored,",1,2,0.3333333333333333,32
bba99f29ad8500770bd838366c96ae371787d98f,# as this class will always invoke super with self._plugin_name.,1,2,0.3333333333333333,33
bba99f29ad8500770bd838366c96ae371787d98f,routers = [,1,2,0.3333333333333333,34
bba99f29ad8500770bd838366c96ae371787d98f,ext_mgr = ext_mgr or test_l3_plugin.L3TestExtensionManager(),1,2,0.3333333333333333,35
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.openstack.common.gettextutils import _LW,0,2,0.3333333333333333,36
bba99f29ad8500770bd838366c96ae371787d98f,"_LE(""Failed to enable vpn process on router %s""),",0,2,0.3333333333333333,37
bba99f29ad8500770bd838366c96ae371787d98f,"router = {'id': _uuid(),",0,2,0.3333333333333333,38
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.plugins.vmware.plugins.base import NetworkTypes,1,2,0.3333333333333333,39
bba99f29ad8500770bd838366c96ae371787d98f,:param router: a router,0,2,0.3333333333333333,40
bba99f29ad8500770bd838366c96ae371787d98f,"help=_('Template file for ipsec configuration')),",0,2,0.3333333333333333,41
bba99f29ad8500770bd838366c96ae371787d98f,help=_('Template file for ipsec secret configuration')),0,2,0.3333333333333333,42
bba99f29ad8500770bd838366c96ae371787d98f,"help='Template file for ipsec configuration'),",1,2,0.3333333333333333,43
bba99f29ad8500770bd838366c96ae371787d98f,help='Template file for ipsec secret configuration'),1,2,0.3333333333333333,44
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.plugins.vmware.api_client import version as version_module,0,2,0.3333333333333333,45
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit import vmware,0,2,0.3333333333333333,46
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.manager import NeutronManager,1,2,0.3333333333333333,47
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.plugins.vmware.api_client.version import Version,1,2,0.3333333333333333,48
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.plugins.vmware.plugins import base,0,2,0.3333333333333333,49
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit.vmware import get_fake_conf,1,2,0.3333333333333333,50
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit.vmware import NSXEXT_PATH,1,2,0.3333333333333333,51
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit.vmware import PLUGIN_NAME,1,2,0.3333333333333333,52
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit.vmware import STUBS_PATH,1,2,0.3333333333333333,53
bba99f29ad8500770bd838366c96ae371787d98f,self.plugin_api = mock.Mock(),1,2,0.3333333333333333,54
bba99f29ad8500770bd838366c96ae371787d98f,"""""""Raise an exception for invalid tunnel range or malformed range.""""""",0,2,0.3333333333333333,55
bba99f29ad8500770bd838366c96ae371787d98f,from neutron.tests.unit.vmware import NSXAPI_NAME,1,2,0.3333333333333333,56
bba99f29ad8500770bd838366c96ae371787d98f,for ident in tunnel_range:,0,2,0.3333333333333333,57
bba99f29ad8500770bd838366c96ae371787d98f,"def _process_router_if_compatible(self, router):",0,1,0.16666666666666666,58
bba99f29ad8500770bd838366c96ae371787d98f,"self.conf.use_namespaces, {},",0,1,0.16666666666666666,59
bba99f29ad8500770bd838366c96ae371787d98f,def test_process_routers(self):,1,1,0.16666666666666666,60
bba99f29ad8500770bd838366c96ae371787d98f,def test_process_router_if_compatible(self):,0,1,0.16666666666666666,61
bba99f29ad8500770bd838366c96ae371787d98f,"def _process_routers(self, routers):",1,1,0.16666666666666666,62
bba99f29ad8500770bd838366c96ae371787d98f,"error=_(""End of tunnel range is less """,0,1,0.16666666666666666,63
bba99f29ad8500770bd838366c96ae371787d98f,constants.PENDING_DELETE),1,1,0.16666666666666666,64
bba99f29ad8500770bd838366c96ae371787d98f,"""than start of tunnel range""))",0,1,0.16666666666666666,65
bba99f29ad8500770bd838366c96ae371787d98f,"mappings = {p_const.TYPE_GRE: utils.is_valid_gre_id,",0,1,0.16666666666666666,66
bba99f29ad8500770bd838366c96ae371787d98f,# Copyright (c) 2012 OpenStack Foundation.,1,1,0.16666666666666666,67
bba99f29ad8500770bd838366c96ae371787d98f,"self.conf.use_namespaces, {})",1,1,0.16666666666666666,68
bba99f29ad8500770bd838366c96ae371787d98f,def test_update_subnet_dns_to_None(self):,1,1,0.16666666666666666,69
bba99f29ad8500770bd838366c96ae371787d98f,#,1,1,0.16666666666666666,70
bba99f29ad8500770bd838366c96ae371787d98f,#    http://www.apache.org/licenses/LICENSE-2.0,1,1,0.16666666666666666,71
bba99f29ad8500770bd838366c96ae371787d98f,# implied.,1,1,0.16666666666666666,72
bba99f29ad8500770bd838366c96ae371787d98f,_plugin_name = ('neutron.plugins.metaplugin.',1,1,0.16666666666666666,73
bba99f29ad8500770bd838366c96ae371787d98f,service_plugins=None):,1,1,0.16666666666666666,74
bba99f29ad8500770bd838366c96ae371787d98f,# same signature.,1,1,0.16666666666666666,75
bba99f29ad8500770bd838366c96ae371787d98f,"plugin=self._plugin_name, ext_mgr=ext_mgr,",1,1,0.16666666666666666,76
bba99f29ad8500770bd838366c96ae371787d98f,service_plugins=service_plugins),1,1,0.16666666666666666,77
bba99f29ad8500770bd838366c96ae371787d98f,def test_update_subnet_route(self):,1,1,0.16666666666666666,78
bba99f29ad8500770bd838366c96ae371787d98f,def test_update_subnet_route_to_None(self):,1,1,0.16666666666666666,79
bba99f29ad8500770bd838366c96ae371787d98f,def test_update_subnet_dns(self):,1,1,0.16666666666666666,80
bba99f29ad8500770bd838366c96ae371787d98f,return q_const.MIN_VXLAN_VNI <= vni <= q_const.MAX_VXLAN_VNI,0,1,0.16666666666666666,81
bba99f29ad8500770bd838366c96ae371787d98f,"def verify_tunnel_range(tunnel_range, tunnel_type):",0,1,0.16666666666666666,82
bba99f29ad8500770bd838366c96ae371787d98f,if tunnel_type in mappings:,0,1,0.16666666666666666,83
bba99f29ad8500770bd838366c96ae371787d98f,def is_valid_vxlan_vni(vni):,0,1,0.16666666666666666,84
bba99f29ad8500770bd838366c96ae371787d98f,service_plugins=None):,0,1,0.16666666666666666,85
bba99f29ad8500770bd838366c96ae371787d98f,return q_const.MIN_GRE_ID <= gre_id <= q_const.MAX_GRE_ID,0,1,0.16666666666666666,86
bba99f29ad8500770bd838366c96ae371787d98f,import six,0,1,0.16666666666666666,87
bba99f29ad8500770bd838366c96ae371787d98f,__metaclass__ = abc.ABCMeta,1,1,0.16666666666666666,88
bba99f29ad8500770bd838366c96ae371787d98f,import six,0,1,0.16666666666666666,89
bba99f29ad8500770bd838366c96ae371787d98f,__metaclass__ = abc.ABCMeta,1,1,0.16666666666666666,90
bba99f29ad8500770bd838366c96ae371787d98f,import six,0,1,0.16666666666666666,91
bba99f29ad8500770bd838366c96ae371787d98f,return router_info.ns_name,0,1,0.16666666666666666,92
bba99f29ad8500770bd838366c96ae371787d98f,return router_info.ns_name(),1,1,0.16666666666666666,93
bba99f29ad8500770bd838366c96ae371787d98f,test_lib.test_config['config_files'] = [,0,1,0.16666666666666666,94
bba99f29ad8500770bd838366c96ae371787d98f,self.fc = fake.FakeClient(vmware.STUBS_PATH),0,1,0.16666666666666666,95
bba99f29ad8500770bd838366c96ae371787d98f,"self.mock_nsx = mock.patch(vmware.NSXAPI_NAME, autospec=True)",0,1,0.16666666666666666,96
bba99f29ad8500770bd838366c96ae371787d98f,__metaclass__ = abc.ABCMeta,1,1,0.16666666666666666,97
bba99f29ad8500770bd838366c96ae371787d98f,plugin_instance = manager.NeutronManager.get_plugin(),0,1,0.16666666666666666,98
bba99f29ad8500770bd838366c96ae371787d98f,net_type = NetworkTypes.L3_EXT,1,1,0.16666666666666666,99
bba99f29ad8500770bd838366c96ae371787d98f,def is_valid_gre_id(gre_id):,0,1,0.16666666666666666,100
bba99f29ad8500770bd838366c96ae371787d98f,net_type = base.NetworkTypes.L3_EXT,0,1,0.16666666666666666,101
bba99f29ad8500770bd838366c96ae371787d98f,self.plugin_api = mock.MagicMock(),0,1,0.16666666666666666,102
bba99f29ad8500770bd838366c96ae371787d98f,"chain, rule)",1,1,0.16666666666666666,103
bba99f29ad8500770bd838366c96ae371787d98f,"chain, rule, top=top)",0,1,0.16666666666666666,104
bba99f29ad8500770bd838366c96ae371787d98f,plugin_instance = NeutronManager.get_plugin(),1,1,0.16666666666666666,105
bba99f29ad8500770bd838366c96ae371787d98f,"self.mock_nsx = mock.patch(NSXAPI_NAME, autospec=True)",1,1,0.16666666666666666,106
bba99f29ad8500770bd838366c96ae371787d98f,self.fc = fake.FakeClient(STUBS_PATH),1,1,0.16666666666666666,107
bba99f29ad8500770bd838366c96ae371787d98f,test_lib.test_config['config_files'] = [get_fake_conf('nsx.ini.test')],1,1,0.16666666666666666,108
bba99f29ad8500770bd838366c96ae371787d98f,self.agent._process_router_if_compatible(router),0,0,0.0,109
bba99f29ad8500770bd838366c96ae371787d98f,'external_gateway_info': {}}],1,0,0.0,110
bba99f29ad8500770bd838366c96ae371787d98f,"'routes': [],",1,0,0.0,111
bba99f29ad8500770bd838366c96ae371787d98f,"'admin_state_up': True,",1,0,0.0,112
bba99f29ad8500770bd838366c96ae371787d98f,"{'id': _uuid(),",1,0,0.0,113
bba99f29ad8500770bd838366c96ae371787d98f,"device.sync.assert_called_once_with(mock.ANY, [router])",0,0,0.0,114
bba99f29ad8500770bd838366c96ae371787d98f,"super(VPNAgent, self)._process_routers(routers)",1,0,0.0,115
bba99f29ad8500770bd838366c96ae371787d98f,'external_gateway_info': {}},0,0,0.0,116
bba99f29ad8500770bd838366c96ae371787d98f,"'routes': [],",0,0,0.0,117
bba99f29ad8500770bd838366c96ae371787d98f,"'admin_state_up': True,",0,0,0.0,118
bba99f29ad8500770bd838366c96ae371787d98f,"device.sync(self.context, routers)",1,0,0.0,119
bba99f29ad8500770bd838366c96ae371787d98f,"device.sync(self.context, [router])",0,0,0.0,120
bba99f29ad8500770bd838366c96ae371787d98f,"device.sync.assert_called_once_with(mock.ANY, routers)",1,0,0.0,121
bba99f29ad8500770bd838366c96ae371787d98f,self.agent._process_routers(routers),1,0,0.0,122
bba99f29ad8500770bd838366c96ae371787d98f,"class TestMetaV2HTTPResponse(test_plugin.TestV2HTTPResponse,",1,0,0.0,123
bba99f29ad8500770bd838366c96ae371787d98f,"ns_name=""qrouter-%s"" % router_id)",0,0,0.0,124
bba99f29ad8500770bd838366c96ae371787d98f,"'id': router_id,",0,0,0.0,125
bba99f29ad8500770bd838366c96ae371787d98f,"'id': _uuid(),",1,0,0.0,126
bba99f29ad8500770bd838366c96ae371787d98f,class MetaPluginV2DBTestCase(test_plugin.NeutronDbPluginV2TestCase):,1,0,0.0,127
bba99f29ad8500770bd838366c96ae371787d98f,'meta_neutron_plugin.MetaPluginV2'),1,0,0.0,128
bba99f29ad8500770bd838366c96ae371787d98f,test_metaplugin.setup_metaplugin_conf(),1,0,0.0,129
bba99f29ad8500770bd838366c96ae371787d98f,self.addCleanup(test_metaplugin.unregister_meta_hooks),1,0,0.0,130
bba99f29ad8500770bd838366c96ae371787d98f,"super(MetaPluginV2DBTestCase, self).setUp(",1,0,0.0,131
bba99f29ad8500770bd838366c96ae371787d98f,"class TestMetaBasicGet(test_plugin.TestBasicGet,",1,0,0.0,132
bba99f29ad8500770bd838366c96ae371787d98f,MetaPluginV2DBTestCase):,1,0,0.0,133
bba99f29ad8500770bd838366c96ae371787d98f,pass,1,0,0.0,134
bba99f29ad8500770bd838366c96ae371787d98f,"constants.PENDING_UPDATE,",1,0,0.0,135
bba99f29ad8500770bd838366c96ae371787d98f,"class TestMetaPortsV2(test_plugin.TestPortsV2,",1,0,0.0,136
bba99f29ad8500770bd838366c96ae371787d98f,"class TestMetaNetworksV2(test_plugin.TestNetworksV2,",1,0,0.0,137
bba99f29ad8500770bd838366c96ae371787d98f,"class TestMetaSubnetsV2(test_plugin.TestSubnetsV2,",1,0,0.0,138
bba99f29ad8500770bd838366c96ae371787d98f,"super(VPNAgent, self)._process_router_if_compatible(router)",0,0,0.0,139
bba99f29ad8500770bd838366c96ae371787d98f,"'fake_chain', 'fake_rule', top=True)",0,0,0.0,140
bba99f29ad8500770bd838366c96ae371787d98f,p_const.PENDING_DELETE),0,0,0.0,141
bba99f29ad8500770bd838366c96ae371787d98f,"plugin=PLUGIN_NAME,",1,0,0.0,142
bba99f29ad8500770bd838366c96ae371787d98f,@six.add_metaclass(abc.ABCMeta),0,0,0.0,143
bba99f29ad8500770bd838366c96ae371787d98f,@six.add_metaclass(abc.ABCMeta),0,0,0.0,144
bba99f29ad8500770bd838366c96ae371787d98f,@six.add_metaclass(abc.ABCMeta),0,0,0.0,145
bba99f29ad8500770bd838366c96ae371787d98f,self.addCleanup(mock.patch.stopall),1,0,0.0,146
bba99f29ad8500770bd838366c96ae371787d98f,self.addCleanup(mock.patch.stopall),1,0,0.0,147
bba99f29ad8500770bd838366c96ae371787d98f,self.addCleanup(mock.patch.stopall),1,0,0.0,148
bba99f29ad8500770bd838366c96ae371787d98f,self.addCleanup(mock.patch.stopall),1,0,0.0,149
bba99f29ad8500770bd838366c96ae371787d98f,"plugin=vmware.PLUGIN_NAME,",0,0,0.0,150
bba99f29ad8500770bd838366c96ae371787d98f,vmware.get_fake_conf('nsx.ini.test')],0,0,0.0,151
bba99f29ad8500770bd838366c96ae371787d98f,"version_module.Version(""2.9""))",0,0,0.0,152
bba99f29ad8500770bd838366c96ae371787d98f,"super(SecurityGroupsTestCase, self).setUp(vmware.PLUGIN_NAME)",0,0,0.0,153
bba99f29ad8500770bd838366c96ae371787d98f,"cfg.CONF.set_override('api_extensions_path', vmware.NSXEXT_PATH)",0,0,0.0,154
bba99f29ad8500770bd838366c96ae371787d98f,version_module.Version(version)),0,0,0.0,155
bba99f29ad8500770bd838366c96ae371787d98f,"Version(""2.9""))",1,0,0.0,156
bba99f29ad8500770bd838366c96ae371787d98f,"p_const.PENDING_UPDATE,",0,0,0.0,157
bba99f29ad8500770bd838366c96ae371787d98f,"super(SecurityGroupsTestCase, self).setUp(PLUGIN_NAME)",1,0,0.0,158
bba99f29ad8500770bd838366c96ae371787d98f,"cfg.CONF.set_override('api_extensions_path', NSXEXT_PATH)",1,0,0.0,159
bba99f29ad8500770bd838366c96ae371787d98f,Version(version)),1,0,0.0,160
bba99f29ad8500770bd838366c96ae371787d98f,"self.agent.remove_nat_rule(router_id, 'fake_chain', 'fake_rule', True)",0,0,0.0,161
bba99f29ad8500770bd838366c96ae371787d98f,"self.agent.remove_nat_rule(router_id, 'fake_chain', 'fake_rule')",1,0,0.0,162
bba99f29ad8500770bd838366c96ae371787d98f,"'fake_chain', 'fake_rule')",1,0,0.0,163
bba99f29ad8500770bd838366c96ae371787d98f,p_const.TYPE_VXLAN: utils.is_valid_vxlan_vni},0,0,0.0,164
bba99f29ad8500770bd838366c96ae371787d98f,if not mappings[tunnel_type](ident):,0,0,0.0,165
bba99f29ad8500770bd838366c96ae371787d98f,raise n_exc.NetworkTunnelRangeError(,0,0,0.0,166
bba99f29ad8500770bd838366c96ae371787d98f,"tunnel_range=tunnel_range,",0,0,0.0,167
bba99f29ad8500770bd838366c96ae371787d98f,"error=_(""%(id)s is not a valid %(type)s identifier"") %",0,0,0.0,168
bba99f29ad8500770bd838366c96ae371787d98f,"{'id': ident, 'type': tunnel_type})",0,0,0.0,169
bba99f29ad8500770bd838366c96ae371787d98f,if tunnel_range[1] < tunnel_range[0]:,0,0,0.0,170
bba99f29ad8500770bd838366c96ae371787d98f,"class TestMetaL3NatDBTestCase(test_l3_plugin.L3NatDBIntTestCase,",1,0,0.0,171
