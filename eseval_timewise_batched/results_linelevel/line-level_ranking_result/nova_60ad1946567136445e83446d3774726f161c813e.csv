commit_id,line,line_level_label,count,line_score,row
60ad1946567136445e83446d3774726f161c813e,context = filter_properties['context'],1,3,1.0,1
60ad1946567136445e83446d3774726f161c813e,context = filter_properties['context'],1,3,1.0,2
60ad1946567136445e83446d3774726f161c813e,context = filter_properties['context'],0,3,1.0,3
60ad1946567136445e83446d3774726f161c813e,context = filter_properties['context'],1,3,1.0,4
60ad1946567136445e83446d3774726f161c813e,context = filter_properties['context'],1,3,1.0,5
60ad1946567136445e83446d3774726f161c813e,num_values = len(aggregate_vals),1,1,0.3333333333333333,6
60ad1946567136445e83446d3774726f161c813e,metadata = db.aggregate_metadata_get_by_host(,1,1,0.3333333333333333,7
60ad1946567136445e83446d3774726f161c813e,host_az = CONF.default_availability_zone,0,1,0.3333333333333333,8
60ad1946567136445e83446d3774726f161c813e,hosts_passes = availability_zone == CONF.default_availability_zone,0,1,0.3333333333333333,9
60ad1946567136445e83446d3774726f161c813e,host_az = metadata['availability_zone'],0,1,0.3333333333333333,10
60ad1946567136445e83446d3774726f161c813e,hosts_passes = availability_zone in metadata['availability_zone'],0,1,0.3333333333333333,11
60ad1946567136445e83446d3774726f161c813e,LOG = logging.getLogger(__name__),0,1,0.3333333333333333,12
60ad1946567136445e83446d3774726f161c813e,metadata = db.aggregate_metadata_get_by_host(,1,1,0.3333333333333333,13
60ad1946567136445e83446d3774726f161c813e,aggregate_vals = utils.aggregate_values_from_db(,0,1,0.3333333333333333,14
60ad1946567136445e83446d3774726f161c813e,ratio = float(min(aggregate_vals)),1,1,0.3333333333333333,15
60ad1946567136445e83446d3774726f161c813e,metadata = db.aggregate_metadata_get_by_host(,0,1,0.3333333333333333,16
60ad1946567136445e83446d3774726f161c813e,"aggregate_vals = metadata.get('ram_allocation_ratio', set())",1,1,0.3333333333333333,17
60ad1946567136445e83446d3774726f161c813e,ratio = utils.validate_num_values(,0,1,0.3333333333333333,18
60ad1946567136445e83446d3774726f161c813e,aggregate_vals = utils.aggregate_values_from_db(,0,1,0.3333333333333333,19
60ad1946567136445e83446d3774726f161c813e,ratio = float(min(aggregate_vals)),1,1,0.3333333333333333,20
60ad1946567136445e83446d3774726f161c813e,num_values = len(aggregate_vals),1,1,0.3333333333333333,21
60ad1946567136445e83446d3774726f161c813e,"aggregate_vals = metadata.get('cpu_allocation_ratio', set())",1,1,0.3333333333333333,22
60ad1946567136445e83446d3774726f161c813e,metadata = db.aggregate_metadata_get_by_host(,1,1,0.3333333333333333,23
60ad1946567136445e83446d3774726f161c813e,ratio = utils.validate_num_values(,0,1,0.3333333333333333,24
60ad1946567136445e83446d3774726f161c813e,aggregate_vals = utils.aggregate_values_from_db(,0,1,0.3333333333333333,25
60ad1946567136445e83446d3774726f161c813e,metadata = db.aggregate_metadata_get_by_host(,1,1,0.3333333333333333,26
60ad1946567136445e83446d3774726f161c813e,return True,0,0,0.0,27
60ad1946567136445e83446d3774726f161c813e,from nova.openstack.common import log as logging,0,0,0.0,28
60ad1946567136445e83446d3774726f161c813e,instance_type['name'] in metadata['instance_type']),1,0,0.0,29
60ad1946567136445e83446d3774726f161c813e,return (len(metadata) == 0 or,1,0,0.0,30
60ad1946567136445e83446d3774726f161c813e,"context, host_state.host, key='instance_type')",1,0,0.0,31
60ad1946567136445e83446d3774726f161c813e,return instance_type['name'] in aggregate_vals,0,0,0.0,32
60ad1946567136445e83446d3774726f161c813e,"# TODO(uni): DB query in filter is a performance hit, especially for",0,0,0.0,33
60ad1946567136445e83446d3774726f161c813e,if not aggregate_vals:,0,0,0.0,34
60ad1946567136445e83446d3774726f161c813e,"filter_properties['context'], host_state.host, 'instance_type')",0,0,0.0,35
60ad1946567136445e83446d3774726f161c813e,# all filters with aggregate DB call things.,0,0,0.0,36
60ad1946567136445e83446d3774726f161c813e,# system with lots of hosts. Will need a general solution here to fix,0,0,0.0,37
60ad1946567136445e83446d3774726f161c813e,from nova.scheduler.filters import utils,0,0,0.0,38
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_(""Could not decode ram_allocation_ratio: '%s'""), e)",1,0,0.0,39
60ad1946567136445e83446d3774726f161c813e,return True,0,0,0.0,40
60ad1946567136445e83446d3774726f161c813e,if not availability_zone:,0,0,0.0,41
60ad1946567136445e83446d3774726f161c813e,if 'availability_zone' in metadata:,1,0,0.0,42
60ad1946567136445e83446d3774726f161c813e,"context, host_state.host, key='availability_zone')",0,0,0.0,43
60ad1946567136445e83446d3774726f161c813e,return hosts_passes,0,0,0.0,44
60ad1946567136445e83446d3774726f161c813e,return availability_zone == CONF.default_availability_zone,1,0,0.0,45
60ad1946567136445e83446d3774726f161c813e,else:,1,0,0.0,46
60ad1946567136445e83446d3774726f161c813e,return availability_zone in metadata['availability_zone'],1,0,0.0,47
60ad1946567136445e83446d3774726f161c813e,"""of which the minimum value will be used.""),",1,0,0.0,48
60ad1946567136445e83446d3774726f161c813e,"context, host_state.host, key='availability_zone')",1,0,0.0,49
60ad1946567136445e83446d3774726f161c813e,if availability_zone:,1,0,0.0,50
60ad1946567136445e83446d3774726f161c813e,'host_az': host_az}),0,0,0.0,51
60ad1946567136445e83446d3774726f161c813e,if 'availability_zone' in metadata:,0,0,0.0,52
60ad1946567136445e83446d3774726f161c813e,"'az': availability_zone,",0,0,0.0,53
60ad1946567136445e83446d3774726f161c813e,"{'host_state': host_state,",0,0,0.0,54
60ad1946567136445e83446d3774726f161c813e,"""%(host_state)s has AZs: %(host_az)s"",",0,0,0.0,55
60ad1946567136445e83446d3774726f161c813e,"LOG.debug(""Availability Zone '%(az)s' requested. """,0,0,0.0,56
60ad1946567136445e83446d3774726f161c813e,if not hosts_passes:,0,0,0.0,57
60ad1946567136445e83446d3774726f161c813e,else:,0,0,0.0,58
60ad1946567136445e83446d3774726f161c813e,{'num_values': num_values}),1,0,0.0,59
60ad1946567136445e83446d3774726f161c813e,from nova.scheduler.filters import utils,0,0,0.0,60
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_(""%(num_values)d ratio values found, """,1,0,0.0,61
60ad1946567136445e83446d3774726f161c813e,if num_values > 1:,1,0,0.0,62
60ad1946567136445e83446d3774726f161c813e,from nova.openstack.common.gettextutils import _LW,0,0,0.0,63
60ad1946567136445e83446d3774726f161c813e,from nova.scheduler.filters import utils,0,0,0.0,64
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_LW(""VCPUs not set; assuming CPU collection broken""))",0,0,0.0,65
60ad1946567136445e83446d3774726f161c813e,"filter_properties['context'],",0,0,0.0,66
60ad1946567136445e83446d3774726f161c813e,"host_state.host,",0,0,0.0,67
60ad1946567136445e83446d3774726f161c813e,'cpu_allocation_ratio'),0,0,0.0,68
60ad1946567136445e83446d3774726f161c813e,"aggregate_vals, CONF.cpu_allocation_ratio, cast_to=float)",0,0,0.0,69
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_LW(""Could not decode cpu_allocation_ratio: '%s'""), e)",0,0,0.0,70
60ad1946567136445e83446d3774726f161c813e,from nova import db,1,0,0.0,71
60ad1946567136445e83446d3774726f161c813e,from nova.openstack.common.gettextutils import _,1,0,0.0,72
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_(""VCPUs not set; assuming CPU collection broken""))",1,0,0.0,73
60ad1946567136445e83446d3774726f161c813e,"context, host_state.host, key='cpu_allocation_ratio')",1,0,0.0,74
60ad1946567136445e83446d3774726f161c813e,if num_values == 0:,1,0,0.0,75
60ad1946567136445e83446d3774726f161c813e,return CONF.cpu_allocation_ratio,1,0,0.0,76
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_(""%(num_values)d ratio values found, """,1,0,0.0,77
60ad1946567136445e83446d3774726f161c813e,if num_values > 1:,1,0,0.0,78
60ad1946567136445e83446d3774726f161c813e,"""of which the minimum value will be used.""),",1,0,0.0,79
60ad1946567136445e83446d3774726f161c813e,{'num_values': num_values}),1,0,0.0,80
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_(""Could not decode cpu_allocation_ratio: '%s'""), e)",1,0,0.0,81
60ad1946567136445e83446d3774726f161c813e,from nova.openstack.common.gettextutils import _LW,0,0,0.0,82
60ad1946567136445e83446d3774726f161c813e,"filter_properties['context'],",0,0,0.0,83
60ad1946567136445e83446d3774726f161c813e,"host_state.host,",0,0,0.0,84
60ad1946567136445e83446d3774726f161c813e,'ram_allocation_ratio'),0,0,0.0,85
60ad1946567136445e83446d3774726f161c813e,"aggregate_vals, CONF.ram_allocation_ratio, cast_to=float)",0,0,0.0,86
60ad1946567136445e83446d3774726f161c813e,"LOG.warning(_LW(""Could not decode ram_allocation_ratio: '%s'""), e)",0,0,0.0,87
60ad1946567136445e83446d3774726f161c813e,from nova import db,1,0,0.0,88
60ad1946567136445e83446d3774726f161c813e,from nova.openstack.common.gettextutils import _,1,0,0.0,89
60ad1946567136445e83446d3774726f161c813e,"context, host_state.host, key='ram_allocation_ratio')",1,0,0.0,90
60ad1946567136445e83446d3774726f161c813e,if num_values == 0:,1,0,0.0,91
60ad1946567136445e83446d3774726f161c813e,return CONF.ram_allocation_ratio,1,0,0.0,92
60ad1946567136445e83446d3774726f161c813e,return True,1,0,0.0,93
