commit_id,line,line_level_label,count,line_score,row
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds = ['show openstack config region %s' % self.region],1,5,1.0,1
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param vms: list of vms to which the ports will be attached to.,1,5,1.0,2
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'no port id %s' % port_id,",1,4,0.8,3
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Tests all methods used to send commands between Arista Driver and EOS,1,4,0.8,4
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Filter the ports to only the vms that we are interested,1,4,0.8,5
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Send trigger to EOS that the ML2->EOS sync is Complete.,1,4,0.8,6
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Send trigger to EOS that the ML2->EOS sync has started.,1,4,0.8,7
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param commands_to_logs : This should be set to the command that is,1,4,0.8,8
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Helper method to add commands to enter and exit from openstack,1,4,0.8,9
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param commands : List of command to be executed on EOS.,1,4,0.8,10
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('no vm id %s' % vm_id),1,4,0.8,11
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('no network id %s' % network_id),1,4,0.8,12
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds = ['tenant %s' % tenant_id],1,4,0.8,13
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param commands_to_log : This should be set to the command that is,1,4,0.8,14
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param port_id: globally unique port ID that connects dhcp to network,1,4,0.8,15
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,This method tries to execute the commands on EOS and if it succeedes,1,4,0.8,16
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param host: ID of the host where the dhcp is hosted,1,4,0.8,17
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"msg = _(""VM id %(vmid)s not found for port %(portid)s"") % {",1,4,0.8,18
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param host_id: ID of the host where the VM is placed,1,4,0.8,19
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param port_id: globally unique port ID that connects VM to network,1,4,0.8,20
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param segmentation_id: VLAN ID that is assigned to the network,1,4,0.8,21
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"msg = _(""'timestamp' command '%s' is not available on EOS"") % cmd",1,4,0.8,22
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmd = ['show openstack config region %s timestamp' % self.region],1,4,0.8,23
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param host: ID of the host where the VM is placed,1,4,0.8,24
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param port_id: globally unique port ID that connects VM to network,1,4,0.8,25
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds = ['tenant %s' % tenant_id,",1,4,0.8,26
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('no tenant %s' % tenant),1,3,0.6000000000000001,27
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param cmds: The openstack CLI commands that need to be executed,1,3,0.6000000000000001,28
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# contains the CLI command which contains the credentials.,1,3,0.6000000000000001,29
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# command to log is different from the actual command, use",1,3,0.6000000000000001,30
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,This method returns the time at which any entities in the region,1,3,0.6000000000000001,31
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'no region %s' % self.region,",1,3,0.6000000000000001,32
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Sends a bulk request to delete the tenants.",1,3,0.6000000000000001,33
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param tenant_list: list of globaly unique neutron tenant ids which,1,3,0.6000000000000001,34
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,nets = ['id%s' % n for n in range(expected_num_nets)],1,3,0.6000000000000001,35
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('port id %s %s network-id %s' %,1,3,0.6000000000000001,36
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"append_cmd('vm id %s hostid %s' % (vm['vmId'], vm['host']))",1,3,0.6000000000000001,37
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('dhcp id %s hostid %s port-id %s %s' %,1,3,0.6000000000000001,38
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Get the time at which entities in the region were updated.,1,3,0.6000000000000001,39
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Negative test cases to test the RPC between Arista Driver and EOS.""""""",1,3,0.6000000000000001,40
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,nets = ['id_%s' % n for n in range(num_nets)],1,3,0.6000000000000001,41
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds = ['enable', 'configure', 'cvx', 'service openstack',",1,3,0.6000000000000001,42
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('segment 1 type vlan id %d' % net_id),1,3,0.6000000000000001,43
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('no network id net-id-%d' % net_id),1,3,0.6000000000000001,44
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('no vm id vm-id-%d' % vm_id),1,3,0.6000000000000001,45
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host = 'host_%s' % vm_count,1,3,0.6000000000000001,46
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('network id %s' % network_id),1,3,0.6000000000000001,47
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('dhcp id %s hostid %s port-id %s name %s' % (,1,3,0.6000000000000001,48
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.append('vm id %s hostid %s' % (vm_id, host))",1,3,0.6000000000000001,49
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('port id %s name %s network-id %s' % (,1,3,0.6000000000000001,50
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds = ['show openstack config region RegionOne timestamp'],1,3,0.6000000000000001,51
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Negative test cases to test the Arista Driver configuration.""""""",1,3,0.6000000000000001,52
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_name = '' if 'name' not in port else 'name ""%s""' % (",1,3,0.6000000000000001,53
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('network id %s' % port['network_id']),1,3,0.6000000000000001,54
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Test cases to test the RPC between Arista Driver and EOS.",1,3,0.6000000000000001,55
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param vm_port_list: list of ports that need to be created.,1,3,0.6000000000000001,56
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.append('port id %s name ""%s"" network-id %s' %",1,3,0.6000000000000001,57
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param vm_id : id of a VM that needs to be deleted.,1,3,0.6000000000000001,58
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('Network name changed to %s') % new_network['name'],1,3,0.6000000000000001,59
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('Port name changed to %s') % new_port['name'],1,3,0.6000000000000001,60
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm = AristaProvisionedVms(,1,3,0.6000000000000001,61
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net = AristaProvisionedNets(,1,3,0.6000000000000001,62
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param seg_id: Optionally matches the segmentation ID (VLAN),1,3,0.6000000000000001,63
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Checks if a tenant is already known to EOS",1,3,0.6000000000000001,64
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# The cli_commands dict stores the mapping between the CLI command key,1,3,0.6000000000000001,65
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns a list of 'exit' commands for the modes.",1,3,0.6000000000000001,66
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param modes: a list of CLI modes to exit out of.,1,3,0.6000000000000001,67
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param port_name: Name of the port - for display purposes,1,3,0.6000000000000001,68
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'vm id %s hostid %s' % (vm_id, host)]",1,3,0.6000000000000001,69
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'Entire EOS region is cleared') % len(eos_tenants),1,3,0.6000000000000001,70
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Create a reference to function to avoid name lookups in the loop,1,3,0.6000000000000001,71
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Sends indication to EOS that ML2->EOS sync has started.""""""",1,3,0.6000000000000001,72
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param network_id_list: list of globally unique neutron network,1,3,0.6000000000000001,73
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deletes the network ids specified for a tenant",1,3,0.6000000000000001,74
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('segment 1 type vlan id %d' %,1,3,0.6000000000000001,75
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('network id %s' % network['network_id']),1,3,0.6000000000000001,76
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Sends indication to EOS that ML2->EOS sync has completed.""""""",1,3,0.6000000000000001,77
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('port id %s network-id %s' %,1,3,0.6000000000000001,78
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'no dhcp id %s port-id %s' % (dhcp_id, port_id),",1,3,0.6000000000000001,79
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network id %s' % network_id,",1,3,0.6000000000000001,80
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'vm id %s hostid %s' % (vm_id, host),",1,3,0.6000000000000001,81
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('dhcp id %s hostid %s port-id %s' %,1,3,0.6000000000000001,82
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'network id %s' % network_id],1,3,0.6000000000000001,83
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vms = {},1,2,0.4,84
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# To support shared networks, split the sync loop in two parts:",1,2,0.4,85
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# Find the Networks that are present in Neutron DB, but not on EOS",1,2,0.4,86
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# Find the VMs that are present in Neutron DB, but not on EOS",1,2,0.4,87
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port for port in self._ndb.get_all_ports_for_tenant(,1,2,0.4,88
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.info(_LI('Executing command on Arista EOS: %s'), log_cmds)",1,2,0.4,89
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenants = ['id%s' % n for n in range(num_tenants)],1,2,0.4,90
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vms = eos_tenants[tenant]['tenantVmInstances'],1,2,0.4,91
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network = network_context.current,0,2,0.4,92
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib.get_shared_network_owner_id.return_value = 1,0,2,0.4,93
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port = port_context.current,0,2,0.4,94
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenants = ['id%s' % n for n in range(expected_num_tenants)],1,2,0.4,95
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# None of the commands have failed till now. But if subsequent,1,2,0.4,96
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Perform the sync,1,2,0.4,97
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Region has been completely cleaned. So there is nothing to,1,2,0.4,98
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Re-register with EOS so that the timestamp is updated.,1,2,0.4,99
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'synchronization. Entire EOS region is cleared'),",1,2,0.4,100
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,#Always register with EOS to ensure that it has correct credentials,1,2,0.4,101
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# If the times match, then ML2 is in sync with EOS. Otherwise",1,2,0.4,102
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Sends data to EOS which differs from neutron DB.""""""",1,2,0.4,103
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,eapi_server_url = ('https://%s:%s@%s/command-api' %,1,2,0.4,104
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'region %s' % self.region,",1,2,0.4,105
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'commands %(cmd)s on EOS %(host)s') %,1,2,0.4,106
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = (_('Error %(err)s while trying to execute ',1,2,0.4,107
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# The command might contain sensitive information. If the,1,2,0.4,108
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host = cfg.CONF.ml2_arista.eapi_host,1,2,0.4,109
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertNotEqual(net_list != expected_eos_net_list, ('%s != %s' %",1,2,0.4,110
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant = u'test-1',1,2,0.4,111
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port = {,1,2,0.4,112
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv._server.runCmds.assert_called_once_with(version=1, cmds=cmds)",1,2,0.4,113
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host = 'host',1,2,0.4,114
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"logged. If it is None, then the commands",1,2,0.4,115
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vms = ['vm1', 'vm2', 'vm3']",1,2,0.4,116
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,#Now test the delete network,1,2,0.4,117
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_num_nets = 1,1,2,0.4,118
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,drv = arista.AristaRPCWrapper(),1,2,0.4,119
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'region %s' % self.region,",1,2,0.4,120
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'password %(password)s tenant %(tenant)s' %,1,2,0.4,121
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('no tenant ten-%d' % ten_id),1,2,0.4,122
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"tenant_list = ['ten-%d' % t_id for t_id in range(1, num_tenants)]",1,2,0.4,123
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_id = 'port-id-%d-%d' % (vm_count, port_count)",1,2,0.4,124
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id = 'network-id-%d' % net_count,1,2,0.4,125
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_name = '""port-%d-%d""' % (vm_count, port_count)",1,2,0.4,126
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,device_owner = devices[(vm_count + port_count) % 2],1,2,0.4,127
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_id = 'vm-id-%d' % vm_count,1,2,0.4,128
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net_count = 1,1,2,0.4,129
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vms = dict(,1,2,0.4,130
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_ids = ['vm-id-%d' % vm_id for vm_id in range(1, num_vms)]",1,2,0.4,131
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'tenant ten-1', 'no vm id vm-id',",1,2,0.4,132
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'tenant ten-1', 'no network id net-id',",1,2,0.4,133
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.append('network id net-id-%d name ""net-name-%d""' %",1,2,0.4,134
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds = ['enable',",1,2,0.4,135
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'segment 1 type vlan id 123',",1,2,0.4,136
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network = {,1,2,0.4,137
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'no port id 123',",1,2,0.4,138
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'dhcp id vm-1 hostid host port-id 123 name ""123-port""',",1,2,0.4,139
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,log_cmds = commands,1,2,0.4,140
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"networks = ['net-id-%d' % net_id for net_id in range(1, num_networks)]",1,2,0.4,141
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,postfix commands - to make is understandble by EOS.,1,2,0.4,142
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Provides access to the Neutron Data bases for all provisioned,1,2,0.4,143
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param network_id: globally unique neutron network identifier,1,2,0.4,144
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:returns: dictionary containing the networks per tenant,1,2,0.4,145
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.cli_commands['timestamp'] = cmd,1,2,0.4,146
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,the command is stored.,1,2,0.4,147
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Checks whether the CLI commands are vaild.",1,2,0.4,148
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Command API - JSON RPC API provided by Arista EOS,1,2,0.4,149
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,EOS - operating system used on Arista hardware,1,2,0.4,150
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,DEFAULT_VLAN = 1,1,2,0.4,151
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"nets = self.get_networks(self.admin_ctx, filters=filters) or []",1,2,0.4,152
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network = self._get_network(tenant_id, network_id)",1,2,0.4,153
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Names of the networks and ports are not stroed in Arista repository,1,2,0.4,154
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,of DB between ML2 Mechanism Driver and Arista EOS,1,2,0.4,155
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Checks if a networks is already known to EOS",1,2,0.4,156
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.append('dhcp id %s hostid %s port-id %s name ""%s""' %",1,2,0.4,157
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Checks if a VM is already known to EOS",1,2,0.4,158
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param network_id: globally unique neutron network identifier,1,2,0.4,159
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant = AristaProvisionedTenants(tenant_id=tenant_id),1,2,0.4,160
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,session = db.get_session(),1,2,0.4,161
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param tenant_id: globally unique neutron tenant identifier,1,2,0.4,162
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('No Tenants configured in Neutron DB. But %d ',1,2,0.4,163
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.info(_('Executing command on Arista EOS: %s'), log_cmds)",1,2,0.4,164
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"msg = _(""Unknown device owner: %s"") % port['device_owner']",1,2,0.4,165
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'synchronization. Entire EOS region is cleared'),",0,2,0.4,166
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.info(_LI('Executing command on Arista EOS: %s'), log_cmds)",0,2,0.4,167
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.warn(_LW(""VM id %(vmid)s not found for port %(portid)s""),",0,2,0.4,168
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"In this method, list of commands is appended with prefix and",1,2,0.4,169
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param tenant_id: globally unique neutron tenant identifier,1,2,0.4,170
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net = (session.query(AristaProvisionedNets).,1,2,0.4,171
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Creates a single network on Arista hardware",1,2,0.4,172
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param tenant_id: globaly unique neutron tenant identifier,1,2,0.4,173
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Execute/sends a CAPI (Command API) command to EOS.",1,2,0.4,174
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Creates a network on Arista Hardware",1,2,0.4,175
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Return the timestamp of the last update.",1,2,0.4,176
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Check whether EOS is in sync with Neutron.""""""",1,2,0.4,177
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Clear the region updated time which forces a resync.""""""",1,2,0.4,178
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,sync_interval_cmd = 'sync interval %d' % self.sync_interval,1,2,0.4,179
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'password %(password)s tenant %(tenant)s' %,1,2,0.4,180
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds = ['enable',",1,2,0.4,181
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deleted the region data from EOS.""""""",1,2,0.4,182
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds = [],1,2,0.4,183
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.warn(_LW(""VM id %(vmid)s not found for port %(portid)s""),",1,2,0.4,184
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm = vms[port['device_id']],1,2,0.4,185
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds = ['auth url %(auth_url)s user %(user)s ',1,2,0.4,186
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Sends a bulk request to create ports.",1,2,0.4,187
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.append('segment %d type %s id %d' % (seg_num,",1,2,0.4,188
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,":param network_list: list of dicts containing network_id, network_name",1,2,0.4,189
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"append_cmd('network id %s name ""%s""' %",1,2,0.4,190
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param vm_id_list : ids of VMs that needs to be deleted.,1,2,0.4,191
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param segments: List of segments in a given network,1,2,0.4,192
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network id %s name ""%s""' % (network_id, network_name)]",1,2,0.4,193
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,seg_num = 1,1,2,0.4,194
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deletes a specified network for a given tenant",1,2,0.4,195
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deletes a VM from EOS for a given tenant",1,2,0.4,196
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param tenant_id : globally unique neutron tenant identifier,1,2,0.4,197
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deletes VMs from EOS for a given tenant",1,2,0.4,198
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id = 456,1,1,0.2,199
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"net_provisioned = db.is_network_provisioned(tenant_id,",1,1,0.2,200
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Now test the delete ports,0,1,0.2,201
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id = '123',1,1,0.2,202
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net_provisioned = db.is_tenant_provisioned(tenant_id),1,1,0.2,203
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant_id = 'test',1,1,0.2,204
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"net_provisioned = db.is_network_provisioned(tenant_id, network_id)",1,1,0.2,205
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cfg.CONF.keystone_authtoken = fake_keystone_info_class(),1,1,0.2,206
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,device_owner = port['device_owner'],0,1,0.2,207
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_name = port['name'],0,1,0.2,208
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_id = port['id'],0,1,0.2,209
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host_id = port['binding:host_id'],0,1,0.2,210
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,device_id = port['device_id'],0,1,0.2,211
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib.is_vm_provisioned.return_value = True,0,1,0.2,212
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host_id = port_context.current['binding:host_id'],0,1,0.2,213
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_id = 'VM-1',1,1,0.2,214
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_id = port_context.current['id'],0,1,0.2,215
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertFalse(net_provisioned, 'The network should be deleted')",1,1,0.2,216
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'There should be %d tenants, not %d' %",1,1,0.2,217
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_id = 456,1,1,0.2,218
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_num_tenants = 100,1,1,0.2,219
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for vm in vm_to_remember:,1,1,0.2,220
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_id = 'vm1',0,1,0.2,221
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_to_forget = ['vm2', 'vm1']",1,1,0.2,222
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_to_remember = ['vm1', 'vm2', 'vm3']",1,1,0.2,223
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected = 0,1,1,0.2,224
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_tenants = 100,1,1,0.2,225
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_tenants_provisioned = db.num_provisioned_tenants(),1,1,0.2,226
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected = old_nets,1,1,0.2,227
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host_id = 'ubuntu1',1,1,0.2,228
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,old_nets = db.num_nets_provisioned(tenant_id),1,1,0.2,229
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_nets = 100,1,1,0.2,230
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'There should be %d nets, not %d' %",1,1,0.2,231
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_nets_provisioned = db.num_nets_provisioned(tenant_id),1,1,0.2,232
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_num_nets = 100,1,1,0.2,233
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertFalse(vm_provisioned, 'The vm should be deleted')",1,1,0.2,234
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_provisioned = db.is_vm_provisioned(vm_id, host_id, port_id,",1,1,0.2,235
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_context = self._get_port_context(tenant_id,",0,1,0.2,236
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,networks = {},1,1,0.2,237
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib.num_vms_provisioned.return_value = 0,0,1,0.2,238
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib.num_nets_provisioned.return_value = 0,0,1,0.2,239
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.ndb = db.NeutronNets(),1,1,0.2,240
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.rpc = rpc or AristaRPCWrapper(),1,1,0.2,241
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return vms,1,1,0.2,242
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,networks = eos_tenants[tenant]['tenantNetworks'],1,1,0.2,243
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if eos_tenants and tenant in eos_tenants:,1,1,0.2,244
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_vms = len(db.get_vms(tenant_id)),1,1,0.2,245
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_ports = [,1,1,0.2,246
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for tenant in vms_to_update:,1,1,0.2,247
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Now update the VMs,1,1,0.2,248
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,networks = [,1,1,0.2,249
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(network['id'], network) for network in",1,1,0.2,250
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,neutron_nets = dict(,1,1,0.2,251
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vms_to_update[tenant] = db_vms_key_set.difference(eos_vms_key_set),1,1,0.2,252
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,nets_to_update = db_nets_key_set.difference(eos_nets_key_set),1,1,0.2,253
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vms_to_delete = eos_vms_key_set.difference(db_vms_key_set),1,1,0.2,254
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# Find the VMs that are present on EOS, but not in Neutron DB",1,1,0.2,255
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,nets_to_delete = eos_nets_key_set.difference(db_nets_key_set),1,1,0.2,256
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.segmentation_type = db.VLAN_SEGMENTATION,1,1,0.2,257
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.eos = SyncService(self.rpc, self.ndb)",1,1,0.2,258
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_provisioned = db.is_vm_provisioned(device_id,",1,1,0.2,259
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant_id = 'ten-1',0,1,0.2,260
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net_dict = {,0,1,0.2,261
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segments = network_context.network_segments,0,1,0.2,262
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib.is_network_provisioned.return_value = True,0,1,0.2,263
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_calls = [,0,1,0.2,264
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_context = self._get_network_context(tenant_id,",0,1,0.2,265
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id = 1001,0,1,0.2,266
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id = 'net1-id',0,1,0.2,267
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv = mechanism_arista.AristaDriver(self.fake_rpc),0,1,0.2,268
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"segmentation_id = db.get_segmentation_id(tenant_id,",1,1,0.2,269
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib = self.fake_rpc,0,1,0.2,270
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.fake_rpc = mock.MagicMock(),0,1,0.2,271
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,verifies the functionality.,0,1,0.2,272
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,all the APIs as they would be invoked in real world scenarios and,0,1,0.2,273
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Tests all mechanism driver APIs supported by Arista Driver. It invokes,0,1,0.2,274
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Main test cases for Arista Mechanism driver.",0,1,0.2,275
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,objects_for_tenant = (db.num_nets_provisioned(tenant_id) +,1,1,0.2,276
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for vm in vm_to_forget:,1,1,0.2,277
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'cvx', 'configure', 'enable']))",1,1,0.2,278
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected = len(vm_to_remember) - len(vm_to_forget),1,1,0.2,279
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'got %d records' % (expected, num_vms))",1,1,0.2,280
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,drv._server.runCmds.side_effect = Exception('server error'),1,1,0.2,281
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,drv._server = mock.MagicMock(),1,1,0.2,282
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'sync interval %d' % cfg.CONF.ml2_arista.sync_interval,",1,1,0.2,283
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,auth_cmd = (,1,1,0.2,284
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,auth = fake_keystone_info_class(),1,1,0.2,285
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,('Must return network info for a valid net')),1,1,0.2,286
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.get_tenants.return_value = known_nets,1,1,0.2,287
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,known_nets = valid_net_info,1,1,0.2,288
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"valid_net_info = {'network_id': valid_network_id,",1,1,0.2,289
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,valid_network_id = '12345',1,1,0.2,290
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net_info = self.drv.get_tenants(),1,1,0.2,291
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.get_tenants.return_value = [],1,1,0.2,292
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.get_tenants = mock.MagicMock(),1,1,0.2,293
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected = [],1,1,0.2,294
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_tenants = 10,1,1,0.2,295
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'region RegionOne', 'no tenant ten-1',",1,1,0.2,296
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net_count += 1,1,1,0.2,297
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Main test cases for Arista Mechanism driver.",1,1,0.2,298
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Tests all mechanism driver APIs supported by Arista Driver. It invokes,1,1,0.2,299
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,all the APIs as they would be invoked in real world scenarios and,1,1,0.2,300
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_list = db.get_vms(tenant_id),1,1,0.2,301
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,eos_vms_key_set = frozenset(eos_vms.keys()),1,1,0.2,302
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'VMs, not %d' % (expected_vms, provisioned_vms))",1,1,0.2,303
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_vms = 0,1,1,0.2,304
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Now test the delete ports,1,1,0.2,305
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'hosts, not %d' % (expected_vms, provisioned_vms))",1,1,0.2,306
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_vms = len(vms),1,1,0.2,307
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,provisioned_vms = len(vm_list),1,1,0.2,308
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_context = self._get_port_context(tenant_id,",1,1,0.2,309
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,verifies the functionality.,1,1,0.2,310
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,#now test the delete networks,1,1,0.2,311
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_context = self._get_network_context(tenant_id,",1,1,0.2,312
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,expected_num_nets = 0,1,1,0.2,313
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertFalse(net_provisioned, 'The network should be created')",1,1,0.2,314
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertTrue(net_provisioned, 'The network should be created')",1,1,0.2,315
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv = arista.AristaDriver(self.fake_rpc),1,1,0.2,316
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.fake_rpc = mock.MagicMock(),1,1,0.2,317
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'name': 'port-%d-%d' % (vm_id, port_id)",1,1,0.2,318
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_id': 'network-id-%d' % net_count,",1,1,0.2,319
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'device_owner': devices[(vm_id + port_id) % 2],",1,1,0.2,320
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.region = 'RegionOne',1,1,0.2,321
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'tenant ten-1', 'vm id vm-1 hostid host',",1,1,0.2,322
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_name = '123-port',1,1,0.2,323
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id = 'net-id',1,1,0.2,324
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_id = 123,1,1,0.2,325
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_id = 'vm-1',1,1,0.2,326
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant_id = 'ten-1',1,1,0.2,327
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv._server = mock.MagicMock(),1,1,0.2,328
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv = arista.AristaRPCWrapper(),1,1,0.2,329
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'tenant ten-1', 'network id net-id',",1,1,0.2,330
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,net_list = db.get_networks(tenant),1,1,0.2,331
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"expected_eos_net_list = {network_id: {u'networkId': network_id,",1,1,0.2,332
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vlan2_id = 1234,1,1,0.2,333
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vlan_id = 123,1,1,0.2,334
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network2_id = u'1234',1,1,0.2,335
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id = u'123',1,1,0.2,336
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segm_type = 'vlan',1,1,0.2,337
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'port id 123 name ""123-port"" network-id net-id',",1,1,0.2,338
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'no dhcp id vm-1 port-id 123',",1,1,0.2,339
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'device_id': 'vm-id-%d' % vm_id,",1,1,0.2,340
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant_id = 'ten-3',1,1,0.2,341
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'id': 'port-id-%d-%d' % (vm_id, port_id),",1,1,0.2,342
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_port_list = [],1,1,0.2,343
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"devices = [n_const.DEVICE_OWNER_DHCP, 'compute']",1,1,0.2,344
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'host': 'host_%d' % vm_id,",1,1,0.2,345
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'vmId': 'vm-id-%d' % vm_id,",1,1,0.2,346
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"('vm-id-%d' % vm_id, {",1,1,0.2,347
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_ports_per_vm = 2,1,1,0.2,348
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_vms = 10,1,1,0.2,349
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'tenant ten-1', 'network id net-id name ""net-name""',",1,1,0.2,350
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_id = 'vm-id',1,1,0.2,351
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'configure',",1,1,0.2,352
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_name': 'net-name-%d' % net_id,",1,1,0.2,353
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_id': 'net-id-%d' % net_id,",1,1,0.2,354
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,networks = [{,1,1,0.2,355
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_networks = 10,1,1,0.2,356
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant_id = 'ten-2',1,1,0.2,357
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# Find the networks that are present on EOS, but not in Neutron DB",1,1,0.2,358
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Test storing and retriving functionality of Arista mechanism driver.",1,1,0.2,359
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,eos_nets_key_set = frozenset(eos_nets.keys()),1,1,0.2,360
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# hack for pep8 E711: comparison to None should be,1,1,0.2,361
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_name = None,1,1,0.2,362
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.admin_ctx = nctx.get_admin_context(),1,1,0.2,363
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,networks as well ports. This data is used during the synchronization,1,1,0.2,364
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Access to Neutron DB.",1,1,0.2,365
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for tenant in all_tenants,1,1,0.2,366
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,all_tenants = session.query(model),1,1,0.2,367
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,model = AristaProvisionedTenants,1,1,0.2,368
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns list of all tenants in EOS-compatible format.""""""",1,1,0.2,369
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for port in all_ports,1,1,0.2,370
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,all_ports = (session.query(model).,1,1,0.2,371
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for vm in all_vms,1,1,0.2,372
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,all_vms = (session.query(model).,1,1,0.2,373
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,model = AristaProvisionedVms,1,1,0.2,374
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns all VMs for a given tenant in EOS-compatible format.",1,1,0.2,375
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for net in all_nets,1,1,0.2,376
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,res = dict(,1,1,0.2,377
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,all_nets = (session.query(model).,1,1,0.2,378
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_name = network[0]['name'],1,1,0.2,379
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,filters = {'tenant_id': [tenant_id]},1,1,0.2,380
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,filters = {'id': [network_id]},1,1,0.2,381
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_nets = db_lib.get_networks(tenant),0,1,0.2,382
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._region_updated_time = None,1,1,0.2,383
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.sync_interval = cfg.CONF.ml2_arista.sync_interval,1,1,0.2,384
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.region = cfg.CONF.ml2_arista.region_name,1,1,0.2,385
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.keystone_conf = cfg.CONF.keystone_authtoken,1,1,0.2,386
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._server = jsonrpclib.Server(self._eapi_host_url()),1,1,0.2,387
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,All communications between Neutron and EOS are over JSON RPC.,1,1,0.2,388
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Wraps Arista JSON RPC.",1,1,0.2,389
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_tenants = db_lib.get_tenants(),0,1,0.2,390
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"filters = {'tenant_id': [tenant_id],",1,1,0.2,391
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,objects_for_tenant = (db_lib.num_nets_provisioned(tenant_id) +,0,1,0.2,392
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"segmentation_id = db_lib.get_segmentation_id(tenant_id,",0,1,0.2,393
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_provisioned = db_lib.is_vm_provisioned(device_id,",0,1,0.2,394
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.eos = arista_ml2.SyncService(self.rpc, self.ndb)",0,1,0.2,395
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.segmentation_type = db_lib.VLAN_SEGMENTATION,0,1,0.2,396
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.ndb = db_lib.NeutronNets(),0,1,0.2,397
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.rpc = rpc or arista_ml2.AristaRPCWrapper(),0,1,0.2,398
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,none = None,1,1,0.2,399
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,model = AristaProvisionedNets,1,1,0.2,400
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.cli_commands = {},1,1,0.2,401
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns all networks for a given tenant in EOS-compatible format.",1,1,0.2,402
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('VM %s is not updated as it is not found in ',1,1,0.2,403
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'Arista DB') % device_id,1,1,0.2,404
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('VM %s is not created as it is not found in ',1,1,0.2,405
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('Network %s is not updated as it is not found in',1,1,0.2,406
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'Arista DB') % network_id,1,1,0.2,407
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('Network %s is not created as it is not found in',1,1,0.2,408
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenants discovered in EOS during synchronization.',1,1,0.2,409
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_('OpenStack and EOS are in sync!')),1,1,0.2,410
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_('Sync start trigger sent to EOS')),1,1,0.2,411
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.info(_LI('Port name changed to %s'), new_port['name'])",0,1,0.2,412
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"' in Arista DB'), network_id)",0,1,0.2,413
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenants discovered in EOS during ',0,1,0.2,414
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('No Tenants configured in Neutron DB. But %d ',0,1,0.2,415
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('OpenStack and EOS are in sync!')),0,1,0.2,416
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('Sync start trigger sent to EOS')),0,1,0.2,417
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.warn(_LW(""'timestamp' command '%s' is not available on EOS""),",0,1,0.2,418
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_vms_key_set = frozenset(db_vms.keys()),1,1,0.2,419
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,VLAN_SEGMENTATION = 'vlan',1,1,0.2,420
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Stores a tenant information in repository.",1,1,0.2,421
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,session.add(tenant),1,1,0.2,422
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_id=port_id, tenant_id=tenant_id,",1,1,0.2,423
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_tenants = (session.query(AristaProvisionedTenants).,1,1,0.2,424
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_nets = (session.query(AristaProvisionedNets).,1,1,0.2,425
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,num_vm = (session.query(AristaProvisionedVms).,1,1,0.2,426
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return net.segmentation_id if net else None,1,1,0.2,427
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,session.add(net),1,1,0.2,428
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id=segmentation_id),1,1,0.2,429
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"tenant_id=tenant_id,",1,1,0.2,430
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"filter_by(vm_id=vm_id, host_id=host_id,",1,1,0.2,431
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Removes a tenant information from repository.",1,1,0.2,432
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,session.add(vm),1,1,0.2,433
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant_id=tenant_id),1,1,0.2,434
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id=network_id,",1,1,0.2,435
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"host_id=host_id,",1,1,0.2,436
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_id=vm_id,",1,1,0.2,437
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param vm_id: globally unique identifier for VM instance,1,1,0.2,438
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns a list of all tenants stored in repository.""""""",1,1,0.2,439
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# and the actual CLI command.,1,1,0.2,440
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.info(_LI('Network name changed to %s'), new_network['name'])",0,1,0.2,441
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.cli_commands['timestamp'] = [],1,1,0.2,442
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# that in the error message.,1,1,0.2,443
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._ndb = neutron_db,1,1,0.2,444
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._rpc = rpc_wrapper,1,1,0.2,445
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,are always in sync with Neutron DB.,1,1,0.2,446
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Synchronization of information between Neutron and EOS",1,1,0.2,447
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('Required option eapi_username is not set'),1,1,0.2,448
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,msg = _('Required option eapi_host is not set'),1,1,0.2,449
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,pwd = cfg.CONF.ml2_arista.eapi_password,1,1,0.2,450
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,user = cfg.CONF.ml2_arista.eapi_username,1,1,0.2,451
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._region_updated_time = ret[-1],1,1,0.2,452
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# 'service openstack' and 'exit' commands,1,1,0.2,453
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"ret = self._run_eos_cmds(full_command, full_log_command)",1,1,0.2,454
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,full_log_command = None,1,1,0.2,455
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,full_log_command = self._build_command(commands_to_log),1,1,0.2,456
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,full_command = self._build_command(commands),1,1,0.2,457
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,full_command = [,1,1,0.2,458
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,in the openstack config mode.,1,1,0.2,459
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Logging exception here can reveal passwords as the exception,1,1,0.2,460
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._force_sync = True,1,1,0.2,461
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('Sync start trigger sent to EOS')),1,1,0.2,462
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('OpenStack and EOS are in sync!')),1,1,0.2,463
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# In second loop, update VMs. This is done to ensure that networks for",1,1,0.2,464
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_nets_key_set = frozenset(db_nets.keys()),1,1,0.2,465
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"eos_vms = self._get_eos_vms(eos_tenants, tenant)",1,1,0.2,466
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.warn(_LW(""'timestamp' command '%s' is not available on EOS""),",1,1,0.2,467
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"eos_nets = self._get_eos_networks(eos_tenants, tenant)",1,1,0.2,468
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_nets = db.get_networks(tenant),1,1,0.2,469
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for tenant in db_tenants:,1,1,0.2,470
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vms_to_update = {},1,1,0.2,471
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# operations fail, then force_sync is set to true",1,1,0.2,472
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,eos_tenants = self._rpc.get_tenants(),1,1,0.2,473
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenants_to_delete = frozenset(eos_tenants.keys()).difference(,1,1,0.2,474
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# Delete tenants that are in EOS, but not in the database",1,1,0.2,475
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._force_sync = False,1,1,0.2,476
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenants discovered in EOS during ',1,1,0.2,477
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('No Tenants configured in Neutron DB. But %d ',1,1,0.2,478
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# No tenants configured in Neutron. Clear all EOS state,1,1,0.2,479
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_tenants = db.get_tenants(),1,1,0.2,480
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"error_msg_str = error_msg_str.replace(cmd, log_cmd)",1,1,0.2,481
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_vms = db.get_vms(tenant),1,1,0.2,482
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,error_msg_str = unicode(error),1,1,0.2,483
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('exit')  # exit for network mode,1,1,0.2,484
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param network_name: Network name - for display purposes,1,1,0.2,485
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,is used instead. This will be used once the support for,1,1,0.2,486
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Note: This method is not used at the moment. create_network(),1,1,0.2,487
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network['segmentation_id'] = DEFAULT_VLAN,1,1,0.2,488
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Enter segment mode without exiting out of network mode,1,1,0.2,489
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd = cmds.append,1,1,0.2,490
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,":param network: dict containing network_id, network_name and",1,1,0.2,491
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,sync_end_cmd = ['sync end'],1,1,0.2,492
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,sync_start_cmd = ['sync start'],1,1,0.2,493
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param dhcp_id: globally unique identifier for dhcp,1,1,0.2,494
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,and VMs allocated per tenant,1,1,0.2,495
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param device_owner: Device owner - e.g. compute or network:dhcp,1,1,0.2,496
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,:param vm_id: globally unique identifier for VM instance,1,1,0.2,497
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenants = command_output[0]['tenants'],1,1,0.2,498
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Genric routine plug a port of a VM instace into network.",1,1,0.2,499
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,command_output = self._run_eos_cmds(cmds),1,1,0.2,500
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"ret = self._server.runCmds(version=1, cmds=commands)",1,1,0.2,501
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,seg_num += 1,1,1,0.2,502
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for network in network_list:,1,1,0.2,503
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('exit')  # exit for tenant mode,1,1,0.2,504
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,keystone_conf = self.keystone_conf,1,1,0.2,505
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# full_command list,1,1,0.2,506
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# this returns array of return values for every command in,1,1,0.2,507
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for port in vm_port_list:,1,1,0.2,508
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,param is logged.,1,1,0.2,509
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,timestamp_cmd = self.cli_commands['timestamp'],1,1,0.2,510
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,eos_region_updated_times = self.get_region_updated_time(),1,1,0.2,511
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,log_cmds = ['auth url %(auth_url)s user %(user)s ',1,1,0.2,512
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,auth_uri = utils.get_keystone_url(keystone_conf),1,1,0.2,513
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,log_cmds = commands_to_log,1,1,0.2,514
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,This the initial handshake between Neutron and EOS.,1,1,0.2,515
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""This is the registration request with EOS.",1,1,0.2,516
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deletes a given tenant and all its networks and VMs from EOS.",1,1,0.2,517
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'configure',",1,1,0.2,518
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for tenant in tenant_list:,1,1,0.2,519
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,need to be deleted.,1,1,0.2,520
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.plugins.ml2.drivers.arista import exceptions as arista_exc,1,0,0.0,521
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'shared': shared},0,0,0.0,522
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'name': 'test-port',",0,0,0.0,523
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from oslo.config import cfg,1,0,0.0,524
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.common import constants as n_const,1,0,0.0,525
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.common import utils,1,0,0.0,526
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.plugins.ml2.drivers.arista import db,1,0,0.0,527
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.plugins.ml2.drivers.arista import mechanism_arista as arista,1,0,0.0,528
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def setup_valid_config():,1,0,0.0,529
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.tests import base,1,0,0.0,530
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def setup_arista_wrapper_config(value=''):,1,0,0.0,531
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cfg.CONF.set_override('eapi_host', value, ""ml2_arista"")",1,0,0.0,532
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cfg.CONF.set_override('eapi_username', value, ""ml2_arista"")",1,0,0.0,533
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cfg.CONF.set_override('sync_interval', 10, ""ml2_arista"")",1,0,0.0,534
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'tenant_id': tenant_id,",0,0,0.0,535
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'name': 'test-net',",0,0,0.0,536
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.remember_vm(vm_id, host_id, port_id,",0,0,0.0,537
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_network_context(self, tenant_id, net_id, seg_id, shared):",0,0,0.0,538
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.unplug_host_from_network(device_id, host_id, port_id,",0,0,0.0,539
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.create_port_precommit(port_context),0,0,0.0,540
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id)",0,0,0.0,541
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_port_postcommit(self):,0,0,0.0,542
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.create_port_postcommit(port_context),0,0,0.0,543
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.is_vm_provisioned(device_id, host_id, port_id,",0,0,0.0,544
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id),",0,0,0.0,545
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.plug_port_into_network(device_id, host_id, port_id,",0,0,0.0,546
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id,",0,0,0.0,547
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_name, device_owner)",0,0,0.0,548
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_port_precommit(self):,0,0,0.0,549
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_port_precommit(port_context),0,0,0.0,550
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.is_vm_provisioned(vm_id, host_id, port_id,",0,0,0.0,551
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.forget_vm(vm_id, host_id, port_id,",0,0,0.0,552
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_port_postcommit(self):,0,0,0.0,553
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_port_postcommit(port_context),0,0,0.0,554
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Config is not valid if value is not set,1,0,0.0,555
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_network(tenant_id, network_id)",1,0,0.0,556
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,setup_arista_wrapper_config('value'),1,0,0.0,557
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_network(tenant_id, net_id)",1,0,0.0,558
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_vm(vm_id, host_id, port_id, network_id, tenant_id)",1,0,0.0,559
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_remembers_multiple_networks(self):,1,0,0.0,560
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for net_id in nets:,1,0,0.0,561
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_network(tenant_id, net_id, 123)",1,0,0.0,562
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(expected_num_nets, num_nets_provisioned,",1,0,0.0,563
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(expected_num_nets, num_nets_provisioned))",1,0,0.0,564
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_removes_all_networks(self):,1,0,0.0,565
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(expected, num_nets_provisioned,",1,0,0.0,566
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertTrue(vm_provisioned, 'VM must be provisioned')",1,0,0.0,567
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(expected, num_nets_provisioned))",1,0,0.0,568
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_remembers_multiple_tenants(self):,1,0,0.0,569
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for tenant_id in tenants:,1,0,0.0,570
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(expected_num_tenants, num_tenants_provisioned,",1,0,0.0,571
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_id,",0,0,0.0,572
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(expected_num_tenants, num_tenants_provisioned))",1,0,0.0,573
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_removes_multiple_tenants(self):,1,0,0.0,574
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_vm_is_removed(self):,1,0,0.0,575
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id)",1,0,0.0,576
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class AristaProvisionedVlansStorageTestCase(testlib_api.SqlTestCase):,1,0,0.0,577
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db.forget_tenant(tenant_id),1,0,0.0,578
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,Tests all methods of this class by invoking them separately as well,1,0,0.0,579
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,as a group.,1,0,0.0,580
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""",1,0,0.0,581
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_tenant_is_remembered(self):,1,0,0.0,582
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db.remember_tenant(tenant_id),1,0,0.0,583
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertTrue(net_provisioned, 'Tenant must be provisioned')",1,0,0.0,584
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_tenant_is_removed(self):,1,0,0.0,585
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertFalse(net_provisioned, 'The Tenant should be deleted')",1,0,0.0,586
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_vm(vm_id, host_id, port_id, network_id, tenant_id)",1,0,0.0,587
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_network_is_remembered(self):,1,0,0.0,588
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_network(tenant_id, network_id, segmentation_id)",1,0,0.0,589
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id),1,0,0.0,590
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertTrue(net_provisioned, 'Network must be provisioned')",1,0,0.0,591
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_network_is_removed(self):,1,0,0.0,592
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_network(tenant_id, network_id, '123')",1,0,0.0,593
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_vm_is_remembered(self):,1,0,0.0,594
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_context),0,0,0.0,595
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"with mock.patch.dict(sys.modules,",0,0,0.0,596
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_port_precommit(self):,0,0,0.0,597
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"if db.is_network_provisioned(tenant_id, network_id):",1,0,0.0,598
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if vm_ports:,1,0,0.0,599
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self._rpc.create_vm_port_bulk(tenant, vm_ports, db_vms)",1,0,0.0,600
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_eos_networks(self, eos_tenants, tenant):",1,0,0.0,601
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return networks,1,0,0.0,602
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_eos_vms(self, eos_tenants, tenant):",1,0,0.0,603
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db.remember_tenant(tenant_id),1,0,0.0,604
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_network(tenant_id,",1,0,0.0,605
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_network(tenant_id, network_id)",1,0,0.0,606
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.delete_network(tenant_id, network_id),",0,0,0.0,607
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_vm(device_id, host, port_id,",1,0,0.0,608
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.is_network_provisioned(tenant_id, network_id) or",1,0,0.0,609
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.is_network_provisioned(tenant_id, network_id,",1,0,0.0,610
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id) or,1,0,0.0,611
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"if db.is_vm_provisioned(device_id, host_id, port_id,",1,0,0.0,612
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_vm(device_id, host_id, port_id,",1,0,0.0,613
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db.num_vms_provisioned(tenant_id)),1,0,0.0,614
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,tenant) if port['device_id'] in vms_to_update[tenant],1,0,0.0,615
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# in.,1,0,0.0,616
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self._rpc.create_network_bulk(tenant, networks)",1,0,0.0,617
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for net_id in nets_to_update,1,0,0.0,618
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self._rpc.delete_vm_bulk(tenant, vms_to_delete)",1,0,0.0,619
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(expected, num_tenants_provisioned))",1,0,0.0,620
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if nets_to_delete:,1,0,0.0,621
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self._rpc.delete_network_bulk(tenant, nets_to_delete)",1,0,0.0,622
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if nets_to_update:,1,0,0.0,623
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# Create a dict of networks keyed by id.,1,0,0.0,624
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._ndb.get_all_networks_for_tenant(tenant),1,0,0.0,625
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'network_id': net_id,",1,0,0.0,626
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'segmentation_id':,1,0,0.0,627
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_nets[net_id]['segmentationTypeId'],",1,0,0.0,628
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'network_name':,1,0,0.0,629
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"neutron_nets.get(net_id, {'name': ''})['name'],",1,0,0.0,630
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'shared':,1,0,0.0,631
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"neutron_nets.get(net_id,",1,0,0.0,632
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,{'shared': False})['shared']},1,0,0.0,633
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db.forget_tenant(tenant_id),1,0,0.0,634
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_network(tenant, net_id)",1,0,0.0,635
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,import sys,0,0,0.0,636
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,mechanism_arista.db_lib.assert_has_calls(expected_calls),0,0,0.0,637
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_id': network['id'],",0,0,0.0,638
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'segmentation_id': segments[0]['segmentation_id'],",0,0,0.0,639
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_name': network['name'],",0,0,0.0,640
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'shared': network['shared']},0,0,0.0,641
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.create_network_postcommit(network_context),0,0,0.0,642
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.is_network_provisioned(tenant_id, network_id),",0,0,0.0,643
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.create_network(tenant_id, net_dict),",0,0,0.0,644
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_network_precommit(self):,0,0,0.0,645
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_network_precommit(network_context),0,0,0.0,646
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.forget_network(tenant_id, network_id),",0,0,0.0,647
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.num_nets_provisioned(tenant_id),",0,0,0.0,648
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.num_vms_provisioned(tenant_id),",0,0,0.0,649
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.forget_tenant(tenant_id),",0,0,0.0,650
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_network_postcommit(self):,0,0,0.0,651
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_network_postcommit(network_context),0,0,0.0,652
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_network_postcommit(self):,0,0,0.0,653
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,],0,0,0.0,654
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'networking_arista': mock.Mock(),",0,0,0.0,655
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id),0,0,0.0,656
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'networking_arista.ml2': mock.Mock(),",0,0,0.0,657
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'networking_arista.common': mock.Mock()}):,0,0,0.0,658
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.plugins.ml2.drivers.arista import mechanism_arista,0,0,0.0,659
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class AristaDriverTestCase(testlib_api.SqlTestCase):,0,0,0.0,660
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(AristaDriverTestCase, self).setUp()",0,0,0.0,661
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def tearDown(self):,0,0,0.0,662
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(AristaDriverTestCase, self).tearDown()",0,0,0.0,663
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.stop_synchronization_thread(),0,0,0.0,664
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_network_precommit(self):,0,0,0.0,665
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id,",0,0,0.0,666
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"segmentation_id,",0,0,0.0,667
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,False),0,0,0.0,668
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.create_network_precommit(network_context),0,0,0.0,669
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.remember_tenant(tenant_id),",0,0,0.0,670
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"mock.call.remember_network(tenant_id,",0,0,0.0,671
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(expected, num_tenants_provisioned,",1,0,0.0,672
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,),1,0,0.0,673
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_num_vm_is_valid(self):,1,0,0.0,674
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(net_info, valid_net_info,",1,0,0.0,675
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.extend(self._get_exit_mode_cmds(['region', 'openstack',",1,0,0.0,676
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_get_network_info_returns_none_when_no_such_net(self):,1,0,0.0,677
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.get_tenants.assert_called_once_with(),1,0,0.0,678
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(net_info, expected, ('Network info must be ""None""'",1,0,0.0,679
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'for unknown network')),1,0,0.0,680
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_get_network_info_returns_info_for_available_net(self):,1,0,0.0,681
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'some_info': 'net info'},1,0,0.0,682
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_check_cli_commands(self):,1,0,0.0,683
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_vm(vm, host_id, port_id, network_id, tenant_id)",1,0,0.0,684
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.check_cli_commands(),1,0,0.0,685
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_register_with_eos(self):,1,0,0.0,686
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.register_with_eos(),1,0,0.0,687
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'auth url %(auth_url)s user %(user)s ',1,0,0.0,688
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'auth_url': utils.get_keystone_url(auth),",1,0,0.0,689
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'user': auth.admin_user,",1,0,0.0,690
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'password': auth.admin_password,",1,0,0.0,691
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for ten_id in range(1, num_tenants):",1,0,0.0,692
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'region RegionOne'],1,0,0.0,693
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_tenant_bulk(tenant_list),1,0,0.0,694
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_tenant_bulk(self):,1,0,0.0,695
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,") for vm_id in range(1, num_vms)",1,0,0.0,696
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for port_id in range(1, num_ports_per_vm):",1,0,0.0,697
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,vm_port_list.append(port),1,0,0.0,698
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.create_vm_port_bulk(tenant_id, vm_port_list, vms)",1,0,0.0,699
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenant ten-3'],1,0,0.0,700
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for vm_count in range(1, num_vms):",1,0,0.0,701
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for port_count in range(1, num_ports_per_vm):",1,0,0.0,702
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if device_owner == 'network:dhcp':,1,0,0.0,703
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_id, host, port_id, port_name))",1,0,0.0,704
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,elif device_owner == 'compute':,1,0,0.0,705
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_id, port_name, network_id))",1,0,0.0,706
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.extend(self._get_exit_mode_cmds(['tenant', 'region',",1,0,0.0,707
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'openstack', 'cvx']))",1,0,0.0,708
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_tenant(self):,1,0,0.0,709
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_tenant(tenant_id),1,0,0.0,710
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenant': auth.admin_tenant_name},1,0,0.0,711
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"auth_cmd,",1,0,0.0,712
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'exit',",1,0,0.0,713
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_and_delete_network(self):,1,0,0.0,714
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.create_network_precommit(network_context),1,0,0.0,715
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_network_precommit(network_context),1,0,0.0,716
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_and_delete_multiple_networks(self):,1,0,0.0,717
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"net_id,",1,0,0.0,718
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_and_delete_ports(self):,1,0,0.0,719
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for vm_id in vms:,1,0,0.0,720
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id,",1,0,0.0,721
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"vm_id,",1,0,0.0,722
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_context),1,0,0.0,723
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.create_port_precommit(port_context),1,0,0.0,724
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(expected_vms, provisioned_vms,",1,0,0.0,725
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'There should be %d ',1,0,0.0,726
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.delete_port_precommit(port_context),1,0,0.0,727
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_network_context(self, tenant_id, net_id, seg_id):",1,0,0.0,728
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# all tenats are updated before VMs are updated,1,0,0.0,729
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id),1,0,0.0,730
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.stop_synchronization_thread(),1,0,0.0,731
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class AristaRPCWrapperInvalidConfigTestCase(base.BaseTestCase):,1,0,0.0,732
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(RealNetStorageAristaDriverTestCase, self).tearDown()",1,0,0.0,733
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def setUp(self):,1,0,0.0,734
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(AristaRPCWrapperInvalidConfigTestCase, self).setUp()",1,0,0.0,735
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.setup_invalid_config()  # Invalid config, required options not set",1,0,0.0,736
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def setup_invalid_config(self):,1,0,0.0,737
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,setup_arista_wrapper_config(''),1,0,0.0,738
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_raises_exception_on_wrong_configuration(self):,1,0,0.0,739
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertRaises(arista_exc.AristaConfigError,",1,0,0.0,740
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,arista.AristaRPCWrapper),1,0,0.0,741
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class NegativeRPCWrapperTestCase(base.BaseTestCase):,1,0,0.0,742
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(NegativeRPCWrapperTestCase, self).setUp()",1,0,0.0,743
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_exception_is_raised_on_json_server_error(self):,1,0,0.0,744
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertRaises(arista_exc.AristaRpcError, drv.get_tenants)",1,0,0.0,745
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class RealNetStorageAristaDriverTestCase(testlib_api.SqlTestCase):,1,0,0.0,746
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(RealNetStorageAristaDriverTestCase, self).setUp()",1,0,0.0,747
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def tearDown(self):,1,0,0.0,748
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,},1,0,0.0,749
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_vm_port_bulk(self):,1,0,0.0,750
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for vm_id in range(1, num_vms):",1,0,0.0,751
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_exit_mode_cmds(self, modes):",1,0,0.0,752
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_no_exception_on_correct_configuration(self):,1,0,0.0,753
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.assertIsNotNone(self.drv),1,0,0.0,754
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_sync_start(self):,1,0,0.0,755
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.sync_start(),1,0,0.0,756
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'region RegionOne',",1,0,0.0,757
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'sync start',",1,0,0.0,758
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'exit', 'exit', 'exit']",1,0,0.0,759
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_sync_end(self):,1,0,0.0,760
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.drv.sync_end(),1,0,0.0,761
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'sync end',",1,0,0.0,762
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_plug_host_into_network(self):,1,0,0.0,763
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.plug_host_into_network(vm_id, host, port_id,",1,0,0.0,764
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id, port_name)",1,0,0.0,765
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'exit', 'exit', 'exit', 'exit', 'exit']",1,0,0.0,766
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_plug_dhcp_port_into_network(self):,1,0,0.0,767
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return ['exit'] * len(modes),1,0,0.0,768
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,setup_valid_config(),1,0,0.0,769
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'exit', 'exit', 'exit', 'exit']",1,0,0.0,770
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"super(PositiveRPCWrapperValidConfigTestCase, self).setUp()",1,0,0.0,771
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_vm(vm, host_id, port_id, network_id, tenant_id)",1,0,0.0,772
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.assertEqual(expected, num_vms,",1,0,0.0,773
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'There should be %d records, '",1,0,0.0,774
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# clean up afterwards,1,0,0.0,775
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.forget_vm('vm3', host_id, port_id, network_id, tenant_id)",1,0,0.0,776
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_get_network_list_returns_eos_compatible_data(self):,1,0,0.0,777
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"u'segmentationTypeId': vlan_id,",1,0,0.0,778
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"u'segmentationType': segm_type},",1,0,0.0,779
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network2_id: {u'networkId': network2_id,",1,0,0.0,780
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"u'segmentationTypeId': vlan2_id,",1,0,0.0,781
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,u'segmentationType': segm_type}},1,0,0.0,782
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_network(tenant, network_id, vlan_id)",1,0,0.0,783
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db.remember_network(tenant, network2_id, vlan2_id)",1,0,0.0,784
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(net_list, expected_eos_net_list)))",1,0,0.0,785
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class PositiveRPCWrapperValidConfigTestCase(base.BaseTestCase):,1,0,0.0,786
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.plug_dhcp_port_into_network(vm_id, host, port_id,",1,0,0.0,787
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_unplug_host_from_network(self):,1,0,0.0,788
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.delete_vm_bulk(tenant_id, vm_ids)",1,0,0.0,789
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'cvx',",1,0,0.0,790
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenant ten-2'],1,0,0.0,791
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for net_id in range(1, num_networks):",1,0,0.0,792
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(net_id, net_id))",1,0,0.0,793
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('shared'),1,0,0.0,794
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.extend(self._get_exit_mode_cmds(['tenant', 'region', 'openstack',",1,0,0.0,795
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_network(self):,1,0,0.0,796
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.delete_network(tenant_id, network_id)",1,0,0.0,797
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_network_bulk(self):,1,0,0.0,798
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'segmentation_id': net_id} for net_id in range(1, num_networks)",1,0,0.0,799
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,],1,0,0.0,800
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.delete_network_bulk(tenant_id, networks)",1,0,0.0,801
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'cvx', 'configure']))",1,0,0.0,802
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_vm(self):,1,0,0.0,803
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.delete_vm(tenant_id, vm_id)",1,0,0.0,804
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_delete_vm_bulk(self):,1,0,0.0,805
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'service openstack',",1,0,0.0,806
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.create_network_bulk(tenant_id, networks)",1,0,0.0,807
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.unplug_host_from_network(vm_id, host, port_id,",1,0,0.0,808
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'shared': True} for net_id in range(1, num_networks)",1,0,0.0,809
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_unplug_dhcp_port_from_network(self):,1,0,0.0,810
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.unplug_dhcp_port_from_network(vm_id, host, port_id,",1,0,0.0,811
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_network(self):,1,0,0.0,812
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_id': 'net-id',",1,0,0.0,813
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'network_name': 'net-name',",1,0,0.0,814
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'segmentation_id': 123,",1,0,0.0,815
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'shared': False},1,0,0.0,816
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.drv.create_network(tenant_id, network)",1,0,0.0,817
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'no shared',",1,0,0.0,818
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'exit', 'exit', 'exit', 'exit', 'exit', 'exit']",1,0,0.0,819
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_shared_network(self):,1,0,0.0,820
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'shared': True},1,0,0.0,821
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'shared',",1,0,0.0,822
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def test_create_network_bulk(self):,1,0,0.0,823
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'segmentation_id': net_id,",1,0,0.0,824
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if vms_to_delete:,1,0,0.0,825
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def get_segmentation_id(tenant_id, network_id):",1,0,0.0,826
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# In first loop, delete unwanted VM and networks and update networks",1,0,0.0,827
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if nets[0]['shared']:,1,0,0.0,828
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"return super(NeutronNets,",1,0,0.0,829
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self).get_networks(self.admin_ctx, filters=filters) or []",1,0,0.0,830
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def get_all_ports_for_tenant(self, tenant_id):",1,0,0.0,831
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self).get_ports(self.admin_ctx, filters=filters) or []",1,0,0.0,832
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def get_shared_network_owner_id(self, network_id):",1,0,0.0,833
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if not nets:,1,0,0.0,834
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return,1,0,0.0,835
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return nets[0]['tenant_id'],1,0,0.0,836
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port_name),1,0,0.0,837
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_network(self, tenant_id, network_id):",1,0,0.0,838
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'id': [network_id]},1,0,0.0,839
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from networking_arista.common import db_lib,0,0,0.0,840
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from networking_arista.ml2 import arista_ml2,0,0,0.0,841
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.i18n import _LI,0,0,0.0,842
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_lib.remember_tenant(tenant_id),0,0,0.0,843
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.remember_network(tenant_id,",0,0,0.0,844
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def get_all_networks_for_tenant(self, tenant_id):",1,0,0.0,845
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return network_name,1,0,0.0,846
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if network:,1,0,0.0,847
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def get_network_name(self, tenant_id, network_id):",1,0,0.0,848
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return res,1,0,0.0,849
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_vms(tenant_id):,1,0,0.0,850
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"model.host_id != none,",1,0,0.0,851
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"model.vm_id != none,",1,0,0.0,852
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"model.network_id != none,",1,0,0.0,853
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,model.port_id != none)),1,0,0.0,854
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(vm.vm_id, vm.eos_vm_representation())",1,0,0.0,855
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_ports(tenant_id):,1,0,0.0,856
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns all ports of VMs in EOS-compatible format.",1,0,0.0,857
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(port.port_id, port.eos_port_representation())",1,0,0.0,858
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_tenants():,1,0,0.0,859
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(tenant.tenant_id, tenant.eos_tenant_representation())",1,0,0.0,860
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class NeutronNets(db_base_plugin_v2.NeutronDbPluginV2):,1,0,0.0,861
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,They are pulled from Neutron DB.,1,0,0.0,862
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def __init__(self):,1,0,0.0,863
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"if db_lib.is_network_provisioned(tenant_id, network_id):",0,0,0.0,864
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.forget_network(tenant_id, network_id)",0,0,0.0,865
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.remember_vm(device_id, host, port_id,",0,0,0.0,866
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return ['exit'] * len(modes),1,0,0.0,867
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def check_cli_commands(self):,1,0,0.0,868
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,try:,1,0,0.0,869
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._run_eos_cmds(cmd),1,0,0.0,870
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,except arista_exc.AristaRpcError:,1,0,0.0,871
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmd),1,0,0.0,872
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_tenants(self):,1,0,0.0,873
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns dict of all tenants known by EOS.",1,0,0.0,874
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return tenants,1,0,0.0,875
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def plug_port_into_network(self, vm_id, host_id, port_id,",1,0,0.0,876
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"net_id, tenant_id, port_name, device_owner):",1,0,0.0,877
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if device_owner == n_const.DEVICE_OWNER_DHCP:,1,0,0.0,878
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.plug_dhcp_port_into_network(vm_id,",1,0,0.0,879
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"host_id,",1,0,0.0,880
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_id,",1,0,0.0,881
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"net_id,",1,0,0.0,882
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def initialize_cli_commands(self):,1,0,0.0,883
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _get_exit_mode_cmds(self, modes):",1,0,0.0,884
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.is_network_provisioned(tenant_id, network_id) or",0,0,0.0,885
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.initialize_cli_commands(),1,0,0.0,886
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.is_network_provisioned(tenant_id, network_id,",0,0,0.0,887
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id) or,0,0,0.0,888
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"if db_lib.is_vm_provisioned(device_id, host_id, port_id,",0,0,0.0,889
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id):",0,0,0.0,890
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.forget_vm(device_id, host_id, port_id,",0,0,0.0,891
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_lib.num_vms_provisioned(tenant_id)),0,0,0.0,892
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_lib.forget_tenant(tenant_id),0,0,0.0,893
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"db_lib.forget_network(tenant, net_id)",0,0,0.0,894
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,import itertools,1,0,0.0,895
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,import jsonrpclib,1,0,0.0,896
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.common import utils,1,0,0.0,897
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"from neutron.i18n import _LI, _LW",1,0,0.0,898
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class AristaRPCWrapper(object):,1,0,0.0,899
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""",1,0,0.0,900
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def __init__(self):,1,0,0.0,901
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,),1,0,0.0,902
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,VLAN_SEGMENTATION)),1,0,0.0,903
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(net.network_id, net.eos_network_representation(",1,0,0.0,904
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron import context as nctx,1,0,0.0,905
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,from neutron.db import db_base_plugin_v2,1,0,0.0,906
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def remember_tenant(tenant_id):,1,0,0.0,907
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""",1,0,0.0,908
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,with session.begin():,1,0,0.0,909
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def forget_tenant(tenant_id):,1,0,0.0,910
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,(session.query(AristaProvisionedTenants).,1,0,0.0,911
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,filter_by(tenant_id=tenant_id).,1,0,0.0,912
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,delete()),1,0,0.0,913
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_all_tenants():,1,0,0.0,914
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return session.query(AristaProvisionedTenants).all(),1,0,0.0,915
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def num_provisioned_tenants():,1,0,0.0,916
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns number of tenants stored in repository.""""""",1,0,0.0,917
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return session.query(AristaProvisionedTenants).count(),1,0,0.0,918
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def remember_vm(vm_id, host_id, port_id, network_id, tenant_id):",1,0,0.0,919
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Stores all relevant information about a VM in repository.",1,0,0.0,920
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,import neutron.db.api as db,1,0,0.0,921
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(msg),1,0,0.0,922
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def forget_vm(vm_id, host_id, port_id, network_id, tenant_id):",1,0,0.0,923
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_('Syncing Neutron <-> EOS')),1,0,0.0,924
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"from neutron.openstack.common.gettextutils import _LI, _LW",0,0,0.0,925
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmd),0,0,0.0,926
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'vmid': port['device_id'], 'portid': port['id']})",0,0,0.0,927
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.warn(_LW(""Unknown device owner: %s""), port['device_owner'])",0,0,0.0,928
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('Syncing Neutron <-> EOS')),0,0,0.0,929
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,len(eos_tenants)),0,0,0.0,930
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('Network %s is not created as it is not found in ',0,0,0.0,931
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'Arista DB'), network_id)",0,0,0.0,932
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('Network %s is not updated as it is not found',0,0,0.0,933
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('VM %s is not created as it is not found in ',0,0,0.0,934
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'Arista DB'), device_id)",0,0,0.0,935
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('VM %s is not updated as it is not found in ',0,0,0.0,936
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.warn(msg),1,0,0.0,937
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'vmid': port['device_id'],",1,0,0.0,938
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'portid': port['id']},1,0,0.0,939
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"port_id=port_id,",1,0,0.0,940
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Removes all relevant information about a VM from repository.",1,0,0.0,941
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,model.segmentation_id != none)),1,0,0.0,942
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id=network_id).count()),1,0,0.0,943
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id=seg_id).count()),1,0,0.0,944
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return num_nets > 0,1,0,0.0,945
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def is_tenant_provisioned(tenant_id):,1,0,0.0,946
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,filter_by(tenant_id=tenant_id).count()),1,0,0.0,947
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return num_tenants > 0,1,0,0.0,948
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def num_nets_provisioned(tenant_id):,1,0,0.0,949
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns number of networks for a given tennat.",1,0,0.0,950
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return (session.query(AristaProvisionedNets).,1,0,0.0,951
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def num_vms_provisioned(tenant_id):,1,0,0.0,952
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns number of VMs for a given tennat.",1,0,0.0,953
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return (session.query(AristaProvisionedVms).,1,0,0.0,954
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_networks(tenant_id):,1,0,0.0,955
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,See AristaRPCWrapper.get_network_list() for return value format.,1,0,0.0,956
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# 'if cond is not None',1,0,0.0,957
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"filter(model.tenant_id == tenant_id,",1,0,0.0,958
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,else:,1,0,0.0,959
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if not seg_id:,1,0,0.0,960
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,(session.query(AristaProvisionedVms).,1,0,0.0,961
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def is_network_provisioned(tenant_id, network_id, seg_id=None):",1,0,0.0,962
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id=network_id).delete()),1,0,0.0,963
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def remember_network(tenant_id, network_id, segmentation_id):",1,0,0.0,964
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Stores all relevant information about a Network in repository.",1,0,0.0,965
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def forget_network(tenant_id, network_id):",1,0,0.0,966
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Deletes all relevant information about a Network from repository.",1,0,0.0,967
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,(session.query(AristaProvisionedNets).,1,0,0.0,968
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"filter_by(tenant_id=tenant_id, network_id=network_id).",1,0,0.0,969
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Returns Segmentation ID (VLAN) associated with a network.",1,0,0.0,970
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"filter_by(tenant_id=tenant_id,",1,0,0.0,971
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network_id=network_id).first()),1,0,0.0,972
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def is_vm_provisioned(vm_id, host_id, port_id,",1,0,0.0,973
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id):",1,0,0.0,974
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,":returns: True, if yes; False otherwise.",1,0,0.0,975
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,host_id=host_id).count()),1,0,0.0,976
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return num_vm > 0,1,0,0.0,977
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"tenant_id,",1,0,0.0,978
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,elif device_owner.startswith('compute'):,1,0,0.0,979
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._rpc.delete_tenant_bulk(tenants_to_delete),1,0,0.0,980
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'host': host}),1,0,0.0,981
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return None,1,0,0.0,982
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _run_eos_cmds(self, commands, commands_to_log=None):",1,0,0.0,983
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if commands_to_log:,1,0,0.0,984
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,except Exception as error:,1,0,0.0,985
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"for cmd, log_cmd in itertools.izip(commands, log_cmds):",1,0,0.0,986
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'err': error_msg_str,",1,0,0.0,987
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'cmd': commands_to_log,",1,0,0.0,988
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.error(msg),1,0,0.0,989
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.plug_host_into_network(vm_id,",1,0,0.0,990
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,raise arista_exc.AristaRpcError(msg=msg),1,0,0.0,991
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return ret,1,0,0.0,992
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _build_command(self, cmds):",1,0,0.0,993
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Build full EOS's openstack CLI command.",1,0,0.0,994
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,CLI modes.,1,0,0.0,995
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'enable',",1,0,0.0,996
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,],1,0,0.0,997
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return self._run_eos_cmds(commands=timestamp_cmd)[0],1,0,0.0,998
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if timestamp_cmd:,1,0,0.0,999
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,were updated.,1,0,0.0,1000
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def get_region_updated_time(self):,1,0,0.0,1001
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# from configuration file and should instead rely on service,1,0,0.0,1002
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# catalog contents,1,0,0.0,1003
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'auth_url': auth_uri,",1,0,0.0,1004
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'user': keystone_conf.admin_user,",1,0,0.0,1005
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'password': keystone_conf.admin_password,",1,0,0.0,1006
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenant': keystone_conf.admin_tenant_name}],1,0,0.0,1007
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'password': '******',",1,0,0.0,1008
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append(sync_interval_cmd),1,0,0.0,1009
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,log_cmds.append(sync_interval_cmd),1,0,0.0,1010
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self._run_openstack_cmds(cmds, commands_to_log=log_cmds)",1,0,0.0,1011
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def clear_region_updated_time(self):,1,0,0.0,1012
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def region_in_sync(self):,1,0,0.0,1013
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return (self._region_updated_time and,1,0,0.0,1014
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,(self._region_updated_time['regionTimestamp'] ==,1,0,0.0,1015
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,eos_region_updated_times['regionTimestamp'])),1,0,0.0,1016
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,full_command.extend(cmds),1,0,0.0,1017
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"full_command.extend(self._get_exit_mode_cmds(['region',",1,0,0.0,1018
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'openstack',",1,0,0.0,1019
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def do_synchronize(self):,1,0,0.0,1020
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.warning(EOS_UNREACHABLE_MSG),1,0,0.0,1021
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return,1,0,0.0,1022
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.synchronize(),1,0,0.0,1023
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._rpc.sync_end(),1,0,0.0,1024
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def synchronize(self):,1,0,0.0,1025
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,LOG.info(_LI('Syncing Neutron <-> EOS')),1,0,0.0,1026
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# perform a complete sync.,1,0,0.0,1027
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if not self._force_sync and self._rpc.region_in_sync():,1,0,0.0,1028
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._rpc.register_with_eos(),1,0,0.0,1029
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if not db_tenants and eos_tenants:,1,0,0.0,1030
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._rpc.delete_this_region(),1,0,0.0,1031
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,len(eos_tenants)),1,0,0.0,1032
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# synchronize,1,0,0.0,1033
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,db_tenants.keys()),1,0,0.0,1034
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if tenants_to_delete:,1,0,0.0,1035
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._rpc.sync_start(),1,0,0.0,1036
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def __init__(self, rpc_wrapper, neutron_db):",1,0,0.0,1037
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'cvx'])),1,0,0.0,1038
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,ensures that Networks and VMs configured on EOS/Arista HW,1,0,0.0,1039
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,full_command.extend(self.cli_commands['timestamp']),1,0,0.0,1040
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return full_command,1,0,0.0,1041
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def _run_openstack_cmds(self, commands, commands_to_log=None):",1,0,0.0,1042
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"# Remove return values for 'configure terminal',",1,0,0.0,1043
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if self.cli_commands['timestamp']:,1,0,0.0,1044
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def _eapi_host_url(self):,1,0,0.0,1045
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._validate_config(),1,0,0.0,1046
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(user, pwd, host))",1,0,0.0,1047
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,return eapi_server_url,1,0,0.0,1048
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def _validate_config(self):,1,0,0.0,1049
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if cfg.CONF.ml2_arista.get('eapi_host') == '':,1,0,0.0,1050
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,raise arista_exc.AristaConfigError(msg=msg),1,0,0.0,1051
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if cfg.CONF.ml2_arista.get('eapi_username') == '':,1,0,0.0,1052
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,class SyncService(object):,1,0,0.0,1053
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"Periodically (through configuration option), this service",1,0,0.0,1054
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,# FIXME(ihrachys): plugins should not construct keystone URL,1,0,0.0,1055
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,critical end-point information is registered with EOS.,1,0,0.0,1056
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def register_with_eos(self):,1,0,0.0,1057
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'exit'],1,0,0.0,1058
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Removes previously configured VLAN between TOR and a dhcp host.",1,0,0.0,1059
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def sync_start(self):,1,0,0.0,1060
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._run_openstack_cmds(sync_start_cmd),1,0,0.0,1061
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def sync_end(self):,1,0,0.0,1062
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._run_openstack_cmds(sync_end_cmd),1,0,0.0,1063
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def create_network(self, tenant_id, network):",1,0,0.0,1064
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,segmentation_id,1,0,0.0,1065
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.create_network_bulk(tenant_id, [network])",1,0,0.0,1066
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def create_network_bulk(self, tenant_id, network_list):",1,0,0.0,1067
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,and segmentation_id,1,0,0.0,1068
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(network['network_id'], network['network_name']))",1,0,0.0,1069
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,except KeyError:,1,0,0.0,1070
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if not network['segmentation_id']:,1,0,0.0,1071
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,network['segmentation_id']),1,0,0.0,1072
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if network['shared']:,1,0,0.0,1073
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def unplug_dhcp_port_from_network(self, dhcp_id, host, port_id,",1,0,0.0,1074
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'exit',",1,0,0.0,1075
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('no shared'),1,0,0.0,1076
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Removes previously configured VLAN between TOR and a host.",1,0,0.0,1077
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def plug_host_into_network(self, vm_id, host, port_id,",1,0,0.0,1078
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id, port_name):",1,0,0.0,1079
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Creates VLAN between TOR and compute host.",1,0,0.0,1080
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if port_name:,1,0,0.0,1081
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(port_id, port_name, network_id))",1,0,0.0,1082
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,else:,1,0,0.0,1083
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(port_id, network_id))",1,0,0.0,1084
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('exit'),1,0,0.0,1085
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._run_openstack_cmds(cmds),1,0,0.0,1086
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def plug_dhcp_port_into_network(self, dhcp_id, host, port_id,",1,0,0.0,1087
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"""""""Creates VLAN between TOR and dhcp host.",1,0,0.0,1088
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(dhcp_id, host, port_id, port_name))",1,0,0.0,1089
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(dhcp_id, host, port_id))",1,0,0.0,1090
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def unplug_host_from_network(self, vm_id, host, port_id,",1,0,0.0,1091
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_id, tenant_id):",1,0,0.0,1092
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('shared'),1,0,0.0,1093
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.extend(self._get_exit_mode_cmds(['segment', 'network', 'tenant']))",1,0,0.0,1094
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self._run_eos_cmds(cmds),1,0,0.0,1095
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def create_vm_port_bulk(self, tenant_id, vm_port_list, vms):",1,0,0.0,1096
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,continue,1,0,0.0,1097
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,port['name'],1,0,0.0,1098
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,),1,0,0.0,1099
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if port['device_owner'] == n_const.DEVICE_OWNER_DHCP:,1,0,0.0,1100
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(vm['vmId'], vm['host'], port['id'], port_name))",1,0,0.0,1101
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,elif port['device_owner'].startswith('compute'):,1,0,0.0,1102
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"(port['id'], port_name, port['network_id']))",1,0,0.0,1103
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"LOG.warn(_LW(""Unknown device owner: %s""), port['device_owner'])",1,0,0.0,1104
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,append_cmd('exit'),1,0,0.0,1105
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def delete_tenant(self, tenant_id):",1,0,0.0,1106
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,self.delete_tenant_bulk([tenant_id]),1,0,0.0,1107
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def delete_tenant_bulk(self, tenant_list):",1,0,0.0,1108
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,def delete_this_region(self):,1,0,0.0,1109
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'cvx',",1,0,0.0,1110
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"'service openstack',",1,0,0.0,1111
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"{'vmid': port['device_id'], 'portid': port['id']})",1,0,0.0,1112
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.extend(self._get_exit_mode_cmds(['vm', 'tenant']))",1,0,0.0,1113
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def create_network_segments(self, tenant_id, network_id,",1,0,0.0,1114
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for vm_id in vm_id_list:,1,0,0.0,1115
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"network_name, segments):",1,0,0.0,1116
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,multiple segments is added in Neutron.,1,0,0.0,1117
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,if segments:,1,0,0.0,1118
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for seg in segments:,1,0,0.0,1119
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"seg['network_type'], seg['segmentation_id']))",1,0,0.0,1120
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,cmds.append('exit')  # exit for segment mode,1,0,0.0,1121
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def delete_network(self, tenant_id, network_id):",1,0,0.0,1122
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.delete_network_bulk(tenant_id, [network_id])",1,0,0.0,1123
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def delete_network_bulk(self, tenant_id, network_id_list):",1,0,0.0,1124
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,identifiers,1,0,0.0,1125
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,for network_id in network_id_list:,1,0,0.0,1126
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"cmds.extend(self._get_exit_mode_cmds(['network', 'tenant']))",1,0,0.0,1127
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def delete_vm(self, tenant_id, vm_id):",1,0,0.0,1128
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"self.delete_vm_bulk(tenant_id, [vm_id])",1,0,0.0,1129
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,"def delete_vm_bulk(self, tenant_id, vm_id_list):",1,0,0.0,1130
854bc0973b8966a1bb3180e4a2ea5e7cbd8289f1,'tenant_id': tenant_id},1,0,0.0,1131
