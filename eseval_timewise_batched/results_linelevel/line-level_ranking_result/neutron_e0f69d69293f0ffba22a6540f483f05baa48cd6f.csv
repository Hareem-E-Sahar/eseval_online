commit_id,line,line_level_label,count,line_score,row
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Add profiles in database if new profiles were created in VSM,1,8,1.0,1
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Delete profiles from database if profiles were deleted in VSM,1,7,0.875,2
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve all the policy profiles from the VSM when the plugin,1,6,0.75,3
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Delete and return the network profile if it is not in use.,1,5,0.625,4
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Update network profile if name is updated and the network profile,1,5,0.625,5
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve all policy profiles if tenant is admin. For a non-admin,1,5,0.625,6
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Fetch policy profiles from VSM,1,5,0.625,7
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Set the default policy profile id for ports if no id is set,1,5,0.625,8
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# client interacts with the VSM via HTTP. Since we don't have a VSM,1,5,0.625,9
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Fetch policy profiles previously populated,1,4,0.5,10
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"xml = [""""""<?xml version=""1.0"" encoding=""utf-8""?>",1,4,0.5,11
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Extract policy profile for VM network create in VSM.,1,4,0.5,12
e0f69d69293f0ffba22a6540f483f05baa48cd6f,and router interface. Default policy profile name is configured in the,1,4,0.5,13
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Update database if the profile sets differ.,1,4,0.5,14
e0f69d69293f0ffba22a6540f483f05baa48cd6f,This will find all Profile ID where tenant is not set yet - set A,1,4,0.5,15
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Remove all policy profiles associated with fake tenant id.,1,4,0.5,16
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve all network profiles if tenant is admin. For a non-admin,1,4,0.5,17
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Update segment range if network profile is not in use.,1,4,0.5,18
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session = db_session or db.get_session(),1,4,0.5,19
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test port create with policy profile id.""""""",1,3,0.375,20
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if 'vm-network' in action and 'port' not in action:,1,3,0.375,21
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Generate policy profile response and return a dictionary.,1,3,0.375,22
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Generate policy profile response in XML format.,1,3,0.375,23
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    not use this file except in compliance with the License. You may obtain,1,3,0.375,24
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param name: string representing the name of the policy profile to,1,3,0.375,25
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session = db.get_session(),1,3,0.375,26
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Update the RESOURCE_ATTRIBUTE_MAP with n1kv specific extended attrs.,1,3,0.375,27
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test rollback of profile binding if network profile create fails.""""""",1,3,0.375,28
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# network profile binding with creator tenant should always exist,1,3,0.375,29
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pp = n1kv_db_v2.get_policy_profile(,1,3,0.375,30
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Test getting policy profiles using the restricted behavior.,1,3,0.375,31
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Port update should fail to update policy profile id.,1,3,0.375,32
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Patch the Client class with the TestClient class,1,3,0.375,33
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Return 3 policy profiles,1,3,0.375,34
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Verify that DB contains only 3 policy profiles,1,3,0.375,35
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Return 2 policy profiles,1,3,0.375,36
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Verify that the third policy profile is deleted,1,3,0.375,37
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Test unrestricted policy profile retrieval.,1,3,0.375,38
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Test getting policy profiles using the normal unrestricted,1,3,0.375,39
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Test restricted policy profile retrieval.,1,3,0.375,40
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# if needed, check to see if this is a port owned by",1,3,0.375,41
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Test with network auto-scheduling disabled,1,3,0.375,42
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    not use this file except in compliance with the License. You may obtain,1,3,0.375,43
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile = n1kv_db_v2.get_policy_profile(,1,3,0.375,44
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if ('device_id' in port['port'] and port['port']['device_owner'] in,1,3,0.375,45
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy profile object. Values in this dictiontary are,1,3,0.375,46
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Set the network policy profile id for auto generated L3/DHCP ports,1,3,0.375,47
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    not use this file except in compliance with the License. You may obtain,1,3,0.375,48
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a vm_network based on policy profile and network id.,1,3,0.375,49
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy profile. All ports having the same policy profile,1,3,0.375,50
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"If profile type is None, return profile-tenant binding for all",1,3,0.375,51
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Default tenant-ids are populated in profile bindings when plugin is,1,3,0.375,52
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Check whether the network profile is in use.,1,3,0.375,53
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Return network profile if it is successfully updated.,1,3,0.375,54
e0f69d69293f0ffba22a6540f483f05baa48cd6f,name = profile.name,1,3,0.375,55
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a policy profile for the given UUID.,1,3,0.375,56
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant, retrieve all policy profiles belonging to this tenant only.",1,3,0.375,57
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session = db.get_session(),1,3,0.375,58
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from the VSM. Hence we associate the policy profiles with fake,1,3,0.375,59
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of profile bindings for policy profiles.,1,3,0.375,60
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve policy profile based on name.,1,3,0.375,61
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param name: string representing the name for the policy profile,1,3,0.375,62
e0f69d69293f0ffba22a6540f483f05baa48cd6f,and profiles where tenant was already set - set B,1,3,0.375,63
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    not use this file except in compliance with the License. You may obtain,1,3,0.375,64
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Consume from all consumers in threads,1,3,0.375,65
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Poll VSM for create/delete of policy profile.,1,3,0.375,66
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Populate all the policy profiles from VSM.,1,3,0.375,67
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment1 in segment or segment2 in segment:,1,3,0.375,68
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: list of all policy profiles,1,3,0.375,69
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete encapsulation profile if network is of type OVERLAY Trunk.,1,2,0.25,70
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_name = (network['id'] +,1,2,0.25,71
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile = self.get_network_profile(,1,2,0.25,72
e0f69d69293f0ffba22a6540f483f05baa48cd6f,name = network['id'] + c_const.BRIDGE_DOMAIN_SUFFIX,1,2,0.25,73
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Unless required by applicable law or agreed to in writing, software",1,2,0.25,74
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile = n1kv_db_v2.get_network_profile(,1,2,0.25,75
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session = context.session,1,2,0.25,76
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = self.get_network_profile(context,",1,2,0.25,77
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id = attrs.get(n1kv.PROFILE_ID),1,2,0.25,78
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Validates whether policy profile exists.""""""",1,2,0.25,79
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a VM network for a network and policy profile combination.,1,2,0.25,80
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id = port['port'].get(n1kv.PROFILE_ID),1,2,0.25,81
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id = self._process_network_profile(context, network['network'])",1,2,0.25,82
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return [self._fields(net, fields) for net in nets]",1,2,0.25,83
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a port. Use a default policy profile for ports created for dhcp,1,2,0.25,84
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if n1kv.PROFILE_ID in port['port']:,1,2,0.25,85
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id_set = True,1,2,0.25,86
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id = self._process_policy_profile(context,",1,2,0.25,87
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Create a VM Network if no VM network exists.,1,2,0.25,88
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return [self._fields(port, fields) for port in ports]",1,2,0.25,89
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return [self._fields(subnet, fields) for subnet in subnets]",1,2,0.25,90
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['n1kv:profile_id'] = profile_id,1,2,0.25,91
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return profile_id,1,2,0.25,92
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for pid in vsm_profiles_set - plugin_profiles_set:,1,2,0.25,93
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id = net_p['id'],1,2,0.25,94
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_name = c_conf.CISCO_N1K.default_network_profile,1,2,0.25,95
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if 'virtual-port-profile' in action:,1,2,0.25,96
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# This attribute specifies whether the plugin supports or not,1,2,0.25,97
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# TODO(rkukura): Replace with new VIF security details,1,2,0.25,98
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy profile updates.,1,2,0.25,99
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.agent_vsm = True,1,2,0.25,100
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Start a green thread to pull policy profiles from VSM.""""""",1,2,0.25,101
e0f69d69293f0ffba22a6540f483f05baa48cd6f,The tenant id is not available when the policy profiles are polled,1,2,0.25,102
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for profile_name in policy_profiles:,1,2,0.25,103
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id = (policy_profiles,1,2,0.25,104
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vsm_profiles[profile_id] = profile_name,1,2,0.25,105
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for profile in n1kv_db_v2.get_policy_profiles():,1,2,0.25,106
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for pid in plugin_profiles_set - vsm_profiles_set:,1,2,0.25,107
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.warning(_LW('No policy profile populated from VSM')),1,2,0.25,108
e0f69d69293f0ffba22a6540f483f05baa48cd6f,session = context.session,1,2,0.25,109
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if encap_profile in encap_dict:,1,2,0.25,110
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for profile in encap_dict:,1,2,0.25,111
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Get the list of segments in encapsulation profile format.,1,2,0.25,112
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: List of segment UUIDs in set pairs,1,2,0.25,113
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if (binding1.network_type not in valid_seg_types or,1,2,0.25,114
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: List of segment UUIDs and dot1qtag (for vxlan) in set pairs,1,2,0.25,115
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id = network.get(n1kv.PROFILE_ID),1,2,0.25,116
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VSMError(reason='VSM:Internal Server Error'),1,2,0.25,117
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Verify VMNetwork is cleaned up from the database on port delete.,1,2,0.25,118
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.inject_params = True,1,2,0.25,119
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.broken = True,1,2,0.25,120
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = n1kv_db_v2.get_network_profile(sess1, net_p['id'],",1,2,0.25,121
e0f69d69293f0ffba22a6540f483f05baa48cd6f,sess2 = db.get_session(),1,2,0.25,122
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = n1kv_db_v2.get_network_profile(sess2, net_p['id'],",1,2,0.25,123
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#network profile will be returned even though the profile is,1,2,0.25,124
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if self._testMethodName in self._unsupported:,1,2,0.25,125
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test port create without passing policy profile id.""""""",1,2,0.25,126
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test port update failure while updating policy profile id.""""""",1,2,0.25,127
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile_id: UUID representing the policy profile,1,2,0.25,128
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Setup function for policy profile tests.,1,2,0.25,129
e0f69d69293f0ffba22a6540f483f05baa48cd6f,We need to use the policy profile extension manager for these,1,2,0.25,130
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy profile extension manager.,1,2,0.25,131
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Patch the _get_total_profiles() method to return a custom value,1,2,0.25,132
e0f69d69293f0ffba22a6540f483f05baa48cd6f,plugin = manager.NeutronManager.get_plugin(),1,2,0.25,133
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Get the profiles,1,2,0.25,134
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profiles = sorted(res[resource], key=utils.safe_sort_key)",1,2,0.25,135
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles = self._init_get_policy_profiles(),1,2,0.25,136
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile = instance._get_policy_profile_by_name('pp-1'),1,2,0.25,137
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test network create with network profile id.""""""",1,2,0.25,138
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Network update should fail to update network profile id.,1,2,0.25,139
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Subnet creation should fail due to invalid network name,1,2,0.25,140
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Check fixed IP not in allocation range,1,2,0.25,141
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#network profile binding with creator tenant should always exist,1,2,0.25,142
e0f69d69293f0ffba22a6540f483f05baa48cd6f,sess1 = db.get_session(),1,2,0.25,143
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Add new tenant4 to network profile and make sure existing tenants,1,2,0.25,144
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = {'id': uuid,",1,2,0.25,145
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles = {},1,2,0.25,146
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"name = ""pp-%s"" % num",1,2,0.25,147
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id = ""00000000-0000-0000-0000-00000000000%s"" % num",1,2,0.25,148
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return profiles,1,2,0.25,149
e0f69d69293f0ffba22a6540f483f05baa48cd6f,template = (,1,2,0.25,150
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Unless required by applicable law or agreed to in writing, software",1,2,0.25,151
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.agent_vsm = True,1,2,0.25,152
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a policy profile record for testing purpose.,1,2,0.25,153
e0f69d69293f0ffba22a6540f483f05baa48cd6f,default name specified in config.py file.,1,2,0.25,154
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param name: string representing the name of the network profile to,1,2,0.25,155
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Create some of the database entries that we require.,1,2,0.25,156
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = {'name': name,",1,2,0.25,157
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Setup method for n1kv plugin tests.,1,2,0.25,158
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# running in the unit tests, we need to 'fake' it by patching the HTTP",1,2,0.25,159
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# library itself. We install a patch for a fake HTTP connection class.,1,2,0.25,160
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Now define the return values for a few functions that may be called,1,2,0.25,161
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Patch some internal functions in a few other parts of the system.,1,2,0.25,162
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# in the background.,1,2,0.25,163
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Return a dummy VSM IP address,1,2,0.25,164
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Return dummy user profiles,1,2,0.25,165
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Unless required by applicable law or agreed to in writing, software",1,2,0.25,166
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile: object of type policy profile,1,2,0.25,167
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy profile,1,2,0.25,168
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile_id: UUID representing a policy profile,1,2,0.25,169
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = get_network_profile(db_session, id, tenant_id)",1,2,0.25,170
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return profile,1,2,0.25,171
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve all network profiles.,1,2,0.25,172
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Retrieve all policy profiles.""""""",1,2,0.25,173
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Create Network/Policy Profile association with a tenant.""""""",1,2,0.25,174
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if profile_type not in [""network"", ""policy""]:",1,2,0.25,175
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"raise n_exc.NeutronException(_(""Invalid profile type""))",1,2,0.25,176
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if profile_type not in (""network"", ""policy""):",1,2,0.25,177
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of profile bindings.,1,2,0.25,178
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Get all profile-tenant bindings based on profile type.,1,2,0.25,179
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Get all profile-tenant bindings based on profile UUID.,1,2,0.25,180
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session = context.session,1,2,0.25,181
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_network_collection_for_tenant(self, db_session, model, tenant_id):",1,2,0.25,182
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pid[0] for pid in net_profile_ids))),1,2,0.25,183
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return [self._make_network_profile_dict(p) for p in network_profiles],1,2,0.25,184
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _segment_in_use(self, db_session, network_profile):",1,2,0.25,185
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of profile bindings for network profiles.,1,2,0.25,186
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile bindings object. Values in this dictiontary are,1,2,0.25,187
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params fields: a list of strings that are valid keys in a profile,1,2,0.25,188
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Flag to check whether network profile is updated or not.,1,2,0.25,189
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Update network profile to tenant id binding.,1,2,0.25,190
e0f69d69293f0ffba22a6540f483f05baa48cd6f,name = (c_const.VM_NETWORK_NAME_PREFIX + policy_profile_id +,1,2,0.25,191
e0f69d69293f0ffba22a6540f483f05baa48cd6f,name = (c_const.VM_NETWORK_NAME_PREFIX + policy_profile_id,1,2,0.25,192
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is_updated = True,1,2,0.25,193
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile_id: UUID representing policy profile,1,2,0.25,194
e0f69d69293f0ffba22a6540f483f05baa48cd6f,get_vsm_hosts_patcher = patch(n1kv_client.__name__ +,1,2,0.25,195
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add Policy profile and tenant binding.,1,2,0.25,196
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"client_patch = patch(n1kv_client.__name__ + "".Client"",",1,2,0.25,197
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"with patch(n1kv_client.__name__ + "".Client"",",1,2,0.25,198
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Unless required by applicable law or agreed to in writing, software",1,2,0.25,199
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param db_session: database session,1,2,0.25,200
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with db_session.begin(subtransactions=True):,1,2,0.25,201
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add the encapsulation profile name to the multi-segment network binding.,1,2,0.25,202
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding.encap_profile_name = profile_name,1,2,0.25,203
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve all the member segments of a multi-segment network.,1,2,0.25,204
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return [(a.segment1_id, a.segment2_id) for a in allocs]",1,2,0.25,205
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve the encapsulation profiles for every segment pairs bridged.,1,2,0.25,206
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if alloc.encap_profile_name not in encap_dict:,1,2,0.25,207
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve all the member segments of a trunk network.,1,2,0.25,208
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return [(a.segment_id, a.dot1qtag) for a in allocs]",1,2,0.25,209
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# Sort the range to ensure min, max is in order",1,2,0.25,210
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Bind the port with policy profile.,1,2,0.25,211
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile_id: UUID of the policy profile,1,2,0.25,212
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params db_session: database session,1,2,0.25,213
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Sync the network profile range with the vlan_allocations table for each,1,2,0.25,214
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc.allocated = True,1,2,0.25,215
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if context.is_admin and c_const.ADD_TENANTS in p:,1,2,0.25,216
e0f69d69293f0ffba22a6540f483f05baa48cd6f,associated with every VXLAN ID to deal with broadcast,1,2,0.25,217
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if context.is_admin and c_const.REMOVE_TENANTS in p:,1,2,0.25,218
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param name: string representing the name for the network profile,1,2,0.25,219
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles = db_session.query(model).filter(model.id.in_(,1,2,0.25,220
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pid[0] for pid in profile_ids)),1,2,0.25,221
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return [self._make_policy_profile_dict(p) for p in profiles],1,2,0.25,222
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing policy profile to fetch,1,2,0.25,223
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params fields: a list of strings that are valid keys in a policy,1,2,0.25,224
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: policy profile dictionary,1,2,0.25,225
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = get_policy_profile(context.session, id)",1,2,0.25,226
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of policy profiles.,1,2,0.25,227
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add/remove policy profile to tenant-id binding for the corresponding,1,2,0.25,228
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing policy profile to update,1,2,0.25,229
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile: policy profile dictionary,1,2,0.25,230
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: updated policy profile dictionary,1,2,0.25,231
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if context.is_admin and ""remove_tenant"" in p:",1,2,0.25,232
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add a tenant to a policy profile binding.,1,2,0.25,233
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Remove a tenant to a policy profile binding.,1,2,0.25,234
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Delete policy profile and associated binding.""""""",1,2,0.25,235
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: policy profile object,1,2,0.25,236
e0f69d69293f0ffba22a6540f483f05baa48cd6f,and remove what is in both and no tenant id set,1,2,0.25,237
e0f69d69293f0ffba22a6540f483f05baa48cd6f,b_set = set(i.profile_id for i in b_set_q),1,2,0.25,238
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if original_net_p.segment_type in [c_const.NETWORK_TYPE_VLAN,",1,2,0.25,239
e0f69d69293f0ffba22a6540f483f05baa48cd6f,a_set = set(i.profile_id for i in a_set_q),1,2,0.25,240
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_policy_collection_for_tenant(self, db_session, model, tenant_id):",1,2,0.25,241
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if context.is_admin and ""add_tenant"" in p:",1,2,0.25,242
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve network profile based on name.,1,2,0.25,243
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if ""physical_network"" not in net_p:",1,2,0.25,244
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile = get_network_profile(context.session, id, context.tenant_id)",1,2,0.25,245
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of all network profiles.,1,2,0.25,246
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if ""name"" in p and not is_updated:",1,2,0.25,247
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_network_profile_by_name(self, db_session, name):",1,2,0.25,248
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant, retrieve all network profiles belonging to this tenant only.",1,2,0.25,249
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network profile object. Values in this dictiontary are,1,2,0.25,250
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: true if network profile exist else False,1,2,0.25,251
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return True,1,2,0.25,252
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return (int(seg) for seg in data.split(""-"")[:2])",1,2,0.25,253
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if segment_type not in [c_const.NETWORK_TYPE_VLAN,",1,2,0.25,254
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: list of all network profiles,1,2,0.25,255
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for profile in profiles:,1,2,0.25,256
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if segment_type in [c_const.NETWORK_TYPE_VLAN,",1,2,0.25,257
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if ""segment_range"" not in net_p:",1,2,0.25,258
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles = _get_network_profiles(,1,2,0.25,259
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles = _get_network_profiles(db_session=context.session),1,2,0.25,260
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Segment range overlaps with another profile"")",1,2,0.25,261
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if segment_type in [c_const.NETWORK_TYPE_TRUNK,",1,2,0.25,262
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if (c_const.NETWORK_TYPE_MULTI_SEGMENT in,1,2,0.25,263
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = (_(""NetworkProfile name %s already exists"") %",1,2,0.25,264
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port = super(N1kvNeutronPluginV2, self).get_port(context, id, None)",1,1,0.125,265
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sub = super(N1kvNeutronPluginV2, self).update_subnet(context,",1,1,0.125,266
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_subnet(self, context, id, subnet):",1,1,0.125,267
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return sub,1,1,0.125,268
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sub = super(N1kvNeutronPluginV2, self).create_subnet(context, subnet)",1,1,0.125,269
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_subnet(self, context, subnet):",1,1,0.125,270
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params fields: a list of strings that are valid keys in a port,1,1,0.125,271
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for port in ports:,1,1,0.125,272
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ports = super(N1kvNeutronPluginV2, self).get_ports(context, filters,",1,1,0.125,273
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port object. Values in this dictiontary are an,1,1,0.125,274
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of ports.,1,1,0.125,275
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_ports(self, context, filters=None, fields=None):",1,1,0.125,276
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnet = self.get_subnet(context, id)",1,1,0.125,277
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param fields: a list of strings that are valid keys in a port,1,1,0.125,278
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._fields(port, fields)",1,1,0.125,279
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_subnet(self, context, id):",1,1,0.125,280
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of subnets.,1,1,0.125,281
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return super(N1kvNeutronPluginV2, self).delete_subnet(context, id)",1,1,0.125,282
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_network_profile(self, context, network_profile):",1,1,0.125,283
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return net_p,1,1,0.125,284
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_network_profile(self, context, id):",1,1,0.125,285
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_port(self, context, id, fields=None):",1,1,0.125,286
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p = super(N1kvNeutronPluginV2,",1,1,0.125,287
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: network profile object,1,1,0.125,288
e0f69d69293f0ffba22a6540f483f05baa48cd6f,the previously stored fake tenant-id in tenant-profile bindings.,1,1,0.125,289
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnets = super(N1kvNeutronPluginV2, self).get_subnets(context,",1,1,0.125,290
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_subnet(self, context, id, fields=None):",1,1,0.125,291
e0f69d69293f0ffba22a6540f483f05baa48cd6f,subnet object. Values in this dictiontary are an,1,1,0.125,292
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_subnets(self, context, filters=None, fields=None):",1,1,0.125,293
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._fields(subnet, fields)",1,1,0.125,294
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnet = super(N1kvNeutronPluginV2, self).get_subnet(context, id,",1,1,0.125,295
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params fields: a list of strings that are valid keys in a subnet,1,1,0.125,296
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a subnet.,1,1,0.125,297
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a port.,1,1,0.125,298
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vm_network = n1kv_db_v2.add_vm_network(context.session,",1,1,0.125,299
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if vm_network['port_count'] == 0:,1,1,0.125,300
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port['port']['n1kv:profile_id'] = p_profile['id'],1,1,0.125,301
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Update port count of the VM network.,1,1,0.125,302
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_count = 1,1,1,0.125,303
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vm_network_name = ""%s%s_%s"" % (c_const.VM_NETWORK_NAME_PREFIX,",1,1,0.125,304
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network = n1kv_db_v2.get_vm_network(,1,1,0.125,305
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"pt = super(N1kvNeutronPluginV2, self).create_port(context,",1,1,0.125,306
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p_profile_name = c_conf.CISCO_N1K.default_policy_profile,1,1,0.125,307
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if p_profile:,1,1,0.125,308
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_count = vm_network['port_count'] + 1,1,1,0.125,309
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p_profile = self._get_policy_profile_by_name(p_profile_name),1,1,0.125,310
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p_profile_name = c_conf.CISCO_N1K.network_node_policy_profile,1,1,0.125,311
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id_set = False,1,1,0.125,312
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network_name = None,1,1,0.125,313
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: deleted network profile object,1,1,0.125,314
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network = None,1,1,0.125,315
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network_name = vm_network['name'],1,1,0.125,316
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not p_profile:,1,1,0.125,317
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _delete_port_db(self, context, port, vm_network):",1,1,0.125,318
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._l3plugin = manager.NeutronManager.get_service_plugins().get(,1,1,0.125,319
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if self.l3plugin:,1,1,0.125,320
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vm_network = n1kv_db_v2.get_vm_network(context.session,",1,1,0.125,321
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port = self.get_port(context, id)",1,1,0.125,322
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if self.l3plugin and l3_port_check:,1,1,0.125,323
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# and l3-router.  If so, we should prevent deletion.",1,1,0.125,324
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_port(self, context, id, l3_port_check=True):",1,1,0.125,325
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self._l3plugin,1,1,0.125,326
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p_profile = n1kv_db_v2.get_policy_profile(session, profile_id)",1,1,0.125,327
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def l3plugin(self):,1,1,0.125,328
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return updated_port,1,1,0.125,329
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"updated_port = super(N1kvNeutronPluginV2,",1,1,0.125,330
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with context.session.begin(subtransactions=True):,1,1,0.125,331
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_port(self, context, id, port):",1,1,0.125,332
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return pt,1,1,0.125,333
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID of the network profile to delete,1,1,0.125,334
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return ''.join(xml),1,1,0.125,335
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_network_profile(self, context, net_profile_id, network_profile):",1,1,0.125,336
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param net_profile_id: UUID of the network profile to update,1,1,0.125,337
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.125,338
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,339
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    a copy of the License at,1,1,0.125,340
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,1,0.125,341
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#,1,1,0.125,342
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# Copyright 2013 Cisco Systems, Inc.",1,1,0.125,343
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"xml.extend(template % {'num': n} for n in range(1, total_profiles + 1))",1,1,0.125,344
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"<set name=""virtual_port_profile_set"">""""""]",1,1,0.125,345
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _policy_profile_generator_xml(total_profiles):,1,1,0.125,346
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profiles[name] = {""properties"": {""name"": name, ""id"": profile_id}}",1,1,0.125,347
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for num in range(1, total_profiles + 1):",1,1,0.125,348
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param total_profiles: integer representing total number of profiles to,1,1,0.125,349
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _policy_profile_generator(total_profiles):,1,1,0.125,350
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if body_set - subnet_set:,1,1,0.125,351
e0f69d69293f0ffba22a6540f483f05baa48cd6f,subnet_set = set(_resource_metadata['subnet']),1,1,0.125,352
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,1,0.125,353
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    License for the specific language governing permissions and limitations,1,1,0.125,354
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    under the License.,1,1,0.125,355
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def __init__(self, status, response_text, headers):",1,1,0.125,356
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p_profile = None,1,1,0.125,357
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self.buffer,1,1,0.125,358
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def json(self, *args, **kwargs):",1,1,0.125,359
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.headers = headers,1,1,0.125,360
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.status_code = status,1,1,0.125,361
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.buffer = response_text,1,1,0.125,362
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"Initialize it with the status code, header and buffer contents you wish to",1,1,0.125,363
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import neutron.db.api as db,1,1,0.125,364
e0f69d69293f0ffba22a6540f483f05baa48cd6f,TENANT_TEST = 'test',1,1,0.125,365
e0f69d69293f0ffba22a6540f483f05baa48cd6f,TENANT_NOT_ADMIN = 'not_admin',1,1,0.125,366
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VLAN_MAX = 110,1,1,0.125,367
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VLAN_MIN = 100,1,1,0.125,368
e0f69d69293f0ffba22a6540f483f05baa48cd6f,PHYS_NET = 'some-phys-net',1,1,0.125,369
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.extensions import n1kv,1,1,0.125,370
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif 'subnet' in action:,1,1,0.125,371
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if body_set - port_set:,1,1,0.125,372
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_set = set(_resource_metadata['port']),1,1,0.125,373
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.125,374
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.broken = False,1,1,0.125,375
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def __init__(self, **kwargs):",1,1,0.125,376
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"_resource_metadata = {'port': ['id', 'macAddress', 'ipAddress', 'subnetId'],",1,1,0.125,377
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    under the License.,1,1,0.125,378
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    License for the specific language governing permissions and limitations,1,1,0.125,379
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,1,0.125,380
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,381
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.total_profiles = 2,1,1,0.125,382
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    a copy of the License at,1,1,0.125,383
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,1,0.125,384
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#,1,1,0.125,385
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# Copyright 2014 Cisco Systems, Inc.",1,1,0.125,386
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p = (super(N1kvNeutronPluginV2, self).",1,1,0.125,387
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile: dictionary containing network profile object,1,1,0.125,388
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.inject_params = False,1,1,0.125,389
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _get_total_profiles(self):,1,1,0.125,390
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif 'port' in action:,1,1,0.125,391
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _validate_resource(action, body=None):",1,1,0.125,392
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VSMError(reason='Invalid Request'),1,1,0.125,393
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if body_set - vmnetwork_set:,1,1,0.125,394
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vmnetwork_set = set(_resource_metadata['vmnetwork']),1,1,0.125,395
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return,1,1,0.125,396
e0f69d69293f0ffba22a6540f483f05baa48cd6f,body_set = set(body.keys()),1,1,0.125,397
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if body:,1,1,0.125,398
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return _policy_profile_generator(,1,1,0.125,399
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self.total_profiles,1,1,0.125,400
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return _validate_resource(action, body)",1,1,0.125,401
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if method == 'POST':,1,1,0.125,402
e0f69d69293f0ffba22a6540f483f05baa48cd6f,body['invalidKey'] = 'catchMeIfYouCan',1,1,0.125,403
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if self.inject_params and body:,1,1,0.125,404
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if self.broken:,1,1,0.125,405
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _do_request(self, method, action, body=None, headers=None):",1,1,0.125,406
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_count = None,1,1,0.125,407
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Cannot add vlan segment '%s' as a member of """,1,1,0.125,408
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_port(self, context, port):",1,1,0.125,409
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for net in nets:,1,1,0.125,410
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_delete_network_profile_request(self, profile):",1,1,0.125,411
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send update network profile request to VSM.,1,1,0.125,412
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_update_network_profile_request(self, profile):",1,1,0.125,413
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param profile: network profile dictionary,1,1,0.125,414
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send create network profile request to VSM.,1,1,0.125,415
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_create_network_profile_request(self, context, profile):",1,1,0.125,416
e0f69d69293f0ffba22a6540f483f05baa48cd6f,logical_network_name = (network_profile['id'] +,1,1,0.125,417
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_delete_logical_network_request(self, network_profile):",1,1,0.125,418
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile: network profile dictionary,1,1,0.125,419
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_create_logical_network_request(self, network_profile, tenant_id):",1,1,0.125,420
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not self._policy_profile_exists(profile_id):,1,1,0.125,421
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""n1kv:profile_id does not exist"")",1,1,0.125,422
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _process_policy_profile(self, context, attrs):",1,1,0.125,423
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p = self._get_network_profile_by_name(context.session,",1,1,0.125,424
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not profile_id_set:,1,1,0.125,425
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send delete network profile request to VSM.,1,1,0.125,426
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile['name']),1,1,0.125,427
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_create_network_request(self, context, network, segment_pairs):",1,1,0.125,428
e0f69d69293f0ffba22a6540f483f05baa48cd6f,body['mode'] = c_const.NETWORK_TYPE_TRUNK,1,1,0.125,429
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_delete_network_request(self, context, network):",1,1,0.125,430
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"encap_dict = {'name': encap_profile,",1,1,0.125,431
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_profile = (network['id'] +,1,1,0.125,432
e0f69d69293f0ffba22a6540f483f05baa48cd6f,body['delSegments'] = network['del_segment_list'],1,1,0.125,433
e0f69d69293f0ffba22a6540f483f05baa48cd6f,body['addSegments'] = network['add_segment_list'],1,1,0.125,434
e0f69d69293f0ffba22a6540f483f05baa48cd6f,body['segmentType'] = profile['sub_type'],1,1,0.125,435
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"body = {'description': network['name'],",1,1,0.125,436
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,437
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, network[n1kv.PROFILE_ID], context.tenant_id)",1,1,0.125,438
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_update_network_request(self, context, network, add_segments,",1,1,0.125,439
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict = {'name': (network['name'] +,1,1,0.125,440
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if profile['sub_type'] == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,441
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['del_segment_list'] = [],1,1,0.125,442
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_TRUNK:,1,1,0.125,443
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id_set = attributes.is_attr_set(profile_id),1,1,0.125,444
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Validate network profile exists.""""""",1,1,0.125,445
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _process_network_profile(self, context, network):",1,1,0.125,446
e0f69d69293f0ffba22a6540f483f05baa48cd6f,dot1qtag = '',1,1,0.125,447
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not physical_network:,1,1,0.125,448
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Fake establish Communication with Cisco Nexus1000V VSM.""""""",1,1,0.125,449
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if sub_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,450
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Cannot add a trunk segment '%s' as a member of """,1,1,0.125,451
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if binding.network_type == c_const.NETWORK_TYPE_TRUNK:,1,1,0.125,452
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if uuidutils.is_uuid_like(segment):,1,1,0.125,453
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if sub_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,454
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Network UUID '%s' belongs to a different """,1,1,0.125,455
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment, sep, dot1qtag = pair.partition(':')",1,1,0.125,456
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _parse_trunk_segments(self, context, attrs, param, physical_network,",1,1,0.125,457
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Invalid UUID supplied"")",1,1,0.125,458
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('Invalid UUID supplied in %s', pair)",1,1,0.125,459
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Invalid pairing supplied"")",1,1,0.125,460
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding2.network_type not in valid_seg_types or,1,1,0.125,461
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network = binding.physical_network,1,1,0.125,462
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Cannot add vxlan segment '%s' as a member of """,1,1,0.125,463
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port[n1kv.PROFILE_ID] = binding.profile_id,1,1,0.125,464
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[n1kv.MEMBER_SEGMENTS] = members,1,1,0.125,465
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = n1kv_db_v2.get_port_binding(context.session,",1,1,0.125,466
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Add the extended parameter port profile to the port.""""""",1,1,0.125,467
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _extend_port_dict_profile(self, context, port):",1,1,0.125,468
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[n1kv.PROFILE_ID] = binding.profile_id,1,1,0.125,469
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Add the extended parameter network profile to the network.""""""",1,1,0.125,470
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _extend_network_dict_profile(self, context, network):",1,1,0.125,471
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"members = n1kv_db_v2.get_multi_segment_members(context.session,",1,1,0.125,472
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not utils.is_valid_vlan_tag(int(dot1qtag)):,1,1,0.125,473
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"members = n1kv_db_v2.get_trunk_members(context.session,",1,1,0.125,474
e0f69d69293f0ffba22a6540f483f05baa48cd6f,members = [],1,1,0.125,475
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _extend_network_dict_member_segments(self, context, network):",1,1,0.125,476
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""'%s' is not a valid UUID"") % segment",1,1,0.125,477
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Vlan tag '%s' is not an integer """,1,1,0.125,478
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Vlan tag '%s' is out of range"") % dot1qtag",1,1,0.125,479
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete bridge domain if network is of type Overlay.,1,1,0.125,480
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"encap_dict = n1kv_db_v2.get_multi_segment_encap_dict(session,",1,1,0.125,481
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_dict = {'name': profile,",1,1,0.125,482
e0f69d69293f0ffba22a6540f483f05baa48cd6f,add_segments = (,1,1,0.125,483
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Cannot delete network '%s', """,1,1,0.125,484
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network['subnets']:,1,1,0.125,485
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network = self.get_network(context, id)",1,1,0.125,486
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_network(self, context, id):",1,1,0.125,487
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if binding.network_type != c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,1,0.125,488
e0f69d69293f0ffba22a6540f483f05baa48cd6f,del_segments = (,1,1,0.125,489
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if binding.network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,1,0.125,490
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Cannot delete network '%s' """,1,1,0.125,491
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net = super(N1kvNeutronPluginV2, self).update_network(context, id,",1,1,0.125,492
e0f69d69293f0ffba22a6540f483f05baa48cd6f,del_segments = [],1,1,0.125,493
e0f69d69293f0ffba22a6540f483f05baa48cd6f,add_segments = [],1,1,0.125,494
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_network(self, context, id, network):",1,1,0.125,495
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return net,1,1,0.125,496
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with excutils.save_and_reraise_exception():,1,1,0.125,497
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if n1kv_db_v2.is_trunk_member(session, id):",1,1,0.125,498
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if n1kv_db_v2.is_multi_segment_member(session, id):",1,1,0.125,499
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multicast_ip = ""0.0.0.0""",1,1,0.125,500
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_networks(self, context, filters=None, fields=None):",1,1,0.125,501
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"nets = super(N1kvNeutronPluginV2, self).get_networks(context, filters,",1,1,0.125,502
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params fields: a list of strings that are valid keys in a network,1,1,0.125,503
e0f69d69293f0ffba22a6540f483f05baa48cd6f,values for each key in filters,1,1,0.125,504
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network object. Values in this dictiontary are an,1,1,0.125,505
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param filters: a dictionary with keys that are valid keys for a,1,1,0.125,506
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a list of networks.,1,1,0.125,507
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._fields(net, fields)",1,1,0.125,508
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Cannot delete network '%s' that is a member of a """,1,1,0.125,509
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net = super(N1kvNeutronPluginV2, self).get_network(context, id, None)",1,1,0.125,510
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a Network.,1,1,0.125,511
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_network(self, context, id, fields=None):",1,1,0.125,512
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _delete_network_db(self, context, id):",1,1,0.125,513
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# the network record, so explicit removal is not necessary",1,1,0.125,514
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# the network_binding record is deleted via cascade from,1,1,0.125,515
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net = super(N1kvNeutronPluginV2, self).create_network(context,",1,1,0.125,516
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise cisco_exceptions.VlanIDOutsidePool(),1,1,0.125,517
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for segment_pair in encap_dict[profile]:,1,1,0.125,518
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vm_network_name: string representing the name of the VM,1,1,0.125,519
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vm_network: VM network object with which the port is associated,1,1,0.125,520
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_delete_port_request(self, context, port, vm_network):",1,1,0.125,521
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"body = {'portId': port_id,",1,1,0.125,522
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vm_network_name: VM network name to which the port is bound,1,1,0.125,523
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_update_port_request(self, port_id, mac_address, vm_network_name):",1,1,0.125,524
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if port_count == 1:,1,1,0.125,525
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_count: integer representing the number of ports in one,1,1,0.125,526
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve segmentation ID for a given network.,1,1,0.125,527
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_create_port_request(self,",1,1,0.125,528
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"body = {'ipPool': subnet['id'], 'deleteSubnet': True}",1,1,0.125,529
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_delete_subnet_request(self, context, subnet):",1,1,0.125,530
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_update_subnet_request(self, subnet):",1,1,0.125,531
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_create_subnet_request(self, context, subnet):",1,1,0.125,532
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(segment1, segment2) = segment_pair",1,1,0.125,533
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_segmentation_id(self, context, id):",1,1,0.125,534
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = n1kv_db_v2.get_network_binding(session, id)",1,1,0.125,535
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not seg_min <= segmentation_id <= seg_max:,1,1,0.125,536
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,1,0.125,537
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min, seg_max = self._get_segment_range(",1,1,0.125,538
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# provider network,1,1,0.125,539
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise n_exc.TenantNetworksDisabled(),1,1,0.125,540
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not segmentation_id:,1,1,0.125,541
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile = self.get_network_profile(context,",1,1,0.125,542
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_pairs = (,1,1,0.125,543
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multicast_ip) = n1kv_db_v2.alloc_network(session,",1,1,0.125,544
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return binding.segmentation_id,1,1,0.125,545
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# tenant network,1,1,0.125,546
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not network_type:,1,1,0.125,547
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with session.begin(subtransactions=True):,1,1,0.125,548
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_pairs = None,1,1,0.125,549
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segmentation_id) = self._process_provider_create(context,",1,1,0.125,550
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_network(self, context, network):",1,1,0.125,551
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _fake_setup_vsm(self):,1,1,0.125,552
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# are not deleted.,1,1,0.125,553
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._populate_policy_profiles(),1,1,0.125,554
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_obj = self._make_test_policy_profile(name='test_profile'),1,1,0.125,555
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Set the restriction flag,1,1,0.125,556
e0f69d69293f0ffba22a6540f483f05baa48cd6f,behavior. We set the flag and attempt to retrieve the port,1,1,0.125,557
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_get_profiles_unrestricted(self):,1,1,0.125,558
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for i in range(len(profiles)):,1,1,0.125,559
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._list(resource, neutron_context=ctx)",1,1,0.125,560
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ctx = context.Context(user_id='non_admin',",1,1,0.125,561
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ctx = context.Context(user_id='admin',",1,1,0.125,562
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if admin:,1,1,0.125,563
e0f69d69293f0ffba22a6540f483f05baa48cd6f,resource = 'policy_profiles',1,1,0.125,564
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _test_get_policy_profiles(self, expected_profiles, admin):",1,1,0.125,565
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, '00000000-0000-0000-0000-000000000001'),",1,1,0.125,566
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_db_v2.get_policy_profile(,1,1,0.125,567
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return [,1,1,0.125,568
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _init_get_policy_profiles(self):,1,1,0.125,569
e0f69d69293f0ffba22a6540f483f05baa48cd6f,obj_inst.return_value = 2,1,1,0.125,570
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Request the list using non-admin and verify it returns,1,1,0.125,571
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Request the list using admin and verify it returns,1,1,0.125,572
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_get_profiles_restricted(self):,1,1,0.125,573
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return {'network': {'name': 'net1',",1,1,0.125,574
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_obj = self._make_test_profile(name='test_profile'),1,1,0.125,575
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_with_n1kv_network_profile_id(self):,1,1,0.125,576
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, network['network'][n1kv.PROFILE_ID])",1,1,0.125,577
e0f69d69293f0ffba22a6540f483f05baa48cd6f,np = n1kv_db_v2.get_network_profile(,1,1,0.125,578
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test network create without passing network profile id.""""""",1,1,0.125,579
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_with_default_n1kv_network_profile_id(self):,1,1,0.125,580
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _prepare_net_data(self, net_profile_id):",1,1,0.125,581
e0f69d69293f0ffba22a6540f483f05baa48cd6f,We set the flag and attempt to retrieve the port profiles. It,1,1,0.125,582
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"body = self.deserialize('json', res)",1,1,0.125,583
e0f69d69293f0ffba22a6540f483f05baa48cd6f,res = req.get_response(self.api),1,1,0.125,584
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req.environ['neutron.context'] = context.Context('', self.tenant_id)",1,1,0.125,585
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_plugin(self):,1,1,0.125,586
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_get_policy_profiles_by_name(self):,1,1,0.125,587
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Request the list using non-admin and verify it returns no data,1,1,0.125,588
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual('pp-3', profile['name'])",1,1,0.125,589
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, '00000000-0000-0000-0000-000000000003')",1,1,0.125,590
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual('pp-2', profile['name'])",1,1,0.125,591
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_first_port_invalid_parameters_fail(self):,1,1,0.125,592
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# for network object clean up to succeed.,1,1,0.125,593
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Explicit stop of failure response mock from controller required,1,1,0.125,594
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test whether VMNetwork is cleaned up if port create fails on VSM.""""""",1,1,0.125,595
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_first_port_rollback_vmnetwork(self):,1,1,0.125,596
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'port': {n1kv.PROFILE_ID: port['port']['n1kv:profile_id'],",1,1,0.125,597
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_next_port_invalid_parameters_fail(self):,1,1,0.125,598
e0f69d69293f0ffba22a6540f483f05baa48cd6f,res = port_req.get_response(self.api),1,1,0.125,599
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test whether VMNetwork count if port create fails on VSM.""""""",1,1,0.125,600
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port_req = self.new_update_request('ports',",1,1,0.125,601
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'port': {n1kv.PROFILE_ID: 'some-profile-uuid'}},1,1,0.125,602
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_port_with_n1kv_policy_profile_id(self):,1,1,0.125,603
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port = self.deserialize(self.fmt,",1,1,0.125,604
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port_req = self.new_create_request('ports', data)",1,1,0.125,605
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'port': {n1kv.PROFILE_ID: profile_obj.id,",1,1,0.125,606
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_next_port_rollback_vmnetwork_count(self):,1,1,0.125,607
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pt = port['port'],1,1,0.125,608
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, '00000000-0000-0000-0000-000000000002')",1,1,0.125,609
e0f69d69293f0ffba22a6540f483f05baa48cd6f,instance = n1kv_neutron_plugin.N1kvNeutronPluginV2(),1,1,0.125,610
e0f69d69293f0ffba22a6540f483f05baa48cd6f,obj_inst.return_value = 3,1,1,0.125,611
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with mock.patch(fake_client.__name__ +,1,1,0.125,612
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"with mock.patch(n1kv_client.__name__ + "".Client"",",1,1,0.125,613
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_populate_policy_profile_delete(self):,1,1,0.125,614
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual('pp-1', profile['name'])",1,1,0.125,615
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, '00000000-0000-0000-0000-000000000001')",1,1,0.125,616
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_populate_policy_profile(self):,1,1,0.125,617
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"old_vmn = n1kv_db_v2.get_vm_network(db_session,",1,1,0.125,618
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"test cases, so call the super class setup, but pass in the",1,1,0.125,619
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_delete_request('ports', port['port']['id'])",1,1,0.125,620
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test whether VMNetwork is cleaned up from db on last port delete.""""""",1,1,0.125,621
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_delete_last_port_vmnetwork_cleanup(self):,1,1,0.125,622
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"new_vmn = n1kv_db_v2.get_vm_network(db_session,",1,1,0.125,623
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'port': {n1kv.PROFILE_ID: pt['n1kv:profile_id'],",1,1,0.125,624
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = self._prepare_net_data(profile_obj.id),1,1,0.125,625
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_req = self.new_create_request('networks', data)",1,1,0.125,626
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network = self.deserialize(self.fmt,",1,1,0.125,627
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# In N1K we need to delete the subnet before the network,1,1,0.125,628
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# delete the port,1,1,0.125,629
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_port(self.fmt, net_id=net_id, **kwargs)",1,1,0.125,630
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs = {""fixed_ips"": [{'subnet_id': subnet['subnet']['id'],",1,1,0.125,631
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'subnet': {'network_id': net_id,",1,1,0.125,632
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_subnet_with_allocation_range(self):,1,1,0.125,633
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_delete_request('subnets', subnet['subnet']['id'])",1,1,0.125,634
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_update_request('subnets', data,",1,1,0.125,635
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_requested_subnet_id_v4_and_v6(self):,1,1,0.125,636
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'subnet': {'host_routes': host_routes,",1,1,0.125,637
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"dns_nameservers = ['192.168.0.1', '192.168.0.2']",1,1,0.125,638
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnet = self.deserialize(self.fmt, req.get_response(self.api))",1,1,0.125,639
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_create_request('subnets', data)",1,1,0.125,640
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"host_routes = [{'destination': '172.16.0.0/24',",1,1,0.125,641
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_subnet_adding_additional_host_routes_and_dns(self):,1,1,0.125,642
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Check when fixed IP is gateway,1,1,0.125,643
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_subnet(self.fmt, tenant_id='tenant1',",1,1,0.125,644
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnet_req = self.new_create_request('subnets', data)",1,1,0.125,645
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ips = port4['port']['fixed_ips'],1,1,0.125,646
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with self.subnet():,1,1,0.125,647
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Subnet creation should trigger scheduling for networks,1,1,0.125,648
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"with mock.patch.object(n1kv_neutron_plugin.N1kvNeutronPluginV2,",1,1,0.125,649
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_schedule_network_with_subnet_create(self):,1,1,0.125,650
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_delete_request('subnets', subnet2['subnet']['id'])",1,1,0.125,651
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_delete_request('subnets', subnet1['subnet']['id'])",1,1,0.125,652
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Check that a v4 and a v6 address are allocated,1,1,0.125,653
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnet1 = self.deserialize(self.fmt, res)",1,1,0.125,654
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port4 = self.deserialize(self.fmt, res)",1,1,0.125,655
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_port(self.fmt, net_id=net_id)",1,1,0.125,656
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ips = port3['port']['fixed_ips'],1,1,0.125,657
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port3 = self.deserialize(self.fmt, res)",1,1,0.125,658
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs = {""fixed_ips"": [{'subnet_id': subnet1['subnet']['id']},",1,1,0.125,659
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"subnet2 = self.deserialize(self.fmt, res)",1,1,0.125,660
e0f69d69293f0ffba22a6540f483f05baa48cd6f,subnet_resp = subnet_req.get_response(self.api),1,1,0.125,661
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'subnet': {'network_id': network['network']['id'],",1,1,0.125,662
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_with_n1kv_network_profile_id(self):,1,1,0.125,663
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_obj = self._make_test_profile('test_np',",1,1,0.125,664
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_delete_network_with_subnet(self):,1,1,0.125,665
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_delete_request('networks', network['network']['id'])",1,1,0.125,666
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network = self.deserialize(self.fmt, res)",1,1,0.125,667
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_network(self.fmt, name='net', admin_state_up=True)",1,1,0.125,668
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Regular test case of network deletion. Should return successful.""""""",1,1,0.125,669
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_delete_network(self):,1,1,0.125,670
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_rollback_deallocate_overlay_segment(self):,1,1,0.125,671
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_id = subnet['subnet']['network_id'],1,1,0.125,672
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_obj = self._make_test_profile(name='test_profile',",1,1,0.125,673
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_rollback_deallocate_vlan_segment(self):,1,1,0.125,674
e0f69d69293f0ffba22a6540f483f05baa48cd6f,res = network_req.get_response(self.api),1,1,0.125,675
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_req = self.new_update_request('networks',",1,1,0.125,676
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network': {n1kv.PROFILE_ID: 'some-profile-uuid'}},1,1,0.125,677
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test network update failure while updating network profile id.""""""",1,1,0.125,678
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with self.subnet() as subnet:,1,1,0.125,679
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_delete_request('networks', net_id)",1,1,0.125,680
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test subnet creation with invalid parameters sent to the VSM""""""",1,1,0.125,681
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_network(self.fmt, name='net1', admin_state_up=True)",1,1,0.125,682
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_subnet_with_invalid_parameters(self):,1,1,0.125,683
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.skipTest(""plugin does not return standard conflict code"")",1,1,0.125,684
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_port_prevents_network_deletion(self):,1,1,0.125,685
e0f69d69293f0ffba22a6540f483f05baa48cd6f,_unsupported = (,1,1,0.125,686
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_port(self.fmt, net_id,",1,1,0.125,687
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_id = network['network']['id'],1,1,0.125,688
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Verify that a network with a port attached cannot be removed.""""""",1,1,0.125,689
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_set_not_shared_multi_tenants2_returns_409(self):,1,1,0.125,690
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_delete_network_if_port_exists(self):,1,1,0.125,691
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port = self.deserialize(self.fmt, res)",1,1,0.125,692
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_update_request('networks', data,",1,1,0.125,693
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network': {'shared': False}},1,1,0.125,694
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = self._create_port(self.fmt, network['network']['id'],",1,1,0.125,695
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with self.network(shared=True) as network:,1,1,0.125,696
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with self.network() as network:,1,1,0.125,697
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_port_with_n1kv_policy_profile_id(self):,1,1,0.125,698
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def get_resources(self):,1,1,0.125,699
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, port['port'][n1kv.PROFILE_ID])",1,1,0.125,700
e0f69d69293f0ffba22a6540f483f05baa48cd6f,netp['sub_type'] = c_const.NETWORK_TYPE_VLAN,1,1,0.125,701
e0f69d69293f0ffba22a6540f483f05baa48cd6f,netp['multicast_ip_range'] = (mcast_ip_range or,1,1,0.125,702
e0f69d69293f0ffba22a6540f483f05baa48cd6f,netp['sub_type'] = sub_type or 'enhanced',1,1,0.125,703
e0f69d69293f0ffba22a6540f483f05baa48cd6f,netp['segment_range'] = segment_range or '10000-10010',1,1,0.125,704
e0f69d69293f0ffba22a6540f483f05baa48cd6f,netp['physical_network'] = PHYS_NET,1,1,0.125,705
e0f69d69293f0ffba22a6540f483f05baa48cd6f,netp['segment_range'] = segment_range or '100-110',1,1,0.125,706
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,707
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"netp = {'name': 'netp1',",1,1,0.125,708
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _prepare_net_profile_data(self,",1,1,0.125,709
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_neutron_plugin.N1kvNeutronPluginV2._setup_vsm = _fake_setup_vsm,1,1,0.125,710
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# These help us move along, without having to mock up even more systems",1,1,0.125,711
e0f69d69293f0ffba22a6540f483f05baa48cd6f,FakeHttpConnection.return_value = (FakeResponse(,1,1,0.125,712
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.resp_headers = {""content-type"": ""application/json""}",1,1,0.125,713
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# on any instance of the fake HTTP connection class.,1,1,0.125,714
e0f69d69293f0ffba22a6540f483f05baa48cd6f,FakeHttpConnection = http_patcher.start(),1,1,0.125,715
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {""network_profile"": netp}",1,1,0.125,716
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return data,1,1,0.125,717
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_vlan(self):,1,1,0.125,718
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_trunk_missing_subtype(self):,1,1,0.125,719
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p = self.deserialize(self.fmt,",1,1,0.125,720
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p_req = self.new_create_request('network_profiles', net_p_dict)",1,1,0.125,721
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p_dict = (self.,1,1,0.125,722
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_profile_plugin(self):,1,1,0.125,723
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY,",1,1,0.125,724
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_overlay_unreasonable_seg_range(self):,1,1,0.125,725
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_TRUNK),1,1,0.125,726
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_VLAN),1,1,0.125,727
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_trunk(self):,1,1,0.125,728
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_overlay_missing_subtype(self):,1,1,0.125,729
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY),1,1,0.125,730
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_overlay(self):,1,1,0.125,731
e0f69d69293f0ffba22a6540f483f05baa48cd6f,res = net_p_req.get_response(self.ext_api),1,1,0.125,732
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p_req = self.new_create_request('network_profiles', data)",1,1,0.125,733
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"http_patcher = mock.patch(n1kv_client.requests.__name__ + "".request"")",1,1,0.125,734
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Using __name__ to avoid having to enter the full module path.,1,1,0.125,735
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Creating a mock HTTP connection object for requests lib. The N1KV,1,1,0.125,736
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def get_request_extensions(self):,1,1,0.125,737
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"DEFAULT_CONTENT_TYPE = """"",1,1,0.125,738
e0f69d69293f0ffba22a6540f483f05baa48cd6f,DEFAULT_RESP_CODE = 200,1,1,0.125,739
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"DEFAULT_RESP_BODY = """"",1,1,0.125,740
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id = ""some_tenant""",1,1,0.125,741
e0f69d69293f0ffba22a6540f483f05baa48cd6f,_plugin_name = ('neutron.plugins.cisco.n1kv.',1,1,0.125,742
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return policy_profile.Policy_profile.get_resources(),1,1,0.125,743
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return [],1,1,0.125,744
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _make_test_policy_profile(self, name='service_profile'):",1,1,0.125,745
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def get_actions(self):,1,1,0.125,746
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return network_profile.Network_profile.get_resources(),1,1,0.125,747
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# the global attribute map,1,1,0.125,748
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# initialize the main API router which extends,1,1,0.125,749
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# This is done here as the setup process won't,1,1,0.125,750
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Add the resources to the global attribute map,1,1,0.125,751
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"fmt = ""json""",1,1,0.125,752
e0f69d69293f0ffba22a6540f483f05baa48cd6f,uuid = test_base._uuid(),1,1,0.125,753
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.DEFAULT_RESP_BODY = {,1,1,0.125,754
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return net_p,1,1,0.125,755
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not self.DEFAULT_RESP_BODY:,1,1,0.125,756
e0f69d69293f0ffba22a6540f483f05baa48cd6f,setUp() of the super-function (this one here). If you have set,1,1,0.125,757
e0f69d69293f0ffba22a6540f483f05baa48cd6f,and set your DEFAULT_RESPONSE value also BEFORE calling the,1,1,0.125,758
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"extra, please define your own setUp() function in your test class,",1,1,0.125,759
e0f69d69293f0ffba22a6540f483f05baa48cd6f,First step is to define an acceptable response from the VSM to,1,1,0.125,760
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def setUp(self, ext_mgr=NetworkProfileTestExtensionManager()):",1,1,0.125,761
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile['physical_network'] = PHYS_NET,1,1,0.125,762
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return n1kv_db_v2.create_policy_profile(profile),1,1,0.125,763
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p = n1kv_db_v2.create_network_profile(db_session, profile)",1,1,0.125,764
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile['multicast_ip_range'] = '0.0.0.0',1,1,0.125,765
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile['sub_type'] = 'unicast',1,1,0.125,766
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,767
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a profile record for testing purposes.,1,1,0.125,768
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _make_test_profile(self,",1,1,0.125,769
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'name': 'netp2'}},1,1,0.125,770
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"update_req = self.new_update_request('network_profiles',",1,1,0.125,771
e0f69d69293f0ffba22a6540f483f05baa48cd6f,update_res = update_req.get_response(self.ext_api),1,1,0.125,772
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p_req.environ['neutron.context'] = context.Context('',",1,1,0.125,773
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {c_const.ADD_TENANTS:,1,1,0.125,774
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p = self.test_create_network_profile_multi_tenants(),1,1,0.125,775
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_profile_multi_tenants(self):,1,1,0.125,776
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant2 = n1kv_db_v2.get_profile_binding(db_session, 'tenant2',",1,1,0.125,777
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant1 = n1kv_db_v2.get_profile_binding(db_session, 'tenant1',",1,1,0.125,778
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id = n1kv_db_v2.get_profile_binding(db_session, self.tenant_id,",1,1,0.125,779
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data['network_profile'][c_const.ADD_TENANTS] = ['tenant1', 'tenant2']",1,1,0.125,780
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# current tenant_id should always present,1,1,0.125,781
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_multi_tenants(self):,1,1,0.125,782
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data['network_profile']['add_tenant'] = 'tenant1',1,1,0.125,783
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = self._prepare_net_profile_data('vlan'),1,1,0.125,784
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_with_old_add_tenant_fail(self):,1,1,0.125,785
e0f69d69293f0ffba22a6540f483f05baa48cd6f,bindings = (db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,1,0.125,786
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"client_patch = mock.patch(n1kv_client.__name__ + "".Client"",",1,1,0.125,787
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"update_req.environ['neutron.context'] = context.Context('',",1,1,0.125,788
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, 'tenant4',",1,1,0.125,789
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_delete_network_profile_deallocate_vlan_segment_pool(self):,1,1,0.125,790
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_get_network_profile_unrestricted(self):,1,1,0.125,791
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with self.port() as port:,1,1,0.125,792
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_port_with_default_n1kv_policy_profile_id(self):,1,1,0.125,793
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def setUp(self):,1,1,0.125,794
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"_unsupported = ('test_delete_network_if_port_exists',",1,1,0.125,795
e0f69d69293f0ffba22a6540f483f05baa48cd6f,HAS_PORT_FILTER = False,1,1,0.125,796
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VIF_TYPE = portbindings.VIF_TYPE_OVS,1,1,0.125,797
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ctx2 = context.Context(user_id='non_admin',",1,1,0.125,798
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant3 = n1kv_db_v2.get_profile_binding(db_session, 'tenant3',",1,1,0.125,799
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ctx1 = context.Context(user_id='admin',",1,1,0.125,800
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_get_network_profile_restricted(self):,1,1,0.125,801
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant4 = n1kv_db_v2.get_profile_binding(db_session, 'tenant4',",1,1,0.125,802
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding1 = n1kv_db_v2.get_network_binding(context.session,",1,1,0.125,803
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session, 'tenant1',",1,1,0.125,804
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data = {'network_profile': {c_const.REMOVE_TENANTS: [self.tenant_id,",1,1,0.125,805
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_rollback_profile_binding(self):,1,1,0.125,806
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_delete_network_profile_with_network_fail(self):,1,1,0.125,807
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_profile_physical_network_fail(self):,1,1,0.125,808
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_profiles_with_networks_fail(self):,1,1,0.125,809
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_invalid_multicast_fail(self):,1,1,0.125,810
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'segment_range': '300-310'}},1,1,0.125,811
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_res = network_req.get_response(self.api),1,1,0.125,812
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_req = self.new_create_request('networks', net_data)",1,1,0.125,813
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_data = {'network': {'name': 'net1',",1,1,0.125,814
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'segment_range': '200-210'}},1,1,0.125,815
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'sub_type': c_const.NETWORK_TYPE_VLAN}},1,1,0.125,816
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data['network_profile']['multicast_ip_range'] = '',1,1,0.125,817
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_profile_sub_type_fail(self):,1,1,0.125,818
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {,1,1,0.125,819
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_network_profile_segment_type_fail(self):,1,1,0.125,820
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p_req = self.new_update_request('network_profiles',",1,1,0.125,821
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'physical_network': PHYS_NET}},1,1,0.125,822
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p = self._make_test_profile(name='netp1'),1,1,0.125,823
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_no_multicast_fail(self):,1,1,0.125,824
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_wrong_split_multicast_fail(self):,1,1,0.125,825
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session,",1,1,0.125,826
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_vlan_network_profile_multicast_fail(self):,1,1,0.125,827
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for vlan in range(VLAN_MIN, VLAN_MAX + 1):",1,1,0.125,828
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p_dict = self._prepare_net_profile_data(c_const.NETWORK_TYPE_VLAN),1,1,0.125,829
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_network_profile_populate_vlan_segment_pool(self):,1,1,0.125,830
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_trunk_network_profile_multicast_fail(self):,1,1,0.125,831
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'segment_range':,1,1,0.125,832
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_trunk_network_profile_segment_range_fail(self):,1,1,0.125,833
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_overlay_network_profile_reservedip_multicast_fail(self):,1,1,0.125,834
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_invalid_minip_multicast_fail(self):,1,1,0.125,835
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_reservedip_multicast_fail(self):,1,1,0.125,836
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data = {'network_profile': {'multicast_ip_range':,1,1,0.125,837
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p = self.deserialize(self.fmt, res)",1,1,0.125,838
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_update_overlay_network_profile_correct_multicast_pass(self):,1,1,0.125,839
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_correct_multicast_pass(self):,1,1,0.125,840
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def test_create_overlay_network_profile_invalid_maxip_multicast_fail(self):,1,1,0.125,841
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding2 = n1kv_db_v2.get_network_binding(context.session,",1,1,0.125,842
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"req = self.new_list_request('networks', params=""fields=tenant_id"")",1,1,0.125,843
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if (uuidutils.is_uuid_like(segment1) and,1,1,0.125,844
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.NetworkProfile).,1,1,0.125,845
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs[""multicast_ip_index""] = 0",1,1,0.125,846
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs[""segment_range""] = network_profile[""segment_range""]",1,1,0.125,847
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs[""physical_network""] = network_profile[""physical_network""]",1,1,0.125,848
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if network_profile[""segment_type""] == c_const.NETWORK_TYPE_VLAN:",1,1,0.125,849
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs = {""name"": network_profile[""name""],",1,1,0.125,850
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_network_profile(db_session, network_profile):",1,1,0.125,851
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vm_network = get_vm_network(db_session,",1,1,0.125,852
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_vm_network(db_session, policy_profile_id, network_id):",1,1,0.125,853
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network.port_count = port_count,1,1,0.125,854
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if port_count is not None:,1,1,0.125,855
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network = (db_session.query(n1kv_models_v2.N1kVmNetwork).,1,1,0.125,856
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update a VM network with new port count.,1,1,0.125,857
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_vm_network_port_count(db_session, name, port_count):",1,1,0.125,858
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return vm_network,1,1,0.125,859
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network = n1kv_models_v2.N1kVmNetwork(,1,1,0.125,860
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs[""multicast_ip_range""] = network_profile[",1,1,0.125,861
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"kwargs[""sub_type""] = network_profile[""sub_type""]",1,1,0.125,862
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_profile = n1kv_models_v2.NetworkProfile(**kwargs),1,1,0.125,863
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if _profile_binding_exists(db_session=db_session,",1,1,0.125,864
e0f69d69293f0ffba22a6540f483f05baa48cd6f,all network profiles.,1,1,0.125,865
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network is specified. If no physical network is specified, return",1,1,0.125,866
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"Get Network Profiles on a particular physical network, if physical",1,1,0.125,867
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_network_profiles(db_session=None, physical_network=None):",1,1,0.125,868
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NetworkProfileNotFound(profile=id),1,1,0.125,869
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return db_session.query(n1kv_models_v2.NetworkProfile).filter_by(,1,1,0.125,870
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if tenant_id and c_conf.CISCO_N1K.restrict_network_profiles:,1,1,0.125,871
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return net_profile,1,1,0.125,872
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_network_profile(db_session, id, tenant_id=None):",1,1,0.125,873
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_network_profile(db_session, id, network_profile, tenant_id=None):",1,1,0.125,874
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.ProfileTenantBindingNotFound(profile_id=id),1,1,0.125,875
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return network_profile,1,1,0.125,876
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile = get_network_profile(db_session, id, tenant_id)",1,1,0.125,877
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_network_profile(db_session, id, tenant_id=None):",1,1,0.125,878
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param name: string representing the name of the VM network,1,1,0.125,879
e0f69d69293f0ffba22a6540f483f05baa48cd6f,on one network will be associated with one VM network.,1,1,0.125,880
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_vm_network(db_session,",1,1,0.125,881
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"raise n_exc.VlanIdInUse(vlan_id=vlan_id,",1,1,0.125,882
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if seg_max + 1 - seg_min > c_const.MAX_VXLAN_RANGE:,1,1,0.125,883
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Synchronize vxlan_allocations table with configured vxlan ranges.,1,1,0.125,884
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def sync_vxlan_allocations(db_session, net_p):",1,1,0.125,885
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc.allocated = False,1,1,0.125,886
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def release_vlan(db_session, physical_network, vlan_id):",1,1,0.125,887
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VlanIDOutsidePool(),1,1,0.125,888
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise n_exc.FlatNetworkInUse(,1,1,0.125,889
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise n_exc.InvalidInput(error_message=msg),1,1,0.125,890
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if vlan_id == c_const.FLAT_VLAN_ID:,1,1,0.125,891
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if alloc.allocated:,1,1,0.125,892
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param physical_network: string representing the name of physical network,1,1,0.125,893
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def reserve_specific_vlan(db_session, physical_network, vlan_id):",1,1,0.125,894
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return (None, network_profile.segment_type, 0, ""0.0.0.0"")",1,1,0.125,895
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return reserve_vxlan(db_session, network_profile)",1,1,0.125,896
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = (_(""Unreasonable vxlan ID range %(vxlan_min)s - %(vxlan_max)s"") %",1,1,0.125,897
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for vxlan_id in range(seg_min, seg_max + 1):",1,1,0.125,898
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VMNetworkNotFound(name=name),1,1,0.125,899
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def release_vxlan(db_session, vxlan_id):",1,1,0.125,900
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.N1kVmNetwork).,1,1,0.125,901
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_vm_network(db_session, policy_profile_id, network_id):",1,1,0.125,902
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise n_exc.PortNotFound(port_id=port_id),1,1,0.125,903
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port.status = status,1,1,0.125,904
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port = db_session.query(models_v2.Port).filter_by(id=port_id).one(),1,1,0.125,905
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def set_port_status(port_id, status):",1,1,0.125,906
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VxlanIDOutsidePool(),1,1,0.125,907
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc = n1kv_models_v2.N1kvVxlanAllocation(,1,1,0.125,908
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VxlanIDInUse(vxlan_id=vxlan_id),1,1,0.125,909
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def reserve_specific_vxlan(db_session, vxlan_id):",1,1,0.125,910
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VxlanIDNotFound(vxlan_id=vxlan_id),1,1,0.125,911
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.N1kvVxlanAllocation).,1,1,0.125,912
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve VXLAN allocation for the given VXLAN ID.,1,1,0.125,913
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_vxlan_allocation(db_session, vxlan_id):",1,1,0.125,914
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if physical_network:,1,1,0.125,915
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return db_session.query(n1kv_models_v2.NetworkProfile),1,1,0.125,916
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with context.session.begin(subtransactions=True):,1,1,0.125,917
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def create_policy_profile(policy_profile):,1,1,0.125,918
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not net_profile_ids:,1,1,0.125,919
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_profile_ids = (db_session.query(n1kv_models_v2.ProfileBinding.,1,1,0.125,920
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant_id = context.tenant_id,1,1,0.125,921
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if context.is_admin and context.tenant_id:,1,1,0.125,922
e0f69d69293f0ffba22a6540f483f05baa48cd6f,initialized. Replace these tenant-ids with admin's tenant-id.,1,1,0.125,923
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Replace default tenant-id with admin tenant-ids.,1,1,0.125,924
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _replace_fake_tenant_id_with_real(self, context):",1,1,0.125,925
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Network Profile Mixin.""""""",1,1,0.125,926
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_profile_bindings_by_uuid(db_session, profile_id):",1,1,0.125,927
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return db_session.query(n1kv_models_v2.ProfileBinding),1,1,0.125,928
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if profile_type:,1,1,0.125,929
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile types.,1,1,0.125,930
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_profile_bindings(db_session, profile_type=None):",1,1,0.125,931
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant = n1kv_models_v2.ProfileBinding(profile_type=profile_type,",1,1,0.125,932
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for tenant_id in new_tenants_set:,1,1,0.125,933
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return [],1,1,0.125,934
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profiles = (db_session.query(model).filter(model.id.in_(,1,1,0.125,935
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _make_profile_bindings_dict(self, profile_binding, fields=None):",1,1,0.125,936
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if context.is_admin:,1,1,0.125,937
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: network profile dictionary,1,1,0.125,938
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile: network profile dictionary,1,1,0.125,939
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_network_profile(self, context, network_profile):",1,1,0.125,940
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for pb in profile_bindings],1,1,0.125,941
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return [self._make_profile_bindings_dict(pb),1,1,0.125,942
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_bindings = _get_profile_bindings(,1,1,0.125,943
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: list of profile bindings,1,1,0.125,944
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = {""profile_id"": profile_binding[""profile_id""],",1,1,0.125,945
e0f69d69293f0ffba22a6540f483f05baa48cd6f,values for each key in filters,1,1,0.125,946
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param filters: a dictionary with keys that are valid keys for a,1,1,0.125,947
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_network_profile_bindings(self, context, filters=None, fields=None):",1,1,0.125,948
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = {""id"": network_profile[""id""],",1,1,0.125,949
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _make_network_profile_dict(self, network_profile, fields=None):",1,1,0.125,950
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._fields(res, fields)",1,1,0.125,951
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new_tenants_set = set(tenants),1,1,0.125,952
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Updating Profile Binding.""""""",1,1,0.125,953
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_profile_binding(db_session, profile_id, tenants, profile_type):",1,1,0.125,954
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Update a policy profile.""""""",1,1,0.125,955
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.PolicyProfileIdNotFound(profile_id=id),1,1,0.125,956
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return db_session.query(,1,1,0.125,957
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Get Policy Profile.""""""",1,1,0.125,958
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_policy_profile(db_session, id):",1,1,0.125,959
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return _profile,1,1,0.125,960
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"_profile = get_policy_profile(db_session, id)",1,1,0.125,961
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_policy_profile(db_session, id, policy_profile):",1,1,0.125,962
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return db_session.query(n1kv_models_v2.PolicyProfile),1,1,0.125,963
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"policy_profile = get_policy_profile(db_session, id)",1,1,0.125,964
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Delete Policy Profile.""""""",1,1,0.125,965
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def delete_policy_profile(id):,1,1,0.125,966
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return p_profile,1,1,0.125,967
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p_profile = n1kv_models_v2.PolicyProfile(id=policy_profile[""id""],",1,1,0.125,968
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Create Policy Profile.""""""",1,1,0.125,969
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def get_policy_profiles():,1,1,0.125,970
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def create_profile_binding(db_session, tenant_id, profile_id, profile_type):",1,1,0.125,971
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return,1,1,0.125,972
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Get Network/Policy Profile - Tenant binding.""""""",1,1,0.125,973
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Profile-Tenant binding missing for profile ID """,1,1,0.125,974
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = get_profile_binding(db_session, tenant_id, profile_id)",1,1,0.125,975
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Delete Policy Binding.""""""",1,1,0.125,976
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_profile_binding(db_session, tenant_id, profile_id):",1,1,0.125,977
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.ProfileTenantBindingNotFound(profile_id=profile_id),1,1,0.125,978
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,1,0.125,979
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_profile_binding(db_session, tenant_id, profile_id):",1,1,0.125,980
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if _profile_binding_exists(db_session,",1,1,0.125,981
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.ProfileBinding).,1,1,0.125,982
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Check if the profile-tenant binding exists.""""""",1,1,0.125,983
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _profile_binding_exists(db_session, tenant_id, profile_id, profile_type):",1,1,0.125,984
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return binding,1,1,0.125,985
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = n1kv_models_v2.ProfileBinding(profile_type=profile_type,",1,1,0.125,986
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return get_profile_binding(db_session, tenant_id, profile_id)",1,1,0.125,987
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network_profile.segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,988
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return reserve_vlan(db_session, network_profile)",1,1,0.125,989
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network_profile.segment_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,990
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile = get_network_profile(db_session,",1,1,0.125,991
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_multi_segment_encap_dict(db_session, multi_segment_id):",1,1,0.125,992
e0f69d69293f0ffba22a6540f483f05baa48cd6f,allocs = (db_session.query(,1,1,0.125,993
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_multi_segment_members(db_session, multi_segment_id):",1,1,0.125,994
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NetworkBindingNotFound(network_id=multi_segment_id),1,1,0.125,995
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(,1,1,0.125,996
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(segment1_id, segment2_id) = segment_pair",1,1,0.125,997
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve multi-segment network binding.,1,1,0.125,998
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_multi_segment_network_binding(db_session,",1,1,0.125,999
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = get_multi_segment_network_binding(db_session,",1,1,0.125,1000
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_pair: set containing the segment UUIDs that are bridged,1,1,0.125,1001
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_multi_segment_encap_profile_name(db_session, multi_segment_id,",1,1,0.125,1002
e0f69d69293f0ffba22a6540f483f05baa48cd6f,multi_segment_binding = (,1,1,0.125,1003
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_multi_segment_binding(db_session, multi_segment_id, segment_pairs):",1,1,0.125,1004
e0f69d69293f0ffba22a6540f483f05baa48cd6f,trunk_segment_binding = (,1,1,0.125,1005
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding.physical_network = member_seg_binding.physical_network,1,1,0.125,1006
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: a dictionary of lists containing the segment pairs in sets,1,1,0.125,1007
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict = {},1,1,0.125,1008
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for alloc in allocs:,1,1,0.125,1009
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NetworkBindingNotFound(network_id=trunk_segment_id),1,1,0.125,1010
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return bool(ret),1,1,0.125,1011
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ret = (db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,1,0.125,1012
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Checks if a segment is a member of a trunk segment.,1,1,0.125,1013
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def is_trunk_member(db_session, segment_id):",1,1,0.125,1014
e0f69d69293f0ffba22a6540f483f05baa48cd6f,allocs = (db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,1,0.125,1015
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_trunk_members(db_session, trunk_segment_id):",1,1,0.125,1016
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,1,0.125,1017
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict[alloc.encap_profile_name] = [],1,1,0.125,1018
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(segment_id, dot1qtag) = segment_pair",1,1,0.125,1019
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_pair: set containing the segment_id and dot1qtag,1,1,0.125,1020
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve trunk network binding.,1,1,0.125,1021
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_trunk_network_binding(db_session, trunk_segment_id, segment_pair):",1,1,0.125,1022
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return encap_dict,1,1,0.125,1023
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_pair = (alloc.segment1_id, alloc.segment2_id)",1,1,0.125,1024
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"member_seg_binding = get_network_binding(db_session,",1,1,0.125,1025
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not binding.physical_network:,1,1,0.125,1026
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for (segment_id, tag) in segment_pairs:",1,1,0.125,1027
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from mock import patch,1,1,0.125,1028
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,1,0.125,1029
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#,1,1,0.125,1030
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# Copyright 2013 Cisco Systems, Inc.",1,1,0.125,1031
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with patch(fake_client.__name__ +,1,1,0.125,1032
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"get_cred_name_patcher = patch(cdb.__name__ + "".get_credential_name"")",1,1,0.125,1033
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"http_patcher = patch(n1kv_client.httplib2.__name__ + "".Http"")",1,1,0.125,1034
e0f69d69293f0ffba22a6540f483f05baa48cd6f,with mock.patch(fake_client.__name__ +,0,1,0.125,1035
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,1036
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"with mock.patch(n1kv_client.__name__ + "".Client"",",0,1,0.125,1037
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"client_patch = mock.patch(n1kv_client.__name__ + "".Client"",",0,1,0.125,1038
e0f69d69293f0ffba22a6540f483f05baa48cd6f,get_cred_name_patcher = mock.patch(cdb.__name__ +,0,1,0.125,1039
e0f69d69293f0ffba22a6540f483f05baa48cd6f,get_vsm_hosts_patcher = mock.patch(n1kv_client.__name__ +,0,1,0.125,1040
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"http_patcher = mock.patch(n1kv_client.httplib2.__name__ + "".Http"")",0,1,0.125,1041
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment1, sep, segment2 = pair.partition(':')",1,1,0.125,1042
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    a copy of the License at,1,1,0.125,1043
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.125,1044
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_trunk_segment_binding(db_session, trunk_segment_id, segment_pairs):",1,1,0.125,1045
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for (segment_id, dot1qtag) in segment_pairs:",1,1,0.125,1046
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for (segment1_id, segment2_id) in segment_pairs:",1,1,0.125,1047
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def del_multi_segment_binding(db_session, multi_segment_id, segment_pairs):",1,1,0.125,1048
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding.physical_network = None,1,1,0.125,1049
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = get_network_binding(db_session, trunk_segment_id)",1,1,0.125,1050
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not alloc:,1,1,0.125,1051
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc = (db_session.query(n1kv_models_v2.,1,1,0.125,1052
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_pairs: List of segment UUIDs in pair,1,1,0.125,1053
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,1,0.125,1054
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def del_trunk_segment_binding(db_session, trunk_segment_id, segment_pairs):",1,1,0.125,1055
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG = logging.getLogger(__name__),1,1,0.125,1056
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import neutron.db.api as db,1,1,0.125,1057
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from sqlalchemy.orm import exc,1,1,0.125,1058
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    under the License.,1,1,0.125,1059
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    License for the specific language governing permissions and limitations,1,1,0.125,1060
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def is_multi_segment_member(db_session, segment_id):",1,1,0.125,1061
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Checks if a segment is a member of a multi-segment network.,1,1,0.125,1062
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ret1 = (db_session.query(,1,1,0.125,1063
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_vlan_allocation(db_session, physical_network, vlan_id):",1,1,0.125,1064
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile: network profile object,1,1,0.125,1065
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def reserve_vlan(db_session, network_profile):",1,1,0.125,1066
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.VlanIDNotFound(vlan_id=vlan_id),1,1,0.125,1067
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.N1kvVlanAllocation).,1,1,0.125,1068
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param physical network: string name for the physical network,1,1,0.125,1069
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve vlan allocation.,1,1,0.125,1070
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc = n1kv_models_v2.N1kvVlanAllocation(,1,1,0.125,1071
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_type = c_const.NETWORK_TYPE_VLAN,1,1,0.125,1072
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for vlan_id in range(seg_min, seg_max + 1):",1,1,0.125,1073
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param net_p: network profile dictionary,1,1,0.125,1074
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Synchronize vlan_allocations table with configured VLAN ranges.,1,1,0.125,1075
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def sync_vlan_allocations(db_session, net_p):",1,1,0.125,1076
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if net_p['segment_type'] == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,1077
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min, seg_max = get_segment_range(net_p)",1,1,0.125,1078
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min, seg_max = get_segment_range(network_profile)",1,1,0.125,1079
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc = (db_session.query(n1kv_models_v2.N1kvVlanAllocation).,1,1,0.125,1080
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_segment_allocations(db_session, net_p):",1,1,0.125,1081
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_id = alloc.vxlan_id,1,1,0.125,1082
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile_id: UUID representing the network profile,1,1,0.125,1083
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Allocate network using first available free segment ID in segment range.,1,1,0.125,1084
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def alloc_network(db_session, network_profile_id, tenant_id):",1,1,0.125,1085
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise n_exc.NoNetworkAvailable(),1,1,0.125,1086
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return (physical_network, segment_type,",1,1,0.125,1087
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network_profile.sub_type == (c_const.,1,1,0.125,1088
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"physical_network = """"",1,1,0.125,1089
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if alloc:,1,1,0.125,1090
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_type = c_const.NETWORK_TYPE_OVERLAY,1,1,0.125,1091
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def reserve_vxlan(db_session, network_profile):",1,1,0.125,1092
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NoMoreNetworkSegments(,1,1,0.125,1093
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return (physical_network, segment_type, segment_id, ""0.0.0.0"")",1,1,0.125,1094
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network = alloc.physical_network,1,1,0.125,1095
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_id = alloc.vlan_id,1,1,0.125,1096
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params net_p: network profile object,1,1,0.125,1097
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = n1kv_models_v2.N1kvPortBinding(port_id=port_id,",1,1,0.125,1098
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ret2 = (db_session.query(,1,1,0.125,1099
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param add_segments: List of segment UUIDs in pairs to be added to either a,1,1,0.125,1100
e0f69d69293f0ffba22a6540f483f05baa48cd6f,int(i) for i in network_profile.segment_range.split('-')),1,1,0.125,1101
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min, seg_max = sorted(",1,1,0.125,1102
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params network_profile: object of type network profile,1,1,0.125,1103
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def get_segment_range(network_profile):,1,1,0.125,1104
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if add_segments is None:,1,1,0.125,1105
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding = n1kv_models_v2.N1kvNetworkBinding(,1,1,0.125,1106
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile_id: network profile ID based on which this network,1,1,0.125,1107
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def get_multicast_ip(network_profile):,1,1,0.125,1108
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_network_binding(db_session, network_id, network_type,",1,1,0.125,1109
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NetworkBindingNotFound(network_id=network_id),1,1,0.125,1110
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.N1kvNetworkBinding).,1,1,0.125,1111
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve network binding.,1,1,0.125,1112
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_network_binding(db_session, network_id):",1,1,0.125,1113
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return bool(ret1 or ret2),1,1,0.125,1114
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return seg_min, seg_max",1,1,0.125,1115
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a multicast ip from the defined pool.,1,1,0.125,1116
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_port_binding(db_session, port_id, policy_profile_id):",1,1,0.125,1117
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Assumption: ip range belongs to the same subnet,1,1,0.125,1118
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.PortBindingNotFound(port_id=port_id),1,1,0.125,1119
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.N1kvPortBinding).,1,1,0.125,1120
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve port binding.,1,1,0.125,1121
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_port_binding(db_session, port_id):",1,1,0.125,1122
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return network_profile.multicast_ip_range.split('-'),1,1,0.125,1123
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Assumption: ip range is already sorted,1,1,0.125,1124
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _get_multicast_ip_range(network_profile):,1,1,0.125,1125
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# Round robin multicast ip allocation,1,1,0.125,1126
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return mul_ip_str,1,1,0.125,1127
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile.multicast_ip_index = 0,1,1,0.125,1128
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network_profile.multicast_ip_index == len(addr_list):,1,1,0.125,1129
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mul_ip_str = str(addr_list[network_profile.multicast_ip_index]),1,1,0.125,1130
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"addr_list = list((netaddr.iter_iprange(min_ip, max_ip)))",1,1,0.125,1131
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"min_ip, max_ip = _get_multicast_ip_range(network_profile)",1,1,0.125,1132
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p = network_profile[""network_profile""]",1,1,0.125,1133
e0f69d69293f0ffba22a6540f483f05baa48cd6f,alloc = (db_session.query(n1kv_models_v2.N1kvVxlanAllocation).,1,1,0.125,1134
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_profile = create_network_profile(context.session, p)",1,1,0.125,1135
e0f69d69293f0ffba22a6540f483f05baa48cd6f,b_set_q = (db_session.query(n1kv_models_v2.ProfileBinding).,1,1,0.125,1136
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[providernet.PHYSICAL_NETWORK] = binding.physical_network,1,1,0.125,1137
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[n1kv.MULTICAST_IP] = binding.multicast_ip,1,1,0.125,1138
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[providernet.SEGMENTATION_ID] = binding.segmentation_id,1,1,0.125,1139
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[providernet.PHYSICAL_NETWORK] = None,1,1,0.125,1140
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if binding.network_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,1141
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[providernet.NETWORK_TYPE] = binding.network_type,1,1,0.125,1142
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding = n1kv_db_v2.get_network_binding(context.session,",1,1,0.125,1143
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _extend_network_dict_provider(self, context, network):",1,1,0.125,1144
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if vsm_profiles_set ^ plugin_profiles_set:,1,1,0.125,1145
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vsm_profiles_set = set(vsm_profiles),1,1,0.125,1146
e0f69d69293f0ffba22a6540f483f05baa48cd6f,plugin_profiles_set = set(),1,1,0.125,1147
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vsm_profiles = {},1,1,0.125,1148
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy_profiles = n1kvclient.list_port_profiles(),1,1,0.125,1149
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient = n1kv_client.Client(),1,1,0.125,1150
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _populate_policy_profiles(self):,1,1,0.125,1151
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[providernet.SEGMENTATION_ID] = None,1,1,0.125,1152
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[n1kv.MULTICAST_IP] = None,1,1,0.125,1153
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _process_provider_create(self, context, attrs):",1,1,0.125,1154
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not network_type_set:,1,1,0.125,1155
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""provider:segmentation_id out of range """,1,1,0.125,1156
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segmentation_id < 1 or segmentation_id > 4094:,1,1,0.125,1157
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""provider:segmentation_id required"")",1,1,0.125,1158
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not segmentation_id_set:,1,1,0.125,1159
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise n_exc.InvalidInput(error_message=msg),1,1,0.125,1160
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""provider:network_type required"")",1,1,0.125,1161
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return (None, None, None)",1,1,0.125,1162
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_type = attrs.get(providernet.NETWORK_TYPE),1,1,0.125,1163
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not (network_type_set or physical_network_set or,1,1,0.125,1164
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segmentation_id_set = attributes.is_attr_set(segmentation_id),1,1,0.125,1165
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network_set = attributes.is_attr_set(physical_network),1,1,0.125,1166
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_type_set = attributes.is_attr_set(network_type),1,1,0.125,1167
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segmentation_id = attrs.get(providernet.SEGMENTATION_ID),1,1,0.125,1168
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network = attrs.get(providernet.PHYSICAL_NETWORK),1,1,0.125,1169
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._populate_policy_profiles(),1,1,0.125,1170
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _poll_policy_profiles(self):,1,1,0.125,1171
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Setup Cisco Nexus 1000V related parameters and pull policy profiles.,1,1,0.125,1172
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,1,0.125,1173
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    under the License.,1,1,0.125,1174
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    License for the specific language governing permissions and limitations,1,1,0.125,1175
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,1,0.125,1176
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.125,1177
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#         http://www.apache.org/licenses/LICENSE-2.0,1,1,0.125,1178
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#    a copy of the License at,1,1,0.125,1179
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#,1,1,0.125,1180
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG = logging.getLogger(__name__),1,1,0.125,1181
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"# Copyright 2013 Cisco Systems, Inc.",1,1,0.125,1182
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not self._policy_profile_exists(policy_profile_id):,1,1,0.125,1183
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant_id = tenant_id or c_const.TENANT_ID_NOT_SET,1,1,0.125,1184
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"policy_profile = {""id"": policy_profile_id, ""name"": policy_profile_name}",1,1,0.125,1185
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param policy_profile_name: string representing the name for the,1,1,0.125,1186
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _add_policy_profile(self,",1,1,0.125,1187
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.extensions import n1kv,1,1,0.125,1188
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# bulk operations.,1,1,0.125,1189
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _setup_vsm(self):,1,1,0.125,1190
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _setup_rpc(self):,1,1,0.125,1191
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.dhcp_agent_notifier = dhcp_rpc_agent_api.DhcpAgentNotifyAPI(),1,1,0.125,1192
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for svc_topic in self.service_topics.values():,1,1,0.125,1193
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.endpoints = [dhcp_rpc.DhcpRpcCallback(),",1,1,0.125,1194
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.conn = n_rpc.create_connection(new=True),1,1,0.125,1195
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.service_topics = {svc_constants.CORE: topics.PLUGIN},1,1,0.125,1196
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# RPC support,1,1,0.125,1197
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.network_scheduler = importutils.import_object(,1,1,0.125,1198
e0f69d69293f0ffba22a6540f483f05baa48cd6f,__native_bulk_support = False,1,1,0.125,1199
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'security-group' in self.supported_extension_aliases}},1,1,0.125,1200
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.base_binding_dict = {,1,1,0.125,1201
e0f69d69293f0ffba22a6540f483f05baa48cd6f,4. Establish communication with Cisco Nexus1000V,1,1,0.125,1202
e0f69d69293f0ffba22a6540f483f05baa48cd6f,2. clear N1kv credential,1,1,0.125,1203
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def __init__(self, configfile=None):",1,1,0.125,1204
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"supported_extension_aliases = [""provider"", ""agent"",",1,1,0.125,1205
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if physical_network_set:,1,1,0.125,1206
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""provider:physical_network specified for Overlay """,1,1,0.125,1207
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network = None,1,1,0.125,1208
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_profile = binding['encap_profile_name'],1,1,0.125,1209
e0f69d69293f0ffba22a6540f483f05baa48cd6f,member_dict['bridgeDomain'] = (net['name'] +,1,1,0.125,1210
e0f69d69293f0ffba22a6540f483f05baa48cd6f,member_dict = {},1,1,0.125,1211
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(segment, dot1qtag) = pair",1,1,0.125,1212
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for pair in segment_pairs:,1,1,0.125,1213
e0f69d69293f0ffba22a6540f483f05baa48cd6f,member_list = [],1,1,0.125,1214
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_encap_segments(self, context, segment_pairs):",1,1,0.125,1215
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding = (,1,1,0.125,1216
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return member_list,1,1,0.125,1217
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_del_multi_segment_request(self, context, net_id, segment_pairs):",1,1,0.125,1218
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise cisco_exceptions.NoClusterFound(),1,1,0.125,1219
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mapping_dict = {},1,1,0.125,1220
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict[encap_profile] = profile_dict,1,1,0.125,1221
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_dict = {'name': encap_profile,",1,1,0.125,1222
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_dict = encap_dict[encap_profile],1,1,0.125,1223
e0f69d69293f0ffba22a6540f483f05baa48cd6f,member_dict['dot1q'] = dot1qtag,1,1,0.125,1224
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _populate_member_segments(self, context, network, segment_pairs, oper):",1,1,0.125,1225
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"encap_profile = self._get_cluster(segment1, segment2,",1,1,0.125,1226
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pair_list = [],1,1,0.125,1227
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for pair in segments.split(','):",1,1,0.125,1228
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if net_profile.segment_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,1229
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return pair_list,1,1,0.125,1230
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not attributes.is_attr_set(segments):,1,1,0.125,1231
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segments = attrs.get(param),1,1,0.125,1232
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"valid_seg_types = [c_const.NETWORK_TYPE_VLAN,",1,1,0.125,1233
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _parse_multi_segments(self, context, attrs, param):",1,1,0.125,1234
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Populate trunk network dict with member segments.,1,1,0.125,1235
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['del_segment_list'] = trunk_list,1,1,0.125,1236
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['add_segment_list'] = trunk_list,1,1,0.125,1237
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if oper == n1kv.SEGMENT_ADD:,1,1,0.125,1238
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"member_dict = {'segment': net['name'],",1,1,0.125,1239
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for (segment, dot1qtag) in segment_pairs:",1,1,0.125,1240
e0f69d69293f0ffba22a6540f483f05baa48cd6f,trunk_list = [],1,1,0.125,1241
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if encap_profile is not None:,1,1,0.125,1242
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for (segment1, segment2) in segment_pairs:",1,1,0.125,1243
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segmentation_id < 5000:,1,1,0.125,1244
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _check_provider_update(self, context, attrs):",1,1,0.125,1245
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for mapping in cluster[c_const.MAPPINGS]:,1,1,0.125,1246
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for cluster in sorted(clusters, key=lambda k: k['size']):",1,1,0.125,1247
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_cluster(self, segment1, segment2, clusters):",1,1,0.125,1248
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Plugin does not support updating provider attributes"")",1,1,0.125,1249
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# TBD : Need to handle provider network updates,1,1,0.125,1250
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return,1,1,0.125,1251
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return (network_type, physical_network, segmentation_id)",1,1,0.125,1252
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return cluster['encapProfileName'],1,1,0.125,1253
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""provider:physical_network required"")",1,1,0.125,1254
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = (_(""Unknown provider:physical_network %s""),",1,1,0.125,1255
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if physical_network == network_profile[,1,1,0.125,1256
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for network_profile in network_profiles:,1,1,0.125,1257
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profiles = n1kv_db_v2.get_network_profiles(),1,1,0.125,1258
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if network_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,1259
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for segment in mapping[c_const.SEGMENTS]:,1,1,0.125,1260
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _extend_mapping_dict(self, context, mapping_dict, segment):",1,1,0.125,1261
e0f69d69293f0ffba22a6540f483f05baa48cd6f,cluster['size'] = 0,1,1,0.125,1262
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not segment_pairs:,1,1,0.125,1263
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if cluster[c_const.STATE] == c_const.ONLINE:,1,1,0.125,1264
e0f69d69293f0ffba22a6540f483f05baa48cd6f,cluster = cluster[c_const.PROPERTIES],1,1,0.125,1265
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for cluster in clusters['body'][c_const.SET]:,1,1,0.125,1266
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict = {},1,1,0.125,1267
e0f69d69293f0ffba22a6540f483f05baa48cd6f,online_clusters = [],1,1,0.125,1268
e0f69d69293f0ffba22a6540f483f05baa48cd6f,clusters = n1kvclient.get_clusters(),1,1,0.125,1269
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_pairs: List of segments in UUID pairs,1,1,0.125,1270
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Extend a mapping dictionary with dot1q tag and bridge-domain name.,1,1,0.125,1271
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _send_add_multi_segment_request(self, context, net_id, segment_pairs):",1,1,0.125,1272
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mapping_dict['bridgeDomain'] = (net['name'] +,1,1,0.125,1273
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mapping_dict['dot1q'] = str(net[providernet.SEGMENTATION_ID]),1,1,0.125,1274
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if net[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,1275
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net = self.get_network(context, segment)",1,1,0.125,1276
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param mapping_dict: dictionary to populate values,1,1,0.125,1277
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if a_set & b_set:,1,1,0.125,1278
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""provider:network_type %s not supported""), network_type",1,1,0.125,1279
e0f69d69293f0ffba22a6540f483f05baa48cd6f,a_set_q = (db_session.query(n1kv_models_v2.ProfileBinding).,1,1,0.125,1280
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""%s is not a valid ip address"") % ip",1,1,0.125,1281
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Verify whether a network profile for given id exists.,1,1,0.125,1282
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def network_profile_exists(self, context, id):",1,1,0.125,1283
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return create_profile_binding(db_session,",1,1,0.125,1284
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: profile binding object,1,1,0.125,1285
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_profile_id: UUID representing network profile,1,1,0.125,1286
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session,",1,1,0.125,1287
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_network_profile_tenant(self,",1,1,0.125,1288
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._get_network_collection_for_tenant(context.session,",1,1,0.125,1289
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._get_collection(context, n1kv_models_v2.NetworkProfile,",1,1,0.125,1290
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_network_profiles(self, context, filters=None, fields=None):",1,1,0.125,1291
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._make_network_profile_dict(profile, fields)",1,1,0.125,1292
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile dictionary. Only these fields will be returned,1,1,0.125,1293
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:params fields: a list of strings that are valid keys in a  network,1,1,0.125,1294
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the network profile to retrieve,1,1,0.125,1295
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Retrieve a network profile.,1,1,0.125,1296
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing network profile,1,1,0.125,1297
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return False,1,1,0.125,1298
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_segment_range(self, data):",1,1,0.125,1299
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _validate_multicast_ip_range(self, network_profile):",1,1,0.125,1300
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if netaddr.IPAddress(ip) <= netaddr.IPAddress('224.0.0.255'):,1,1,0.125,1301
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""%s is not a valid multicast ip address"") % ip",1,1,0.125,1302
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not netaddr.IPAddress(ip).is_multicast():,1,1,0.125,1303
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"for ip in [min_ip, max_ip]:",1,1,0.125,1304
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Invalid multicast ip address range. """,1,1,0.125,1305
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"min_ip, max_ip = (network_profile",1,1,0.125,1306
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Invalid segment range. example range: 500-550"")",1,1,0.125,1307
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _validate_network_profile_args(self, context, p):",1,1,0.125,1308
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if not re.match(r""(\d+)\-(\d+)"", network_profile[""segment_range""]):",1,1,0.125,1309
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _validate_segment_range(self, network_profile):",1,1,0.125,1310
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment_type != c_const.NETWORK_TYPE_TRUNK:,1,1,0.125,1311
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_type = p['segment_type'].lower(),1,1,0.125,1312
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param p: network profile object,1,1,0.125,1313
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Validate completeness of Nexus1000V network profile arguments.,1,1,0.125,1314
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_network_profile(self, context, id, fields=None):",1,1,0.125,1315
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if is_updated:,1,1,0.125,1316
e0f69d69293f0ffba22a6540f483f05baa48cd6f,# is not yet updated.,1,1,0.125,1317
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if self._segment_in_use(context.session,",1,1,0.125,1318
e0f69d69293f0ffba22a6540f483f05baa48cd6f,options and if user is admin.,1,1,0.125,1319
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add/remove network profile to tenant-id binding for the corresponding,1,1,0.125,1320
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_network_profile(self, context, id, network_profile):",1,1,0.125,1321
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self._make_network_profile_dict(_profile),1,1,0.125,1322
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"_profile = delete_network_profile(context.session, id,",1,1,0.125,1323
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NetworkProfileInUse(profile=id),1,1,0.125,1324
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: deleted network profile dictionary,1,1,0.125,1325
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: updated network profile dictionary,1,1,0.125,1326
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing network profile to delete,1,1,0.125,1327
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def delete_network_profile(self, context, id):",1,1,0.125,1328
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self._make_network_profile_dict(net_profile),1,1,0.125,1329
e0f69d69293f0ffba22a6540f483f05baa48cd6f,def _remove_all_fake_policy_profiles(self):,1,1,0.125,1330
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for tenant in p[c_const.ADD_TENANTS]:,1,1,0.125,1331
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if p.get(c_const.ADD_TENANTS):,1,1,0.125,1332
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing network profile to update,1,1,0.125,1333
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is_updated = False,1,1,0.125,1334
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if (p.get('multicast_ip_range') and,1,1,0.125,1335
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if p.get(""multicast_ip_range""):",1,1,0.125,1336
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if original_net_p.segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,1337
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if original_net_p.segment_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,1338
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"updated_net_p = update_network_profile(context.session, id, p,",1,1,0.125,1339
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if not self._segment_in_use(context.session, original_net_p):",1,1,0.125,1340
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if (p.get(""segment_range"") and",1,1,0.125,1341
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""multicast_ip_range not required"")",1,1,0.125,1342
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""segment_range not required for TRUNK"")",1,1,0.125,1343
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"original_net_p = get_network_profile(context.session, id,",1,1,0.125,1344
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if p.get('segment_range'):,1,1,0.125,1345
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if original_net_p.segment_type == c_const.NETWORK_TYPE_TRUNK:,1,1,0.125,1346
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if remove_tenant == context.tenant_id:,1,1,0.125,1347
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for remove_tenant in p[c_const.REMOVE_TENANTS]:,1,1,0.125,1348
e0f69d69293f0ffba22a6540f483f05baa48cd6f,for bindings in profile_bindings:,1,1,0.125,1349
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_bindings = _get_profile_bindings_by_uuid(context.session,",1,1,0.125,1350
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""%s is reserved multicast ip address"") % ip",1,1,0.125,1351
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self._make_network_profile_dict(,1,1,0.125,1352
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if netaddr.IPAddress(min_ip) > netaddr.IPAddress(max_ip):,1,1,0.125,1353
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if profiles:,1,1,0.125,1354
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return (db_session.query(n1kv_models_v2.PolicyProfile).,1,1,0.125,1355
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _policy_profile_exists(self, id):",1,1,0.125,1356
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"res = {""id"": policy_profile[""id""], ""name"": policy_profile[""name""]}",1,1,0.125,1357
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _make_policy_profile_dict(self, policy_profile, fields=None):",1,1,0.125,1358
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not profile_ids:,1,1,0.125,1359
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_ids = (db_session.query(n1kv_models_v2.,1,1,0.125,1360
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Policy Profile Mixin.""""""",1,1,0.125,1361
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.NetworkProfileNotFound(profile=name),1,1,0.125,1362
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: network profile object,1,1,0.125,1363
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if ((profile_seg_min <= seg_min <= profile_seg_max) or,1,1,0.125,1364
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_seg_min, profile_seg_max = self._get_segment_range(",1,1,0.125,1365
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min, seg_max = self._get_segment_range(",1,1,0.125,1366
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK_TYPE_TRUNK in,1,1,0.125,1367
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if net_p[""name""] == name:",1,1,0.125,1368
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_range = profile.segment_range,1,1,0.125,1369
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._make_policy_profile_dict(profile, fields)",1,1,0.125,1370
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_policy_profiles(self, context, filters=None, fields=None):",1,1,0.125,1371
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if context.is_admin or not c_conf.CISCO_N1K.restrict_policy_profiles:,1,1,0.125,1372
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self._make_policy_profile_dict(,1,1,0.125,1373
e0f69d69293f0ffba22a6540f483f05baa48cd6f,raise c_exc.PolicyProfileNameNotFound(profile_name=name),1,1,0.125,1374
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _get_policy_profile_by_name(self, name):",1,1,0.125,1375
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _delete_policy_profile(self, policy_profile_id):",1,1,0.125,1376
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = (_(""Invalid multicast IP range '%(min_ip)s-%(max_ip)s':""",1,1,0.125,1377
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def remove_policy_profile_tenant(self, policy_profile_id, tenant_id):",1,1,0.125,1378
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def add_policy_profile_tenant(self,",1,1,0.125,1379
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return self._make_policy_profile_dict(get_policy_profile(,1,1,0.125,1380
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._get_collection(context, n1kv_models_v2.PolicyProfile,",1,1,0.125,1381
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p = policy_profile[""policy_profile""]",1,1,0.125,1382
e0f69d69293f0ffba22a6540f483f05baa48cd6f,option and if user is admin.,1,1,0.125,1383
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update a policy profile.,1,1,0.125,1384
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def update_policy_profile(self, context, id, policy_profile):",1,1,0.125,1385
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_policy_profile_bindings(self, context, filters=None, fields=None):",1,1,0.125,1386
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"return self._get_policy_collection_for_tenant(context.session,",1,1,0.125,1387
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if id and profile.id == id:,1,1,0.125,1388
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def get_policy_profile(self, context, id, fields=None):",1,1,0.125,1389
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment_type == c_const.NETWORK_TYPE_TRUNK:,1,1,0.125,1390
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _validate_network_profile(self, net_p):",1,1,0.125,1391
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Argument sub_type missing """,1,1,0.125,1392
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if not attributes.is_attr_set(net_p.get(""sub_type"")):",1,1,0.125,1393
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""segment_range not required for trunk"")",1,1,0.125,1394
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if net_p[""segment_range""]:",1,1,0.125,1395
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Argument physical_network missing """,1,1,0.125,1396
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.125,1397
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""segment_type should either be vlan, overlay, """,1,1,0.125,1398
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if net_p['sub_type'] != c_const.NETWORK_SUBTYPE_NATIVE_VXLAN:,1,1,0.125,1399
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_type = net_p[""segment_type""].lower()",1,1,0.125,1400
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Arguments segment_type missing""",1,1,0.125,1401
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"if net_p[""segment_type""] == """":",1,1,0.125,1402
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = (_(""segment range is invalid. Valid range is : """,1,1,0.125,1403
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param net_p: network profile object,1,1,0.125,1404
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Validate completeness of a network profile arguments.,1,1,0.125,1405
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.125,1406
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Argument segment_range missing """,1,1,0.125,1407
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"((seg_min in range(p_const.MIN_VLAN_TAG,",1,1,0.125,1408
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = (_(""Segment range is invalid, select from """,1,1,0.125,1409
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_max in range(c_const.N1KV_VLAN_RESERVED_MAX + 1,",1,1,0.125,1410
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(seg_min in range(c_const.N1KV_VLAN_RESERVED_MAX + 1,",1,1,0.125,1411
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_max in range(p_const.MIN_VLAN_TAG,",1,1,0.125,1412
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p['multicast_ip_range'] = '0.0.0.0',1,1,0.125,1413
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not ((seg_min <= seg_max) and,1,1,0.125,1414
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min, seg_max = self._get_segment_range(net_p['segment_range'])",1,1,0.125,1415
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the network profile being updated,1,1,0.125,1416
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"def _validate_segment_range_uniqueness(self, context, net_p, id=None):",1,1,0.125,1417
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"msg = _(""Argument multicast_ip_range missing""",1,1,0.125,1418
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if not attributes.is_attr_set(multicast_ip_range):,1,1,0.125,1419
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multicast_ip_range = net_p.get(""multicast_ip_range"")",1,1,0.125,1420
e0f69d69293f0ffba22a6540f483f05baa48cd6f,if (seg_min > seg_max or,1,1,0.125,1421
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"elif segment_type in [c_const.NETWORK_TYPE_OVERLAY,",1,1,0.125,1422
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_delete_port_request(context, port, vm_network)",1,0,0.0,1423
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network['port_count'] -= 1,1,0,0.0,1424
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(N1kvNeutronPluginV2, self).delete_port(context, port['id'])",1,0,0.0,1425
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vm_network['name'],",1,0,0.0,1426
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network['port_count']),1,0,0.0,1427
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.delete_vm_network(context.session,",1,0,0.0,1428
e0f69d69293f0ffba22a6540f483f05baa48cd6f,do_notify=False),1,0,0.0,1429
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete_port_db(context, port, vm_network)",1,0,0.0,1430
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._send_update_subnet_request(sub),1,0,0.0,1431
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.l3plugin.disassociate_floatingips(context, id,",1,0,0.0,1432
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port['network_id']),1,0,0.0,1433
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port[n1kv.PROFILE_ID],",1,0,0.0,1434
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.l3plugin.prevent_l3_port_deletion(context, id)",1,0,0.0,1435
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the port to delete,1,0,0.0,1436
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a port.,1,0,0.0,1437
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: port dictionary,1,0,0.0,1438
e0f69d69293f0ffba22a6540f483f05baa48cd6f,svc_constants.L3_ROUTER_NAT),1,0,0.0,1439
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the port to retrieve,1,0,0.0,1440
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: updated subnet object,1,0,0.0,1441
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Get port: %s"", id)",1,0,0.0,1442
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self).delete_subnet(context, sub['id'])",1,0,0.0,1443
e0f69d69293f0ffba22a6540f483f05baa48cd6f,@property,1,0,0.0,1444
e0f69d69293f0ffba22a6540f483f05baa48cd6f,subnet),1,0,0.0,1445
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"id,",1,0,0.0,1446
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('Update subnet'),1,0,0.0,1447
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing subnet to update,1,0,0.0,1448
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update a subnet.,1,0,0.0,1449
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Created subnet: %s"", sub['id'])",1,0,0.0,1450
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(N1kvNeutronPluginV2,",1,0,0.0,1451
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_port_dict_profile(context, port)",1,0,0.0,1452
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_create_subnet_request(context, sub)",1,0,0.0,1453
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('Create subnet'),1,0,0.0,1454
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a subnet.,1,0,0.0,1455
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: subnet object,1,0,0.0,1456
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create subnet for a given network.,1,0,0.0,1457
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Get ports"")",1,0,0.0,1458
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: list of port dictionaries,1,0,0.0,1459
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except AttributeError:,1,0,0.0,1460
e0f69d69293f0ffba22a6540f483f05baa48cd6f,/etc/neutron/cisco_plugins.ini file.,1,0,0.0,1461
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_port_dict_profile(context, updated_port)",1,0,0.0,1462
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"constants.DEVICE_OWNER_ROUTER_GW,",1,0,0.0,1463
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"context.session,",1,0,0.0,1464
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_port_dict_profile(context, pt)",1,0,0.0,1465
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.add_port_binding(session, pt['id'], profile_id)",1,0,0.0,1466
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port),1,0,0.0,1467
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('Create port: profile_id=%s', profile_id)",1,0,0.0,1468
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port['port']),1,0,0.0,1469
e0f69d69293f0ffba22a6540f483f05baa48cd6f,constants.DEVICE_OWNER_FLOATINGIP]):,1,0,0.0,1470
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"[constants.DEVICE_OWNER_DHCP, constants.DEVICE_OWNER_ROUTER_INTF,",1,0,0.0,1471
e0f69d69293f0ffba22a6540f483f05baa48cd6f,updated_port),1,0,0.0,1472
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: port object,1,0,0.0,1473
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create neutron port.,1,0,0.0,1474
e0f69d69293f0ffba22a6540f483f05baa48cd6f,None),1,0,0.0,1475
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Get networks"")",1,0,0.0,1476
e0f69d69293f0ffba22a6540f483f05baa48cd6f,dictionary. Only these fields will be returned.,1,0,0.0,1477
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: deleted subnet object,1,0,0.0,1478
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: list of network dictionaries.,1,0,0.0,1479
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pt['network_id']),1,0,0.0,1480
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except cisco_exceptions.VMNetworkNotFound:,1,0,0.0,1481
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"pt['network_id'],",1,0,0.0,1482
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_count),1,0,0.0,1483
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self).update_port(context, id, port)",1,0,0.0,1484
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Update port: %s"", id)",1,0,0.0,1485
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: updated port object,1,0,0.0,1486
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the port to update,1,0,0.0,1487
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update port parameters.,1,0,0.0,1488
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Created port: %s"", pt)",1,0,0.0,1489
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete_port_db(context, pt, vm_network)",1,0,0.0,1490
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network_name),1,0,0.0,1491
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p_profile,",1,0,0.0,1492
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"pt,",1,0,0.0,1493
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_create_port_request(context,",1,0,0.0,1494
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pt),1,0,0.0,1495
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port['port'],",1,0,0.0,1496
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._process_portbindings_create_and_update(context,",1,0,0.0,1497
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.update_vm_network_port_count(context.session,",1,0,0.0,1498
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing subnet to delete,1,0,0.0,1499
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.db import n1kv_models_v2,1,0,0.0,1500
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('Delete subnet: %s', id)",1,0,0.0,1501
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'<properties>',1,0,0.0,1502
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import mock,1,0,0.0,1503
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"xml.append(""</set>"")",1,0,0.0,1504
e0f69d69293f0ffba22a6540f483f05baa48cd6f,),1,0,0.0,1505
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'</instance>',1,0,0.0,1506
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'</properties>',1,0,0.0,1507
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'<name>pp-%(num)s</name>',1,0,0.0,1508
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'<id>00000000-0000-0000-0000-00000000000%(num)s</id>',1,0,0.0,1509
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"' url=""/api/n1k/virtual-port-profile/%(num)s"">'",1,0,0.0,1510
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif method == 'GET':,1,0,0.0,1511
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'<instance name=""%(num)d""'",1,0,0.0,1512
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""",1,0,0.0,1513
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(TestClientInvalidResponse, self).__init__()",1,0,0.0,1514
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestClientInvalidResponse(TestClient):,1,0,0.0,1515
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(TestClientInvalidRequest, self).__init__()",1,0,0.0,1516
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestClientInvalidRequest(TestClient):,1,0,0.0,1517
e0f69d69293f0ffba22a6540f483f05baa48cd6f,else:,1,0,0.0,1518
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import webob.exc,1,0,0.0,1519
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api import extensions as neutron_extensions,1,0,0.0,1520
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api.v2 import attributes,1,0,0.0,1521
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.common import utils,1,0,0.0,1522
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests import tools,1,0,0.0,1523
e0f69d69293f0ffba22a6540f483f05baa48cd6f,exact match comparison for that value. Each result,1,0,0.0,1524
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.n1kv import n1kv_neutron_plugin,1,0,0.0,1525
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.n1kv import n1kv_client,1,0,0.0,1526
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.extensions import policy_profile,1,0,0.0,1527
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.extensions import network_profile,1,0,0.0,1528
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco import extensions,1,0,0.0,1529
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.db import network_db_v2 as cdb,1,0,0.0,1530
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.db import n1kv_db_v2,1,0,0.0,1531
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,1532
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,0,0.0,1533
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,1534
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron import manager,1,0,0.0,1535
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.extensions import portbindings,1,0,0.0,1536
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron import context,1,0,0.0,1537
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._get_total_profiles()),1,0,0.0,1538
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(TestClient, self).__init__()",1,0,0.0,1539
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_delete_subnet_request(context, subnet)",1,0,0.0,1540
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile, we retrieve the admin tenant-id which we use to replace",1,0,0.0,1541
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._send_delete_logical_network_request(net_p),1,0,0.0,1542
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_create_network_profile_request(context, net_p)",1,0,0.0,1543
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self).delete_network_profile(context, net_p['id'])",1,0,0.0,1544
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_create_logical_network_request(net_p,",1,0,0.0,1545
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile),1,0,0.0,1546
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self).create_network_profile(context,",1,0,0.0,1547
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._replace_fake_tenant_id_with_real(context),1,0,0.0,1548
e0f69d69293f0ffba22a6540f483f05baa48cd6f,belonging to one type (VLAN or Overlay). On creation of network,1,0,0.0,1549
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestClient(n1kv_client.Client):,1,0,0.0,1550
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"Create a network profile, which represents a pool of networks",1,0,0.0,1551
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a network profile.,1,0,0.0,1552
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filters,",1,0,0.0,1553
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Get subnets"")",1,0,0.0,1554
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: list of dictionaries of subnets,1,0,0.0,1555
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Get subnet: %s"", id)",1,0,0.0,1556
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing subnet to retrieve,1,0,0.0,1557
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a network profile.,1,0,0.0,1558
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self).delete_network_profile(context, id)",1,0,0.0,1559
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._send_delete_network_profile_request(net_p),1,0,0.0,1560
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update a network profile.,1,0,0.0,1561
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'netSegmentName', 'id', 'tenantId']}",1,0,0.0,1562
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'dhcp', 'dnsServersList', 'networkAddress',",1,0,0.0,1563
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'ipAddressSubnet', 'description', 'gateway',",1,0,0.0,1564
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'subnet': ['addressRangeStart', 'addressRangeEnd',",1,0,0.0,1565
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'ipAddress', 'subnetId'],",1,0,0.0,1566
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'portId', 'macAddress',",1,0,0.0,1567
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'portProfileId', 'tenantId',",1,0,0.0,1568
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'networkSegment', 'portProfile',",1,0,0.0,1569
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'vmnetwork': ['name', 'networkSegmentId',",1,0,0.0,1570
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.n1kv import n1kv_client,1,0,0.0,1571
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,0,0.0,1572
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._send_update_network_profile_request(net_p),1,0,0.0,1573
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile)),1,0,0.0,1574
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_profile_id,",1,0,0.0,1575
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"update_network_profile(context,",1,0,0.0,1576
e0f69d69293f0ffba22a6540f483f05baa48cd6f,returned by this function will have matched one of the,1,0,0.0,1577
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('add_segments=%s', body['addSegments'])",1,0,0.0,1578
e0f69d69293f0ffba22a6540f483f05baa48cd6f,iterable containing values that will be used for an,1,0,0.0,1579
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"policy_profile,",1,0,0.0,1580
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network,1,0,0.0,1581
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VM Network,1,0,0.0,1582
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port: port dictionary,1,0,0.0,1583
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VM network on the VSM.,1,0,0.0,1584
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"If the VM network already exists, bind this port to the existing",1,0,0.0,1585
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send create port request to VSM.,1,0,0.0,1586
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vm_network_name):,1,0,0.0,1587
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port_count,",1,0,0.0,1588
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.create_vm_network(port,",1,0,0.0,1589
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"port,",1,0,0.0,1590
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"context,",1,0,0.0,1591
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.delete_ip_pool(subnet['id']),1,0,0.0,1592
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.update_network_segment(subnet['network_id'], body=body)",1,0,0.0,1593
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_delete_subnet_request: %s', subnet['name'])",1,0,0.0,1594
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send delete subnet request to VSM.,1,0,0.0,1595
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.update_ip_pool(subnet),1,0,0.0,1596
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_create_port_request: %s', port)",1,0,0.0,1597
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vm_network_name,",1,0,0.0,1598
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_network_dict_member_segments(context, net)",1,0,0.0,1599
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete the port on the VSM.,1,0,0.0,1600
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: network object,1,0,0.0,1601
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create network based on network profile.,1,0,0.0,1602
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: segmentation ID for the network,1,0,0.0,1603
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID of the network,1,0,0.0,1604
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.delete_n1kv_port(vm_network['name'], port['id'])",1,0,0.0,1605
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_delete_port_request: %s', port['id'])",1,0,0.0,1606
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port: port object which is to be deleted,1,0,0.0,1607
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send delete port request to VSM.,1,0,0.0,1608
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy_profile),1,0,0.0,1609
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.update_n1kv_port(vm_network_name, port_id, body)",1,0,0.0,1610
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'macAddress': mac_address},1,0,0.0,1611
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_update_port_request: %s', port_id)",1,0,0.0,1612
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param mac_address: string representing the mac address,1,0,0.0,1613
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_id: UUID representing port to update,1,0,0.0,1614
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send update port request to VSM.,1,0,0.0,1615
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.create_n1kv_port(port, vm_network_name)",1,0,0.0,1616
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_update_subnet_request: %s', subnet['name'])",1,0,0.0,1617
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send update subnet request to VSM.,1,0,0.0,1618
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.create_ip_pool(subnet),1,0,0.0,1619
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'addSegments': [],",1,0,0.0,1620
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'addMappings': (,1,0,0.0,1621
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.ENCAPSULATION_PROFILE_SUFFIX),1,0,0.0,1622
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('del_segments=%s', body['delSegments'])",1,0,0.0,1623
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv.SEGMENT_DEL),1,0,0.0,1624
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._populate_member_segments(context, network, del_segments,",1,0,0.0,1625
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._populate_member_segments(context, network, add_segments,",1,0,0.0,1626
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'delSegments': []},1,0,0.0,1627
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'segmentType': profile['segment_type'],",1,0,0.0,1628
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_create_subnet_request: %s', subnet['id'])",1,0,0.0,1629
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'mode': 'access',",1,0,0.0,1630
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'vlan': network[providernet.SEGMENTATION_ID],",1,0,0.0,1631
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'networkSegmentPool': profile['id'],",1,0,0.0,1632
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'id': network['id'],",1,0,0.0,1633
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_update_network_request: %s', network['id'])",1,0,0.0,1634
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param del_segments: List of segments bindings,1,0,0.0,1635
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests.unit.api.v2 import test_base,1,0,0.0,1636
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"add_segments)),",1,0,0.0,1637
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'delMappings': (,1,0,0.0,1638
e0f69d69293f0ffba22a6540f483f05baa48cd6f,del_segments))},1,0,0.0,1639
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.update_encapsulation_profile(context, encap_profile,",1,0,0.0,1640
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param subnet: subnet dictionary,1,0,0.0,1641
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send create subnet request to VSM.,1,0,0.0,1642
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.delete_network_segment(network['id']),1,0,0.0,1643
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_dict),1,0,0.0,1644
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_dict['delSegments'].append(mapping_dict),1,0,0.0,1645
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK_TYPE_MULTI_SEGMENT):,1,0,0.0,1646
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif (network[providernet.NETWORK_TYPE] ==,1,0,0.0,1647
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.delete_encapsulation_profile(profile_name),1,0,0.0,1648
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"context, network[n1kv.PROFILE_ID])",1,0,0.0,1649
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1650
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.delete_bridge_domain(name),1,0,0.0,1651
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_delete_network_request: %s', network['id'])",1,0,0.0,1652
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send delete network request to VSM.,1,0,0.0,1653
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.update_network_segment(network['id'], body)",1,0,0.0,1654
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict),1,0,0.0,1655
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(network_type, physical_network,",1,0,0.0,1656
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['network']),1,0,0.0,1657
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('Create network: profile_id=%s', profile_id)",1,0,0.0,1658
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_del_multi_segment_request(context, net['id'],",1,0,0.0,1659
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.add_trunk_segment_binding(session,",1,0,0.0,1660
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile['sub_type'])),1,0,0.0,1661
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"binding.physical_network,",1,0,0.0,1662
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding.profile_id),1,0,0.0,1663
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net['id'], del_segments)",1,0,0.0,1664
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.del_multi_segment_binding(session,",1,0,0.0,1665
e0f69d69293f0ffba22a6540f483f05baa48cd6f,del_segments),1,0,0.0,1666
e0f69d69293f0ffba22a6540f483f05baa48cd6f,add_segments),1,0,0.0,1667
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Created network: %s"", net['id'])",1,0,0.0,1668
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv.SEGMENT_DEL)),1,0,0.0,1669
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net['id'], add_segments)",1,0,0.0,1670
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.add_multi_segment_binding(session,",1,0,0.0,1671
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._process_l3_update(context, net, network['network'])",1,0,0.0,1672
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._check_provider_update(context, network['network'])",1,0,0.0,1673
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: updated network object,1,0,0.0,1674
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the network to update,1,0,0.0,1675
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv.SEGMENT_DEL,",1,0,0.0,1676
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.del_trunk_segment_binding(session,",1,0,0.0,1677
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_update_network_request(context, net, add_segments,",1,0,0.0,1678
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Updated network: %s"", net['id'])",1,0,0.0,1679
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Get network: %s"", id)",1,0,0.0,1680
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: requested network dictionary,1,0,0.0,1681
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the network to fetch,1,0,0.0,1682
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(N1kvNeutronPluginV2, self).delete_network(context, id)",1,0,0.0,1683
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding.segmentation_id),1,0,0.0,1684
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.release_vlan(session, binding.physical_network,",1,0,0.0,1685
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.release_vxlan(session, binding.segmentation_id)",1,0,0.0,1686
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Deleted network: %s"", id)",1,0,0.0,1687
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_delete_network_request(context, network)",1,0,0.0,1688
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete_network_db(context, id)",1,0,0.0,1689
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""multi-segment network"") % network['name']",1,0,0.0,1690
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""that is member of a trunk segment"") % network['name']",1,0,0.0,1691
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""delete the associated subnet first"") % network['name']",1,0,0.0,1692
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param id: UUID representing the network to delete,1,0,0.0,1693
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a network.,1,0,0.0,1694
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update network parameters.,1,0,0.0,1695
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete_network_db(context, net['id'])",1,0,0.0,1696
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(physical_network, network_type, segmentation_id,",1,0,0.0,1697
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'seg_id': segmentation_id,",1,0,0.0,1698
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._parse_trunk_segments(context, network['network'],",1,0,0.0,1699
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id),1,0,0.0,1700
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1701
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('Seg list %s ', segment_pairs)",1,0,0.0,1702
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv.SEGMENT_ADD)),1,0,0.0,1703
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._parse_multi_segments(context, network['network'],",1,0,0.0,1704
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'multicast_ip': multicast_ip}),1,0,0.0,1705
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'net_type': network_type,",1,0,0.0,1706
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"except(cisco_exceptions.VSMError,",1,0,0.0,1707
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{'phy_net': physical_network,",1,0,0.0,1708
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'multicast_ip %(multicast_ip)s',",1,0,0.0,1709
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'seg_id %(seg_id)s, '",1,0,0.0,1710
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'seg_type %(net_type)s, '",1,0,0.0,1711
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('Physical_network %(phy_net)s, '",1,0,0.0,1712
e0f69d69293f0ffba22a6540f483f05baa48cd6f,context.tenant_id),1,0,0.0,1713
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id,",1,0,0.0,1714
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv.SEGMENT_ADD,",1,0,0.0,1715
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"physical_network,",1,0,0.0,1716
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile['sub_type'],1,0,0.0,1717
e0f69d69293f0ffba22a6540f483f05baa48cd6f,)),1,0,0.0,1718
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_create_network_request(context, net, segment_pairs)",1,0,0.0,1719
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._send_add_multi_segment_request(context, net['id'],",1,0,0.0,1720
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_network_dict_profile(context, net)",1,0,0.0,1721
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_network_dict_provider(context, net)",1,0,0.0,1722
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._process_l3_create(context, net, network['network'])",1,0,0.0,1723
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_pairs),1,0,0.0,1724
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multicast_ip,",1,0,0.0,1725
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segmentation_id,",1,0,0.0,1726
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_type,",1,0,0.0,1727
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net['id'],",1,0,0.0,1728
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.add_network_binding(session,",1,0,0.0,1729
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network),1,0,0.0,1730
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segmentation_id),1,0,0.0,1731
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.reserve_specific_vlan(session,",1,0,0.0,1732
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile['segment_range']),1,0,0.0,1733
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests.unit import _test_extension_portbindings as test_bindings,1,0,0.0,1734
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'ip_address': '10.0.0.1'}]},1,0,0.0,1735
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests.unit.db import test_db_base_plugin_v2 as test_plugin,1,0,0.0,1736
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(len(expected_profiles), len(res[resource]))",1,0,0.0,1737
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._test_get_policy_profiles(expected_profiles=profiles, admin=False)",1,0,0.0,1738
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_conf.CONF.set_override('restrict_policy_profiles', False,",1,0,0.0,1739
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles. It should work for both admin and non-admin.,1,0,0.0,1740
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles[i]['name']),1,0,0.0,1741
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(expected_profiles[i].name,",1,0,0.0,1742
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profiles[i]['id']),1,0,0.0,1743
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(expected_profiles[i].id,",1,0,0.0,1744
e0f69d69293f0ffba22a6540f483f05baa48cd6f,else:,1,0,0.0,1745
e0f69d69293f0ffba22a6540f483f05baa48cd6f,should work for admin and fail for non-admin.,1,0,0.0,1746
e0f69d69293f0ffba22a6540f483f05baa48cd6f,],1,0,0.0,1747
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient).start(),1,0,0.0,1748
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"mock.patch(n1kv_client.__name__ + "".Client"",",1,0,0.0,1749
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'00000000-0000-0000-0000-000000000003'),1,0,0.0,1750
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'00000000-0000-0000-0000-000000000004'),1,0,0.0,1751
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.get_policy_profile,",1,0,0.0,1752
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertRaises(c_exc.PolicyProfileIdNotFound,",1,0,0.0,1753
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._test_get_policy_profiles(expected_profiles=profiles, admin=True)",1,0,0.0,1754
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_conf.CONF.set_override('restrict_policy_profiles', True,",1,0,0.0,1755
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(TestN1kvPorts, self).setUp()",1,0,0.0,1756
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"True,",1,0,0.0,1757
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(np['name'], 'default_network_profile')",1,0,0.0,1758
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'tenant_id': self.tenant_id}},1,0,0.0,1759
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv.PROFILE_ID: net_profile_id,",1,0,0.0,1760
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertIn('tenant_id', body['networks'][0])",1,0,0.0,1761
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, 200)",1,0,0.0,1762
e0f69d69293f0ffba22a6540f483f05baa48cd6f,set_context=True),1,0,0.0,1763
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id=self.tenant_id,",1,0,0.0,1764
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'some_net',",1,0,0.0,1765
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._test_get_policy_profiles(expected_profiles=[], admin=False)",1,0,0.0,1766
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._make_network('json',",1,0,0.0,1767
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"class TestN1kvNetworks(test_plugin.TestNetworksV2,",1,0,0.0,1768
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""name"")",1,0,0.0,1769
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"instance._get_policy_profile_by_name,",1,0,0.0,1770
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertRaises(c_exc.PolicyProfileNameNotFound,",1,0,0.0,1771
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile['id']),1,0,0.0,1772
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual('00000000-0000-0000-0000-000000000001',",1,0,0.0,1773
e0f69d69293f0ffba22a6540f483f05baa48cd6f,plugin._populate_policy_profiles(),1,0,0.0,1774
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'.TestClient._get_total_profiles') as obj_inst:,1,0,0.0,1775
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient):,1,0,0.0,1776
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'network_id': network['network']['id'],",1,0,0.0,1777
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.,1,0,0.0,1778
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'network_id': port['port']['network_id']}},1,0,0.0,1779
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'tenant_id': port['port']['tenant_id'],",1,0,0.0,1780
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test parameters for subsequent port create sent to the VSM.""""""",1,0,0.0,1781
e0f69d69293f0ffba22a6540f483f05baa48cd6f,client_patch.stop(),1,0,0.0,1782
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, 500)",1,0,0.0,1783
e0f69d69293f0ffba22a6540f483f05baa48cd6f,}},1,0,0.0,1784
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClientInvalidRequest),1,0,0.0,1785
e0f69d69293f0ffba22a6540f483f05baa48cd6f,instance._populate_policy_profiles(),1,0,0.0,1786
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test parameters for first port create sent to the VSM.""""""",1,0,0.0,1787
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port['port']['id']),1,0,0.0,1788
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete('ports', port['port']['id'])",1,0,0.0,1789
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_obj.id),1,0,0.0,1790
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(port['port'][n1kv.PROFILE_ID],",1,0,0.0,1791
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_req.get_response(self.api)),1,0,0.0,1792
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'network_id': network['network']['id']}},1,0,0.0,1793
e0f69d69293f0ffba22a6540f483f05baa48cd6f,TestClientInvalidResponse),1,0,0.0,1794
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.new_create_request('ports', data)",1,0,0.0,1795
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertRaises(c_exc.VMNetworkNotFound,",1,0,0.0,1796
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.get_vm_network,",1,0,0.0,1797
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient),1,0,0.0,1798
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ext_mgr=PolicyProfileTestExtensionManager()),1,0,0.0,1799
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(TestN1kvPolicyProfiles, self).setUp(",1,0,0.0,1800
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestN1kvPolicyProfiles(N1kvPluginTestCase):,1,0,0.0,1801
e0f69d69293f0ffba22a6540f483f05baa48cd6f,req.get_response(self.api),1,0,0.0,1802
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pt['network_id'])),1,0,0.0,1803
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"get_vm_network(db_session,",1,0,0.0,1804
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(n1kv_db_v2.,1,0,0.0,1805
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(old_vmn.port_count, new_vmn.port_count)",1,0,0.0,1806
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'network_id': pt['network_id']}},1,0,0.0,1807
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'tenant_id': pt['tenant_id'],",1,0,0.0,1808
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pt['network_id']),1,0,0.0,1809
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"pt['n1kv:profile_id'],",1,0,0.0,1810
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['network']['id']),1,0,0.0,1811
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_obj.id,",1,0,0.0,1812
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_req.get_response(self.api)),1,0,0.0,1813
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(network['network'][n1kv.PROFILE_ID],",1,0,0.0,1814
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test vlan segment deallocation on network create failure.""""""",1,0,0.0,1815
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'end': '10.0.0.120'}]}},1,0,0.0,1816
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_id=net_id,",1,0,0.0,1817
e0f69d69293f0ffba22a6540f483f05baa48cd6f,gateway_ip=attributes.ATTR_NOT_SPECIFIED),1,0,0.0,1818
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ip_version=4,",1,0,0.0,1819
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_id=net_id, cidr='10.0.0.0/24',",1,0,0.0,1820
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param add_segments: List of segments bindings,1,0,0.0,1821
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, webob.exc.HTTPCreated.code)",1,0,0.0,1822
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'ip_address': '10.0.0.10'}]},1,0,0.0,1823
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'allocation_pools': [{'start': '10.0.0.100',",1,0,0.0,1824
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sorted(subnet['subnet']['host_routes'],",1,0,0.0,1825
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'tenant_id': network['network']['tenant_id'],",1,0,0.0,1826
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'gateway_ip': '10.0.0.1',",1,0,0.0,1827
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'cidr': '10.0.0.0/24',",1,0,0.0,1828
e0f69d69293f0ffba22a6540f483f05baa48cd6f,webob.exc.HTTPNoContent.code),1,0,0.0,1829
e0f69d69293f0ffba22a6540f483f05baa48cd6f,sorted(dns_nameservers)),1,0,0.0,1830
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(sorted(subnet['subnet']['dns_nameservers']),",1,0,0.0,1831
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sorted(host_routes, key=utils.safe_sort_key))",1,0,0.0,1832
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"cidr='2607:f0d0:1002:51::/124',",1,0,0.0,1833
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"ip_version=6,",1,0,0.0,1834
e0f69d69293f0ffba22a6540f483f05baa48cd6f,{'subnet_id': subnet2['subnet']['id']}]},1,0,0.0,1835
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(len(ips), 2)",1,0,0.0,1836
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"test_l3_agent_scheduler.L3SchedulerTestCaseMixin,",1,0,0.0,1837
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestN1kvL3SchedulersTest(,1,0,0.0,1838
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestN1kvL3Test(test_l3.L3NatExtensionTestCase):,1,0,0.0,1839
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(1, mock_method.call_count)",1,0,0.0,1840
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_conf.CONF.set_override('network_auto_schedule', False)",1,0,0.0,1841
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'schedule_network') as mock_method:,1,0,0.0,1842
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test invocation of explicit scheduling for networks.""""""",1,0,0.0,1843
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete('ports', port4['port']['id'])",1,0,0.0,1844
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete('ports', port3['port']['id'])",1,0,0.0,1845
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertIn({'ip_address': '2607:f0d0:1002:51::3',",1,0,0.0,1846
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertIn({'ip_address': '10.0.0.3',",1,0,0.0,1847
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'subnet_id': subnet2['subnet']['id']}, ips)",1,0,0.0,1848
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertIn({'ip_address': '2607:f0d0:1002:51::2',",1,0,0.0,1849
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'subnet_id': subnet1['subnet']['id']}, ips)",1,0,0.0,1850
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertIn({'ip_address': '10.0.0.2',",1,0,0.0,1851
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"key=utils.safe_sort_key),",1,0,0.0,1852
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertEqual(,1,0,0.0,1853
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_range='20-23'),1,0,0.0,1854
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Network deletion fails when a subnet is present on the network.""""""",1,0,0.0,1855
e0f69d69293f0ffba22a6540f483f05baa48cd6f,webob.exc.HTTPConflict.code),1,0,0.0,1856
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(req.get_response(self.api).status_int,",1,0,0.0,1857
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id='somebody_else',",1,0,0.0,1858
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"webob.exc.HTTPCreated.code,",1,0,0.0,1859
e0f69d69293f0ffba22a6540f483f05baa48cd6f,returns a conflict error.,1,0,0.0,1860
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"Verifies that updating a network which cannot be shared,",1,0,0.0,1861
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, webob.exc.HTTPBadRequest.code)",1,0,0.0,1862
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, webob.exc.HTTPNoContent.code)",1,0,0.0,1863
e0f69d69293f0ffba22a6540f483f05baa48cd6f,subnet['subnet']['id']),1,0,0.0,1864
e0f69d69293f0ffba22a6540f483f05baa48cd6f,10000).allocated),1,0,0.0,1865
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertFalse(n1kv_db_v2.get_vxlan_allocation(db_session,",1,0,0.0,1866
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'10000-10001'),1,0,0.0,1867
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,1868
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Test overlay segment deallocation on network create failure.""""""",1,0,0.0,1869
e0f69d69293f0ffba22a6540f483f05baa48cd6f,20).allocated),1,0,0.0,1870
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.new_create_request('networks', data)",1,0,0.0,1871
e0f69d69293f0ffba22a6540f483f05baa48cd6f,webob.exc.HTTPCreated.code),1,0,0.0,1872
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"class TestN1kvSubnets(test_plugin.TestSubnetsV2,",1,0,0.0,1873
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'test_delete_network',",1,0,0.0,1874
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'test_create_subnets_bulk_emulated',",1,0,0.0,1875
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'dns_nameservers': dns_nameservers}},1,0,0.0,1876
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'nexthop': '10.0.2.3'}],1,0,0.0,1877
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{'destination': '192.168.0.0/24',",1,0,0.0,1878
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'nexthop': '10.0.2.2'},",1,0,0.0,1879
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'tenant_id': network['network']['tenant_id']}},1,0,0.0,1880
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'host_routes': host_routes,",1,0,0.0,1881
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'dns_nameservers': ['192.168.0.1'],",1,0,0.0,1882
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'ip_version': 4,",1,0,0.0,1883
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'cidr': '10.0.2.0/24',",1,0,0.0,1884
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'nexthop': '10.0.2.2'}],1,0,0.0,1885
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(subnet_resp.status_int, 400)",1,0,0.0,1886
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'cidr': ""10.0.0.0/24""}}",1,0,0.0,1887
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(TestN1kvSubnets, self).setUp()",1,0,0.0,1888
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.skipTest(""Unsupported test"")",1,0,0.0,1889
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'test_create_subnets_bulk_emulated_plugin_failure'),1,0,0.0,1890
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(pp['name'], 'service_profile')",1,0,0.0,1891
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.skipTest(""Unsupported test case"")",1,0,0.0,1892
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests.unit.extensions import test_l3,1,0,0.0,1893
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"mock.patch(cdb.__name__ + "".get_credential_name"",",1,0,0.0,1894
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"attributes.RESOURCE_ATTRIBUTE_MAP[""ports""].update(",1,0,0.0,1895
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv.EXTENDED_ATTRIBUTES_2_0[""networks""])",1,0,0.0,1896
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"attributes.RESOURCE_ATTRIBUTE_MAP[""networks""].update(",1,0,0.0,1897
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.useFixture(tools.AttributeMapMemento()),1,0,0.0,1898
e0f69d69293f0ffba22a6540f483f05baa48cd6f,neutron_extensions.append_api_extensions_path(extensions.__path__),1,0,0.0,1899
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""password"": ""admin_password""}).start()",1,0,0.0,1900
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"new=lambda self: {""user_name"": ""admin"",",1,0,0.0,1901
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"new=lambda self: ""127.0.0.1"").start()",1,0,0.0,1902
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(N1kvPluginTestCase, self).setUp(self._plugin_name,",1,0,0.0,1903
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"mock.patch(n1kv_client.__name__ + "".Client._get_vsm_hosts"",",1,0,0.0,1904
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.resp_headers)),1,0,0.0,1905
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.DEFAULT_RESP_BODY,",1,0,0.0,1906
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.DEFAULT_RESP_CODE,",1,0,0.0,1907
e0f69d69293f0ffba22a6540f483f05baa48cd6f,},1,0,0.0,1908
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""id"": ""some-uuid-3""}},",1,0,0.0,1909
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""dhcp_pp"": {""properties"": {""name"": ""dhcp_pp"",",1,0,0.0,1910
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv.EXTENDED_ATTRIBUTES_2_0[""ports""])",1,0,0.0,1911
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ext_mgr=ext_mgr),1,0,0.0,1912
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'test_requested_subnet_id_v4_and_v6'),1,0,0.0,1913
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""224.1.1.1-224.1.1.10"")",1,0,0.0,1914
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p_req.get_response(self.ext_api)),1,0,0.0,1915
e0f69d69293f0ffba22a6540f483f05baa48cd6f,_prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY)),1,0,0.0,1916
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_range='10000-1000000001'),1,0,0.0,1917
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, 400)",1,0,0.0,1918
e0f69d69293f0ffba22a6540f483f05baa48cd6f,data['network_profile'].pop('sub_type'),1,0,0.0,1919
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(res.status_int, 201)",1,0,0.0,1920
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif segment_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1921
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1922
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._make_test_profile(),1,0,0.0,1923
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'tenant_id': self.tenant_id},1,0,0.0,1924
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mcast_ip_range=None):,1,0,0.0,1925
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_range=None,",1,0,0.0,1926
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sub_type=None,",1,0,0.0,1927
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_type,",1,0,0.0,1928
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class TestN1kvNetworkProfiles(N1kvPluginTestCase):,1,0,0.0,1929
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._make_test_policy_profile(),1,0,0.0,1930
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""id"": ""some-uuid-2""}},",1,0,0.0,1931
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""havana_pp"": {""properties"": {""name"": ""havana_pp"",",1,0,0.0,1932
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""id"": ""some-uuid-1""}},",1,0,0.0,1933
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile.RESOURCE_ATTRIBUTE_MAP),1,0,0.0,1934
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"name='default_network_profile',",1,0,0.0,1935
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'name': name},1,0,0.0,1936
e0f69d69293f0ffba22a6540f483f05baa48cd6f,create. Default argument value chosen to correspond to the,1,0,0.0,1937
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'n1kv_neutron_plugin.N1kvNeutronPluginV2'),1,0,0.0,1938
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class N1kvPluginTestCase(test_plugin.NeutronDbPluginV2TestCase):,1,0,0.0,1939
e0f69d69293f0ffba22a6540f483f05baa48cd6f,policy_profile.RESOURCE_ATTRIBUTE_MAP),1,0,0.0,1940
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class PolicyProfileTestExtensionManager(object):,1,0,0.0,1941
e0f69d69293f0ffba22a6540f483f05baa48cd6f,attributes.RESOURCE_ATTRIBUTE_MAP.update(,1,0,0.0,1942
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""icehouse-pp"": {""properties"": {""name"": ""icehouse-pp"",",1,0,0.0,1943
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class NetworkProfileTestExtensionManager(object):,1,0,0.0,1944
e0f69d69293f0ffba22a6540f483f05baa48cd6f,return.,1,0,0.0,1945
e0f69d69293f0ffba22a6540f483f05baa48cd6f,This object is returned by mocked requests lib instead of normal response.,1,0,0.0,1946
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""",1,0,0.0,1947
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class FakeResponse(object):,1,0,0.0,1948
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests.unit.scheduler import test_l3_agent_scheduler,1,0,0.0,1949
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.tests.unit.plugins.cisco.n1kv import fake_client,1,0,0.0,1950
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_type=c_const.NETWORK_TYPE_VLAN,",1,0,0.0,1951
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_range='386-400'):,1,0,0.0,1952
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_type: string representing the type of network segment.,1,0,0.0,1953
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_range: string representing the segment range for network,1,0,0.0,1954
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"a value already, it will not be overwritten by this code.",1,0,0.0,1955
e0f69d69293f0ffba22a6540f483f05baa48cd6f,This default here works for many cases. If you need something,1,0,0.0,1956
e0f69d69293f0ffba22a6540f483f05baa48cd6f,of the super-class is called.,1,0,0.0,1957
e0f69d69293f0ffba22a6540f483f05baa48cd6f,our requests. This needs to be done BEFORE the setUp() function,1,0,0.0,1958
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.create_profile_binding(db_session, TENANT_TEST,",1,0,0.0,1959
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.create_profile_binding(db_session, TENANT_NOT_ADMIN,",1,0,0.0,1960
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p['id'], c_const.NETWORK)",1,0,0.0,1961
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.create_profile_binding(db_session, self.tenant_id,",1,0,0.0,1962
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.sync_vlan_allocations(db_session, net_p)",1,0,0.0,1963
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1964
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.sync_vxlan_allocations(db_session, net_p)",1,0,0.0,1965
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'segment_range': segment_range},1,0,0.0,1966
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'tenant_id': self.tenant_id,",1,0,0.0,1967
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'segment_type': segment_type,",1,0,0.0,1968
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile.,1,0,0.0,1969
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"data,",1,0,0.0,1970
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p['network_profile']['id']),1,0,0.0,1971
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(update_res.status_int, 200)",1,0,0.0,1972
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(200, update_res.status_int)",1,0,0.0,1973
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_conf.CONF.set_override('restrict_network_profiles', True,",1,0,0.0,1974
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(tenant4),1,0,0.0,1975
e0f69d69293f0ffba22a6540f483f05baa48cd6f,['tenant4']}},1,0,0.0,1976
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'tenant1']}},1,0,0.0,1977
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(tenant3),1,0,0.0,1978
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.get_profile_binding,",1,0,0.0,1979
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertRaises(c_exc.ProfileTenantBindingNotFound,",1,0,0.0,1980
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"['tenant1', 'tenant3']}}",1,0,0.0,1981
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(3, bindings.count())",1,0,0.0,1982
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(tenant2),1,0,0.0,1983
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(tenant1),1,0,0.0,1984
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(tenant_id),1,0,0.0,1985
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(201, res.status_int)",1,0,0.0,1986
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is_admin=True),1,0,0.0,1987
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.tenant_id,",1,0,0.0,1988
e0f69d69293f0ffba22a6540f483f05baa48cd6f,del data['network_profile']['tenant_id'],1,0,0.0,1989
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'CISCO_N1K'),1,0,0.0,1990
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id='tenant1',",1,0,0.0,1991
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.create_profile_binding(sess1, ctx1.tenant_id,",1,0,0.0,1992
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ctx1.tenant_id),1,0,0.0,1993
e0f69d69293f0ffba22a6540f483f05baa48cd6f,test_bindings.PortBindingsTestCase):,1,0,0.0,1994
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"N1kvPluginTestCase,",1,0,0.0,1995
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"class TestN1kvPorts(test_plugin.TestPortsV2,",1,0,0.0,1996
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"class TestN1kvHTTPResponse(test_plugin.TestV2HTTPResponse,",1,0,0.0,1997
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pass,1,0,0.0,1998
e0f69d69293f0ffba22a6540f483f05baa48cd6f,N1kvPluginTestCase):,1,0,0.0,1999
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"class TestN1kvBasicGet(test_plugin.TestBasicGet,",1,0,0.0,2000
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#not bound to tenant of sess2,1,0,0.0,2001
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ctx2.tenant_id),1,0,0.0,2002
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_conf.CONF.set_override('restrict_network_profiles', False,",1,0,0.0,2003
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sess2, net_p['id'], ctx2.tenant_id)",1,0,0.0,2004
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.get_network_profile,",1,0,0.0,2005
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is_admin=False),1,0,0.0,2006
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id='tenant2',",1,0,0.0,2007
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.assertIsNotNone(profile),1,0,0.0,2008
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(400, res.status_int)",1,0,0.0,2009
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_type=""network""))",1,0,0.0,2010
e0f69d69293f0ffba22a6540f483f05baa48cd6f,net_p['id']),1,0,0.0,2011
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mcast_ip_range='1.1.1.1'),1,0,0.0,2012
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'224.0.0.100-224.0.1.100'),1,0,0.0,2013
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'224.0.1.0-224.0.1.100'}},1,0,0.0,2014
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'224.1.1.1-20.0.0.1'),1,0,0.0,2015
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'10.0.0.1-224.1.1.3'),1,0,0.0,2016
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'224.1.1.1.224.1.1.3'),1,0,0.0,2017
e0f69d69293f0ffba22a6540f483f05baa48cd6f,mcast_ip_range=,1,0,0.0,2018
e0f69d69293f0ffba22a6540f483f05baa48cd6f,NETWORK_SUBTYPE_NATIVE_VXLAN)),1,0,0.0,2019
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"NETWORK_SUBTYPE_NATIVE_VXLAN),",1,0,0.0,2020
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.new_create_request('network_profiles', net_p_dict)",1,0,0.0,2021
e0f69d69293f0ffba22a6540f483f05baa48cd6f,sub_type=(c_const.,1,0,0.0,2022
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(update_res.status_int, 409)",1,0,0.0,2023
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(network_res.status_int, 201)",1,0,0.0,2024
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'tenant_id': 'some_tenant'}},1,0,0.0,2025
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv.PROFILE_ID: net_p['id'],",1,0,0.0,2026
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertEqual(update_res.status_int, 400)",1,0,0.0,2027
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'segment_type': c_const.NETWORK_TYPE_OVERLAY}},1,0,0.0,2028
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'224.0.0.11-224.0.0.111'}},1,0,0.0,2029
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'100-200'}},1,0,0.0,2030
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.deserialize(self.fmt,",1,0,0.0,2031
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertIsNotNone(n1kv_db_v2.get_vlan_allocation(db_session,",1,0,0.0,2032
e0f69d69293f0ffba22a6540f483f05baa48cd6f,client_patch.start(),1,0,0.0,2033
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClientInvalidResponse),1,0,0.0,2034
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vlan),1,0,0.0,2035
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete('network_profiles', net_p['network_profile']['id'])",1,0,0.0,2036
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VLAN_MIN)),1,0,0.0,2037
e0f69d69293f0ffba22a6540f483f05baa48cd6f,expected_code=409),1,0,0.0,2038
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._delete('network_profiles', net_p['id'],",1,0,0.0,2039
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VLAN_MAX + 1),1,0,0.0,2040
e0f69d69293f0ffba22a6540f483f05baa48cd6f,VLAN_MIN - 1),1,0,0.0,2041
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.get_vlan_allocation,",1,0,0.0,2042
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertRaises(c_exc.VlanIDNotFound,",1,0,0.0,2043
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vlan).allocated),1,0,0.0,2044
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.assertFalse(n1kv_db_v2.get_vlan_allocation(db_session,",1,0,0.0,2045
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vlan)),1,0,0.0,2046
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"PHYS_NET,",1,0,0.0,2047
e0f69d69293f0ffba22a6540f483f05baa48cd6f,that need to be deleted,1,0,0.0,2048
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._make_network_profile_dict,",1,0,0.0,2049
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send update network request to VSM.,1,0,0.0,2050
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"policy_profile_id,",1,0,0.0,2051
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"name=name,",1,0,0.0,2052
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_count: integer representing the number of ports on vm network,1,0,0.0,2053
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_id: UUID representing a network,1,0,0.0,2054
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add a VM network for a unique combination of network and,1,0,0.0,2055
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a VM network.,1,0,0.0,2056
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_count):,1,0,0.0,2057
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_id,",1,0,0.0,2058
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"name,",1,0,0.0,2059
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port_count=port_count),1,0,0.0,2060
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"+ ""_"" + network_id)",1,0,0.0,2061
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_id=network_id).one()),1,0,0.0,2062
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filter_by(profile_id=policy_profile_id,",1,0,0.0,2063
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: VM network object,1,0,0.0,2064
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_id: UUID representing network,1,0,0.0,2065
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param status: string representing the new status,1,0,0.0,2066
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_id: UUID representing the port,1,0,0.0,2067
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id=policy_profile_id,",1,0,0.0,2068
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(vm_network),1,0,0.0,2069
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvVlanAllocation.physical_network ==,1,0,0.0,2070
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Create a network profile.""""""",1,0,0.0,2071
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Delete Network Profile.""""""",1,0,0.0,2072
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(net_profile),1,0,0.0,2073
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"elif network_profile[""segment_type""] == c_const.NETWORK_TYPE_TRUNK:",1,0,0.0,2074
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""multicast_ip_range""]",1,0,0.0,2075
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"elif network_profile[""segment_type""] == c_const.NETWORK_TYPE_OVERLAY:",1,0,0.0,2076
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""segment_type"": network_profile[""segment_type""]}",1,0,0.0,2077
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""create_network_profile()"")",1,0,0.0,2078
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""_"" + network_id)",1,0,0.0,2079
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_count: integer representing the number of ports on VM network,1,0,0.0,2080
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"name=vm_network[""name""]).delete()",1,0,0.0,2081
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.query(n1kv_models_v2.N1kVmNetwork).filter_by(,1,0,0.0,2082
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.delete(vm_network),1,0,0.0,2083
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_id),1,0,0.0,2084
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: deleted VM network object,1,0,0.0,2085
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a VM network.,1,0,0.0,2086
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(name=name).one()),1,0,0.0,2087
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Set the status of the port.,1,0,0.0,2088
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.warning(_LW(""vxlan_id %s not found""), vxlan_id)",1,0,0.0,2089
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Release a given VXLAN ID.,1,0,0.0,2090
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_max,",1,0,0.0,2091
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Reserve a specific VLAN ID for the network.,1,0,0.0,2092
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile_id, tenant_id)",1,0,0.0,2093
e0f69d69293f0ffba22a6540f483f05baa48cd6f,else:,1,0,0.0,2094
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_id, get_multicast_ip(network_profile))",1,0,0.0,2095
e0f69d69293f0ffba22a6540f483f05baa48cd6f,NETWORK_SUBTYPE_NATIVE_VXLAN):,1,0,0.0,2096
e0f69d69293f0ffba22a6540f483f05baa48cd6f,).first()),1,0,0.0,2097
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvVxlanAllocation.allocated ==,1,0,0.0,2098
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvVxlanAllocation.vxlan_id <=,1,0,0.0,2099
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Reserving specific vxlan %s from pool"", vxlan_id)",1,0,0.0,2100
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"seg_min,",1,0,0.0,2101
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvVxlanAllocation.vxlan_id >=,1,0,0.0,2102
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Reserve a VXLAN ID within the range of the network profile.,1,0,0.0,2103
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile_name=network_profile.name),1,0,0.0,2104
e0f69d69293f0ffba22a6540f483f05baa48cd6f,)).first(),1,0,0.0,2105
e0f69d69293f0ffba22a6540f483f05baa48cd6f,sql.false()),1,0,0.0,2106
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvVlanAllocation.allocated ==,1,0,0.0,2107
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vlan_id: integer value of the segmentation ID to be reserved,1,0,0.0,2108
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vlan_id=vlan_id).,1,0,0.0,2109
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network=physical_network),1,0,0.0,2110
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""Reserving specific vlan %(vlan)s on physical network """,1,0,0.0,2111
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(vxlan_id=vxlan_id).,1,0,0.0,2112
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Reserve a specific VXLAN ID.,1,0,0.0,2113
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(vxlan_id=vxlan_id).one()),1,0,0.0,2114
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: allocation object,1,0,0.0,2115
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vxlan_id: integer value representing the segmentation ID,1,0,0.0,2116
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile_id=net_p['id'], vxlan_id=vxlan_id)",1,0,0.0,2117
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except c_exc.VxlanIDNotFound:,1,0,0.0,2118
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"get_vxlan_allocation(db_session, vxlan_id)",1,0,0.0,2119
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{""vxlan_min"": seg_min, ""vxlan_max"": seg_max})",1,0,0.0,2120
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""not found""),",1,0,0.0,2121
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.warning(_LW(""vlan_id %(vlan)s on physical network %(network)s """,1,0,0.0,2122
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vlan_id: integer value of the segmentation ID to be released,1,0,0.0,2123
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Release a given VLAN ID.,1,0,0.0,2124
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{""vlan"": vlan_id, ""network"": physical_network})",1,0,0.0,2125
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""%(network)s from pool"",",1,0,0.0,2126
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""delete_network_profile()"")",1,0,0.0,2127
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.delete(network_profile),1,0,0.0,2128
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(db_session.query(n1kv_models_v2.ProfileBinding).,1,0,0.0,2129
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(profile_type=c_const.NETWORK).all()),1,0,0.0,2130
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""multicast_ip_range"": network_profile[""multicast_ip_range""],",1,0,0.0,2131
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""multicast_ip_index"": network_profile[""multicast_ip_index""],",1,0,0.0,2132
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""segment_range"": network_profile[""segment_range""],",1,0,0.0,2133
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""sub_type"": network_profile[""sub_type""],",1,0,0.0,2134
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""segment_type"": network_profile[""segment_type""],",1,0,0.0,2135
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""name"": network_profile[""name""],",1,0,0.0,2136
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""tenant_id"": profile_binding[""tenant_id""]}",1,0,0.0,2137
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(tenant_id=tenant_id).,1,0,0.0,2138
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id=profile_id),1,0,0.0,2139
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id).,1,0,0.0,2140
e0f69d69293f0ffba22a6540f483f05baa48cd6f,update({'tenant_id': tenant_id})),1,0,0.0,2141
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(tenant_id=c_const.TENANT_ID_NOT_SET).,1,0,0.0,2142
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param context: neutron api request context,1,0,0.0,2143
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class NetworkProfile_db_mixin(object):,1,0,0.0,2144
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(profile_id=profile_id)),1,0,0.0,2145
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(profile_type=profile_type)),1,0,0.0,2146
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""physical_network"": network_profile[""physical_network""]}",1,0,0.0,2147
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Verify whether a segment is allocated for given network profile.""""""",1,0,0.0,2148
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(profile_id=network_profile['id'])).first(),1,0,0.0,2149
e0f69d69293f0ffba22a6540f483f05baa48cd6f,an iterable containing values that will be used for an,1,0,0.0,2150
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK),1,0,0.0,2151
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_profile.id,",1,0,0.0,2152
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"context.tenant_id,",1,0,0.0,2153
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"create_profile_binding(context.session,",1,0,0.0,2154
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sync_vxlan_allocations(context.session, net_profile)",1,0,0.0,2155
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif net_profile.segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2156
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sync_vlan_allocations(context.session, net_profile)",1,0,0.0,2157
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._validate_network_profile_args(context, p)",1,0,0.0,2158
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._replace_fake_tenant_id_with_real(context),1,0,0.0,2159
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a network profile.,1,0,0.0,2160
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type=c_const.NETWORK),1,0,0.0,2161
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"context.session,",1,0,0.0,2162
e0f69d69293f0ffba22a6540f483f05baa48cd6f,bindings dictionary. Only these fields will be returned,1,0,0.0,2163
e0f69d69293f0ffba22a6540f483f05baa48cd6f,returned by this function will have matched one of the,1,0,0.0,2164
e0f69d69293f0ffba22a6540f483f05baa48cd6f,exact match comparison for that value. Each result,1,0,0.0,2165
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(tenant),1,0,0.0,2166
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id=profile_id, profile_type=profile_type).delete()",1,0,0.0,2167
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(profile_id=id).delete()),1,0,0.0,2168
e0f69d69293f0ffba22a6540f483f05baa48cd6f,id=id).one(),1,0,0.0,2169
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""update_policy_profile()"")",1,0,0.0,2170
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.delete(policy_profile),1,0,0.0,2171
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""delete_policy_profile()"")",1,0,0.0,2172
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(p_profile),1,0,0.0,2173
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"name=policy_profile[""name""])",1,0,0.0,2174
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""create_policy_profile()"")",1,0,0.0,2175
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(physical_network=physical_network)),1,0,0.0,2176
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type=c_const.NETWORK) is None:,1,0,0.0,2177
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,0,0.0,2178
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id=id,",1,0,0.0,2179
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id=tenant_id,",1,0,0.0,2180
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""get_network_profile()"")",1,0,0.0,2181
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Get Network Profile.""""""",1,0,0.0,2182
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile.update(network_profile),1,0,0.0,2183
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""update_network_profile()"")",1,0,0.0,2184
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Update Network Profile.""""""",1,0,0.0,2185
e0f69d69293f0ffba22a6540f483f05baa48cd6f,_profile.update(policy_profile),1,0,0.0,2186
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""get_policy_profile()"")",1,0,0.0,2187
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.PolicyProfile).filter_by(id=id).one(),1,0,0.0,2188
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id,",1,0,0.0,2189
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('update_profile_binding()'),1,0,0.0,2190
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{""profile_id"": profile_id, ""tenant_id"": tenant_id})",1,0,0.0,2191
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""%(profile_id)s and tenant ID %(tenant_id)s"",",1,0,0.0,2192
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except c_exc.ProfileTenantBindingNotFound:,1,0,0.0,2193
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.delete(binding),1,0,0.0,2194
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""delete_profile_binding()"")",1,0,0.0,2195
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id=tenant_id, profile_id=profile_id).one())",1,0,0.0,2196
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""get_profile_binding()"")",1,0,0.0,2197
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type=profile_type).first()),1,0,0.0,2198
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filter_by(tenant_id=tenant_id, profile_id=profile_id,",1,0,0.0,2199
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""_profile_binding_exists()"")",1,0,0.0,2200
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant_id=tenant_id),1,0,0.0,2201
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id=profile_id,",1,0,0.0,2202
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type):,1,0,0.0,2203
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"profile_id,",1,0,0.0,2204
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile['physical_network'],",1,0,0.0,2205
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_models_v2.N1kvVlanAllocation.vlan_id <= seg_max,",1,0,0.0,2206
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant),1,0,0.0,2207
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvTrunkSegmentBinding(,1,0,0.0,2208
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment2_id=segment2_id)),1,0,0.0,2209
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvMultiSegmentNetworkBinding(,1,0,0.0,2210
e0f69d69293f0ffba22a6540f483f05baa48cd6f,representing the segments to be bridged,1,0,0.0,2211
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a multi-segment network binding.,1,0,0.0,2212
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(trunk_segment_binding),1,0,0.0,2213
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_id=segment_id, dot1qtag=tag))",1,0,0.0,2214
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"trunk_segment_id=trunk_segment_id,",1,0,0.0,2215
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_id),1,0,0.0,2216
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_pair, profile_name):",1,0,0.0,2217
e0f69d69293f0ffba22a6540f483f05baa48cd6f,representing the segments to be trunked,1,0,0.0,2218
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param trunk_segment_id: UUID representing the multi-segment network,1,0,0.0,2219
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a trunk network binding.,1,0,0.0,2220
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment2_id=segment2_id).delete()),1,0,0.0,2221
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment1_id=segment1_id,",1,0,0.0,2222
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multi_segment_id=multi_segment_id,",1,0,0.0,2223
e0f69d69293f0ffba22a6540f483f05baa48cd6f,N1kvMultiSegmentNetworkBinding).filter_by(,1,0,0.0,2224
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(multi_segment_binding),1,0,0.0,2225
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multi_segment_id,",1,0,0.0,2226
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_models_v2.N1kvVlanAllocation.vlan_id >= seg_min,",1,0,0.0,2227
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except exc.NoResultFound:,1,0,0.0,2228
e0f69d69293f0ffba22a6540f483f05baa48cd6f,corresponding dot1qtag,1,0,0.0,2229
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: a list of tuples representing the segment and their,1,0,0.0,2230
e0f69d69293f0ffba22a6540f483f05baa48cd6f,dot1qtag=dot1qtag)).one(),1,0,0.0,2231
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param trunk_segment_id: UUID representing the trunk network whose binding,1,0,0.0,2232
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict[alloc.encap_profile_name].append(seg_pair),1,0,0.0,2233
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(multi_segment_id=multi_segment_id)),1,0,0.0,2234
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: a list of tuples representing the mapped segments,1,0,0.0,2235
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment2_id=segment2_id)).one(),1,0,0.0,2236
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_pair),1,0,0.0,2237
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filter_by(multi_segment_id=multi_segment_id,",1,0,0.0,2238
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.N1kvMultiSegmentNetworkBinding).,1,0,0.0,2239
e0f69d69293f0ffba22a6540f483f05baa48cd6f,try:,1,0,0.0,2240
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: binding object,1,0,0.0,2241
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is to fetch,1,0,0.0,2242
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param multi_segment_id: UUID representing the trunk network whose binding,1,0,0.0,2243
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multi_segment_id, segment_pair):",1,0,0.0,2244
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(db_session.query(n1kv_models_v2.,1,0,0.0,2245
e0f69d69293f0ffba22a6540f483f05baa48cd6f,representing the segments that are bridged,1,0,0.0,2246
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param multi_segment_id: UUID representing the multi-segment network,1,0,0.0,2247
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClientInvalidRequest),1,0,0.0,2248
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from sqlalchemy import sql,1,0,0.0,2249
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from oslo_log import log as logging,1,0,0.0,2250
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import netaddr,1,0,0.0,2251
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import re,1,0,0.0,2252
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'.TestClient._get_total_profiles') as obj_inst:,1,0,0.0,2253
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient):,1,0,0.0,2254
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient),1,0,0.0,2255
e0f69d69293f0ffba22a6540f483f05baa48cd6f,""".Client._get_vsm_hosts"")",1,0,0.0,2256
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a multi-segment network binding.,1,0,0.0,2257
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'.TestClient._get_total_profiles') as obj_inst:,0,0,0.0,2258
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient):,0,0,0.0,2259
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClient),0,0,0.0,2260
e0f69d69293f0ffba22a6540f483f05baa48cd6f,new=fake_client.TestClientInvalidRequest),0,0,0.0,2261
e0f69d69293f0ffba22a6540f483f05baa48cd6f,""".get_credential_name"")",0,0,0.0,2262
e0f69d69293f0ffba22a6540f483f05baa48cd6f,""".Client._get_vsm_hosts"")",0,0,0.0,2263
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import mock,0,0,0.0,2264
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api.v2 import attributes,1,0,0.0,2265
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.common import exceptions as n_exc,1,0,0.0,2266
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db import models_v2,1,0,0.0,2267
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.i18n import _LW,1,0,0.0,2268
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(trunk_segment_id=trunk_segment_id).first()),1,0,0.0,2269
e0f69d69293f0ffba22a6540f483f05baa48cd6f,N1kvTrunkSegmentBinding).,1,0,0.0,2270
e0f69d69293f0ffba22a6540f483f05baa48cd6f,dot1qtag=dot1qtag).delete()),1,0,0.0,2271
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_id=segment_id,",1,0,0.0,2272
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filter_by(trunk_segment_id=trunk_segment_id,",1,0,0.0,2273
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,0,0.0,2274
e0f69d69293f0ffba22a6540f483f05baa48cd6f,representing the segments that are trunked,1,0,0.0,2275
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param trunk_segment_id: UUID representing the trunk network,1,0,0.0,2276
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a trunk network binding.,1,0,0.0,2277
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""",1,0,0.0,2278
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.common import constants as p_const,1,0,0.0,2279
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.db import n1kv_models_v2,1,0,0.0,2280
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,2281
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,0,0.0,2282
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,2283
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(trunk_segment_id=trunk_segment_id)),1,0,0.0,2284
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_id: UUID of the segment to be checked,1,0,0.0,2285
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: boolean,1,0,0.0,2286
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id=policy_profile_id),1,0,0.0,2287
e0f69d69293f0ffba22a6540f483f05baa48cd6f,seg_max)).delete(),1,0,0.0,2288
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(n1kv_models_v2.N1kvVlanAllocation.vlan_id <=,1,0,0.0,2289
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(n1kv_models_v2.N1kvVlanAllocation.vlan_id >= seg_min),",1,0,0.0,2290
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p['physical_network']),",1,0,0.0,2291
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(n1kv_models_v2.N1kvVlanAllocation.physical_network ==,1,0,0.0,2292
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.query(n1kv_models_v2.N1kvVlanAllocation).filter(,1,0,0.0,2293
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete the segment allocation entry from the table.,1,0,0.0,2294
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_id: UUID of the port,1,0,0.0,2295
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: string representing multicast IP,1,0,0.0,2296
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create port binding.,1,0,0.0,2297
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(port_id=port_id).,1,0,0.0,2298
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: port binding object,1,0,0.0,2299
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param port_id: UUID representing the port whose binding is to fetch,1,0,0.0,2300
e0f69d69293f0ffba22a6540f483f05baa48cd6f,maximum multicast ip,1,0,0.0,2301
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: two strings representing minimum multicast ip and,1,0,0.0,2302
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Helper method to retrieve minimum and maximum multicast ip.,1,0,0.0,2303
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif net_p['segment_type'] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2304
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.query(n1kv_models_v2.N1kvVxlanAllocation).filter(,1,0,0.0,2305
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(n1kv_models_v2.N1kvVxlanAllocation.vxlan_id >= seg_min),",1,0,0.0,2306
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(n1kv_models_v2.N1kvVxlanAllocation.vxlan_id <=,1,0,0.0,2307
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter(sql.and_(,1,0,0.0,2308
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Reserve a VLAN ID within the range of the network profile.,1,0,0.0,2309
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vlan_id=vlan_id).one()),1,0,0.0,2310
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filter_by(physical_network=physical_network,",1,0,0.0,2311
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: allocation object for given physical network and VLAN ID,1,0,0.0,2312
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param vlan_id: integer representing the VLAN ID.,1,0,0.0,2313
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(alloc),1,0,0.0,2314
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile_id=net_p['id']),1,0,0.0,2315
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"vlan_id=vlan_id,",1,0,0.0,2316
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"physical_network=net_p['physical_network'],",1,0,0.0,2317
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except c_exc.VlanIDNotFound:,1,0,0.0,2318
e0f69d69293f0ffba22a6540f483f05baa48cd6f,vlan_id),1,0,0.0,2319
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p['physical_network'],",1,0,0.0,2320
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"get_vlan_allocation(db_session,",1,0,0.0,2321
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical network.,1,0,0.0,2322
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_profile.multicast_ip_index += 1,1,0,0.0,2323
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{'seg_min': seg_min, 'seg_max': seg_max})",1,0,0.0,2324
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(segment_id=segment_id).first()),1,0,0.0,2325
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create network binding.,1,0,0.0,2326
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param multicast_ip: Native VXLAN technology needs a multicast IP to be,1,0,0.0,2327
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segmentation_id: integer representing VLAN or VXLAN ID,1,0,0.0,2328
e0f69d69293f0ffba22a6540f483f05baa48cd6f,represents a L2 Domain,1,0,0.0,2329
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param physical_network: Only applicable for VLAN networks. It,1,0,0.0,2330
e0f69d69293f0ffba22a6540f483f05baa48cd6f,MULTI_SEGMENT or TRUNK),1,0,0.0,2331
e0f69d69293f0ffba22a6540f483f05baa48cd6f,":param network_type: string representing type of network (VLAN, OVERLAY,",1,0,0.0,2332
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_id: UUID representing the network,1,0,0.0,2333
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multicast_ip, network_profile_id, add_segments):",1,0,0.0,2334
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug(""seg_min %(seg_min)s, seg_max %(seg_max)s"",",1,0,0.0,2335
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"physical_network, segmentation_id,",1,0,0.0,2336
e0f69d69293f0ffba22a6540f483f05baa48cd6f,one()),1,0,0.0,2337
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(network_id=network_id).,1,0,0.0,2338
e0f69d69293f0ffba22a6540f483f05baa48cd6f,to fetch,1,0,0.0,2339
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network_id: UUID representing the network whose binding is,1,0,0.0,2340
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(segment2_id=segment_id).first()),1,0,0.0,2341
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(segment1_id=segment_id).first()),1,0,0.0,2342
e0f69d69293f0ffba22a6540f483f05baa48cd6f,packets. A single multicast IP can be shared by,1,0,0.0,2343
e0f69d69293f0ffba22a6540f483f05baa48cd6f,multiple VXLAN IDs.,1,0,0.0,2344
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is created,1,0,0.0,2345
e0f69d69293f0ffba22a6540f483f05baa48cd6f,multi-segment or trunk network,1,0,0.0,2346
e0f69d69293f0ffba22a6540f483f05baa48cd6f,range value,1,0,0.0,2347
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:returns: integer values representing minimum and maximum segment,1,0,0.0,2348
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Get the segment range min and max for a network profile.,1,0,0.0,2349
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"add_trunk_segment_binding(db_session, network_id, add_segments)",1,0,0.0,2350
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2351
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"add_multi_segment_binding(db_session, network_id, add_segments)",1,0,0.0,2352
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,0,0.0,2353
e0f69d69293f0ffba22a6540f483f05baa48cd6f,pass,1,0,0.0,2354
e0f69d69293f0ffba22a6540f483f05baa48cd6f,db_session.add(binding),1,0,0.0,2355
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id=network_profile_id),1,0,0.0,2356
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"multicast_ip=multicast_ip,",1,0,0.0,2357
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segmentation_id=segmentation_id,",1,0,0.0,2358
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"physical_network=physical_network,",1,0,0.0,2359
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_type=network_type,",1,0,0.0,2360
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_id=network_id,",1,0,0.0,2361
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.add_network_profile_tenant(context.session,",1,0,0.0,2362
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Delete a network profile.,1,0,0.0,2363
e0f69d69293f0ffba22a6540f483f05baa48cd6f,del_segments):,1,0,0.0,2364
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""network"")",1,0,0.0,2365
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Returns a cluster to apply the segment mapping,1,0,0.0,2366
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Handle Provider network updates.""""""",1,0,0.0,2367
e0f69d69293f0ffba22a6540f483f05baa48cd6f,physical_network),1,0,0.0,2368
e0f69d69293f0ffba22a6540f483f05baa48cd6f,break,1,0,0.0,2369
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'physical_network']:,1,0,0.0,2370
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""(5000+)"")",1,0,0.0,2371
e0f69d69293f0ffba22a6540f483f05baa48cd6f,else:,1,0,0.0,2372
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif network_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2373
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment2: UUID of segment to be mapped,1,0,0.0,2374
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""(1 through 4094)"")",1,0,0.0,2375
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2376
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segmentation_id_set):,1,0,0.0,2377
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif binding.network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,0,0.0,2378
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif binding.network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2379
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif binding.network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2380
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network['id']),1,0,0.0,2381
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment1: UUID of segment to be mapped,1,0,0.0,2382
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param clusters: List of clusters,1,0,0.0,2383
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Implement the Neutron abstractions using Cisco Nexus1000V.,1,0,0.0,2384
e0f69d69293f0ffba22a6540f483f05baa48cd6f,online_clusters.append(cluster),1,0,0.0,2385
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_dict['addMappings'].append(mapping_dict),1,0,0.0,2386
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"mapping_dict, segment2)",1,0,0.0,2387
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"mapping_dict, segment1)",1,0,0.0,2388
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._extend_mapping_dict(context,",1,0,0.0,2389
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'delMappings': []},1,0,0.0,2390
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"'addMappings': [],",1,0,0.0,2391
e0f69d69293f0ffba22a6540f483f05baa48cd6f,online_clusters),1,0,0.0,2392
e0f69d69293f0ffba22a6540f483f05baa48cd6f,len(mapping[c_const.SEGMENTS])),1,0,0.0,2393
e0f69d69293f0ffba22a6540f483f05baa48cd6f,cluster['size'] += 2,1,0,0.0,2394
e0f69d69293f0ffba22a6540f483f05baa48cd6f,cluster['size'] += (,1,0,0.0,2395
e0f69d69293f0ffba22a6540f483f05baa48cd6f,that need to be bridged,1,0,0.0,2396
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param net_id: UUID of the multi-segment network,1,0,0.0,2397
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send Add multi-segment network request to VSM.,1,0,0.0,2398
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.BRIDGE_DOMAIN_SUFFIX),1,0,0.0,2399
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment: id of the segment being populated,1,0,0.0,2400
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param context: neutron api request context,1,0,0.0,2401
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Add extended network parameters.""""""",1,0,0.0,2402
e0f69d69293f0ffba22a6540f483f05baa48cd6f,cisco_exceptions.VSMConnectionFailed):,1,0,0.0,2403
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"except (cisco_exceptions.VSMError,",1,0,0.0,2404
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"super(N1kvNeutronPluginV2, self).__init__()",1,0,0.0,2405
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._setup_rpc(),1,0,0.0,2406
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._setup_vsm(),1,0,0.0,2407
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_cred.Store.initialize(),1,0,0.0,2408
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network_db_v2.delete_all_n1kv_credentials(),1,0,0.0,2409
e0f69d69293f0ffba22a6540f483f05baa48cd6f,portbindings.CAP_PORT_FILTER:,1,0,0.0,2410
e0f69d69293f0ffba22a6540f483f05baa48cd6f,portbindings.VIF_DETAILS: {,1,0,0.0,2411
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,",1,0,0.0,2412
e0f69d69293f0ffba22a6540f483f05baa48cd6f,3. Initialize Nexus1000v and Credential DB,1,0,0.0,2413
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._remove_all_fake_policy_profiles(),1,0,0.0,2414
e0f69d69293f0ffba22a6540f483f05baa48cd6f,1. Initialize VIF type to OVS,1,0,0.0,2415
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Initialize Nexus1000V Neutron plugin.,1,0,0.0,2416
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""dhcp_agent_scheduler""]",1,0,0.0,2417
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""binding"", ""credential"", ""quotas"",",1,0,0.0,2418
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""policy_profile"", ""external-net"",",1,0,0.0,2419
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""n1kv"", ""network_profile"",",1,0,0.0,2420
e0f69d69293f0ffba22a6540f483f05baa48cd6f,workflow,1,0,0.0,2421
e0f69d69293f0ffba22a6540f483f05baa48cd6f,o_conf.CONF.network_scheduler_driver,1,0,0.0,2422
e0f69d69293f0ffba22a6540f483f05baa48cd6f,),1,0,0.0,2423
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.start_periodic_dhcp_agent_status_check(),1,0,0.0,2424
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"agents_db.AgentExtRpcCallback(),",1,0,0.0,2425
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._delete_policy_profile(pid),1,0,0.0,2426
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._add_policy_profile(vsm_profiles[pid], pid)",1,0,0.0,2427
e0f69d69293f0ffba22a6540f483f05baa48cd6f,plugin_profiles_set.add(profile.id),1,0,0.0,2428
e0f69d69293f0ffba22a6540f483f05baa48cd6f,[profile_name][c_const.PROPERTIES][c_const.ID]),1,0,0.0,2429
e0f69d69293f0ffba22a6540f483f05baa48cd6f,try:,1,0,0.0,2430
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('_populate_policy_profiles'),1,0,0.0,2431
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant-ids.,1,0,0.0,2432
e0f69d69293f0ffba22a6540f483f05baa48cd6f,eventlet.sleep(c_conf.CISCO_N1K.poll_duration),1,0,0.0,2433
e0f69d69293f0ffba22a6540f483f05baa48cd6f,while True:,1,0,0.0,2434
e0f69d69293f0ffba22a6540f483f05baa48cd6f,eventlet.spawn(self._poll_policy_profiles),1,0,0.0,2435
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('_setup_vsm'),1,0,0.0,2436
e0f69d69293f0ffba22a6540f483f05baa48cd6f,is instantiated for the first time and then continue to poll for,1,0,0.0,2437
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self.conn.consume_in_threads(),1,0,0.0,2438
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.conn.create_consumer(svc_topic, self.endpoints, fanout=False)",1,0,0.0,2439
e0f69d69293f0ffba22a6540f483f05baa48cd6f,metadata_rpc.MetadataRpcCallback()],1,0,0.0,2440
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.add_multi_segment_encap_profile_name(session,",1,0,0.0,2441
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_id,",1,0,0.0,2442
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(segment1,",1,0,0.0,2443
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('_send_create_logical_network'),1,0,0.0,2444
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.create_network_segment_pool(profile, context.tenant_id)",1,0,0.0,2445
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_create_network_profile_request: %s', profile['id'])",1,0,0.0,2446
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.delete_logical_network(logical_network_name),1,0,0.0,2447
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.LOGICAL_NETWORK_SUFFIX),1,0,0.0,2448
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.debug('_send_delete_logical_network'),1,0,0.0,2449
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send delete logical network request to VSM.,1,0,0.0,2450
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.create_logical_network(network_profile, tenant_id)",1,0,0.0,2451
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param tenant_id: UUID representing the tenant,1,0,0.0,2452
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""a vlan trunk segment"") % segment",1,0,0.0,2453
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send create logical network request to VSM.,1,0,0.0,2454
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_name),1,0,0.0,2455
e0f69d69293f0ffba22a6540f483f05baa48cd6f,port['id']),1,0,0.0,2456
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""Add the extended parameter member segments to the network.""""""",1,0,0.0,2457
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('%s is not a valid uuid', segment)",1,0,0.0,2458
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"pair_list.append((segment, dot1qtag))",1,0,0.0,2459
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""value"") % dot1qtag",1,0,0.0,2460
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_update_network_profile_request: %s', profile['id'])",1,0,0.0,2461
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.update_network_segment_pool(profile),1,0,0.0,2462
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_delete_network_profile_request: %s',",1,0,0.0,2463
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.delete_network_segment_pool(profile['id']),1,0,0.0,2464
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.create_network_segment(network, profile)",1,0,0.0,2465
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kvclient.create_encapsulation_profile(encap_dict),1,0,0.0,2466
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'del_segment_list': []},1,0,0.0,2467
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment_pairs)),",1,0,0.0,2468
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._get_encap_segments(context,",1,0,0.0,2469
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'add_segment_list': (,1,0,0.0,2470
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_const.ENCAPSULATION_PROFILE_SUFFIX),",1,0,0.0,2471
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv.SEGMENT_ADD),1,0,0.0,2472
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._populate_member_segments(context, network, segment_pairs,",1,0,0.0,2473
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.create_bridge_domain(network, profile['sub_type'])",1,0,0.0,2474
e0f69d69293f0ffba22a6540f483f05baa48cd6f,network[n1kv.PROFILE_ID]),1,0,0.0,2475
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_send_create_network_request: %s', network['id'])",1,0,0.0,2476
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network: network dictionary,1,0,0.0,2477
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Create a bridge domain for network of type Overlay.,1,0,0.0,2478
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send create network request to VSM.,1,0,0.0,2479
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except ValueError:,1,0,0.0,2480
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif binding.network_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2481
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"segment2),",1,0,0.0,2482
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param segment_pairs: List of segments that need to be bridged,1,0,0.0,2483
e0f69d69293f0ffba22a6540f483f05baa48cd6f,trunk_list.append(member_dict),1,0,0.0,2484
e0f69d69293f0ffba22a6540f483f05baa48cd6f,'dot1qtag': dot1qtag},1,0,0.0,2485
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"LOG.debug('_populate_member_segments %s', segment_pairs)",1,0,0.0,2486
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param oper: Operation to be performed,1,0,0.0,2487
e0f69d69293f0ffba22a6540f483f05baa48cd6f,that needs to be trunked,1,0,0.0,2488
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param network: Dictionary containing the trunk network information,1,0,0.0,2489
e0f69d69293f0ffba22a6540f483f05baa48cd6f,member_list.append(member_dict),1,0,0.0,2490
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_dict['delMappings'].append(mapping_dict),1,0,0.0,2491
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""physical network"") % segment",1,0,0.0,2492
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment2))),1,0,0.0,2493
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.get_multi_segment_network_binding(session, net_id,",1,0,0.0,2494
e0f69d69293f0ffba22a6540f483f05baa48cd6f,whose bridging needs to be removed,1,0,0.0,2495
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Send Delete multi-segment network request to VSM.,1,0,0.0,2496
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_dict[profile]),1,0,0.0,2497
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kvclient.update_encapsulation_profile(context, profile,",1,0,0.0,2498
e0f69d69293f0ffba22a6540f483f05baa48cd6f,encap_profile),1,0,0.0,2499
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif oper == n1kv.SEGMENT_DEL:,1,0,0.0,2500
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Parse the multi-segment network attributes.,1,0,0.0,2501
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param attrs: Attributes of the network,1,0,0.0,2502
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param param: Additional parameter indicating an add,1,0,0.0,2503
e0f69d69293f0ffba22a6540f483f05baa48cd6f,elif physical_network != binding.physical_network:,1,0,0.0,2504
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""a vxlan trunk segment"") % segment",1,0,0.0,2505
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""another trunk segment"") % segment",1,0,0.0,2506
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment),1,0,0.0,2507
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param sub_type: Sub-type of the trunk segment,1,0,0.0,2508
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param physical_network: Physical network of the trunk segment,1,0,0.0,2509
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Parse the trunk network attributes.,1,0,0.0,2510
e0f69d69293f0ffba22a6540f483f05baa48cd6f,sub_type):,1,0,0.0,2511
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"pair_list.append((segment1, segment2))",1,0,0.0,2512
e0f69d69293f0ffba22a6540f483f05baa48cd6f,binding1.network_type == binding2.network_type):,1,0,0.0,2513
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment2),1,0,0.0,2514
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment1),1,0,0.0,2515
e0f69d69293f0ffba22a6540f483f05baa48cd6f,uuidutils.is_uuid_like(segment2)):,1,0,0.0,2516
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK_TYPE_OVERLAY],1,0,0.0,2517
e0f69d69293f0ffba22a6540f483f05baa48cd6f,or del operation,1,0,0.0,2518
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"Refer README file for the architecture, new features, and",1,0,0.0,2519
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""""""",1,0,0.0,2520
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"get_network_profile(context.session, id,",1,0,0.0,2521
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""for network profile"")",1,0,0.0,2522
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.N1KV_VLAN_RESERVED_MIN)) or,1,0,0.0,2523
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.N1KV_VLAN_RESERVED_MIN) and,1,0,0.0,2524
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Validate that segment range doesn't overlap.,1,0,0.0,2525
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._validate_multicast_ip_range(net_p),1,0,0.0,2526
e0f69d69293f0ffba22a6540f483f05baa48cd6f,""" for VXLAN multicast network profile"")",1,0,0.0,2527
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._validate_segment_range(net_p),1,0,0.0,2528
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK_TYPE_OVERLAY]:,1,0,0.0,2529
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""multi-segment or trunk"")",1,0,0.0,2530
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p_const.MAX_VLAN_TAG)))):,1,0,0.0,2531
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK_TYPE_MULTI_SEGMENT]:,1,0,0.0,2532
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_const.NETWORK_TYPE_TRUNK,",1,0,0.0,2533
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,2534
e0f69d69293f0ffba22a6540f483f05baa48cd6f,""" for network profile"")",1,0,0.0,2535
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{'min_ip': min_ip, 'max_ip': max_ip})",1,0,0.0,2536
e0f69d69293f0ffba22a6540f483f05baa48cd6f,""" Range should be from low address to high address"") %",1,0,0.0,2537
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except netaddr.AddrFormatError:,1,0,0.0,2538
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p_const.MAX_VLAN_TAG) and,1,0,0.0,2539
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""%(min)s-%(nmin)s, %(nmax)s-%(max)s"") %",1,0,0.0,2540
e0f69d69293f0ffba22a6540f483f05baa48cd6f,driver.DbQuotaDriver):,1,0,0.0,2541
e0f69d69293f0ffba22a6540f483f05baa48cd6f,seg_max > c_const.N1KV_VXLAN_MAX):,1,0,0.0,2542
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p[""segment_range""])",1,0,0.0,2543
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"[profile.segment_type, net_p[""segment_type""]]):",1,0,0.0,2544
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"[profile.segment_type, net_p[""segment_type""]] or",1,0,0.0,2545
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"net_p[""name""])",1,0,0.0,2546
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""max"": c_const.N1KV_VXLAN_MAX})",1,0,0.0,2547
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{""min"": c_const.N1KV_VXLAN_MIN,",1,0,0.0,2548
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""%(min)s-%(max)s"") %",1,0,0.0,2549
e0f69d69293f0ffba22a6540f483f05baa48cd6f,seg_min < c_const.N1KV_VXLAN_MIN or,1,0,0.0,2550
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"{""min"": p_const.MIN_VLAN_TAG,",1,0,0.0,2551
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"c_const.NETWORK_TYPE_MULTI_SEGMENT,",1,0,0.0,2552
e0f69d69293f0ffba22a6540f483f05baa48cd6f,),1,0,0.0,2553
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"physical_network=net_p[""physical_network""]",1,0,0.0,2554
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"db_session=context.session,",1,0,0.0,2555
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""max"": p_const.MAX_VLAN_TAG - 1})",1,0,0.0,2556
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""nmax"": c_const.N1KV_VLAN_RESERVED_MAX + 1,",1,0,0.0,2557
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""nmin"": c_const.N1KV_VLAN_RESERVED_MIN - 1,",1,0,0.0,2558
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"""example range: 224.1.1.1-224.1.1.10"")",1,0,0.0,2559
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except ValueError:,1,0,0.0,2560
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"['multicast_ip_range'].split('-', 1))",1,0,0.0,2561
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"delete_profile_binding(context.session, remove_tenant, id)",1,0,0.0,2562
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"updated_net_p, id)",1,0,0.0,2563
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._validate_segment_range_uniqueness(context,",1,0,0.0,2564
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"delete_segment_allocations(context.session, original_net_p)",1,0,0.0,2565
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p.get(""segment_range"") != original_net_p.segment_range):",1,0,0.0,2566
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.NETWORK_TYPE_TRUNK]:,1,0,0.0,2567
e0f69d69293f0ffba22a6540f483f05baa48cd6f,LOG.error(msg),1,0,0.0,2568
e0f69d69293f0ffba22a6540f483f05baa48cd6f,#TODO(abhraut): Remove check when Trunk supports segment range.,1,0,0.0,2569
e0f69d69293f0ffba22a6540f483f05baa48cd6f,continue,1,0,0.0,2570
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Validate multicast ip range values.,1,0,0.0,2571
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p[c_const.ADD_TENANTS], c_const.NETWORK)",1,0,0.0,2572
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"update_profile_binding(context.session, id,",1,0,0.0,2573
e0f69d69293f0ffba22a6540f483f05baa48cd6f,p[c_const.ADD_TENANTS].append(bindings.tenant_id),1,0,0.0,2574
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_id=id),1,0,0.0,2575
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Update a network profile.,1,0,0.0,2576
e0f69d69293f0ffba22a6540f483f05baa48cd6f,context.tenant_id),1,0,0.0,2577
e0f69d69293f0ffba22a6540f483f05baa48cd6f,context.tenant_id)):,1,0,0.0,2578
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sync_vlan_allocations(context.session, updated_net_p)",1,0,0.0,2579
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"sync_vxlan_allocations(context.session, updated_net_p)",1,0,0.0,2580
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"(p.get(""multicast_ip_range"") !=",1,0,0.0,2581
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"original_net_p.get(""multicast_ip_range""))):",1,0,0.0,2582
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Validate segment range values.,1,0,0.0,2583
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._validate_segment_range_uniqueness(context, p)",1,0,0.0,2584
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._validate_network_profile(p),1,0,0.0,2585
e0f69d69293f0ffba22a6540f483f05baa48cd6f,except c_exc.NetworkProfileNotFound(profile=id):,1,0,0.0,2586
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"get_network_profile(context.session, id, context.tenant_id)",1,0,0.0,2587
e0f69d69293f0ffba22a6540f483f05baa48cd6f,:param tenant_id: UUID representing the tenant,1,0,0.0,2588
e0f69d69293f0ffba22a6540f483f05baa48cd6f,Add a tenant to a network profile.,1,0,0.0,2589
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant_id):,1,0,0.0,2590
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_profile_id,",1,0,0.0,2591
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"NetworkProfile,",1,0,0.0,2592
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.,1,0,0.0,2593
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filters=filters, fields=fields)",1,0,0.0,2594
e0f69d69293f0ffba22a6540f483f05baa48cd6f,context.tenant_id)),1,0,0.0,2595
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"update_network_profile(context.session, id, p,",1,0,0.0,2596
e0f69d69293f0ffba22a6540f483f05baa48cd6f,self._validate_multicast_ip_range(p),1,0,0.0,2597
e0f69d69293f0ffba22a6540f483f05baa48cd6f,segment_range),1,0,0.0,2598
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(profile_seg_min <= seg_max <= profile_seg_max) or,1,0,0.0,2599
e0f69d69293f0ffba22a6540f483f05baa48cd6f,((seg_min <= profile_seg_min) and,1,0,0.0,2600
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.common import topics,1,0,0.0,2601
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.extensions import portbindings,1,0,0.0,2602
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db.quota import driver,1,0,0.0,2603
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db import portbindings_db,1,0,0.0,2604
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db import external_net_db,1,0,0.0,2605
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db import db_base_plugin_v2,1,0,0.0,2606
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db import agentschedulers_db,1,0,0.0,2607
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.db import agents_db,1,0,0.0,2608
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.common import rpc as n_rpc,1,0,0.0,2609
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from oslo_utils import excutils,1,0,0.0,2610
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.common import exceptions as n_exc,1,0,0.0,2611
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.common import constants,1,0,0.0,2612
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api.v2 import attributes,1,0,0.0,2613
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api.rpc.handlers import metadata_rpc,1,0,0.0,2614
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api.rpc.handlers import dhcp_rpc,1,0,0.0,2615
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.api.rpc.agentnotifiers import dhcp_rpc_agent_api,1,0,0.0,2616
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from oslo_utils import uuidutils,1,0,0.0,2617
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.extensions import providernet,1,0,0.0,2618
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.i18n import _LW,1,0,0.0,2619
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron import manager,1,0,0.0,2620
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,2621
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"agentschedulers_db.DhcpAgentSchedulerDbMixin,",1,0,0.0,2622
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"network_db_v2.Credential_db_mixin,",1,0,0.0,2623
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.PolicyProfile_db_mixin,",1,0,0.0,2624
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"n1kv_db_v2.NetworkProfile_db_mixin,",1,0,0.0,2625
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"portbindings_db.PortBindingMixin,",1,0,0.0,2626
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"external_net_db.External_net_db_mixin,",1,0,0.0,2627
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"class N1kvNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,",1,0,0.0,2628
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.common import utils,1,0,0.0,2629
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.common import constants as svc_constants,1,0,0.0,2630
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.n1kv import n1kv_client,1,0,0.0,2631
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.db import network_db_v2,1,0,0.0,2632
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.db import n1kv_db_v2,1,0,0.0,2633
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,2634
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_exceptions,1,0,0.0,2635
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from neutron.plugins.cisco.common import cisco_credentials_v2 as c_cred,1,0,0.0,2636
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from oslo_utils import importutils,1,0,0.0,2637
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from oslo_log import log as logging,1,0,0.0,2638
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(seg_max >= profile_seg_max))):,1,0,0.0,2639
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self.add_policy_profile_tenant(context.session,",1,0,0.0,2640
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"delete_profile_binding(None, tenant_id, policy_profile_id)",1,0,0.0,2641
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.POLICY),1,0,0.0,2642
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"update_policy_profile(context.session, id, p))",1,0,0.0,2643
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"delete_profile_binding(context.session, p[""remove_tenant""], id)",1,0,0.0,2644
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"context.session, id))",1,0,0.0,2645
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"p[""add_tenant""])",1,0,0.0,2646
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"id,",1,0,0.0,2647
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type=c_const.POLICY),1,0,0.0,2648
e0f69d69293f0ffba22a6540f483f05baa48cd6f,from oslo_config import cfg as o_conf,1,0,0.0,2649
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"PolicyProfile,",1,0,0.0,2650
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"self._make_policy_profile_dict,",1,0,0.0,2651
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(id=id).first()),1,0,0.0,2652
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(profile_type=c_const.POLICY).all()),1,0,0.0,2653
e0f69d69293f0ffba22a6540f483f05baa48cd6f,.filter_by(tenant_id=tenant_id).,1,0,0.0,2654
e0f69d69293f0ffba22a6540f483f05baa48cd6f,ProfileBinding.profile_id),1,0,0.0,2655
e0f69d69293f0ffba22a6540f483f05baa48cd6f,class PolicyProfile_db_mixin(object):,1,0,0.0,2656
e0f69d69293f0ffba22a6540f483f05baa48cd6f,(db_session.query(n1kv_models_v2.PolicyProfile).,1,0,0.0,2657
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter_by(id=policy_profile_id).delete()),1,0,0.0,2658
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"filter_by(tenant_id=c_const.TENANT_ID_NOT_SET,",1,0,0.0,2659
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type=c_const.POLICY)),1,0,0.0,2660
e0f69d69293f0ffba22a6540f483f05baa48cd6f,import eventlet,1,0,0.0,2661
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"policy_profile[""id""],",1,0,0.0,2662
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"create_profile_binding(None,",1,0,0.0,2663
e0f69d69293f0ffba22a6540f483f05baa48cd6f,create_policy_profile(policy_profile),1,0,0.0,2664
e0f69d69293f0ffba22a6540f483f05baa48cd6f,tenant_id=None):,1,0,0.0,2665
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"policy_profile_name,",1,0,0.0,2666
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"delete(synchronize_session=""fetch""))",1,0,0.0,2667
e0f69d69293f0ffba22a6540f483f05baa48cd6f,c_const.TENANT_ID_NOT_SET)).,1,0,0.0,2668
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.ProfileBinding.tenant_id ==,1,0,0.0,2669
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"in_(a_set & b_set),",1,0,0.0,2670
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter(sql.and_(n1kv_models_v2.ProfileBinding.profile_id.,1,0,0.0,2671
e0f69d69293f0ffba22a6540f483f05baa48cd6f,profile_type == c_const.POLICY))),1,0,0.0,2672
e0f69d69293f0ffba22a6540f483f05baa48cd6f,n1kv_models_v2.ProfileBinding.,1,0,0.0,2673
e0f69d69293f0ffba22a6540f483f05baa48cd6f,"tenant_id != c_const.TENANT_ID_NOT_SET,",1,0,0.0,2674
e0f69d69293f0ffba22a6540f483f05baa48cd6f,filter(sql.and_(n1kv_models_v2.ProfileBinding.,1,0,0.0,2675
e0f69d69293f0ffba22a6540f483f05baa48cd6f,test_plugin.NeutronDbPluginV2TestCase):,1,0,0.0,2676
