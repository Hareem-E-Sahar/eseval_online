commit_id,line,line_level_label,count,line_score,row
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"kwargs = {'context': context, 'port': result}",0,3,1.0,1
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import resources,0,3,1.0,2
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import resources,1,3,1.0,3
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import resources,1,3,1.0,4
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import registry,1,3,1.0,5
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import events,1,3,1.0,6
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import resources,1,3,1.0,7
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import registry,1,3,1.0,8
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import events,1,3,1.0,9
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"kwargs = {'context': context, 'port': obj['result']}",1,3,1.0,10
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,to_delete = [o for o in objects if o != obj],0,3,1.0,11
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"kwargs = {'context': context, 'port': obj['result']}",0,3,1.0,12
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"resources.PORT, events.AFTER_UPDATE, plugin, **kwargs)",1,3,1.0,13
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"port = plugin._get_port(rpc_context, port_id)",1,3,1.0,14
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"# session, before we try to retrieve the new port object",1,3,1.0,15
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import registry,1,3,1.0,16
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import events,1,3,1.0,17
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"port = ml2_db.get_port(rpc_context.session, port_id)",0,3,1.0,18
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"kwargs = {'context': self.context, 'port': new_host_port}",1,3,1.0,19
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"kwargs = {'context': self.context, 'port': new_port}",0,3,1.0,20
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"kwargs = {'context': context, 'port': new_host_port}",1,3,1.0,21
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"LOG.debug('Port %s not found during update', port_id)",1,3,1.0,22
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _before_create_subnet(self, context, subnet):",0,2,0.6666666666666666,23
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _create_port_db(self, context, port):",0,2,0.6666666666666666,24
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _before_create_port(self, context, port):",0,2,0.6666666666666666,25
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _after_create_subnet(self, context, result, mech_context):",0,2,0.6666666666666666,26
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,notify = self._test_update_device_up(),1,2,0.6666666666666666,27
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _after_create_network(self, context, result, mech_context):",0,2,0.6666666666666666,28
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _create_network_db(self, context, network):",0,2,0.6666666666666666,29
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _before_create_network(self, context, network):",0,2,0.6666666666666666,30
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _create_port_db(self, context, port):",1,2,0.6666666666666666,31
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _create_network_db(self, context, network):",1,2,0.6666666666666666,32
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import resources,0,2,0.6666666666666666,33
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"resources.PORT, events.AFTER_CREATE, self, **kwargs)",1,2,0.6666666666666666,34
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,resource_ids = [res['result']['id'] for res in objects],1,2,0.6666666666666666,35
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import events,0,2,0.6666666666666666,36
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import registry,0,2,0.6666666666666666,37
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import events,0,2,0.6666666666666666,38
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import registry,0,2,0.6666666666666666,39
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import resources,0,2,0.6666666666666666,40
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.callbacks import exceptions,1,2,0.6666666666666666,41
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import resources,0,2,0.6666666666666666,42
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'context': mock.ANY, 'port': mock.ANY, 'update_device_up': True",1,2,0.6666666666666666,43
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'port', 'after_update', self.plugin, **kwargs)",1,2,0.6666666666666666,44
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _after_create_port(self, context, result, mech_context):",0,2,0.6666666666666666,45
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,kwargs = {,1,2,0.6666666666666666,46
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,context = kwargs['context'],1,2,0.6666666666666666,47
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,self.plugin.port_bound_to_host = port,0,2,0.6666666666666666,48
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (init, super_update_port):",1,2,0.6666666666666666,49
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,plugin = self._create_plugin_for_create_update_port(),0,2,0.6666666666666666,50
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,plugin = ml2_plugin.Ml2Plugin(),1,2,0.6666666666666666,51
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,plugin = self._create_plugin_for_create_update_port(new_host_port),1,2,0.6666666666666666,52
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,plugin = self._create_plugin_for_create_update_port(mock.Mock()),1,2,0.6666666666666666,53
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,l3plugin = manager.NeutronManager.get_service_plugins().get(,0,2,0.6666666666666666,54
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,context = kwargs['context'],0,2,0.6666666666666666,55
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,l3plugin = manager.NeutronManager.get_service_plugins().get(,1,2,0.6666666666666666,56
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mac_address_updated = kwargs.get('mac_address_updated'),1,2,0.6666666666666666,57
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if attrs and portbindings.HOST_ID in attrs:,1,2,0.6666666666666666,58
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if mac_address_updated or update_device_up:,1,2,0.6666666666666666,59
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if port and port['device_owner'] == n_const.DEVICE_OWNER_DVR_INTERFACE:,0,2,0.6666666666666666,60
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.plugins.ml2 import db as ml2_db,0,2,0.6666666666666666,61
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,kwargs = {,1,2,0.6666666666666666,62
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"rpc_context, port['id'], resources.PORT,",0,2,0.6666666666666666,63
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"notify.assert_called_once_with(mock.ANY, mock.ANY, resources.PORT,",0,2,0.6666666666666666,64
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if host and not port:,0,2,0.6666666666666666,65
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"port = plugin.port_bound_to_host(rpc_context, port_id, host)",0,2,0.6666666666666666,66
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,notify = self._test_update_device_up('host'),0,2,0.6666666666666666,67
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def _test_update_device_up(self):,1,1,0.3333333333333333,68
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'context': rpc_context,",1,1,0.3333333333333333,69
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib import exceptions,1,1,0.3333333333333333,70
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,self.plugin.port_bound_to_host.return_value = False,0,1,0.3333333333333333,71
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,with mock.patch('neutron.db.provisioning_blocks.',0,1,0.3333333333333333,72
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'host': host,0,1,0.3333333333333333,73
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,with mock.patch('neutron.callbacks.registry.notify') as notify:,1,1,0.3333333333333333,74
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _test_update_device_up(self, host=None):",0,1,0.3333333333333333,75
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.db import provisioning_blocks,0,1,0.3333333333333333,76
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"if (host and not plugin.port_bound_to_host(rpc_context,",1,1,0.3333333333333333,77
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,except exceptions.PortNotFound:,1,1,0.3333333333333333,78
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# NOTE(armax): it's best to remove all objects from the,1,1,0.3333333333333333,79
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"port_id = plugin.update_port_status(rpc_context, port_id,",1,1,0.3333333333333333,80
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"# port doesn't exist, no need to add a provisioning block",0,1,0.3333333333333333,81
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if not port:,0,1,0.3333333333333333,82
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# need to look up the full one before calling provisioning_complete,0,1,0.3333333333333333,83
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# _device_to_port_id may have returned a truncated UUID if the,0,1,0.3333333333333333,84
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,self.plugin._get_port.side_effect = (,1,1,0.3333333333333333,85
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# depends on the host,0,1,0.3333333333333333,86
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return notify,1,1,0.3333333333333333,87
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"postcommit_op = getattr(self.mechanism_manager,",1,1,0.3333333333333333,88
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,self.plugin.port_bound_to_host = mock.MagicMock(return_value=True),1,1,0.3333333333333333,89
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,for obj in objects:,1,1,0.3333333333333333,90
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron.db import provisioning_blocks,0,1,0.3333333333333333,91
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib.callbacks import exceptions,0,1,0.3333333333333333,92
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"""Deleting all ports from create bulk '%s'""),",1,1,0.3333333333333333,93
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,with excutils.save_and_reraise_exception():,1,1,0.3333333333333333,94
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return [obj['bound_context'].current for obj in objects],1,1,0.3333333333333333,95
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,obj['bound_context'] = self._bind_port_if_needed(,1,1,0.3333333333333333,96
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if attrs and attrs.get(portbindings.HOST_ID):,1,1,0.3333333333333333,97
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = obj['attributes'],1,1,0.3333333333333333,98
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,tenant_id = net_data['tenant_id'],1,1,0.3333333333333333,99
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,self.callbacks.notify_ha_port_status = mock.Mock(),0,1,0.3333333333333333,100
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return [obj['result'] for obj in objects],0,1,0.3333333333333333,101
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = port[attributes.PORT],0,1,0.3333333333333333,102
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,tenant_id = net_data['tenant_id'],0,1,0.3333333333333333,103
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,net_data = network[attributes.NETWORK],0,1,0.3333333333333333,104
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"postcommit_op = getattr(self, '_after_create_%s' % resource)",0,1,0.3333333333333333,105
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,for item in items:,0,1,0.3333333333333333,106
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"obj_before_create = getattr(self, '_before_create_%s' % resource)",0,1,0.3333333333333333,107
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'._device_to_port_id'):,1,1,0.3333333333333333,108
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# the special multi-binding status update logic they have that,0,1,0.3333333333333333,109
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,from neutron_lib import exceptions,1,1,0.3333333333333333,110
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"_notify_l3_agent_new_port(resource, event, trigger, **kwargs)",1,1,0.3333333333333333,111
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _create_plugin_for_create_update_port(self, new_host_port):",1,1,0.3333333333333333,112
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,updated_port = mock.MagicMock(),0,1,0.3333333333333333,113
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,db_create_port.return_value = new_port,0,1,0.3333333333333333,114
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,new_port = mock.MagicMock(),0,1,0.3333333333333333,115
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def _create_plugin_for_create_update_port(self):,0,1,0.3333333333333333,116
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,new_host_port = self._get_host_port_if_changed(,1,1,0.3333333333333333,117
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"new_host_port = self._get_host_port_if_changed(mech_context, attrs)",1,1,0.3333333333333333,118
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = port[attributes.PORT],1,1,0.3333333333333333,119
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if binding.host != attrs.get(portbindings.HOST_ID):,1,1,0.3333333333333333,120
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,binding = mech_context._binding,1,1,0.3333333333333333,121
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"def _get_host_port_if_changed(self, mech_context, attrs):",1,1,0.3333333333333333,122
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (init, super_create_port):",1,1,0.3333333333333333,123
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,with contextlib.nested(,1,1,0.3333333333333333,124
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with mock.patch.object(ml2_plugin.Ml2Plugin,",0,1,0.3333333333333333,125
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with mock.patch.object(ml2_plugin.Ml2Plugin, '__init__') as init,\",0,1,0.3333333333333333,126
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,with mock.patch(,0,1,0.3333333333333333,127
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with mock.patch.object(manager.NeutronManager,",0,1,0.3333333333333333,128
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with self.subnet(net,",0,1,0.3333333333333333,129
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with self.network() as net,\",0,1,0.3333333333333333,130
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,update_device_up = kwargs.get('update_device_up'),1,1,0.3333333333333333,131
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,db_update_port.return_value = updated_port,0,1,0.3333333333333333,132
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with self.port() as port,\",0,1,0.3333333333333333,133
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,plugin._get_host_port_if_changed = mock.Mock(,1,1,0.3333333333333333,134
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def test__get_host_port_if_changed_with_binding_removed(self):,1,1,0.3333333333333333,135
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def _test__get_host_port_if_changed(,1,1,0.3333333333333333,136
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,is_new_port_binding_changed = (,0,1,0.3333333333333333,137
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,if (is_new_port_binding_changed and,0,1,0.3333333333333333,138
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = {portbindings.HOST_ID: 'host-1'},1,1,0.3333333333333333,139
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def test__get_host_port_if_changed_with_binding_added(self):,1,1,0.3333333333333333,140
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = {portbindings.HOST_ID: None},1,1,0.3333333333333333,141
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mech_context.current = expected_return,1,1,0.3333333333333333,142
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,expected_return = {,1,1,0.3333333333333333,143
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,new_host_port = mock.Mock(),1,1,0.3333333333333333,144
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = {,1,1,0.3333333333333333,145
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mech_context = mock.Mock(),1,1,0.3333333333333333,146
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"with mock.patch.object(ml2_plugin.Ml2Plugin,",1,1,0.3333333333333333,147
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,attrs = {'mac_address': '0a:0b:0c:0d:0e:0f'},1,1,0.3333333333333333,148
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def test__get_host_port_if_changed_no_attrs(self):,1,1,0.3333333333333333,149
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"test_return = plugin._get_host_port_if_changed(mech_context, attrs)",1,1,0.3333333333333333,150
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mech_context._binding.host = 'Host-1',1,1,0.3333333333333333,151
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,def test__get_host_port_if_changed_no_binding_change(self):,1,1,0.3333333333333333,152
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mech_context.current = {,1,1,0.3333333333333333,153
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"plugin.update_port_status(rpc_context, port_id,",0,0,0.0,154
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,n_utils.is_dvr_serviced(new_device_owner)):,0,0,0.0,155
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"l3plugin.dvr_update_router_addvm(context, new_port)",0,0,0.0,156
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"l3plugin.dvr_vmarp_table_update(context, new_port, ""add"")",0,0,0.0,157
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,elif kwargs.get('mac_address_updated'):,0,0,0.0,158
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,service_constants.L3_ROUTER_NAT),1,0,0.0,159
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"l3plugin.dvr_vmarp_table_update(context, port, ""add"")",1,0,0.0,160
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# NOTE(kevinbenton): we have to special case DVR ports because of,0,0,0.0,161
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"n_const.PORT_STATUS_ACTIVE, host)",0,0,0.0,162
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,try:,1,0,0.0,163
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# agent did not provide a full one (e.g. Linux Bridge case). We,0,0,0.0,164
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return,0,0,0.0,165
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,provisioning_blocks.provisioning_complete(,0,0,0.0,166
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,provisioning_blocks.L2_AGENT_ENTITY),0,0,0.0,167
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"port_id, host)):",1,0,0.0,168
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"n_const.PORT_STATUS_ACTIVE,",1,0,0.0,169
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,host),1,0,0.0,170
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,rpc_context.session.expunge_all(),1,0,0.0,171
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,new_port[portbindings.HOST_ID])),0,0,0.0,172
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mech_context, attrs=attrs, expected_retval=expected_return)",1,0,0.0,173
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,(original_port[portbindings.HOST_ID] !=,0,0,0.0,174
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,new_port[portbindings.HOST_ID] and,0,0,0.0,175
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.assertEqual(expected_retval, test_return)",1,0,0.0,176
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'update_device_up': True,1,0,0.0,177
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,self._test__get_host_port_if_changed(,1,0,0.0,178
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mech_context, attrs=None, expected_retval=None)",1,0,0.0,179
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'id': 'fake-id',",1,0,0.0,180
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'mac_address': '2a:2b:2c:2d:2e:2f',1,0,0.0,181
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,},1,0,0.0,182
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mech_context, attrs=attrs, expected_retval=None)",1,0,0.0,183
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"portbindings.HOST_ID: 'Host-1',",1,0,0.0,184
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'mac_address': '0a:0b:0c:0d:0e:0f',",1,0,0.0,185
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"portbindings.HOST_ID: None,",1,0,0.0,186
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"portbindings.HOST_ID: 'host-1',",1,0,0.0,187
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'create_port'):,1,0,0.0,188
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'update_port'):,1,0,0.0,189
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'port': new_host_port,",1,0,0.0,190
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,service_constants.L3_ROUTER_NAT),0,0,0.0,191
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"l3plugin.dvr_vmarp_table_update(context, port, ""add"")",0,0,0.0,192
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'port': port,",1,0,0.0,193
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return self._after_create_network(context, result, mech_context)",0,0,0.0,194
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,},1,0,0.0,195
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,registry.notify(,1,0,0.0,196
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# TODO(kevinbenton): move this to '_after_subnet_create',0,0,0.0,197
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self._before_create_subnet(context, subnet)",0,0,0.0,198
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return self._after_create_subnet(context, result, mech_context)",0,0,0.0,199
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self._before_create_port(context, port)",0,0,0.0,200
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return self._after_create_port(context, result, mech_context)",0,0,0.0,201
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'create_%s_postcommit' % resource),1,0,0.0,202
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,postcommit_op(obj['mech_context']),1,0,0.0,203
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,except ml2_exc.MechanismDriverError:,1,0,0.0,204
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"LOG.exception(_LE(""mechanism_manager.create_%(res)s""",1,0,0.0,205
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"""_postcommit failed for %(res)s: """,1,0,0.0,206
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self._delete_objects(context, resource, objects)",1,0,0.0,207
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,registry.notify(,1,0,0.0,208
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,try:,1,0,0.0,209
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,obj['mech_context']),1,0,0.0,210
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"LOG.error(_LE(""_bind_port_if_needed failed. """,1,0,0.0,211
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,resource_ids),1,0,0.0,212
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'__init__',",1,0,0.0,213
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,pass,0,0,0.0,214
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# TODO(kevinbenton): BEFORE notification should be added here,0,0,0.0,215
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self._before_create_network(context, network)",0,0,0.0,216
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,exceptions.PortNotFound(port_id='foo_port_id')),1,0,0.0,217
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'device': 'foo_device',",0,0,0.0,218
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'provisioning_complete') as pc:,0,0,0.0,219
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return pc,0,0,0.0,220
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,provisioning_blocks.L2_AGENT_ENTITY),0,0,0.0,221
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'device': 'foo_device',1,0,0.0,222
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,},1,0,0.0,223
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,notify.assert_called_once_with(,1,0,0.0,224
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'._device_to_port_id'),\",0,0,0.0,225
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self._delete_objects(context, resource, to_delete)",0,0,0.0,226
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(self.callbacks, 'notify_ha_port_status'):",0,0,0.0,227
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"obj_before_create(context, item)",0,0,0.0,228
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"postcommit_op(context, obj['result'], obj['mech_context'])",0,0,0.0,229
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,except Exception:,0,0,0.0,230
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"LOG.exception(_LE(""ML2 _after_create_%(res)s """,0,0,0.0,231
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"""failed for %(res)s: """,0,0,0.0,232
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,# _after_handler will have deleted the object that threw,0,0,0.0,233
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return_value=None):,1,0,0.0,234
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"ip_version=6) as snet_v6,\",0,0,0.0,235
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self, mech_context, attrs=None, expected_retval=None):",1,0,0.0,236
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"cidr=fake_prefix, ip_version=6),",1,0,0.0,237
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'neutron.plugins.ml2.plugin.' 'db.get_locked_port_and_binding',",0,0,0.0,238
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=(None, None)) as glpab_mock,\",0,0,0.0,239
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mock.patch('neutron.plugins.ml2.plugin.Ml2Plugin.',0,0,0.0,240
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'_make_port_dict') as mpd_mock:,0,0,0.0,241
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(base_plugin.NeutronDbPluginV2,",0,0,0.0,242
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'create_port'):,0,0,0.0,243
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'update_port'):,0,0,0.0,244
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'__init__',",0,0,0.0,245
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=None),\",0,0,0.0,246
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(manager.NeutronManager,",0,0,0.0,247
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return_value={'L3_ROUTER_NAT': l3plugin}):,0,0,0.0,248
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,import contextlib,1,0,0.0,249
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.network(),",1,0,0.0,250
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(plugin.notifier,",1,0,0.0,251
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'security_groups_member_updated'),",1,0,0.0,252
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'security_groups_provider_updated'),1,0,0.0,253
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (net, m_upd, p_upd):",1,0,0.0,254
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return_value=[ns_to_delete]) as dvr_delns_ifno_port:,0,0,0.0,255
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'dvr_deletens_if_no_port',",0,0,0.0,256
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.l3plugin,",0,0,0.0,257
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"l3plugin,",0,0,0.0,258
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(plugin.notifier,",0,0,0.0,259
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'security_groups_member_updated') as m_upd,\",0,0,0.0,260
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'security_groups_provider_updated') as p_upd:,0,0,0.0,261
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"gateway_ip=fake_gateway,",0,0,0.0,262
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"cidr=fake_prefix,",0,0,0.0,263
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mock.patch.object(,0,0,0.0,264
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"plugin.notifier,",0,0,0.0,265
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'disassociate_floatingips') as disassociate_floatingips,\",0,0,0.0,266
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=fip_set),\",0,0,0.0,267
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(registry, 'notify') as notify:",0,0,0.0,268
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'get_service_plugins',",0,0,0.0,269
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=self.service_plugins),\",0,0,0.0,270
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.port(device_owner=device_owner) as port,\",0,0,0.0,271
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(registry, 'notify') as notify,\",0,0,0.0,272
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(self.l3plugin,",0,0,0.0,273
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'disassociate_floatingips',",0,0,0.0,274
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.subnet(net, gateway_ip=fake_gateway,",1,0,0.0,275
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mock.patch.object(,1,0,0.0,276
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return_value=new_host_port),1,0,0.0,277
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"plugin.notifier, 'security_groups_member_updated'),",1,0,0.0,278
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mock.patch('neutron.plugins.ml2.plugin.Ml2Plugin._make_port_dict'),1,0,0.0,279
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (glpab_mock, mpd_mock):",1,0,0.0,280
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(ml2_plugin.Ml2Plugin, '__init__'),",1,0,0.0,281
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(base_plugin.NeutronDbPluginV2, 'create_port'),",1,0,0.0,282
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(base_plugin.NeutronDbPluginV2, 'update_port'),",1,0,0.0,283
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(ml2_plugin.Ml2Plugin, '__init__',",1,0,0.0,284
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=None),",1,0,0.0,285
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value={'L3_ROUTER_NAT': l3plugin}),",1,0,0.0,286
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,):,1,0,0.0,287
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'port': updated_port,",0,0,0.0,288
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,return mech_context.current,1,0,0.0,289
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"obj['mech_context'], attrs)",1,0,0.0,290
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mech_context, attrs)",1,0,0.0,291
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'port': new_host_port,",1,0,0.0,292
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'create_port') as db_create_port:,0,0,0.0,293
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,'update_port') as db_update_port:,0,0,0.0,294
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'port': updated_port,",0,0,0.0,295
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=(None, None)),",1,0,0.0,296
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'db.get_locked_port_and_binding',",1,0,0.0,297
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,mock.patch('neutron.plugins.ml2.plugin.',1,0,0.0,298
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"'get_service_plugins',",1,0,0.0,299
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"plugin.notifier, 'security_groups_provider_updated')",1,0,0.0,300
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (snet_v6, m_upd, p_upd):",1,0,0.0,301
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.port(),",1,0,0.0,302
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(l3plugin, 'disassociate_floatingips'),",1,0,0.0,303
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(registry, 'notify')",1,0,0.0,304
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (port, disassociate_floatingips, notify):",1,0,0.0,305
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(manager.NeutronManager,",1,0,0.0,306
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=self.service_plugins),",1,0,0.0,307
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,dvr_delns_ifno_port):,1,0,0.0,308
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self.port(device_owner=device_owner),",1,0,0.0,309
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(registry, 'notify'),",1,0,0.0,310
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(self.l3plugin, 'disassociate_floatingips',",1,0,0.0,311
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=fip_set),",1,0,0.0,312
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"mock.patch.object(self.l3plugin, 'dvr_deletens_if_no_port',",1,0,0.0,313
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"return_value=[ns_to_delete]),",1,0,0.0,314
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,") as (get_service_plugin, port, notify, disassociate_floatingips,",1,0,0.0,315
3f3874717c07e2b469ea6c6fd52bcb4da7b380c7,"self._delete_objects(context, attributes.PORT, objects)",1,0,0.0,316
