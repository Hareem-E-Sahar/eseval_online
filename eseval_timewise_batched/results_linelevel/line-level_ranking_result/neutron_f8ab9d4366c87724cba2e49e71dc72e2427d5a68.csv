commit_id,line,line_level_label,count,line_score,row
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""%s is not a valid multicast ip address"") % ip",1,6,1.0,1
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = (_(""segment range is invalid. Valid range is : """,1,6,1.0,2
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""%s is reserved multicast ip address"") % ip",1,6,1.0,3
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network is specified. If no physical network is specified, return",1,5,0.8333333333333333,4
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Update network profile if name is updated and the network profile,1,5,0.8333333333333333,5
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Invalid multicast ip address range. """,1,5,0.8333333333333333,6
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""%s is not a valid ip address"") % ip",1,5,0.8333333333333333,7
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Set the default policy profile id for ports if no id is set,1,5,0.8333333333333333,8
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = (_(""Invalid multicast IP range '%(min_ip)s-%(max_ip)s':""",1,4,0.6666666666666666,9
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p_req = self.new_create_request('network_profiles', net_p_dict)",1,4,0.6666666666666666,10
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'publishName': network['id'],",1,4,0.6666666666666666,11
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = (_(""Segment range is invalid, select from """,1,4,0.6666666666666666,12
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Cannot delete network '%s' that is a member of a """,1,4,0.6666666666666666,13
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Update segment range if network profile is not in use.,1,4,0.6666666666666666,14
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = (_(""Unreasonable vxlan ID range %(vxlan_min)s - %(vxlan_max)s"") %",1,4,0.6666666666666666,15
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Get the segment range min and max for a network profile.,1,4,0.6666666666666666,16
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Delete and return the network profile if it is not in use.,1,4,0.6666666666666666,17
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_update_network_request(context, net, add_segments,",1,3,0.5,18
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,res = net_p_req.get_response(self.ext_api),1,3,0.5,19
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p_req = self.new_create_request('network_profiles', data)",1,3,0.5,20
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Set the network policy profile id for auto generated L3/DHCP ports,1,3,0.5,21
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Cannot delete network '%s' """,1,3,0.5,22
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Cannot delete network '%s', """,1,3,0.5,23
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete encapsulation profile if network is of type OVERLAY Trunk.,1,3,0.5,24
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a VM network for a network and policy profile combination.,1,3,0.5,25
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'description': network['name'],",1,3,0.5,26
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""'%s' is not a valid UUID"") % segment",1,3,0.5,27
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Vlan tag '%s' is not an integer """,1,3,0.5,28
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'physical_network': PHYS_NET}},1,3,0.5,29
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'name': 'netp2'}},1,3,0.5,30
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'network_profile': {c_const.REMOVE_TENANTS: [self.tenant_id,",1,3,0.5,31
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {,1,3,0.5,32
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'sub_type': c_const.NETWORK_TYPE_VLAN}},1,3,0.5,33
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'segment_range': '200-210'}},1,3,0.5,34
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'segment_range': '300-310'}},1,3,0.5,35
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'multicast_ip_range':,1,3,0.5,36
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'segment_range':,1,3,0.5,37
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test rollback of profile binding if network profile create fails.""""""",1,3,0.5,38
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Cannot add vxlan segment '%s' as a member of """,1,3,0.5,39
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#network profile will be returned even though the profile is,1,3,0.5,40
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test network create without passing network profile id.""""""",1,3,0.5,41
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test network create with network profile id.""""""",1,3,0.5,42
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test network update failure while updating network profile id.""""""",1,3,0.5,43
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Vlan tag '%s' is out of range"") % dot1qtag",1,3,0.5,44
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {c_const.ADD_TENANTS:,1,3,0.5,45
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = (_(""Unknown provider:physical_network %s""),",1,3,0.5,46
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Check whether the network profile is in use.,1,3,0.5,47
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""provider:segmentation_id out of range """,1,3,0.5,48
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p_req = self.new_create_request('network_profiles', data)",0,3,0.5,49
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = self._prepare_net_profile_data('overlay'),1,3,0.5,50
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p_dict = self._prepare_net_profile_data('overlay'),1,3,0.5,51
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'network_profile': {'sub_type': 'native_vxlan',",1,3,0.5,52
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p_req = self.new_create_request('network_profiles', data,",1,3,0.5,53
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {,1,3,0.5,54
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile_id: network profile ID based on which this network,1,3,0.5,55
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# Sort the range to ensure min, max is in order",1,3,0.5,56
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Assumption: ip range is already sorted,1,3,0.5,57
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Sync the network profile range with the vlan_allocations table for each,1,3,0.5,58
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"If profile type is None, return profile-tenant binding for all",1,3,0.5,59
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network_profile': {'multicast_ip_range':,1,3,0.5,60
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Flag to check whether network profile is updated or not.,1,3,0.5,61
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Validate multicast ip range values.,1,3,0.5,62
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Update network profile to tenant id binding.,1,3,0.5,63
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Port profiles are the primary mechanism by which network policy is,1,3,0.5,64
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'is_visible': True, 'default': None,",1,3,0.5,65
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'multicast_ip_range': {'allow_post': True, 'allow_put': True,",1,3,0.5,66
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Segment range overlaps with another profile"")",1,3,0.5,67
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'is_visible': True, 'default': ''},",1,3,0.5,68
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,The tenant id is not available when the policy profiles are polled,1,3,0.5,69
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Verify whether a network profile for given id exists.,1,3,0.5,70
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve all network profiles if tenant is admin. For a non-admin,1,3,0.5,71
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Return network profile if it is successfully updated.,1,3,0.5,72
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# the network record, so explicit removal is not necessary",1,2,0.3333333333333333,73
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id_set = True,1,2,0.3333333333333333,74
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,and router interface. Default policy profile name is configured in the,1,2,0.3333333333333333,75
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a port. Use a default policy profile for ports created for dhcp,1,2,0.3333333333333333,76
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return [self._fields(net, fields) for net in nets]",1,2,0.3333333333333333,77
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net = super(N1kvNeutronPluginV2, self).get_network(context, id, None)",1,2,0.3333333333333333,78
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net = super(N1kvNeutronPluginV2, self).update_network(context, id,",1,2,0.3333333333333333,79
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network = self.get_network(context, id)",1,2,0.3333333333333333,80
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Updated network: %s"", net['id'])",1,2,0.3333333333333333,81
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if binding.network_type != c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,2,0.3333333333333333,82
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if binding.network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,2,0.3333333333333333,83
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return net,1,2,0.3333333333333333,84
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_count = vm_network['port_count'] + 1,1,2,0.3333333333333333,85
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_count = 1,1,2,0.3333333333333333,86
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_range: string representing the segment range for network,1,2,0.3333333333333333,87
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Extract policy profile for VM network create in VSM.,1,2,0.3333333333333333,88
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: network profile object,1,2,0.3333333333333333,89
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p = super(N1kvNeutronPluginV2,",1,2,0.3333333333333333,90
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return net_p,1,2,0.3333333333333333,91
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID of the network profile to delete,1,2,0.3333333333333333,92
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: deleted network profile object,1,2,0.3333333333333333,93
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param net_profile_id: UUID of the network profile to update,1,2,0.3333333333333333,94
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile: dictionary containing network profile object,1,2,0.3333333333333333,95
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p = (super(N1kvNeutronPluginV2, self).",1,2,0.3333333333333333,96
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.agent_vsm = True,1,2,0.3333333333333333,97
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = {'id': uuid,",1,2,0.3333333333333333,98
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: string representing the name of the network profile to,1,2,0.3333333333333333,99
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net = super(N1kvNeutronPluginV2, self).create_network(context,",1,2,0.3333333333333333,100
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = {'name': name,",1,2,0.3333333333333333,101
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Created network: %s"", net['id'])",1,2,0.3333333333333333,102
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param profile: network profile dictionary,1,2,0.3333333333333333,103
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create network based on network profile.,1,2,0.3333333333333333,104
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vm_network: VM network object with which the port is associated,1,2,0.3333333333333333,105
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return net_p,1,2,0.3333333333333333,106
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Plugin does not support updating provider attributes"")",1,2,0.3333333333333333,107
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net = self.get_network(context, segment)",1,2,0.3333333333333333,108
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Get the list of segments in encapsulation profile format.,1,2,0.3333333333333333,109
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network: Dictionary containing the trunk network information,1,2,0.3333333333333333,110
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segments = attrs.get(param),1,2,0.3333333333333333,111
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Invalid pairing supplied"")",1,2,0.3333333333333333,112
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Invalid UUID supplied"")",1,2,0.3333333333333333,113
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Cannot add a trunk segment '%s' as a member of """,1,2,0.3333333333333333,114
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Cannot add vlan segment '%s' as a member of """,1,2,0.3333333333333333,115
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Network UUID '%s' belongs to a different """,1,2,0.3333333333333333,116
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Add the extended parameter network profile to the network.""""""",1,2,0.3333333333333333,117
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Validate network profile exists.""""""",1,2,0.3333333333333333,118
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p = self._get_network_profile_by_name(context.session,",1,2,0.3333333333333333,119
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""n1kv:profile_id does not exist"")",1,2,0.3333333333333333,120
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile: network profile dictionary,1,2,0.3333333333333333,121
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send create network profile request to VSM.,1,2,0.3333333333333333,122
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send update network profile request to VSM.,1,2,0.3333333333333333,123
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send delete network profile request to VSM.,1,2,0.3333333333333333,124
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network: network dictionary,1,2,0.3333333333333333,125
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = self.get_network_profile(context,",1,2,0.3333333333333333,126
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile = n1kv_db_v2.get_network_profile(,1,2,0.3333333333333333,127
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete bridge domain if network is of type Overlay.,1,2,0.3333333333333333,128
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile = self.get_network_profile(,1,2,0.3333333333333333,129
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'ipPool': subnet['id'], 'deleteSubnet': True}",1,2,0.3333333333333333,130
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vm_network_name: VM network name to which the port is bound,1,2,0.3333333333333333,131
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'portId': port_id,",1,2,0.3333333333333333,132
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p = n1kv_db_v2.create_network_profile(db_session, profile)",1,2,0.3333333333333333,133
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network': {n1kv.PROFILE_ID: 'some-profile-uuid'}},1,2,0.3333333333333333,134
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {""network_profile"": netp}",1,2,0.3333333333333333,135
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,res = req.get_response(self.api),1,2,0.3333333333333333,136
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = self._prepare_net_data(profile_obj.id),1,2,0.3333333333333333,137
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network = self.deserialize(self.fmt,",1,2,0.3333333333333333,138
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""provider:network_type %s not supported""), network_type",1,2,0.3333333333333333,139
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,res = network_req.get_response(self.api),1,2,0.3333333333333333,140
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Network update should fail to update network profile id.,1,2,0.3333333333333333,141
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test overlay segment deallocation on network create failure.""""""",1,2,0.3333333333333333,142
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Regular test case of network deletion. Should return successful.""""""",1,2,0.3333333333333333,143
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_network(self.fmt, name='net', admin_state_up=True)",1,2,0.3333333333333333,144
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network = self.deserialize(self.fmt, res)",1,2,0.3333333333333333,145
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_delete_request('networks', network['network']['id'])",1,2,0.3333333333333333,146
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_delete_request('networks', net_id)",1,2,0.3333333333333333,147
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_port(self.fmt, network['network']['id'],",1,2,0.3333333333333333,148
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'network': {'shared': False}},1,2,0.3333333333333333,149
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_update_request('networks', data,",1,2,0.3333333333333333,150
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_network(self.fmt, name='net1', admin_state_up=True)",1,2,0.3333333333333333,151
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_port(self.fmt, net_id,",1,2,0.3333333333333333,152
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'subnet': {'network_id': network['network']['id'],",1,2,0.3333333333333333,153
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_create_request('subnets', data)",1,2,0.3333333333333333,154
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'subnet': {'host_routes': host_routes,",1,2,0.3333333333333333,155
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_update_request('subnets', data,",1,2,0.3333333333333333,156
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_delete_request('subnets', subnet['subnet']['id'])",1,2,0.3333333333333333,157
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'subnet': {'network_id': net_id,",1,2,0.3333333333333333,158
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_port(self.fmt, net_id=net_id, **kwargs)",1,2,0.3333333333333333,159
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_subnet(self.fmt, tenant_id='tenant1',",1,2,0.3333333333333333,160
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._create_port(self.fmt, net_id=net_id)",1,2,0.3333333333333333,161
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_delete_request('subnets', subnet1['subnet']['id'])",1,2,0.3333333333333333,162
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_delete_request('subnets', subnet2['subnet']['id'])",1,2,0.3333333333333333,163
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = self.deserialize('json', res)",1,2,0.3333333333333333,164
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_list_request('networks', params=""fields=tenant_id"")",1,2,0.3333333333333333,165
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return data,1,2,0.3333333333333333,166
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile = instance._get_policy_profile_by_name('pp-1'),1,2,0.3333333333333333,167
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_VLAN),1,2,0.3333333333333333,168
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY),1,2,0.3333333333333333,169
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_TRUNK),1,2,0.3333333333333333,170
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = self._prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY,",1,2,0.3333333333333333,171
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p_dict = (self.,1,2,0.3333333333333333,172
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p = self.deserialize(self.fmt,",1,2,0.3333333333333333,173
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p_req = self.new_update_request('network_profiles',",1,2,0.3333333333333333,174
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p = self.deserialize(self.fmt, res)",1,2,0.3333333333333333,175
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p_dict = self._prepare_net_profile_data(c_const.NETWORK_TYPE_VLAN),1,2,0.3333333333333333,176
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.new_create_request('network_profiles', net_p_dict)",1,2,0.3333333333333333,177
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = self._prepare_net_profile_data('vlan'),1,2,0.3333333333333333,178
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p = self.test_create_network_profile_multi_tenants(),1,2,0.3333333333333333,179
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Add new tenant4 to network profile and make sure existing tenants,1,2,0.3333333333333333,180
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = n1kv_db_v2.get_network_profile(sess1, net_p['id'],",1,2,0.3333333333333333,181
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# network profile binding with creator tenant should always exist,1,2,0.3333333333333333,182
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = n1kv_db_v2.get_network_profile(sess2, net_p['id'],",1,2,0.3333333333333333,183
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'port': {n1kv.PROFILE_ID: profile_obj.id,",1,2,0.3333333333333333,184
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data = {'port': {n1kv.PROFILE_ID: 'some-profile-uuid'}},1,2,0.3333333333333333,185
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,res = port_req.get_response(self.api),1,2,0.3333333333333333,186
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'port': {n1kv.PROFILE_ID: port['port']['n1kv:profile_id'],",1,2,0.3333333333333333,187
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {'port': {n1kv.PROFILE_ID: pt['n1kv:profile_id'],",1,2,0.3333333333333333,188
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req = self.new_delete_request('ports', port['port']['id'])",1,2,0.3333333333333333,189
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile = n1kv_db_v2.get_policy_profile(,1,2,0.3333333333333333,190
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Verify that the third policy profile is deleted,1,2,0.3333333333333333,191
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = self._list(resource, neutron_context=ctx)",1,2,0.3333333333333333,192
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profiles = sorted(res[resource], key=utils.safe_sort_key)",1,2,0.3333333333333333,193
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles = self._init_get_policy_profiles(),1,2,0.3333333333333333,194
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""provider:physical_network required"")",1,2,0.3333333333333333,195
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p = self._make_test_profile(name='netp1'),1,2,0.3333333333333333,196
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""provider:physical_network specified for Overlay """,1,2,0.3333333333333333,197
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the network profile to retrieve,1,2,0.3333333333333333,198
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Verify whether a segment is allocated for given network profile.""""""",1,2,0.3333333333333333,199
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of profile bindings for network profiles.,1,2,0.3333333333333333,200
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile: network profile dictionary,1,2,0.3333333333333333,201
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: network profile dictionary,1,2,0.3333333333333333,202
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p = network_profile[""network_profile""]",1,2,0.3333333333333333,203
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing network profile to delete,1,2,0.3333333333333333,204
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: deleted network profile dictionary,1,2,0.3333333333333333,205
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add/remove network profile to tenant-id binding for the corresponding,1,2,0.3333333333333333,206
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing network profile to update,1,2,0.3333333333333333,207
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: updated network profile dictionary,1,2,0.3333333333333333,208
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is_updated = True,1,2,0.3333333333333333,209
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""segment_range not required for TRUNK"")",1,2,0.3333333333333333,210
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""multicast_ip_range not required"")",1,2,0.3333333333333333,211
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = get_network_profile(context.session, id, context.tenant_id)",1,2,0.3333333333333333,212
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""segment_type should either be vlan, overlay, """,1,2,0.3333333333333333,213
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant, retrieve all network profiles belonging to this tenant only.",1,2,0.3333333333333333,214
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network profile object. Values in this dictiontary are,1,2,0.3333333333333333,215
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: list of all network profiles,1,2,0.3333333333333333,216
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile_id: UUID representing network profile,1,2,0.3333333333333333,217
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing network profile,1,2,0.3333333333333333,218
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: true if network profile exist else False,1,2,0.3333333333333333,219
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return True,1,2,0.3333333333333333,220
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Validate completeness of Nexus1000V network profile arguments.,1,2,0.3333333333333333,221
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param p: network profile object,1,2,0.3333333333333333,222
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Invalid segment range. example range: 500-550"")",1,2,0.3333333333333333,223
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"min_ip, max_ip = (network_profile",1,2,0.3333333333333333,224
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Validate completeness of a network profile arguments.,1,2,0.3333333333333333,225
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param net_p: network profile object,1,2,0.3333333333333333,226
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = {""id"": network_profile[""id""],",1,2,0.3333333333333333,227
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = {""profile_id"": profile_binding[""profile_id""],",1,2,0.3333333333333333,228
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [self._make_network_profile_dict(p) for p in network_profiles],1,2,0.3333333333333333,229
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Default tenant-ids are populated in profile bindings when plugin is,1,2,0.3333333333333333,230
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""provider:segmentation_id required"")",1,2,0.3333333333333333,231
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = {""network_profile"": netp}",0,2,0.3333333333333333,232
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return data,0,2,0.3333333333333333,233
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data = self._prepare_net_profile_data('overlay',",0,2,0.3333333333333333,234
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"netp = {'network_profile': {'name': 'netp1',",1,2,0.3333333333333333,235
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add the encapsulation profile name to the multi-segment network binding.,1,2,0.3333333333333333,236
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_id: UUID representing the network whose binding is,1,2,0.3333333333333333,237
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params network_profile: object of type network profile,1,2,0.3333333333333333,238
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a multicast ip from the defined pool.,1,2,0.3333333333333333,239
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Round robin multicast ip allocation,1,2,0.3333333333333333,240
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: two strings representing minimum multicast ip and,1,2,0.3333333333333333,241
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,maximum multicast ip,1,2,0.3333333333333333,242
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Assumption: ip range belongs to the same subnet,1,2,0.3333333333333333,243
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params net_p: network profile object,1,2,0.3333333333333333,244
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param net_p: network profile dictionary,1,2,0.3333333333333333,245
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param physical network: string name for the physical network,1,2,0.3333333333333333,246
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Reserve a VLAN ID within the range of the network profile.,1,2,0.3333333333333333,247
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile: network profile object,1,2,0.3333333333333333,248
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc.allocated = True,1,2,0.3333333333333333,249
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Reserve a VXLAN ID within the range of the network profile.,1,2,0.3333333333333333,250
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile_id: UUID representing the network profile,1,2,0.3333333333333333,251
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.InvalidInput(error_message=msg),1,2,0.3333333333333333,252
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a vm_network based on policy profile and network id.,1,2,0.3333333333333333,253
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add a VM network for a unique combination of network and,1,2,0.3333333333333333,254
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = get_network_profile(db_session, id, tenant_id)",1,2,0.3333333333333333,255
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return profile,1,2,0.3333333333333333,256
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"raise n_exc.NeutronException(_(""Invalid profile type""))",1,2,0.3333333333333333,257
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Arguments segment_type missing""",1,2,0.3333333333333333,258
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"min_ip, max_ip = _get_multicast_ip_range(network_profile)",1,2,0.3333333333333333,259
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Argument physical_network missing """,1,2,0.3333333333333333,260
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"netmask = network_address = """"",1,2,0.3333333333333333,261
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"For every network created from a given network profile, a",1,2,0.3333333333333333,262
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,A port is created on a network and associated with a policy-profile.,1,2,0.3333333333333333,263
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,added. If the same combination of network and policy-profile is used by,1,2,0.3333333333333333,264
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network: network dict,1,2,0.3333333333333333,265
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param overlay_subtype: string representing subtype of overlay network,1,2,0.3333333333333333,266
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'name': network['id'] + c_const.BRIDGE_DOMAIN_SUFFIX,",1,2,0.3333333333333333,267
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_profile: network profile dict,1,2,0.3333333333333333,268
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.network_segment_path % network['id'],",1,2,0.3333333333333333,269
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'description': network_profile['name'],",1,2,0.3333333333333333,270
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'name': network_profile['name'],",1,2,0.3333333333333333,271
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ip = netaddr.IPNetwork(subnet['cidr']),1,2,0.3333333333333333,272
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Invalid input for CIDR"")",1,2,0.3333333333333333,273
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.InvalidInput(error_message=msg),1,2,0.3333333333333333,274
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'addressRangeStart': address_range_start,",1,2,0.3333333333333333,275
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,A bridge-domain is created when the network-segment is of type VXLAN.,1,2,0.3333333333333333,276
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'description': subnet['name'],",1,2,0.3333333333333333,277
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'name': vm_network_name,",1,2,0.3333333333333333,278
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'id': port['id'],",1,2,0.3333333333333333,279
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = jsonutils.dumps(body, indent=2)",1,2,0.3333333333333333,280
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"body = {'name': encap['name'],",1,2,0.3333333333333333,281
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param profile_name: Name of the encapsulation profile,1,2,0.3333333333333333,282
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.agent_vsm = True,1,2,0.3333333333333333,283
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Delete profiles from database if profiles were deleted in VSM,1,2,0.3333333333333333,284
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[providernet.NETWORK_TYPE] = binding.network_type,1,2,0.3333333333333333,285
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif binding.network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,2,0.3333333333333333,286
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""provider:network_type required"")",1,2,0.3333333333333333,287
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""segment_range not required for trunk"")",1,2,0.3333333333333333,288
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.InvalidInput(error_message=msg),1,2,0.3333333333333333,289
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,For every network profile a corresponding logical-network and,1,2,0.3333333333333333,290
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Add profiles in database if new profiles were created in VSM,1,2,0.3333333333333333,291
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Policy profiles correspond to port profiles on Nexus1000V VSM.,1,2,0.3333333333333333,292
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [self._make_policy_profile_dict(p) for p in profiles],1,2,0.3333333333333333,293
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Argument segment_range missing """,1,2,0.3333333333333333,294
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (""Profile includes the type of profile for N1kv"")",1,2,0.3333333333333333,295
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Argument sub_type missing """,1,2,0.3333333333333333,296
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = _(""Argument multicast_ip_range missing""",1,2,0.3333333333333333,297
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,""" for VXLAN multicast network profile"")",1,2,0.3333333333333333,298
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles = _get_network_profiles(,1,2,0.3333333333333333,299
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles = _get_network_profiles(db_session=context.session),1,2,0.3333333333333333,300
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"msg = (_(""NetworkProfile name %s already exists"") %",1,2,0.3333333333333333,301
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve network profile based on name.,1,2,0.3333333333333333,302
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: string representing the name for the network profile,1,2,0.3333333333333333,303
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: network profile object,1,2,0.3333333333333333,304
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles = db_session.query(model).filter(model.id.in_(,1,2,0.3333333333333333,305
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the network profile being updated,1,2,0.3333333333333333,306
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"res = {""id"": policy_profile[""id""], ""name"": policy_profile[""name""]}",1,2,0.3333333333333333,307
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'is_visible': True,",1,2,0.3333333333333333,308
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile = get_policy_profile(context.session, id)",1,2,0.3333333333333333,309
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'is_visible': False, 'default': ''},",1,2,0.3333333333333333,310
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'is_visible': False, 'default': '0'},",1,2,0.3333333333333333,311
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'default': attributes.ATTR_NOT_SPECIFIED},",1,2,0.3333333333333333,312
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segment_range': {'allow_post': True, 'allow_put': True,",1,2,0.3333333333333333,313
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'name': {'allow_post': True, 'allow_put': True,",1,2,0.3333333333333333,314
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'allow_post': True, 'allow_put': True,",1,2,0.3333333333333333,315
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve all policy profiles if tenant is admin. For a non-admin,1,2,0.3333333333333333,316
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p = policy_profile[""policy_profile""]",1,2,0.3333333333333333,317
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,and remove what is in both and no tenant id set,1,2,0.3333333333333333,318
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'add_tenants': {'allow_post': True, 'allow_put': True,",1,2,0.3333333333333333,319
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id = net_p['id'],1,1,0.16666666666666666,320
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[n1kv.PROFILE_ID] = binding.profile_id,1,1,0.16666666666666666,321
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[n1kv.MEMBER_SEGMENTS] = members,1,1,0.16666666666666666,322
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"members = n1kv_db_v2.get_multi_segment_members(context.session,",1,1,0.16666666666666666,323
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = n1kv_db_v2.get_port_binding(context.session,",1,1,0.16666666666666666,324
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port[n1kv.PROFILE_ID] = binding.profile_id,1,1,0.16666666666666666,325
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"members = n1kv_db_v2.get_trunk_members(context.session,",1,1,0.16666666666666666,326
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id = network.get(n1kv.PROFILE_ID),1,1,0.16666666666666666,327
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id_set = attributes.is_attr_set(profile_id),1,1,0.16666666666666666,328
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_name = c_conf.CISCO_N1K.default_network_profile,1,1,0.16666666666666666,329
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Add the extended parameter port profile to the port.""""""",1,1,0.16666666666666666,330
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send create logical network request to VSM.,1,1,0.16666666666666666,331
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['n1kv:profile_id'] = profile_id,1,1,0.16666666666666666,332
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return profile_id,1,1,0.16666666666666666,333
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Validates whether policy profile exists.""""""",1,1,0.16666666666666666,334
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id = attrs.get(n1kv.PROFILE_ID),1,1,0.16666666666666666,335
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send delete logical network request to VSM.,1,1,0.16666666666666666,336
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,logical_network_name = (network_profile['id'] +,1,1,0.16666666666666666,337
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send create network request to VSM.,1,1,0.16666666666666666,338
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a bridge domain for network of type Overlay.,1,1,0.16666666666666666,339
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Add the extended parameter member segments to the network.""""""",1,1,0.16666666666666666,340
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['del_segment_list'] = [],1,1,0.16666666666666666,341
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict = {'name': (network['name'] +,1,1,0.16666666666666666,342
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_update_network_request(self, context, network, add_segments,",1,1,0.16666666666666666,343
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,members = [],1,1,0.16666666666666666,344
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment1, sep, segment2 = pair.partition(':')",1,1,0.16666666666666666,345
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('%s is not a valid uuid', segment)",1,1,0.16666666666666666,346
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif binding.network_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.16666666666666666,347
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return member_list,1,1,0.16666666666666666,348
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param add_segments: List of segments bindings,1,1,0.16666666666666666,349
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,member_dict['dot1q'] = dot1qtag,1,1,0.16666666666666666,350
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Populate trunk network dict with member segments.,1,1,0.16666666666666666,351
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,trunk_list = [],1,1,0.16666666666666666,352
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"member_dict = {'segment': net['name'],",1,1,0.16666666666666666,353
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['add_segment_list'] = trunk_list,1,1,0.16666666666666666,354
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['del_segment_list'] = trunk_list,1,1,0.16666666666666666,355
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Parse the multi-segment network attributes.,1,1,0.16666666666666666,356
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param attrs: Attributes of the network,1,1,0.16666666666666666,357
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,or del operation,1,1,0.16666666666666666,358
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pair_list = [],1,1,0.16666666666666666,359
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"valid_seg_types = [c_const.NETWORK_TYPE_VLAN,",1,1,0.16666666666666666,360
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return pair_list,1,1,0.16666666666666666,361
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding1 = n1kv_db_v2.get_network_binding(context.session,",1,1,0.16666666666666666,362
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding2 = n1kv_db_v2.get_network_binding(context.session,",1,1,0.16666666666666666,363
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Parse the trunk network attributes.,1,1,0.16666666666666666,364
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param physical_network: Physical network of the trunk segment,1,1,0.16666666666666666,365
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment, sep, dot1qtag = pair.partition(':')",1,1,0.16666666666666666,366
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,dot1qtag = '',1,1,0.16666666666666666,367
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if binding.network_type == c_const.NETWORK_TYPE_TRUNK:,1,1,0.16666666666666666,368
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""a vxlan trunk segment"") % segment",1,1,0.16666666666666666,369
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network = binding.physical_network,1,1,0.16666666666666666,370
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send update network request to VSM.,1,1,0.16666666666666666,371
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id = self._process_network_profile(context, network['network'])",1,1,0.16666666666666666,372
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param del_segments: List of segments bindings,1,1,0.16666666666666666,373
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segmentation_id) = self._process_provider_create(context,",1,1,0.16666666666666666,374
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('Create network: profile_id=%s', profile_id)",1,1,0.16666666666666666,375
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# tenant network,1,1,0.16666666666666666,376
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multicast_ip) = n1kv_db_v2.alloc_network(session,",1,1,0.16666666666666666,377
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,1,0.16666666666666666,378
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_pairs = (,1,1,0.16666666666666666,379
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile = self.get_network_profile(context,",1,1,0.16666666666666666,380
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.TenantNetworksDisabled(),1,1,0.16666666666666666,381
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# provider network,1,1,0.16666666666666666,382
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min, seg_max = self._get_segment_range(",1,1,0.16666666666666666,383
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise cisco_exceptions.VlanIDOutsidePool(),1,1,0.16666666666666666,384
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multicast_ip = ""0.0.0.0""",1,1,0.16666666666666666,385
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._process_l3_create(context, net, network['network'])",1,1,0.16666666666666666,386
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_create_network_request(context, net, segment_pairs)",1,1,0.16666666666666666,387
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete_network_db(context, net['id'])",1,1,0.16666666666666666,388
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update network parameters.,1,1,0.16666666666666666,389
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the network to update,1,1,0.16666666666666666,390
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: updated network object,1,1,0.16666666666666666,391
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,add_segments = [],1,1,0.16666666666666666,392
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,del_segments = [],1,1,0.16666666666666666,393
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._process_l3_update(context, net, network['network'])",1,1,0.16666666666666666,394
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,add_segments = (,1,1,0.16666666666666666,395
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,member_dict = {},1,1,0.16666666666666666,396
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,del_segments = (,1,1,0.16666666666666666,397
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_pairs = None,1,1,0.16666666666666666,398
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: network object,1,1,0.16666666666666666,399
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session = context.session,1,1,0.16666666666666666,400
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return binding.segmentation_id,1,1,0.16666666666666666,401
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'id': network['id'],",1,1,0.16666666666666666,402
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._populate_member_segments(context, network, add_segments,",1,1,0.16666666666666666,403
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['mode'] = c_const.NETWORK_TYPE_TRUNK,1,1,0.16666666666666666,404
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['segmentType'] = profile['sub_type'],1,1,0.16666666666666666,405
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['addSegments'] = network['add_segment_list'],1,1,0.16666666666666666,406
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['delSegments'] = network['del_segment_list'],1,1,0.16666666666666666,407
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_profile = (network['id'] +,1,1,0.16666666666666666,408
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"encap_dict = {'name': encap_profile,",1,1,0.16666666666666666,409
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send delete network request to VSM.,1,1,0.16666666666666666,410
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,name = network['id'] + c_const.BRIDGE_DOMAIN_SUFFIX,1,1,0.16666666666666666,411
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_name = (network['id'] +,1,1,0.16666666666666666,412
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"encap_dict = n1kv_db_v2.get_multi_segment_encap_dict(session,",1,1,0.16666666666666666,413
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_dict = {'name': profile,",1,1,0.16666666666666666,414
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(segment1, segment2) = segment_pair",1,1,0.16666666666666666,415
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"If the VM network already exists, bind this port to the existing",1,1,0.16666666666666666,416
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VM network on the VSM.,1,1,0.16666666666666666,417
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile: object of type policy profile,1,1,0.16666666666666666,418
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network,1,1,0.16666666666666666,419
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param mac_address: string representing the mac address,1,1,0.16666666666666666,420
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port: port object which is to be deleted,1,1,0.16666666666666666,421
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID of the network,1,1,0.16666666666666666,422
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: segmentation ID for the network,1,1,0.16666666666666666,423
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = n1kv_db_v2.get_network_binding(session, id)",1,1,0.16666666666666666,424
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,member_dict['bridgeDomain'] = (net['name'] +,1,1,0.16666666666666666,425
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,plugin_profiles_set = set(),1,1,0.16666666666666666,426
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(segment, dot1qtag) = pair",1,1,0.16666666666666666,427
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.16666666666666666,428
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG = logging.getLogger(__name__),1,1,0.16666666666666666,429
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,__native_bulk_support = False,1,1,0.16666666666666666,430
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"supported_extension_aliases = [""provider"", ""agent"",",1,1,0.16666666666666666,431
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.base_binding_dict = {,1,1,0.16666666666666666,432
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.network_scheduler = importutils.import_object(,1,1,0.16666666666666666,433
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.service_topics = {svc_constants.CORE: topics.PLUGIN},1,1,0.16666666666666666,434
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.conn = n_rpc.create_connection(new=True),1,1,0.16666666666666666,435
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.endpoints = [dhcp_rpc.DhcpRpcCallback(),",1,1,0.16666666666666666,436
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.dhcp_agent_notifier = dhcp_rpc_agent_api.DhcpAgentNotifyAPI(),1,1,0.16666666666666666,437
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve all the policy profiles from the VSM when the plugin,1,1,0.16666666666666666,438
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is instantiated for the first time and then continue to poll for,1,1,0.16666666666666666,439
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy profile updates.,1,1,0.16666666666666666,440
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Start a green thread to pull policy profiles from VSM.""""""",1,1,0.16666666666666666,441
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Populate all the policy profiles from VSM.,1,1,0.16666666666666666,442
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from the VSM. Hence we associate the policy profiles with fake,1,1,0.16666666666666666,443
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient = n1kv_client.Client(),1,1,0.16666666666666666,444
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy_profiles = n1kvclient.list_port_profiles(),1,1,0.16666666666666666,445
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vsm_profiles = {},1,1,0.16666666666666666,446
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Fetch policy profiles from VSM,1,1,0.16666666666666666,447
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id = (policy_profiles,1,1,0.16666666666666666,448
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vsm_profiles[profile_id] = profile_name,1,1,0.16666666666666666,449
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Fetch policy profiles previously populated,1,1,0.16666666666666666,450
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for profile in n1kv_db_v2.get_policy_profiles():,1,1,0.16666666666666666,451
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.v2 import attributes,1,1,0.16666666666666666,452
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(self.encap_profile_path % name),1,1,0.16666666666666666,453
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,member_list = [],1,1,0.16666666666666666,454
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: name of the encapsulation profile to be deleted,1,1,0.16666666666666666,455
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net['id'], del_segments)",1,1,0.16666666666666666,456
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VSMError(reason=resp.text),1,1,0.16666666666666666,457
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,format = self.format,1,1,0.16666666666666666,458
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return ""application/%s"" % format",1,1,0.16666666666666666,459
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._do_request(""DELETE"", action, body=body,",1,1,0.16666666666666666,460
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._do_request(""GET"", action, body=body,",1,1,0.16666666666666666,461
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._do_request(""POST"", action, body=body,",1,1,0.16666666666666666,462
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._do_request(""PUT"", action, body=body,",1,1,0.16666666666666666,463
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of VSM ip addresses.,1,1,0.16666666666666666,464
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:return: list of host ip addresses,1,1,0.16666666666666666,465
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [cr[c_const.CREDENTIAL_NAME] for cr in,1,1,0.16666666666666666,466
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param host_ip: IP address of the VSM,1,1,0.16666666666666666,467
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,username = c_cred.Store.get_username(host_ip),1,1,0.16666666666666666,468
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,password = c_cred.Store.get_password(host_ip),1,1,0.16666666666666666,469
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"auth = safe_b64_encode(""%s:%s"" % (username, password))",1,1,0.16666666666666666,470
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"header = {""Authorization"": ""Basic %s"" % auth}",1,1,0.16666666666666666,471
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return header,1,1,0.16666666666666666,472
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Fetches a list of all vxlan gateway clusters.""""""",1,1,0.16666666666666666,473
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._get(self.clusters_path),1,1,0.16666666666666666,474
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create an encapsulation profile on VSM.,1,1,0.16666666666666666,475
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.encap_profiles_path,",1,1,0.16666666666666666,476
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._post(self.encap_profile_path,1,1,0.16666666666666666,477
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete an encapsulation profile on VSM.,1,1,0.16666666666666666,478
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vsm_profiles_set = set(vsm_profiles),1,1,0.16666666666666666,479
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Update database if the profile sets differ.,1,1,0.16666666666666666,480
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.warning(_LW('No policy profile populated from VSM')),1,1,0.16666666666666666,481
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Add extended network parameters.""""""",1,1,0.16666666666666666,482
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mapping_dict['dot1q'] = str(net[providernet.SEGMENTATION_ID]),1,1,0.16666666666666666,483
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mapping_dict['bridgeDomain'] = (net['name'] +,1,1,0.16666666666666666,484
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send Add multi-segment network request to VSM.,1,1,0.16666666666666666,485
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param net_id: UUID of the multi-segment network,1,1,0.16666666666666666,486
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_pairs: List of segments in UUID pairs,1,1,0.16666666666666666,487
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,session = context.session,1,1,0.16666666666666666,488
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,clusters = n1kvclient.get_clusters(),1,1,0.16666666666666666,489
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,online_clusters = [],1,1,0.16666666666666666,490
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict = {},1,1,0.16666666666666666,491
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,cluster = cluster[c_const.PROPERTIES],1,1,0.16666666666666666,492
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,cluster['size'] = 0,1,1,0.16666666666666666,493
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"encap_profile = self._get_cluster(segment1, segment2,",1,1,0.16666666666666666,494
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if encap_profile is not None:,1,1,0.16666666666666666,495
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_dict = encap_dict[encap_profile],1,1,0.16666666666666666,496
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_dict = {'name': encap_profile,",1,1,0.16666666666666666,497
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict[encap_profile] = profile_dict,1,1,0.16666666666666666,498
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mapping_dict = {},1,1,0.16666666666666666,499
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise cisco_exceptions.NoClusterFound(),1,1,0.16666666666666666,500
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for profile in encap_dict:,1,1,0.16666666666666666,501
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send Delete multi-segment network request to VSM.,1,1,0.16666666666666666,502
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding = (,1,1,0.16666666666666666,503
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_profile = binding['encap_profile_name'],1,1,0.16666666666666666,504
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_pairs: List of segments that need to be bridged,1,1,0.16666666666666666,505
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment: id of the segment being populated,1,1,0.16666666666666666,506
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return cluster['encapProfileName'],1,1,0.16666666666666666,507
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# TBD : Need to handle provider network updates,1,1,0.16666666666666666,508
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_type = attrs.get(providernet.NETWORK_TYPE),1,1,0.16666666666666666,509
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = n1kv_db_v2.get_network_binding(context.session,",1,1,0.16666666666666666,510
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if binding.network_type == c_const.NETWORK_TYPE_OVERLAY:,1,1,0.16666666666666666,511
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[providernet.PHYSICAL_NETWORK] = None,1,1,0.16666666666666666,512
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[providernet.SEGMENTATION_ID] = binding.segmentation_id,1,1,0.16666666666666666,513
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[n1kv.MULTICAST_IP] = binding.multicast_ip,1,1,0.16666666666666666,514
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif binding.network_type == c_const.NETWORK_TYPE_VLAN:,1,1,0.16666666666666666,515
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[providernet.PHYSICAL_NETWORK] = binding.physical_network,1,1,0.16666666666666666,516
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif binding.network_type == c_const.NETWORK_TYPE_TRUNK:,1,1,0.16666666666666666,517
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[providernet.SEGMENTATION_ID] = None,1,1,0.16666666666666666,518
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[n1kv.MULTICAST_IP] = None,1,1,0.16666666666666666,519
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network = attrs.get(providernet.PHYSICAL_NETWORK),1,1,0.16666666666666666,520
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return,1,1,0.16666666666666666,521
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segmentation_id = attrs.get(providernet.SEGMENTATION_ID),1,1,0.16666666666666666,522
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_type_set = attributes.is_attr_set(network_type),1,1,0.16666666666666666,523
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network_set = attributes.is_attr_set(physical_network),1,1,0.16666666666666666,524
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segmentation_id_set = attributes.is_attr_set(segmentation_id),1,1,0.16666666666666666,525
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (None, None, None)",1,1,0.16666666666666666,526
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segmentation_id < 1 or segmentation_id > 4094:,1,1,0.16666666666666666,527
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network = None,1,1,0.16666666666666666,528
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profiles = n1kv_db_v2.get_network_profiles(),1,1,0.16666666666666666,529
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (network_type, physical_network, segmentation_id)",1,1,0.16666666666666666,530
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Handle Provider network updates.""""""",1,1,0.16666666666666666,531
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,del_segments),1,1,0.16666666666666666,532
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,obj_inst.return_value = 3,1,1,0.16666666666666666,533
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the network to delete,1,1,0.16666666666666666,534
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,HAS_PORT_FILTER = False,1,1,0.16666666666666666,535
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test port create without passing policy profile id.""""""",1,1,0.16666666666666666,536
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pp = n1kv_db_v2.get_policy_profile(,1,1,0.16666666666666666,537
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test port create with policy profile id.""""""",1,1,0.16666666666666666,538
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_obj = self._make_test_policy_profile(name='test_profile'),1,1,0.16666666666666666,539
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with self.network() as network:,1,1,0.16666666666666666,540
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port_req = self.new_create_request('ports', data)",1,1,0.16666666666666666,541
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port = self.deserialize(self.fmt,",1,1,0.16666666666666666,542
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test port update failure while updating policy profile id.""""""",1,1,0.16666666666666666,543
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port_req = self.new_update_request('ports',",1,1,0.16666666666666666,544
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Port update should fail to update policy profile id.,1,1,0.16666666666666666,545
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test whether VMNetwork is cleaned up if port create fails on VSM.""""""",1,1,0.16666666666666666,546
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# for network object clean up to succeed.,1,1,0.16666666666666666,547
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pt = port['port'],1,1,0.16666666666666666,548
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"old_vmn = n1kv_db_v2.get_vm_network(db_session,",1,1,0.16666666666666666,549
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"new_vmn = n1kv_db_v2.get_vm_network(db_session,",1,1,0.16666666666666666,550
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test whether VMNetwork is cleaned up from db on last port delete.""""""",1,1,0.16666666666666666,551
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Verify VMNetwork is cleaned up from the database on port delete.,1,1,0.16666666666666666,552
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Setup function for policy profile tests.,1,1,0.16666666666666666,553
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,We need to use the policy profile extension manager for these,1,1,0.16666666666666666,554
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy profile extension manager.,1,1,0.16666666666666666,555
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,instance = n1kv_neutron_plugin.N1kvNeutronPluginV2(),1,1,0.16666666666666666,556
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Patch the _get_total_profiles() method to return a custom value,1,1,0.16666666666666666,557
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Return 3 policy profiles,1,1,0.16666666666666666,558
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"_unsupported = ('test_delete_network_if_port_exists',",1,1,0.16666666666666666,559
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VIF_TYPE = portbindings.VIF_TYPE_OVS,1,1,0.16666666666666666,560
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,plugin = manager.NeutronManager.get_plugin(),1,1,0.16666666666666666,561
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sess2 = db.get_session(),1,1,0.16666666666666666,562
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"update_req = self.new_update_request('network_profiles',",1,1,0.16666666666666666,563
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,update_res = update_req.get_response(self.ext_api),1,1,0.16666666666666666,564
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_data = {'network': {'name': 'net1',",1,1,0.16666666666666666,565
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_req = self.new_create_request('networks', net_data)",1,1,0.16666666666666666,566
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_res = network_req.get_response(self.api),1,1,0.16666666666666666,567
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data['network_profile']['multicast_ip_range'] = '',1,1,0.16666666666666666,568
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"client_patch = mock.patch(n1kv_client.__name__ + "".Client"",",1,1,0.16666666666666666,569
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,bindings = (db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,1,0.16666666666666666,570
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data['network_profile']['add_tenant'] = 'tenant1',1,1,0.16666666666666666,571
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data['network_profile'][c_const.ADD_TENANTS] = ['tenant1', 'tenant2']",1,1,0.16666666666666666,572
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,del data['network_profile']['tenant_id'],1,1,0.16666666666666666,573
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p_req.environ['neutron.context'] = context.Context('',",1,1,0.16666666666666666,574
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id = n1kv_db_v2.get_profile_binding(db_session, self.tenant_id,",1,1,0.16666666666666666,575
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant1 = n1kv_db_v2.get_profile_binding(db_session, 'tenant1',",1,1,0.16666666666666666,576
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant2 = n1kv_db_v2.get_profile_binding(db_session, 'tenant2',",1,1,0.16666666666666666,577
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"update_req.environ['neutron.context'] = context.Context('',",1,1,0.16666666666666666,578
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant3 = n1kv_db_v2.get_profile_binding(db_session, 'tenant3',",1,1,0.16666666666666666,579
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant4 = n1kv_db_v2.get_profile_binding(db_session, 'tenant4',",1,1,0.16666666666666666,580
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_conf.CONF.set_override('restrict_network_profiles', True,",1,1,0.16666666666666666,581
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ctx1 = context.Context(user_id='admin',",1,1,0.16666666666666666,582
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sess1 = db.get_session(),1,1,0.16666666666666666,583
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#network profile binding with creator tenant should always exist,1,1,0.16666666666666666,584
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ctx2 = context.Context(user_id='non_admin',",1,1,0.16666666666666666,585
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return resp.json(),1,1,0.16666666666666666,586
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Verify that DB contains only 3 policy profiles,1,1,0.16666666666666666,587
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""that is member of a trunk segment"") % network['name']",1,1,0.16666666666666666,588
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with self.network(shared=True) as network:,1,1,0.16666666666666666,589
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Verify that a network with a port attached cannot be removed.""""""",1,1,0.16666666666666666,590
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_id = network['network']['id'],1,1,0.16666666666666666,591
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,_unsupported = (,1,1,0.16666666666666666,592
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.skipTest(""plugin does not return standard conflict code"")",1,1,0.16666666666666666,593
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnet_req = self.new_create_request('subnets', data)",1,1,0.16666666666666666,594
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,subnet_resp = subnet_req.get_response(self.api),1,1,0.16666666666666666,595
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Subnet creation should fail due to invalid network name,1,1,0.16666666666666666,596
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"host_routes = [{'destination': '172.16.0.0/24',",1,1,0.16666666666666666,597
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnet = self.deserialize(self.fmt, req.get_response(self.api))",1,1,0.16666666666666666,598
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"dns_nameservers = ['192.168.0.1', '192.168.0.2']",1,1,0.16666666666666666,599
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# In N1K we need to delete the subnet before the network,1,1,0.16666666666666666,600
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Check fixed IP not in allocation range,1,1,0.16666666666666666,601
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs = {""fixed_ips"": [{'subnet_id': subnet['subnet']['id'],",1,1,0.16666666666666666,602
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Check when fixed IP is gateway,1,1,0.16666666666666666,603
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnet1 = self.deserialize(self.fmt, res)",1,1,0.16666666666666666,604
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnet2 = self.deserialize(self.fmt, res)",1,1,0.16666666666666666,605
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs = {""fixed_ips"": [{'subnet_id': subnet1['subnet']['id']},",1,1,0.16666666666666666,606
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port3 = self.deserialize(self.fmt, res)",1,1,0.16666666666666666,607
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ips = port3['port']['fixed_ips'],1,1,0.16666666666666666,608
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port4 = self.deserialize(self.fmt, res)",1,1,0.16666666666666666,609
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Check that a v4 and a v6 address are allocated,1,1,0.16666666666666666,610
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ips = port4['port']['fixed_ips'],1,1,0.16666666666666666,611
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Test with network auto-scheduling disabled,1,1,0.16666666666666666,612
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port = self.deserialize(self.fmt, res)",1,1,0.16666666666666666,613
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"Verifies that updating a network which cannot be shared,",1,1,0.16666666666666666,614
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Return 2 policy profiles,1,1,0.16666666666666666,615
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_id = subnet['subnet']['network_id'],1,1,0.16666666666666666,616
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,obj_inst.return_value = 2,1,1,0.16666666666666666,617
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Get the profiles,1,1,0.16666666666666666,618
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [,1,1,0.16666666666666666,619
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,resource = 'policy_profiles',1,1,0.16666666666666666,620
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ctx = context.Context(user_id='admin',",1,1,0.16666666666666666,621
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ctx = context.Context(user_id='non_admin',",1,1,0.16666666666666666,622
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Test unrestricted policy profile retrieval.,1,1,0.16666666666666666,623
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Test getting policy profiles using the normal unrestricted,1,1,0.16666666666666666,624
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Test restricted policy profile retrieval.,1,1,0.16666666666666666,625
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Test getting policy profiles using the restricted behavior.,1,1,0.16666666666666666,626
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_conf.CONF.set_override('restrict_policy_profiles', True,",1,1,0.16666666666666666,627
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Request the list using non-admin and verify it returns no data,1,1,0.16666666666666666,628
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"True,",1,1,0.16666666666666666,629
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"req.environ['neutron.context'] = context.Context('', self.tenant_id)",1,1,0.16666666666666666,630
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return {'network': {'name': 'net1',",1,1,0.16666666666666666,631
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,np = n1kv_db_v2.get_network_profile(,1,1,0.16666666666666666,632
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_obj = self._make_test_profile(name='test_profile'),1,1,0.16666666666666666,633
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_req = self.new_create_request('networks', data)",1,1,0.16666666666666666,634
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_req = self.new_update_request('networks',",1,1,0.16666666666666666,635
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test vlan segment deallocation on network create failure.""""""",1,1,0.16666666666666666,636
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_obj = self._make_test_profile(name='test_profile',",1,1,0.16666666666666666,637
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_obj = self._make_test_profile('test_np',",1,1,0.16666666666666666,638
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Network deletion fails when a subnet is present on the network.""""""",1,1,0.16666666666666666,639
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['sub_type'] = c_const.NETWORK_TYPE_VLAN,1,1,0.16666666666666666,640
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['multicast_ip_range'] = (mcast_ip_range or,1,1,0.16666666666666666,641
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['sub_type'] = sub_type or 'enhanced',1,1,0.16666666666666666,642
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network_name = ""%s%s_%s"" % (c_const.VM_NETWORK_NAME_PREFIX,",1,1,0.16666666666666666,643
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network_name = vm_network['name'],1,1,0.16666666666666666,644
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p_profile = n1kv_db_v2.get_policy_profile(session, profile_id)",1,1,0.16666666666666666,645
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return pt,1,1,0.16666666666666666,646
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"updated_port = super(N1kvNeutronPluginV2,",1,1,0.16666666666666666,647
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return updated_port,1,1,0.16666666666666666,648
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._l3plugin,1,1,0.16666666666666666,649
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._l3plugin = manager.NeutronManager.get_service_plugins().get(,1,1,0.16666666666666666,650
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# if needed, check to see if this is a port owned by",1,1,0.16666666666666666,651
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port = self.get_port(context, id)",1,1,0.16666666666666666,652
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network = n1kv_db_v2.get_vm_network(context.session,",1,1,0.16666666666666666,653
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network['port_count'] -= 1,1,1,0.16666666666666666,654
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port = super(N1kvNeutronPluginV2, self).get_port(context, id, None)",1,1,0.16666666666666666,655
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._fields(port, fields)",1,1,0.16666666666666666,656
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ports = super(N1kvNeutronPluginV2, self).get_ports(context, filters,",1,1,0.16666666666666666,657
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return [self._fields(port, fields) for port in ports]",1,1,0.16666666666666666,658
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sub = super(N1kvNeutronPluginV2, self).create_subnet(context, subnet)",1,1,0.16666666666666666,659
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return sub,1,1,0.16666666666666666,660
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sub = super(N1kvNeutronPluginV2, self).update_subnet(context,",1,1,0.16666666666666666,661
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnet = self.get_subnet(context, id)",1,1,0.16666666666666666,662
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return super(N1kvNeutronPluginV2, self).delete_subnet(context, id)",1,1,0.16666666666666666,663
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnet = super(N1kvNeutronPluginV2, self).get_subnet(context, id,",1,1,0.16666666666666666,664
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._fields(subnet, fields)",1,1,0.16666666666666666,665
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"subnets = super(N1kvNeutronPluginV2, self).get_subnets(context,",1,1,0.16666666666666666,666
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network = n1kv_db_v2.add_vm_network(context.session,",1,1,0.16666666666666666,667
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Create a VM Network if no VM network exists.,1,1,0.16666666666666666,668
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['segment_range'] = segment_range or '10000-10010',1,1,0.16666666666666666,669
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network = n1kv_db_v2.get_vm_network(,1,1,0.16666666666666666,670
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# the network_binding record is deleted via cascade from,1,1,0.16666666666666666,671
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Deleted network: %s"", id)",1,1,0.16666666666666666,672
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the network to fetch,1,1,0.16666666666666666,673
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: requested network dictionary,1,1,0.16666666666666666,674
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Get network: %s"", id)",1,1,0.16666666666666666,675
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._fields(net, fields)",1,1,0.16666666666666666,676
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network object. Values in this dictiontary are an,1,1,0.16666666666666666,677
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params fields: a list of strings that are valid keys in a network,1,1,0.16666666666666666,678
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: list of network dictionaries.,1,1,0.16666666666666666,679
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"nets = super(N1kvNeutronPluginV2, self).get_networks(context, filters,",1,1,0.16666666666666666,680
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for net in nets:,1,1,0.16666666666666666,681
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p_profile = None,1,1,0.16666666666666666,682
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_count = None,1,1,0.16666666666666666,683
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network = None,1,1,0.16666666666666666,684
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network_name = None,1,1,0.16666666666666666,685
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id_set = False,1,1,0.16666666666666666,686
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p_profile_name = c_conf.CISCO_N1K.network_node_policy_profile,1,1,0.16666666666666666,687
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p_profile = self._get_policy_profile_by_name(p_profile_name),1,1,0.16666666666666666,688
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port['port']['n1kv:profile_id'] = p_profile['id'],1,1,0.16666666666666666,689
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id = port['port'].get(n1kv.PROFILE_ID),1,1,0.16666666666666666,690
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p_profile_name = c_conf.CISCO_N1K.default_policy_profile,1,1,0.16666666666666666,691
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id = self._process_policy_profile(context,",1,1,0.16666666666666666,692
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"pt = super(N1kvNeutronPluginV2, self).create_port(context,",1,1,0.16666666666666666,693
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return [self._fields(subnet, fields) for subnet in subnets]",1,1,0.16666666666666666,694
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a network profile.,1,1,0.16666666666666666,695
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"Create a network profile, which represents a pool of networks",1,1,0.16666666666666666,696
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,belonging to one type (VLAN or Overlay). On creation of network,1,1,0.16666666666666666,697
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,default name specified in config.py file.,1,1,0.16666666666666666,698
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,uuid = test_base._uuid(),1,1,0.16666666666666666,699
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return n1kv_db_v2.create_policy_profile(profile),1,1,0.16666666666666666,700
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a profile record for testing purposes.,1,1,0.16666666666666666,701
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_type: string representing the type of network segment.,1,1,0.16666666666666666,702
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session = db.get_session(),1,1,0.16666666666666666,703
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile['sub_type'] = 'unicast',1,1,0.16666666666666666,704
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile['multicast_ip_range'] = '0.0.0.0',1,1,0.16666666666666666,705
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile['physical_network'] = PHYS_NET,1,1,0.16666666666666666,706
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,First step is to define an acceptable response from the VSM to,1,1,0.16666666666666666,707
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,of the super-class is called.,1,1,0.16666666666666666,708
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,This default here works for many cases. If you need something,1,1,0.16666666666666666,709
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.DEFAULT_RESP_BODY = {,1,1,0.16666666666666666,710
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,FakeHttpConnection = http_patcher.start(),1,1,0.16666666666666666,711
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Now define the return values for a few functions that may be called,1,1,0.16666666666666666,712
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.resp_headers = {""content-type"": ""application/json""}",1,1,0.16666666666666666,713
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,FakeHttpConnection.return_value = (FakeResponse(,1,1,0.16666666666666666,714
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Return a dummy VSM IP address,1,1,0.16666666666666666,715
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Return dummy user profiles,1,1,0.16666666666666666,716
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_neutron_plugin.N1kvNeutronPluginV2._setup_vsm = _fake_setup_vsm,1,1,0.16666666666666666,717
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"netp = {'name': 'netp1',",1,1,0.16666666666666666,718
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['segment_range'] = segment_range or '100-110',1,1,0.16666666666666666,719
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['physical_network'] = PHYS_NET,1,1,0.16666666666666666,720
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: string representing the name of the policy profile to,1,1,0.16666666666666666,721
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a policy profile record for testing purpose.,1,1,0.16666666666666666,722
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"fmt = ""json""",1,1,0.16666666666666666,723
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.buffer = response_text,1,1,0.16666666666666666,724
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a network profile.,1,1,0.16666666666666666,725
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a network profile.,1,1,0.16666666666666666,726
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.16666666666666666,727
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.v2 import attributes,1,1,0.16666666666666666,728
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,PHYS_NET = 'some-phys-net',1,1,0.16666666666666666,729
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VLAN_MIN = 100,1,1,0.16666666666666666,730
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VLAN_MAX = 110,1,1,0.16666666666666666,731
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,TENANT_NOT_ADMIN = 'not_admin',1,1,0.16666666666666666,732
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,TENANT_TEST = 'test',1,1,0.16666666666666666,733
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,This object is returned by mocked requests lib instead of normal response.,1,1,0.16666666666666666,734
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.status_code = status,1,1,0.16666666666666666,735
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"DEFAULT_CONTENT_TYPE = """"",1,1,0.16666666666666666,736
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.headers = headers,1,1,0.16666666666666666,737
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self.buffer,1,1,0.16666666666666666,738
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# This is done here as the setup process won't,1,1,0.16666666666666666,739
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return network_profile.Network_profile.get_resources(),1,1,0.16666666666666666,740
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [],1,1,0.16666666666666666,741
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return policy_profile.Policy_profile.get_resources(),1,1,0.16666666666666666,742
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,_plugin_name = ('neutron.plugins.cisco.n1kv.',1,1,0.16666666666666666,743
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id = ""some_tenant""",1,1,0.16666666666666666,744
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"DEFAULT_RESP_BODY = """"",1,1,0.16666666666666666,745
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,DEFAULT_RESP_CODE = 200,1,1,0.16666666666666666,746
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return {},1,1,0.16666666666666666,747
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"http_patcher = mock.patch(n1kv_client.requests.__name__ + "".request"")",1,1,0.16666666666666666,748
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VSMConnectionFailed(reason=e),1,1,0.16666666666666666,749
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Reserving specific vlan %(vlan)s on physical network """,1,1,0.16666666666666666,750
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc.allocated = False,1,1,0.16666666666666666,751
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.warning(_LW(""vlan_id %(vlan)s on physical network %(network)s """,1,1,0.16666666666666666,752
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Synchronize vxlan_allocations table with configured vxlan ranges.,1,1,0.16666666666666666,753
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if seg_max + 1 - seg_min > c_const.MAX_VXLAN_RANGE:,1,1,0.16666666666666666,754
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc = n1kv_models_v2.N1kvVxlanAllocation(,1,1,0.16666666666666666,755
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.N1kvVxlanAllocation).,1,1,0.16666666666666666,756
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VxlanIDNotFound(vxlan_id=vxlan_id),1,1,0.16666666666666666,757
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VxlanIDInUse(vxlan_id=vxlan_id),1,1,0.16666666666666666,758
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Reserving specific vxlan %s from pool"", vxlan_id)",1,1,0.16666666666666666,759
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VxlanIDOutsidePool(),1,1,0.16666666666666666,760
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session = db.get_session(),1,1,0.16666666666666666,761
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port = db_session.query(models_v2.Port).filter_by(id=port_id).one(),1,1,0.16666666666666666,762
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port.status = status,1,1,0.16666666666666666,763
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.PortNotFound(port_id=port_id),1,1,0.16666666666666666,764
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile_id: UUID representing policy profile,1,1,0.16666666666666666,765
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_id: UUID representing network,1,1,0.16666666666666666,766
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: VM network object,1,1,0.16666666666666666,767
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.N1kVmNetwork).,1,1,0.16666666666666666,768
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,name = (c_const.VM_NETWORK_NAME_PREFIX + policy_profile_id,1,1,0.16666666666666666,769
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VMNetworkNotFound(name=name),1,1,0.16666666666666666,770
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy profile. All ports having the same policy profile,1,1,0.16666666666666666,771
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,on one network will be associated with one VM network.,1,1,0.16666666666666666,772
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: string representing the name of the VM network,1,1,0.16666666666666666,773
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VlanIDOutsidePool(),1,1,0.16666666666666666,774
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"raise n_exc.VlanIdInUse(vlan_id=vlan_id,",1,1,0.16666666666666666,775
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_count: integer representing the number of ports on vm network,1,1,0.16666666666666666,776
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.FlatNetworkInUse(,1,1,0.16666666666666666,777
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc = n1kv_models_v2.N1kvVlanAllocation(,1,1,0.16666666666666666,778
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: allocation object for given physical network and VLAN ID,1,1,0.16666666666666666,779
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.N1kvVlanAllocation).,1,1,0.16666666666666666,780
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.VlanIDNotFound(vlan_id=vlan_id),1,1,0.16666666666666666,781
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min, seg_max = get_segment_range(network_profile)",1,1,0.16666666666666666,782
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_type = c_const.NETWORK_TYPE_VLAN,1,1,0.16666666666666666,783
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc = (db_session.query(n1kv_models_v2.N1kvVlanAllocation).,1,1,0.16666666666666666,784
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_id = alloc.vlan_id,1,1,0.16666666666666666,785
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network = alloc.physical_network,1,1,0.16666666666666666,786
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (physical_network, segment_type, segment_id, ""0.0.0.0"")",1,1,0.16666666666666666,787
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NoMoreNetworkSegments(,1,1,0.16666666666666666,788
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_type = c_const.NETWORK_TYPE_OVERLAY,1,1,0.16666666666666666,789
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"physical_network = """"",1,1,0.16666666666666666,790
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc = (db_session.query(n1kv_models_v2.N1kvVxlanAllocation).,1,1,0.16666666666666666,791
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_id = alloc.vxlan_id,1,1,0.16666666666666666,792
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (physical_network, segment_type,",1,1,0.16666666666666666,793
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise n_exc.NoNetworkAvailable(),1,1,0.16666666666666666,794
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Allocate network using first available free segment ID in segment range.,1,1,0.16666666666666666,795
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile = get_network_profile(db_session,",1,1,0.16666666666666666,796
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return reserve_vlan(db_session, network_profile)",1,1,0.16666666666666666,797
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return reserve_vxlan(db_session, network_profile)",1,1,0.16666666666666666,798
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (None, network_profile.segment_type, 0, ""0.0.0.0"")",1,1,0.16666666666666666,799
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param physical_network: string representing the name of physical network,1,1,0.16666666666666666,800
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_id: UUID representing a network,1,1,0.16666666666666666,801
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network = n1kv_models_v2.N1kVmNetwork(,1,1,0.16666666666666666,802
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return db_session.query(n1kv_models_v2.ProfileBinding),1,1,0.16666666666666666,803
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,all network profiles.,1,1,0.16666666666666666,804
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.NetworkProfile).,1,1,0.16666666666666666,805
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return db_session.query(n1kv_models_v2.NetworkProfile),1,1,0.16666666666666666,806
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p_profile = n1kv_models_v2.PolicyProfile(id=policy_profile[""id""],",1,1,0.16666666666666666,807
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return p_profile,1,1,0.16666666666666666,808
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"policy_profile = get_policy_profile(db_session, id)",1,1,0.16666666666666666,809
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"_profile = get_policy_profile(db_session, id)",1,1,0.16666666666666666,810
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return _profile,1,1,0.16666666666666666,811
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return db_session.query(,1,1,0.16666666666666666,812
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.PolicyProfileIdNotFound(profile_id=id),1,1,0.16666666666666666,813
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return db_session.query(n1kv_models_v2.PolicyProfile),1,1,0.16666666666666666,814
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return get_profile_binding(db_session, tenant_id, profile_id)",1,1,0.16666666666666666,815
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = n1kv_models_v2.ProfileBinding(profile_type=profile_type,",1,1,0.16666666666666666,816
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return binding,1,1,0.16666666666666666,817
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.ProfileBinding).,1,1,0.16666666666666666,818
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,1,0.16666666666666666,819
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.ProfileTenantBindingNotFound(profile_id=profile_id),1,1,0.16666666666666666,820
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = get_profile_binding(db_session, tenant_id, profile_id)",1,1,0.16666666666666666,821
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Profile-Tenant binding missing for profile ID """,1,1,0.16666666666666666,822
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return,1,1,0.16666666666666666,823
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new_tenants_set = set(tenants),1,1,0.16666666666666666,824
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant = n1kv_models_v2.ProfileBinding(profile_type=profile_type,",1,1,0.16666666666666666,825
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of profile bindings.,1,1,0.16666666666666666,826
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Get all profile-tenant bindings based on profile type.,1,1,0.16666666666666666,827
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session = db_session or db.get_session(),1,1,0.16666666666666666,828
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve all network profiles.,1,1,0.16666666666666666,829
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return vm_network,1,1,0.16666666666666666,830
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NetworkProfileNotFound(profile=id),1,1,0.16666666666666666,831
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a VM network with new port count.,1,1,0.16666666666666666,832
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_count: integer representing the number of ports on VM network,1,1,0.16666666666666666,833
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network = (db_session.query(n1kv_models_v2.N1kVmNetwork).,1,1,0.16666666666666666,834
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if port_count is not None:,1,1,0.16666666666666666,835
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network.port_count = port_count,1,1,0.16666666666666666,836
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile_id: UUID representing a policy profile,1,1,0.16666666666666666,837
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: deleted VM network object,1,1,0.16666666666666666,838
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network = get_vm_network(db_session,",1,1,0.16666666666666666,839
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,name = (c_const.VM_NETWORK_NAME_PREFIX + policy_profile_id +,1,1,0.16666666666666666,840
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Create a network profile.""""""",1,1,0.16666666666666666,841
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs = {""name"": network_profile[""name""],",1,1,0.16666666666666666,842
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs[""physical_network""] = network_profile[""physical_network""]",1,1,0.16666666666666666,843
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs[""segment_range""] = network_profile[""segment_range""]",1,1,0.16666666666666666,844
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs[""multicast_ip_index""] = 0",1,1,0.16666666666666666,845
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs[""multicast_ip_range""] = network_profile[",1,1,0.16666666666666666,846
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"kwargs[""sub_type""] = network_profile[""sub_type""]",1,1,0.16666666666666666,847
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_profile = n1kv_models_v2.NetworkProfile(**kwargs),1,1,0.16666666666666666,848
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return net_profile,1,1,0.16666666666666666,849
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile = get_network_profile(db_session, id, tenant_id)",1,1,0.16666666666666666,850
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return network_profile,1,1,0.16666666666666666,851
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.ProfileTenantBindingNotFound(profile_id=id),1,1,0.16666666666666666,852
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type=c_const.NETWORK) is None:,1,1,0.16666666666666666,853
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return db_session.query(n1kv_models_v2.NetworkProfile).filter_by(,1,1,0.16666666666666666,854
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min, seg_max = get_segment_range(net_p)",1,1,0.16666666666666666,855
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = n1kv_models_v2.N1kvPortBinding(port_id=port_id,",1,1,0.16666666666666666,856
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile_id: UUID of the policy profile,1,1,0.16666666666666666,857
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from sqlalchemy.orm import exc,1,1,0.16666666666666666,858
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG = logging.getLogger(__name__),1,1,0.16666666666666666,859
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a trunk network binding.,1,1,0.16666666666666666,860
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param trunk_segment_id: UUID representing the trunk network,1,1,0.16666666666666666,861
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,representing the segments that are trunked,1,1,0.16666666666666666,862
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,alloc = (db_session.query(n1kv_models_v2.,1,1,0.16666666666666666,863
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = get_network_binding(db_session, trunk_segment_id)",1,1,0.16666666666666666,864
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding.physical_network = None,1,1,0.16666666666666666,865
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a multi-segment network binding.,1,1,0.16666666666666666,866
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param multi_segment_id: UUID representing the multi-segment network,1,1,0.16666666666666666,867
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,representing the segments that are bridged,1,1,0.16666666666666666,868
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a trunk network binding.,1,1,0.16666666666666666,869
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param trunk_segment_id: UUID representing the multi-segment network,1,1,0.16666666666666666,870
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,representing the segments to be trunked,1,1,0.16666666666666666,871
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"member_seg_binding = get_network_binding(db_session,",1,1,0.16666666666666666,872
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding.physical_network = member_seg_binding.physical_network,1,1,0.16666666666666666,873
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,trunk_segment_binding = (,1,1,0.16666666666666666,874
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a multi-segment network binding.,1,1,0.16666666666666666,875
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,representing the segments to be bridged,1,1,0.16666666666666666,876
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,multi_segment_binding = (,1,1,0.16666666666666666,877
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding = get_multi_segment_network_binding(db_session,",1,1,0.16666666666666666,878
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding.encap_profile_name = profile_name,1,1,0.16666666666666666,879
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve multi-segment network binding.,1,1,0.16666666666666666,880
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param multi_segment_id: UUID representing the trunk network whose binding,1,1,0.16666666666666666,881
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.v2 import attributes,1,1,0.16666666666666666,882
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import netaddr,1,1,0.16666666666666666,883
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.PortBindingNotFound(port_id=port_id),1,1,0.16666666666666666,884
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.16666666666666666,885
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"resp = self.pool.spawn(requests.request,",1,1,0.16666666666666666,886
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"netp = {'name': 'netp1',",0,1,0.16666666666666666,887
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['segment_range'] = segment_range or '100-110',0,1,0.16666666666666666,888
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['physical_network'] = PHYS_NET,0,1,0.16666666666666666,889
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['segment_range'] = segment_range or '10000-10010',0,1,0.16666666666666666,890
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['sub_type'] = sub_type or 'enhanced',0,1,0.16666666666666666,891
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['multicast_ip_range'] = (mcast_ip_range or,0,1,0.16666666666666666,892
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['sub_type'] = 'vlan',0,1,0.16666666666666666,893
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data['network_profile']['multicast_ip_range'] = '',0,1,0.16666666666666666,894
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['network_profile']['segment_range'] = '100-110',1,1,0.16666666666666666,895
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['network_profile']['physical_network'] = PHYS_NET,1,1,0.16666666666666666,896
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['network_profile']['segment_range'] = '10000-10010',1,1,0.16666666666666666,897
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['network_profile']['sub_type'] = 'enhanced' or 'native_vxlan',1,1,0.16666666666666666,898
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"netp['network_profile']['multicast_ip_range'] = (""224.1.1.1-""",1,1,0.16666666666666666,899
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netp['network_profile']['sub_type'] = 'vlan',1,1,0.16666666666666666,900
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return netp,1,1,0.16666666666666666,901
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data['network_profile']['segment_range'] = '10000-100000000001',1,1,0.16666666666666666,902
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'multicast_ip_range': '1.1.1.1'}},1,1,0.16666666666666666,903
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p_dict),1,1,0.16666666666666666,904
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'multicast_ip_range': ''}},1,1,0.16666666666666666,905
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'multicast_ip_range': '224.1.1.1.224.1.1.3'}},1,1,0.16666666666666666,906
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'multicast_ip_range': '10.0.0.1-224.1.1.3'}},1,1,0.16666666666666666,907
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'multicast_ip_range': '224.1.1.1-20.0.0.1'}},1,1,0.16666666666666666,908
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is to fetch,1,1,0.16666666666666666,909
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(segment1_id, segment2_id) = segment_pair",1,1,0.16666666666666666,910
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(,1,1,0.16666666666666666,911
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NetworkBindingNotFound(network_id=multi_segment_id),1,1,0.16666666666666666,912
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NetworkBindingNotFound(network_id=network_id),1,1,0.16666666666666666,913
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create network binding.,1,1,0.16666666666666666,914
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_id: UUID representing the network,1,1,0.16666666666666666,915
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,":param network_type: string representing type of network (VLAN, OVERLAY,",1,1,0.16666666666666666,916
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param multicast_ip: Native VXLAN technology needs a multicast IP to be,1,1,0.16666666666666666,917
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,packets. A single multicast IP can be shared by,1,1,0.16666666666666666,918
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is created,1,1,0.16666666666666666,919
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,multi-segment or trunk network,1,1,0.16666666666666666,920
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding = n1kv_models_v2.N1kvNetworkBinding(,1,1,0.16666666666666666,921
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if add_segments is None:,1,1,0.16666666666666666,922
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network_type == c_const.NETWORK_TYPE_MULTI_SEGMENT:,1,1,0.16666666666666666,923
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,range value,1,1,0.16666666666666666,924
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min, seg_max = sorted(",1,1,0.16666666666666666,925
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return seg_min, seg_max",1,1,0.16666666666666666,926
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: string representing multicast IP,1,1,0.16666666666666666,927
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"addr_list = list((netaddr.iter_iprange(min_ip, max_ip)))",1,1,0.16666666666666666,928
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mul_ip_str = str(addr_list[network_profile.multicast_ip_index]),1,1,0.16666666666666666,929
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile.multicast_ip_index += 1,1,1,0.16666666666666666,930
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile.multicast_ip_index = 0,1,1,0.16666666666666666,931
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Helper method to retrieve minimum and maximum multicast ip.,1,1,0.16666666666666666,932
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return network_profile.multicast_ip_range.split('-'),1,1,0.16666666666666666,933
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_id: UUID representing the port whose binding is to fetch,1,1,0.16666666666666666,934
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.N1kvPortBinding).,1,1,0.16666666666666666,935
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.N1kvNetworkBinding).,1,1,0.16666666666666666,936
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve network binding.,1,1,0.16666666666666666,937
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return bool(ret1 or ret2),1,1,0.16666666666666666,938
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param trunk_segment_id: UUID representing the trunk network whose binding,1,1,0.16666666666666666,939
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve all the member segments of a multi-segment network.,1,1,0.16666666666666666,940
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: a list of tuples representing the mapped segments,1,1,0.16666666666666666,941
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,allocs = (db_session.query(,1,1,0.16666666666666666,942
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return [(a.segment1_id, a.segment2_id) for a in allocs]",1,1,0.16666666666666666,943
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve the encapsulation profiles for every segment pairs bridged.,1,1,0.16666666666666666,944
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict = {},1,1,0.16666666666666666,945
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict[alloc.encap_profile_name] = [],1,1,0.16666666666666666,946
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_pair = (alloc.segment1_id, alloc.segment2_id)",1,1,0.16666666666666666,947
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return encap_dict,1,1,0.16666666666666666,948
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve trunk network binding.,1,1,0.16666666666666666,949
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(segment_id, dot1qtag) = segment_pair",1,1,0.16666666666666666,950
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ret2 = (db_session.query(,1,1,0.16666666666666666,951
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,1,0.16666666666666666,952
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NetworkBindingNotFound(network_id=trunk_segment_id),1,1,0.16666666666666666,953
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve all the member segments of a trunk network.,1,1,0.16666666666666666,954
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,allocs = (db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,1,0.16666666666666666,955
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return [(a.segment_id, a.dot1qtag) for a in allocs]",1,1,0.16666666666666666,956
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Checks if a segment is a member of a trunk segment.,1,1,0.16666666666666666,957
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ret = (db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,1,0.16666666666666666,958
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return bool(ret),1,1,0.16666666666666666,959
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Checks if a segment is a member of a multi-segment network.,1,1,0.16666666666666666,960
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ret1 = (db_session.query(,1,1,0.16666666666666666,961
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile types.,1,1,0.16666666666666666,962
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return mul_ip_str,1,1,0.16666666666666666,963
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Get all profile-tenant bindings based on profile UUID.,1,1,0.16666666666666666,964
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network_path = ""/kvm/vm-network/%s""",1,1,0.16666666666666666,965
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"bridge_domain_path = ""/kvm/bridge-domain/%s""",1,1,0.16666666666666666,966
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"logical_network_path = ""/logical-network/%s""",1,1,0.16666666666666666,967
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"events_path = ""/kvm/events""",1,1,0.16666666666666666,968
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"clusters_path = ""/cluster""",1,1,0.16666666666666666,969
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"encap_profiles_path = ""/encapsulation-profile""",1,1,0.16666666666666666,970
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"encap_profile_path = ""/encapsulation-profile/%s""",1,1,0.16666666666666666,971
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pool = eventlet.GreenPool(c_conf.CISCO_N1K.http_pool_size),1,1,0.16666666666666666,972
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.format = 'json',1,1,0.16666666666666666,973
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.hosts = self._get_vsm_hosts(),1,1,0.16666666666666666,974
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.action_prefix = 'http://%s/api/n1k' % self.hosts[0],1,1,0.16666666666666666,975
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.timeout = c_conf.CISCO_N1K.http_timeout,1,1,0.16666666666666666,976
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Fetch all policy profiles from the VSM.,1,1,0.16666666666666666,977
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._get(self.port_profiles_path),1,1,0.16666666666666666,978
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['groupIp'] = network[n1kv.MULTICAST_IP],1,1,0.16666666666666666,979
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.bridge_domains_path,",1,1,0.16666666666666666,980
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(self.bridge_domain_path % name),1,1,0.16666666666666666,981
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a network segment on the VSM.,1,1,0.16666666666666666,982
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'description': network['name'],",1,1,0.16666666666666666,983
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'id': network['id'],",1,1,0.16666666666666666,984
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['vlan'] = network[providernet.SEGMENTATION_ID],1,1,0.16666666666666666,985
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['bridgeDomain'] = (network['id'] +,1,1,0.16666666666666666,986
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['mode'] = c_const.NETWORK_TYPE_TRUNK,1,1,0.16666666666666666,987
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['segmentType'] = network_profile['sub_type'],1,1,0.16666666666666666,988
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"bridge_domains_path = ""/kvm/bridge-domain""",1,1,0.16666666666666666,989
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_networks_path = ""/kvm/vm-network""",1,1,0.16666666666666666,990
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['delSegments'] = network['del_segment_list'],1,1,0.16666666666666666,991
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port_path = ""/kvm/vm-network/%s/ports/%s""",1,1,0.16666666666666666,992
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,exts = [],1,1,0.16666666666666666,993
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,plugin = manager.NeutronManager.get_plugin(),1,1,0.16666666666666666,994
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"collection_name = resource_name + ""s""",1,1,0.16666666666666666,995
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,controller = base.create_resource(,1,1,0.16666666666666666,996
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ex = extensions.ResourceExtension(collection_name,",1,1,0.16666666666666666,997
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return exts,1,1,0.16666666666666666,998
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.16666666666666666,999
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import netaddr,1,1,0.16666666666666666,1000
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG = logging.getLogger(__name__),1,1,0.16666666666666666,1001
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,method = base64.encodebytes,1,1,0.16666666666666666,1002
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,method = base64.encodestring,1,1,0.16666666666666666,1003
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,s = s.encode('utf-8'),1,1,0.16666666666666666,1004
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encoded_string = method(s).rstrip(),1,1,0.16666666666666666,1005
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return encoded_string.decode('utf-8'),1,1,0.16666666666666666,1006
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return encoded_string,1,1,0.16666666666666666,1007
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,of port profiles from the VSM.,1,1,0.16666666666666666,1008
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,to that network profile.,1,1,0.16666666666666666,1009
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"Hence for every unique combination of a network and a policy-profile, a",1,1,0.16666666666666666,1010
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port_profiles_path = ""/virtual-port-profile""",1,1,0.16666666666666666,1011
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_segment_path = ""/network-segment/%s""",1,1,0.16666666666666666,1012
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_segment_pool_path = ""/network-segment-pool/%s""",1,1,0.16666666666666666,1013
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ip_pool_path = ""/ip-pool-template/%s""",1,1,0.16666666666666666,1014
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ports_path = ""/kvm/vm-network/%s/ports""",1,1,0.16666666666666666,1015
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['addSegments'] = network['add_segment_list'],1,1,0.16666666666666666,1016
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,headers['Content-Type'] = self._set_content_type('json'),1,1,0.16666666666666666,1017
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return 'network_profile',1,1,0.16666666666666666,1018
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,address_range_end = None,1,1,0.16666666666666666,1019
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(self.ip_pool_path % subnet_id),1,1,0.16666666666666666,1020
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a VM network on the VSM.,1,1,0.16666666666666666,1021
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vm_network_name: name of the VM network,1,1,0.16666666666666666,1022
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile: policy profile dict,1,1,0.16666666666666666,1023
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['ipAddress'] = port['fixed_ips'][0]['ip_address'],1,1,0.16666666666666666,1024
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['subnetId'] = port['fixed_ips'][0]['subnet_id'],1,1,0.16666666666666666,1025
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.vm_networks_path,",1,1,0.16666666666666666,1026
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a VM network on the VSM.,1,1,0.16666666666666666,1027
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(self.vm_network_path % vm_network_name),1,1,0.16666666666666666,1028
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vm_network_name: name of the VM network which imports this port,1,1,0.16666666666666666,1029
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.ports_path % vm_network_name,",1,1,0.16666666666666666,1030
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update the mac address associated with the port,1,1,0.16666666666666666,1031
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.port_path % (vm_network_name, port_id),",1,1,0.16666666666666666,1032
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._delete(self.port_path % (vm_network_name, port_id))",1,1,0.16666666666666666,1033
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,The response is in either JSON format or plain text. A GET method will,1,1,0.16666666666666666,1034
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,invoke a JSON response while a PUT/POST/DELETE returns message from the,1,1,0.16666666666666666,1035
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Exception is raised when VSM replies with an INTERNAL SERVER ERROR HTTP,1,1,0.16666666666666666,1036
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,status code (500) i.e. an error has occurred on the VSM or SERVICE,1,1,0.16666666666666666,1037
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,UNAVAILABLE (503) i.e. VSM is not reachable.,1,1,0.16666666666666666,1038
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,action = self.action_prefix + action,1,1,0.16666666666666666,1039
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,headers = self._get_auth_header(self.hosts[0]),1,1,0.16666666666666666,1040
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Replace default tenant-id with admin tenant-ids.,1,1,0.16666666666666666,1041
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,headers['Accept'] = self._set_content_type('json'),1,1,0.16666666666666666,1042
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.ip_pool_path % subnet['id'],",1,1,0.16666666666666666,1043
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,address_range_start = None,1,1,0.16666666666666666,1044
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['mode'] = 'access',1,1,0.16666666666666666,1045
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,address_range_end = subnet['allocation_pools'][0]['end'],1,1,0.16666666666666666,1046
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['segmentType'] = network_profile['segment_type'],1,1,0.16666666666666666,1047
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a network segment on the VSM.,1,1,0.16666666666666666,1048
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_segment_id: UUID representing the network segment,1,1,0.16666666666666666,1049
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.network_segment_path % network_segment_id,",1,1,0.16666666666666666,1050
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a network segment on the VSM.,1,1,0.16666666666666666,1051
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(self.network_segment_path % network_segment_id),1,1,0.16666666666666666,1052
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a logical network on the VSM.,1,1,0.16666666666666666,1053
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,logical_network_name = (network_profile['id'] +,1,1,0.16666666666666666,1054
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._post(self.logical_network_path % logical_network_name,",1,1,0.16666666666666666,1055
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a logical network on VSM.,1,1,0.16666666666666666,1056
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network,1,1,0.16666666666666666,1057
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(,1,1,0.16666666666666666,1058
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a network segment pool on the VSM.,1,1,0.16666666666666666,1059
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['subType'] = network_profile['sub_type'],1,1,0.16666666666666666,1060
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._post(,1,1,0.16666666666666666,1061
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a network segment pool on the VSM.,1,1,0.16666666666666666,1062
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._post(self.network_segment_pool_path %,1,1,0.16666666666666666,1063
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a network segment pool on the VSM.,1,1,0.16666666666666666,1064
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param network_segment_pool_id: UUID representing the network,1,1,0.16666666666666666,1065
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._delete(self.network_segment_pool_path %,1,1,0.16666666666666666,1066
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,netmask = str(ip.netmask),1,1,0.16666666666666666,1067
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_address = str(ip.network),1,1,0.16666666666666666,1068
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,address_range_start = subnet['allocation_pools'][0]['start'],1,1,0.16666666666666666,1069
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return ""2012-07-20T10:00:00-00:00""",1,1,0.16666666666666666,1070
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body['encapProfile'] = (network['id'] +,1,1,0.16666666666666666,1071
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return ""Cisco N1kv Network Profiles""",1,1,0.16666666666666666,1072
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return (int(seg) for seg in data.split(""-"")[:2])",1,1,0.16666666666666666,1073
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a network profile.,1,1,0.16666666666666666,1074
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params fields: a list of strings that are valid keys in a  network,1,1,0.16666666666666666,1075
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile dictionary. Only these fields will be returned,1,1,0.16666666666666666,1076
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._make_network_profile_dict(profile, fields)",1,1,0.16666666666666666,1077
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of all network profiles.,1,1,0.16666666666666666,1078
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._get_collection(context, n1kv_models_v2.NetworkProfile,",1,1,0.16666666666666666,1079
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._get_network_collection_for_tenant(context.session,",1,1,0.16666666666666666,1080
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add a tenant to a network profile.,1,1,0.16666666666666666,1081
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: profile binding object,1,1,0.16666666666666666,1082
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return create_profile_binding(db_session,",1,1,0.16666666666666666,1083
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return False,1,1,0.16666666666666666,1084
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_type = p['segment_type'].lower(),1,1,0.16666666666666666,1085
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if id and profile.id == id:,1,1,0.16666666666666666,1086
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Validate segment range values.,1,1,0.16666666666666666,1087
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for ip in [min_ip, max_ip]:",1,1,0.16666666666666666,1088
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,""" Range should be from low address to high address"") %",1,1,0.16666666666666666,1089
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{'min_ip': min_ip, 'max_ip': max_ip})",1,1,0.16666666666666666,1090
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,""" for network profile"")",1,1,0.16666666666666666,1091
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_type = net_p[""segment_type""].lower()",1,1,0.16666666666666666,1092
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""for network profile"")",1,1,0.16666666666666666,1093
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p['multicast_ip_range'] = '0.0.0.0',1,1,0.16666666666666666,1094
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multicast_ip_range = net_p.get(""multicast_ip_range"")",1,1,0.16666666666666666,1095
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Validate that segment range doesn't overlap.,1,1,0.16666666666666666,1096
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min, seg_max = self._get_segment_range(net_p['segment_range'])",1,1,0.16666666666666666,1097
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if ""name"" in p and not is_updated:",1,1,0.16666666666666666,1098
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# is not yet updated.,1,1,0.16666666666666666,1099
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"updated_net_p = update_network_profile(context.session, id, p,",1,1,0.16666666666666666,1100
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_bindings = _get_profile_bindings_by_uuid(context.session,",1,1,0.16666666666666666,1101
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant_id = context.tenant_id,1,1,0.16666666666666666,1102
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session = context.session,1,1,0.16666666666666666,1103
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenant_id': {'allow_post': True, 'allow_put': False,",1,1,0.16666666666666666,1104
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_profile_ids = (db_session.query(n1kv_models_v2.ProfileBinding.,1,1,0.16666666666666666,1105
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [],1,1,0.16666666666666666,1106
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profiles = (db_session.query(model).filter(model.id.in_(,1,1,0.16666666666666666,1107
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._fields(res, fields)",1,1,0.16666666666666666,1108
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile bindings object. Values in this dictiontary are,1,1,0.16666666666666666,1109
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params fields: a list of strings that are valid keys in a profile,1,1,0.16666666666666666,1110
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: list of profile bindings,1,1,0.16666666666666666,1111
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_bindings = _get_profile_bindings(,1,1,0.16666666666666666,1112
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return [self._make_profile_bindings_dict(pb),1,1,0.16666666666666666,1113
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a network profile.,1,1,0.16666666666666666,1114
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_profile = create_network_profile(context.session, p)",1,1,0.16666666666666666,1115
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._make_network_profile_dict(net_profile),1,1,0.16666666666666666,1116
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a network profile.,1,1,0.16666666666666666,1117
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NetworkProfileInUse(profile=id),1,1,0.16666666666666666,1118
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"_profile = delete_network_profile(context.session, id,",1,1,0.16666666666666666,1119
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._make_network_profile_dict(_profile),1,1,0.16666666666666666,1120
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a network profile.,1,1,0.16666666666666666,1121
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,options and if user is admin.,1,1,0.16666666666666666,1122
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is_updated = False,1,1,0.16666666666666666,1123
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"original_net_p = get_network_profile(context.session, id,",1,1,0.16666666666666666,1124
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for profile in profiles:,1,1,0.16666666666666666,1125
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._make_network_profile_dict(,1,1,0.16666666666666666,1126
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,name = profile.name,1,1,0.16666666666666666,1127
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Remove a tenant to a policy profile binding.,1,1,0.16666666666666666,1128
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve policy profile based on name.,1,1,0.16666666666666666,1129
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: string representing the name for the policy profile,1,1,0.16666666666666666,1130
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: policy profile object,1,1,0.16666666666666666,1131
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.PolicyProfileNameNotFound(profile_name=name),1,1,0.16666666666666666,1132
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Remove all policy profiles associated with fake tenant id.,1,1,0.16666666666666666,1133
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,This will find all Profile ID where tenant is not set yet - set A,1,1,0.16666666666666666,1134
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,and profiles where tenant was already set - set B,1,1,0.16666666666666666,1135
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,a_set_q = (db_session.query(n1kv_models_v2.ProfileBinding).,1,1,0.16666666666666666,1136
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,a_set = set(i.profile_id for i in a_set_q),1,1,0.16666666666666666,1137
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,b_set_q = (db_session.query(n1kv_models_v2.ProfileBinding).,1,1,0.16666666666666666,1138
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add Policy profile and tenant binding.,1,1,0.16666666666666666,1139
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy profile,1,1,0.16666666666666666,1140
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile_id: UUID representing the policy profile,1,1,0.16666666666666666,1141
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"policy_profile = {""id"": policy_profile_id, ""name"": policy_profile_name}",1,1,0.16666666666666666,1142
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant_id = tenant_id or c_const.TENANT_ID_NOT_SET,1,1,0.16666666666666666,1143
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,1,0.16666666666666666,1144
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.v2 import attributes,1,1,0.16666666666666666,1145
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,RESOURCE_ATTRIBUTE_MAP = {,1,1,0.16666666666666666,1146
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'is_visible': True},",1,1,0.16666666666666666,1147
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_range = profile.segment_range,1,1,0.16666666666666666,1148
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segment_type': {'allow_post': True, 'allow_put': False,",1,1,0.16666666666666666,1149
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'sub_type': {'allow_post': True, 'allow_put': False,",1,1,0.16666666666666666,1150
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'physical_network': {'allow_post': True, 'allow_put': False,",1,1,0.16666666666666666,1151
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Delete policy profile and associated binding.""""""",1,1,0.16666666666666666,1152
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,b_set = set(i.profile_id for i in b_set_q),1,1,0.16666666666666666,1153
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: policy profile dictionary,1,1,0.16666666666666666,1154
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._get_collection(context, n1kv_models_v2.PolicyProfile,",1,1,0.16666666666666666,1155
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_ids = (db_session.query(n1kv_models_v2.,1,1,0.16666666666666666,1156
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add a tenant to a policy profile binding.,1,1,0.16666666666666666,1157
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min, seg_max = self._get_segment_range(",1,1,0.16666666666666666,1158
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return (db_session.query(n1kv_models_v2.PolicyProfile).,1,1,0.16666666666666666,1159
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a policy profile for the given UUID.,1,1,0.16666666666666666,1160
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing policy profile to fetch,1,1,0.16666666666666666,1161
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_seg_min, profile_seg_max = self._get_segment_range(",1,1,0.16666666666666666,1162
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._make_policy_profile_dict(profile, fields)",1,1,0.16666666666666666,1163
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant, retrieve all policy profiles belonging to this tenant only.",1,1,0.16666666666666666,1164
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy profile object. Values in this dictiontary are,1,1,0.16666666666666666,1165
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: list of all policy profiles,1,1,0.16666666666666666,1166
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"return self._get_policy_collection_for_tenant(context.session,",1,1,0.16666666666666666,1167
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of profile bindings for policy profiles.,1,1,0.16666666666666666,1168
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Add/remove policy profile to tenant-id binding for the corresponding,1,1,0.16666666666666666,1169
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,option and if user is admin.,1,1,0.16666666666666666,1170
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing policy profile to update,1,1,0.16666666666666666,1171
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile: policy profile dictionary,1,1,0.16666666666666666,1172
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: updated policy profile dictionary,1,1,0.16666666666666666,1173
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._make_policy_profile_dict(get_policy_profile(,1,1,0.16666666666666666,1174
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return self._make_policy_profile_dict(,1,1,0.16666666666666666,1175
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,raise c_exc.NetworkProfileNotFound(profile=name),1,1,0.16666666666666666,1176
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv.SEGMENT_DEL,",1,0,0.0,1177
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a network.,1,0,0.0,1178
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.add_trunk_segment_binding(session,",1,0,0.0,1179
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.del_trunk_segment_binding(session,",1,0,0.0,1180
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_network(self, context, id):",1,0,0.0,1181
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_network_dict_profile(context, net)",1,0,0.0,1182
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network['subnets']:,1,0,0.0,1183
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""delete the associated subnet first"") % network['name']",1,0,0.0,1184
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if n1kv_db_v2.is_trunk_member(session, id):",1,0,0.0,1185
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"binding.physical_network,",1,0,0.0,1186
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if n1kv_db_v2.is_multi_segment_member(session, id):",1,0,0.0,1187
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""multi-segment network"") % network['name']",1,0,0.0,1188
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile['sub_type'])),1,0,0.0,1189
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._check_provider_update(context, network['network'])",1,0,0.0,1190
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding.profile_id),1,0,0.0,1191
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.del_multi_segment_binding(session,",1,0,0.0,1192
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_del_multi_segment_request(context, net['id'],",1,0,0.0,1193
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,add_segments),1,0,0.0,1194
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv.SEGMENT_DEL)),1,0,0.0,1195
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net['id'], add_segments)",1,0,0.0,1196
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.add_multi_segment_binding(session,",1,0,0.0,1197
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_network(self, context, id, network):",1,0,0.0,1198
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with excutils.save_and_reraise_exception():,1,0,0.0,1199
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"except(cisco_exceptions.VSMError,",1,0,0.0,1200
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_add_multi_segment_request(context, net['id'],",1,0,0.0,1201
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_delete_network_request(context, network)",1,0,0.0,1202
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete_network_db(context, id)",1,0,0.0,1203
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: port object,1,0,0.0,1204
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _delete_network_db(self, context, id):",1,0,0.0,1205
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.release_vxlan(session, binding.segmentation_id)",1,0,0.0,1206
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_pairs),1,0,0.0,1207
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,constants.DEVICE_OWNER_FLOATINGIP]):,1,0,0.0,1208
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if p_profile:,1,0,0.0,1209
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"constants.DEVICE_OWNER_ROUTER_GW,",1,0,0.0,1210
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"[constants.DEVICE_OWNER_DHCP, constants.DEVICE_OWNER_ROUTER_INTF,",1,0,0.0,1211
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if ('device_id' in port['port'] and port['port']['device_owner'] in,1,0,0.0,1212
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,/etc/neutron/cisco_plugins.ini file.,1,0,0.0,1213
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create neutron port.,1,0,0.0,1214
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_port(self, context, port):",1,0,0.0,1215
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,None),1,0,0.0,1216
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Get networks"")",1,0,0.0,1217
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,dictionary. Only these fields will be returned.,1,0,0.0,1218
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,values for each key in filters,1,0,0.0,1219
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,returned by this function will have matched one of the,1,0,0.0,1220
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,exact match comparison for that value. Each result,1,0,0.0,1221
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,iterable containing values that will be used for an,1,0,0.0,1222
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param filters: a dictionary with keys that are valid keys for a,1,0,0.0,1223
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of networks.,1,0,0.0,1224
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_networks(self, context, filters=None, fields=None):",1,0,0.0,1225
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_network_dict_member_segments(context, net)",1,0,0.0,1226
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a Network.,1,0,0.0,1227
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_network(self, context, id, fields=None):",1,0,0.0,1228
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(N1kvNeutronPluginV2, self).delete_network(context, id)",1,0,0.0,1229
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding.segmentation_id),1,0,0.0,1230
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.release_vlan(session, binding.physical_network,",1,0,0.0,1231
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_network_dict_provider(context, net)",1,0,0.0,1232
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.create_n1kv_port(port, vm_network_name)",1,0,0.0,1233
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multicast_ip,",1,0,0.0,1234
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,context.tenant_id),1,0,0.0,1235
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(physical_network, network_type, segmentation_id,",1,0,0.0,1236
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not network_type:,1,0,0.0,1237
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with session.begin(subtransactions=True):,1,0,0.0,1238
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['network']),1,0,0.0,1239
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(network_type, physical_network,",1,0,0.0,1240
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_network(self, context, network):",1,0,0.0,1241
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve segmentation ID for a given network.,1,0,0.0,1242
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_segmentation_id(self, context, id):",1,0,0.0,1243
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.delete_n1kv_port(vm_network['name'], port['id'])",1,0,0.0,1244
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_delete_port_request: %s', port['id'])",1,0,0.0,1245
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete the port on the VSM.,1,0,0.0,1246
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send delete port request to VSM.,1,0,0.0,1247
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_delete_port_request(self, context, port, vm_network):",1,0,0.0,1248
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.update_n1kv_port(vm_network_name, port_id, body)",1,0,0.0,1249
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'macAddress': mac_address},1,0,0.0,1250
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_update_port_request: %s', port_id)",1,0,0.0,1251
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_id: UUID representing port to update,1,0,0.0,1252
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send update port request to VSM.,1,0,0.0,1253
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_update_port_request(self, port_id, mac_address, vm_network_name):",1,0,0.0,1254
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy_profile),1,0,0.0,1255
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network_name,",1,0,0.0,1256
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.create_vm_network(port,",1,0,0.0,1257
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if port_count == 1:,1,0,0.0,1258
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vm_network_name: string representing the name of the VM,1,0,0.0,1259
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_create_port_request: %s', port)",1,0,0.0,1260
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id,",1,0,0.0,1261
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('Physical_network %(phy_net)s, '",1,0,0.0,1262
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segmentation_id,",1,0,0.0,1263
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'seg_type %(net_type)s, '",1,0,0.0,1264
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_type,",1,0,0.0,1265
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net['id'],",1,0,0.0,1266
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.add_network_binding(session,",1,0,0.0,1267
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network),1,0,0.0,1268
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segmentation_id),1,0,0.0,1269
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.reserve_specific_vlan(session,",1,0,0.0,1270
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not seg_min <= segmentation_id <= seg_max:,1,0,0.0,1271
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile['segment_range']),1,0,0.0,1272
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not segmentation_id:,1,0,0.0,1273
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,)),1,0,0.0,1274
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile['sub_type'],1,0,0.0,1275
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"physical_network,",1,0,0.0,1276
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv.SEGMENT_ADD,",1,0,0.0,1277
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._parse_trunk_segments(context, network['network'],",1,0,0.0,1278
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id),1,0,0.0,1279
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1280
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('Seg list %s ', segment_pairs)",1,0,0.0,1281
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv.SEGMENT_ADD)),1,0,0.0,1282
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._parse_multi_segments(context, network['network'],",1,0,0.0,1283
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'multicast_ip': multicast_ip}),1,0,0.0,1284
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'seg_id': segmentation_id,",1,0,0.0,1285
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'net_type': network_type,",1,0,0.0,1286
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{'phy_net': physical_network,",1,0,0.0,1287
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'multicast_ip %(multicast_ip)s',",1,0,0.0,1288
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'seg_id %(seg_id)s, '",1,0,0.0,1289
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if n1kv.PROFILE_ID in port['port']:,1,0,0.0,1290
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self).create_network_profile(context,",1,0,0.0,1291
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port['port']),1,0,0.0,1292
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self).delete_subnet(context, sub['id'])",1,0,0.0,1293
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing subnet to delete,1,0,0.0,1294
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a subnet.,1,0,0.0,1295
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_subnet(self, context, id):",1,0,0.0,1296
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._send_update_subnet_request(sub),1,0,0.0,1297
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,subnet),1,0,0.0,1298
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"id,",1,0,0.0,1299
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('Update subnet'),1,0,0.0,1300
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: updated subnet object,1,0,0.0,1301
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing subnet to update,1,0,0.0,1302
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a subnet.,1,0,0.0,1303
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_subnet(self, context, id, subnet):",1,0,0.0,1304
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Created subnet: %s"", sub['id'])",1,0,0.0,1305
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(N1kvNeutronPluginV2,",1,0,0.0,1306
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Get port: %s"", id)",1,0,0.0,1307
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_create_subnet_request(context, sub)",1,0,0.0,1308
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('Create subnet'),1,0,0.0,1309
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: subnet object,1,0,0.0,1310
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create subnet for a given network.,1,0,0.0,1311
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_subnet(self, context, subnet):",1,0,0.0,1312
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for port in ports:,1,0,0.0,1313
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Get ports"")",1,0,0.0,1314
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: list of port dictionaries,1,0,0.0,1315
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params fields: a list of strings that are valid keys in a port,1,0,0.0,1316
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port object. Values in this dictiontary are an,1,0,0.0,1317
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of ports.,1,0,0.0,1318
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_ports(self, context, filters=None, fields=None):",1,0,0.0,1319
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: deleted subnet object,1,0,0.0,1320
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('Delete subnet: %s', id)",1,0,0.0,1321
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_delete_subnet_request(context, subnet)",1,0,0.0,1322
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_subnet(self, context, id, fields=None):",1,0,0.0,1323
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"update_network_profile(context,",1,0,0.0,1324
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_count: integer representing the number of ports in one,1,0,0.0,1325
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_network_profile(self, context, net_profile_id, network_profile):",1,0,0.0,1326
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._send_delete_network_profile_request(net_p),1,0,0.0,1327
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self).delete_network_profile(context, id)",1,0,0.0,1328
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_network_profile(self, context, id):",1,0,0.0,1329
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._send_delete_logical_network_request(net_p),1,0,0.0,1330
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_create_network_profile_request(context, net_p)",1,0,0.0,1331
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self).delete_network_profile(context, net_p['id'])",1,0,0.0,1332
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_create_logical_network_request(net_p,",1,0,0.0,1333
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile),1,0,0.0,1334
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._replace_fake_tenant_id_with_real(context),1,0,0.0,1335
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,the previously stored fake tenant-id in tenant-profile bindings.,1,0,0.0,1336
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile, we retrieve the admin tenant-id which we use to replace",1,0,0.0,1337
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_network_profile(self, context, network_profile):",1,0,0.0,1338
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filters,",1,0,0.0,1339
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Get subnets"")",1,0,0.0,1340
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: list of dictionaries of subnets,1,0,0.0,1341
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,subnet object. Values in this dictiontary are an,1,0,0.0,1342
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of subnets.,1,0,0.0,1343
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_subnets(self, context, filters=None, fields=None):",1,0,0.0,1344
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Get subnet: %s"", id)",1,0,0.0,1345
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params fields: a list of strings that are valid keys in a subnet,1,0,0.0,1346
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing subnet to retrieve,1,0,0.0,1347
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a subnet.,1,0,0.0,1348
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_port_dict_profile(context, port)",1,0,0.0,1349
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: port dictionary,1,0,0.0,1350
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('Create port: profile_id=%s', profile_id)",1,0,0.0,1351
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not p_profile:,1,0,0.0,1352
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with context.session.begin(subtransactions=True):,1,0,0.0,1353
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Update port: %s"", id)",1,0,0.0,1354
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: updated port object,1,0,0.0,1355
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the port to update,1,0,0.0,1356
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update port parameters.,1,0,0.0,1357
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_port(self, context, id, port):",1,0,0.0,1358
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Created port: %s"", pt)",1,0,0.0,1359
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete_port_db(context, pt, vm_network)",1,0,0.0,1360
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network_name),1,0,0.0,1361
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p_profile,",1,0,0.0,1362
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"pt,",1,0,0.0,1363
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_create_port_request(context,",1,0,0.0,1364
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pt),1,0,0.0,1365
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param fields: a list of strings that are valid keys in a port,1,0,0.0,1366
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port['port'],",1,0,0.0,1367
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._process_portbindings_create_and_update(context,",1,0,0.0,1368
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.update_vm_network_port_count(context.session,",1,0,0.0,1369
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Update port count of the VM network.,1,0,0.0,1370
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_count),1,0,0.0,1371
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"pt['network_id'],",1,0,0.0,1372
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except cisco_exceptions.VMNetworkNotFound:,1,0,0.0,1373
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pt['network_id']),1,0,0.0,1374
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"context.session,",1,0,0.0,1375
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_port_dict_profile(context, pt)",1,0,0.0,1376
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.add_port_binding(session, pt['id'], profile_id)",1,0,0.0,1377
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port),1,0,0.0,1378
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self).update_port(context, id, port)",1,0,0.0,1379
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,updated_port),1,0,0.0,1380
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_port_dict_profile(context, updated_port)",1,0,0.0,1381
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,@property,1,0,0.0,1382
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the port to retrieve,1,0,0.0,1383
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a port.,1,0,0.0,1384
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_port(self, context, id, fields=None):",1,0,0.0,1385
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(N1kvNeutronPluginV2, self).delete_port(context, port['id'])",1,0,0.0,1386
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.delete_vm_network(context.session,",1,0,0.0,1387
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if vm_network['port_count'] == 0:,1,0,0.0,1388
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network['port_count']),1,0,0.0,1389
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network['name'],",1,0,0.0,1390
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _delete_port_db(self, context, port, vm_network):",1,0,0.0,1391
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._send_delete_port_request(context, port, vm_network)",1,0,0.0,1392
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete_port_db(context, port, vm_network)",1,0,0.0,1393
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,do_notify=False),1,0,0.0,1394
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.l3plugin.disassociate_floatingips(context, id,",1,0,0.0,1395
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if self.l3plugin:,1,0,0.0,1396
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port['network_id']),1,0,0.0,1397
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port[n1kv.PROFILE_ID],",1,0,0.0,1398
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.l3plugin.prevent_l3_port_deletion(context, id)",1,0,0.0,1399
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if self.l3plugin and l3_port_check:,1,0,0.0,1400
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# and l3-router.  If so, we should prevent deletion.",1,0,0.0,1401
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param id: UUID representing the port to delete,1,0,0.0,1402
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a port.,1,0,0.0,1403
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_port(self, context, id, l3_port_check=True):",1,0,0.0,1404
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,svc_constants.L3_ROUTER_NAT),1,0,0.0,1405
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except AttributeError:,1,0,0.0,1406
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def l3plugin(self):,1,0,0.0,1407
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VM Network,1,0,0.0,1408
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._remove_all_fake_policy_profiles(),1,0,0.0,1409
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port: port dictionary,1,0,0.0,1410
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if encap_profile in encap_dict:,1,0,0.0,1411
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.update_encapsulation_profile(context, profile,",1,0,0.0,1412
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_profile),1,0,0.0,1413
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment2),",1,0,0.0,1414
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(segment1,",1,0,0.0,1415
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_id,",1,0,0.0,1416
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.add_multi_segment_encap_profile_name(session,",1,0,0.0,1417
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_dict['addMappings'].append(mapping_dict),1,0,0.0,1418
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"mapping_dict, segment2)",1,0,0.0,1419
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"mapping_dict, segment1)",1,0,0.0,1420
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._extend_mapping_dict(context,",1,0,0.0,1421
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'delMappings': []},1,0,0.0,1422
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'addMappings': [],",1,0,0.0,1423
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,online_clusters),1,0,0.0,1424
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Extend a mapping dictionary with dot1q tag and bridge-domain name.,1,0,0.0,1425
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for (segment1, segment2) in segment_pairs:",1,0,0.0,1426
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,online_clusters.append(cluster),1,0,0.0,1427
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,len(mapping[c_const.SEGMENTS])),1,0,0.0,1428
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,cluster['size'] += (,1,0,0.0,1429
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if cluster[c_const.STATE] == c_const.ONLINE:,1,0,0.0,1430
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for cluster in clusters['body'][c_const.SET]:,1,0,0.0,1431
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not segment_pairs:,1,0,0.0,1432
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,that need to be bridged,1,0,0.0,1433
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_add_multi_segment_request(self, context, net_id, segment_pairs):",1,0,0.0,1434
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.BRIDGE_DOMAIN_SUFFIX),1,0,0.0,1435
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if net[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1436
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param mapping_dict: dictionary to populate values,1,0,0.0,1437
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict[profile]),1,0,0.0,1438
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_del_multi_segment_request(self, context, net_id, segment_pairs):",1,0,0.0,1439
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,whose bridging needs to be removed,1,0,0.0,1440
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.get_multi_segment_network_binding(session, net_id,",1,0,0.0,1441
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if (binding1.network_type not in valid_seg_types or,1,0,0.0,1442
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment2),1,0,0.0,1443
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment1),1,0,0.0,1444
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,uuidutils.is_uuid_like(segment2)):,1,0,0.0,1445
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if (uuidutils.is_uuid_like(segment1) and,1,0,0.0,1446
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for pair in segments.split(','):",1,0,0.0,1447
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not attributes.is_attr_set(segments):,1,0,0.0,1448
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK_TYPE_OVERLAY],1,0,0.0,1449
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: List of segment UUIDs in set pairs,1,0,0.0,1450
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param param: Additional parameter indicating an add,1,0,0.0,1451
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _parse_multi_segments(self, context, attrs, param):",1,0,0.0,1452
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif oper == n1kv.SEGMENT_DEL:,1,0,0.0,1453
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if oper == n1kv.SEGMENT_ADD:,1,0,0.0,1454
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,trunk_list.append(member_dict),1,0,0.0,1455
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'dot1qtag': dot1qtag},1,0,0.0,1456
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for (segment, dot1qtag) in segment_pairs:",1,0,0.0,1457
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_populate_member_segments %s', segment_pairs)",1,0,0.0,1458
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param oper: Operation to be performed,1,0,0.0,1459
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,that needs to be trunked,1,0,0.0,1460
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _populate_member_segments(self, context, network, segment_pairs, oper):",1,0,0.0,1461
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,member_list.append(member_dict),1,0,0.0,1462
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for pair in segment_pairs:,1,0,0.0,1463
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_encap_segments(self, context, segment_pairs):",1,0,0.0,1464
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_dict['delMappings'].append(mapping_dict),1,0,0.0,1465
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment2))),1,0,0.0,1466
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param context: neutron api request context,1,0,0.0,1467
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _extend_mapping_dict(self, context, mapping_dict, segment):",1,0,0.0,1468
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding1.network_type == binding2.network_type):,1,0,0.0,1469
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for profile_name in policy_profiles:,1,0,0.0,1470
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['id']),1,0,0.0,1471
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _extend_network_dict_provider(self, context, network):",1,0,0.0,1472
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,cisco_exceptions.VSMConnectionFailed):,1,0,0.0,1473
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"except (cisco_exceptions.VSMError,",1,0,0.0,1474
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile)),1,0,0.0,1475
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._delete_policy_profile(pid),1,0,0.0,1476
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for pid in plugin_profiles_set - vsm_profiles_set:,1,0,0.0,1477
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._add_policy_profile(vsm_profiles[pid], pid)",1,0,0.0,1478
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for pid in vsm_profiles_set - plugin_profiles_set:,1,0,0.0,1479
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if vsm_profiles_set ^ plugin_profiles_set:,1,0,0.0,1480
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,plugin_profiles_set.add(profile.id),1,0,0.0,1481
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,[profile_name][c_const.PROPERTIES][c_const.ID]),1,0,0.0,1482
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,try:,1,0,0.0,1483
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,cluster['size'] += 2,1,0,0.0,1484
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('_populate_policy_profiles'),1,0,0.0,1485
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant-ids.,1,0,0.0,1486
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _populate_policy_profiles(self):,1,0,0.0,1487
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,eventlet.sleep(c_conf.CISCO_N1K.poll_duration),1,0,0.0,1488
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._populate_policy_profiles(),1,0,0.0,1489
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,while True:,1,0,0.0,1490
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _poll_policy_profiles(self):,1,0,0.0,1491
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,eventlet.spawn(self._poll_policy_profiles),1,0,0.0,1492
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Poll VSM for create/delete of policy profile.,1,0,0.0,1493
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('_setup_vsm'),1,0,0.0,1494
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Setup Cisco Nexus 1000V related parameters and pull policy profiles.,1,0,0.0,1495
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _setup_vsm(self):,1,0,0.0,1496
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _process_provider_create(self, context, attrs):",1,0,0.0,1497
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not (network_type_set or physical_network_set or,1,0,0.0,1498
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segmentation_id_set):,1,0,0.0,1499
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not network_type_set:,1,0,0.0,1500
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment1 in segment or segment2 in segment:,1,0,0.0,1501
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for segment in mapping[c_const.SEGMENTS]:,1,0,0.0,1502
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for mapping in cluster[c_const.MAPPINGS]:,1,0,0.0,1503
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for cluster in sorted(clusters, key=lambda k: k['size']):",1,0,0.0,1504
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param clusters: List of clusters,1,0,0.0,1505
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment2: UUID of segment to be mapped,1,0,0.0,1506
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment1: UUID of segment to be mapped,1,0,0.0,1507
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Returns a cluster to apply the segment mapping,1,0,0.0,1508
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_cluster(self, segment1, segment2, clusters):",1,0,0.0,1509
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _check_provider_update(self, context, attrs):",1,0,0.0,1510
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network),1,0,0.0,1511
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,break,1,0,0.0,1512
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'physical_network']:,1,0,0.0,1513
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if physical_network == network_profile[,1,0,0.0,1514
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for network_profile in network_profiles:,1,0,0.0,1515
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1516
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""(5000+)"")",1,0,0.0,1517
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segmentation_id < 5000:,1,0,0.0,1518
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,else:,1,0,0.0,1519
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""network"")",1,0,0.0,1520
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if physical_network_set:,1,0,0.0,1521
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1522
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""(1 through 4094)"")",1,0,0.0,1523
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not segmentation_id_set:,1,0,0.0,1524
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1525
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,binding2.network_type not in valid_seg_types or,1,0,0.0,1526
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"pair_list.append((segment1, segment2))",1,0,0.0,1527
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send create port request to VSM.,1,0,0.0,1528
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('add_segments=%s', body['addSegments'])",1,0,0.0,1529
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.delete_bridge_domain(name),1,0,0.0,1530
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_delete_network_request: %s', network['id'])",1,0,0.0,1531
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_delete_network_request(self, context, network):",1,0,0.0,1532
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.update_network_segment(network['id'], body)",1,0,0.0,1533
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict),1,0,0.0,1534
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.update_encapsulation_profile(context, encap_profile,",1,0,0.0,1535
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,del_segments))},1,0,0.0,1536
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'delMappings': (,1,0,0.0,1537
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"add_segments)),",1,0,0.0,1538
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'addMappings': (,1,0,0.0,1539
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.ENCAPSULATION_PROFILE_SUFFIX),1,0,0.0,1540
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('del_segments=%s', body['delSegments'])",1,0,0.0,1541
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv.SEGMENT_DEL),1,0,0.0,1542
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'del_segment_list': []},1,0,0.0,1543
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._populate_member_segments(context, network, del_segments,",1,0,0.0,1544
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'delSegments': []},1,0,0.0,1545
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'addSegments': [],",1,0,0.0,1546
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segmentType': profile['segment_type'],",1,0,0.0,1547
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'mode': 'access',",1,0,0.0,1548
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'vlan': network[providernet.SEGMENTATION_ID],",1,0,0.0,1549
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'networkSegmentPool': profile['id'],",1,0,0.0,1550
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, network[n1kv.PROFILE_ID], context.tenant_id)",1,0,0.0,1551
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_update_network_request: %s', network['id'])",1,0,0.0,1552
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,that need to be deleted,1,0,0.0,1553
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,del_segments):,1,0,0.0,1554
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.create_network_segment(network, profile)",1,0,0.0,1555
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1556
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"context, network[n1kv.PROFILE_ID])",1,0,0.0,1557
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.delete_encapsulation_profile(profile_name),1,0,0.0,1558
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif (network[providernet.NETWORK_TYPE] ==,1,0,0.0,1559
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm_network_name):,1,0,0.0,1560
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"policy_profile,",1,0,0.0,1561
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port_count,",1,0,0.0,1562
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port,",1,0,0.0,1563
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"context,",1,0,0.0,1564
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_create_port_request(self,",1,0,0.0,1565
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.delete_ip_pool(subnet['id']),1,0,0.0,1566
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.update_network_segment(subnet['network_id'], body=body)",1,0,0.0,1567
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_delete_subnet_request: %s', subnet['name'])",1,0,0.0,1568
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send delete subnet request to VSM.,1,0,0.0,1569
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_delete_subnet_request(self, context, subnet):",1,0,0.0,1570
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.update_ip_pool(subnet),1,0,0.0,1571
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_update_subnet_request: %s', subnet['name'])",1,0,0.0,1572
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send update subnet request to VSM.,1,0,0.0,1573
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_update_subnet_request(self, subnet):",1,0,0.0,1574
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.create_ip_pool(subnet),1,0,0.0,1575
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_create_subnet_request: %s', subnet['id'])",1,0,0.0,1576
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param subnet: subnet dictionary,1,0,0.0,1577
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Send create subnet request to VSM.,1,0,0.0,1578
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_create_subnet_request(self, context, subnet):",1,0,0.0,1579
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.delete_network_segment(network['id']),1,0,0.0,1580
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_dict),1,0,0.0,1581
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_dict['delSegments'].append(mapping_dict),1,0,0.0,1582
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for segment_pair in encap_dict[profile]:,1,0,0.0,1583
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK_TYPE_MULTI_SEGMENT):,1,0,0.0,1584
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.create_encapsulation_profile(encap_dict),1,0,0.0,1585
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_pairs)),",1,0,0.0,1586
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('Invalid UUID supplied in %s', pair)",1,0,0.0,1587
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not utils.is_valid_vlan_tag(int(dot1qtag)):,1,0,0.0,1588
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not self._policy_profile_exists(profile_id):,1,0,0.0,1589
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _process_policy_profile(self, context, attrs):",1,0,0.0,1590
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_name),1,0,0.0,1591
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not profile_id_set:,1,0,0.0,1592
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _process_network_profile(self, context, network):",1,0,0.0,1593
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port['id']),1,0,0.0,1594
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _extend_port_dict_profile(self, context, port):",1,0,0.0,1595
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _extend_network_dict_profile(self, context, network):",1,0,0.0,1596
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _extend_network_dict_member_segments(self, context, network):",1,0,0.0,1597
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"pair_list.append((segment, dot1qtag))",1,0,0.0,1598
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""value"") % dot1qtag",1,0,0.0,1599
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except ValueError:,1,0,0.0,1600
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""a vlan trunk segment"") % segment",1,0,0.0,1601
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._get_encap_segments(context,",1,0,0.0,1602
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""physical network"") % segment",1,0,0.0,1603
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif physical_network != binding.physical_network:,1,0,0.0,1604
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not physical_network:,1,0,0.0,1605
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if sub_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1606
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""another trunk segment"") % segment",1,0,0.0,1607
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment),1,0,0.0,1608
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if uuidutils.is_uuid_like(segment):,1,0,0.0,1609
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if sub_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1610
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: List of segment UUIDs and dot1qtag (for vxlan) in set pairs,1,0,0.0,1611
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param sub_type: Sub-type of the trunk segment,1,0,0.0,1612
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sub_type):,1,0,0.0,1613
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _parse_trunk_segments(self, context, attrs, param, physical_network,",1,0,0.0,1614
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_create_logical_network_request(self, network_profile, tenant_id):",1,0,0.0,1615
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param tenant_id: UUID representing the tenant,1,0,0.0,1616
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('_send_create_logical_network'),1,0,0.0,1617
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.create_logical_network(network_profile, tenant_id)",1,0,0.0,1618
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'add_segment_list': (,1,0,0.0,1619
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_const.ENCAPSULATION_PROFILE_SUFFIX),",1,0,0.0,1620
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if profile['sub_type'] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1621
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv.SEGMENT_ADD),1,0,0.0,1622
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._populate_member_segments(context, network, segment_pairs,",1,0,0.0,1623
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,1624
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.create_bridge_domain(network, profile['sub_type'])",1,0,0.0,1625
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1626
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network[n1kv.PROFILE_ID]),1,0,0.0,1627
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_create_network_request: %s', network['id'])",1,0,0.0,1628
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_create_network_request(self, context, network, segment_pairs):",1,0,0.0,1629
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.delete_network_segment_pool(profile['id']),1,0,0.0,1630
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile['name']),1,0,0.0,1631
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_delete_network_profile_request: %s',",1,0,0.0,1632
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_delete_network_profile_request(self, profile):",1,0,0.0,1633
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.update_network_segment_pool(profile),1,0,0.0,1634
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_update_network_profile_request: %s', profile['id'])",1,0,0.0,1635
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_update_network_profile_request(self, profile):",1,0,0.0,1636
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kvclient.create_network_segment_pool(profile, context.tenant_id)",1,0,0.0,1637
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug('_send_create_network_profile_request: %s', profile['id'])",1,0,0.0,1638
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_create_network_profile_request(self, context, profile):",1,0,0.0,1639
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kvclient.delete_logical_network(logical_network_name),1,0,0.0,1640
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.LOGICAL_NETWORK_SUFFIX),1,0,0.0,1641
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('_send_delete_logical_network'),1,0,0.0,1642
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _send_delete_logical_network_request(self, network_profile):",1,0,0.0,1643
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_profile_id,",1,0,0.0,1644
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_multi_tenants(self):,1,0,0.0,1645
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._send_update_network_profile_request(net_p),1,0,0.0,1646
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual('pp-1', profile['name'])",1,0,0.0,1647
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertRaises(c_exc.PolicyProfileIdNotFound,",1,0,0.0,1648
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual('pp-3', profile['name'])",1,0,0.0,1649
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, '00000000-0000-0000-0000-000000000003')",1,0,0.0,1650
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual('pp-2', profile['name'])",1,0,0.0,1651
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, '00000000-0000-0000-0000-000000000002')",1,0,0.0,1652
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,plugin._populate_policy_profiles(),1,0,0.0,1653
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'.TestClient._get_total_profiles') as obj_inst:,1,0,0.0,1654
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with mock.patch(fake_client.__name__ +,1,0,0.0,1655
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new=fake_client.TestClient):,1,0,0.0,1656
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"with mock.patch(n1kv_client.__name__ + "".Client"",",1,0,0.0,1657
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Patch the Client class with the TestClient class,1,0,0.0,1658
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_populate_policy_profile_delete(self):,1,0,0.0,1659
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, '00000000-0000-0000-0000-000000000001')",1,0,0.0,1660
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'network_id': pt['network_id']}},1,0,0.0,1661
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,instance._populate_policy_profiles(),1,0,0.0,1662
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new=fake_client.TestClient),1,0,0.0,1663
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_populate_policy_profile(self):,1,0,0.0,1664
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ext_mgr=PolicyProfileTestExtensionManager()),1,0,0.0,1665
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(TestN1kvPolicyProfiles, self).setUp(",1,0,0.0,1666
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"test cases, so call the super class setup, but pass in the",1,0,0.0,1667
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class TestN1kvPolicyProfiles(N1kvPluginTestCase):,1,0,0.0,1668
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,req.get_response(self.api),1,0,0.0,1669
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pt['network_id'])),1,0,0.0,1670
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"get_vm_network(db_session,",1,0,0.0,1671
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(n1kv_db_v2.,1,0,0.0,1672
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_delete_last_port_vmnetwork_cleanup(self):,1,0,0.0,1673
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.get_policy_profile,",1,0,0.0,1674
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'00000000-0000-0000-0000-000000000004'),1,0,0.0,1675
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'00000000-0000-0000-0000-000000000003'),1,0,0.0,1676
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _init_get_policy_profiles(self):,1,0,0.0,1677
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,We set the flag and attempt to retrieve the port profiles. It,1,0,0.0,1678
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_get_profiles_restricted(self):,1,0,0.0,1679
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._test_get_policy_profiles(expected_profiles=profiles, admin=True)",1,0,0.0,1680
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Request the list using admin and verify it returns,1,0,0.0,1681
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._test_get_policy_profiles(expected_profiles=profiles, admin=False)",1,0,0.0,1682
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Request the list using non-admin and verify it returns,1,0,0.0,1683
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_conf.CONF.set_override('restrict_policy_profiles', False,",1,0,0.0,1684
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Set the restriction flag,1,0,0.0,1685
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles. It should work for both admin and non-admin.,1,0,0.0,1686
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,behavior. We set the flag and attempt to retrieve the port,1,0,0.0,1687
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_get_profiles_unrestricted(self):,1,0,0.0,1688
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles[i]['name']),1,0,0.0,1689
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(expected_profiles[i].name,",1,0,0.0,1690
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profiles[i]['id']),1,0,0.0,1691
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(expected_profiles[i].id,",1,0,0.0,1692
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for i in range(len(profiles)):,1,0,0.0,1693
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(len(expected_profiles), len(res[resource]))",1,0,0.0,1694
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,else:,1,0,0.0,1695
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if admin:,1,0,0.0,1696
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _test_get_policy_profiles(self, expected_profiles, admin):",1,0,0.0,1697
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,],1,0,0.0,1698
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, '00000000-0000-0000-0000-000000000001'),",1,0,0.0,1699
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_db_v2.get_policy_profile(,1,0,0.0,1700
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new=fake_client.TestClient).start(),1,0,0.0,1701
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"mock.patch(n1kv_client.__name__ + "".Client"",",1,0,0.0,1702
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(old_vmn.port_count, new_vmn.port_count)",1,0,0.0,1703
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenant_id': pt['tenant_id'],",1,0,0.0,1704
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ctx1.tenant_id),1,0,0.0,1705
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"N1kvPluginTestCase,",1,0,0.0,1706
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'network_id': network['network']['id']}},1,0,0.0,1707
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_port_with_n1kv_policy_profile_id(self):,1,0,0.0,1708
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(pp['name'], 'service_profile')",1,0,0.0,1709
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, port['port'][n1kv.PROFILE_ID])",1,0,0.0,1710
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with self.port() as port:,1,0,0.0,1711
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_port_with_default_n1kv_policy_profile_id(self):,1,0,0.0,1712
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(TestN1kvPorts, self).setUp()",1,0,0.0,1713
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.skipTest(""Unsupported test case"")",1,0,0.0,1714
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if self._testMethodName in self._unsupported:,1,0,0.0,1715
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def setUp(self):,1,0,0.0,1716
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'test_requested_subnet_id_v4_and_v6'),1,0,0.0,1717
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,test_bindings.PortBindingsTestCase):,1,0,0.0,1718
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"class TestN1kvPorts(test_plugin.TestPortsV2,",1,0,0.0,1719
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pt['network_id']),1,0,0.0,1720
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"class TestN1kvHTTPResponse(test_plugin.TestV2HTTPResponse,",1,0,0.0,1721
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pass,1,0,0.0,1722
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,N1kvPluginTestCase):,1,0,0.0,1723
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"class TestN1kvBasicGet(test_plugin.TestBasicGet,",1,0,0.0,1724
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#not bound to tenant of sess2,1,0,0.0,1725
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ctx2.tenant_id),1,0,0.0,1726
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_conf.CONF.set_override('restrict_network_profiles', False,",1,0,0.0,1727
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_get_network_profile_unrestricted(self):,1,0,0.0,1728
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sess2, net_p['id'], ctx2.tenant_id)",1,0,0.0,1729
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.get_network_profile,",1,0,0.0,1730
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is_admin=False),1,0,0.0,1731
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id='tenant2',",1,0,0.0,1732
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_req.get_response(self.api)),1,0,0.0,1733
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(port['port'][n1kv.PROFILE_ID],",1,0,0.0,1734
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_obj.id),1,0,0.0,1735
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete('ports', port['port']['id'])",1,0,0.0,1736
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"pt['n1kv:profile_id'],",1,0,0.0,1737
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test whether VMNetwork count if port create fails on VSM.""""""",1,0,0.0,1738
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_next_port_rollback_vmnetwork_count(self):,1,0,0.0,1739
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Explicit stop of failure response mock from controller required,1,0,0.0,1740
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network['network']['id']),1,0,0.0,1741
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_obj.id,",1,0,0.0,1742
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.get_vm_network,",1,0,0.0,1743
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertRaises(c_exc.VMNetworkNotFound,",1,0,0.0,1744
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.new_create_request('ports', data)",1,0,0.0,1745
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,TestClientInvalidResponse),1,0,0.0,1746
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new=fake_client.,1,0,0.0,1747
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_first_port_rollback_vmnetwork(self):,1,0,0.0,1748
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'network_id': port['port']['network_id']}},1,0,0.0,1749
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenant_id': port['port']['tenant_id'],",1,0,0.0,1750
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test parameters for subsequent port create sent to the VSM.""""""",1,0,0.0,1751
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_next_port_invalid_parameters_fail(self):,1,0,0.0,1752
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,client_patch.stop(),1,0,0.0,1753
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, 500)",1,0,0.0,1754
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,}},1,0,0.0,1755
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'network_id': network['network']['id'],",1,0,0.0,1756
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new=fake_client.TestClientInvalidRequest),1,0,0.0,1757
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test parameters for first port create sent to the VSM.""""""",1,0,0.0,1758
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_first_port_invalid_parameters_fail(self):,1,0,0.0,1759
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port['port']['id']),1,0,0.0,1760
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_port_with_n1kv_policy_profile_id(self):,1,0,0.0,1761
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,should work for admin and fail for non-admin.,1,0,0.0,1762
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._test_get_policy_profiles(expected_profiles=[], admin=False)",1,0,0.0,1763
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_get_policy_profiles_by_name(self):,1,0,0.0,1764
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(sorted(subnet['subnet']['dns_nameservers']),",1,0,0.0,1765
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'ip_address': '10.0.0.1'}]},1,0,0.0,1766
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# delete the port,1,0,0.0,1767
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, webob.exc.HTTPCreated.code)",1,0,0.0,1768
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'ip_address': '10.0.0.10'}]},1,0,0.0,1769
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'end': '10.0.0.120'}]}},1,0,0.0,1770
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'allocation_pools': [{'start': '10.0.0.100',",1,0,0.0,1771
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenant_id': network['network']['tenant_id'],",1,0,0.0,1772
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'gateway_ip': '10.0.0.1',",1,0,0.0,1773
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'cidr': '10.0.0.0/24',",1,0,0.0,1774
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_subnet_with_allocation_range(self):,1,0,0.0,1775
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,webob.exc.HTTPNoContent.code),1,0,0.0,1776
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sorted(dns_nameservers)),1,0,0.0,1777
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sorted(host_routes, key=utils.safe_sort_key))",1,0,0.0,1778
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual('00000000-0000-0000-0000-000000000001',",1,0,0.0,1779
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"key=utils.safe_sort_key),",1,0,0.0,1780
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sorted(subnet['subnet']['host_routes'],",1,0,0.0,1781
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertEqual(,1,0,0.0,1782
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,subnet['subnet']['id']),1,0,0.0,1783
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'dns_nameservers': dns_nameservers}},1,0,0.0,1784
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'nexthop': '10.0.2.3'}],1,0,0.0,1785
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{'destination': '192.168.0.0/24',",1,0,0.0,1786
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'nexthop': '10.0.2.2'},",1,0,0.0,1787
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant_id': network['network']['tenant_id']}},1,0,0.0,1788
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'host_routes': host_routes,",1,0,0.0,1789
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'dns_nameservers': ['192.168.0.1'],",1,0,0.0,1790
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'ip_version': 4,",1,0,0.0,1791
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_requested_subnet_id_v4_and_v6(self):,1,0,0.0,1792
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_id=net_id, cidr='10.0.0.0/24',",1,0,0.0,1793
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ip_version=4,",1,0,0.0,1794
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,gateway_ip=attributes.ATTR_NOT_SPECIFIED),1,0,0.0,1795
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Consume from all consumers in threads,1,0,0.0,1796
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"test_l3_agent_scheduler.L3SchedulerTestCaseMixin,",1,0,0.0,1797
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class TestN1kvL3SchedulersTest(,1,0,0.0,1798
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class TestN1kvL3Test(test_l3.L3NatExtensionTestCase):,1,0,0.0,1799
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(1, mock_method.call_count)",1,0,0.0,1800
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with self.subnet():,1,0,0.0,1801
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Subnet creation should trigger scheduling for networks,1,0,0.0,1802
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_conf.CONF.set_override('network_auto_schedule', False)",1,0,0.0,1803
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'schedule_network') as mock_method:,1,0,0.0,1804
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"with mock.patch.object(n1kv_neutron_plugin.N1kvNeutronPluginV2,",1,0,0.0,1805
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test invocation of explicit scheduling for networks.""""""",1,0,0.0,1806
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_schedule_network_with_subnet_create(self):,1,0,0.0,1807
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete('ports', port4['port']['id'])",1,0,0.0,1808
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete('ports', port3['port']['id'])",1,0,0.0,1809
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertIn({'ip_address': '2607:f0d0:1002:51::3',",1,0,0.0,1810
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertIn({'ip_address': '10.0.0.3',",1,0,0.0,1811
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'subnet_id': subnet2['subnet']['id']}, ips)",1,0,0.0,1812
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertIn({'ip_address': '2607:f0d0:1002:51::2',",1,0,0.0,1813
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'subnet_id': subnet1['subnet']['id']}, ips)",1,0,0.0,1814
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertIn({'ip_address': '10.0.0.2',",1,0,0.0,1815
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(len(ips), 2)",1,0,0.0,1816
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,{'subnet_id': subnet2['subnet']['id']}]},1,0,0.0,1817
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"ip_version=6,",1,0,0.0,1818
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"cidr='2607:f0d0:1002:51::/124',",1,0,0.0,1819
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_id=net_id,",1,0,0.0,1820
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'cidr': '10.0.2.0/24',",1,0,0.0,1821
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'nexthop': '10.0.2.2'}],1,0,0.0,1822
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_subnet_adding_additional_host_routes_and_dns(self):,1,0,0.0,1823
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_rollback_deallocate_overlay_segment(self):,1,0,0.0,1824
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.new_create_request('networks', data)",1,0,0.0,1825
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_range='20-23'),1,0,0.0,1826
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_rollback_deallocate_vlan_segment(self):,1,0,0.0,1827
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_with_n1kv_network_profile_id(self):,1,0,0.0,1828
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(network['network'][n1kv.PROFILE_ID],",1,0,0.0,1829
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_req.get_response(self.api)),1,0,0.0,1830
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_with_n1kv_network_profile_id(self):,1,0,0.0,1831
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(np['name'], 'default_network_profile')",1,0,0.0,1832
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, network['network'][n1kv.PROFILE_ID])",1,0,0.0,1833
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_with_default_n1kv_network_profile_id(self):,1,0,0.0,1834
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant_id': self.tenant_id}},1,0,0.0,1835
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv.PROFILE_ID: net_profile_id,",1,0,0.0,1836
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _prepare_net_data(self, net_profile_id):",1,0,0.0,1837
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertIn('tenant_id', body['networks'][0])",1,0,0.0,1838
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, 200)",1,0,0.0,1839
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,set_context=True),1,0,0.0,1840
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id=self.tenant_id,",1,0,0.0,1841
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'some_net',",1,0,0.0,1842
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._make_network('json',",1,0,0.0,1843
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_plugin(self):,1,0,0.0,1844
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"class TestN1kvNetworks(test_plugin.TestNetworksV2,",1,0,0.0,1845
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""name"")",1,0,0.0,1846
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"instance._get_policy_profile_by_name,",1,0,0.0,1847
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertRaises(c_exc.PolicyProfileNameNotFound,",1,0,0.0,1848
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile['id']),1,0,0.0,1849
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,20).allocated),1,0,0.0,1850
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,1851
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(subnet_resp.status_int, 400)",1,0,0.0,1852
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'10000-10001'),1,0,0.0,1853
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'cidr': ""10.0.0.0/24""}}",1,0,0.0,1854
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Test subnet creation with invalid parameters sent to the VSM""""""",1,0,0.0,1855
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_subnet_with_invalid_parameters(self):,1,0,0.0,1856
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_port_prevents_network_deletion(self):,1,0,0.0,1857
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(TestN1kvSubnets, self).setUp()",1,0,0.0,1858
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.skipTest(""Unsupported test"")",1,0,0.0,1859
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'test_create_subnets_bulk_emulated_plugin_failure'),1,0,0.0,1860
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'test_create_subnets_bulk_emulated',",1,0,0.0,1861
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'test_delete_network',",1,0,0.0,1862
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"class TestN1kvSubnets(test_plugin.TestSubnetsV2,",1,0,0.0,1863
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,webob.exc.HTTPCreated.code),1,0,0.0,1864
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_delete_network_if_port_exists(self):,1,0,0.0,1865
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,webob.exc.HTTPConflict.code),1,0,0.0,1866
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(req.get_response(self.api).status_int,",1,0,0.0,1867
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id='somebody_else',",1,0,0.0,1868
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"webob.exc.HTTPCreated.code,",1,0,0.0,1869
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,returns a conflict error.,1,0,0.0,1870
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_set_not_shared_multi_tenants2_returns_409(self):,1,0,0.0,1871
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, webob.exc.HTTPBadRequest.code)",1,0,0.0,1872
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with self.subnet() as subnet:,1,0,0.0,1873
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_delete_network_with_subnet(self):,1,0,0.0,1874
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, webob.exc.HTTPNoContent.code)",1,0,0.0,1875
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_delete_network(self):,1,0,0.0,1876
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,10000).allocated),1,0,0.0,1877
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertFalse(n1kv_db_v2.get_vxlan_allocation(db_session,",1,0,0.0,1878
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(profile),1,0,0.0,1879
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.create_profile_binding(sess1, ctx1.tenant_id,",1,0,0.0,1880
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,1881
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.sync_vlan_allocations(db_session, net_p)",1,0,0.0,1882
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not self.DEFAULT_RESP_BODY:,1,0,0.0,1883
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"a value already, it will not be overwritten by this code.",1,0,0.0,1884
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,setUp() of the super-function (this one here). If you have set,1,0,0.0,1885
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,and set your DEFAULT_RESPONSE value also BEFORE calling the,1,0,0.0,1886
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"extra, please define your own setUp() function in your test class,",1,0,0.0,1887
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,our requests. This needs to be done BEFORE the setUp() function,1,0,0.0,1888
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Setup method for n1kv plugin tests.,1,0,0.0,1889
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def setUp(self, ext_mgr=NetworkProfileTestExtensionManager()):",1,0,0.0,1890
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.create_profile_binding(db_session, TENANT_TEST,",1,0,0.0,1891
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.create_profile_binding(db_session, TENANT_NOT_ADMIN,",1,0,0.0,1892
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p['id'], c_const.NETWORK)",1,0,0.0,1893
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.create_profile_binding(db_session, self.tenant_id,",1,0,0.0,1894
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,1895
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'n1kv_neutron_plugin.N1kvNeutronPluginV2'),1,0,0.0,1896
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.sync_vxlan_allocations(db_session, net_p)",1,0,0.0,1897
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,1898
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'segment_range': segment_range},1,0,0.0,1899
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenant_id': self.tenant_id,",1,0,0.0,1900
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segment_type': segment_type,",1,0,0.0,1901
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile.,1,0,0.0,1902
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_range='386-400'):,1,0,0.0,1903
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_type=c_const.NETWORK_TYPE_VLAN,",1,0,0.0,1904
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"name='default_network_profile',",1,0,0.0,1905
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _make_test_profile(self,",1,0,0.0,1906
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'name': name},1,0,0.0,1907
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,create. Default argument value chosen to correspond to the,1,0,0.0,1908
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""icehouse-pp"": {""properties"": {""name"": ""icehouse-pp"",",1,0,0.0,1909
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""id"": ""some-uuid-1""}},",1,0,0.0,1910
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""havana_pp"": {""properties"": {""name"": ""havana_pp"",",1,0,0.0,1911
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""id"": ""some-uuid-2""}},",1,0,0.0,1912
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv.EXTENDED_ATTRIBUTES_2_0[""networks""])",1,0,0.0,1913
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"attributes.RESOURCE_ATTRIBUTE_MAP[""networks""].update(",1,0,0.0,1914
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Update the RESOURCE_ATTRIBUTE_MAP with n1kv specific extended attrs.,1,0,0.0,1915
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.useFixture(tools.AttributeMapMemento()),1,0,0.0,1916
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,neutron_extensions.append_api_extensions_path(extensions.__path__),1,0,0.0,1917
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""password"": ""admin_password""}).start()",1,0,0.0,1918
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"new=lambda self: {""user_name"": ""admin"",",1,0,0.0,1919
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"mock.patch(cdb.__name__ + "".get_credential_name"",",1,0,0.0,1920
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"new=lambda self: ""127.0.0.1"").start()",1,0,0.0,1921
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"mock.patch(n1kv_client.__name__ + "".Client._get_vsm_hosts"",",1,0,0.0,1922
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# in the background.,1,0,0.0,1923
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# These help us move along, without having to mock up even more systems",1,0,0.0,1924
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Patch some internal functions in a few other parts of the system.,1,0,0.0,1925
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.resp_headers)),1,0,0.0,1926
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.DEFAULT_RESP_BODY,",1,0,0.0,1927
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.DEFAULT_RESP_CODE,",1,0,0.0,1928
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# on any instance of the fake HTTP connection class.,1,0,0.0,1929
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Using __name__ to avoid having to enter the full module path.,1,0,0.0,1930
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# library itself. We install a patch for a fake HTTP connection class.,1,0,0.0,1931
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# running in the unit tests, we need to 'fake' it by patching the HTTP",1,0,0.0,1932
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# client interacts with the VSM via HTTP. Since we don't have a VSM,1,0,0.0,1933
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Creating a mock HTTP connection object for requests lib. The N1KV,1,0,0.0,1934
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,},1,0,0.0,1935
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""id"": ""some-uuid-3""}},",1,0,0.0,1936
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""dhcp_pp"": {""properties"": {""name"": ""dhcp_pp"",",1,0,0.0,1937
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _make_test_policy_profile(self, name='service_profile'):",1,0,0.0,1938
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class N1kvPluginTestCase(test_plugin.NeutronDbPluginV2TestCase):,1,0,0.0,1939
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id='tenant1',",1,0,0.0,1940
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron import context,1,0,0.0,1941
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.extensions import network_profile,1,0,0.0,1942
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.extensions import n1kv,1,0,0.0,1943
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco import extensions,1,0,0.0,1944
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import network_db_v2 as cdb,1,0,0.0,1945
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import n1kv_models_v2,1,0,0.0,1946
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import n1kv_db_v2,1,0,0.0,1947
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,1948
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,0,0.0,1949
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,1950
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron import manager,1,0,0.0,1951
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.extensions import portbindings,1,0,0.0,1952
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import neutron.db.api as db,1,0,0.0,1953
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import utils,1,0,0.0,1954
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy_profile.RESOURCE_ATTRIBUTE_MAP),1,0,0.0,1955
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api import extensions as neutron_extensions,1,0,0.0,1956
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import webob.exc,1,0,0.0,1957
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import mock,1,0,0.0,1958
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    under the License.,1,0,0.0,1959
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    License for the specific language governing permissions and limitations,1,0,0.0,1960
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,1961
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,1962
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,1963
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    a copy of the License at,1,0,0.0,1964
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,1965
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,1966
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#,1,0,0.0,1967
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.extensions import policy_profile,1,0,0.0,1968
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.n1kv import n1kv_client,1,0,0.0,1969
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.n1kv import n1kv_neutron_plugin,1,0,0.0,1970
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests import tools,1,0,0.0,1971
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class PolicyProfileTestExtensionManager(object):,1,0,0.0,1972
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_request_extensions(self):,1,0,0.0,1973
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_actions(self):,1,0,0.0,1974
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile.RESOURCE_ATTRIBUTE_MAP),1,0,0.0,1975
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,attributes.RESOURCE_ATTRIBUTE_MAP.update(,1,0,0.0,1976
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# the global attribute map,1,0,0.0,1977
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# initialize the main API router which extends,1,0,0.0,1978
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Add the resources to the global attribute map,1,0,0.0,1979
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_resources(self):,1,0,0.0,1980
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class NetworkProfileTestExtensionManager(object):,1,0,0.0,1981
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._populate_policy_profiles(),1,0,0.0,1982
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Fake establish Communication with Cisco Nexus1000V VSM.""""""",1,0,0.0,1983
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _fake_setup_vsm(self):,1,0,0.0,1984
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def json(self, *args, **kwargs):",1,0,0.0,1985
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def __init__(self, status, response_text, headers):",1,0,0.0,1986
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,return.,1,0,0.0,1987
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"Initialize it with the status code, header and buffer contents you wish to",1,0,0.0,1988
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""",1,0,0.0,1989
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class FakeResponse(object):,1,0,0.0,1990
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests.unit.scheduler import test_l3_agent_scheduler,1,0,0.0,1991
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests.unit.plugins.cisco.n1kv import fake_client,1,0,0.0,1992
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests.unit.extensions import test_l3,1,0,0.0,1993
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests.unit.db import test_db_base_plugin_v2 as test_plugin,1,0,0.0,1994
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests.unit.api.v2 import test_base,1,0,0.0,1995
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.tests.unit import _test_extension_portbindings as test_bindings,1,0,0.0,1996
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"attributes.RESOURCE_ATTRIBUTE_MAP[""ports""].update(",1,0,0.0,1997
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv.EXTENDED_ATTRIBUTES_2_0[""ports""])",1,0,0.0,1998
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(N1kvPluginTestCase, self).setUp(self._plugin_name,",1,0,0.0,1999
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertFalse(n1kv_db_v2.get_vlan_allocation(db_session,",1,0,0.0,2000
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete('network_profiles', net_p['network_profile']['id'])",1,0,0.0,2001
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VLAN_MIN)),1,0,0.0,2002
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_delete_network_profile_deallocate_vlan_segment_pool(self):,1,0,0.0,2003
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,expected_code=409),1,0,0.0,2004
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._delete('network_profiles', net_p['id'],",1,0,0.0,2005
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_delete_network_profile_with_network_fail(self):,1,0,0.0,2006
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VLAN_MAX + 1),1,0,0.0,2007
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VLAN_MIN - 1),1,0,0.0,2008
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session,",1,0,0.0,2009
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.get_vlan_allocation,",1,0,0.0,2010
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertRaises(c_exc.VlanIDNotFound,",1,0,0.0,2011
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vlan).allocated),1,0,0.0,2012
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vlan)),1,0,0.0,2013
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ext_mgr=ext_mgr),1,0,0.0,2014
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"PHYS_NET,",1,0,0.0,2015
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertIsNotNone(n1kv_db_v2.get_vlan_allocation(db_session,",1,0,0.0,2016
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for vlan in range(VLAN_MIN, VLAN_MAX + 1):",1,0,0.0,2017
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.deserialize(self.fmt,",1,0,0.0,2018
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_populate_vlan_segment_pool(self):,1,0,0.0,2019
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_trunk_network_profile_multicast_fail(self):,1,0,0.0,2020
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'100-200'}},1,0,0.0,2021
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_trunk_network_profile_segment_range_fail(self):,1,0,0.0,2022
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_vlan_network_profile_multicast_fail(self):,1,0,0.0,2023
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.0.0.11-224.0.0.111'}},1,0,0.0,2024
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_overlay_network_profile_reservedip_multicast_fail(self):,1,0,0.0,2025
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.0.0.100-224.0.1.100'),1,0,0.0,2026
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vlan),1,0,0.0,2027
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_rollback_profile_binding(self):,1,0,0.0,2028
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,new=fake_client.TestClientInvalidResponse),1,0,0.0,2029
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,client_patch.start(),1,0,0.0,2030
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'CISCO_N1K'),1,0,0.0,2031
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_get_network_profile_restricted(self):,1,0,0.0,2032
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(tenant4),1,0,0.0,2033
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,['tenant4']}},1,0,0.0,2034
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# are not deleted.,1,0,0.0,2035
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, 'tenant1',",1,0,0.0,2036
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant1']}},1,0,0.0,2037
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(tenant3),1,0,0.0,2038
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session, 'tenant4',",1,0,0.0,2039
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.get_profile_binding,",1,0,0.0,2040
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertRaises(c_exc.ProfileTenantBindingNotFound,",1,0,0.0,2041
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# current tenant_id should always present,1,0,0.0,2042
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(200, update_res.status_int)",1,0,0.0,2043
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"['tenant1', 'tenant3']}}",1,0,0.0,2044
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_profile_multi_tenants(self):,1,0,0.0,2045
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(tenant2),1,0,0.0,2046
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(tenant1),1,0,0.0,2047
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.assertIsNotNone(tenant_id),1,0,0.0,2048
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(201, res.status_int)",1,0,0.0,2049
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,is_admin=True),1,0,0.0,2050
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.tenant_id,",1,0,0.0,2051
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(400, res.status_int)",1,0,0.0,2052
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_with_old_add_tenant_fail(self):,1,0,0.0,2053
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(3, bindings.count())",1,0,0.0,2054
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_type=""network""))",1,0,0.0,2055
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_reservedip_multicast_fail(self):,1,0,0.0,2056
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.0.1.0-224.0.1.100'}},1,0,0.0,2057
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_overlay_network_profile_correct_multicast_pass(self):,1,0,0.0,2058
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p_req.get_response(self.ext_api)),1,0,0.0,2059
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_profile_plugin(self):,1,0,0.0,2060
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_range='10000-1000000001'),1,0,0.0,2061
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_overlay_unreasonable_seg_range(self):,1,0,0.0,2062
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_trunk_missing_subtype(self):,1,0,0.0,2063
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_trunk(self):,1,0,0.0,2064
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, 400)",1,0,0.0,2065
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,data['network_profile'].pop('sub_type'),1,0,0.0,2066
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_overlay_missing_subtype(self):,1,0,0.0,2067
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_overlay(self):,1,0,0.0,2068
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(res.status_int, 201)",1,0,0.0,2069
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_network_profile_vlan(self):,1,0,0.0,2070
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif segment_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2071
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""224.1.1.1-224.1.1.10"")",1,0,0.0,2072
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2073
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2074
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant_id': self.tenant_id},1,0,0.0,2075
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mcast_ip_range=None):,1,0,0.0,2076
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_range=None,",1,0,0.0,2077
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sub_type=None,",1,0,0.0,2078
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_type,",1,0,0.0,2079
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _prepare_net_profile_data(self,",1,0,0.0,2080
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class TestN1kvNetworkProfiles(N1kvPluginTestCase):,1,0,0.0,2081
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._make_test_policy_profile(),1,0,0.0,2082
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._make_test_profile(),1,0,0.0,2083
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Create some of the database entries that we require.,1,0,0.0,2084
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,_prepare_net_profile_data(c_const.NETWORK_TYPE_OVERLAY)),1,0,0.0,2085
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data,",1,0,0.0,2086
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_correct_multicast_pass(self):,1,0,0.0,2087
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p['network_profile']['id']),1,0,0.0,2088
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.1.1.1-20.0.0.1'),1,0,0.0,2089
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_invalid_maxip_multicast_fail(self):,1,0,0.0,2090
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'10.0.0.1-224.1.1.3'),1,0,0.0,2091
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_invalid_minip_multicast_fail(self):,1,0,0.0,2092
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.1.1.1.224.1.1.3'),1,0,0.0,2093
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mcast_ip_range=,1,0,0.0,2094
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_wrong_split_multicast_fail(self):,1,0,0.0,2095
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,NETWORK_SUBTYPE_NATIVE_VXLAN)),1,0,0.0,2096
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_no_multicast_fail(self):,1,0,0.0,2097
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mcast_ip_range='1.1.1.1'),1,0,0.0,2098
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"NETWORK_SUBTYPE_NATIVE_VXLAN),",1,0,0.0,2099
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sub_type=(c_const.,1,0,0.0,2100
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_create_overlay_network_profile_invalid_multicast_fail(self):,1,0,0.0,2101
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(update_res.status_int, 409)",1,0,0.0,2102
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(network_res.status_int, 201)",1,0,0.0,2103
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant_id': 'some_tenant'}},1,0,0.0,2104
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv.PROFILE_ID: net_p['id'],",1,0,0.0,2105
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_profiles_with_networks_fail(self):,1,0,0.0,2106
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(update_res.status_int, 400)",1,0,0.0,2107
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_profile_sub_type_fail(self):,1,0,0.0,2108
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'segment_type': c_const.NETWORK_TYPE_OVERLAY}},1,0,0.0,2109
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_profile_segment_type_fail(self):,1,0,0.0,2110
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,net_p['id']),1,0,0.0,2111
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def test_update_network_profile_physical_network_fail(self):,1,0,0.0,2112
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.assertEqual(update_res.status_int, 200)",1,0,0.0,2113
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.conn.consume_in_threads(),1,0,0.0,2114
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_profile_bindings(db_session, profile_type=None):",1,0,0.0,2115
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.conn.create_consumer(svc_topic, self.endpoints, fanout=False)",1,0,0.0,2116
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Update a policy profile.""""""",1,0,0.0,2117
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if _profile_binding_exists(db_session,",1,0,0.0,2118
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if profile_type not in [""network"", ""policy""]:",1,0,0.0,2119
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Create Network/Policy Profile association with a tenant.""""""",1,0,0.0,2120
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_profile_binding(db_session, tenant_id, profile_id, profile_type):",1,0,0.0,2121
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Retrieve all policy profiles.""""""",1,0,0.0,2122
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_policy_profiles():,1,0,0.0,2123
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.PolicyProfile).filter_by(id=id).one(),1,0,0.0,2124
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""get_policy_profile()"")",1,0,0.0,2125
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Get Policy Profile.""""""",1,0,0.0,2126
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_policy_profile(db_session, id):",1,0,0.0,2127
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,_profile.update(policy_profile),1,0,0.0,2128
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""update_policy_profile()"")",1,0,0.0,2129
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_policy_profile(db_session, id, policy_profile):",1,0,0.0,2130
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,id=id).one(),1,0,0.0,2131
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.delete(policy_profile),1,0,0.0,2132
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""delete_policy_profile()"")",1,0,0.0,2133
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Delete Policy Profile.""""""",1,0,0.0,2134
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def delete_policy_profile(id):,1,0,0.0,2135
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(p_profile),1,0,0.0,2136
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"name=policy_profile[""name""])",1,0,0.0,2137
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""create_policy_profile()"")",1,0,0.0,2138
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Create Policy Profile.""""""",1,0,0.0,2139
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def create_policy_profile(policy_profile):,1,0,0.0,2140
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(physical_network=physical_network)),1,0,0.0,2141
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if physical_network:,1,0,0.0,2142
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"Get Network Profiles on a particular physical network, if physical",1,0,0.0,2143
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id,",1,0,0.0,2144
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id,",1,0,0.0,2145
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type):,1,0,0.0,2146
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id=profile_id,",1,0,0.0,2147
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id=profile_id),1,0,0.0,2148
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for tenant_id in new_tenants_set:,1,0,0.0,2149
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id=profile_id, profile_type=profile_type).delete()",1,0,0.0,2150
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.query(n1kv_models_v2.ProfileBinding).filter_by(,1,0,0.0,2151
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if profile_type not in (""network"", ""policy""):",1,0,0.0,2152
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.debug('update_profile_binding()'),1,0,0.0,2153
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Updating Profile Binding.""""""",1,0,0.0,2154
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_profile_binding(db_session, profile_id, tenants, profile_type):",1,0,0.0,2155
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{""profile_id"": profile_id, ""tenant_id"": tenant_id})",1,0,0.0,2156
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""%(profile_id)s and tenant ID %(tenant_id)s"",",1,0,0.0,2157
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except c_exc.ProfileTenantBindingNotFound:,1,0,0.0,2158
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.delete(binding),1,0,0.0,2159
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""delete_profile_binding()"")",1,0,0.0,2160
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Delete Policy Binding.""""""",1,0,0.0,2161
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_profile_binding(db_session, tenant_id, profile_id):",1,0,0.0,2162
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id=tenant_id, profile_id=profile_id).one())",1,0,0.0,2163
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""get_profile_binding()"")",1,0,0.0,2164
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Get Network/Policy Profile - Tenant binding.""""""",1,0,0.0,2165
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_profile_binding(db_session, tenant_id, profile_id):",1,0,0.0,2166
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type=profile_type).first()),1,0,0.0,2167
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filter_by(tenant_id=tenant_id, profile_id=profile_id,",1,0,0.0,2168
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""_profile_binding_exists()"")",1,0,0.0,2169
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Check if the profile-tenant binding exists.""""""",1,0,0.0,2170
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _profile_binding_exists(db_session, tenant_id, profile_id, profile_type):",1,0,0.0,2171
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant_id=tenant_id),1,0,0.0,2172
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_network_profiles(db_session=None, physical_network=None):",1,0,0.0,2173
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id=id,",1,0,0.0,2174
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(vxlan_id=vxlan_id).one()),1,0,0.0,2175
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_vm_network(db_session,",1,0,0.0,2176
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_vm_network(db_session, policy_profile_id, network_id):",1,0,0.0,2177
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(name=name).one()),1,0,0.0,2178
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_vm_network_port_count(db_session, name, port_count):",1,0,0.0,2179
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(vm_network),1,0,0.0,2180
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_count=port_count),1,0,0.0,2181
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"profile_id=policy_profile_id,",1,0,0.0,2182
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"name=name,",1,0,0.0,2183
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a VM network.,1,0,0.0,2184
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port_count):,1,0,0.0,2185
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_id,",1,0,0.0,2186
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"policy_profile_id,",1,0,0.0,2187
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"name,",1,0,0.0,2188
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"+ ""_"" + network_id)",1,0,0.0,2189
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id=tenant_id,",1,0,0.0,2190
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_id=network_id).one()),1,0,0.0,2191
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filter_by(profile_id=policy_profile_id,",1,0,0.0,2192
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_vm_network(db_session, policy_profile_id, network_id):",1,0,0.0,2193
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param status: string representing the new status,1,0,0.0,2194
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_id: UUID representing the port,1,0,0.0,2195
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Set the status of the port.,1,0,0.0,2196
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def set_port_status(port_id, status):",1,0,0.0,2197
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.warning(_LW(""vxlan_id %s not found""), vxlan_id)",1,0,0.0,2198
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Release a given VXLAN ID.,1,0,0.0,2199
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def release_vxlan(db_session, vxlan_id):",1,0,0.0,2200
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(vxlan_id=vxlan_id).,1,0,0.0,2201
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Reserve a specific VXLAN ID.,1,0,0.0,2202
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a VM network.,1,0,0.0,2203
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_id),1,0,0.0,2204
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.delete(vm_network),1,0,0.0,2205
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.query(n1kv_models_v2.N1kVmNetwork).filter_by(,1,0,0.0,2206
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if _profile_binding_exists(db_session=db_session,",1,0,0.0,2207
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if tenant_id and c_conf.CISCO_N1K.restrict_network_profiles:,1,0,0.0,2208
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""get_network_profile()"")",1,0,0.0,2209
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Get Network Profile.""""""",1,0,0.0,2210
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_network_profile(db_session, id, tenant_id=None):",1,0,0.0,2211
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile.update(network_profile),1,0,0.0,2212
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""update_network_profile()"")",1,0,0.0,2213
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Update Network Profile.""""""",1,0,0.0,2214
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_network_profile(db_session, id, network_profile, tenant_id=None):",1,0,0.0,2215
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(profile_id=id).delete()),1,0,0.0,2216
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(db_session.query(n1kv_models_v2.ProfileBinding).,1,0,0.0,2217
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.delete(network_profile),1,0,0.0,2218
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""delete_network_profile()"")",1,0,0.0,2219
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Delete Network Profile.""""""",1,0,0.0,2220
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_network_profile(db_session, id, tenant_id=None):",1,0,0.0,2221
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(net_profile),1,0,0.0,2222
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"elif network_profile[""segment_type""] == c_const.NETWORK_TYPE_TRUNK:",1,0,0.0,2223
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""multicast_ip_range""]",1,0,0.0,2224
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"elif network_profile[""segment_type""] == c_const.NETWORK_TYPE_OVERLAY:",1,0,0.0,2225
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if network_profile[""segment_type""] == c_const.NETWORK_TYPE_VLAN:",1,0,0.0,2226
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""segment_type"": network_profile[""segment_type""]}",1,0,0.0,2227
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""create_network_profile()"")",1,0,0.0,2228
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_network_profile(db_session, network_profile):",1,0,0.0,2229
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""_"" + network_id)",1,0,0.0,2230
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"name=vm_network[""name""]).delete()",1,0,0.0,2231
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(tenant),1,0,0.0,2232
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if profile_type:,1,0,0.0,2233
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(profile_type=profile_type)),1,0,0.0,2234
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if original_net_p.segment_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2235
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"updated_net_p, id)",1,0,0.0,2236
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._validate_segment_range_uniqueness(context,",1,0,0.0,2237
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"delete_segment_allocations(context.session, original_net_p)",1,0,0.0,2238
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if not self._segment_in_use(context.session, original_net_p):",1,0,0.0,2239
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p.get(""segment_range"") != original_net_p.segment_range):",1,0,0.0,2240
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if (p.get(""segment_range"") and",1,0,0.0,2241
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if p.get(""multicast_ip_range""):",1,0,0.0,2242
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK_TYPE_TRUNK]:,1,0,0.0,2243
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if original_net_p.segment_type in [c_const.NETWORK_TYPE_VLAN,",1,0,0.0,2244
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,LOG.error(msg),1,0,0.0,2245
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if p.get('segment_range'):,1,0,0.0,2246
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#TODO(abhraut): Remove check when Trunk supports segment range.,1,0,0.0,2247
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"delete_profile_binding(context.session, remove_tenant, id)",1,0,0.0,2248
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_profile_bindings_by_uuid(db_session, profile_id):",1,0,0.0,2249
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,continue,1,0,0.0,2250
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if remove_tenant == context.tenant_id:,1,0,0.0,2251
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for remove_tenant in p[c_const.REMOVE_TENANTS]:,1,0,0.0,2252
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if context.is_admin and c_const.REMOVE_TENANTS in p:,1,0,0.0,2253
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p[c_const.ADD_TENANTS], c_const.NETWORK)",1,0,0.0,2254
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"update_profile_binding(context.session, id,",1,0,0.0,2255
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p[c_const.ADD_TENANTS].append(bindings.tenant_id),1,0,0.0,2256
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for bindings in profile_bindings:,1,0,0.0,2257
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id=id),1,0,0.0,2258
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if context.is_admin and c_const.ADD_TENANTS in p:,1,0,0.0,2259
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_network_profile(self, context, id, network_profile):",1,0,0.0,2260
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,context.tenant_id),1,0,0.0,2261
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if original_net_p.segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2262
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sync_vlan_allocations(context.session, updated_net_p)",1,0,0.0,2263
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if original_net_p.segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2264
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sync_vxlan_allocations(context.session, updated_net_p)",1,0,0.0,2265
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment_type != c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2266
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._validate_network_profile(p),1,0,0.0,2267
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _validate_network_profile_args(self, context, p):",1,0,0.0,2268
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_segment_range(self, data):",1,0,0.0,2269
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except c_exc.NetworkProfileNotFound(profile=id):,1,0,0.0,2270
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"get_network_profile(context.session, id, context.tenant_id)",1,0,0.0,2271
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def network_profile_exists(self, context, id):",1,0,0.0,2272
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param tenant_id: UUID representing the tenant,1,0,0.0,2273
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant_id):,1,0,0.0,2274
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile_id,",1,0,0.0,2275
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session,",1,0,0.0,2276
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_network_profile_tenant(self,",1,0,0.0,2277
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"NetworkProfile,",1,0,0.0,2278
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.,1,0,0.0,2279
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filters=filters, fields=fields)",1,0,0.0,2280
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._make_network_profile_dict,",1,0,0.0,2281
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_network_profiles(self, context, filters=None, fields=None):",1,0,0.0,2282
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_network_profile(self, context, id, fields=None):",1,0,0.0,2283
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,context.tenant_id)),1,0,0.0,2284
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"update_network_profile(context.session, id, p,",1,0,0.0,2285
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if is_updated:,1,0,0.0,2286
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._validate_multicast_ip_range(p),1,0,0.0,2287
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"original_net_p.get(""multicast_ip_range""))):",1,0,0.0,2288
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(p.get(""multicast_ip_range"") !=",1,0,0.0,2289
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if (p.get('multicast_ip_range') and,1,0,0.0,2290
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,context.tenant_id)):,1,0,0.0,2291
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"get_network_profile(context.session, id,",1,0,0.0,2292
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if self._segment_in_use(context.session,",1,0,0.0,2293
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(profile_id=network_profile['id'])).first(),1,0,0.0,2294
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""physical_network"": network_profile[""physical_network""]}",1,0,0.0,2295
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""multicast_ip_range"": network_profile[""multicast_ip_range""],",1,0,0.0,2296
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""multicast_ip_index"": network_profile[""multicast_ip_index""],",1,0,0.0,2297
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""segment_range"": network_profile[""segment_range""],",1,0,0.0,2298
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""sub_type"": network_profile[""sub_type""],",1,0,0.0,2299
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""segment_type"": network_profile[""segment_type""],",1,0,0.0,2300
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""name"": network_profile[""name""],",1,0,0.0,2301
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _make_network_profile_dict(self, network_profile, fields=None):",1,0,0.0,2302
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""tenant_id"": profile_binding[""tenant_id""]}",1,0,0.0,2303
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _make_profile_bindings_dict(self, profile_binding, fields=None):",1,0,0.0,2304
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pid[0] for pid in net_profile_ids))),1,0,0.0,2305
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not net_profile_ids:,1,0,0.0,2306
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(profile_type=c_const.NETWORK).all()),1,0,0.0,2307
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(tenant_id=tenant_id).,1,0,0.0,2308
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id).,1,0,0.0,2309
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_network_collection_for_tenant(self, db_session, model, tenant_id):",1,0,0.0,2310
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,update({'tenant_id': tenant_id})),1,0,0.0,2311
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(tenant_id=c_const.TENANT_ID_NOT_SET).,1,0,0.0,2312
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if context.is_admin and context.tenant_id:,1,0,0.0,2313
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param context: neutron api request context,1,0,0.0,2314
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,initialized. Replace these tenant-ids with admin's tenant-id.,1,0,0.0,2315
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _replace_fake_tenant_id_with_real(self, context):",1,0,0.0,2316
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Network Profile Mixin.""""""",1,0,0.0,2317
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class NetworkProfile_db_mixin(object):,1,0,0.0,2318
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(profile_id=profile_id)),1,0,0.0,2319
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _segment_in_use(self, db_session, network_profile):",1,0,0.0,2320
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_network_profile_bindings(self, context, filters=None, fields=None):",1,0,0.0,2321
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_network_profile(self, context, id):",1,0,0.0,2322
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param filters: a dictionary with keys that are valid keys for a,1,0,0.0,2323
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant),1,0,0.0,2324
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.add_network_profile_tenant(context.session,",1,0,0.0,2325
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for tenant in p[c_const.ADD_TENANTS]:,1,0,0.0,2326
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if p.get(c_const.ADD_TENANTS):,1,0,0.0,2327
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK),1,0,0.0,2328
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_profile.id,",1,0,0.0,2329
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"context.tenant_id,",1,0,0.0,2330
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"create_profile_binding(context.session,",1,0,0.0,2331
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sync_vxlan_allocations(context.session, net_profile)",1,0,0.0,2332
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif net_profile.segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2333
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sync_vlan_allocations(context.session, net_profile)",1,0,0.0,2334
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if net_profile.segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2335
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with context.session.begin(subtransactions=True):,1,0,0.0,2336
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._validate_network_profile_args(context, p)",1,0,0.0,2337
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._replace_fake_tenant_id_with_real(context),1,0,0.0,2338
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_network_profile(self, context, network_profile):",1,0,0.0,2339
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for pb in profile_bindings],1,0,0.0,2340
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type=c_const.NETWORK),1,0,0.0,2341
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"context.session,",1,0,0.0,2342
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if context.is_admin:,1,0,0.0,2343
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,bindings dictionary. Only these fields will be returned,1,0,0.0,2344
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,values for each key in filters,1,0,0.0,2345
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,returned by this function will have matched one of the,1,0,0.0,2346
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,exact match comparison for that value. Each result,1,0,0.0,2347
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,an iterable containing values that will be used for an,1,0,0.0,2348
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def reserve_specific_vxlan(db_session, vxlan_id):",1,0,0.0,2349
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: allocation object,1,0,0.0,2350
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for svc_topic in self.service_topics.values():,1,0,0.0,2351
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(trunk_segment_binding),1,0,0.0,2352
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: binding object,1,0,0.0,2353
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multi_segment_id, segment_pair):",1,0,0.0,2354
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_multi_segment_network_binding(db_session,",1,0,0.0,2355
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_pair),1,0,0.0,2356
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multi_segment_id,",1,0,0.0,2357
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_pair: set containing the segment UUIDs that are bridged,1,0,0.0,2358
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_pair, profile_name):",1,0,0.0,2359
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_multi_segment_encap_profile_name(db_session, multi_segment_id,",1,0,0.0,2360
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(multi_segment_binding),1,0,0.0,2361
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment2_id=segment2_id)),1,0,0.0,2362
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvMultiSegmentNetworkBinding(,1,0,0.0,2363
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_multi_segment_binding(db_session, multi_segment_id, segment_pairs):",1,0,0.0,2364
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_id=segment_id, dot1qtag=tag))",1,0,0.0,2365
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not alloc:,1,0,0.0,2366
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"trunk_segment_id=trunk_segment_id,",1,0,0.0,2367
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvTrunkSegmentBinding(,1,0,0.0,2368
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_id),1,0,0.0,2369
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not binding.physical_network:,1,0,0.0,2370
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for (segment_id, tag) in segment_pairs:",1,0,0.0,2371
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_trunk_segment_binding(db_session, trunk_segment_id, segment_pairs):",1,0,0.0,2372
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment2_id=segment2_id).delete()),1,0,0.0,2373
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment1_id=segment1_id,",1,0,0.0,2374
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multi_segment_id=multi_segment_id,",1,0,0.0,2375
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,N1kvMultiSegmentNetworkBinding).filter_by(,1,0,0.0,2376
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(db_session.query(n1kv_models_v2.,1,0,0.0,2377
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for (segment1_id, segment2_id) in segment_pairs:",1,0,0.0,2378
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,try:,1,0,0.0,2379
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvMultiSegmentNetworkBinding).,1,0,0.0,2380
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filter_by(multi_segment_id=multi_segment_id,",1,0,0.0,2381
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment2_id=segment2_id)).one(),1,0,0.0,2382
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(network_id=network_id).,1,0,0.0,2383
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,to fetch,1,0,0.0,2384
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_network_binding(db_session, network_id):",1,0,0.0,2385
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(segment2_id=segment_id).first()),1,0,0.0,2386
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(segment1_id=segment_id).first()),1,0,0.0,2387
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def is_multi_segment_member(db_session, segment_id):",1,0,0.0,2388
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(segment_id=segment_id).first()),1,0,0.0,2389
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: boolean,1,0,0.0,2390
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_id: UUID of the segment to be checked,1,0,0.0,2391
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def is_trunk_member(db_session, segment_id):",1,0,0.0,2392
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(trunk_segment_id=trunk_segment_id)),1,0,0.0,2393
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,corresponding dot1qtag,1,0,0.0,2394
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: a list of tuples representing the segment and their,1,0,0.0,2395
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_trunk_members(db_session, trunk_segment_id):",1,0,0.0,2396
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,dot1qtag=dot1qtag)).one(),1,0,0.0,2397
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_pair: set containing the segment_id and dot1qtag,1,0,0.0,2398
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_trunk_network_binding(db_session, trunk_segment_id, segment_pair):",1,0,0.0,2399
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,encap_dict[alloc.encap_profile_name].append(seg_pair),1,0,0.0,2400
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if alloc.encap_profile_name not in encap_dict:,1,0,0.0,2401
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,for alloc in allocs:,1,0,0.0,2402
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: a dictionary of lists containing the segment pairs in sets,1,0,0.0,2403
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_multi_segment_encap_dict(db_session, multi_segment_id):",1,0,0.0,2404
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(multi_segment_id=multi_segment_id)),1,0,0.0,2405
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_multi_segment_members(db_session, multi_segment_id):",1,0,0.0,2406
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except exc.NoResultFound:,1,0,0.0,2407
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def del_multi_segment_binding(db_session, multi_segment_id, segment_pairs):",1,0,0.0,2408
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(trunk_segment_id=trunk_segment_id).first()),1,0,0.0,2409
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vxlan_id: integer value representing the segmentation ID,1,0,0.0,2410
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.1.1.1.224.1.1.3'),0,0,0.0,2411
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,2412
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#,1,0,0.0,2413
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,2414
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.0.0.100-224.0.1.100'}},1,0,0.0,2415
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'sub_type': 'native_vxlan',",1,0,0.0,2416
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""224.1.1.10"")",1,0,0.0,2417
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant_id': self.tenant_id}},1,0,0.0,2418
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segment_type': segment_type,",1,0,0.0,2419
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _prepare_net_profile_data(self, segment_type):",1,0,0.0,2420
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.0.0.100-224.0.1.100'),0,0,0.0,2421
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'224.1.1.1-20.0.0.1'),0,0,0.0,2422
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'10.0.0.1-224.1.1.3'),0,0,0.0,2423
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mcast_ip_range=,0,0,0.0,2424
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,N1kvTrunkSegmentBinding).,1,0,0.0,2425
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sub_type='native_vxlan'),0,0,0.0,2426
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mcast_ip_range='1.1.1.1'),0,0,0.0,2427
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sub_type='native_vxlan',",0,0,0.0,2428
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_range='10000-1000000001'),0,0,0.0,2429
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""224.1.1.1-224.1.1.10"")",0,0,0.0,2430
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenant_id': self.tenant_id},0,0,0.0,2431
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segment_type': segment_type,",0,0,0.0,2432
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,mcast_ip_range=None):,0,0,0.0,2433
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_range=None,",0,0,0.0,2434
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"sub_type=None,",0,0,0.0,2435
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_type,",0,0,0.0,2436
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _prepare_net_profile_data(self,",0,0,0.0,2437
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,2438
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    a copy of the License at,1,0,0.0,2439
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,2440
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,2441
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,dot1qtag=dot1qtag).delete()),1,0,0.0,2442
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_id=segment_id,",1,0,0.0,2443
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filter_by(trunk_segment_id=trunk_segment_id,",1,0,0.0,2444
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(db_session.query(n1kv_models_v2.N1kvTrunkSegmentBinding).,1,0,0.0,2445
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for (segment_id, dot1qtag) in segment_pairs:",1,0,0.0,2446
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,with db_session.begin(subtransactions=True):,1,0,0.0,2447
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segment_pairs: List of segment UUIDs in pair,1,0,0.0,2448
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param db_session: database session,1,0,0.0,2449
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""",1,0,0.0,2450
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def del_trunk_segment_binding(db_session, trunk_segment_id, segment_pairs):",1,0,0.0,2451
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.common import constants as p_const,1,0,0.0,2452
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import n1kv_models_v2,1,0,0.0,2453
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,2454
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,0,0.0,2455
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,2456
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.i18n import _LW,1,0,0.0,2457
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db import models_v2,1,0,0.0,2458
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import neutron.db.api as db,1,0,0.0,2459
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import exceptions as n_exc,1,0,0.0,2460
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from sqlalchemy import sql,1,0,0.0,2461
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_log import log as logging,1,0,0.0,2462
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import re,1,0,0.0,2463
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    under the License.,1,0,0.0,2464
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    License for the specific language governing permissions and limitations,1,0,0.0,2465
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,2466
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,one()),1,0,0.0,2467
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_network_binding(db_session, network_id, network_type,",1,0,0.0,2468
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"physical_network, segmentation_id,",1,0,0.0,2469
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile['physical_network'],",1,0,0.0,2470
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,).first()),1,0,0.0,2471
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvVxlanAllocation.allocated ==,1,0,0.0,2472
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_max,",1,0,0.0,2473
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvVxlanAllocation.vxlan_id <=,1,0,0.0,2474
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_min,",1,0,0.0,2475
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvVxlanAllocation.vxlan_id >=,1,0,0.0,2476
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def reserve_vxlan(db_session, network_profile):",1,0,0.0,2477
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile_name=network_profile.name),1,0,0.0,2478
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if alloc:,1,0,0.0,2479
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,)).first(),1,0,0.0,2480
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,sql.false()),1,0,0.0,2481
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvVlanAllocation.allocated ==,1,0,0.0,2482
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.N1kvVlanAllocation.physical_network ==,1,0,0.0,2483
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multicast_ip, network_profile_id, add_segments):",1,0,0.0,2484
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_models_v2.N1kvVlanAllocation.vlan_id <= seg_max,",1,0,0.0,2485
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_models_v2.N1kvVlanAllocation.vlan_id >= seg_min,",1,0,0.0,2486
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter(sql.and_(,1,0,0.0,2487
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def reserve_vlan(db_session, network_profile):",1,0,0.0,2488
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vlan_id=vlan_id).one()),1,0,0.0,2489
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filter_by(physical_network=physical_network,",1,0,0.0,2490
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vlan_id: integer representing the VLAN ID.,1,0,0.0,2491
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve vlan allocation.,1,0,0.0,2492
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_vlan_allocation(db_session, physical_network, vlan_id):",1,0,0.0,2493
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(alloc),1,0,0.0,2494
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_profile_id=net_p['id']),1,0,0.0,2495
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vlan_id=vlan_id,",1,0,0.0,2496
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile.sub_type == (c_const.,1,0,0.0,2497
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,NETWORK_SUBTYPE_NATIVE_VXLAN):,1,0,0.0,2498
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segment_id, get_multicast_ip(network_profile))",1,0,0.0,2499
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,else:,1,0,0.0,2500
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve VXLAN allocation for the given VXLAN ID.,1,0,0.0,2501
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_vxlan_allocation(db_session, vxlan_id):",1,0,0.0,2502
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile_id=net_p['id'], vxlan_id=vxlan_id)",1,0,0.0,2503
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except c_exc.VxlanIDNotFound:,1,0,0.0,2504
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"get_vxlan_allocation(db_session, vxlan_id)",1,0,0.0,2505
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for vxlan_id in range(seg_min, seg_max + 1):",1,0,0.0,2506
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{""vxlan_min"": seg_min, ""vxlan_max"": seg_max})",1,0,0.0,2507
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def sync_vxlan_allocations(db_session, net_p):",1,0,0.0,2508
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""not found""),",1,0,0.0,2509
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vlan_id: integer value of the segmentation ID to be released,1,0,0.0,2510
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Release a given VLAN ID.,1,0,0.0,2511
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def release_vlan(db_session, physical_network, vlan_id):",1,0,0.0,2512
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{""vlan"": vlan_id, ""network"": physical_network})",1,0,0.0,2513
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""%(network)s from pool"",",1,0,0.0,2514
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical_network=physical_network),1,0,0.0,2515
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if vlan_id == c_const.FLAT_VLAN_ID:,1,0,0.0,2516
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if alloc.allocated:,1,0,0.0,2517
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vlan_id=vlan_id).,1,0,0.0,2518
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param vlan_id: integer value of the segmentation ID to be reserved,1,0,0.0,2519
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Reserve a specific VLAN ID for the network.,1,0,0.0,2520
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def reserve_specific_vlan(db_session, physical_network, vlan_id):",1,0,0.0,2521
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile.segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2522
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile.segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2523
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile_id, tenant_id)",1,0,0.0,2524
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def alloc_network(db_session, network_profile_id, tenant_id):",1,0,0.0,2525
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"physical_network=net_p['physical_network'],",1,0,0.0,2526
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except c_exc.VlanIDNotFound:,1,0,0.0,2527
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vlan_id),1,0,0.0,2528
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_port_binding(db_session, port_id):",1,0,0.0,2529
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile.multicast_ip_index == len(addr_list):,1,0,0.0,2530
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_multicast_ip(network_profile):,1,0,0.0,2531
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{'seg_min': seg_min, 'seg_max': seg_max})",1,0,0.0,2532
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""seg_min %(seg_min)s, seg_max %(seg_max)s"",",1,0,0.0,2533
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,int(i) for i in network_profile.segment_range.split('-')),1,0,0.0,2534
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: integer values representing minimum and maximum segment,1,0,0.0,2535
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_segment_range(network_profile):,1,0,0.0,2536
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"add_trunk_segment_binding(db_session, network_id, add_segments)",1,0,0.0,2537
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2538
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"add_multi_segment_binding(db_session, network_id, add_segments)",1,0,0.0,2539
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pass,1,0,0.0,2540
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.add(binding),1,0,0.0,2541
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id=network_profile_id),1,0,0.0,2542
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"multicast_ip=multicast_ip,",1,0,0.0,2543
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"segmentation_id=segmentation_id,",1,0,0.0,2544
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"physical_network=physical_network,",1,0,0.0,2545
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_type=network_type,",1,0,0.0,2546
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_id=network_id,",1,0,0.0,2547
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param add_segments: List of segment UUIDs in pairs to be added to either a,1,0,0.0,2548
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,multiple VXLAN IDs.,1,0,0.0,2549
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,associated with every VXLAN ID to deal with broadcast,1,0,0.0,2550
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param segmentation_id: integer representing VLAN or VXLAN ID,1,0,0.0,2551
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,represents a L2 Domain,1,0,0.0,2552
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param physical_network: Only applicable for VLAN networks. It,1,0,0.0,2553
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,MULTI_SEGMENT or TRUNK),1,0,0.0,2554
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _get_multicast_ip_range(network_profile):,1,0,0.0,2555
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve port binding.,1,0,0.0,2556
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p['physical_network'],",1,0,0.0,2557
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: port binding object,1,0,0.0,2558
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"get_vlan_allocation(db_session,",1,0,0.0,2559
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for vlan_id in range(seg_min, seg_max + 1):",1,0,0.0,2560
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,physical network.,1,0,0.0,2561
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Synchronize vlan_allocations table with configured VLAN ranges.,1,0,0.0,2562
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def sync_vlan_allocations(db_session, net_p):",1,0,0.0,2563
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(n1kv_models_v2.N1kvVxlanAllocation.vxlan_id <=,1,0,0.0,2564
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(n1kv_models_v2.N1kvVxlanAllocation.vxlan_id >= seg_min),",1,0,0.0,2565
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.query(n1kv_models_v2.N1kvVxlanAllocation).filter(,1,0,0.0,2566
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif net_p['segment_type'] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2567
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,seg_max)).delete(),1,0,0.0,2568
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(n1kv_models_v2.N1kvVlanAllocation.vlan_id <=,1,0,0.0,2569
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(n1kv_models_v2.N1kvVlanAllocation.vlan_id >= seg_min),",1,0,0.0,2570
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p['physical_network']),",1,0,0.0,2571
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(n1kv_models_v2.N1kvVlanAllocation.physical_network ==,1,0,0.0,2572
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,db_session.query(n1kv_models_v2.N1kvVlanAllocation).filter(,1,0,0.0,2573
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if net_p['segment_type'] == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2574
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params db_session: database session,1,0,0.0,2575
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete the segment allocation entry from the table.,1,0,0.0,2576
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_segment_allocations(db_session, net_p):",1,0,0.0,2577
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_id=policy_profile_id),1,0,0.0,2578
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_id: UUID of the port,1,0,0.0,2579
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Bind the port with policy profile.,1,0,0.0,2580
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create port binding.,1,0,0.0,2581
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_port_binding(db_session, port_id, policy_profile_id):",1,0,0.0,2582
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(port_id=port_id).,1,0,0.0,2583
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._validate_segment_range_uniqueness(context, p)",1,0,0.0,2584
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _validate_segment_range(self, network_profile):",1,0,0.0,2585
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if not re.match(r""(\d+)\-(\d+)"", network_profile[""segment_range""]):",1,0,0.0,2586
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete an ip-pool on the VSM.,1,0,0.0,2587
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'portId': port['id'],",1,0,0.0,2588
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenantId': port['tenant_id'],",1,0,0.0,2589
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'portProfileId': policy_profile['id'],",1,0,0.0,2590
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'portProfile': policy_profile['name'],",1,0,0.0,2591
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'networkSegment': port['network_id'],",1,0,0.0,2592
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'networkSegmentId': port['network_id'],",1,0,0.0,2593
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port: port dict,1,0,0.0,2594
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy_profile):,1,0,0.0,2595
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"vm_network_name,",1,0,0.0,2596
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"port,",1,0,0.0,2597
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_vm_network(self,",1,0,0.0,2598
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param subnet_id: UUID representing the subnet,1,0,0.0,2599
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_ip_pool(self, subnet_id):",1,0,0.0,2600
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'addressRangeEnd': address_range_end,",1,0,0.0,2601
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'dnsServersList': subnet['dns_nameservers']},1,0,0.0,2602
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param subnet: subnet dictionary,1,0,0.0,2603
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update an ip-pool on the VSM.,1,0,0.0,2604
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_ip_pool(self, subnet):",1,0,0.0,2605
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenantId': subnet['tenant_id']},1,0,0.0,2606
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'id': subnet['id'],",1,0,0.0,2607
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'netSegmentName': subnet['network_id'],",1,0,0.0,2608
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'networkAddress': network_address,",1,0,0.0,2609
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'dnsServersList': subnet['dns_nameservers'],",1,0,0.0,2610
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'dhcp': subnet['enable_dhcp'],",1,0,0.0,2611
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'gateway': subnet['gateway_ip'],",1,0,0.0,2612
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'description': subnet['name'],",1,0,0.0,2613
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'macAddress': port['mac_address'],",1,0,0.0,2614
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,},1,0,0.0,2615
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if port.get('fixed_ips'):,1,0,0.0,2616
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_vm_network(self, vm_network_name):",1,0,0.0,2617
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"headers=headers,",1,0,0.0,2618
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"data=body,",1,0,0.0,2619
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"url=action,",1,0,0.0,2620
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"method,",1,0,0.0,2621
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""req: %s"", body)",1,0,0.0,2622
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if body:,1,0,0.0,2623
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not headers and self.hosts:,1,0,0.0,2624
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: JSON or plain text in HTTP response,1,0,0.0,2625
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param headers: header for the HTTP request,1,0,0.0,2626
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param body: dict for arguments which are sent as part of the request,1,0,0.0,2627
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param action: path to which the client makes request,1,0,0.0,2628
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,":param method: type of the HTTP request. POST, GET, PUT or DELETE",1,0,0.0,2629
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,VSM in plain text format.,1,0,0.0,2630
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Perform the HTTP request.,1,0,0.0,2631
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,headers=None):,1,0,0.0,2632
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _do_request(self, method, action, body=None,",1,0,0.0,2633
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a port on the VSM.,1,0,0.0,2634
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_n1kv_port(self, vm_network_name, port_id):",1,0,0.0,2635
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param body: dict of the arguments to be updated,1,0,0.0,2636
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param port_id: UUID of the port,1,0,0.0,2637
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a port on the VSM.,1,0,0.0,2638
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_n1kv_port(self, vm_network_name, port_id, body):",1,0,0.0,2639
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'macAddress': port['mac_address']},1,0,0.0,2640
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a port on the VSM.,1,0,0.0,2641
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_n1kv_port(self, port, vm_network_name):",1,0,0.0,2642
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'ipAddressSubnet': netmask,",1,0,0.0,2643
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if subnet['allocation_pools']:,1,0,0.0,2644
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _validate_multicast_ip_range(self, network_profile):",1,0,0.0,2645
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Delete a bridge domain on VSM.,1,0,0.0,2646
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Network segment on VSM can be updated to associate it with an ip-pool,1,0,0.0,2647
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_network_segment(self, network_segment_id, body):",1,0,0.0,2648
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.ENCAPSULATION_PROFILE_SUFFIX),1,0,0.0,2649
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile['sub_type'] == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2650
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile['segment_type'] == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2651
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.BRIDGE_DOMAIN_SUFFIX),1,0,0.0,2652
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2653
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network[providernet.NETWORK_TYPE] == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2654
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'networkSegmentPool': network_profile['id'], }",1,0,0.0,2655
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'tenantId': network['tenant_id'],",1,0,0.0,2656
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_network_segment(self, network, network_profile):",1,0,0.0,2657
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param name: name of the bridge domain to be deleted,1,0,0.0,2658
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_bridge_domain(self, name):",1,0,0.0,2659
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"except (ValueError, netaddr.AddrFormatError):",1,0,0.0,2660
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,body=body),1,0,0.0,2661
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if overlay_subtype == c_const.NETWORK_SUBTYPE_NATIVE_VXLAN:,1,0,0.0,2662
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenantId': network['tenant_id']},1,0,0.0,2663
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'subType': overlay_subtype,",1,0,0.0,2664
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'segmentId': network[providernet.SEGMENTATION_ID],",1,0,0.0,2665
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create a bridge domain on VSM.,1,0,0.0,2666
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_bridge_domain(self, network, overlay_subtype):",1,0,0.0,2667
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:returns: JSON string,1,0,0.0,2668
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def list_port_profiles(self):,1,0,0.0,2669
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Initialize a new client for the plugin.""""""",1,0,0.0,2670
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def __init__(self, **kwargs):",1,0,0.0,2671
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Define paths for the URI where the client connects for HTTP requests.,1,0,0.0,2672
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,or update its description and segment id.,1,0,0.0,2673
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param body: dict of arguments to be updated,1,0,0.0,2674
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_network_segment(self, network_segment_id):",1,0,0.0,2675
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_logical_network(self, network_profile, tenant_id):",1,0,0.0,2676
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,try:,1,0,0.0,2677
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if subnet['cidr']:,1,0,0.0,2678
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param subnet: subnet dict,1,0,0.0,2679
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Create an ip-pool on the VSM.,1,0,0.0,2680
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_ip_pool(self, subnet):",1,0,0.0,2681
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_segment_pool_id),1,0,0.0,2682
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment pool,1,0,0.0,2683
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_network_segment_pool(self, network_segment_pool_id):",1,0,0.0,2684
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_profile['id'], body=body)",1,0,0.0,2685
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'description': network_profile['name']},1,0,0.0,2686
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_network_segment_pool(self, network_profile):",1,0,0.0,2687
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.network_segment_pool_path % network_profile['id'],",1,0,0.0,2688
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if network_profile['segment_type'] == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2689
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'logicalNetwork': logical_network_name,",1,0,0.0,2690
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'id': network_profile['id'],",1,0,0.0,2691
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'description': network_profile['name'],",1,0,0.0,2692
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""network_segment_pool"")",1,0,0.0,2693
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_network_segment_pool(self, network_profile, tenant_id):",1,0,0.0,2694
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.logical_network_path % logical_network_name),1,0,0.0,2695
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param logical_network_name: string representing name of the logical,1,0,0.0,2696
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_logical_network(self, logical_network_name):",1,0,0.0,2697
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.LOGICAL_NETWORK_SUFFIX),1,0,0.0,2698
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'tenantId': tenant_id},1,0,0.0,2699
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""Logical network"")",1,0,0.0,2700
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param tenant_id: UUID representing the tenant,1,0,0.0,2701
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,timeout=self.timeout).wait(),1,0,0.0,2702
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except Exception as e:,1,0,0.0,2703
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""status_code %s"", resp.status_code)",1,0,0.0,2704
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.common import utils,1,0,0.0,2705
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,workflow,1,0,0.0,2706
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"Refer README file for the architecture, new features, and",1,0,0.0,2707
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Implement the Neutron abstractions using Cisco Nexus1000V.,1,0,0.0,2708
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""",1,0,0.0,2709
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,driver.DbQuotaDriver):,1,0,0.0,2710
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"agentschedulers_db.DhcpAgentSchedulerDbMixin,",1,0,0.0,2711
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"network_db_v2.Credential_db_mixin,",1,0,0.0,2712
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.PolicyProfile_db_mixin,",1,0,0.0,2713
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"n1kv_db_v2.NetworkProfile_db_mixin,",1,0,0.0,2714
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"portbindings_db.PortBindingMixin,",1,0,0.0,2715
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"external_net_db.External_net_db_mixin,",1,0,0.0,2716
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"class N1kvNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,",1,0,0.0,2717
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.common import constants as svc_constants,1,0,0.0,2718
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if resp.status_code == requests.codes.OK:,1,0,0.0,2719
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.n1kv import n1kv_client,1,0,0.0,2720
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.extensions import n1kv,1,0,0.0,2721
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import network_db_v2,1,0,0.0,2722
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import n1kv_db_v2,1,0,0.0,2723
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,2724
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_exceptions,1,0,0.0,2725
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_credentials_v2 as c_cred,1,0,0.0,2726
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,2727
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron import manager,1,0,0.0,2728
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.i18n import _LW,1,0,0.0,2729
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.extensions import providernet,1,0,0.0,2730
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.extensions import portbindings,1,0,0.0,2731
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# This attribute specifies whether the plugin supports or not,1,0,0.0,2732
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# bulk operations.,1,0,0.0,2733
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""n1kv"", ""network_profile"",",1,0,0.0,2734
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""policy_profile"", ""external-net"",",1,0,0.0,2735
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,metadata_rpc.MetadataRpcCallback()],1,0,0.0,2736
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"agents_db.AgentExtRpcCallback(),",1,0,0.0,2737
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# RPC support,1,0,0.0,2738
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _setup_rpc(self):,1,0,0.0,2739
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self.start_periodic_dhcp_agent_status_check(),1,0,0.0,2740
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,),1,0,0.0,2741
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,o_conf.CONF.network_scheduler_driver,1,0,0.0,2742
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._setup_rpc(),1,0,0.0,2743
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._setup_vsm(),1,0,0.0,2744
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_cred.Store.initialize(),1,0,0.0,2745
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_db_v2.delete_all_n1kv_credentials(),1,0,0.0,2746
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'security-group' in self.supported_extension_aliases}},1,0,0.0,2747
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,portbindings.CAP_PORT_FILTER:,1,0,0.0,2748
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# TODO(rkukura): Replace with new VIF security details,1,0,0.0,2749
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,portbindings.VIF_DETAILS: {,1,0,0.0,2750
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,",1,0,0.0,2751
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"super(N1kvNeutronPluginV2, self).__init__()",1,0,0.0,2752
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,4. Establish communication with Cisco Nexus1000V,1,0,0.0,2753
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,3. Initialize Nexus1000v and Credential DB,1,0,0.0,2754
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,2. clear N1kv credential,1,0,0.0,2755
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,1. Initialize VIF type to OVS,1,0,0.0,2756
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Initialize Nexus1000V Neutron plugin.,1,0,0.0,2757
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def __init__(self, configfile=None):",1,0,0.0,2758
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""dhcp_agent_scheduler""]",1,0,0.0,2759
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""binding"", ""credential"", ""quotas"",",1,0,0.0,2760
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db.quota import driver,1,0,0.0,2761
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db import portbindings_db,1,0,0.0,2762
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db import external_net_db,1,0,0.0,2763
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param body: mapping dictionary,1,0,0.0,2764
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_encapsulation_profile(self, context, profile_name, body):",1,0,0.0,2765
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'delMappings': encap['del_segment_list']},1,0,0.0,2766
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'addMappings': encap['add_segment_list'],",1,0,0.0,2767
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param encap: encapsulation dict,1,0,0.0,2768
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def create_encapsulation_profile(self, encap):",1,0,0.0,2769
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_clusters(self):,1,0,0.0,2770
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:return: authorization header dict,1,0,0.0,2771
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve header with auth info for the VSM.,1,0,0.0,2772
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_auth_header(self, host_ip):",1,0,0.0,2773
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network_db_v2.get_all_n1kv_credentials()],1,0,0.0,2774
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _get_vsm_hosts(self):,1,0,0.0,2775
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _put(self, action, body=None, headers=None):",1,0,0.0,2776
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _post(self, action, body=None, headers=None):",1,0,0.0,2777
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get(self, action, body=None, headers=None):",1,0,0.0,2778
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,headers=headers),1,0,0.0,2779
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _delete(self, action, body=None, headers=None):",1,0,0.0,2780
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not format:,1,0,0.0,2781
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:return: mime-type string,1,0,0.0,2782
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param format: format to be set.,1,0,0.0,2783
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Set the mime-type to either 'xml' or 'json'.,1,0,0.0,2784
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _set_content_type(self, format=None):",1,0,0.0,2785
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"LOG.debug(""VSM: %s"", resp.text)",1,0,0.0,2786
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,elif 'text/plain' in resp.headers['content-type']:,1,0,0.0,2787
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except ValueError:,1,0,0.0,2788
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if 'application/json' in resp.headers['content-type']:,1,0,0.0,2789
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Adds a vlan to bridge-domain mapping to an encapsulation profile.,1,0,0.0,2790
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"% profile_name, body=body)",1,0,0.0,2791
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db import db_base_plugin_v2,1,0,0.0,2792
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def delete_encapsulation_profile(self, name):",1,0,0.0,2793
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db import agentschedulers_db,1,0,0.0,2794
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.db import agents_db,1,0,0.0,2795
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import topics,1,0,0.0,2796
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import rpc as n_rpc,1,0,0.0,2797
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import exceptions as n_exc,1,0,0.0,2798
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import constants,1,0,0.0,2799
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.rpc.handlers import metadata_rpc,1,0,0.0,2800
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.rpc.handlers import dhcp_rpc,1,0,0.0,2801
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.rpc.agentnotifiers import dhcp_rpc_agent_api,1,0,0.0,2802
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_utils import uuidutils,1,0,0.0,2803
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_utils import importutils,1,0,0.0,2804
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_utils import excutils,1,0,0.0,2805
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_log import log as logging,1,0,0.0,2806
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_config import cfg as o_conf,1,0,0.0,2807
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import eventlet,1,0,0.0,2808
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    under the License.,1,0,0.0,2809
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    License for the specific language governing permissions and limitations,1,0,0.0,2810
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,2811
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,2812
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,2813
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    a copy of the License at,1,0,0.0,2814
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,2815
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,2816
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#,1,0,0.0,2817
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,2818
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm-network.,1,0,0.0,2819
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"another port, the references to that port will be added to the same",1,0,0.0,2820
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,unique vm-network will be created and a reference to the port will be,1,0,0.0,2821
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ProfileBinding.profile_id),1,0,0.0,2822
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if context.is_admin or not c_conf.CISCO_N1K.restrict_policy_profiles:,1,0,0.0,2823
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Retrieve a list of policy profiles.,1,0,0.0,2824
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_policy_profiles(self, context, filters=None, fields=None):",1,0,0.0,2825
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:params fields: a list of strings that are valid keys in a policy,1,0,0.0,2826
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_policy_profile(self, context, id, fields=None):",1,0,0.0,2827
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(id=id).first()),1,0,0.0,2828
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _policy_profile_exists(self, id):",1,0,0.0,2829
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _make_policy_profile_dict(self, policy_profile, fields=None):",1,0,0.0,2830
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,pid[0] for pid in profile_ids)),1,0,0.0,2831
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not profile_ids:,1,0,0.0,2832
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(profile_type=c_const.POLICY).all()),1,0,0.0,2833
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,.filter_by(tenant_id=tenant_id).,1,0,0.0,2834
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_policy_collection_for_tenant(self, db_session, model, tenant_id):",1,0,0.0,2835
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter(sql.and_(n1kv_models_v2.ProfileBinding.profile_id.,1,0,0.0,2836
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Policy Profile Mixin.""""""",1,0,0.0,2837
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class PolicyProfile_db_mixin(object):,1,0,0.0,2838
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_network_profile_by_name(self, db_session, name):",1,0,0.0,2839
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(seg_max >= profile_seg_max))):,1,0,0.0,2840
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,((seg_min <= profile_seg_min) and,1,0,0.0,2841
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(profile_seg_min <= seg_max <= profile_seg_max) or,1,0,0.0,2842
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if ((profile_seg_min <= seg_min <= profile_seg_max) or,1,0,0.0,2843
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,segment_range),1,0,0.0,2844
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p[""segment_range""])",1,0,0.0,2845
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"[profile.segment_type, net_p[""segment_type""]]):",1,0,0.0,2846
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK_TYPE_TRUNK in,1,0,0.0,2847
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"[profile.segment_type, net_p[""segment_type""]] or",1,0,0.0,2848
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self._make_policy_profile_dict,",1,0,0.0,2849
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"PolicyProfile,",1,0,0.0,2850
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def get_policy_profile_bindings(self, context, filters=None, fields=None):",1,0,0.0,2851
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type=c_const.POLICY),1,0,0.0,2852
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type == c_const.POLICY))),1,0,0.0,2853
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.ProfileBinding.,1,0,0.0,2854
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"tenant_id != c_const.TENANT_ID_NOT_SET,",1,0,0.0,2855
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter(sql.and_(n1kv_models_v2.ProfileBinding.,1,0,0.0,2856
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,profile_type=c_const.POLICY)),1,0,0.0,2857
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"filter_by(tenant_id=c_const.TENANT_ID_NOT_SET,",1,0,0.0,2858
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def _remove_all_fake_policy_profiles(self):,1,0,0.0,2859
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _get_policy_profile_by_name(self, name):",1,0,0.0,2860
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,filter_by(id=policy_profile_id).delete()),1,0,0.0,2861
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,(db_session.query(n1kv_models_v2.PolicyProfile).,1,0,0.0,2862
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _delete_policy_profile(self, policy_profile_id):",1,0,0.0,2863
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"delete_profile_binding(None, tenant_id, policy_profile_id)",1,0,0.0,2864
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def remove_policy_profile_tenant(self, policy_profile_id, tenant_id):",1,0,0.0,2865
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.POLICY),1,0,0.0,2866
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def add_policy_profile_tenant(self,",1,0,0.0,2867
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"update_policy_profile(context.session, id, p))",1,0,0.0,2868
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"delete_profile_binding(context.session, p[""remove_tenant""], id)",1,0,0.0,2869
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if context.is_admin and ""remove_tenant"" in p:",1,0,0.0,2870
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"context.session, id))",1,0,0.0,2871
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"p[""add_tenant""])",1,0,0.0,2872
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"id,",1,0,0.0,2873
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"self.add_policy_profile_tenant(context.session,",1,0,0.0,2874
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if context.is_admin and ""add_tenant"" in p:",1,0,0.0,2875
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Update a policy profile.,1,0,0.0,2876
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def update_policy_profile(self, context, id, policy_profile):",1,0,0.0,2877
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if (c_const.NETWORK_TYPE_MULTI_SEGMENT in,1,0,0.0,2878
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"net_p[""name""])",1,0,0.0,2879
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if net_p[""name""] == name:",1,0,0.0,2880
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not attributes.is_attr_set(multicast_ip_range):,1,0,0.0,2881
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment_type == c_const.NETWORK_TYPE_OVERLAY:,1,0,0.0,2882
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._validate_segment_range(net_p),1,0,0.0,2883
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if ""segment_range"" not in net_p:",1,0,0.0,2884
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if segment_type in [c_const.NETWORK_TYPE_VLAN,",1,0,0.0,2885
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if not attributes.is_attr_set(net_p.get(""sub_type"")):",1,0,0.0,2886
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK_TYPE_OVERLAY]:,1,0,0.0,2887
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if segment_type in [c_const.NETWORK_TYPE_TRUNK,",1,0,0.0,2888
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if net_p[""segment_range""]:",1,0,0.0,2889
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment_type == c_const.NETWORK_TYPE_TRUNK:,1,0,0.0,2890
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if ""physical_network"" not in net_p:",1,0,0.0,2891
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if segment_type == c_const.NETWORK_TYPE_VLAN:,1,0,0.0,2892
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""multi-segment or trunk"")",1,0,0.0,2893
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.NETWORK_TYPE_MULTI_SEGMENT]:,1,0,0.0,2894
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_const.NETWORK_TYPE_TRUNK,",1,0,0.0,2895
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,2896
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if segment_type not in [c_const.NETWORK_TYPE_VLAN,",1,0,0.0,2897
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if net_p[""segment_type""] == """":",1,0,0.0,2898
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _validate_network_profile(self, net_p):",1,0,0.0,2899
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if netaddr.IPAddress(min_ip) > netaddr.IPAddress(max_ip):,1,0,0.0,2900
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except netaddr.AddrFormatError:,1,0,0.0,2901
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if netaddr.IPAddress(ip) <= netaddr.IPAddress('224.0.0.255'):,1,0,0.0,2902
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not netaddr.IPAddress(ip).is_multicast():,1,0,0.0,2903
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""example range: 224.1.1.1-224.1.1.10"")",1,0,0.0,2904
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,except ValueError:,1,0,0.0,2905
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"['multicast_ip_range'].split('-', 1))",1,0,0.0,2906
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if net_p['sub_type'] != c_const.NETWORK_SUBTYPE_NATIVE_VXLAN:,1,0,0.0,2907
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,self._validate_multicast_ip_range(net_p),1,0,0.0,2908
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if profiles:,1,0,0.0,2909
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _validate_segment_range_uniqueness(self, context, net_p, id=None):",1,0,0.0,2910
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""max"": c_const.N1KV_VXLAN_MAX})",1,0,0.0,2911
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{""min"": c_const.N1KV_VXLAN_MIN,",1,0,0.0,2912
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""%(min)s-%(max)s"") %",1,0,0.0,2913
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,seg_max > c_const.N1KV_VXLAN_MAX):,1,0,0.0,2914
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,seg_min < c_const.N1KV_VXLAN_MIN or,1,0,0.0,2915
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if (seg_min > seg_max or,1,0,0.0,2916
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"c_const.NETWORK_TYPE_MULTI_SEGMENT,",1,0,0.0,2917
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"elif segment_type in [c_const.NETWORK_TYPE_OVERLAY,",1,0,0.0,2918
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,),1,0,0.0,2919
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"physical_network=net_p[""physical_network""]",1,0,0.0,2920
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"db_session=context.session,",1,0,0.0,2921
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""max"": p_const.MAX_VLAN_TAG - 1})",1,0,0.0,2922
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""nmax"": c_const.N1KV_VLAN_RESERVED_MAX + 1,",1,0,0.0,2923
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""nmin"": c_const.N1KV_VLAN_RESERVED_MIN - 1,",1,0,0.0,2924
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"{""min"": p_const.MIN_VLAN_TAG,",1,0,0.0,2925
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""%(min)s-%(nmin)s, %(nmax)s-%(max)s"") %",1,0,0.0,2926
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p_const.MAX_VLAN_TAG)))):,1,0,0.0,2927
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_max in range(c_const.N1KV_VLAN_RESERVED_MAX + 1,",1,0,0.0,2928
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,p_const.MAX_VLAN_TAG) and,1,0,0.0,2929
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"(seg_min in range(c_const.N1KV_VLAN_RESERVED_MAX + 1,",1,0,0.0,2930
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.N1KV_VLAN_RESERVED_MIN)) or,1,0,0.0,2931
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"seg_max in range(p_const.MIN_VLAN_TAG,",1,0,0.0,2932
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.N1KV_VLAN_RESERVED_MIN) and,1,0,0.0,2933
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"((seg_min in range(p_const.MIN_VLAN_TAG,",1,0,0.0,2934
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not ((seg_min <= seg_max) and,1,0,0.0,2935
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if a_set & b_set:,1,0,0.0,2936
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"in_(a_set & b_set),",1,0,0.0,2937
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network-segment will be added to the network-segment-pool corresponding,1,0,0.0,2938
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import config as c_conf,1,0,0.0,2939
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"For every Neutron objects, Cisco Nexus1000V Neutron Plugin",1,0,0.0,2940
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Cisco Nexus1000V VSM.,1,0,0.0,2941
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,This client implements functions to communicate with,1,0,0.0,2942
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Client for the Cisco Nexus1000V Neutron Plugin.,1,0,0.0,2943
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""",1,0,0.0,2944
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class Client(object):,1,0,0.0,2945
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"if isinstance(s, six.text_type):",1,0,0.0,2946
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,else:,1,0,0.0,2947
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if six.PY3:,1,0,0.0,2948
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def safe_b64_encode(s):,1,0,0.0,2949
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.extensions import n1kv,1,0,0.0,2950
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.db import network_db_v2,1,0,0.0,2951
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_exceptions as c_exc,1,0,0.0,2952
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,n1kv_models_v2.ProfileBinding.tenant_id ==,1,0,0.0,2953
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_credentials_v2 as c_cred,1,0,0.0,2954
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.plugins.cisco.common import cisco_constants as c_const,1,0,0.0,2955
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.extensions import providernet,1,0,0.0,2956
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.common import exceptions as n_exc,1,0,0.0,2957
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import six,1,0,0.0,2958
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import requests,1,0,0.0,2959
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_serialization import jsonutils,1,0,0.0,2960
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from oslo_log import log as logging,1,0,0.0,2961
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import eventlet,1,0,0.0,2962
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,import base64,1,0,0.0,2963
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    under the License.,1,0,0.0,2964
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    License for the specific language governing permissions and limitations,1,0,0.0,2965
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,creates a corresponding object in the controller (Cisco,1,0,0.0,2966
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Nexus1000V VSM).,1,0,0.0,2967
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,CONCEPTS:,1,0,0.0,2968
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Following are few concepts used in Nexus1000V VSM:,1,0,0.0,2969
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"a network-segment-pool, under this logical-network, will be created.",1,0,0.0,2970
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,WORK FLOW:,1,0,0.0,2971
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Event type of port_profile_delete: Return only deleted policy profiles.,1,0,0.0,2972
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy-profiles.,1,0,0.0,2973
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Event type of port_profile_update: Return only updates regarding,1,0,0.0,2974
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Event type of port_profile: Return all updates/create/deletes,1,0,0.0,2975
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Events are used to poll for a certain resource on Nexus1000V VSM.,1,0,0.0,2976
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Events correspond to commands that are logged on Nexus1000V VSM.,1,0,0.0,2977
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,events:,1,0,0.0,2978
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,policy-profile this vm-network refers to.,1,0,0.0,2979
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,It maintains a list of ports that uses the network-segment and,1,0,0.0,2980
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm-network refers to a network-segment and policy-profile.,1,0,0.0,2981
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,vm-network:,1,0,0.0,2982
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Each ip-pool represents a subnet on the Nexus1000V VSM.,1,0,0.0,2983
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,ip-pool:,1,0,0.0,2984
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Each VXLAN <--> VLAN combination can be thought of as a bridge domain.,1,0,0.0,2985
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,bridge-domain:,1,0,0.0,2986
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,A logical-network contains one or more network-segment-pools.,1,0,0.0,2987
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,logical-network:,1,0,0.0,2988
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,A network-segment-pool contains one or more network-segments.,1,0,0.0,2989
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network-segment-pool:,1,0,0.0,2990
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,Each network-segment represents a broadcast domain.,1,0,0.0,2991
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,network-segment:,1,0,0.0,2992
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,defined and applied to switch interfaces in a Nexus 1000V system.,1,0,0.0,2993
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,port-profiles:,1,0,0.0,2994
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,2995
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,2996
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,2997
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'validate': {'type:regex': attributes.UUID_PATTERN},",1,0,0.0,2998
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'network_profiles': {,1,0,0.0,2999
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,# Attribute Map,1,0,0.0,3000
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron import manager,1,0,0.0,3001
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api.v2 import base,1,0,0.0,3002
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,from neutron.api import extensions,1,0,0.0,3003
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    under the License.,1,0,0.0,3004
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    License for the specific language governing permissions and limitations,1,0,0.0,3005
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,3006
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,3007
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,3008
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    a copy of the License at,1,0,0.0,3009
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,3010
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,3011
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#,1,0,0.0,3012
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,3013
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"policy_profile[""id""],",1,0,0.0,3014
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"create_profile_binding(None,",1,0,0.0,3015
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,create_policy_profile(policy_profile),1,0,0.0,3016
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,if not self._policy_profile_exists(policy_profile_id):,1,0,0.0,3017
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,:param policy_profile_name: string representing the name for the,1,0,0.0,3018
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,tenant_id=None):,1,0,0.0,3019
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"policy_profile_name,",1,0,0.0,3020
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"def _add_policy_profile(self,",1,0,0.0,3021
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"delete(synchronize_session=""fetch""))",1,0,0.0,3022
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,c_const.TENANT_ID_NOT_SET)).,1,0,0.0,3023
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'id': {'allow_post': False, 'allow_put': False,",1,0,0.0,3024
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'multicast_ip_index': {'allow_post': False, 'allow_put': False,",1,0,0.0,3025
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    a copy of the License at,1,0,0.0,3026
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'convert_to': attributes.convert_none_to_empty_list},",1,0,0.0,3027
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#    not use this file except in compliance with the License. You may obtain,1,0,0.0,3028
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,3029
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,#,1,0,0.0,3030
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"# Copyright 2013 Cisco Systems, Inc.",1,0,0.0,3031
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,exts.append(ex),1,0,0.0,3032
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,controller),1,0,0.0,3033
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,RESOURCE_ATTRIBUTE_MAP.get(collection_name)),1,0,0.0,3034
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"plugin,",1,0,0.0,3035
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"resource_name,",1,0,0.0,3036
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"collection_name,",1,0,0.0,3037
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"for resource_name in ['network_profile', 'network_profile_binding']:",1,0,0.0,3038
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"""""""Returns Extended Resources.""""""",1,0,0.0,3039
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_resources(cls):,1,0,0.0,3040
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_updated(cls):,1,0,0.0,3041
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_description(cls):,1,0,0.0,3042
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_alias(cls):,1,0,0.0,3043
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,def get_name(cls):,1,0,0.0,3044
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,@classmethod,1,0,0.0,3045
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,class Network_profile(extensions.ExtensionDescriptor):,1,0,0.0,3046
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,},1,0,0.0,3047
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'profile_id': {'allow_post': False, 'allow_put': False,",1,0,0.0,3048
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'network_profile_bindings': {,1,0,0.0,3049
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"},",1,0,0.0,3050
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,"'convert_to': attributes.convert_none_to_empty_list,",1,0,0.0,3051
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,'remove_tenants': {,1,0,0.0,3052
f8ab9d4366c87724cba2e49e71dc72e2427d5a68,test_plugin.NeutronDbPluginV2TestCase):,1,0,0.0,3053
