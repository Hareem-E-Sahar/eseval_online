commit_id,line,line_level_label,count,line_score,row
c25367cfd3f771e0c2cff570f0253c95e473f33d,"throw new MessageHandlingException(message, ""Failed to handle message using "" + connectionId, e);",1,7,1.0,1
c25367cfd3f771e0c2cff570f0253c95e473f33d,"""Failed to handle message using "" + connectionId, ex);",0,5,0.7142857142857142,2
c25367cfd3f771e0c2cff570f0253c95e473f33d,protected final Object lifecycleMonitor = new Object();,1,5,0.7142857142857142,3
c25367cfd3f771e0c2cff570f0253c95e473f33d,protected final Object lifecycleMonitor = new Object(); // NOSONAR,0,5,0.7142857142857142,4
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (connectionId != null) {,1,4,0.5714285714285714,5
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (this.isSingleUse) { // close after replying,1,4,0.5714285714285714,6
c25367cfd3f771e0c2cff570f0253c95e473f33d,catch (Exception e) {,1,4,0.5714285714285714,7
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (connection != null) {,1,4,0.5714285714285714,8
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (this.isSingleUse) { // close after replying,0,4,0.5714285714285714,9
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (connection != null) {,0,4,0.5714285714285714,10
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (connectionId != null) {,0,4,0.5714285714285714,11
c25367cfd3f771e0c2cff570f0253c95e473f33d,public static final long DEFAULT_RETRY_INTERVAL = 60000;,0,4,0.5714285714285714,12
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (connection != null && this.isSingleUse,1,3,0.42857142857142855,13
c25367cfd3f771e0c2cff570f0253c95e473f33d,Object connectionId = message.getHeaders().get(IpHeaders.CONNECTION_ID);,1,3,0.42857142857142855,14
c25367cfd3f771e0c2cff570f0253c95e473f33d,"logger.error(""Unable to find outbound socket for "" + message);",1,3,0.42857142857142855,15
c25367cfd3f771e0c2cff570f0253c95e473f33d,// we own the connection,1,3,0.42857142857142855,16
c25367cfd3f771e0c2cff570f0253c95e473f33d,catch (MessageHandlingException e) {,1,3,0.42857142857142855,17
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (logger.isDebugEnabled()) {,1,3,0.42857142857142855,18
c25367cfd3f771e0c2cff570f0253c95e473f33d,"logger.debug(""Fail on first write attempt"", e);",1,3,0.42857142857142855,19
c25367cfd3f771e0c2cff570f0253c95e473f33d,* Copyright 2002-2021 the original author or authors.,0,3,0.42857142857142855,20
c25367cfd3f771e0c2cff570f0253c95e473f33d,&& this.clientConnectionFactory.getListener() == null) {,1,3,0.42857142857142855,21
c25367cfd3f771e0c2cff570f0253c95e473f33d,"// if there's no collaborating inbound adapter, close immediately, otherwise",1,3,0.42857142857142855,22
c25367cfd3f771e0c2cff570f0253c95e473f33d,// it will close after receiving the reply.,1,3,0.42857142857142855,23
c25367cfd3f771e0c2cff570f0253c95e473f33d,@Override // super class is protected,1,3,0.42857142857142855,24
c25367cfd3f771e0c2cff570f0253c95e473f33d,public void setTaskScheduler(TaskScheduler taskScheduler) {,1,3,0.42857142857142855,25
c25367cfd3f771e0c2cff570f0253c95e473f33d,"private final Map<String, TcpConnection> connections = new ConcurrentHashMap<String, TcpConnection>();",1,3,0.42857142857142855,26
c25367cfd3f771e0c2cff570f0253c95e473f33d,* Copyright 2002-2020 the original author or authors.,1,3,0.42857142857142855,27
c25367cfd3f771e0c2cff570f0253c95e473f33d,public void handleMessageInternal(final Message<?> message) throws,1,3,0.42857142857142855,28
c25367cfd3f771e0c2cff570f0253c95e473f33d,TcpConnection connection = null;,1,3,0.42857142857142855,29
c25367cfd3f771e0c2cff570f0253c95e473f33d,public void handleMessageInternal(final Message<?> message) {,0,3,0.42857142857142855,30
c25367cfd3f771e0c2cff570f0253c95e473f33d,catch (MessageHandlingException e) {,0,3,0.42857142857142855,31
c25367cfd3f771e0c2cff570f0253c95e473f33d,"private final Map<String, TcpConnection> connections = new ConcurrentHashMap<>();",0,3,0.42857142857142855,32
c25367cfd3f771e0c2cff570f0253c95e473f33d,* Copyright 2002-2018 the original author or authors.,1,3,0.42857142857142855,33
c25367cfd3f771e0c2cff570f0253c95e473f33d,"String connectionId = message.getHeaders().get(IpHeaders.CONNECTION_ID, String.class);",0,3,0.42857142857142855,34
c25367cfd3f771e0c2cff570f0253c95e473f33d,TcpConnection connection = null;,0,3,0.42857142857142855,35
c25367cfd3f771e0c2cff570f0253c95e473f33d,"logger.error(""Unable to find outbound socket for "" + message);",0,3,0.42857142857142855,36
c25367cfd3f771e0c2cff570f0253c95e473f33d,// we own the connection,0,3,0.42857142857142855,37
c25367cfd3f771e0c2cff570f0253c95e473f33d,catch (Exception ex) {,0,3,0.42857142857142855,38
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (logger.isDebugEnabled()) {,0,3,0.42857142857142855,39
c25367cfd3f771e0c2cff570f0253c95e473f33d,"logger.debug(""Fail on first write attempt"", e);",0,3,0.42857142857142855,40
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (connection != null && this.isSingleUse,0,3,0.42857142857142855,41
c25367cfd3f771e0c2cff570f0253c95e473f33d,&& this.clientConnectionFactory.getListener() == null) {,0,3,0.42857142857142855,42
c25367cfd3f771e0c2cff570f0253c95e473f33d,"// if there's no collaborating inbound adapter, close immediately, otherwise",0,3,0.42857142857142855,43
c25367cfd3f771e0c2cff570f0253c95e473f33d,// it will close after receiving the reply.,0,3,0.42857142857142855,44
c25367cfd3f771e0c2cff570f0253c95e473f33d,* Copyright 2002-2019 the original author or authors.,0,3,0.42857142857142855,45
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection = doWrite(message);,1,2,0.2857142857142857,46
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (e instanceof MessageHandlingException) {,1,2,0.2857142857142857,47
c25367cfd3f771e0c2cff570f0253c95e473f33d,"throw new MessageHandlingException(message, ""Error sending message"", e);",1,2,0.2857142857142857,48
c25367cfd3f771e0c2cff570f0253c95e473f33d,"MessageHandlingException messageHandlingException = new MessageHandlingException(message,",1,2,0.2857142857142857,49
c25367cfd3f771e0c2cff570f0253c95e473f33d,// retry - socket may have closed,1,2,0.2857142857142857,50
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (e.getCause() instanceof IOException) {,1,2,0.2857142857142857,51
c25367cfd3f771e0c2cff570f0253c95e473f33d,"// We don't own the connection, we are asynchronously replying",1,2,0.2857142857142857,52
c25367cfd3f771e0c2cff570f0253c95e473f33d,ClientModeConnectionManager manager = new ClientModeConnectionManager(,1,2,0.2857142857142857,53
c25367cfd3f771e0c2cff570f0253c95e473f33d,"Assert.state(this.getTaskScheduler() != null, ""Client mode requires a task scheduler"");",1,2,0.2857142857142857,54
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (wrapped.equals(connection)) {,0,2,0.2857142857142857,55
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection = wrapped;,0,2,0.2857142857142857,56
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection = wrapConnection(connection);,1,2,0.2857142857142857,57
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection = this.connections.get(connectionId);,1,2,0.2857142857142857,58
c25367cfd3f771e0c2cff570f0253c95e473f33d,"""For client-mode, connection factory must be type='client'"");",1,2,0.2857142857142857,59
c25367cfd3f771e0c2cff570f0253c95e473f33d,"Assert.state(getTaskScheduler() != null, ""Client mode requires a task scheduler"");",0,2,0.2857142857142857,60
c25367cfd3f771e0c2cff570f0253c95e473f33d,Throwable cause) {,0,2,0.2857142857142857,61
c25367cfd3f771e0c2cff570f0253c95e473f33d,"""For client-mode, connection factory must be type='client'"");",0,2,0.2857142857142857,62
c25367cfd3f771e0c2cff570f0253c95e473f33d,* A default retry interval for the {@link ClientModeConnectionManager} rescheduling.,0,2,0.2857142857142857,63
c25367cfd3f771e0c2cff570f0253c95e473f33d,TcpConnection connection;,0,2,0.2857142857142857,64
c25367cfd3f771e0c2cff570f0253c95e473f33d,private void handleMessageAsServer(Message<?> message) {,0,2,0.2857142857142857,65
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection = this.connections.get(connectionId);,0,2,0.2857142857142857,66
c25367cfd3f771e0c2cff570f0253c95e473f33d,"// We don't own the connection, we are asynchronously replying",0,2,0.2857142857142857,67
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (cause instanceof MessageHandlingException) {,0,2,0.2857142857142857,68
c25367cfd3f771e0c2cff570f0253c95e473f33d,private void handleMessageAsClient(Message<?> message) {,0,2,0.2857142857142857,69
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection = doWrite(message);,0,2,0.2857142857142857,70
c25367cfd3f771e0c2cff570f0253c95e473f33d,// retry - socket may have closed,0,2,0.2857142857142857,71
c25367cfd3f771e0c2cff570f0253c95e473f33d,if (e.getCause() instanceof IOException) {,0,2,0.2857142857142857,72
c25367cfd3f771e0c2cff570f0253c95e473f33d,"Assert.notNull(this.clientConnectionFactory, ""For client-mode, connection factory must be type='client'"");",0,2,0.2857142857142857,73
c25367cfd3f771e0c2cff570f0253c95e473f33d,},1,1,0.14285714285714285,74
c25367cfd3f771e0c2cff570f0253c95e473f33d,"this.scheduledFuture = getTaskScheduler().scheduleAtFixedRate(manager, this.retryInterval);",0,1,0.14285714285714285,75
c25367cfd3f771e0c2cff570f0253c95e473f33d,import org.springframework.scheduling.TaskScheduler;,1,1,0.14285714285714285,76
c25367cfd3f771e0c2cff570f0253c95e473f33d,private volatile boolean isClientMode;,1,1,0.14285714285714285,77
c25367cfd3f771e0c2cff570f0253c95e473f33d,private volatile boolean isSingleUse;,1,1,0.14285714285714285,78
c25367cfd3f771e0c2cff570f0253c95e473f33d,private volatile long retryInterval = 60000;,1,1,0.14285714285714285,79
c25367cfd3f771e0c2cff570f0253c95e473f33d,try {,1,1,0.14285714285714285,80
c25367cfd3f771e0c2cff570f0253c95e473f33d,TcpConnectionSupport wrapped = wrapConnection(connection);,0,1,0.14285714285714285,81
c25367cfd3f771e0c2cff570f0253c95e473f33d,"logger.error(""Error sending message"", e);",1,1,0.14285714285714285,82
c25367cfd3f771e0c2cff570f0253c95e473f33d,else {,1,1,0.14285714285714285,83
c25367cfd3f771e0c2cff570f0253c95e473f33d,finally {,1,1,0.14285714285714285,84
c25367cfd3f771e0c2cff570f0253c95e473f33d,"new TcpConnectionFailedCorrelationEvent(this, connectionId, messageHandlingException));",1,1,0.14285714285714285,85
c25367cfd3f771e0c2cff570f0253c95e473f33d,"this.scheduledFuture = this.getTaskScheduler().scheduleAtFixedRate(manager, this.retryInterval);",1,1,0.14285714285714285,86
c25367cfd3f771e0c2cff570f0253c95e473f33d,ClientModeConnectionManager manager =,0,1,0.14285714285714285,87
c25367cfd3f771e0c2cff570f0253c95e473f33d,},0,1,0.14285714285714285,88
c25367cfd3f771e0c2cff570f0253c95e473f33d,new ClientModeConnectionManager(this.clientConnectionFactory);,0,1,0.14285714285714285,89
c25367cfd3f771e0c2cff570f0253c95e473f33d,MessageHandlingException {,1,1,0.14285714285714285,90
c25367cfd3f771e0c2cff570f0253c95e473f33d,"new TcpConnectionFailedCorrelationEvent(this, connectionId, messageHandlingException));",0,1,0.14285714285714285,91
c25367cfd3f771e0c2cff570f0253c95e473f33d,private long retryInterval = DEFAULT_RETRY_INTERVAL;,0,1,0.14285714285714285,92
c25367cfd3f771e0c2cff570f0253c95e473f33d,"throw new MessageHandlingException(message, description, cause);",0,1,0.14285714285714285,93
c25367cfd3f771e0c2cff570f0253c95e473f33d,*,0,1,0.14285714285714285,94
c25367cfd3f771e0c2cff570f0253c95e473f33d,/**,0,1,0.14285714285714285,95
c25367cfd3f771e0c2cff570f0253c95e473f33d,*/,0,1,0.14285714285714285,96
c25367cfd3f771e0c2cff570f0253c95e473f33d,private boolean isClientMode;,0,1,0.14285714285714285,97
c25367cfd3f771e0c2cff570f0253c95e473f33d,private boolean isSingleUse;,0,1,0.14285714285714285,98
c25367cfd3f771e0c2cff570f0253c95e473f33d,* @author Artem Bilan,0,1,0.14285714285714285,99
c25367cfd3f771e0c2cff570f0253c95e473f33d,},0,1,0.14285714285714285,100
c25367cfd3f771e0c2cff570f0253c95e473f33d,"private MessageHandlingException wrapToMessageHandlingExceptionIfNecessary(Message<?> message, String description,",0,1,0.14285714285714285,101
c25367cfd3f771e0c2cff570f0253c95e473f33d,try {,0,1,0.14285714285714285,102
c25367cfd3f771e0c2cff570f0253c95e473f33d,finally {,0,1,0.14285714285714285,103
c25367cfd3f771e0c2cff570f0253c95e473f33d,MessageHandlingException messageHandlingException =,0,1,0.14285714285714285,104
c25367cfd3f771e0c2cff570f0253c95e473f33d,"new MessageHandlingException(message, ""Unable to find outbound socket"");",0,1,0.14285714285714285,105
c25367cfd3f771e0c2cff570f0253c95e473f33d,else {,0,1,0.14285714285714285,106
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection.send(message);,1,0,0.0,107
c25367cfd3f771e0c2cff570f0253c95e473f33d,throw (MessageHandlingException) e;,1,0,0.0,108
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection.close();,1,0,0.0,109
c25367cfd3f771e0c2cff570f0253c95e473f33d,"""Unable to find outbound socket"");",1,0,0.0,110
c25367cfd3f771e0c2cff570f0253c95e473f33d,"publishNoConnectionEvent(messageHandlingException, (String) connectionId);",1,0,0.0,111
c25367cfd3f771e0c2cff570f0253c95e473f33d,throw e;,1,0,0.0,112
c25367cfd3f771e0c2cff570f0253c95e473f33d,throw messageHandlingException;,1,0,0.0,113
c25367cfd3f771e0c2cff570f0253c95e473f33d,return;,1,0,0.0,114
c25367cfd3f771e0c2cff570f0253c95e473f33d,"Assert.notNull(this.clientConnectionFactory,",1,0,0.0,115
c25367cfd3f771e0c2cff570f0253c95e473f33d,this.clientConnectionFactory);,1,0,0.0,116
c25367cfd3f771e0c2cff570f0253c95e473f33d,super.setTaskScheduler(taskScheduler);,1,0,0.0,117
c25367cfd3f771e0c2cff570f0253c95e473f33d,private volatile AbstractConnectionFactory clientConnectionFactory;,1,0,0.0,118
c25367cfd3f771e0c2cff570f0253c95e473f33d,private volatile AbstractConnectionFactory serverConnectionFactory;,1,0,0.0,119
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection.close();,0,0,0.0,120
c25367cfd3f771e0c2cff570f0253c95e473f33d,"Assert.notNull(this.clientConnectionFactory,",0,0,0.0,121
c25367cfd3f771e0c2cff570f0253c95e473f33d,"throw wrapToMessageHandlingExceptionIfNecessary(message,",0,0,0.0,122
c25367cfd3f771e0c2cff570f0253c95e473f33d,throw e;,0,0,0.0,123
c25367cfd3f771e0c2cff570f0253c95e473f33d,throw (MessageHandlingException) cause;,0,0,0.0,124
c25367cfd3f771e0c2cff570f0253c95e473f33d,throw messageHandlingException;,0,0,0.0,125
c25367cfd3f771e0c2cff570f0253c95e473f33d,"publishNoConnectionEvent(messageHandlingException, connectionId);",0,0,0.0,126
c25367cfd3f771e0c2cff570f0253c95e473f33d,"throw wrapToMessageHandlingExceptionIfNecessary(message, ""Error sending message"", ex);",0,0,0.0,127
c25367cfd3f771e0c2cff570f0253c95e473f33d,"logger.error(""Error sending message"", ex);",0,0,0.0,128
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection.send(message);,0,0,0.0,129
c25367cfd3f771e0c2cff570f0253c95e473f33d,handleMessageAsClient(message);,0,0,0.0,130
c25367cfd3f771e0c2cff570f0253c95e473f33d,handleMessageAsServer(message);,0,0,0.0,131
c25367cfd3f771e0c2cff570f0253c95e473f33d,private AbstractConnectionFactory serverConnectionFactory;,0,0,0.0,132
c25367cfd3f771e0c2cff570f0253c95e473f33d,private AbstractConnectionFactory clientConnectionFactory;,0,0,0.0,133
c25367cfd3f771e0c2cff570f0253c95e473f33d,connection.setSenders(getSenders());,0,0,0.0,134
