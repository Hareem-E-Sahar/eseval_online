commit_id,line,line_level_label,count,line_score,row
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"overwrite=overwrite,",1,1,1.0,1
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"roles = state.request.headers.get('X-Roles', '').split(',')",1,1,1.0,2
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,roles = [r.strip() for r in roles],1,1,1.0,3
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,roles=roles),1,1,1.0,4
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"user_id = state.request.headers.get('X-User', user_id)",1,0,0.0,5
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"super(ContextBase, self).__init__(auth_token=auth_token,",1,0,0.0,6
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"user=user_id, tenant=tenant_id,",1,0,0.0,7
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"is_admin=is_admin,",1,0,0.0,8
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"request_id=request_id,",1,0,0.0,9
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,user_id = state.request.headers.get('X-User-Id'),1,0,0.0,10
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,tenant_id = state.request.headers.get('X-Project-Id'),1,0,0.0,11
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"user_name=None, overwrite=True, auth_token=None,",1,0,0.0,12
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,auth_token = state.request.headers.get('X-Auth-Token'),1,0,0.0,13
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,creds = {'roles': roles},1,0,0.0,14
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"ctx = context.Context(user_id, tenant_id=tenant_id,",1,0,0.0,15
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"roles=creds['roles'],",1,0,0.0,16
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"user_name=user_name, tenant_name=tenant_name,",1,0,0.0,17
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,is_advsvc=None):,1,0,0.0,18
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"def __init__(self, user_id, tenant_id, is_admin=None, roles=None,",1,0,0.0,19
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"timestamp=None, request_id=None, tenant_name=None,",1,0,0.0,20
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,request_id=req_id),0,0,0.0,21
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"tenant_name=tenant_name,",0,0,0.0,22
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"user_name=user_name,",0,0,0.0,23
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"ctx = context.Context.from_environ(state.request.environ,",0,0,0.0,24
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"super(ContextBase, self).__init__(is_admin=is_admin, **kwargs)",0,0,0.0,25
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"kwargs.setdefault('tenant', tenant_id)",0,0,0.0,26
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"kwargs.setdefault('user', user_id)",0,0,0.0,27
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,# that pass arguments positionally.,0,0,0.0,28
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,# NOTE(jamielennox): We maintain these arguments in order for tests,0,0,0.0,29
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"is_advsvc=None, **kwargs):",0,0,0.0,30
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"timestamp=None, tenant_name=None, user_name=None,",0,0,0.0,31
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"def __init__(self, user_id=None, tenant_id=None, is_admin=None,",0,0,0.0,32
2cb2f1e9224f5ec21d6737986a7f96ef1f076e44,"request_id=req_id, auth_token=auth_token)",1,0,0.0,33
