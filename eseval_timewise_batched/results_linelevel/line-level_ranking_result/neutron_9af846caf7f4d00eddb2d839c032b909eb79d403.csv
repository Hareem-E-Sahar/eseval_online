commit_id,line,line_level_label,count,line_score,row
9af846caf7f4d00eddb2d839c032b909eb79d403,"help=_(""Allow overlapping IP."")),",1,3,1.0,1
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.BoolOpt('use_namespaces', default=True,",1,2,0.6666666666666666,2
9af846caf7f4d00eddb2d839c032b909eb79d403,"help=_(""Allow overlapping IP. This option is deprecated and """,1,2,0.6666666666666666,3
9af846caf7f4d00eddb2d839c032b909eb79d403,"help=_(""If namespaces is disabled, the l3 agent can only """,1,2,0.6666666666666666,4
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('use_namespaces', True)",1,2,0.6666666666666666,5
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('use_namespaces', True)",1,2,0.6666666666666666,6
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('use_namespaces', True)",1,2,0.6666666666666666,7
9af846caf7f4d00eddb2d839c032b909eb79d403,"help=_(""Allow overlapping IP. This option is deprecated and """,0,2,0.6666666666666666,8
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('use_namespaces', False)",1,1,0.3333333333333333,9
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('enable_metadata_network', True)",1,1,0.3333333333333333,10
9af846caf7f4d00eddb2d839c032b909eb79d403,"agent = l3_agent.L3NATAgent(HOSTNAME, self.conf)",1,1,0.3333333333333333,11
9af846caf7f4d00eddb2d839c032b909eb79d403,"# No namespaces, shouldn't set default route.",1,1,0.3333333333333333,12
9af846caf7f4d00eddb2d839c032b909eb79d403,sys_argv.return_value = [,1,1,0.3333333333333333,13
9af846caf7f4d00eddb2d839c032b909eb79d403,"agent = l3_agent.L3NATAgent(HOSTNAME, self.conf)",1,1,0.3333333333333333,14
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('use_namespaces', False)",1,1,0.3333333333333333,15
9af846caf7f4d00eddb2d839c032b909eb79d403,sys_argv.return_value = [,0,1,0.3333333333333333,16
9af846caf7f4d00eddb2d839c032b909eb79d403,"# No namespaces, shouldn't set default route.",1,1,0.3333333333333333,17
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('use_namespaces', False)",1,1,0.3333333333333333,18
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('enable_metadata_network', True)",1,1,0.3333333333333333,19
9af846caf7f4d00eddb2d839c032b909eb79d403,],1,1,0.3333333333333333,20
9af846caf7f4d00eddb2d839c032b909eb79d403,self.conf.enable_isolated_metadata = True,1,1,0.3333333333333333,21
9af846caf7f4d00eddb2d839c032b909eb79d403,#    not use this file except in compliance with the License. You may obtain,1,1,0.3333333333333333,22
9af846caf7f4d00eddb2d839c032b909eb79d403,USE_NAMESPACES_OPTS = [,1,1,0.3333333333333333,23
9af846caf7f4d00eddb2d839c032b909eb79d403,from neutron.common import config as base_config,1,1,0.3333333333333333,24
9af846caf7f4d00eddb2d839c032b909eb79d403,import neutron.plugins.midonet.agent.midonet_driver as driver,1,1,0.3333333333333333,25
9af846caf7f4d00eddb2d839c032b909eb79d403,from neutron.agent.common import config,1,1,0.3333333333333333,26
9af846caf7f4d00eddb2d839c032b909eb79d403,self.conf.use_namespaces = True,1,1,0.3333333333333333,27
9af846caf7f4d00eddb2d839c032b909eb79d403,driver = meta_interface._get_driver_by_network_id('test'),1,1,0.3333333333333333,28
9af846caf7f4d00eddb2d839c032b909eb79d403,"help=_(""If non-empty, the l3 agent can only configure a router """,0,1,0.3333333333333333,29
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=False,",1,0,0.0,30
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(id='12345678-1234-5678-1234567890ab',",1,0,0.0,31
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(id='12345678-dddd-dddd-1234567890ab',",1,0,0.0,32
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_meta_port, fake_dist_port]))",1,0,0.0,33
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_meta_dvr_network = dhcp.NetModel(True, fake_meta_network.copy())",1,0,0.0,34
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_meta_port])),1,0,0.0,35
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_meta_subnet],",1,0,0.0,36
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=True,",1,0,0.0,37
9af846caf7f4d00eddb2d839c032b909eb79d403,"tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa',",1,0,0.0,38
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network = dhcp.NetModel(True, dict(id=FAKE_NETWORK_UUID,",1,0,0.0,39
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(",1,0,0.0,40
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network_ipv6_ipv4 = dhcp.NetModel(True, dict(",1,0,0.0,41
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network_ipv6 = dhcp.NetModel(True, dict(",1,0,0.0,42
9af846caf7f4d00eddb2d839c032b909eb79d403,self._configure_metadata_proxy(),0,0,0.0,43
9af846caf7f4d00eddb2d839c032b909eb79d403,tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa')),0,0,0.0,44
9af846caf7f4d00eddb2d839c032b909eb79d403,"dict(id=FAKE_NETWORK_UUID,",0,0,0.0,45
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_port1, fake_port2]))",0,0,0.0,46
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_port1])),0,0,0.0,47
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[])),1,0,0.0,48
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[],",1,0,0.0,49
9af846caf7f4d00eddb2d839c032b909eb79d403,dh._set_default_route = mock.Mock(),1,0,0.0,50
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(True, dict(id='net-id',",1,0,0.0,51
9af846caf7f4d00eddb2d839c032b909eb79d403,"new_state = dhcp.NetModel(True, dict(id=fake_network.id,",1,0,0.0,52
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_ns_name(self):,1,0,0.0,53
9af846caf7f4d00eddb2d839c032b909eb79d403,class TestNetModel(base.BaseTestCase):,1,0,0.0,54
9af846caf7f4d00eddb2d839c032b909eb79d403,"dh.update(FakeV4Network(), 'ns-12345678-12')",1,0,0.0,55
9af846caf7f4d00eddb2d839c032b909eb79d403,# For completeness,1,0,0.0,56
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertFalse(dh._set_default_route.called),1,0,0.0,57
9af846caf7f4d00eddb2d839c032b909eb79d403,"dh.update(FakeV4Network(), 'tap12345678-12')",1,0,0.0,58
9af846caf7f4d00eddb2d839c032b909eb79d403,"proxy = dhcp_agent.DhcpPluginApi('foo', ctxt, host='foo')",0,0,0.0,59
9af846caf7f4d00eddb2d839c032b909eb79d403,"dh = dhcp.DeviceManager(cfg.CONF, None)",1,0,0.0,60
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('enable_metadata_network', False)",1,0,0.0,61
9af846caf7f4d00eddb2d839c032b909eb79d403,tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa')),1,0,0.0,62
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(id=FAKE_NETWORK_UUID,",1,0,0.0,63
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(cfg.CONF),1,0,0.0,64
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_port1, fake_port2]))",1,0,0.0,65
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_port1])),1,0,0.0,66
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_subnet1],",1,0,0.0,67
9af846caf7f4d00eddb2d839c032b909eb79d403,"proxy = dhcp_agent.DhcpPluginApi('foo', ctxt, None, host='foo')",1,0,0.0,68
9af846caf7f4d00eddb2d839c032b909eb79d403,"prev_state = dhcp.NetModel(True, dict(id=fake_network.id,",1,0,0.0,69
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_subnet1],",0,0,0.0,70
9af846caf7f4d00eddb2d839c032b909eb79d403,"dict(id='12345678-1234-5678-1234567890ab',",0,0,0.0,71
9af846caf7f4d00eddb2d839c032b909eb79d403,"prev_state = dhcp.NetModel(dict(id=fake_network.id,",0,0,0.0,72
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertRaises(SystemExit, l3_agent.L3NATAgent,",1,0,0.0,73
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('use_namespaces', False)",1,0,0.0,74
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('router_id', 'fake_id')",1,0,0.0,75
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_config.register_use_namespaces_opts_helper(self.conf),1,0,0.0,76
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(None, {'id': 'foo'})",1,0,0.0,77
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_ns_name_none_namespace(self):,1,0,0.0,78
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertIsNone(network.namespace),1,0,0.0,79
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(False, {'id': 'foo'})",1,0,0.0,80
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_ns_name_false_namespace(self):,1,0,0.0,81
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertEqual(network.namespace, 'qdhcp-foo')",1,0,0.0,82
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(True, {'id': 'foo'})",1,0,0.0,83
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_ns_name(self):,1,0,0.0,84
9af846caf7f4d00eddb2d839c032b909eb79d403,class TestNetModel(base.BaseTestCase):,1,0,0.0,85
9af846caf7f4d00eddb2d839c032b909eb79d403,"dh.update(FakeV4Network(), 'ns-12345678-12')",1,0,0.0,86
9af846caf7f4d00eddb2d839c032b909eb79d403,# For completeness,1,0,0.0,87
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertFalse(dh._set_default_route.called),1,0,0.0,88
9af846caf7f4d00eddb2d839c032b909eb79d403,"dh.update(FakeV4Network(), 'tap12345678-12')",1,0,0.0,89
9af846caf7f4d00eddb2d839c032b909eb79d403,dh._set_default_route = mock.Mock(),1,0,0.0,90
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('router_id', '')",1,0,0.0,91
9af846caf7f4d00eddb2d839c032b909eb79d403,"HOSTNAME, self.conf)",1,0,0.0,92
9af846caf7f4d00eddb2d839c032b909eb79d403,"new_state = dhcp.NetModel(dict(id=fake_network.id,",0,0,0.0,93
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertEqual('1234', agent.conf.router_id)",1,0,0.0,94
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(dict(id='net-id',",0,0,0.0,95
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[])),0,0,0.0,96
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[],",0,0,0.0,97
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=False,",0,0,0.0,98
9af846caf7f4d00eddb2d839c032b909eb79d403,"dict(id='12345678-dddd-dddd-1234567890ab',",0,0,0.0,99
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_meta_port, fake_dist_port]))",0,0,0.0,100
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_meta_dvr_network = dhcp.NetModel(fake_meta_network.copy()),0,0,0.0,101
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_meta_port])),0,0,0.0,102
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_meta_subnet],",0,0,0.0,103
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=True,",0,0,0.0,104
9af846caf7f4d00eddb2d839c032b909eb79d403,"tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa',",0,0,0.0,105
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertEqual(network.namespace, 'qdhcp-foo')",1,0,0.0,106
9af846caf7f4d00eddb2d839c032b909eb79d403,dict(,0,0,0.0,107
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_network_ipv6_ipv4 = dhcp.NetModel(dict(,0,0,0.0,108
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_network_ipv6 = dhcp.NetModel(dict(,0,0,0.0,109
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network = dhcp.NetModel(dict(id=FAKE_NETWORK_UUID,",0,0,0.0,110
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertFalse(agent.namespaces_manager._clean_stale),1,0,0.0,111
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(True, {'id': 'foo'})",1,0,0.0,112
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(cfg.CONF),1,0,0.0,113
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_ns_name_false_namespace(self):,1,0,0.0,114
9af846caf7f4d00eddb2d839c032b909eb79d403,"mock.call().report_state(mock.ANY, mock.ANY,",0,0,0.0,115
9af846caf7f4d00eddb2d839c032b909eb79d403,with mock.patch(state_rpc_str) as state_rpc:,1,0,0.0,116
9af846caf7f4d00eddb2d839c032b909eb79d403,autospec=True) as mock_periodic_resync:,1,0,0.0,117
9af846caf7f4d00eddb2d839c032b909eb79d403,"'periodic_resync',",1,0,0.0,118
9af846caf7f4d00eddb2d839c032b909eb79d403,"with mock.patch.object(dhcp_agent.DhcpAgentWithStateReport,",1,0,0.0,119
9af846caf7f4d00eddb2d839c032b909eb79d403,autospec=True) as mock_sync_state:,1,0,0.0,120
9af846caf7f4d00eddb2d839c032b909eb79d403,"'sync_state',",1,0,0.0,121
9af846caf7f4d00eddb2d839c032b909eb79d403,"['periodic_resync', 'start_ready_ports_loop']])",0,0,0.0,122
9af846caf7f4d00eddb2d839c032b909eb79d403,mock.ANY)]),0,0,0.0,123
9af846caf7f4d00eddb2d839c032b909eb79d403,"[mock.call(mock.ANY),",0,0,0.0,124
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(False, {'id': 'foo'})",1,0,0.0,125
9af846caf7f4d00eddb2d839c032b909eb79d403,state_rpc.assert_has_calls(,0,0,0.0,126
9af846caf7f4d00eddb2d839c032b909eb79d403,mock_start_ready.assert_called_once_with(agent_mgr),0,0,0.0,127
9af846caf7f4d00eddb2d839c032b909eb79d403,mock_periodic_resync.assert_called_once_with(agent_mgr),0,0,0.0,128
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_mgr.after_start(),0,0,0.0,129
9af846caf7f4d00eddb2d839c032b909eb79d403,eventlet.greenthread.sleep(1),0,0,0.0,130
9af846caf7f4d00eddb2d839c032b909eb79d403,'testhost'),0,0,0.0,131
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_mgr = dhcp_agent.DhcpAgentWithStateReport(,0,0,0.0,132
9af846caf7f4d00eddb2d839c032b909eb79d403,common_config.init(sys.argv[1:]),0,0,0.0,133
9af846caf7f4d00eddb2d839c032b909eb79d403,"with mock.patch.object(sys, 'argv') as sys_argv:",1,0,0.0,134
9af846caf7f4d00eddb2d839c032b909eb79d403,"'dhcp', '--config-file',",1,0,0.0,135
9af846caf7f4d00eddb2d839c032b909eb79d403,base.etcdir('neutron.conf')],1,0,0.0,136
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(dhcp_config.DHCP_AGENT_OPTS),1,0,0.0,137
9af846caf7f4d00eddb2d839c032b909eb79d403,'start_ready_ports_loop']]),1,0,0.0,138
9af846caf7f4d00eddb2d839c032b909eb79d403,"['sync_state', 'periodic_resync',",1,0,0.0,139
9af846caf7f4d00eddb2d839c032b909eb79d403,mock.ANY)]),1,0,0.0,140
9af846caf7f4d00eddb2d839c032b909eb79d403,"mock.call().report_state(mock.ANY, mock.ANY,",1,0,0.0,141
9af846caf7f4d00eddb2d839c032b909eb79d403,"[mock.call(mock.ANY),",1,0,0.0,142
9af846caf7f4d00eddb2d839c032b909eb79d403,state_rpc.assert_has_calls(,1,0,0.0,143
9af846caf7f4d00eddb2d839c032b909eb79d403,mock_start_ready.assert_called_once_with(agent_mgr),1,0,0.0,144
9af846caf7f4d00eddb2d839c032b909eb79d403,mock_periodic_resync.assert_called_once_with(agent_mgr),1,0,0.0,145
9af846caf7f4d00eddb2d839c032b909eb79d403,mock_sync_state.assert_called_once_with(agent_mgr),1,0,0.0,146
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_mgr.after_start(),1,0,0.0,147
9af846caf7f4d00eddb2d839c032b909eb79d403,eventlet.greenthread.sleep(1),1,0,0.0,148
9af846caf7f4d00eddb2d839c032b909eb79d403,'testhost'),1,0,0.0,149
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_mgr = dhcp_agent.DhcpAgentWithStateReport(,1,0,0.0,150
9af846caf7f4d00eddb2d839c032b909eb79d403,common_config.init(sys.argv[1:]),1,0,0.0,151
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(interface.OPTS),1,0,0.0,152
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_agent_state_opts_helper(cfg.CONF),1,0,0.0,153
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_interface_driver_opts_helper(cfg.CONF),1,0,0.0,154
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(interface.OPTS),0,0,0.0,155
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_agent_state_opts_helper(cfg.CONF),0,0,0.0,156
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_interface_driver_opts_helper(cfg.CONF),0,0,0.0,157
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.client.assert_has_calls([mock.call.show_port('fake_port'),",1,0,0.0,158
9af846caf7f4d00eddb2d839c032b909eb79d403,parsed_args = cmd_parser.parse_args(args),1,0,0.0,159
9af846caf7f4d00eddb2d839c032b909eb79d403,args = ['fake_port'],1,0,0.0,160
9af846caf7f4d00eddb2d839c032b909eb79d403,cmd_parser = cmd.get_parser('delete_probe'),1,0,0.0,161
9af846caf7f4d00eddb2d839c032b909eb79d403,"cmd = commands.DeleteProbe(self.app, None)",1,0,0.0,162
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_delete_probe_without_namespace(self):,1,0,0.0,163
9af846caf7f4d00eddb2d839c032b909eb79d403,"cfg.CONF.set_override('enable_metadata_network', False)",1,0,0.0,164
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertFalse(agent.namespaces_manager._clean_stale),1,0,0.0,165
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertEqual('1234', agent.conf.router_id)",1,0,0.0,166
9af846caf7f4d00eddb2d839c032b909eb79d403,"HOSTNAME, self.conf)",1,0,0.0,167
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertRaises(SystemExit, l3_agent.L3NATAgent,",1,0,0.0,168
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('router_id', '')",1,0,0.0,169
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('use_namespaces', False)",1,0,0.0,170
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('router_id', 'fake_id')",1,0,0.0,171
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_config.register_use_namespaces_opts_helper(self.conf),1,0,0.0,172
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(None, {'id': 'foo'})",1,0,0.0,173
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_ns_name_none_namespace(self):,1,0,0.0,174
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertIsNone(network.namespace),1,0,0.0,175
9af846caf7f4d00eddb2d839c032b909eb79d403,cmd.run(parsed_args),1,0,0.0,176
9af846caf7f4d00eddb2d839c032b909eb79d403,"mock.call.show_network('fake_net'),",1,0,0.0,177
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(dhcp_config.DHCP_AGENT_OPTS),0,0,0.0,178
9af846caf7f4d00eddb2d839c032b909eb79d403,"mock.call.show_subnet('fake_subnet'),",1,0,0.0,179
9af846caf7f4d00eddb2d839c032b909eb79d403,base.etcdir('neutron.conf')],0,0,0.0,180
9af846caf7f4d00eddb2d839c032b909eb79d403,"'dhcp', '--config-file',",0,0,0.0,181
9af846caf7f4d00eddb2d839c032b909eb79d403,"with mock.patch.object(sys, 'argv') as sys_argv:",0,0,0.0,182
9af846caf7f4d00eddb2d839c032b909eb79d403,with mock.patch(state_rpc_str) as state_rpc:,0,0,0.0,183
9af846caf7f4d00eddb2d839c032b909eb79d403,autospec=True) as mock_periodic_resync:,0,0,0.0,184
9af846caf7f4d00eddb2d839c032b909eb79d403,"'periodic_resync',",0,0,0.0,185
9af846caf7f4d00eddb2d839c032b909eb79d403,self.client.assert_has_calls([mock.call.show_port('fake_port')]),1,0,0.0,186
9af846caf7f4d00eddb2d839c032b909eb79d403,exe.assert_has_calls([mock.call.execute(mock.ANY)]),1,0,0.0,187
9af846caf7f4d00eddb2d839c032b909eb79d403,with mock.patch('neutron.agent.linux.utils.execute') as exe:,1,0,0.0,188
9af846caf7f4d00eddb2d839c032b909eb79d403,"args = ['fake_port', 'fake_command']",1,0,0.0,189
9af846caf7f4d00eddb2d839c032b909eb79d403,cmd_parser = cmd.get_parser('exec_command'),1,0,0.0,190
9af846caf7f4d00eddb2d839c032b909eb79d403,"cmd = commands.ExecProbe(self.app, None)",1,0,0.0,191
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_exec_command_without_namespace(self):,1,0,0.0,192
9af846caf7f4d00eddb2d839c032b909eb79d403,bridge=None)]),1,0,0.0,193
9af846caf7f4d00eddb2d839c032b909eb79d403,"mock.call.unplug('tap12345678-12',",1,0,0.0,194
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.driver.assert_has_calls([mock.call.get_device_name(mock.ANY),",1,0,0.0,195
9af846caf7f4d00eddb2d839c032b909eb79d403,mock.call.delete_port('fake_port')]),1,0,0.0,196
9af846caf7f4d00eddb2d839c032b909eb79d403,"dh = dhcp.DeviceManager(cfg.CONF, None)",1,0,0.0,197
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(id='12345678-dddd-dddd-1234567890ab',",1,0,0.0,198
9af846caf7f4d00eddb2d839c032b909eb79d403,tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa')),1,0,0.0,199
9af846caf7f4d00eddb2d839c032b909eb79d403,self.client_inst.show_network.return_value = fake_network,1,0,0.0,200
9af846caf7f4d00eddb2d839c032b909eb79d403,"'fake1:neutron.agent.linux.interface.OVSInterfaceDriver,'",1,0,0.0,201
9af846caf7f4d00eddb2d839c032b909eb79d403,"'meta_flavor_driver_mappings',",1,0,0.0,202
9af846caf7f4d00eddb2d839c032b909eb79d403,self.conf.set_override(,1,0,0.0,203
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('admin_tenant_name', 'service')",1,0,0.0,204
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('admin_password', 'password')",1,0,0.0,205
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('admin_user', 'neutron')",1,0,0.0,206
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('auth_region', 'RegionOne')",1,0,0.0,207
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('auth_url', 'http://localhost:35357/v2.0')",1,0,0.0,208
9af846caf7f4d00eddb2d839c032b909eb79d403,self.client_inst.list_ports.return_value = fake_port,1,0,0.0,209
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(id=FAKE_NETWORK_UUID,",1,0,0.0,210
9af846caf7f4d00eddb2d839c032b909eb79d403,"'aa:bb:cc:dd:ee:ffa', 'network_id': 'test'}]}",1,0,0.0,211
9af846caf7f4d00eddb2d839c032b909eb79d403,[{'mac_address':,1,0,0.0,212
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_port = {'ports':,1,0,0.0,213
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_network = {'network': {flavor.FLAVOR_NETWORK: 'fake1'}},1,0,0.0,214
9af846caf7f4d00eddb2d839c032b909eb79d403,client_cls.return_value = self.client_inst,1,0,0.0,215
9af846caf7f4d00eddb2d839c032b909eb79d403,self.client_inst = mock.Mock(),1,0,0.0,216
9af846caf7f4d00eddb2d839c032b909eb79d403,client_cls = self.client_cls_p.start(),1,0,0.0,217
9af846caf7f4d00eddb2d839c032b909eb79d403,self.client_cls_p = mock.patch('neutronclient.v2_0.client.Client'),1,0,0.0,218
9af846caf7f4d00eddb2d839c032b909eb79d403,'fake2:neutron.agent.linux.interface.BridgeInterfaceDriver'),1,0,0.0,219
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.conf.set_override('endpoint_type', 'internalURL')",1,0,0.0,220
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_get_driver_by_network_id(self):,1,0,0.0,221
9af846caf7f4d00eddb2d839c032b909eb79d403,meta_interface = interface.MetaInterfaceDriver(self.conf),1,0,0.0,222
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertEqual('fake1', plugin_tag0)",1,0,0.0,223
9af846caf7f4d00eddb2d839c032b909eb79d403,"expected = [mock.call('tap0', namespace=None)]",1,0,0.0,224
9af846caf7f4d00eddb2d839c032b909eb79d403,"plugin_tag0 = meta_interface._get_device_plugin_tag('tap0',",1,0,0.0,225
9af846caf7f4d00eddb2d839c032b909eb79d403,self.ip_dev().link.alias = 'fake1',1,0,0.0,226
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_get_device_plugin_tag(self):,1,0,0.0,227
9af846caf7f4d00eddb2d839c032b909eb79d403,"expected = [mock.call('tap1', namespace='01234567-1234-1234-99'),",1,0,0.0,228
9af846caf7f4d00eddb2d839c032b909eb79d403,namespace=namespace),1,0,0.0,229
9af846caf7f4d00eddb2d839c032b909eb79d403,"'tap1',",1,0,0.0,230
9af846caf7f4d00eddb2d839c032b909eb79d403,namespace = '01234567-1234-1234-99',1,0,0.0,231
9af846caf7f4d00eddb2d839c032b909eb79d403,self.ip_dev.assert_has_calls(expected),1,0,0.0,232
9af846caf7f4d00eddb2d839c032b909eb79d403,mock.call().link.set_alias('fake1')],1,0,0.0,233
9af846caf7f4d00eddb2d839c032b909eb79d403,"expected = [mock.call('tap0', namespace=None),",1,0,0.0,234
9af846caf7f4d00eddb2d839c032b909eb79d403,namespace=None),1,0,0.0,235
9af846caf7f4d00eddb2d839c032b909eb79d403,"'tap0',",1,0,0.0,236
9af846caf7f4d00eddb2d839c032b909eb79d403,"meta_interface._set_device_plugin_tag(driver,",1,0,0.0,237
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_set_device_plugin_tag(self):,1,0,0.0,238
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertIsInstance(driver, interface.OVSInterfaceDriver)",1,0,0.0,239
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_interface_driver_opts_helper(self.conf),1,0,0.0,240
9af846caf7f4d00eddb2d839c032b909eb79d403,"super(TestMetaInterfaceDriver, self).setUp()",1,0,0.0,241
9af846caf7f4d00eddb2d839c032b909eb79d403,def setUp(self):,1,0,0.0,242
9af846caf7f4d00eddb2d839c032b909eb79d403,class TestDhcpNoOpDriver(base.BaseTestCase):,1,0,0.0,243
9af846caf7f4d00eddb2d839c032b909eb79d403,id = 'aaaabbbb-cccc-dddd-eeee-ffff00001111',1,0,0.0,244
9af846caf7f4d00eddb2d839c032b909eb79d403,class FakeNetwork(object):,1,0,0.0,245
9af846caf7f4d00eddb2d839c032b909eb79d403,from neutron.tests import base,1,0,0.0,246
9af846caf7f4d00eddb2d839c032b909eb79d403,from neutron.agent.linux import dhcp,1,0,0.0,247
9af846caf7f4d00eddb2d839c032b909eb79d403,import mock,1,0,0.0,248
9af846caf7f4d00eddb2d839c032b909eb79d403,#    under the License.,1,0,0.0,249
9af846caf7f4d00eddb2d839c032b909eb79d403,#    License for the specific language governing permissions and limitations,1,0,0.0,250
9af846caf7f4d00eddb2d839c032b909eb79d403,"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",1,0,0.0,251
9af846caf7f4d00eddb2d839c032b909eb79d403,"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",1,0,0.0,252
9af846caf7f4d00eddb2d839c032b909eb79d403,"#    Unless required by applicable law or agreed to in writing, software",1,0,0.0,253
9af846caf7f4d00eddb2d839c032b909eb79d403,#         http://www.apache.org/licenses/LICENSE-2.0,1,0,0.0,254
9af846caf7f4d00eddb2d839c032b909eb79d403,#    a copy of the License at,1,0,0.0,255
9af846caf7f4d00eddb2d839c032b909eb79d403,"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",1,0,0.0,256
9af846caf7f4d00eddb2d839c032b909eb79d403,#,1,0,0.0,257
9af846caf7f4d00eddb2d839c032b909eb79d403,# All Rights Reserved.,1,0,0.0,258
9af846caf7f4d00eddb2d839c032b909eb79d403,# Copyright (C) 2013 Midokura PTE LTD,1,0,0.0,259
9af846caf7f4d00eddb2d839c032b909eb79d403,# Copyright (C) 2012 Midokura Japan K.K.,1,0,0.0,260
9af846caf7f4d00eddb2d839c032b909eb79d403,namespace = 'qdhcp-ns',1,0,0.0,261
9af846caf7f4d00eddb2d839c032b909eb79d403,def setUp(self):,1,0,0.0,262
9af846caf7f4d00eddb2d839c032b909eb79d403,class TestMetaInterfaceDriver(TestBase):,1,0,0.0,263
9af846caf7f4d00eddb2d839c032b909eb79d403,"super(TestDhcpNoOpDriver, self).setUp()",1,0,0.0,264
9af846caf7f4d00eddb2d839c032b909eb79d403,from neutron.extensions import flavor,1,0,0.0,265
9af846caf7f4d00eddb2d839c032b909eb79d403,"deprecated_for_removal=True),",0,0,0.0,266
9af846caf7f4d00eddb2d839c032b909eb79d403,"""will be removed in a future release.""),",0,0,0.0,267
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertFalse(self.mock_mgr.return_value.destroy.called),1,0,0.0,268
9af846caf7f4d00eddb2d839c032b909eb79d403,dhcp_driver.disable(retain_port=True),1,0,0.0,269
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_disable_retain_port(self):,1,0,0.0,270
9af846caf7f4d00eddb2d839c032b909eb79d403,self.assertTrue(self.mock_mgr.return_value.destroy.called),1,0,0.0,271
9af846caf7f4d00eddb2d839c032b909eb79d403,dhcp_driver.disable(retain_port=False),1,0,0.0,272
9af846caf7f4d00eddb2d839c032b909eb79d403,"dhcp_driver = driver.DhcpNoOpDriver(self.conf, FakeNetwork())",1,0,0.0,273
9af846caf7f4d00eddb2d839c032b909eb79d403,def test_disable_no_retain_port(self):,1,0,0.0,274
9af846caf7f4d00eddb2d839c032b909eb79d403,self.makedirs = mock.patch('os.makedirs').start(),1,0,0.0,275
9af846caf7f4d00eddb2d839c032b909eb79d403,self.mock_mgr = instance.start(),1,0,0.0,276
9af846caf7f4d00eddb2d839c032b909eb79d403,"instance = mock.patch(""neutron.agent.linux.dhcp.DeviceManager"")",1,0,0.0,277
9af846caf7f4d00eddb2d839c032b909eb79d403,self.conf.register_opts(dhcp.OPTS),1,0,0.0,278
9af846caf7f4d00eddb2d839c032b909eb79d403,self.conf.register_opts(base_config.core_opts),1,0,0.0,279
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_interface_driver_opts_helper(self.conf),1,0,0.0,280
9af846caf7f4d00eddb2d839c032b909eb79d403,self.conf = config.setup_conf(),1,0,0.0,281
9af846caf7f4d00eddb2d839c032b909eb79d403,"expected = [mock.call('tap1', namespace='01234567-1234-1234-99')]",1,0,0.0,282
9af846caf7f4d00eddb2d839c032b909eb79d403,plugin_tag1 = meta_interface._get_device_plugin_tag(,1,0,0.0,283
9af846caf7f4d00eddb2d839c032b909eb79d403,"self.assertEqual('fake1', plugin_tag1)",1,0,0.0,284
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network_ipv6_ipv4 = dhcp.NetModel(True, dict(",1,0,0.0,285
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network = dhcp.NetModel(True, dict(id=FAKE_NETWORK_UUID,",1,0,0.0,286
9af846caf7f4d00eddb2d839c032b909eb79d403,self._configure_metadata_proxy(),0,0,0.0,287
9af846caf7f4d00eddb2d839c032b909eb79d403,tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa')),0,0,0.0,288
9af846caf7f4d00eddb2d839c032b909eb79d403,"dict(id=FAKE_NETWORK_UUID,",0,0,0.0,289
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_port1, fake_port2]))",0,0,0.0,290
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_port1])),0,0,0.0,291
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_subnet1],",0,0,0.0,292
9af846caf7f4d00eddb2d839c032b909eb79d403,"proxy = dhcp_agent.DhcpPluginApi('foo', ctxt, host='foo')",0,0,0.0,293
9af846caf7f4d00eddb2d839c032b909eb79d403,"prev_state = dhcp.NetModel(dict(id=fake_network.id,",0,0,0.0,294
9af846caf7f4d00eddb2d839c032b909eb79d403,"new_state = dhcp.NetModel(dict(id=fake_network.id,",0,0,0.0,295
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(dict(id='net-id',",0,0,0.0,296
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[])),0,0,0.0,297
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[],",0,0,0.0,298
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=False,",0,0,0.0,299
9af846caf7f4d00eddb2d839c032b909eb79d403,"dict(id='12345678-dddd-dddd-1234567890ab',",0,0,0.0,300
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_meta_port, fake_dist_port]))",0,0,0.0,301
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_meta_dvr_network = dhcp.NetModel(fake_meta_network.copy()),0,0,0.0,302
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network_ipv6 = dhcp.NetModel(True, dict(",1,0,0.0,303
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(",1,0,0.0,304
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_meta_subnet],",0,0,0.0,305
9af846caf7f4d00eddb2d839c032b909eb79d403,"True, dict(id='12345678-1234-5678-1234567890ab',",1,0,0.0,306
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(cfg.CONF),1,0,0.0,307
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_port1, fake_port2]))",1,0,0.0,308
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_port1])),1,0,0.0,309
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_subnet1],",1,0,0.0,310
9af846caf7f4d00eddb2d839c032b909eb79d403,"proxy = dhcp_agent.DhcpPluginApi('foo', ctxt, None, host='foo')",1,0,0.0,311
9af846caf7f4d00eddb2d839c032b909eb79d403,"prev_state = dhcp.NetModel(True, dict(id=fake_network.id,",1,0,0.0,312
9af846caf7f4d00eddb2d839c032b909eb79d403,"new_state = dhcp.NetModel(True, dict(id=fake_network.id,",1,0,0.0,313
9af846caf7f4d00eddb2d839c032b909eb79d403,"network = dhcp.NetModel(True, dict(id='net-id',",1,0,0.0,314
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[])),1,0,0.0,315
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[],",1,0,0.0,316
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=False,",1,0,0.0,317
9af846caf7f4d00eddb2d839c032b909eb79d403,"ports=[fake_meta_port, fake_dist_port]))",1,0,0.0,318
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_meta_dvr_network = dhcp.NetModel(True, fake_meta_network.copy())",1,0,0.0,319
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_meta_port])),1,0,0.0,320
9af846caf7f4d00eddb2d839c032b909eb79d403,"subnets=[fake_meta_subnet],",1,0,0.0,321
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=True,",1,0,0.0,322
9af846caf7f4d00eddb2d839c032b909eb79d403,"tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa',",1,0,0.0,323
9af846caf7f4d00eddb2d839c032b909eb79d403,ports=[fake_meta_port])),0,0,0.0,324
9af846caf7f4d00eddb2d839c032b909eb79d403,"admin_state_up=True,",0,0,0.0,325
9af846caf7f4d00eddb2d839c032b909eb79d403,def register_options(conf):,0,0,0.0,326
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(metadata_config.SHARED_OPTS),1,0,0.0,327
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(dhcp_config.DNSMASQ_OPTS),1,0,0.0,328
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(dhcp_config.DHCP_OPTS),1,0,0.0,329
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(dhcp_config.DHCP_AGENT_OPTS),1,0,0.0,330
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_agent_state_opts_helper(cfg.CONF),1,0,0.0,331
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(cfg.CONF),1,0,0.0,332
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_interface_driver_opts_helper(cfg.CONF),1,0,0.0,333
9af846caf7f4d00eddb2d839c032b909eb79d403,def register_options():,1,0,0.0,334
9af846caf7f4d00eddb2d839c032b909eb79d403,register_options(cfg.CONF),0,0,0.0,335
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(interface.OPTS),0,0,0.0,336
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(metadata_config.SHARED_OPTS),0,0,0.0,337
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(metadata_config.DRIVER_OPTS),0,0,0.0,338
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(dhcp_config.DNSMASQ_OPTS),0,0,0.0,339
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(dhcp_config.DHCP_OPTS),0,0,0.0,340
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(dhcp_config.DHCP_AGENT_OPTS),0,0,0.0,341
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_agent_state_opts_helper(conf),0,0,0.0,342
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(conf),0,0,0.0,343
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_interface_driver_opts_helper(conf),0,0,0.0,344
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(metadata_config.DRIVER_OPTS),1,0,0.0,345
9af846caf7f4d00eddb2d839c032b909eb79d403,cfg.CONF.register_opts(interface.OPTS),1,0,0.0,346
9af846caf7f4d00eddb2d839c032b909eb79d403,"tenant_id='aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa',",0,0,0.0,347
9af846caf7f4d00eddb2d839c032b909eb79d403,register_options(),1,0,0.0,348
9af846caf7f4d00eddb2d839c032b909eb79d403,"dict(id='12345678-1234-5678-1234567890ab',",0,0,0.0,349
9af846caf7f4d00eddb2d839c032b909eb79d403,dict(,0,0,0.0,350
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_network_ipv6_ipv4 = dhcp.NetModel(dict(,0,0,0.0,351
9af846caf7f4d00eddb2d839c032b909eb79d403,fake_network_ipv6 = dhcp.NetModel(dict(,0,0,0.0,352
9af846caf7f4d00eddb2d839c032b909eb79d403,"fake_network = dhcp.NetModel(dict(id=FAKE_NETWORK_UUID,",0,0,0.0,353
9af846caf7f4d00eddb2d839c032b909eb79d403,self.ns_name = NS_PREFIX + self.id if conf.use_namespaces else None,1,0,0.0,354
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(cfg.CONF),1,0,0.0,355
9af846caf7f4d00eddb2d839c032b909eb79d403,self.ns_name = NS_PREFIX + self.id,0,0,0.0,356
9af846caf7f4d00eddb2d839c032b909eb79d403,# TODO(cbrandily): deduplicate ns_name generation in metering/l3,0,0,0.0,357
9af846caf7f4d00eddb2d839c032b909eb79d403,config.register_use_namespaces_opts_helper(cfg.CONF),1,0,0.0,358
9af846caf7f4d00eddb2d839c032b909eb79d403,agent_config.register_use_namespaces_opts_helper(conf),1,0,0.0,359
9af846caf7f4d00eddb2d839c032b909eb79d403,"""configure a router that has the matching router ID."")),",1,0,0.0,360
9af846caf7f4d00eddb2d839c032b909eb79d403,conf.register_opts(USE_NAMESPACES_OPTS),1,0,0.0,361
9af846caf7f4d00eddb2d839c032b909eb79d403,def register_use_namespaces_opts_helper(conf):,1,0,0.0,362
9af846caf7f4d00eddb2d839c032b909eb79d403,"deprecated_for_removal=True),",1,0,0.0,363
9af846caf7f4d00eddb2d839c032b909eb79d403,"""will be removed in a future release.""),",1,0,0.0,364
9af846caf7f4d00eddb2d839c032b909eb79d403,"""that has the matching router ID."")),",0,0,0.0,365
9af846caf7f4d00eddb2d839c032b909eb79d403,mocks['sync_state'].assert_called_once_with(),1,0,0.0,366
