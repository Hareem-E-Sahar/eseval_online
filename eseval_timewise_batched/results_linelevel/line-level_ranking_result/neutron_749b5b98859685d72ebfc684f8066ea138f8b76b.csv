commit_id,line,line_level_label,count,line_score,row
749b5b98859685d72ebfc684f8066ea138f8b76b,""" the Big Switch or Floodlight controller."")),",0,6,1.0,1
749b5b98859685d72ebfc684f8066ea138f8b76b,""" the BigSwitch or Floodlight controller."")),",1,5,0.8333333333333333,2
749b5b98859685d72ebfc684f8066ea138f8b76b,"help=_(""If True, Use SSL when connecting to the Big Switch or """,0,5,0.8333333333333333,3
749b5b98859685d72ebfc684f8066ea138f8b76b,"help=_(""A comma separated list of Big Switch or Floodlight """,0,4,0.6666666666666666,4
749b5b98859685d72ebfc684f8066ea138f8b76b,"""requests to the Big Switch/Floodlight server, """,0,4,0.6666666666666666,5
749b5b98859685d72ebfc684f8066ea138f8b76b,"help=_(""If True, Use SSL when connecting to the BigSwitch or """,1,4,0.6666666666666666,6
749b5b98859685d72ebfc684f8066ea138f8b76b,"""code %(code)s on %(action)s action to resource """,0,4,0.6666666666666666,7
749b5b98859685d72ebfc684f8066ea138f8b76b,"""code %(code)s on %(action)s action to resource """,1,4,0.6666666666666666,8
749b5b98859685d72ebfc684f8066ea138f8b76b,"resp = self.rest_action('GET', resource, errstr=errstr,",0,3,0.5,9
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo.config import cfg,1,3,0.5,10
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo_config import cfg,0,3,0.5,11
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo.db import options as db_options,1,3,0.5,12
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo.config import cfg,1,3,0.5,13
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo_db import options as db_options,0,3,0.5,14
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo_config import cfg,0,3,0.5,15
749b5b98859685d72ebfc684f8066ea138f8b76b,# release lock so others don't have to wait for timeout,0,3,0.5,16
749b5b98859685d72ebfc684f8066ea138f8b76b,# remove the auth token so it's not present in debug logs on the,0,3,0.5,17
749b5b98859685d72ebfc684f8066ea138f8b76b,headers = headers or {},0,3,0.5,18
749b5b98859685d72ebfc684f8066ea138f8b76b,from neutron.openstack.common import jsonutils as json,1,3,0.5,19
749b5b98859685d72ebfc684f8066ea138f8b76b,"self.httpPatch = mock.patch(HTTPCON, create=True,",1,3,0.5,20
749b5b98859685d72ebfc684f8066ea138f8b76b,"""requests to the BigSwitch/Floodlight server, """,1,3,0.5,21
749b5b98859685d72ebfc684f8066ea138f8b76b,"help=_(""A comma separated list of BigSwitch or Floodlight """,1,3,0.5,22
749b5b98859685d72ebfc684f8066ea138f8b76b,"""synchronization to the controller."")),",0,3,0.5,23
749b5b98859685d72ebfc684f8066ea138f8b76b,"""the plugin automatically triggers a full data """,0,3,0.5,24
749b5b98859685d72ebfc684f8066ea138f8b76b,from neutron.common import utils,1,2,0.3333333333333333,25
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo.utils import excutils,1,2,0.3333333333333333,26
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo.serialization import jsonutils,1,2,0.3333333333333333,27
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo_utils import excutils,0,2,0.3333333333333333,28
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo_serialization import jsonutils,0,2,0.3333333333333333,29
749b5b98859685d72ebfc684f8066ea138f8b76b,# oslo.config limits ${var} expansion to global variables,1,2,0.3333333333333333,30
749b5b98859685d72ebfc684f8066ea138f8b76b,from oslo import messaging,1,2,0.3333333333333333,31
749b5b98859685d72ebfc684f8066ea138f8b76b,# oslo_config limits ${var} expansion to global variables,0,2,0.3333333333333333,32
749b5b98859685d72ebfc684f8066ea138f8b76b,# This base class is not intended to be instantiated directly.,1,2,0.3333333333333333,33
749b5b98859685d72ebfc684f8066ea138f8b76b,headers = {},1,2,0.3333333333333333,34
749b5b98859685d72ebfc684f8066ea138f8b76b,from neutron.openstack.common import jsonutils,0,2,0.3333333333333333,35
749b5b98859685d72ebfc684f8066ea138f8b76b,self.servers = servermanager.ServerPool(server_timeout),1,2,0.3333333333333333,36
749b5b98859685d72ebfc684f8066ea138f8b76b,self.servers = servermanager.ServerPool(),0,2,0.3333333333333333,37
749b5b98859685d72ebfc684f8066ea138f8b76b,"self.httpPatch = mock.patch(HTTPCON,",0,2,0.3333333333333333,38
749b5b98859685d72ebfc684f8066ea138f8b76b,"""to the controller."")),",1,2,0.3333333333333333,39
749b5b98859685d72ebfc684f8066ea138f8b76b,"""automatically trigger a full data synchronization """,1,2,0.3333333333333333,40
749b5b98859685d72ebfc684f8066ea138f8b76b,# include the requesting context information if available,0,2,0.3333333333333333,41
749b5b98859685d72ebfc684f8066ea138f8b76b,hash_handler = cdb.HashHandler(context=self.get_context_ref()),1,1,0.16666666666666666,42
749b5b98859685d72ebfc684f8066ea138f8b76b,# backend controller,0,1,0.16666666666666666,43
749b5b98859685d72ebfc684f8066ea138f8b76b,"cdict.pop('auth_token', None)",0,1,0.16666666666666666,44
749b5b98859685d72ebfc684f8066ea138f8b76b,headers[REQ_CONTEXT_HEADER] = jsonutils.dumps(cdict),0,1,0.16666666666666666,45
749b5b98859685d72ebfc684f8066ea138f8b76b,hash_handler = cdb.HashHandler(context=context),0,1,0.16666666666666666,46
749b5b98859685d72ebfc684f8066ea138f8b76b,ignore_codes = ignore_codes or [],0,1,0.16666666666666666,47
749b5b98859685d72ebfc684f8066ea138f8b76b,"def rest_call(self, action, resource, data='', headers={}, timeout=False,",1,1,0.16666666666666666,48
749b5b98859685d72ebfc684f8066ea138f8b76b,"LOG.info(_LI(""NeutronRestProxyV2: Received and ignored error """,0,1,0.16666666666666666,49
749b5b98859685d72ebfc684f8066ea138f8b76b,hash_handler = cdb.HashHandler(),0,1,0.16666666666666666,50
749b5b98859685d72ebfc684f8066ea138f8b76b,hash_handler = cdb.HashHandler(context=context),1,1,0.16666666666666666,51
749b5b98859685d72ebfc684f8066ea138f8b76b,"# return None if switch not found, else return switch info",0,1,0.16666666666666666,52
749b5b98859685d72ebfc684f8066ea138f8b76b,"LOG.warning(_LW(""NeutronRestProxyV2: Received and ignored error """,1,1,0.16666666666666666,53
749b5b98859685d72ebfc684f8066ea138f8b76b,"return self.rest_action('GET', resource, errstr=errstr)",1,1,0.16666666666666666,54
749b5b98859685d72ebfc684f8066ea138f8b76b,import oslo_messaging,0,1,0.16666666666666666,55
749b5b98859685d72ebfc684f8066ea138f8b76b,context = self.get_context_ref(),0,1,0.16666666666666666,56
749b5b98859685d72ebfc684f8066ea138f8b76b,cdict = context.to_dict(),0,1,0.16666666666666666,57
749b5b98859685d72ebfc684f8066ea138f8b76b,body = json.dumps(data),1,1,0.16666666666666666,58
749b5b98859685d72ebfc684f8066ea138f8b76b,"def rest_call(self, action, resource, data='', headers=None,",0,1,0.16666666666666666,59
749b5b98859685d72ebfc684f8066ea138f8b76b,new=fake_server.HTTPConnectionMock),1,1,0.16666666666666666,60
749b5b98859685d72ebfc684f8066ea138f8b76b,REQ_CONTEXT_HEADER = 'X-REQ-CONTEXT',0,1,0.16666666666666666,61
749b5b98859685d72ebfc684f8066ea138f8b76b,self.addCleanup(mock.patch.stopall),1,1,0.16666666666666666,62
749b5b98859685d72ebfc684f8066ea138f8b76b,HTTPCON = 'neutron.plugins.bigswitch.servermanager.HTTPConnection',0,1,0.16666666666666666,63
749b5b98859685d72ebfc684f8066ea138f8b76b,SPAWN = 'neutron.plugins.bigswitch.plugin.eventlet.GreenPool.spawn_n',0,1,0.16666666666666666,64
749b5b98859685d72ebfc684f8066ea138f8b76b,HTTPCON = 'httplib.HTTPConnection',1,1,0.16666666666666666,65
749b5b98859685d72ebfc684f8066ea138f8b76b,SPAWN = 'eventlet.GreenPool.spawn_n',1,1,0.16666666666666666,66
749b5b98859685d72ebfc684f8066ea138f8b76b,new=fake_server.HTTPConnectionMock),0,1,0.16666666666666666,67
749b5b98859685d72ebfc684f8066ea138f8b76b,# Extending class should set ServerPool.,1,1,0.16666666666666666,68
749b5b98859685d72ebfc684f8066ea138f8b76b,self.capabilities = jsonutils.loads(body),0,1,0.16666666666666666,69
749b5b98859685d72ebfc684f8066ea138f8b76b,body = jsonutils.dumps(data),0,1,0.16666666666666666,70
749b5b98859685d72ebfc684f8066ea138f8b76b,respdata = jsonutils.loads(respstr),0,1,0.16666666666666666,71
749b5b98859685d72ebfc684f8066ea138f8b76b,self.capabilities = json.loads(body),1,1,0.16666666666666666,72
749b5b98859685d72ebfc684f8066ea138f8b76b,respdata = json.loads(respstr),1,1,0.16666666666666666,73
749b5b98859685d72ebfc684f8066ea138f8b76b,"{'code': resp[2], 'action': action,",0,0,0.0,74
749b5b98859685d72ebfc684f8066ea138f8b76b,if not headers:,1,0,0.0,75
749b5b98859685d72ebfc684f8066ea138f8b76b,"ignore_codes=[], headers={}, timeout=False):",1,0,0.0,76
749b5b98859685d72ebfc684f8066ea138f8b76b,else:,0,0,0.0,77
749b5b98859685d72ebfc684f8066ea138f8b76b,hash_handler.clear_lock(),0,0,0.0,78
749b5b98859685d72ebfc684f8066ea138f8b76b,@utils.synchronized('bsn-rest-call'),1,0,0.0,79
749b5b98859685d72ebfc684f8066ea138f8b76b,"""%(resource)s""),",0,0,0.0,80
749b5b98859685d72ebfc684f8066ea138f8b76b,oslo_messaging.set_transport_defaults(control_exchange='neutron'),0,0,0.0,81
749b5b98859685d72ebfc684f8066ea138f8b76b,'resource': resource}),0,0,0.0,82
749b5b98859685d72ebfc684f8066ea138f8b76b,ignore_codes=[404]),0,0,0.0,83
749b5b98859685d72ebfc684f8066ea138f8b76b,return None if resp[0] == 404 else resp[3],0,0,0.0,84
749b5b98859685d72ebfc684f8066ea138f8b76b,"""%(resource)s""),",1,0,0.0,85
749b5b98859685d72ebfc684f8066ea138f8b76b,"{'code': resp[2], 'action': action,",1,0,0.0,86
749b5b98859685d72ebfc684f8066ea138f8b76b,'resource': resource}),1,0,0.0,87
749b5b98859685d72ebfc684f8066ea138f8b76b,"ignore_codes=None, headers=None, timeout=False):",0,0,0.0,88
749b5b98859685d72ebfc684f8066ea138f8b76b,"reconnect=False, hash_handler=None):",1,0,0.0,89
749b5b98859685d72ebfc684f8066ea138f8b76b,self.httpPatch.start(),1,0,0.0,90
749b5b98859685d72ebfc684f8066ea138f8b76b,if context:,0,0,0.0,91
749b5b98859685d72ebfc684f8066ea138f8b76b,for sp in servers]):,1,0,0.0,92
749b5b98859685d72ebfc684f8066ea138f8b76b,@utils.synchronized('bsn-rest-call'),0,0,0.0,93
749b5b98859685d72ebfc684f8066ea138f8b76b,"@utils.synchronized('bsn-rest-call', external=True)",1,0,0.0,94
749b5b98859685d72ebfc684f8066ea138f8b76b,if any((len(spl) != 2 or not spl[1].isdigit()),0,0,0.0,95
749b5b98859685d72ebfc684f8066ea138f8b76b,"for spl in [sp.rsplit(':', 1)",0,0,0.0,96
749b5b98859685d72ebfc684f8066ea138f8b76b,for sp in servers]):,0,0,0.0,97
749b5b98859685d72ebfc684f8066ea138f8b76b,"if any((len(spl) != 2)for spl in [sp.rsplit(':', 1)",1,0,0.0,98
749b5b98859685d72ebfc684f8066ea138f8b76b,def startHttpPatch(self):,0,0,0.0,99
749b5b98859685d72ebfc684f8066ea138f8b76b,"timeout=False, reconnect=False, hash_handler=None):",0,0,0.0,100
749b5b98859685d72ebfc684f8066ea138f8b76b,self.httpPatch.start(),0,0,0.0,101
749b5b98859685d72ebfc684f8066ea138f8b76b,def __init__(self):,0,0,0.0,102
749b5b98859685d72ebfc684f8066ea138f8b76b,"def __init__(self, server_timeout=None):",1,0,0.0,103
749b5b98859685d72ebfc684f8066ea138f8b76b,"super(NeutronRestProxyV2Base, self).__init__()",1,0,0.0,104
749b5b98859685d72ebfc684f8066ea138f8b76b,if not self.servers:,1,0,0.0,105
749b5b98859685d72ebfc684f8066ea138f8b76b,"LOG.warning(_(""ServerPool not set!""))",1,0,0.0,106
749b5b98859685d72ebfc684f8066ea138f8b76b,messaging.set_transport_defaults(control_exchange='neutron'),1,0,0.0,107
