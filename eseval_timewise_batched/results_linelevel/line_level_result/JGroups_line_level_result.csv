line,commit_id,count,line_level_label
"return ""[type="" + type + "" version=\"""" + (version != null? version.length + "" bytes"" : ""n/a"") + ""\""]"";",63fe226fb66056b6c96026aa2d389d8632df64d2,9,1
// queues to buffer data while we are swapping shared key or obtaining key for first time,63fe226fb66056b6c96026aa2d389d8632df64d2,8,1
if(keyPassword == null && storePassword != null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
"throw new Exception(""Unable to load keystore "" + keyStoreName + "": "" + e);",63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
"throw new Exception(""No Such algorithm "" + keyStoreName + "": "" + e);",63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
"throw new Exception(""Certificate exception "" + keyStoreName + "": "" + e);",63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
"throw new Exception(""Unable to retrieve key '"" + alias + ""' from keystore "" + keyStoreName);",63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
if (members == null || members.isEmpty() || members.get(0) == null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
if(msg == null || (msg.getLength() == 0 && !encrypt_entire_message) || ((hdr=(EncryptHeader)msg.getHeader(this.id)) == null)),63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
// check if we had some sort of encrypt control header if using supplied key we should not process it,63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
"private byte[] code(byte[] buf, int offset, int length, boolean decode) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
if(msg == null || (msg.getLength() == 0 && !encrypt_entire_message) || ((hdr=(EncryptHeader)msg.getHeader(id)) == null)),63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
public static final byte ENCRYPT            = 1 << 0;,63fe226fb66056b6c96026aa2d389d8632df64d2,6,1
* is first generated by the controller (in JGroups terms). When a view change,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
* own public key. The controller encrypts the secret key with this key and,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
* process - the view change event also trigger the ENCRYPT layer to queue up,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
* and down messages until the new key is installed. The previous keys are,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
"@Property(name=""change_keys"", description=""Generate new symmetric keys on every view change. Default is false. "" +",63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
private String keyPassword=null; // allows to assign keypwd=storepwd if not set (https://issues.jboss.org/browse/JGRP-1375),63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
//I am  keyserver - either first member of group or old key server is no more and,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
* Sets up the peer for a new keyserver - this is setting queueing to buffer,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
// to make sure we are not sending with old key,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
// could be more optimised but this can wait we only need this if not using supplied key,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
* Does the actual work for decrypting - if version does not match current cipher then tries the previous cipher,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
"private Message _decrypt(final Cipher cipher, Message msg, boolean decrypt_entire_msg) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
downMessageQueue.put(msg); // queue messages if we are waiting for a new key,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
batch.remove(msg); // a control message will get handled by ENCRYPT and should not be passed up,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
public static final byte KEY_REQUEST        = 1 << 1;,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
public static final byte SECRETKEY          = 1 << 2;,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
public static final byte ENCRYPT_ENTIRE_MSG = 1 << 3;,63fe226fb66056b6c96026aa2d389d8632df64d2,5,1
* public/private key exchange. View changes that identify a new controller will,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* This option is suited to an application that does not ship with a known key,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* but instead it is generated and distributed by the controller. The secret key,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"* occurs, a peer will request the secret key by sending a key request with its",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* retained so that messages sent before the view change that are queued can be,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* decrypted if the key is different. <br>,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* Note: the current version does not support the concept of perfect forward,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"private static final String DEFAULT_SYM_ALGO=""AES"";",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
//	 for client to store server's public Key,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
private static String getAlgorithm(String s) {,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* Initialisation if a supplied key is defined in the properties. This,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// must not use default keystore type - as does not support secret keys,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// loaded keystore - get the key,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* Used to initialise the symmetric key if none is supplied in a keystore.,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"log.debug(""initialized symmetric ciphers with secret key ("" + symVersion.length + "" bytes)"");",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
StringBuilder sb = new StringBuilder(b.length * 2);,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
for (int i = 0; i < b.length; i++){,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// set up the Cipher to decrypt secret key responses encrypted with our key,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"private synchronized void handleViewChange(View view, boolean makeServer) {",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// if view is a bit broken set me as keyserver,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"private void becomeKeyServer(Address tmpKeyServer, boolean forced) {",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* messages until we have a new secret key from the key server and sending a,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"private void handleNewKeyServer(Address newKeyServer, boolean merge_view) {",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// make sure we pass up any queued messages first,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// if a key request send response key back,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
// otherwise lets set the returned key as the shared key,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"private Message decryptMessage(Cipher cipher, Message msg) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"private void sendSecretKey(SecretKey secret, PublicKey pubKey, Address source) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
if (asymProvider != null && !asymProvider.trim().isEmpty()),63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
/** send client's public key to server and request server's public key */,63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
if (symProvider != null && !symProvider.trim().isEmpty()),63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
"log.trace(""queueing up message as no session key established: "" + msg);",63fe226fb66056b6c96026aa2d389d8632df64d2,4,1
* protection against passive monitoring but do not want the key exchange,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* result in a new session key being generated and then distributed to all,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* Each message is identified as encrypted with a specific encryption header,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* which identifies the type of encrypt header and an MD5 digest that identifies,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* the version of the key being used to encrypt/decrypt the messages.,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* This is the simplest option and can be used by simply inserting the,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* java file called KeyStoreGenerator is included in the demo package that can,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* All encryption and decryption of messages is done using this key. When a peer,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* encryption (PFE) which means that if a peer leaves the group the keys are,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* it chooses to listen in on the group. This is not included as it really,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* as there is nothing to stop the peer rejoining and receiving the new key. A,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
boolean keyServer=false; //used to see whether we are the key server,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// Cipher pools used for encryption and decryption. Size is cipher_pool_size,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// version filed for secret key,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// queue to hold upcoming messages while key negotiation is happening,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
//	 queue to hold downcoming messages while key negotiation is happening,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// decrypting cypher for secret key requests,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public void init() throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(keyStoreName == null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private void initConfiguredKey() throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(inputStream == null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"throw new Exception(""Unable to load keystore "" + keyStoreName",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"+ "" ensure file is on classpath"");",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// set the fact we are using a supplied key,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public void initSymKey() throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(symProvider != null && !symProvider.trim().isEmpty()),63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// generate the key using the defined init properties,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"private void initSymCiphers(String algorithm, SecretKey secret) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
encoding_ciphers[i]=symProvider != null && !symProvider.trim().isEmpty()?,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
decoding_ciphers[i]=symProvider != null && !symProvider.trim().isEmpty()?,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
/* public static String byteArrayToHexString(byte[] b){,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
int v = b[i] & 0xff;,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if (v < 16) { sb.append('0'); },63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public void initKeyPair() throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// generate publicKey and Private Key,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(asymProvider != null && !asymProvider.trim().isEmpty()),63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public Object up(Event evt) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public void up(MessageBatch batch) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// otherwise get keyserver from view controller,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private void initializeNewSymmetricKey(boolean merge_view) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if ( e instanceof RuntimeException) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
} else {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* address to be local address.,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* key request to the new keyserver.,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// start queueing until we have new key,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// set new keyserver address,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"log.debug(""%s: %s has become the new key server, sending key request to it"", local_addr, keyServerAddr);",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private boolean keyServerChanged(Address newKeyServer) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private Object handleUpMessage(Event evt) throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// try and decrypt the message - we need to copy msg as we modify its,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// if a key request,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// extract peer's public key,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* used to drain the up queue - synchronized so we can call it safely,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private void drainUpQueue() {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private void drainDownQueue() {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"private void setKeys(SecretKey key, byte[] version) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// if the keys are already there then they will overwrite,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(cipher == null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// create a cipher with peer's public key,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"log.debug(""sending version %s encoded key to client"", new String(getSymVersion()));",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private void sendKeyRequest() {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public Object down(Event evt) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(msg.getLength() == 0 && !encrypt_entire_message),63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// make sure the down queue is drained first to keep ordering,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// if a tmp_view then we are trying to become coordinator so,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
private void encryptAndSend(Message msg) throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
// test reconstituted key to see if valid,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
* used to reconstitute public key sent in byte form from peer,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
"public Message apply(Message msg, MessageBatch batch) {",63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(lock == null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
if(lock != null) {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public static class EncryptHeader extends org.jgroups.Header {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public boolean encryptEntireMessage() {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public void writeTo(DataOutput out) throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public void readFrom(DataInput in) throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public String toString() {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
public int size() {,63fe226fb66056b6c96026aa2d389d8632df64d2,3,1
import org.jgroups.util.Util;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
import java.io.*;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
import java.security.*;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
import java.security.cert.CertificateException;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
import java.security.spec.X509EncodedKeySpec;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* ENCRYPT layer. Encrypt and decrypt communication in JGroups,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"* any layer in JGroups without the need for a coordinator, or if you want",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* <li> Option 2. Configured with algorithms and key sizes. The ENCRYPT layer in,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* this mode sould be placed above the GMS protocol in the configuration. The,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"* peers. In this form, no keystore exists as the keys are distributed using a",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* Encryption layer at any point in the JGroups stack - it will encrypt all,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* An example showing the keystore version can be found in,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* the conf in a file called EncryptKeyStore.xml - along with a,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"* In order to use the ENCRYPT layer in this manner, it is necessary to have the",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* be used from the command line (or IDE) to generate a suitable keystore.,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* sends it back to the peer who then decrypts it and installs the key as its,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* own secret key. <br>,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"* receives a view change that shows a different keyserver, it will repeat this",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* An example EncryptNoKeyStore.xml is included in the conf file as a guide.,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* re-generated preventing the departed peer from decrypting future messages if,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* future release will address this issue.,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public class ENCRYPT extends Protocol {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// encryption properties in no supplied key mode,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"@Property(name=""asym_init"", description=""Initial public/private key length. Default is 512"")",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"@Property(name=""sym_init"", description=""Initial key length for matching symmetric algorithm. Default is 128"")",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"""Set this to true when using asymmetric encryption, to handle merging (JGRP-1907)"")",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// properties for functioning in supplied key mode,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private boolean suppliedKey=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"protected String alias=""mykey""; // JDK default",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// public/private Key,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
KeyPair Kpair; // to store own's public/private Key,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
protected final AtomicInteger cipher_index=new AtomicInteger(0); // the cipher and lock to select,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// dhared secret key to encrypt/decrypt messages,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// map to hold previous keys so we can decrypt some earlier messages if we need to,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private boolean queue_up=true;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private boolean queue_down=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private final BlockingQueue<Message> upMessageQueue=new LinkedBlockingQueue<>();,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private final BlockingQueue<Message> downMessageQueue=new LinkedBlockingQueue<>();,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
protected int getNextIndex() {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"// same as mod, but (apparently, I'm told) more efficient. Size needs to be a power ot 2",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public int       getAsymInit()          {return asymInit;},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public String    getSymAlgorithm()      {return symAlgorithm;},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public int       getSymInit()           {return symInit;},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public String    getAsymAlgorithm()     {return asymAlgorithm;},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public Address   getKeyServerAddr()     {return keyServerAddr;},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"private void     setSymVersion(byte[] symVersion)        {this.symVersion=Arrays.copyOf(symVersion, symVersion.length);}",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private void     setSecretKey(SecretKey secretKey)       {this.secretKey=secretKey;},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
*  taken m original ENCRYPT file,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(cipher_pool_size <= 0) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(tmp != cipher_pool_size) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* supplied key must be in a keystore which can be generated using the,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(inputStream == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// we can't find a keystore here -,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(tempKey == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
finally {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// see if we have a provider specified,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
for(int i=0; i < cipher_pool_size; i++) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// symVersion = byteArrayToHexString(digest.digest());,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* Generates the public/private key pair from the init params,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// generate keys according to the specified algorithms,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"log.debug(""new view: "" + view);",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
List<Address> members = view.getMembers();,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// I have been voted new controller,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"handleNewKeyServer(tmpKeyServer, view instanceof MergeView);",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if ( changeKeysOnViewChange || !keyServer || merge_view) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
} catch (Exception e) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* Handles becoming server - resetting queue settings and setting keyserver,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"log.debug(""%s: I have become the new key server"", local_addr);",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if ( changeKeysOnViewChange || keyServerChanged(newKeyServer) || merge_view) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"protected Object handleEncryptedMessage(Message msg, Event evt, EncryptHeader hdr) throws Exception {",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// if queueing then pass into queue to be dealt with later,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"log.trace(""queueing up message as no session key established: %s"", msg);",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"Message tmpMsg=decryptMessage(null, msg.copy()); // need to copy for possible xmits",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(tmpMsg != null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"protected void handleUpEvent(Message msg, EncryptHeader hdr) {",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// send back the secret key we have,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(tmp == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
else {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(size > 0),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"Message msg=decryptMessage(null, tmp.copy()); // need to copy for possible xmits",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(msg != null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* Sets the keys for the app. and drains the queues - the drains could be,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* called att he same time as the up/down messages calling in to the class,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* is better than the alternative of waiting until the next message to,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* @param key,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
* @param version,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// put the previous key into the map,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// drain the up queue,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"log.debug(""setting queue up to false in setKeys"");",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"log.warn(""attempting to use stored cipher as message does not use current encryption version "");",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(cipher == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
return msg;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(ret.getDest() == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(ret.getSrc() == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
return ret;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"log.debug(""set local address to %s"", local_addr);",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(msg.getSrc() == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"// exclude existing headers, they will be seen again when we decrypt and unmarshal the msg at the receiver",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
// try and decode secrey key sent from keyserver,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private SecretKeySpec decodeKey(byte[] encodedKey) throws Exception {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
private PublicKey generatePubKey(byte[] encodedKey) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(hdr.getType() == EncryptHeader.ENCRYPT) {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"Message tmpMsg=decryptMessage(cipher, msg.copy()); // need to copy for possible xmits",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
protected void unlock() {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"protected void queueUpMessage(Message msg, MessageBatch batch) {",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public EncryptHeader() {},63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
"public EncryptHeader(byte type, byte[] version) {",63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
if(version == null),63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
public byte getType() {,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
return (byte)(type & ~ENCRYPT_ENTIRE_MSG); // clear the ENCRYPT_ENTIRE_MSG flag,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
int retval=Global.BYTE_SIZE + Global.SHORT_SIZE;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
return retval;,63fe226fb66056b6c96026aa2d389d8632df64d2,2,1
import org.jgroups.*;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import org.jgroups.annotations.MBean;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import org.jgroups.annotations.Property;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import org.jgroups.stack.Protocol;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import org.jgroups.util.AsciiString;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import org.jgroups.util.Buffer;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import org.jgroups.util.MessageBatch;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import javax.crypto.Cipher;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import javax.crypto.KeyGenerator;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import javax.crypto.SecretKey;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import javax.crypto.spec.SecretKeySpec;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.*;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.concurrent.BlockingQueue;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.concurrent.LinkedBlockingQueue;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.concurrent.TimeUnit;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.concurrent.atomic.AtomicInteger;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.concurrent.locks.Lock;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.concurrent.locks.ReentrantLock;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
import java.util.function.BiFunction;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
*,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* This class can be used in two ways:,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* <ul>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* <li> Option 1. Configured with a secretKey in a keystore so it can be used at,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* overhead and complexity. In this mode all nodes must be distributed with the,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* same keystore file.,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* coordinator then chooses the secretkey which it distributes amongst all the,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* peers. This overhead can be substantial in a an application with a reasonable,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* peer churn.,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* </ul>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* <p>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* <h2>Option 1</h2>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* <br>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* Events of a type MSG that have a non-null message buffer. The format of the,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* entry in this form is:<br>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"* &lt;ENCRYPT key_store_name=""defaultStore.keystore"" store_password=""changeit""",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"* alias=""myKey""/&gt;<br>",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* defaultStore.keystore file.<br>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* secretKey already generated in a keystore file. The directory containing the,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* keystore file must be on the application's classpath. You cannot create a,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* SecretKey keystore file using the keytool application shipped with the JDK. A,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* <h2>Option 2</h2>,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* requires a suitable authentication scheme as well to make this feature useful,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @author Steve Woodcock,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @author Bela Ban,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
Address local_addr;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
Address keyServerAddr;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"@Property(name=""asym_provider"", description=""Cryptographic Service Provider. Default is Bouncy Castle Provider"")",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
String asymProvider=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"@Property(name=""sym_provider"", description=""Cryptographic Service Provider. Default is Bouncy Castle Provider"")",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
String symProvider=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"@Property(name=""asym_algorithm"", description=""Cipher engine transformation for asymmetric algorithm. Default is RSA"")",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"protected String asymAlgorithm=""RSA"";",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"@Property(name=""sym_algorithm"", description=""Cipher engine transformation for symmetric algorithm. Default is AES"")",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
String symAlgorithm=DEFAULT_SYM_ALGO;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int asymInit=512;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int symInit=128;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
boolean changeKeysOnViewChange=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
String keyStoreName;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"protected String storePassword=""changeit""; //JDK default",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
protected int cipher_pool_size=8;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// PublicKey serverPubKey;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// Locks to synchronize access to the cipher pools,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"final Map<AsciiString,Cipher> keyMap=new WeakHashMap<>();",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
private Cipher asymCipher;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
protected boolean encrypt_entire_message=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int current_index=cipher_index.getAndIncrement();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return current_index & (cipher_pool_size-1);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public SecretKey getDesKey()            {return secretKey;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public KeyPair   getKpair()             {return Kpair;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public Cipher    getAsymCipher()        {return asymCipher;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public byte[]    getSymVersion()        {return symVersion;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public SecretKey getSecretKey()         {return secretKey;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public Cipher    getSymDecodingCipher() {return decoding_ciphers[getNextIndex()];},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
public Cipher    getSymEncodingCipher() {return encoding_ciphers[getNextIndex()];},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
protected void   setLocalAddress(Address local_addr)     {this.local_addr=local_addr;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
protected void   setKeyServerAddr(Address keyServerAddr) {this.keyServerAddr=keyServerAddr;},63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"* GetAlgorithm: Get the algorithm name from ""algorithm/mode/padding""",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int index=s.indexOf('/');,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(index == -1),63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return s;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return s.substring(0, index);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.debug(""key_password used is same as store_password"");",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
else,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.warn(""cipher_pool_size of %d is invalid; setting it to 1"", cipher_pool_size);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int tmp=Util.getNextHigherPowerOfTwo(cipher_pool_size);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* keystoreGenerator file in demos. The keystore must be on the classpath to,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* find it.,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @throws KeyStoreException,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @throws Exception,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @throws IOException,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @throws NoSuchAlgorithmException,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @throws CertificateException,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @throws UnrecoverableKeyException,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
try {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// load in keystore using this thread's classloader,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// we have located a file lets load the keystore,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
catch(IOException e) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
catch(NoSuchAlgorithmException e) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
catch(CertificateException e) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
//set the key here,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.debug(""symmetric key generated "");",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* Initialises the Ciphers for both encryption and decryption using the,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* generated or supplied secret key.,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @param algorithm,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @param secret,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
//set the version,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return sb.toString().toUpperCase();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
switch(evt.getType()) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
View view=(View)evt.getArg();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// we try and decrypt all messages,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return handleUpMessage(evt);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
catch(Exception e) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return null;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return up_prot.up(evt);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
initializeNewSymmetricKey(view instanceof MergeView);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
Address tmpKeyServer=view.getMembers().get(0);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.debug(""initalizing new ciphers"");",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
throw new IllegalStateException(e);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @param tmpKeyServer,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(log.isDebugEnabled() && !forced),63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @param newKeyServer,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return !Objects.equals(keyServerAddr, newKeyServer);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
Message msg=(Message)evt.getArg();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
switch(hdr.getType()) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return handleEncryptedMessage(msg, evt, hdr);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(queue_up) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// buffer (http://jira.jboss.com/jira/browse/JGRP-538),63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return up_prot.up(new Event(Event.MSG, tmpMsg));",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(suppliedKey) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.warn(""we received an encrypt header of %s while in configured mode"",hdr.getType());",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// see what sort of encrypt control message we have received,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.debug(""received a key request from peer %s"", msg.getSrc());",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.warn(""unable to reconstitute peer's public key"");",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"sendKeyRequest(); // unable to understand response, let's try again",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.warn(""unable to process received public key"", e);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.warn(""received ignored encrypt header of %s"", hdr.getType());",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* despite access from potentially two threads at once,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(log.isTraceEnabled()) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int size=upMessageQueue.size();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.trace(""draining %d messages from the up queue"", size);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
while(true) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message tmp=upMessageQueue.poll(0L, TimeUnit.MILLISECONDS);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
catch(Throwable t) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int size=downMessageQueue.size();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message tmp=downMessageQueue.poll(0L, TimeUnit.MILLISECONDS);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* so we may have an extra call to the drain methods but this slight expense,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* trigger the drains which may never happen.,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"initSymCiphers(key.getAlgorithm(), key);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"if(!Arrays.equals(hdr.getVersion(),getSymVersion())) {",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.warn(""unable to find a matching cipher in previous key map"");",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
synchronized(cipher) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return _decrypt(cipher, msg, hdr.encryptEntireMessage());",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(!decrypt_entire_msg) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message ret=Util.streamableFromBuffer(Message.class,decrypted_msg,0,decrypted_msg.length);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
Cipher tmp;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
//encrypt current secret key,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message newMsg=new Message(source, local_addr, encryptedKey)",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
".putHeader(this.id, new EncryptHeader(EncryptHeader.SECRETKEY, getSymVersion()));",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message newMsg=new Message(keyServerAddr, local_addr, Kpair.getPublic().getEncoded())",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(queue_down) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.trace(""queueing down message as no session key established: %s"", msg);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(!suppliedKey) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// make us keyserver,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return down_prot.down(evt);,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
if(encrypt_entire_message) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message tmp=msg.copy(false, false).setBuffer(encrypted_msg).putHeader(this.id,hdr);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
// copy neeeded because same message (object) may be retransmitted -> no double encryption,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"Message msgEncrypted=msg.copy(false).putHeader(this.id, hdr)",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
int index=getNextIndex();,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return cipher.doFinal(buf, offset, length);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
synchronized(this) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return keySpec;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @param encodedKey,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @return PublicKey,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return pubKey;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"protected class Decrypter implements BiFunction<Message,MessageBatch,Message> {",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"log.error(""failed decrypting message from %s (offset=%d, length=%d, buf.length=%d): %s, headers are %s"",",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
catch(InterruptedException e) {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
private   byte   type;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"throw new IllegalArgumentException(""version must be defined"");",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
* @return Returns the version.,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
protected byte[] getVersion() {,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
return version;,63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
"return Util.isFlagSet(type, ENCRYPT_ENTIRE_MSG);",63fe226fb66056b6c96026aa2d389d8632df64d2,1,1
package org.jgroups.protocols;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
/**,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
*/,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@MBean(description=""Protocol which encrypts and decrypts cluster traffic"")",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
/* -----------------------------------------    Properties     -------------------------------------------------- */,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@Property(name=""key_store_name"", description=""File on classpath that contains keystore repository"")",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@Property(name=""store_password"",",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"description=""Password used to check the integrity/unlock the keystore. Change the default"",",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
exposeAsManagedAttribute=false),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@Property(name=""key_password"", description=""Password for recovering the key. Change the default"",",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@Property(name=""alias"", description=""Alias used for recovering the key. Change the default"",exposeAsManagedAttribute=false)",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@Property(description=""Number of ciphers in the pool to parallelize encrypt and decrypt requests"",writable=false)",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"protected Cipher[] encoding_ciphers, decoding_ciphers;",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"protected Lock[] encoding_locks, decoding_locks;",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
protected byte[] symVersion;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
protected SecretKey secretKey;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"/** determines whether to encrypt the entire message, or just the buffer */",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
@Property,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
/*,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyPassword=storePassword;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
initSymKey();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
initKeyPair();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
initConfiguredKey();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
cipher_pool_size=1;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.warn(""setting cipher_pool_size (%d) to %d (power of 2) for faster modulo operation"", cipher_pool_size, tmp);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
cipher_pool_size=tmp;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
encoding_ciphers=new Cipher[cipher_pool_size];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
encoding_locks=new Lock[cipher_pool_size];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
decoding_ciphers=new Cipher[cipher_pool_size];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
decoding_locks=new Lock[cipher_pool_size];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"initSymCiphers(symAlgorithm, getSecretKey());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
InputStream inputStream=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"KeyStore store=KeyStore.getInstance(""JCEKS"");",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
SecretKey tempKey=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
inputStream=Thread.currentThread(),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
.getContextClassLoader(),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
.getResourceAsStream(keyStoreName);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
inputStream=new FileInputStream(keyStoreName);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"store.load(inputStream, storePassword.toCharArray());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"tempKey=(SecretKey)store.getKey(alias, keyPassword.toCharArray());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
setSecretKey(tempKey);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(symAlgorithm.equals(DEFAULT_SYM_ALGO)),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
symAlgorithm=tempKey.getAlgorithm();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
suppliedKey=true;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
queue_down=queue_up=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Util.close(inputStream);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
KeyGenerator keyGen=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"keyGen=KeyGenerator.getInstance(getAlgorithm(symAlgorithm), symProvider);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyGen=KeyGenerator.getInstance(getAlgorithm(symAlgorithm));,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyGen.init(symInit);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
secretKey=keyGen.generateKey();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
setSecretKey(secretKey);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.debug(""initializing symmetric ciphers (pool size=%d)"",cipher_pool_size);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"Cipher.getInstance(algorithm, symProvider) : Cipher.getInstance(algorithm);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"encoding_ciphers[i].init(Cipher.ENCRYPT_MODE, secret);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"decoding_ciphers[i].init(Cipher.DECRYPT_MODE, secret);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
encoding_locks[i]=new ReentrantLock();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
decoding_locks[i]=new ReentrantLock();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"MessageDigest digest=MessageDigest.getInstance(""MD5"");",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
digest.reset();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
digest.update(secret.getEncoded());,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
byte[] tmp=digest.digest();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"symVersion=Arrays.copyOf(tmp, tmp.length);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
sb.append(Integer.toHexString(v));,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
}*/,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
KeyPairGenerator KpairGen=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"KpairGen=KeyPairGenerator.getInstance(getAlgorithm(asymAlgorithm), asymProvider);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
KpairGen=KeyPairGenerator.getInstance(getAlgorithm(asymAlgorithm));,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"KpairGen.initialize(asymInit,new SecureRandom());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Kpair=KpairGen.generateKeyPair();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"asymCipher=Cipher.getInstance(asymAlgorithm, asymProvider);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
asymCipher=Cipher.getInstance(asymAlgorithm);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"asymCipher.init(Cipher.DECRYPT_MODE,Kpair.getPrivate());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.debug(""asym algo initialized"");",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case Event.VIEW_CHANGE:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(!suppliedKey),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"handleViewChange(view, false);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
break;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case Event.TMP_VIEW:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
view=(View)evt.getArg();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"handleViewChange(view, true);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case Event.MSG:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.warn(""exception occurred decrypting message"", e);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Decrypter decrypter=new Decrypter();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
batch.map(decrypter);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
decrypter.unlock();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(!batch.isEmpty()),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
up_prot.up(batch);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(makeServer),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"becomeKeyServer(local_addr, false);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(makeServer || (tmpKeyServer.equals(local_addr))),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"becomeKeyServer(tmpKeyServer, makeServer);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"initSymCiphers(getSymAlgorithm(), getSecretKey());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.error(Util.getMessage(""CouldNotInitializeNewCiphers""), e);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
throw (RuntimeException)e;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyServerAddr=tmpKeyServer;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyServer=true;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
queue_down=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
queue_up=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
queue_up=true;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
queue_down=true;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyServerAddr=newKeyServer;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyServer=false;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
sendKeyRequest();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
EncryptHeader hdr;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(log.isTraceEnabled()),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.trace(""header received %s"", hdr);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case EncryptHeader.ENCRYPT:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
default:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"handleUpEvent(msg,hdr);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"@SuppressWarnings(""UnusedParameters"")",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
upMessageQueue.put(msg);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
drainUpQueue();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.warn(""unrecognised cipher; discarding message"");",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case EncryptHeader.KEY_REQUEST:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
PublicKey tmpKey=generatePubKey(msg.getBuffer());,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"sendSecretKey(getSecretKey(), tmpKey, msg.getSrc());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case EncryptHeader.SECRETKEY:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.debug(""received a secretkey response from keyserver %s"", msg.getSrc());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
SecretKey tmp=decodeKey(msg.getBuffer());,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"setKeys(tmp, hdr.getVersion());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.debug(""decoded secretkey response"");",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"up_prot.up(new Event(Event.MSG, msg));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.error(Util.getMessage(""FailedDecryptingAndSendingMessageUpWhenDrainingQueue""), t);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.trace(""draining %d messages from the down queue"", size);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
encryptAndSend(tmp);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.error(Util.getMessage(""FailedSendingMessageDownWhenDrainingQueue""), t);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"keyMap.put(new AsciiString(getSymVersion()), getSymDecodingCipher());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
setSecretKey(key);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
setSymVersion(version);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
drainDownQueue();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
EncryptHeader hdr=(EncryptHeader)msg.getHeader(this.id);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
cipher=keyMap.get(new AsciiString(hdr.getVersion()));,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.trace(""decrypting using previous cipher version"");",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
byte[] decrypted_msg;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"decrypted_msg=code(msg.getRawBuffer(), msg.getOffset(), msg.getLength(), true);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"decrypted_msg=cipher.doFinal(msg.getRawBuffer(), msg.getOffset(), msg.getLength());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
msg.setBuffer(decrypted_msg);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
ret.setDest(msg.getDest());,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
ret.setSrc(msg.getSrc());,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"tmp=Cipher.getInstance(asymAlgorithm, asymProvider);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
tmp=Cipher.getInstance(asymAlgorithm);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"tmp.init(Cipher.ENCRYPT_MODE,pubKey);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
byte[] encryptedKey=tmp.doFinal(secret.getEncoded());,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"down_prot.down(new Event(Event.MSG,newMsg));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
".putHeader(this.id,new EncryptHeader(EncryptHeader.KEY_REQUEST,getSymVersion()));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
encryptAndSend(msg);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.warn(""unable to send message down"", e);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
case Event.SET_LOCAL_ADDRESS:,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
local_addr=(Address)evt.getArg();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"EncryptHeader hdr=new EncryptHeader(EncryptHeader.ENCRYPT, getSymVersion());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
if(this.encrypt_entire_message),63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
hdr.type|=EncryptHeader.ENCRYPT_ENTIRE_MSG;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
msg.setSrc(local_addr);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Buffer serialized_msg=Util.streamableToBuffer(msg);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"byte[] encrypted_msg=code(serialized_msg.getBuf(),serialized_msg.getOffset(),serialized_msg.getLength(),false);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"down_prot.down(new Event(Event.MSG, tmp));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
".setBuffer(code(msg.getRawBuffer(),msg.getOffset(),msg.getLength(),false));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"down_prot.down(new Event(Event.MSG,msgEncrypted));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Lock lock=decode? decoding_locks[index] : encoding_locks[index];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Cipher cipher=decode? decoding_ciphers[index] : encoding_ciphers[index];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
lock.lock();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
lock.unlock();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
byte[] keyBytes;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
keyBytes=asymCipher.doFinal(encodedKey);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"SecretKeySpec keySpec=new SecretKeySpec(keyBytes, getAlgorithm(symAlgorithm));",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
Cipher temp;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"temp=Cipher.getInstance(symAlgorithm, symProvider);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
temp=Cipher.getInstance(symAlgorithm);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"temp.init(Cipher.SECRET_KEY, keySpec);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"log.error(Util.getMessage(""FailedDecodingKey""), e);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
PublicKey pubKey=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
KeyFactory KeyFac=KeyFactory.getInstance(getAlgorithm(asymAlgorithm));,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
X509EncodedKeySpec x509KeySpec=new X509EncodedKeySpec(encodedKey);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
pubKey=KeyFac.generatePublic(x509KeySpec);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
e.printStackTrace();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"/** Decrypts all messages in a batch, replacing encrypted messages in-place with their decrypted versions */",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
protected Lock   lock;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
protected Cipher cipher;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"queueUpMessage(msg, batch);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
lock=decoding_locks[index];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
cipher=decoding_ciphers[index];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"batch.replace(msg, tmpMsg);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"msg.getSrc(), msg.getOffset(), msg.getLength(), msg.getRawBuffer().length, e, msg.printHeaders());",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
"handleUpEvent(msg, hdr);",63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
lock=null;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
batch.remove(msg);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
protected byte[] version;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
this.type=type;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
this.version=version;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
out.writeByte(type);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
out.writeShort(version.length);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
out.write(version);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
type=in.readByte();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
short len=in.readShort();,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
version=new byte[len];,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
in.readFully(version);,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
retval+=version.length;,63fe226fb66056b6c96026aa2d389d8632df64d2,0,1
// get the resulting message from the peer - should be a key request to peer2,73540c69c03cfb3e5fd70c631d34d58bea88d352,8,1
// get the resulting message from the peer - should be a key request,73540c69c03cfb3e5fd70c631d34d58bea88d352,7,1
// set up peer2 with server as key server,73540c69c03cfb3e5fd70c631d34d58bea88d352,7,1
//	set the server up as key server,73540c69c03cfb3e5fd70c631d34d58bea88d352,7,1
// set up the peer,73540c69c03cfb3e5fd70c631d34d58bea88d352,5,1
// send to peer - which should have peer2 as its key server,73540c69c03cfb3e5fd70c631d34d58bea88d352,5,1
//	set the server up as keyserver,73540c69c03cfb3e5fd70c631d34d58bea88d352,5,1
// test the default asymetric key,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// test the default symetric key,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// set in the observer,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// assert that message is queued as we have no key,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// send a view change to trigger the become key server,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// this should have changed us to the key server,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// set up server,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// set up peer,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// encrypt and send an initial message to peer,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
//assert that reply is the session key encrypted with peer's public key,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// make sure we have the events now in the up layers,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// set up peer as if it has started but not recieved view change,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// send an encrypted message from the server,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
// send to peer - should set peer2 as keyserver,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
static class MockProtocol extends Protocol {,73540c69c03cfb3e5fd70c631d34d58bea88d352,4,1
* To change the template for this generated file go to,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
public class ENCRYPTAsymmetricTest {,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
// we use the fact that our address is now the controller one,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
//assert that message is queued as we have no key from server,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
// assert that peer\ keyserver address is now set,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
// assert that both now have same key,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
// send another encrypted message to peer to test queue,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
// create peer and server,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
// sent to peer encrypted - should be queued in encyption layer as we do not have a keyserver set,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
//	Update the view with new member,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
public Object down(Event evt) {,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
public Object up(Event evt) {,73540c69c03cfb3e5fd70c631d34d58bea88d352,3,1
* Window - Preferences - Java - Code Generation - Code and Comments,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
import org.testng.annotations.Test;,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testInitNoProperties() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
ENCRYPT encrypt=new ENCRYPT();,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testInitBCAsymProperties() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
//Strangely this returns differently from the default provider for RSA which is also BC!,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testInitIDEAProperties() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testInitAESProperties() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testViewChangeBecomeKeyserver() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// produce encrypted message,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// send another encrypted message,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// we should have three messages now in our observer that are decrypted,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testViewChangeNewKeyServer() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
ENCRYPT peer=new ENCRYPT();,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
ENCRYPT server=new ENCRYPT();,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"Event viewChange = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// send a view change where we are not the controller,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// send this event to server,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// now send back to peer,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public static void testViewChangeNewKeyServerNewKey() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
ENCRYPT peer2=new ENCRYPT();,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"Event serverEvent = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"Event event = new Event(Event.VIEW_CHANGE, View.create(peer2_addr, 2, peer2_addr));",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// ensure type and that request contains peers pub key,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public void testKeyChangesDuringKeyServerChange() throws Exception {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
// create peers and server,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"Event viewChange2 = new Event(Event.VIEW_CHANGE, View.create(peer2_addr, 2, peer2_addr));",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"Event initalView = new Event(Event.VIEW_CHANGE, View.create(server_addr, 1, server_addr));",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"Event updatedView = new Event(Event.VIEW_CHANGE, View.create(server_addr, 2, peer_addr));",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
"private static void updateViewFor(ENCRYPT peer, ENCRYPT keyServer, MockProtocol serverObserver, Event serverEvent,",73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
public void up(MessageBatch batch) {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
protected Event getLatestUpMessage() {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
protected Event getLatestDownMessage() {,73540c69c03cfb3e5fd70c631d34d58bea88d352,2,1
* Created on 04-Jul-2004,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
*,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.jgroups.*;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.jgroups.conf.ClassConfigurator;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.jgroups.protocols.ENCRYPT.EncryptHeader;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.jgroups.stack.Protocol;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.jgroups.util.MessageBatch;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.jgroups.util.Util;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.testng.Assert;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import org.testng.annotations.BeforeClass;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import javax.crypto.Cipher;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import javax.crypto.SecretKey;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import java.security.MessageDigest;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import java.security.Security;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
import java.util.TreeMap;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
* @author xenephon,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
* @author Bela Ban,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"protected static final Address encrypt_addr=Util.createRandomAddress(""encrypt"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"protected static final Address server_addr=Util.createRandomAddress(""server"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"protected static final Address peer_addr=Util.createRandomAddress(""peer"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"protected static final Address peer2_addr=Util.createRandomAddress(""peer2"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
static void initProvider() {,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""RSA"".equals(encrypt.getAsymAlgorithm());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getAsymInit() == 512;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""RSA"".equals(encrypt.getKpair().getPublic().getAlgorithm());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""X.509"".equals(encrypt.getKpair().getPublic().getFormat());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getKpair().getPublic().getEncoded() != null;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""AES"".equals(encrypt.getSymAlgorithm());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getSymInit() == 128;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""AES"".equals(encrypt.getDesKey().getAlgorithm());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""RAW"".equals(encrypt.getDesKey().getFormat());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getDesKey().getEncoded() != null;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
//test the resulting ciphers,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getAsymCipher() != null;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getSymDecodingCipher() != null;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert encrypt.getSymEncodingCipher() != null;,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"assert ""AES"".equals(encrypt.getSymAlgorithm()) : ""expected AES but was "" + encrypt.getSymAlgorithm();",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
Cipher cipher=encrypt.getSymEncodingCipher();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Message msg=new Message().setBuffer(cipher.doFinal(""hello"".getBytes()))",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
".putHeader(ENCRYPT_ID, new EncryptHeader(EncryptHeader.ENCRYPT, symVersion));",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"View tempView=View.create(encrypt_addr,1,encrypt_addr);",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event event=new Event(Event.VIEW_CHANGE, tempView);",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Message msg2=new Message().setBuffer(cipher.doFinal(""hello2"".getBytes()))",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event sent=observer.upMessages.get(""message1"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Util.assertEquals(""hello"", new String(((Message)sent.getArg()).getBuffer()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Util.assertEquals(""hello2"", new String(((Message)sent.getArg()).getBuffer()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
Cipher cipher=server.getSymEncodingCipher();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event sent=peerObserver.downMessages.get(""message0"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Util.assertEquals(new String(((Message)sent.getArg()).getBuffer()), new String(peer.getKpair().getPublic().getEncoded()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event reply=serverObserver.downMessages.get(""message1"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert !peer.getDesKey().equals(server.getDesKey());,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event tempEvt=peerObserver.upMessages.get(""message2"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Util.assertEquals(""hello"", new String(((Message)tempEvt.getArg()).getBuffer()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Util.assertEquals(""hello2"", new String(((Message)tempEvt.getArg()).getBuffer()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
//set the local address and view change to simulate a started instance,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Message msg=new Message().setBuffer(""hello"".getBytes());",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
// message0 is in response to view change,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event encEvt=serverObserver.downMessages.get(""message1"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event reply=peer2Observer.downMessages.get(""message1"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert !peer.getDesKey().equals(peer2.getDesKey());,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert !server.getDesKey().equals(peer2.getDesKey());,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
assert !server.getDesKey().equals(peer.getDesKey());,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
Message msg2=new Message();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event evt2=new Event(Event.MSG, msg2);",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
"Event evt3=peer2Observer.downMessages.get(""message2"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
Event tempEvt=peerObserver.getLatestUpMessage();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
public static void testSymmetricKeyIsChangedOnViewChange() throws Exception{,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
SecretKey key = server.getDesKey();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
MockProtocol peerObserver) {,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
Event peerKeyRequest=peerObserver.getLatestDownMessage();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
Event serverKeyToPeer=serverObserver.getLatestDownMessage();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
throw new UnsupportedOperationException();,73540c69c03cfb3e5fd70c631d34d58bea88d352,1,1
/*,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
*/,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
package org.jgroups.protocols;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
/**,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"@Test(groups=Global.FUNCTIONAL, sequential=false)",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
protected static final short ENCRYPT_ID=ClassConfigurator.getProtocolId(ENCRYPT.class);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
@BeforeClass,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
},73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
encrypt.init();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"System.out.println(""Provider:"" + encrypt.getAsymCipher().getProvider());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"encrypt.asymAlgorithm = ""RSA"";",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
@Test(expectedExceptions=Exception.class),73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"encrypt.symAlgorithm =  ""IDEA"";",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
encrypt.symInit = 128;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"encrypt.symAlgorithm = ""AES"";",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(128, encrypt.getSymInit());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(""AES"", encrypt.getDesKey().getAlgorithm());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(""RAW"", encrypt.getDesKey().getFormat());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertNotNull(encrypt.getDesKey().getEncoded());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertNotNull(encrypt.getSymDecodingCipher());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertNotNull(encrypt.getSymEncodingCipher());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
encrypt.setLocalAddress(encrypt_addr);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
MockProtocol observer=new MockProtocol();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
encrypt.setUpProtocol(observer);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"MessageDigest digest=MessageDigest.getInstance(""MD5"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
digest.reset();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
digest.update(encrypt.getDesKey().getEncoded());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
byte[] symVersion=digest.digest();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
encrypt.keyServer=false;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"encrypt.up(new Event(Event.MSG, msg));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertTrue(observer.upMessages.isEmpty());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
encrypt.up(event);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
".putHeader(ENCRYPT_ID,new EncryptHeader(EncryptHeader.ENCRYPT,symVersion));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"encrypt.up(new Event(Event.MSG, msg2));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(3, observer.upMessages.size());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"sent=observer.upMessages.get(""message2"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.init();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.init();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.keyServer=true;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
MockProtocol serverObserver=new MockProtocol();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.setUpProtocol(serverObserver);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.setDownProtocol(serverObserver);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.setLocalAddress(server_addr);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.up(viewChange);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.setLocalAddress(peer_addr);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
MockProtocol peerObserver=new MockProtocol();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.setUpProtocol(peerObserver);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.setDownProtocol(peerObserver);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.keyServer=false;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
digest.update(server.getDesKey().getEncoded());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"peer.up(new Event(Event.MSG, msg));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertTrue(peerObserver.upMessages.isEmpty());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(viewChange);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(server_addr, peer.getKeyServerAddr());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(((EncryptHeader)((Message)sent.getArg()).getHeader(ENCRYPT_ID)).getType(), EncryptHeader.KEY_REQUEST);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.up(sent);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(((EncryptHeader)((Message)reply.getArg()).getHeader(ENCRYPT_ID)).getType(), EncryptHeader.SECRETKEY);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(reply);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(peer.getDesKey(), server.getDesKey());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"peer.up(new Event(Event.MSG, msg2));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(3,peerObserver.upMessages.size());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"tempEvt=peerObserver.upMessages.get(""message3"");",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.init();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.up(serverEvent);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.setLocalAddress(peer2_addr);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
MockProtocol peer2Observer=new MockProtocol();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.setUpProtocol(peer2Observer);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.setDownProtocol(peer2Observer);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.keyServer=false;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.setKeyServerAddr(server_addr);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"server.down(new Event(Event.MSG, msg));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(encEvt);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"updateViewFor(peer, server, serverObserver, serverEvent, peerObserver);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertFalse(peerObserver.upMessages.isEmpty());,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(event);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(peer2_addr, peer.getKeyServerAddr());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.up(event);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.up(sent);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(peer.getDesKey(), peer2.getDesKey());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"msg2.setBuffer(""hello2"".getBytes());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.down(evt2);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(evt3);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Util.assertEquals(4, peerObserver.upMessages.size());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"server.up(new Event(Event.TMP_VIEW, serverEvent.getArg()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"updateViewFor(peer2, server, serverObserver, serverEvent, peer2Observer);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Assert.assertEquals(server.getDesKey().getEncoded(), peer.getDesKey().getEncoded());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Assert.assertEquals(server.getDesKey().getEncoded(), peer2.getDesKey().getEncoded());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"peer2.up(new Event(Event.TMP_VIEW, viewChange2.getArg()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer2.up(viewChange2);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"updateViewFor(peer, peer2, peer2Observer, viewChange2, peerObserver);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Assert.assertFalse(server.getDesKey().equals(peer.getDesKey()));,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"Assert.assertEquals(peer.getDesKey().getEncoded(), peer2.getDesKey().getEncoded());",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.changeKeysOnViewChange=true;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"server.up(new Event(Event.TMP_VIEW, initalView.getArg()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.up(initalView);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"server.up(new Event(Event.TMP_VIEW, updatedView.getArg()));",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
server.up(updatedView);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
SecretKey keyAfterViewChange = server.getDesKey();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
Util.assertFalse(key.equals(keyAfterViewChange));,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(serverEvent);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
keyServer.up(peerKeyRequest);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
peer.up(serverKeyToPeer);,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"private final TreeMap<String, Event> upMessages=new TreeMap<>();",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"private final TreeMap<String, Event> downMessages=new TreeMap<>();",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
private int counter;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"downMessages.put(""message"" + counter++, evt);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
return null;,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
"upMessages.put(""message"" + counter++, evt);",73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
return upMessages.isEmpty()? null : upMessages.lastEntry().getValue();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
return downMessages.isEmpty()? null : downMessages.lastEntry().getValue();,73540c69c03cfb3e5fd70c631d34d58bea88d352,0,1
public static void testEncryptHeader() throws Exception {,988c55f94ede6951168bd0748f6eec8c7c444154,6,1
public void testEncryptHeader() throws Exception {,988c55f94ede6951168bd0748f6eec8c7c444154,5,0
"EncryptHeader hdr=new EncryptHeader(EncryptHeader.ENCRYPT, new byte[]{'b','e', 'l', 'a'});",988c55f94ede6951168bd0748f6eec8c7c444154,0,0
"hdr=new EncryptHeader(EncryptHeader.ENCRYPT, ""Hello"".getBytes()).signature(""bla"".getBytes());",988c55f94ede6951168bd0748f6eec8c7c444154,0,0
"ENCRYPT.EncryptHeader hdr=new ENCRYPT.EncryptHeader((byte)1, new byte[]{'b','e', 'l', 'a'});",988c55f94ede6951168bd0748f6eec8c7c444154,0,1
"hdr=new ENCRYPT.EncryptHeader((byte)2, ""Hello world"".getBytes());",988c55f94ede6951168bd0748f6eec8c7c444154,0,1
boolean successfulFlush = false;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,3,1
"public static boolean startFlush(Channel c, List<Address> flushParticipants, int numberOfAttempts,  long randomSleepTimeoutFloor,long randomSleepTimeoutCeiling) {",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,2,1
"successfulFlush = c.startFlush(flushParticipants, false);",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,2,1
successfulFlush = c.startFlush(false);,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,2,1
"public static boolean startFlush(Channel c, List<Address> flushParticipants,",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,0
"int numberOfAttempts, long randomSleepTimeoutFloor, long randomSleepTimeoutCeiling) {",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,0
int attemptCount = 0;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,0
} catch (Exception e) {,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,0
},69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,0
} catch(Exception e) {,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,0
int attemptCount = 0;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,1
},69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,1
return successfulFlush;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,1,1
while (attemptCount < numberOfAttempts) {,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
try {,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
"c.startFlush(flushParticipants, false);",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
return true;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
"Util.sleepRandom(randomSleepTimeoutFloor, randomSleepTimeoutCeiling);",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
attemptCount++;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
return false;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
try{,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
c.startFlush(false);,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,0
while(attemptCount < numberOfAttempts){,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,1
if(successfulFlush),69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,1
break;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,1
"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);",69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,1
attemptCount++;,69fd924f2aeae67945ecb6dd0e68f6cfeba45449,0,1
"* @version $Id: FlushTest.java,v 1.90 2009/10/14 15:44:00 vlada Exp $",f9841f57c53e3217d008226f3c0df3c3db92e45d,7,0
"* @version $Id: FlushTest.java,v 1.89 2009/10/14 13:01:09 belaban Exp $",f9841f57c53e3217d008226f3c0df3c3db92e45d,6,1
"+ "" timed out waiting for flush responses after """,f9841f57c53e3217d008226f3c0df3c3db92e45d,4,0
"+ "" ms. Rejected flush to participants """,f9841f57c53e3217d008226f3c0df3c3db92e45d,4,0
"+ "" ms. Rejecting flush to participants """,f9841f57c53e3217d008226f3c0df3c3db92e45d,4,1
"successfulFlush=(Boolean)up_prot.up(new Event(Event.SUSPEND, new ArrayList<Address>(new_view.getMembers())));",f9841f57c53e3217d008226f3c0df3c3db92e45d,4,1
"public static boolean startFlush(Channel c, List<Address> flushParticipants, int numberOfAttempts,  long randomSleepTimeoutFloor,long randomSleepTimeoutCeiling) {",f9841f57c53e3217d008226f3c0df3c3db92e45d,4,1
FlushStartResult r = flush_promise.getResultWithTimeout(start_flush_timeout);,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,0
"flush_promise.setResult(new FlushStartResult(Boolean.FALSE, new Exception(""Flush failed for "" + msg.getSrc())));",f9841f57c53e3217d008226f3c0df3c3db92e45d,3,0
private boolean startFlush(List<Address> flushParticipants) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,1
boolean successfulFlush = false;,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,1
Boolean r = flush_promise.getResultWithTimeout(start_flush_timeout);,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,1
successfulFlush = r.booleanValue();,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,1
"+ "": timed out waiting for flush responses after """,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,1
"up_prot.up(new Event(Event.SUSPEND, new ArrayList<Address>(new_view.getMembers())));",f9841f57c53e3217d008226f3c0df3c3db92e45d,3,0
"int numberOfAttempts, long randomSleepTimeoutFloor, long randomSleepTimeoutCeiling) {",f9841f57c53e3217d008226f3c0df3c3db92e45d,3,0
boolean successfulFlush = false;,f9841f57c53e3217d008226f3c0df3c3db92e45d,3,1
"private static final FlushStartResult SUCCESS_START_FLUSH = new FlushStartResult(Boolean.TRUE,null);",f9841f57c53e3217d008226f3c0df3c3db92e45d,2,0
private final Promise<FlushStartResult> flush_promise = new Promise<FlushStartResult>();,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,0
private void startFlush(List<Address> flushParticipants) throws RuntimeException {,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,0
+ start_flush_timeout,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,0
private final Promise<Boolean> flush_promise = new Promise<Boolean>();,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,1
+ start_flush_timeout,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,1
successfulFlush = true;,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,0
"public static boolean startFlush(Channel c, List<Address> flushParticipants,",f9841f57c53e3217d008226f3c0df3c3db92e45d,2,0
"successfulFlush = c.startFlush(flushParticipants, false);",f9841f57c53e3217d008226f3c0df3c3db92e45d,2,1
successfulFlush = c.startFlush(false);,f9841f57c53e3217d008226f3c0df3c3db92e45d,2,1
Util.shutdown(c2); // kill the flush coord: failure detection will kick in in a few seconds and remove C2,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
throw new RuntimeException(r.getFailureCause());,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
throw new RuntimeException(localAddress,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
"+ flushParticipants,e);",f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
"throw new RuntimeException(""Flush attempt is in progress"");",f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
},f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
this.result = result;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
this.failureCause = failureCause;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
public boolean failed(){,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
public boolean startFlush() {,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
private boolean startFlush(Event evt) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
+ flushParticipants);,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
return successfulFlush;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
boolean successfulFlush=false;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
} catch (Exception e) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
},f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
boolean successfulFlush=true;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
if(successfulFlush),f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
int attemptCount = 0;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
} catch (Exception e) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
},f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
} catch(Exception e) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,0
int attemptCount = 0;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
if(successfulFlush),f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
},f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
return successfulFlush;,f9841f57c53e3217d008226f3c0df3c3db92e45d,1,1
// send out START_FLUSH but call Util.shutdown(Channel) right after,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
//failure detection will kick in in a few seconds and remove C2,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
//C3 should call STOP_FLUSH,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
c2.downcall(new Event(Event.SUSPEND_BUT_FAIL));,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
Util.startFlush(c2);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
public void startFlush() {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
startFlush(new Event(Event.SUSPEND));,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
private void startFlush(Event evt) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
startFlush(flushParticipants);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
if(r.failed()),f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
else {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
startFlush(evt);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
break;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
"flush_promise.setResult(new FlushStartResult(Boolean.TRUE,null));",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
flush_promise.setResult(SUCCESS_START_FLUSH);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
private static class FlushStartResult {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
private final Boolean result;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
private final Exception failureCause;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
"public FlushStartResult(Boolean result, Exception failureCause) {",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
public Boolean getResult() {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
return result;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
return result == Boolean.FALSE;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
public Exception getFailureCause() {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
return failureCause;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
return startFlush(new Event(Event.SUSPEND));,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
return startFlush(flushParticipants);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
if (log.isDebugEnabled()),f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
log.debug(localAddress,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
return startFlush(evt);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
flush_promise.setResult(Boolean.TRUE);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
flush_promise.setResult(Boolean.FALSE);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
while (attemptCount < maxAttempts) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
try {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
"Util.sleepRandom(randomFloor, randomCeiling);",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
attemptCount++;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
while(attemptCount < maxAttempts){,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
"Util.sleepRandom(randomFloor,randomCeiling);",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
attemptCount++;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
while (attemptCount < numberOfAttempts) {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
try {,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
"c.startFlush(flushParticipants, false);",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
return true;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
"Util.sleepRandom(randomSleepTimeoutFloor, randomSleepTimeoutCeiling);",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
attemptCount++;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
return false;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
try{,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
c.startFlush(false);,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,0
while(attemptCount < numberOfAttempts){,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
break;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
"Util.sleepRandom(randomSleepTimeoutFloor,randomSleepTimeoutCeiling);",f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
attemptCount++;,f9841f57c53e3217d008226f3c0df3c3db92e45d,0,1
