line,commit_id,count,line_level_label
"group = security_group_get_by_name(context, project_id, group_name)",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,5,1
"def security_group_exists(context, project_id, group_name):",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,3,1
msg = _('Security group %s already exists') % name,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,2,0
msg = _('Security group %s already exists') % name,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,2,1
"return IMPL.security_group_exists(context, project_id, group_name)",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,2,1
"group_ref = self.db.security_group_create(context, group)",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,1,0
name = security_group_ref['name'],9196b74080d5effd8dcfacce9de7d2dd37fcba1b,1,0
project_id = security_group_ref['project_id'],9196b74080d5effd8dcfacce9de7d2dd37fcba1b,1,0
"group_ref = self.db.security_group_create(context, group)",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,1,1
"""""""Indicates if a group name exists in a project.""""""",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,1,1
return group is not None,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,1,1
try:,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
except exception.SecurityGroupExists:,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
self.raise_group_already_exists(msg),9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
security_group_ref.save(session=session),9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
except db_exc.DBDuplicateEntry:,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
raise exception.SecurityGroupExists(,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
"project_id=values['project_id'],",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
security_group_name=values['name']),9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
"project_id=project_id,",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
security_group_name=name),9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
return security_group_ref,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,0
"if self.db.security_group_exists(context,",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
"context.project_id, name):",9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
self.raise_group_already_exists(msg),9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
security_group_ref.save(session=session),9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
@require_context,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
try:,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
except exception.NotFound:,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
return False,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
return security_group_ref,9196b74080d5effd8dcfacce9de7d2dd37fcba1b,0,1
req = fakes.HTTPRequest.blank(path),f200587ce068482ab94e777154de3ac777269fa0,1,0
req = webob.Request.blank(path),f200587ce068482ab94e777154de3ac777269fa0,1,1
import webob,f200587ce068482ab94e777154de3ac777269fa0,0,1
Rescue an instance on this host.,c524508bc58aa561b81c3133526c981cce835a59,5,0
"""""""Rescue an instance on this host.""""""",c524508bc58aa561b81c3133526c981cce835a59,5,1
"def rescue_instance(self, context, instance_id):",c524508bc58aa561b81c3133526c981cce835a59,3,1
"def rescue_instance(self, context, instance_id, **kwargs):",c524508bc58aa561b81c3133526c981cce835a59,2,0
:param rescue_password: password to set on rescue instance,c524508bc58aa561b81c3133526c981cce835a59,2,0
"""""""",c524508bc58aa561b81c3133526c981cce835a59,1,0
"instance_ref.admin_pass = kwargs.get('rescue_password',",c524508bc58aa561b81c3133526c981cce835a59,1,0
utils.generate_password(FLAGS.password_length)),c524508bc58aa561b81c3133526c981cce835a59,0,0
"flags.DEFINE_integer('password_length', 12,",c524508bc58aa561b81c3133526c981cce835a59,0,1
'Length of generated admin passwords'),c524508bc58aa561b81c3133526c981cce835a59,0,1
"fpath = self._append_to_file(data, console_log)",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,2,0
# Xen is special,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,2,1
"fpath = self._append_to_file(data, console_log)",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,2,1
"def _flush_libvirt_console(self, pty):",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"out, err = utils.execute('dd',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"'if=%s' % pty,",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
check_exit_code=False),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
return out,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
virt_dom = self._lookup_by_name(instance['name']),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
xml = virt_dom.XMLDesc(0),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
tree = ElementTree.fromstring(xml),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"node = tree.find(""./devices/console[@type='file']/source"")",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
if node is not None:,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"fpath = node.get(""path"")",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
return libvirt_utils.load_file(fpath),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"# else if there is a PTY, then try to read latest data from that",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"node = tree.find(""./devices/console[@type='pty']/source"")",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
if node is None:,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"pty = node.get(""path"")",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
data = self._flush_libvirt_console(pty),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,0
"def _flush_libvirt_console(self, virsh_output):",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
virsh_output = virsh_output[0].strip(),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
"out, err = utils.execute('dd',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
"'if=%s' % virsh_output,",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
check_exit_code=False),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
return out,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
return '',a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
"virsh_output = utils.execute('virsh',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
data = self._flush_libvirt_console(virsh_output),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
# LXC is also special,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
fpath = console_log,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,1,1
"'iflag=nonblock',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,0
"run_as_root=True,",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,0
# If the guest has a console logging to a file prefer to use that,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,0
"raise exception.Error(_(""Guest does not have a console available""))",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,0
"LOG.info(_('virsh said: %r'), virsh_output)",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
if virsh_output.startswith('/dev/'):,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
"LOG.info(_(""cool, it's a device""))",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
"'iflag=nonblock',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
"run_as_root=True,",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
else:,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
if FLAGS.libvirt_type == 'xen':,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
"'ttyconsole',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
instance['name']),a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
elif FLAGS.libvirt_type == 'lxc':,a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
"'-c',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
"'lxc:///',",a3d003d7ec92f3ae23a667954a790c71efdbfdbe,0,1
pass  # omit the filter to include deleted and active,64dd3000c4a9b88719e86d1090097e35398d3838,4,0
"""""""Indicates if the context has access to deleted objects.""""""",64dd3000c4a9b88719e86d1090097e35398d3838,4,1
":param session: if present, the session to use",64dd3000c4a9b88719e86d1090097e35398d3838,3,0
# FIXME(sirp): shouldn't we just use project_only here to restrict the,64dd3000c4a9b88719e86d1090097e35398d3838,3,0
# NOTE(sirp): shouldn't we just use project_only here to restrict the,64dd3000c4a9b88719e86d1090097e35398d3838,3,0
result = {},64dd3000c4a9b88719e86d1090097e35398d3838,3,0
# TODO(sirp): this patern of converting rows to a result with extra_specs,64dd3000c4a9b88719e86d1090097e35398d3838,3,0
if not tk:,64dd3000c4a9b88719e86d1090097e35398d3838,3,1
session = session if session else get_session(),64dd3000c4a9b88719e86d1090097e35398d3838,3,1
:param context: context to query under,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
":param project_only: if present and context is user-type, then restrict",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
query to match the context's project_id.,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
session = kwargs.get('session') or get_session(),64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Service, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Service, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Service).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.ComputeNode, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Certificate, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.FloatingIp, project_only=True).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.FloatingIp, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.FixedIp, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.FixedIp, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.FixedIp, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.FixedIp, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
if not result:,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
return result,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _build_instance_get(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"def instance_get_all_by_user(context, user_id):",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.KeyPair, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Network, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Network, read_deleted=""no"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Network, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _network_get_query(context).filter_by(bridge=bridge).first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _network_get_query(context).filter_by(uuid=uuid).first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _network_get_query(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
# NOTE(vish): return networks that have host set,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.AuthToken, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"def auth_token_create(context, token):",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Quota, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = {'project_id': project_id},64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _volume_get_query(context, session=session, project_only=True).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Volume, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _volume_get_query(context).filter_by(id=volume_id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.IscsiTarget, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _volume_metadata_get_query(context, volume_id, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Snapshot, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _block_device_mapping_get_query(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _security_group_get_query(context, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _security_group_get_query(context, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _security_group_rule_get_query(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.User, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Project, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Migration, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Migration, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.ConsolePool, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
# NOTE(mdragon): consoles are meant to be transient.,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.Console, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
if instance_id is not None:,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = query.first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"read_deleted = ""yes"" if inactive else ""no""",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _instance_type_get_query(context, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _zone_get_by_id_query(context, zone_id).first()",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _instance_metadata_get_query(,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
if not session:,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
session = get_session(),64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _instance_type_extra_specs_get_query(,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
filters = filters or {},64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.VolumeTypes, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
result = _volume_type_extra_specs_query(,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _vsa_get_query(context, session=session, project_only=True).\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.S3Image, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
# `purge` actually deleting the record?,64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = model_query(context, models.SMBackendConf, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _sm_flavor_get_query(context, sm_flavor_label).first()",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
"result = _sm_volume_get_query(context, volume_id).first()",64dd3000c4a9b88719e86d1090097e35398d3838,2,0
if not context:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not session:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
session = get_session(),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Service).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.ComputeNode).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Certificate).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = None,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.FloatingIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.FixedIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not rv:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
"result = session.query(func.count(models.Instance.id),",64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = partial.filter_by(uuid=uuid),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = result.first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = partial.filter_by(id=instance_id),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
"def instance_get_all_by_user(context, user_id):",64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.KeyPair).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Network).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
# NOTE(vish): return networks that have host set,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
tk = session.query(models.AuthToken).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
return tk,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
"def auth_token_create(_context, token):",64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Quota).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = {'project_id': project_id},64dd3000c4a9b88719e86d1090097e35398d3838,2,1
"result = session.query(func.count(models.Volume.id),",64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Volume).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.IscsiTarget).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
meta_dict = {},64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not meta_result:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Snapshot).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.BlockDeviceMapping).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not result:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
return result,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.SecurityGroup).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.SecurityGroupIngressRule).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
# TODO(vish): Join to group and check for project_id,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.User).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Project).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Migration).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.ConsolePool).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
# consoles are meant to be transient. (mdragon),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Console).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = query.options(joinedload('pool')).first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not inactive:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not inst_type:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not zone:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.Zone).filter_by(id=zone_id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
spec_dict = {},64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not spec_result:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
vol_dict = {},64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not vol_type:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.VirtualStorageArray).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not res:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.SMBackendConf).\,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.SMBackendConf).filter_by(sr_uuid=sr_uuid),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not sm_flavor:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.SMFlavors).filter_by(label=sm_flavor),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
if not sm_volume:,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
result = session.query(models.SMVolume).filter_by(id=volume_id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,2,1
from nova import auth,64dd3000c4a9b88719e86d1090097e35398d3838,2,1
"def model_query(context, *args, **kwargs):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
":param read_deleted: if present, overrides context's read_deleted field.",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
read_deleted = kwargs.get('read_deleted') or context.read_deleted,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
project_only = kwargs.get('project_only'),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
query = session.query(*args),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
if read_deleted == 'no':,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
query = query.filter_by(deleted=False),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
query = query.filter_by(deleted=True),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise Exception(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
if project_only and is_user_context(context):,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
query = query.filter_by(project_id=context.project_id),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return query,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"query = model_query(context, models.Service)",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Service, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Service,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"subq = model_query(context, models.Instance.host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"subq = model_query(context, models.Network.host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"subq = model_query(context, models.Volume.host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.ComputeNode, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Certificate, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def certificate_get_all_by_user_and_project(context, user_id, project_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"floating_ip_ref = model_query(context, models.FloatingIp,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.FloatingIp, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
def _floating_ip_get_all(context):,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
floating_ip_refs = _floating_ip_get_all(context).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
floating_ip_refs = _floating_ip_get_all(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _floating_ip_get_all(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.FloatingIp, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"fixed_ip_ref = model_query(context, models.FixedIp, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def fixed_ip_create(context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def fixed_ip_bulk_create(context, ips):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def fixed_ip_disassociate_all_by_timeout(context, host, time):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"inner_q = model_query(context, models.Network.id, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
# results?,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _virtual_interface_query(context, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.VirtualInterface, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"vif_ref = _virtual_interface_query(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
vif_ref = _virtual_interface_query(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
vif_refs = _virtual_interface_query(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
vif_refs = _virtual_interface_query(context).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Instance, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Instance).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _instance_get_all_query(context, project_only=False):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Instance, project_only=project_only).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _instance_get_all_query(context).filter_by(user_id=user_id).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _instance_get_all_query(context).filter_by(host=host).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _instance_get_all_query(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return _instance_get_all_query(context, project_only=True).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.KeyPair, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Network, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Network).count()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _network_ips_query(context, network_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.FixedIp, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return _network_ips_query(context, network_id).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"network_ref = network_get(context, network_id=network_id,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"# FIXME(sirp): since this returns fixed_ips, this would be better named",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
# fixed_ip_get_all_by_network.,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _network_get_query(context, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def network_get_by_instance(context, instance_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def network_get_all_by_instance(context, instance_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
#             or that have a fixed ip with host set,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"host_filter = or_(models.Network.host == host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _network_get_query(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"network_ref = _network_get_query(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def queue_get_for(context, topic, physical_node_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.IscsiTarget).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"rows = model_query(context, models.Quota, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"quotas = model_query(context, models.Quota, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"iscsi_target_ref = model_query(context, models.IscsiTarget,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _volume_get_query(context, session=None, project_only=False):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Volume, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _volume_get_query(context).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _volume_get_query(context).filter_by(host=host).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _volume_get_query(context).filter_by(project_id=project_id).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _volume_metadata_get_query(context, volume_id, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.VolumeMetadata,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"rows = _volume_metadata_get_query(context, volume_id).all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
result[row['key']] = row['value'],64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Snapshot).all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Snapshot).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _block_device_mapping_get_query(context, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.BlockDeviceMapping, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _block_device_mapping_get_query(context).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _security_group_get_query(context, session=None, read_deleted=None,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SecurityGroup, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _security_group_get_query(context).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.SecurityGroupNotFoundForProject(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return _security_group_get_query(context, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _security_group_rule_get_query(context, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SecurityGroupIngressRule,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return _security_group_rule_get_query(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.ProviderFirewallRule).all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.ProviderFirewallRule).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def user_create(context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.User).all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def project_create(context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Project).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"user = model_query(context, models.User).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Migration, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.ConsolePoolNotFoundForHostType(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.ConsolePool, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.ConsoleNotFoundInPoolForInstance(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Console, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"query = model_query(context, models.Console, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.ConsoleNotFoundForInstance(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def instance_type_create(context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _instance_type_get_query(context, session=None, read_deleted=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.InstanceTypes, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"query = _instance_type_get_query(context, read_deleted=read_deleted)",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
query = query.filter(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"inst_types = query.order_by(""name"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _dict_with_extra_specs(result),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"instance_type_ref = model_query(context, models.InstanceTypes,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
# FIXME(sirp): this should update deleted_at and updated_at as well,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _zone_get_by_id_query(context, zone_id, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Zone, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"zone = zone_get(context, zone_id)",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.Zone, read_deleted=""yes"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _instance_metadata_get_query(context, instance_id, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.InstanceMetadata, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"rows = _instance_metadata_get_query(context, instance_id).all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.AgentBuild, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.AgentBuild, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"agent_build_ref = model_query(context, models.AgentBuild,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.BandwidthUsage, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"bwusage = model_query(context, models.BandwidthUsage,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _instance_type_extra_specs_get_query(context, instance_type_id,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.InstanceTypeExtraSpecs,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
rows = _instance_type_extra_specs_get_query(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.InstanceTypeExtraSpecsNotFound(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def volume_type_create(context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def volume_type_get_all(context, inactive=False, filters=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"rows = model_query(context, models.VolumeTypes,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"# is repeated quite a bit, might be worth creating a method for it",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
result[row['name']] = _dict_with_extra_specs(row),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"volume_type_ref = model_query(context, models.VolumeTypes,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
# FIXME(sirp): we should be setting deleted_at and updated_at here,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _volume_type_extra_specs_query(context, volume_type_id, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.VolumeTypeExtraSpecs, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"rows = _volume_type_extra_specs_query(context, volume_type_id).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.VolumeTypeExtraSpecsNotFound(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _vsa_get_query(context, session=None, project_only=False):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.VirtualStorageArray, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _vsa_get_query(context).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
return _vsa_get_query(context).filter_by(project_id=project_id).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"backend_conf = model_query(context, models.SMBackendConf,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
raise exception.NotFound(,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"# FIXME(sirp): for consistency, shouldn't this just mark as deleted with",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
# FIXME(sirp): shouldn't this have a `first()` qualifier attached?,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SMBackendConf, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _sm_flavor_get_query(context, sm_flavor_label, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SMFlavors, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"sm_flavor = sm_flavor_get(context, sm_flavor_label)",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def sm_flavor_get(context, sm_flavor_label):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SMFlavors, read_deleted=""yes"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"def _sm_volume_get_query(context, volume_id, session=None):",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SMVolume, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"sm_volume = sm_volume_get(context, volume_id)",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
"return model_query(context, models.SMVolume, read_deleted=""yes"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,0
def can_read_deleted(context):,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return False,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return context.read_deleted,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
query = session.query(models.Service).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Service).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
topic = 'compute',64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"return session.query(models.Service, func.coalesce(sort_value, 0)).\",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"subq = session.query(models.Instance.host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"subq = session.query(models.Network.host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"subq = session.query(models.Volume.host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.ComputeNode).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Certificate).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def certificate_get_all_by_user_and_project(_context, user_id, project_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
if is_admin_context(context):,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
floating_ip_ref = session.query(models.FloatingIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.FloatingIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
floating_ip_refs = session.query(models.FloatingIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
fixed_ip_ref = session.query(models.FixedIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def fixed_ip_create(_context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def fixed_ip_bulk_create(_context, ips):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def fixed_ip_disassociate_all_by_timeout(_context, host, time):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
inner_q = session.query(models.Network.id).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
rv = session.query(models.FixedIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return rv,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
vif_ref = session.query(models.VirtualInterface).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
vif_refs = session.query(models.VirtualInterface).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"partial = _build_instance_get(context, session=session)",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
partial = session.query(models.Instance).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
partial = partial.filter_by(deleted=can_read_deleted(context)),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
partial = partial.filter_by(project_id=context.project_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return partial,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Instance).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
read_deleted = can_read_deleted(context),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
query = session.query(models.Instance).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return query.\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.KeyPair).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Network).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.FixedIp).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"network_ref = network_get(context, network_id=network_id, \",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def network_get_by_instance(_context, instance_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
rv = session.query(models.Network).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def network_get_all_by_instance(_context, instance_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
#             or that have a fixed ip with host set,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"host_filter = or_(models.Network.host == host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
network_ref = session.query(models.Network).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def queue_get_for(_context, topic, physical_node_id):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.IscsiTarget).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
if session is None:,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
rows = session.query(models.Quota).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
quotas = session.query(models.Quota).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
iscsi_target_ref = session.query(models.IscsiTarget).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Volume).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
meta_results = session.query(models.VolumeMetadata).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
meta_dict[i['key']] = i['value'],64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return meta_dict,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
meta_result = session.query(models.VolumeMetadata).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return meta_result,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Snapshot).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return [],64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.SecurityGroup).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.SecurityGroupNotFoundForProject(project_id=project_id,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.ProviderFirewallRule).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def user_create(_context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.User).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def project_create(_context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Project).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
user = session.query(models.User).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
results = session.query(models.Migration).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return results,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.ConsolePoolNotFoundForHostType(host=host,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.ConsolePool).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.ConsoleNotFoundInPoolForInstance(pool_id=pool_id,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
results = session.query(models.Console).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
query = session.query(models.Console).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
if instance_id:,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.ConsoleNotFoundForInstance(console_id=console_id,",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def instance_type_create(_context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
partial = session.query(models.InstanceTypes)\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
partial = partial.filter_by(deleted=False),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
partial = partial.filter(,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"inst_types = partial.order_by(""name"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
inst_type = session.query(models.InstanceTypes).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return _dict_with_extra_specs(inst_type),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
instance_type_ref = session.query(models.InstanceTypes).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
zone = session.query(models.Zone).filter_by(id=zone_id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
raise exception.ZoneNotFound(zone_id=zone_id),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.Zone).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
meta_results = session.query(models.InstanceMetadata).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
meta_result = session.query(models.InstanceMetadata).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.AgentBuild).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
agent_build_ref = session.query(models.AgentBuild).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.BandwidthUsage).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
bwusage = session.query(models.BandwidthUsage).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
spec_results = session.query(models.InstanceTypeExtraSpecs).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
spec_dict[i['key']] = i['value'],64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return spec_dict,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
spec_result = session.query(models.InstanceTypeExtraSpecs).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
raise exception.\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return spec_result,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def volume_type_create(_context, values):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def volume_type_get_all(context, inactive=False, filters={}):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
if inactive:,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
vol_types = session.query(models.VolumeTypes).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
if vol_types:,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
vol_dict[i['name']] = _dict_with_extra_specs(i),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return vol_dict,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
vol_type = session.query(models.VolumeTypes).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return _dict_with_extra_specs(vol_type),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
volume_type_ref = session.query(models.VolumeTypes).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
spec_results = session.query(models.VolumeTypeExtraSpecs).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
spec_result = session.query(models.VolumeTypeExtraSpecs).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.VirtualStorageArray).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
res = session.query(models.S3Image)\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return res,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
backend_conf = session.query(models.SMBackendConf).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.NotFound(_(""No backend config with id ""\",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.SMBackendConf).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
sm_flavor = session.query(models.SMFlavors).\,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.NotFound(_(""No sm_flavor with id ""\",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"def sm_flavor_get(context, sm_flavor):",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.NotFound(_(""No sm_flavor called %(sm_flavor)s"") \",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.SMFlavors).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
sm_volume = session.query(models.SMVolume).filter_by(id=volume_id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"raise exception.NotFound(_(""No sm_volume with id %(volume_id)s"") \",64dd3000c4a9b88719e86d1090097e35398d3838,1,1
return session.query(models.SMVolume).all(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
_x_server_url = 'X-Server-Management-Url',64dd3000c4a9b88719e86d1090097e35398d3838,1,0
_server_url = 'server_management_url',64dd3000c4a9b88719e86d1090097e35398d3838,1,0
res.headers[_x_server_url] = token[_server_url],64dd3000c4a9b88719e86d1090097e35398d3838,1,0
_x_storage_url = 'X-Storage-Url',64dd3000c4a9b88719e86d1090097e35398d3838,1,0
_storage_url = 'storage_url',64dd3000c4a9b88719e86d1090097e35398d3838,1,0
res.headers[_x_storage_url] = token[_storage_url],64dd3000c4a9b88719e86d1090097e35398d3838,1,0
_x_cdn_url = 'X-CDN-Management-Url',64dd3000c4a9b88719e86d1090097e35398d3838,1,0
_cdn_url = 'cdn_management_url',64dd3000c4a9b88719e86d1090097e35398d3838,1,0
res.headers[_x_cdn_url] = token[_cdn_url],64dd3000c4a9b88719e86d1090097e35398d3838,1,0
res.headers['X-Server-Management-Url'] = \,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
res.headers['X-Storage-Url'] = token['storage_url'],64dd3000c4a9b88719e86d1090097e35398d3838,1,1
res.headers['X-CDN-Management-Url'] = \,64dd3000c4a9b88719e86d1090097e35398d3838,1,1
from nova.auth import manager,64dd3000c4a9b88719e86d1090097e35398d3838,1,0
self.auth = manager.AuthManager(),64dd3000c4a9b88719e86d1090097e35398d3838,1,0
self.auth = auth.manager.AuthManager(),64dd3000c4a9b88719e86d1090097e35398d3838,1,1
"""""""Query helper that accounts for context's `read_deleted` field.",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"""""""",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
elif read_deleted == 'yes':,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
elif read_deleted == 'only':,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
else:,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_(""Unrecognized read_deleted value '%s'"") % read_deleted)",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(disabled=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(topic=topic).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
all(),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(host=host).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
first(),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('compute_node')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"filter_by(topic=""compute"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.coalesce(sort_value, 0),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"session=session, read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"outerjoin((subq, models.Service.host == subq.c.host)).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
order_by(sort_value).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.sum(models.Instance.vcpus).label(label),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.count(models.Network.id).label(label),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.sum(models.Volume.size).label(label),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('fixed_ip')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload_all('fixed_ip.instance')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
@require_admin_context,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload_all('fixed_ip.instance')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"read_deleted=""no"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
@require_context,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('fixed_ips')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.count(models.Instance.id),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.sum(models.Instance.vcpus),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.sum(models.Instance.memory_mb),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(uuid=uuid).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=instance_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
project_only=True).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('instance_type')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(project_id=project_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(instance_id=instance_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(network_id=network_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(allocated=True).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
count(),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(allocated=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(reserved=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(reserved=True).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=network_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
models.Network.project_id == None),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter(models.Network.uuid.in_(network_uuids)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter(project_or_none).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload_all('instance')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(network_id=network_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter(models.FixedIp.instance_id != None).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter(models.FixedIp.virtual_interface_id != None).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"read_deleted=""no"")",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
models.FixedIp.host == host),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.count(models.Volume.id),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"func.sum(models.Volume.size),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
project_only=project_only).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('instance')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('volume_metadata')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('volume_type')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=volume_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(volume_id=volume_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
for row in rows:,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_volume_metadata_get_query(context, volume_id).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=snapshot_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_block_device_mapping_get_query(context, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(instance_id=values['instance_id']).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(virtual_name=virtual_name).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter(models.BlockDeviceMapping.device_name !=,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
values['device_name']).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"update({'deleted': True,",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"'deleted_at': utils.utcnow(),",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
'updated_at': literal_column('updated_at')}),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(volume_id=volume_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
project_only=False):,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"read_deleted=read_deleted, project_only=project_only).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload_all('rules')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=security_group_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload_all('instances')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"project_id=project_id, security_group_id=group_name)",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
session=session),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(status=status).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"filter_by(status=""FINISHED"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"host=host, console_type=console_type,",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
compute_host=compute_host),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"pool_id=pool_id, instance_id=instance_id)",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=console_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('pool')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"console_id=console_id, instance_id=instance_id)",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
##################,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
read_deleted=read_deleted).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('extra_specs')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(flavorid=flavor_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(name=name),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=zone_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_zone_get_by_id_query(context, zone_id, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(instance_id=instance_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_instance_metadata_get_query(context, instance_id).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"context, instance_id, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"model_query(context, models.AgentBuild, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"session=session, read_deleted=""yes"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=agent_build_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
session=None):,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(instance_type_id=instance_type_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"context, instance_type_id).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
_instance_type_extra_specs_get_query(,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"context, instance_type_id, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"extra_specs_key=key, instance_type_id=instance_type_id)",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(volume_type_id=volume_type_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_volume_type_extra_specs_query(context, volume_type_id).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"context, volume_type_id, session=session).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"extra_specs_key=key, volume_type_id=volume_type_id)",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
####################,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
options(joinedload('vsa_instance_type')),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=vsa_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=image_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(uuid=image_uuid).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=sm_backend_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_(""No backend config with id %(sm_backend_id)s"") % locals())",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"model_query(context, models.SMBackendConf, session=session,",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(sr_uuid=sr_uuid),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(label=sm_flavor_label),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_sm_flavor_get_query(context, sm_flavor_label).delete()",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_(""No sm_flavor called %(sm_flavor)s"") % locals())",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(id=volume_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_sm_volume_get_query(context, volume_id, session=session).delete()",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
"_(""No sm_volume with id %(volume_id)s"") % locals())",64dd3000c4a9b88719e86d1090097e35398d3838,0,0
filter_by(deleted=can_read_deleted(context)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(deleted=can_read_deleted(context)),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(deleted=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(disabled=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(topic=topic).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
all(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(host=host).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
first(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('compute_node')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"outerjoin((subq, models.Service.host == subq.c.host)).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
order_by(sort_value).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
func.sum(models.Instance.vcpus).label(label)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
func.count(models.Network.id).label(label)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
func.sum(models.Volume.size).label(label)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('fixed_ip')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('fixed_ip.instance')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
elif is_user_context(context):,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(project_id=context.project_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('fixed_ips')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"func.sum(models.Instance.vcpus),",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
func.sum(models.Instance.memory_mb)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(deleted=False),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('instance_type')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(user_id=user_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('fixed_ips.floating_ips')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('security_groups')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('fixed_ips.network')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('metadata')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(deleted=read_deleted).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(project_id=project_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('instance_type')),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(instance_id=instance_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
count(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(network_id=network_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(allocated=True).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(allocated=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(reserved=False).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(reserved=True).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=network_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(deleted=False).all(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
models.Network.project_id == None),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter(models.Network.uuid.in_(network_uuids)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter(project_or_none).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('instance')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter(models.FixedIp.instance_id != None).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter(models.FixedIp.virtual_interface_id != None).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(bridge=bridge).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(uuid=uuid).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
with session.begin():,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
models.FixedIp.host == host),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
func.sum(models.Volume.size)).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('instance')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('volume_metadata')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('volume_type')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=volume_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(volume_id=volume_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
for i in meta_results:,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.VolumeMetadata).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=snapshot_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.BlockDeviceMapping).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(instance_id=values['instance_id']).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(virtual_name=virtual_name).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter(models.BlockDeviceMapping.device_name !=,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
values['device_name']).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"update({'deleted': True,",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"'deleted_at': utils.utcnow(),",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
'updated_at': literal_column('updated_at')}),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('rules')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"filter_by(deleted=can_read_deleted(context),).\",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=security_group_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('instances')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
else:,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
security_group_id=group_name),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=security_group_rule_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(parent_group_id=security_group_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload_all('grantee_group.instances')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(group_id=security_group_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(status=status).first(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"filter_by(status=""FINISHED"").all()",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"console_type=console_type,",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
compute_host=compute_host),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
instance_id=instance_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('pool')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=console_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
##################,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
.options(joinedload('extra_specs')),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('extra_specs')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(flavorid=flavor_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(name=name),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.Zone).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=zone_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.InstanceMetadata).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.AgentBuild).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=agent_build_id). \,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(instance_type_id=instance_type_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
for i in spec_results:,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.InstanceTypeExtraSpecs).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"InstanceTypeExtraSpecsNotFound(extra_specs_key=key,",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
instance_type_id=instance_type_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"order_by(""name"").\",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
for i in vol_types:,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(volume_type_id=volume_type_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.VolumeTypeExtraSpecs).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session=None):,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"VolumeTypeExtraSpecsNotFound(extra_specs_key=key,",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
volume_type_id=volume_type_id),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
####################,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
options(joinedload('vsa_instance_type')).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=vsa_id).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
.filter_by(id=image_id)\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
.first(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
.filter_by(uuid=image_uuid)\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(id=sm_backend_id).first(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"""%(sm_backend_id)s"") % locals())",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.SMBackendConf).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(label=sm_flavor_label),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
"""%(sm_flavor_id)s"") % locals())",64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.SMFlavors).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
filter_by(label=sm_flavor_label).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
delete(),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
% locals()),64dd3000c4a9b88719e86d1090097e35398d3838,0,1
session.query(models.SMVolume).\,64dd3000c4a9b88719e86d1090097e35398d3838,0,1
token['server_management_url'],64dd3000c4a9b88719e86d1090097e35398d3838,0,1
token['cdn_management_url'],64dd3000c4a9b88719e86d1090097e35398d3838,0,1
display_name = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,3,1
display_description = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,3,1
ec2_id = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
user_id = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
project_id = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
host = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
availability_zone = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
mountpoint = Column(String(255)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
status = Column(String(255))  # TODO(vish): enum?,71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
attach_status = Column(String(255))  # TODO(vish): enum,71c41338e4aac98ec03eec1c90ee99e43d51bcb7,2,1
__tablename__ = 'volumes',71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
__table_args__ = (,71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
"id = Column(String(36), primary_key=True, nullable=False)",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
"deleted = Column(String(36), default="""")",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
snapshot_id = Column(String(36)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
size = Column(Integer),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
instance_uuid = Column(String(36)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
attach_time = Column(DateTime),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
scheduled_at = Column(DateTime),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
launched_at = Column(DateTime),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
terminated_at = Column(DateTime),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
provider_location = Column(String(256)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
provider_auth = Column(String(256)),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
volume_type_id = Column(Integer),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
__tablename__ = 'iscsi_targets',71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
"id = Column(Integer, primary_key=True, nullable=False)",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
target_num = Column(Integer),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
"volume_id = Column(String(36), ForeignKey('volumes.id'))",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
"volume = orm.relationship(Volume,",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,1,1
"class Volume(BASE, NovaBase):",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"""""""Represents a block storage device that can be attached to a VM.""""""",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"Index('volumes_instance_uuid_idx', 'instance_uuid'),",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
@property,71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
def name(self):,71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
return CONF.volume_name_template % self.id,71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"class IscsiTarget(BASE, NovaBase):",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"""""""Represents an iscsi target for a given host.""""""",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"Index('iscsi_targets_volume_id_fkey', 'volume_id'),",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"Index('iscsi_targets_host_volume_id_deleted_idx', 'host', 'volume_id',",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
'deleted'),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"backref=orm.backref('iscsi_target', uselist=False),",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"foreign_keys=volume_id,",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"primaryjoin='and_(IscsiTarget.volume_id==Volume.id,'",71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
'IscsiTarget.deleted==0)'),71c41338e4aac98ec03eec1c90ee99e43d51bcb7,0,1
"#    Copyright (c) 2011 Citrix Systems, Inc.",6f9408d7ac38d5c857e1e1cdd92c49e000742734,6,1
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",6f9408d7ac38d5c857e1e1cdd92c49e000742734,6,1
#    not use this file except in compliance with the License. You may obtain,6f9408d7ac38d5c857e1e1cdd92c49e000742734,5,1
:mod:`glance` -- Stubs for Glance,6f9408d7ac38d5c857e1e1cdd92c49e000742734,5,1
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",6f9408d7ac38d5c857e1e1cdd92c49e000742734,4,1
#    License for the specific language governing permissions and limitations,6f9408d7ac38d5c857e1e1cdd92c49e000742734,4,1
#    under the License.,6f9408d7ac38d5c857e1e1cdd92c49e000742734,4,1
#    a copy of the License at,6f9408d7ac38d5c857e1e1cdd92c49e000742734,3,1
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",6f9408d7ac38d5c857e1e1cdd92c49e000742734,2,1
#,6f9408d7ac38d5c857e1e1cdd92c49e000742734,1,1
#         http://www.apache.org/licenses/LICENSE-2.0,6f9408d7ac38d5c857e1e1cdd92c49e000742734,1,1
"#    Unless required by applicable law or agreed to in writing, software",6f9408d7ac38d5c857e1e1cdd92c49e000742734,1,1
"""""""",6f9408d7ac38d5c857e1e1cdd92c49e000742734,1,1
=================================,6f9408d7ac38d5c857e1e1cdd92c49e000742734,1,1
"def rescue(self, req, id):",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,3,1
"def rescue(self, req, id, body={}):",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,2,0
return {'adminPass': password},7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,1,0
"self.compute_api.rescue(context, id)",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,1,1
return webob.Response(status_int=202),7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,1,1
if 'rescue' in body and body['rescue'] and \,7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
'adminPass' in body['rescue']:,7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
"password = body[""rescue""][""adminPass""]",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
else:,7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
password = utils.generate_password(FLAGS.password_length),7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
"self.compute_api.rescue(context, id, rescue_password=password)",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
if 'rebuild' in info and 'adminPass' in info['rebuild']:,7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
"password = info[""rebuild""][""adminPass""]",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,0
password = utils.generate_password(16),7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,1
"password = info[""rebuild""].get(""adminPass"",",7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,1
utils.generate_password(16)),7f2a4fdf5e43620081e163fc46f2ca4fdefd18f3,0,1
from nova.virt import disk,914b0554a092d2b38f292942dc4d7ddea5d99b9a,3,1
from nova.virt.disk import api as disk,914b0554a092d2b38f292942dc4d7ddea5d99b9a,2,0
self.container = None,914b0554a092d2b38f292942dc4d7ddea5d99b9a,1,0
disable_auto_fsck = False,914b0554a092d2b38f292942dc4d7ddea5d99b9a,1,0
disable_auto_fsck = True,914b0554a092d2b38f292942dc4d7ddea5d99b9a,1,0
"self.container = disk.setup_container(basepath('disk'),",914b0554a092d2b38f292942dc4d7ddea5d99b9a,1,0
tune2fs = False,914b0554a092d2b38f292942dc4d7ddea5d99b9a,1,1
tune2fs = True,914b0554a092d2b38f292942dc4d7ddea5d99b9a,1,1
disk.destroy_container(self.container),914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,0
"use_cow=FLAGS.use_cow_images,",914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,0
disable_auto_fsck=disable_auto_fsck),914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,0
"container_dir=container_dir,",914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,0
use_cow=FLAGS.use_cow_images),914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,0
"disk.destroy_container(target, instance, nbd=FLAGS.use_cow_images)",914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,1
"nbd=FLAGS.use_cow_images,",914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,1
tune2fs=tune2fs),914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,1
"disk.setup_container(basepath('disk'),",914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,1
"container_dir=container_dir,",914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,1
nbd=FLAGS.use_cow_images),914b0554a092d2b38f292942dc4d7ddea5d99b9a,0,1
"""""""Used for paste app factories in paste.deploy config files.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,5,0
"""""""Used for paste app factories in paste.deploy config files.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,5,1
section of the paste config) will be passed into the `__init__` method,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,0
which would result in a call to the `Wadl` class as,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,0
"# Option 5: you can get a Response object for a wsgi app, too, to",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,0
which would result in a call to the `Analytics` class as,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,0
WSGI app to call.  You'll probably want to specify an 'action' as,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,0
section of the paste config) will be passed into the `__init__` method,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,1
which would result in a call to the `Wadl` class as,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,1
"# Option 5: you can get a Response object for a wsgi app, too, to",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,1
which would result in a call to the `Analytics` class as,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,1
WSGI app to call.  You'll probably want to specify an 'action' as,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,4,1
#    not use this file except in compliance with the License. You may obtain,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"# headers, or you want to be treated like an iterable, or ...)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
# Option 4: any wsgi app to be run next,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
These classes require an application to be,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"If this returns None, the next application down the stack will be",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"""""""Create a router for the given routes.Mapper.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"Each route in `mapper` must specify a 'controller', which is a",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
the request to the action-specific method.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
# Pointing to an arbitrary WSGI app.  You can specify the,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
# {path_info:.*} parameter so the target app can be handed just that,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"""""""Route the incoming request to a controller based on self.map.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"""""""Dispatch the request to the appropriate controller.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
Called by self._router after matching the incoming request to a route,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"""""""Initialize the loader, and attempt to find the config.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
:param config_path: Full or relative path to the paste config.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,0
"# headers, or you want to be treated like an iterable, or ...)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
# Option 4: any wsgi app to be run next,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
These classes require an application to be,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"If this returns None, the next application down the stack will be",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"""""""Create a router for the given routes.Mapper.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"Each route in `mapper` must specify a 'controller', which is a",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
the request to the action-specific method.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
# Pointing to an arbitrary WSGI app.  You can specify the,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
# {path_info:.*} parameter so the target app can be handed just that,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"""""""Route the incoming request to a controller based on self.map.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"""""""Dispatch the request to the appropriate controller.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
Called by self._router after matching the incoming request to a route,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"""""""Initialize the loader, and attempt to find the config.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
:param config_path: Full or relative path to the paste config.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,3,1
"for hdr, val in self._headers.items():",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
#    a copy of the License at,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"#    Unless required by applicable law or agreed to in writing, software",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
#    License for the specific language governing permissions and limitations,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"""""""WSGI primitives used throughout the nova WSGI apps.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"You could of course re-implement the `factory` method in subclasses,",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
but using the kwarg passing it shouldn't be necessary.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
# Option 3: a webob Response object (in case you need to play with,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
initialized that will be called next.  By default the middleware will,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
executed. If it returns a response then that response will be returned,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"""""""Do whatever you'd like to the response.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"""""""Helper class for debugging a WSGI application.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
Can be inserted into any WSGI application chain to get information,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"for key, value in req.environ.items():",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"for (key, value) in resp.headers.items():",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"""""""Iterator that prints the contents of a wrapper string.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
for part in app_iter:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
well and have your controller be an object that can route,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
# Explicit mapping of one route to a controller+action,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"If no match, return a 404.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
app = match['controller'],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
return app,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"""""""Used to load WSGI applications from paste configurations.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"""""""Return the paste URLMap wrapped WSGI application.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
:param name: Name of the application to load.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"return deploy.loadapp(""config:%s"" % self.config_path, name=name)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
except LookupError:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,0
"for hdr, value in self._headers.items():",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"You could of course re-implement the `factory` method in subclasses,",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
but using the kwarg passing it shouldn't be necessary.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
# Option 3: a webob Response object (in case you need to play with,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
initialized that will be called next.  By default the middleware will,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
executed. If it returns a response then that response will be returned,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"""""""Do whatever you'd like to the response.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"""""""Helper class for debugging a WSGI application.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
Can be inserted into any WSGI application chain to get information,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"for key, value in req.environ.items():",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"for (key, value) in resp.headers.items():",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"""""""Iterator that prints the contents of a wrapper string.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
for part in app_iter:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
well and have your controller be an object that can route,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
# Explicit mapping of one route to a controller+action,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"If no match, return a 404.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
app = match['controller'],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
return app,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"""""""Used to load WSGI applications from paste configurations.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"""""""Return the paste URLMap wrapped WSGI application.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
:param name: Name of the application to load.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
"return deploy.loadapp(""config:%s"" % self.config_path, name=name)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
except LookupError:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,2,1
val = six.text_type(val),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# In Py2.X Headers must be byte strings,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
response.headers[hdr] = encodeutils.safe_encode(val),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
else:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# In Py3.X Headers must be utf-8 strings,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
response.headers[hdr] = encodeutils.safe_decode(,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
content_type = six.text_type(content_type),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
response.headers['Content-Type'] = encodeutils.safe_encode(,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
response.headers['Content-Type'] = encodeutils.safe_decode(,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
#    under the License.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
from paste import deploy,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
CONF = nova.conf.CONF,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
LOG = logging.getLogger(__name__),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
scheme = environ.get(CONF.wsgi.secure_proxy_ssl_header),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
environ['wsgi.url_scheme'] = scheme,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"""""""Base WSGI application wrapper. Subclasses need to implement __call__.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"Any local configuration (that is, values under the [app:APPNAME]",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
latest_version = 1.3,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
paste.app_factory = nova.api.fancy_api:Wadl.factory,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return cls(**local_config),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"r""""""Subclasses will probably want to implement __call__ like this:",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# Any of the following objects work as responses:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# Option 1: simple string,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
res = 'message\n',16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# Option 2: a nicely formatted HTTP exception page,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
res = exc.HTTPForbidden(explanation='Nice try'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
res = Response(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
res.app_iter = open('somefile'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
res = self.application,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
res = req.get_response(self.application),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# You can then just return your response...,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return res,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# ... or set req.response and return None.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
req.response = res,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
See the end of http://pythonpaste.org/webob/modules/dec.html,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
for more info.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"simply call its wrapped app, or you can override __call__ to customize its",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"Any local configuration (that is, values under the [filter:APPNAME]",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
redis_host = 127.0.0.1,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
paste.filter_factory = nova.api.analytics:Analytics.factory,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"return cls(app, **local_config)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return _factory,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
self.application = application,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return None,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return response,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
response = self.process_request(req),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
response = req.get_response(self.application),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return self.process_response(response),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
about the request and response.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
print(('*' * 40) + ' REQUEST ENVIRON'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
resp = req.get_response(self.application),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
print(('*' * 40) + ' RESPONSE HEADERS'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
resp.app_iter = self.print_generator(resp.app_iter),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return resp,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
print(('*' * 40) + ' BODY'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"""""""WSGI middleware that maps incoming requests to WSGI apps.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
mapper = routes.Mapper(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
sc = ServerController(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
# section of the URL.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
self.map = mapper,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"self._router = routes.middleware.RoutesMiddleware(self._dispatch,",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return self._router,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
and putting the information into req.environ.  Either returns 404,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
or the routed WSGI app's response.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
match = req.environ['wsgiorg.routing_args'][1],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
return webob.exc.HTTPNotFound(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
self.config_path = None,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
config_path = config_path or CONF.wsgi.api_paste_config,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
self.config_path = CONF.find_file(config_path),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
self.config_path = config_path,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
:returns: Paste URLMap object wrapping the requested application.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"LOG.debug(""Loading app %(name)s from %(path)s"",",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,0
"# NOTE(andreykurilin): we need to encode 'Content-Length' header,",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
response.headers['Content-Length'] = utils.utf8(,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
response.headers[hdr] = utils.utf8(value),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
response.headers['Content-Type'] = utils.utf8(content_type),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
response.headers[hdr] = utils.utf8(val),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
from paste import deploy,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
scheme = environ.get(CONF.wsgi.secure_proxy_ssl_header),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
environ['wsgi.url_scheme'] = scheme,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"""""""Base WSGI application wrapper. Subclasses need to implement __call__.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"Any local configuration (that is, values under the [app:APPNAME]",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
latest_version = 1.3,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
paste.app_factory = nova.api.fancy_api:Wadl.factory,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return cls(**local_config),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"r""""""Subclasses will probably want to implement __call__ like this:",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
# Any of the following objects work as responses:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
# Option 1: simple string,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
res = 'message\n',16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
# Option 2: a nicely formatted HTTP exception page,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
res = exc.HTTPForbidden(explanation='Nice try'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
res = Response(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
res.app_iter = open('somefile'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
res = self.application,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
res = req.get_response(self.application),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
# You can then just return your response...,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return res,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
# ... or set req.response and return None.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
req.response = res,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
See the end of http://pythonpaste.org/webob/modules/dec.html,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
for more info.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"simply call its wrapped app, or you can override __call__ to customize its",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"Any local configuration (that is, values under the [filter:APPNAME]",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
redis_host = 127.0.0.1,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
paste.filter_factory = nova.api.analytics:Analytics.factory,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"return cls(app, **local_config)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return _factory,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
self.application = application,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return None,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return response,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
response = self.process_request(req),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
response = req.get_response(self.application),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return self.process_response(response),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
about the request and response.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
print(('*' * 40) + ' REQUEST ENVIRON'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
resp = req.get_response(self.application),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
print(('*' * 40) + ' RESPONSE HEADERS'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
resp.app_iter = self.print_generator(resp.app_iter),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return resp,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
print(('*' * 40) + ' BODY'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"""""""WSGI middleware that maps incoming requests to WSGI apps.""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
mapper = routes.Mapper(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
sc = ServerController(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
# section of the URL.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
self.map = mapper,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"self._router = routes.middleware.RoutesMiddleware(self._dispatch,",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return self._router,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
and putting the information into req.environ.  Either returns 404,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
or the routed WSGI app's response.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
match = req.environ['wsgiorg.routing_args'][1],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
return webob.exc.HTTPNotFound(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
self.config_path = None,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
config_path = config_path or CONF.wsgi.api_paste_config,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
self.config_path = CONF.find_file(config_path),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
self.config_path = config_path,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
:returns: Paste URLMap object wrapping the requested application.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
"LOG.debug(""Loading app %(name)s from %(path)s"",",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,1,1
from nova.api import wsgi,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"if not isinstance(val, six.text_type):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if six.PY2:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
encodeutils.safe_encode(val)),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
# Deal with content_type,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"if not isinstance(content_type, six.text_type):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
content_type),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
encodeutils.safe_encode(content_type)),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
#,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
#         http://www.apache.org/licenses/LICENSE-2.0,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import os,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import sys,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
from oslo_log import log as logging,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import routes.middleware,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import six,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import webob,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import nova.conf,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
from nova import exception,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"from nova.i18n import _, _LE",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
class Request(webob.Request):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def __init__(self, environ, *args, **kwargs):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if CONF.wsgi.secure_proxy_ssl_header:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if scheme:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"super(Request, self).__init__(environ, *args, **kwargs)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
class Application(object):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
@classmethod,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def factory(cls, global_config, **local_config):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
as kwargs.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
A hypothetical configuration would look like:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
[app:wadl],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import nova.api.fancy_api,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
fancy_api.Wadl(latest_version='1.3'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def __call__(self, environ, start_response):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
@webob.dec.wsgify(RequestClass=Request),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def __call__(self, req):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
# play with headers etc,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
raise NotImplementedError(_('You must implement __call__')),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
class Middleware(Application):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"""""""Base WSGI middleware.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
behavior.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
[filter:analytics],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
import nova.api.analytics,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"analytics.Analytics(app_from_paste, redis_host='127.0.0.1')",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
def _factory(app):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def __init__(self, application):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def process_request(self, req):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"""""""Called on each request.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
and execution will stop here.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def process_response(self, response):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if response:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
class Debug(Middleware):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"print(key, '=', value)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
print(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
@staticmethod,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
def print_generator(app_iter):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
sys.stdout.write(six.text_type(part)),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
sys.stdout.flush(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
yield part,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
class Router(object):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def __init__(self, mapper):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
Examples:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"mapper.connect(None, '/svrlist', controller=sc, action='list')",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
# Actions are all implicitly defined,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"mapper.resource('server', 'servers', controller=sc)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"mapper.connect(None, '/v1.0/{path_info:.*}', controller=BlogApp())",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
self.map),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
def _dispatch(req):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if not match:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
class Loader(object):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def __init__(self, config_path=None):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
:returns: None,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if not os.path.isabs(config_path):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
elif os.path.exists(config_path):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
if not self.config_path:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
raise exception.ConfigNotFound(path=config_path),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"def load_app(self, name):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
:raises: `nova.exception.PasteAppNotFound`,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
try:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"{'name': name, 'path': self.config_path})",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"LOG.exception(_LE(""Couldn't lookup app: %s""), name)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
"raise exception.PasteAppNotFound(name=name, path=self.config_path)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,0
from nova import utils,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
from nova import wsgi,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if response.headers.get('Content-Length'):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"# since webob.Response auto sets it if ""body"" attr is presented.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
# https://github.com/Pylons/webob/blob/1.5.0b0/webob/response.py#L147,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
response.headers['Content-Length']),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
utils.utf8(val)),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import sys,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import routes.middleware,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import six,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import webob.dec,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import webob.exc,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
class Request(webob.Request):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def __init__(self, environ, *args, **kwargs):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if CONF.wsgi.secure_proxy_ssl_header:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if scheme:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"super(Request, self).__init__(environ, *args, **kwargs)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
class Application(object):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
@classmethod,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def factory(cls, global_config, **local_config):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
as kwargs.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
A hypothetical configuration would look like:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
[app:wadl],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import nova.api.fancy_api,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
fancy_api.Wadl(latest_version='1.3'),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"""""""",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def __call__(self, environ, start_response):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
@webob.dec.wsgify(RequestClass=Request),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def __call__(self, req):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
# play with headers etc,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
raise NotImplementedError(_('You must implement __call__')),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
class Middleware(Application):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"""""""Base WSGI middleware.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
behavior.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
[filter:analytics],16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
import nova.api.analytics,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"analytics.Analytics(app_from_paste, redis_host='127.0.0.1')",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
def _factory(app):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def __init__(self, application):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def process_request(self, req):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"""""""Called on each request.",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
and execution will stop here.,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def process_response(self, response):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if response:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
class Debug(Middleware):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"print(key, '=', value)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
print(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
@staticmethod,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
def print_generator(app_iter):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
sys.stdout.write(six.text_type(part)),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
sys.stdout.flush(),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
yield part,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
class Router(object):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def __init__(self, mapper):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
Examples:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"mapper.connect(None, '/svrlist', controller=sc, action='list')",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
# Actions are all implicitly defined,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"mapper.resource('server', 'servers', controller=sc)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"mapper.connect(None, '/v1.0/{path_info:.*}', controller=BlogApp())",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
self.map),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
def _dispatch(req):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if not match:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
class Loader(object):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def __init__(self, config_path=None):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
:returns: None,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if not os.path.isabs(config_path):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
elif os.path.exists(config_path):,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if not self.config_path:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
raise exception.ConfigNotFound(path=config_path),16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"def load_app(self, name):",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
:raises: `nova.exception.PasteAppNotFound`,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
try:,16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"{'name': name, 'path': self.config_path})",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"LOG.exception(_LE(""Couldn't lookup app: %s""), name)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
"raise exception.PasteAppNotFound(name=name, path=self.config_path)",16a8f4a98973ae5e5541f2b43db4dc36eaed2647,0,1
if type(attr) is unicode:,6bd620fa3d378b4fe437e498ef17888bf632b9d6,2,1
"if isinstance(attr, unicode):",6bd620fa3d378b4fe437e498ef17888bf632b9d6,0,0
session = session if session else get_session(),7bb9e4c598f829a16cc6444346e087ddb506182a,6,1
":param session: if present, the session to use",7bb9e4c598f829a16cc6444346e087ddb506182a,3,0
session = kwargs.get('session') or get_session(),7bb9e4c598f829a16cc6444346e087ddb506182a,3,0
if not result:,7bb9e4c598f829a16cc6444346e087ddb506182a,3,0
if not session:,7bb9e4c598f829a16cc6444346e087ddb506182a,3,0
session = get_session(),7bb9e4c598f829a16cc6444346e087ddb506182a,3,0
if not session:,7bb9e4c598f829a16cc6444346e087ddb506182a,3,1
session = get_session(),7bb9e4c598f829a16cc6444346e087ddb506182a,3,1
if not result:,7bb9e4c598f829a16cc6444346e087ddb506182a,3,1
"result = model_query(context, models.Service, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Service, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Service).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.ComputeNode, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Certificate, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.FloatingIp, project_only=True).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.FloatingIp, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.FixedIp, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.FixedIp, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.FixedIp, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.FixedIp, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _virtual_interface_query(context, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _build_instance_get(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.KeyPair, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Network, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Network, read_deleted=""no"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Network, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _network_get_query(context, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _network_get_query(context).filter_by(bridge=bridge).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _network_get_query(context).filter_by(uuid=uuid).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _network_get_query(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.AuthToken, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Quota, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = {'project_id': project_id},7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _volume_get_query(context, session=session, project_only=True).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Volume, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _volume_get_query(context).filter_by(id=volume_id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.IscsiTarget, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _volume_metadata_get_query(context, volume_id, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = {},7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _volume_metadata_get_query(context, volume_id, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Snapshot, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _block_device_mapping_get_query(context, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _block_device_mapping_get_query(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _security_group_get_query(context, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _security_group_get_query(context, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _security_group_rule_get_query(context, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _security_group_rule_get_query(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.User, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Project, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Migration, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Migration, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.ConsolePool, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.Console, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
if instance_id is not None:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = query.first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"read_deleted = ""yes"" if inactive else ""no""",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _instance_type_get_query(context, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _zone_get_by_id_query(context, zone_id, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _zone_get_by_id_query(context, zone_id).first()",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _instance_metadata_get_query(context, instance_id, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _instance_metadata_get_query(,7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _instance_type_extra_specs_get_query(,7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.VolumeTypes, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _volume_type_extra_specs_query(context, volume_type_id, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
result = _volume_type_extra_specs_query(,7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _vsa_get_query(context, session=session, project_only=True).\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.S3Image, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = model_query(context, models.SMBackendConf, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _sm_flavor_get_query(context, sm_flavor_label, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _sm_flavor_get_query(context, sm_flavor_label).first()",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"def _sm_volume_get_query(context, volume_id, session=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
"result = _sm_volume_get_query(context, volume_id).first()",7bb9e4c598f829a16cc6444346e087ddb506182a,2,0
if not context:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Service).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.ComputeNode).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Certificate).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = None,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.FloatingIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.FixedIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not rv:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
"result = session.query(func.count(models.Instance.id),",7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = partial.filter_by(uuid=uuid),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = result.first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = partial.filter_by(id=instance_id),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.KeyPair).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Network).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if session is None:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not tk:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Quota).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = {'project_id': project_id},7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
"result = session.query(func.count(models.Volume.id),",7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Volume).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.IscsiTarget).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not meta_result:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Snapshot).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.BlockDeviceMapping).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.SecurityGroup).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.SecurityGroupIngressRule).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.User).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Project).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Migration).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.ConsolePool).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Console).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = query.options(joinedload('pool')).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not inactive:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not inst_type:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not zone:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.Zone).filter_by(id=zone_id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not spec_result:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not vol_type:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.VirtualStorageArray).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not res:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.SMBackendConf).\,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.SMBackendConf).filter_by(sr_uuid=sr_uuid),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not sm_flavor:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.SMFlavors).filter_by(label=sm_flavor),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
if not sm_volume:,7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
result = session.query(models.SMVolume).filter_by(id=volume_id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,2,1
"def model_query(context, *args, **kwargs):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
":param read_deleted: if present, overrides context's read_deleted field.",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
":param project_only: if present and context is user-type, then restrict",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
read_deleted = kwargs.get('read_deleted') or context.read_deleted,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
project_only = kwargs.get('project_only'),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
query = session.query(*args),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
if read_deleted == 'no':,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
query = query.filter_by(deleted=False),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
query = query.filter_by(deleted=True),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise Exception(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
if project_only and is_user_context(context):,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
query = query.filter_by(project_id=context.project_id),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"query = model_query(context, models.Service)",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"subq = model_query(context, models.Instance.host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"subq = model_query(context, models.Network.host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"subq = model_query(context, models.Volume.host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def certificate_get_all_by_user_and_project(context, user_id, project_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"floating_ip_ref = model_query(context, models.FloatingIp,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
@require_admin_context,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
def _floating_ip_get_all(context):,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
floating_ip_refs = _floating_ip_get_all(context).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
floating_ip_refs = _floating_ip_get_all(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"fixed_ip_ref = model_query(context, models.FixedIp, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def fixed_ip_create(context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def fixed_ip_bulk_create(context, ips):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def fixed_ip_disassociate_all_by_timeout(context, host, time):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"inner_q = model_query(context, models.Network.id, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
return result,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"vif_ref = _virtual_interface_query(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
vif_ref = _virtual_interface_query(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
vif_refs = _virtual_interface_query(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
vif_refs = _virtual_interface_query(context).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _instance_get_all_query(context, project_only=False):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def instance_get_all_by_user(context, user_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _network_ips_query(context, network_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"network_ref = network_get(context, network_id=network_id,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def network_get_by_instance(context, instance_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def network_get_all_by_instance(context, instance_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
#             or that have a fixed ip with host set,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"host_filter = or_(models.Network.host == host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"network_ref = _network_get_query(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def queue_get_for(context, topic, physical_node_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def auth_token_create(context, token):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"rows = model_query(context, models.Quota, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"quotas = model_query(context, models.Quota, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"iscsi_target_ref = model_query(context, models.IscsiTarget,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _volume_get_query(context, session=None, project_only=False):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"rows = _volume_metadata_get_query(context, volume_id).all()",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
result[row['key']] = row['value'],7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _security_group_get_query(context, session=None, read_deleted=None,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.SecurityGroupNotFoundForProject(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def user_create(context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def project_create(context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"user = model_query(context, models.User).\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.ConsolePoolNotFoundForHostType(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.ConsoleNotFoundInPoolForInstance(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"query = model_query(context, models.Console, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.ConsoleNotFoundForInstance(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def instance_type_create(context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _instance_type_get_query(context, session=None, read_deleted=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"query = _instance_type_get_query(context, read_deleted=read_deleted)",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
query = query.filter(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"inst_types = query.order_by(""name"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"instance_type_ref = model_query(context, models.InstanceTypes,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"zone = zone_get(context, zone_id)",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"rows = _instance_metadata_get_query(context, instance_id).all()",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"agent_build_ref = model_query(context, models.AgentBuild,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"bwusage = model_query(context, models.BandwidthUsage,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _instance_type_extra_specs_get_query(context, instance_type_id,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
session=None):,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
rows = _instance_type_extra_specs_get_query(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.InstanceTypeExtraSpecsNotFound(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def volume_type_create(context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def volume_type_get_all(context, inactive=False, filters=None):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
filters = filters or {},7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"rows = model_query(context, models.VolumeTypes,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
# TODO(sirp): this patern of converting rows to a result with extra_specs,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
result[row['name']] = _dict_with_extra_specs(row),7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"volume_type_ref = model_query(context, models.VolumeTypes,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"rows = _volume_type_extra_specs_query(context, volume_type_id).\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.VolumeTypeExtraSpecsNotFound(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def _vsa_get_query(context, session=None, project_only=False):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"backend_conf = model_query(context, models.SMBackendConf,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
raise exception.NotFound(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"sm_flavor = sm_flavor_get(context, sm_flavor_label)",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"def sm_flavor_get(context, sm_flavor_label):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
"sm_volume = sm_volume_get(context, volume_id)",7bb9e4c598f829a16cc6444346e087ddb506182a,1,0
def can_read_deleted(context):,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"""""""Indicates if the context has access to deleted objects.""""""",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
query = session.query(models.Service).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
topic = 'compute',7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"subq = session.query(models.Instance.host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"subq = session.query(models.Network.host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"subq = session.query(models.Volume.host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def certificate_get_all_by_user_and_project(_context, user_id, project_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
if is_admin_context(context):,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
floating_ip_ref = session.query(models.FloatingIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
floating_ip_refs = session.query(models.FloatingIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
fixed_ip_ref = session.query(models.FixedIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def fixed_ip_create(_context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def fixed_ip_bulk_create(_context, ips):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def fixed_ip_disassociate_all_by_timeout(_context, host, time):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
inner_q = session.query(models.Network.id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
rv = session.query(models.FixedIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
vif_ref = session.query(models.VirtualInterface).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
vif_refs = session.query(models.VirtualInterface).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"partial = _build_instance_get(context, session=session)",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
partial = session.query(models.Instance).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
partial = partial.filter_by(deleted=can_read_deleted(context)),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
partial = partial.filter_by(project_id=context.project_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def instance_get_all_by_user(context, user_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
read_deleted = can_read_deleted(context),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
query = session.query(models.Instance).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"network_ref = network_get(context, network_id=network_id, \",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def network_get_by_instance(_context, instance_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
rv = session.query(models.Network).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def network_get_all_by_instance(_context, instance_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
#             or that have a fixed ip with host set,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"host_filter = or_(models.Network.host == host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
network_ref = session.query(models.Network).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def queue_get_for(_context, topic, physical_node_id):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
tk = session.query(models.AuthToken).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def auth_token_create(_context, token):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
rows = session.query(models.Quota).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
quotas = session.query(models.Quota).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
iscsi_target_ref = session.query(models.IscsiTarget).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
meta_results = session.query(models.VolumeMetadata).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
meta_dict = {},7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
meta_dict[i['key']] = i['value'],7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
meta_result = session.query(models.VolumeMetadata).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
return result,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.SecurityGroupNotFoundForProject(project_id=project_id,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def user_create(_context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def project_create(_context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
user = session.query(models.User).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
results = session.query(models.Migration).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.ConsolePoolNotFoundForHostType(host=host,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.ConsoleNotFoundInPoolForInstance(pool_id=pool_id,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
results = session.query(models.Console).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
query = session.query(models.Console).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
if instance_id:,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.ConsoleNotFoundForInstance(console_id=console_id,",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def instance_type_create(_context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
partial = session.query(models.InstanceTypes)\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
partial = partial.filter_by(deleted=False),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
partial = partial.filter(,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"inst_types = partial.order_by(""name"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
inst_type = session.query(models.InstanceTypes).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
instance_type_ref = session.query(models.InstanceTypes).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
zone = session.query(models.Zone).filter_by(id=zone_id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
raise exception.ZoneNotFound(zone_id=zone_id),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
meta_results = session.query(models.InstanceMetadata).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
meta_result = session.query(models.InstanceMetadata).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
agent_build_ref = session.query(models.AgentBuild).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
bwusage = session.query(models.BandwidthUsage).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
spec_results = session.query(models.InstanceTypeExtraSpecs).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
spec_dict = {},7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
spec_dict[i['key']] = i['value'],7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
spec_result = session.query(models.InstanceTypeExtraSpecs).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
raise exception.\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def volume_type_create(_context, values):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def volume_type_get_all(context, inactive=False, filters={}):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
if inactive:,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
vol_types = session.query(models.VolumeTypes).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
vol_dict = {},7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
if vol_types:,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
vol_dict[i['name']] = _dict_with_extra_specs(i),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
vol_type = session.query(models.VolumeTypes).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
volume_type_ref = session.query(models.VolumeTypes).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
spec_results = session.query(models.VolumeTypeExtraSpecs).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
session=None):,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
spec_result = session.query(models.VolumeTypeExtraSpecs).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
res = session.query(models.S3Image)\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
backend_conf = session.query(models.SMBackendConf).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.NotFound(_(""No backend config with id ""\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
sm_flavor = session.query(models.SMFlavors).\,7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.NotFound(_(""No sm_flavor with id ""\",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"def sm_flavor_get(context, sm_flavor):",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.NotFound(_(""No sm_flavor called %(sm_flavor)s"") \",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
sm_volume = session.query(models.SMVolume).filter_by(id=volume_id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"raise exception.NotFound(_(""No sm_volume with id %(volume_id)s"") \",7bb9e4c598f829a16cc6444346e087ddb506182a,1,1
"""""""Query helper that accounts for context's `read_deleted` field.",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
:param context: context to query under,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
query to match the context's project_id.,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"""""""",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
elif read_deleted == 'yes':,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
pass  # omit the filter to include deleted and active,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
elif read_deleted == 'only':,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
else:,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_(""Unrecognized read_deleted value '%s'"") % read_deleted)",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return query,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Service, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(disabled=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(topic=topic).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(host=host).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
first(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('compute_node')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"filter_by(topic=""compute"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Service,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.coalesce(sort_value, 0),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"session=session, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"outerjoin((subq, models.Service.host == subq.c.host)).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
order_by(sort_value).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.sum(models.Instance.vcpus).label(label),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.count(models.Network.id).label(label),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.sum(models.Volume.size).label(label),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.ComputeNode, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Certificate, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('fixed_ip')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload_all('fixed_ip.instance')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.FloatingIp, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload_all('fixed_ip.instance')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _floating_ip_get_all(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.FloatingIp, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# FIXME(sirp): shouldn't we just use project_only here to restrict the,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# results?,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# NOTE(sirp): shouldn't we just use project_only here to restrict the,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
@require_context,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.VirtualInterface, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('fixed_ips')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.count(models.Instance.id),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.sum(models.Instance.vcpus),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.sum(models.Instance.memory_mb),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(uuid=uuid).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=instance_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Instance, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
project_only=True).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Instance).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Instance, project_only=project_only).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('instance_type')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _instance_get_all_query(context).filter_by(user_id=user_id).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _instance_get_all_query(context).filter_by(host=host).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _instance_get_all_query(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(project_id=project_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return _instance_get_all_query(context, project_only=True).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(instance_id=instance_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.KeyPair, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Network, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Network).count()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.FixedIp, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(network_id=network_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return _network_ips_query(context, network_id).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(allocated=True).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
count(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(allocated=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(reserved=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(reserved=True).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=network_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
models.Network.project_id == None),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter(models.Network.uuid.in_(network_uuids)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter(project_or_none).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"# FIXME(sirp): since this returns fixed_ips, this would be better named",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# fixed_ip_get_all_by_network.,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload_all('instance')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(network_id=network_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter(models.FixedIp.instance_id != None).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter(models.FixedIp.virtual_interface_id != None).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"read_deleted=""no"")",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# NOTE(vish): return networks that have host set,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
models.FixedIp.host == host),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _network_get_query(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.IscsiTarget).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.count(models.Volume.id),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"func.sum(models.Volume.size),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Volume, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
project_only=project_only).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('instance')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('volume_metadata')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('volume_type')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=volume_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _volume_get_query(context).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _volume_get_query(context).filter_by(host=host).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _volume_get_query(context).filter_by(project_id=project_id).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.VolumeMetadata,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(volume_id=volume_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
for row in rows:,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_volume_metadata_get_query(context, volume_id).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=snapshot_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Snapshot).all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Snapshot).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.BlockDeviceMapping, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_block_device_mapping_get_query(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(instance_id=values['instance_id']).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(virtual_name=virtual_name).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter(models.BlockDeviceMapping.device_name !=,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
values['device_name']).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"update({'deleted': True,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"'deleted_at': utils.utcnow(),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
'updated_at': literal_column('updated_at')}),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _block_device_mapping_get_query(context).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(volume_id=volume_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
project_only=False):,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SecurityGroup, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"read_deleted=read_deleted, project_only=project_only).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload_all('rules')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _security_group_get_query(context).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=security_group_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload_all('instances')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"project_id=project_id, security_group_id=group_name)",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return _security_group_get_query(context, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SecurityGroupIngressRule,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
session=session),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return _security_group_rule_get_query(context, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.ProviderFirewallRule).all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.ProviderFirewallRule).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.User).all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Project).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(status=status).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Migration, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"filter_by(status=""FINISHED"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"host=host, console_type=console_type,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
compute_host=compute_host),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.ConsolePool, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# NOTE(mdragon): consoles are meant to be transient.,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"pool_id=pool_id, instance_id=instance_id)",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Console, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=console_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('pool')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"console_id=console_id, instance_id=instance_id)",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
##################,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.InstanceTypes, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
read_deleted=read_deleted).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('extra_specs')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _dict_with_extra_specs(result),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(flavorid=flavor_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(name=name),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# FIXME(sirp): this should update deleted_at and updated_at as well,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Zone, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=zone_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_zone_get_by_id_query(context, zone_id, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.Zone, read_deleted=""yes"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.InstanceMetadata, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(instance_id=instance_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_instance_metadata_get_query(context, instance_id).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"context, instance_id, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.AgentBuild, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.AgentBuild, read_deleted=""no"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"model_query(context, models.AgentBuild, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"session=session, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=agent_build_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.BandwidthUsage, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.InstanceTypeExtraSpecs,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(instance_type_id=instance_type_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"context, instance_type_id).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
_instance_type_extra_specs_get_query(,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"context, instance_type_id, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"extra_specs_key=key, instance_type_id=instance_type_id)",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"# is repeated quite a bit, might be worth creating a method for it",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# FIXME(sirp): we should be setting deleted_at and updated_at here,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.VolumeTypeExtraSpecs, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(volume_type_id=volume_type_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_volume_type_extra_specs_query(context, volume_type_id).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"context, volume_type_id, session=session).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"extra_specs_key=key, volume_type_id=volume_type_id)",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
####################,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.VirtualStorageArray, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
options(joinedload('vsa_instance_type')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=vsa_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _vsa_get_query(context).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return _vsa_get_query(context).filter_by(project_id=project_id).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=image_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(uuid=image_uuid).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=sm_backend_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_(""No backend config with id %(sm_backend_id)s"") % locals())",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"# FIXME(sirp): for consistency, shouldn't this just mark as deleted with",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# `purge` actually deleting the record?,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"model_query(context, models.SMBackendConf, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
# FIXME(sirp): shouldn't this have a `first()` qualifier attached?,7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SMBackendConf, read_deleted=""yes"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(sr_uuid=sr_uuid),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SMFlavors, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(label=sm_flavor_label),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_sm_flavor_get_query(context, sm_flavor_label).delete()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_(""No sm_flavor called %(sm_flavor)s"") % locals())",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SMFlavors, read_deleted=""yes"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SMVolume, session=session,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
filter_by(id=volume_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_sm_volume_get_query(context, volume_id, session=session).delete()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"_(""No sm_volume with id %(volume_id)s"") % locals())",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
"return model_query(context, models.SMVolume, read_deleted=""yes"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,0
return False,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return context.read_deleted,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(deleted=can_read_deleted(context)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(deleted=can_read_deleted(context)),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Service).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(deleted=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(disabled=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(topic=topic).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(host=host).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
first(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('compute_node')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"return session.query(models.Service, func.coalesce(sort_value, 0)).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"outerjoin((subq, models.Service.host == subq.c.host)).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
order_by(sort_value).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
func.sum(models.Instance.vcpus).label(label)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
func.count(models.Network.id).label(label)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
func.sum(models.Volume.size).label(label)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.ComputeNode).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Certificate).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('fixed_ip')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('fixed_ip.instance')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
elif is_user_context(context):,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(project_id=context.project_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.FloatingIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return rv,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('fixed_ips')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"func.sum(models.Instance.vcpus),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
func.sum(models.Instance.memory_mb)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(deleted=False),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return partial,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Instance).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('instance_type')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(user_id=user_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('fixed_ips.floating_ips')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('security_groups')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('fixed_ips.network')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('metadata')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(deleted=read_deleted).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(project_id=project_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('instance_type')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return query.\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(instance_id=instance_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.KeyPair).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Network).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
count(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.FixedIp).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(network_id=network_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(allocated=True).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(allocated=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(reserved=False).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(reserved=True).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=network_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(deleted=False).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
models.Network.project_id == None),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter(models.Network.uuid.in_(network_uuids)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter(project_or_none).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('instance')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter(models.FixedIp.instance_id != None).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter(models.FixedIp.virtual_interface_id != None).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(bridge=bridge).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(uuid=uuid).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
with session.begin():,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
# NOTE(vish): return networks that have host set,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
models.FixedIp.host == host),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.IscsiTarget).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return tk,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
func.sum(models.Volume.size)).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('instance')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('volume_metadata')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('volume_type')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=volume_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Volume).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(volume_id=volume_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
for i in meta_results:,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return meta_dict,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.VolumeMetadata).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return meta_result,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=snapshot_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Snapshot).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.BlockDeviceMapping).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(instance_id=values['instance_id']).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(virtual_name=virtual_name).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter(models.BlockDeviceMapping.device_name !=,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
values['device_name']).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"update({'deleted': True,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"'deleted_at': utils.utcnow(),",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
'updated_at': literal_column('updated_at')}),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return [],7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.SecurityGroup).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('rules')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"filter_by(deleted=can_read_deleted(context),).\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=security_group_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('instances')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
else:,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
security_group_id=group_name),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=security_group_rule_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
# TODO(vish): Join to group and check for project_id,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(parent_group_id=security_group_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload_all('grantee_group.instances')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(group_id=security_group_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.ProviderFirewallRule).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.User).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Project).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(status=status).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"filter_by(status=""FINISHED"").all()",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return results,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"console_type=console_type,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
compute_host=compute_host),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.ConsolePool).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
# consoles are meant to be transient. (mdragon),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
instance_id=instance_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('pool')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=console_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
##################,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
.options(joinedload('extra_specs')),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('extra_specs')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return _dict_with_extra_specs(inst_type),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(flavorid=flavor_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(name=name),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.Zone).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=zone_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.Zone).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.InstanceMetadata).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.AgentBuild).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.AgentBuild).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=agent_build_id). \,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.BandwidthUsage).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(instance_type_id=instance_type_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
for i in spec_results:,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return spec_dict,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.InstanceTypeExtraSpecs).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"InstanceTypeExtraSpecsNotFound(extra_specs_key=key,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
instance_type_id=instance_type_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return spec_result,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"order_by(""name"").\",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
for i in vol_types:,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return vol_dict,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return _dict_with_extra_specs(vol_type),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(volume_type_id=volume_type_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.VolumeTypeExtraSpecs).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"VolumeTypeExtraSpecsNotFound(extra_specs_key=key,",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
volume_type_id=volume_type_id),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
####################,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
options(joinedload('vsa_instance_type')).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=vsa_id).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.VirtualStorageArray).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
.filter_by(id=image_id)\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
.first(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return res,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
.filter_by(uuid=image_uuid)\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(id=sm_backend_id).first(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"""%(sm_backend_id)s"") % locals())",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.SMBackendConf).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.SMBackendConf).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(label=sm_flavor_label),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
"""%(sm_flavor_id)s"") % locals())",7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.SMFlavors).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
filter_by(label=sm_flavor_label).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
delete(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
% locals()),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.SMFlavors).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
session.query(models.SMVolume).\,7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
return session.query(models.SMVolume).all(),7bb9e4c598f829a16cc6444346e087ddb506182a,0,1
2.1. Create a dummy vmdk of the size of the disk file that is to be,7a60b5c406336c5f410d1a98868c3f93d888ea0c,9,0
2. Create a dummy vmdk of the size of the disk file that is to be,7a60b5c406336c5f410d1a98868c3f93d888ea0c,9,1
"# Copyright (c) 2011 Citrix Systems, Inc.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,0
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,0
"# Copyright (c) 2011 Citrix Systems, Inc.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,1
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,1
"LOG.debug(_(""Downloaded image file data %(image_ref)s to the ESX """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,1
"# Copyright (c) 2011 Citrix Systems, Inc.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,1
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",7a60b5c406336c5f410d1a98868c3f93d888ea0c,7,1
# Naming the VM files in correspondence with the VM instance,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,0
# better approximation would use the percentage of the VM image that,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,0
# There is only one default datacenter in a standalone ESX host,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,0
# There is only one default datacenter in a standalone ESX host,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,1
# Naming the VM files in correspondence with the VM instance name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,1
Attach the vmdk uploaded to the VM. VM reconfigure is done,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,1
# Login and setup the session with the ESX host for making,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,1
"# The data file is the one occupying space, and likelier to see",7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,0
# way to differentiate. We thus check if the session is,7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,0
"""""""Get size of the vmdk file that is to be downloaded for attach in spawn.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,6,1
# Copyright 2011 OpenStack LLC.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
#    not use this file except in compliance with the License. You may obtain,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
#    a copy of the License at,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# Copyright 2011 OpenStack LLC.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
#    not use this file except in compliance with the License. You may obtain,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
#    a copy of the License at,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
3.1. Upload the disk file to a -sparse.vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
4. Attach the disk to the VM by reconfiguring the same.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
"# Set the vnc configuration of the instance, vnc port starts from 5900",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
"LOG.debug(_(""Downloaded image file data %(image_ref)s to """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# Copy a sparse virtual disk to a thin virtual disk. This is also,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
"# depend on the size of the disk, thin/thick provisioning and the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# Attach the vmdk uploaded to the VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# Attach vmdk to the rescue VM,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# Raise Exception if VM is suspended,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# Check if the file exists or not.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
5. Attach the disk to the VM by reconfiguring the same.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
""" KB on the ESX host local store """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# Delete the -flat.vmdk file created. .vmdk file is retained.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# Upload the -flat.vmdk file whose meta-data file we just created,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
"LOG.debug(_(""Reconfiguring VM instance to attach the image disk""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
"LOG.debug(_(""Reconfigured VM instance to attach the image disk""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# Login and setup the session with the host for making,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
if not self._host_ip or host_username is None or host_password is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
Sets up a session with the ESX host and handles all,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# to ensure that the session is not left active.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
"# The controller Key pertains to the Key of the LSI Logic Controller, which",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# Create a snapshot of the VM,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
"# Copy the contents of the disk (or disks, if there were snapshots",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# Get the list of clusters to be used,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,0
# node is not set in instance. Perform destroy only if node is set,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
return 'Please refer to %s for the uptime' % CONF.vmware.host_ip,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# Get the list of clusters to be used,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
#    not use this file except in compliance with the License. You may obtain,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
#    a copy of the License at,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
"base_url = base_url + ""?"" + urllib.urlencode(param_list)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
# We are ignoring the chunk size passed for we want the pipe to hold,7a60b5c406336c5f410d1a98868c3f93d888ea0c,5,1
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
#    under the License.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
if wbem_network_adapter.NetConnectionStatus == 2 or \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"if os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"elif os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"cmd = ['""' + vmware_tools_bin + '""', '--cmd', 'machine.id.get']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
if adapter_name and not ip_address == current_ip_address:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
#    under the License.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
if wbem_network_adapter.NetConnectionStatus == 2 or \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"if os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"elif os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"cmd = ['""' + vmware_tools_bin + '""', '--cmd', 'machine.id.get']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
if adapter_name and not ip_address == current_ip_address:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
if wbem_network_adapter.NetConnectionStatus == 2 or \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
3.2. Copy/Clone the -sparse.vmdk file to a thin vmdk.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""%(adapter_type)s on the ESX host local store """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Deleted the file %(vmdk_path)s on the """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"# For flat disk, upload the -flat.vmdk file whose meta-data file",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"# For sparse disk, upload the -sparse.vmdk file to be copied into",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""%(upload_vmdk_name)s on the ESX data store """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# done to generate the meta-data file whose specifics,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# The sparse vmdk file name for sparse disk image,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# Copy the sparse virtual disk to a thin virtual disk.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# Attach the root disk to the VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# the clone disk step begins to dominate the equation. A,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"Transfers the disk of a running instance in multiple phases, turning",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Renaming the VM to %s"") % name_label,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Renamed the VM to %s"") % name_label,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# 3. Clone VM on ESX host,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Cloning VM to host %s"") % dest, instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Cloned VM to host %s"") % dest, instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Migrating VM to host %s"") % dest, instance=instance_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Migrated VM to host %s"") % dest, instance=instance_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Reconfiguring VM instance to enable vnc on """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Reconfigured VM instance to enable vnc on """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""""""Get reference to the host with the name specified.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# Get the resource pool. Taking the first resource pool coming our,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""""""Check if the path and file exists on the datastore.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# Wait till the state changes from queued or running.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"# Check if the folder exists or not. If not, create one",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# Get the resource pool. Taking the first resource pool coming our,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"LOG.debug(_(""Deleted the file %(flat_uploaded_vmdk_path)s on the """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Get reference to the VM with the name specified.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
if not (self._host_ip or CONF.vmware.host_username is None or,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
Sets up a session with the VC/ESX host and handles all,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"# May not have been able to connect to VC, so vim is still None",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""""""Creates a session with the ESX host.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://[%s]/folder/%s"" % (scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"base_url = ""%s://%s/folder/%s"" % (scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"base_url = ""%s://%s/folder/%s"" % (scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# it when the data disk it refers to still lingers.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(_(""Deleted the file %(vmdk_path)s on the """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# Logout to avoid un-necessary increase in session count at the,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"# May not have been able to connect to VC, so vim is still None",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# It is just cautionary on our part to do a logout in del just,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# Consolidate the snapshotted disk to a temporary vmdk.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
# done earlier) to a temporary vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
host    : ESX IPAddress[:port] or ESX Hostname[:port],7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# of ESX hosts in clusters or non-cluster logical-groupings.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"# The _resources is used to maintain the vmops, volumeops and vcstate",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""""""Sets up a session with the VC host and handles all",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
help='Name of a VMware Cluster ComputeResource. Used only if ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# The ESXi API are a proper sub-set of the vCenter API.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
if not (self._host_ip or CONF.vmware.host_username is None or,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# NOTE(hartsocks): we lean on the init_host to force the vim object,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Retrieves the IP address of the ESX host.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Get info about the host on which the VM resides.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
as part of a periodic task that records the results in the DB.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"# The _resources is used to maintain the vmops, volumeops and vcstate",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Sets up a session with the VC/ESX host and handles all",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# is not a problem as long as the import order doesn't change.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"# calculate linked_clone flag, allow image properties to override the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"LOG.debug(""Got image size of %(size)s for the image %(image)s"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# Copyright 2011 OpenStack Foundation,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
#    under the License.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"if os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"elif os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"cmd = ['""' + vmware_tools_bin + '""', '--cmd', 'machine.id.get']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
if adapter_name and not ip_address == current_ip_address:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://[%s]/folder/%s"" % (scheme, host,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"base_url = ""%s://%s/folder/%s"" % (scheme, host,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"base_url = ""%s://[%s]/folder/%s"" % (scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://%s/folder/%s"" % (scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://%s/folder/%s"" % (scheme, host,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://[%s]/folder/%s"" % (scheme, host,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://%s/folder/%s"" % (scheme, host,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"base_url = ""%s://[%s]:%s/folder/%s"" % (scheme, host, port,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"base_url = ""%s://%s:%s/folder/%s"" % (scheme, host, port,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,0
"""""""Check if the end of file has been reached.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Get size of the file to be read.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
# data items of the chunk-size that Glance Client uses for read,7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Sets up a session with the VC/ESX host and handles all",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Check if the module is a VIM Object instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"""""""Return a Deferred that will give the result of the given task.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,4,1
"(scheme, netloc, path, params, query, fragment) = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
'Due to a bug in vSphere ESX 4.1 default wsdl. ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
'Due to a bug in vSphere ESX 4.1 default wsdl. ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
virtual_device_config = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
connectable_spec = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"if device.__class__.__name__ == ""VirtualDisk"" and \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"vmdk_file_path_before_snapshot, adapter_type = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"interface_str = ""%s;%s;%s;%s;%s;%s"" % \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"#    Unless required by applicable law or agreed to in writing, software",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
#    License for the specific language governing permissions and limitations,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
Guest tools for ESX to set up network in the guest.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
_byte = ord    # 2.x chr to integer,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
_byte = int    # 3.x byte to integer,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
intgr = (intgr << 8) + _byte(byt),7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"machine_id is of the form ('NIC_record#NIC_record#', '')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
Each of the NIC will have record NIC_record in the form,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"return adapter_name, ip_address",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"""""""Executes the command with the list of arguments specified.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"vmware_tools_bin = os.path.join(program_files, 'VMware',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"vmware_tools_bin = os.path.join(program_files_x86, 'VMware',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"adapter_name, current_ip_address = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"'name=""%s""' % adapter_name, 'source=static', ip_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"#    Unless required by applicable law or agreed to in writing, software",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
#    License for the specific language governing permissions and limitations,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
Guest tools for ESX to set up network in the guest.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
_byte = ord    # 2.x chr to integer,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
_byte = int    # 3.x byte to integer,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
intgr = (intgr << 8) + _byte(byt),7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"machine_id is of the form ('NIC_record#NIC_record#', '')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
Each of the NIC will have record NIC_record in the form,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"return adapter_name, ip_address",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Executes the command with the list of arguments specified.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"vmware_tools_bin = os.path.join(program_files, 'VMware',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"vmware_tools_bin = os.path.join(program_files_x86, 'VMware',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"adapter_name, current_ip_address = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"'name=""%s""' % adapter_name, 'source=static', ip_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
if (adapter.NetConnectionStatus == 2 or,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"adapter_name, current_ip_address = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# Ignoring the orphaned or inaccessible VMs,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
uploaded. This is required just to create the metadata file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
2.2. Delete the -flat.vmdk file created in the above step and retain,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Creating VM on the ESX host""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Created VM on the ESX host""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"""the ESX host local store %(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Deleting the file %(vmdk_path)s """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# Delete the vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# a flat vmdk,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"""""""Copy a sparse virtual disk to a thin virtual disk.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# The vmdk meta-data file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# The flat vmdk file name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# Create a flat virtual disk and retain the metadata file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"1. Power off the VM, if it is in poweredOn state.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
if vm_ref is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
""" while destroying the VM: %s"") % str(excep),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"pwr_state = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"if pwr_state == ""poweredOn"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"elif pwr_state == ""suspended"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# Divide the action's workflow into discrete steps and ""bump"" the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# For a first cut this should be fine, however, for large VM images,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# has been streamed to the destination host.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
off the instance before the end.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# 0. Zero out the progress to begin,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# 1. Power off the instance,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# 2. Rename the original VM with suffix '-orig',7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# Get the clone vm spec,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# the old suffix, remove the suffix, then power it back on.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Renaming the VM from %s"") % name_label,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Renamed the VM from %s"") % name_label,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
port = CONF.vnc_port + vm_id % CONF.vnc_port_total,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
Set the vnc configuration of the VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# way. Assuming that is the default resource pool.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# If an error state is returned, it means that the path doesn't exist.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# Ignoring the oprhaned or inaccessible VMs,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
uploaded. This is required just to create the metadata file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
3. Delete the -flat.vmdk file created in the above step and retain,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
vm_ref = self._get_vm_ref_from_the_name(instance.name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# way. Assuming that is the default resource pool.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_(""Creating VM on the ESX  host""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_(""Created VM on the ESX  host""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# The flat vmdk file name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# The vmdk meta-data file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"uploaded_vmdk_name = ""%s/%s.vmdk"" % (instance.name, instance.name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""%(adapter_type)s on the ESX host local store""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_(""Deleting the file %(flat_uploaded_vmdk_path)s """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
if vm_ref is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
if vm_ref is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Creates a session with the VC/ESX host.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.critical(_(""Unable to connect to server at %(server)s, """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"def __init__(self, host_ip, host_username, host_password,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Gets the specified properties of the Managed Object.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Deleting the datastore file %s"") % datastore_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# unlikely event that its deletion fails, the small descriptor file",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# is retained too by design since it makes little sense to remove,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Deleting the file %(vmdk_path)s """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""on the ESX host local""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# Delete the vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# Delete the temporary vmdk created above.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# ESX host,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# For exceptions with connections we create the session,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# So if the previous response was also am empty response,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"# and after creating a new session, we get the same empty",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"# response, then we are sure of the response being supposed",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
Return dictionary which maps controller_key to list of allocated unit,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
if adapter_type == 'ide':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# create new controller with the specified type and return its spec,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
if controller_key is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"if adapter_type == ""ide"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_(""Creating Snapshot of the VM instance""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Created Snapshot of the VM instance""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Deleting Snapshot of the VM instance""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Deleted Snapshot of the VM instance""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Creating Snapshot of the VM instance""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_(""Created Snapshot of the VM instance""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_('Copying disk data before snapshot of the VM'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(_(""Copied disk data before snapshot of the VM""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# Ignoring the orphaned or inaccessible VMs,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"LOG.debug(_(""Got total of %s instances"") % str(len(lst_vm_names)))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# Ignoring the orphaned or inaccessible VMs,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
host    : ESX IPAddress or Hostname,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# The following class was removed in the transition from Icehouse to,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# following stub allow those configurations to work while logging a,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# The vCenter driver includes API that acts on ESX hosts or groups,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# vCenter is not a hypervisor itself, it works with multiple",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# Check if there are any clusters that were specified in the nova.conf,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# but are not in the vCenter, for missing clusters log a warning.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# The following initialization is necessary since the base class does,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"""""""Creates a session with the VC host.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"# That is to say, nearly all valid ESXi calls are",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"# is not successful. When resource claim is not successful,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Return the current state of the host.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# capabilities that include API that act on hosts or groups of,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"# vCenter is not a hypervisor itself, it works with multiple",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# Check if there are any clusters that were specified in the nova.conf,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"# but are not in the vCenter, for missing clusters log a warning.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# The following initialization is necessary since the base class does,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
# API logic to create a valid VNC console connection object.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Creates a session with the VC/ESX host.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"# because nova.virt.vmwareapi.driver is imported first. In fact, it is not",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
image_id (str): uuid of the image,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
adapter_type (str): name of the adapter's type,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"""""""Returns VMwareImage, the subset of properties the driver uses.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
:param image_id - image id of image,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
# catch any string values that need to be interpreted as boolean values,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
Need this to create the dummy virtual disk for the meta-data file. The,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
geometry of the disk created depends on the size.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"LOG.debug(""Getting image size for the image %s"", image,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"#    Unless required by applicable law or agreed to in writing, software",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
#    License for the specific language governing permissions and limitations,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
Guest tools for ESX to set up network in the guest.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
_byte = ord    # 2.x chr to integer,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
_byte = int    # 3.x byte to integer,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
intgr = (intgr << 8) + _byte(byt),7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"machine_id is of the form ('NIC_record#NIC_record#', '')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
Each of the NIC will have record NIC_record in the form,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
if (adapter.NetConnectionStatus == 2 or,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"return adapter_name, ip_address",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Executes the command with the list of arguments specified.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"vmware_tools_bin = os.path.join(program_files, 'VMware',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"'VMware', 'VMware Tools',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"vmware_tools_bin = os.path.join(program_files_x86, 'VMware',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"'name=""%s""' % adapter_name, 'source=static', ip_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"self._base_url = self._base_url + ""?"" + urllib.urlencode(param_list)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
The chunk size is ignored for the Client ImageBodyIterator,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Get the next item from the image iterator.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Set the end of file marker.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
self.eof = eof,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Build ESX host session cookie headers.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"cookie_header = vim_cookie.name + ""="" + vim_cookie.value",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Write data to the file.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Read a chunk of data.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"""""""Returns information for the primary VMDK attached to the given VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,0
"""""""Returns information for the primary VMDK attached to the given VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
the calls made to the host.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,3,1
"RESP_NOT_XML_ERROR = 'Response is ""text/html"", not ""text/xml""'",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"RESP_NOT_XML_ERROR = 'Response is ""text/html"", not ""text/xml'",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if type(managed_object) == type(""""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmwareapi_wsdl_loc_opt = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
self._service_content = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
request_mo = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
obj_content = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
prop_filter_spec = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
virtual_device_config = client_factory.create(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
connectable_spec = client_factory.create('ns0:VirtualDeviceConnectInfo'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if (device.__class__.__name__ == ""VirtualDisk"" and",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
virtual_lsi = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_spec = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
backing_name = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
backing = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
portgroup = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
create_vmdk_spec = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
disk_file_backing = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
virtual_machine_config_spec = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
help='The VMWare VIF driver to configure the VIFs.'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vmdk_file_path_before_snapshot, adapter_type = _vmdk_info",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""%(old_gb)dGB to %(new_gb)dGB"") % locals())",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"path = ""/console?ref=%s&session_id=%s"" % (str(vm_ref), session_id)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vmware_vif_driver_opt = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
help='The VMWare VIF driver to configure the VIFs.'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"image_size, image_properties = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_ref = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"datastore_name, vmx_file_path = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
machine_id_change_spec = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
LOG.info(_('Latest agent build for %(hypervisor)s/%(os)s' + \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
LOG.info(_('No agent build found for %(hypervisor)s/%(os)s' + \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if version and agent_build and \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"template_vm_ref, template_vdi_uuids = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vdi_ref, vm_vdi_rec = \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if instance['auto_disk_config'] and \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""%(old_gb)dGB to %(new_gb)dGB"") % locals())",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"LOG.debug(_('Creating VIF for VM %(vm_ref)s,' \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# vim: tabstop=4 shiftwidth=4 softtabstop=4,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if sys.platform == PLATFORM_WIN:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
elif sys.platform == PLATFORM_LINUX:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
intgr = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
return intgr,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"Parse the machine_id to get MAC, IP, Netmask and Gateway fields per NIC.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if machine_id[1].strip() == ""1"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if len(network_info_list) % 6 != 0:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Get the list of windows network adapters.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
network_adapters = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
adapter_name = wbem_network_adapter.NetConnectionID,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
wbem_network_adapter_config = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ip_address = '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ip_address = wbem_network_adapter_config.IPAddress[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
return network_adapters,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Get the list of Linux network adapters.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if arch == ARCH_32_BIT:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
elif arch == ARCH_64_BIT:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"raise OSError(_(""Unknown architecture: %s"") % arch)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
adapter_names = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ip_address = socket.inet_ntoa(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
raw_mac_address = '%012x' % _bytes2int(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"mac_address = "":"".join([raw_mac_address[m_counter:m_counter + 2]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _get_adapter_name_and_ip_address(network_adapters, mac_address):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Get the adapter name based on the MAC address.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
adapter_name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ip_address = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if network_adapter['mac-address'] == mac_address.lower():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
adapter_name = network_adapter['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ip_address = network_adapter['ip-address'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
network_adapters = _get_windows_network_adapters(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"return _get_adapter_name_and_ip_address(network_adapters, mac_address)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
network_adapters = _get_linux_network_adapters(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if process_input is not None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vmware_tools_bin = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"'VMware Tools', 'vmtoolsd.exe')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"'VMware Tools', 'VMwareService.exe')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"mac_address, ip_address, subnet_mask, gateway, broadcast,\",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
dns_servers = network_detail,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# Windows doesn't let you manually set the broadcast address,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"'name=""%s""' % adapter_name, dns_server]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
network_details = network_details or [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
interface_file_name = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
'/etc/sysconfig/network-scripts/ifcfg-%s' % adapter_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# Remove file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# Touch file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
interface_file.write('\niface %s inet static' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vmware_tools_bin = '/usr/sbin/vmtoolsd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vmware_tools_bin = '/usr/bin/vmtoolsd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vmware_tools_bin = '/usr/sbin/vmware-guestd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vmware_tools_bin = '/usr/bin/vmware-guestd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
elif (platform.dist()[0] == 'redhat'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if __name__ == '__main__':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if pltfrm == PLATFORM_WIN:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
elif pltfrm == PLATFORM_LINUX:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"raise NotImplementedError(_(""Platform not implemented: '%s'"") % pltfrm)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# vim: tabstop=4 shiftwidth=4 softtabstop=4,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if sys.platform == PLATFORM_WIN:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif sys.platform == PLATFORM_LINUX:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
intgr = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return intgr,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"Parse the machine_id to get MAC, IP, Netmask and Gateway fields per NIC.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if machine_id[1].strip() == ""1"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if len(network_info_list) % 6 != 0:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the list of windows network adapters.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_adapters = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = wbem_network_adapter.NetConnectionID,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
wbem_network_adapter_config = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = wbem_network_adapter_config.IPAddress[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return network_adapters,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the list of Linux network adapters.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if arch == ARCH_32_BIT:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif arch == ARCH_64_BIT:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise OSError(_(""Unknown architecture: %s"") % arch)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_names = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = socket.inet_ntoa(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
raw_mac_address = '%012x' % _bytes2int(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"mac_address = "":"".join([raw_mac_address[m_counter:m_counter + 2]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def _get_adapter_name_and_ip_address(network_adapters, mac_address):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the adapter name based on the MAC address.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if network_adapter['mac-address'] == mac_address.lower():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = network_adapter['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = network_adapter['ip-address'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_adapters = _get_windows_network_adapters(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"return _get_adapter_name_and_ip_address(network_adapters, mac_address)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_adapters = _get_linux_network_adapters(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if process_input is not None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"'VMware Tools', 'vmtoolsd.exe')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"'VMware Tools', 'VMwareService.exe')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"mac_address, ip_address, subnet_mask, gateway, broadcast,\",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
dns_servers = network_detail,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Windows doesn't let you manually set the broadcast address,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"'name=""%s""' % adapter_name, dns_server]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_details = network_details or [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
interface_file_name = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
'/etc/sysconfig/network-scripts/ifcfg-%s' % adapter_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Remove file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Touch file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
interface_file.write('\niface %s inet static' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/sbin/vmtoolsd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/bin/vmtoolsd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/sbin/vmware-guestd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/bin/vmware-guestd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif (platform.dist()[0] == 'redhat'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if __name__ == '__main__':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if pltfrm == PLATFORM_WIN:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif pltfrm == PLATFORM_LINUX:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise NotImplementedError(_(""Platform not implemented: '%s'"") % pltfrm)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = adapter.NetConnectionID,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ip_address = config.IPAddress[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"adapter_names = [names.tostring()[n_cnt:n_cnt + offset1].split('\0', 1)[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
dns_servers) = network_detail,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"adapter_name, current_ip_address = name_and_ip",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
interface_file_name = ('/etc/sysconfig/network-scripts/ifcfg-%s' %,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
adapter_name = wbem_network_adapter.NetConnectionID,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
wbem_network_adapter_config = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = wbem_network_adapter_config.IPAddress[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_names = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"mac_address, ip_address, subnet_mask, gateway, broadcast,\",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
dns_servers = network_detail,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
interface_file_name = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
'/etc/sysconfig/network-scripts/ifcfg-%s' % adapter_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
self._instance_path_base = VMWARE_PREFIX + CONF.base_dir_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def spawn(self, context, instance, image_meta, network_info,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
2.3. Upload the disk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance['name'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if network_info is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
vnc_pass = CONF.vnc_password or '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
""" KB and type %(disk_type)s on """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
upload_vmdk_name = sparse_uploaded_vmdk_name \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if disk_type == ""sparse"" else flat_uploaded_vmdk_name",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"LOG.debug(_(""Copying Virtual Disk of size """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""%(data_store_name)s to disk type %(disk_type)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"uploaded_vmdk_name = ""%s/%s.vmdk"" % (upload_folder, upload_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"flat_uploaded_vmdk_name = ""%s/%s-flat.vmdk"" % (",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"sparse_uploaded_vmdk_name = ""%s/%s-sparse.vmdk"" % (",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
cookies = \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if disk_type == ""sparse"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _delete(self, instance, network_info):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
Destroy a VM instance. Steps followed are:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"reason = _(""instance is powered off and cannot be suspended."")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def rescue(self, context, instance, network_info, image_meta):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
- shutdown the instance VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
- spawn a rescue VM (the vm name-label will be instance-N-rescue).,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
instance['name'] = instance['name'] + self._rescue_suffix,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"hardware_devices = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# Figure out the correct unit number,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
unit_number = unit_number + 1,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def unrescue(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def power_off(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"reason = _(""instance is suspended and cannot be powered off."")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def power_on(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _get_orig_vm_name_label(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
return instance['name'] + '-orig',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _update_instance_progress(self, context, instance, step, total_steps):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Update instance progress percent to reflect current step number",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# instance's progress field as each step is completed.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
""" %(progress)d"") % locals(), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def migrate_disk_and_power_off(self, context, instance, dest,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if host_ref is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def confirm_migration(self, migration, instance, network_info):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Confirms a resize, destroying the source VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# Destroy the original VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""exception while destroying the VM: %s"") % str(excep))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def finish_revert_migration(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Finish reverting a resize, powering back on the instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, name_label)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def finish_migration(self, context, migration, instance, disk_info,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Completes a resize, turning on the migrated instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# 4. Start VM,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_ref.name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def get_vnc_console(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _set_vnc_config(self, client_factory, instance, port, password):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"reconfig_task = self._session._call_method(self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"host_objs = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if host.propSet[0].val == host_name:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Get the Vm folder ref from the datacenter.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"dc_objs = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"res_pool_ref = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"search_task = self._session._call_method(self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"task_info = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if task_info.state == ""error"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def spawn(self, context, instance, image_meta, network_info):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
4. Upload the disk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the datastore list and choose the first local storage.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"data_stores = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if prop.name == ""summary.type"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif prop.name == ""summary.name"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if ds_type == ""VMFS"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if data_store_name is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"msg = _(""Couldn't get a local Datastore reference"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"return vmdk_file_size_in_kb, os_type, adapter_type",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vmdk_file_size_in_kb, os_type, adapter_type = _get_image_properties()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the Vm folder ref from the datacenter.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"dc_objs = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"res_pool_mor = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"flat_uploaded_vmdk_name = ""%s/%s-flat.vmdk"" % (instance.name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
""" %(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"reason = _(""instance is powered off and can not be suspended."")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vm_ref = self._get_vm_ref_from_the_name(instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vms = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if vm.propSet[0].val == vm_name:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vm_ref = vm_util.get_vm_ref(self._session, instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if rescue_vm_ref is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_uuid(self._session, instance['uuid'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref(self._session, instance_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance['name'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vm_ref = vm_util.get_vm_ref_from_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_ref.name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise Exception(_(""Must specify host_ip, """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""and host_password to use """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
self._api_retry_count = retry_count,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if retry_count > self._api_retry_count:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"host_username, host_password,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""got this exception: %s"") % excep)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if retry_count > self.api_retry_count:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
property_dict = {},7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Get the About Info from the service content.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _extend_virtual_disk(self, instance, requested_size, name, dc_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _delete_datastore_file(self, instance, datastore_path, dc_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"# deletion problems, so prioritize its deletion first. In the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _extend_virtual_disk(self, instance, requested_size, name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""ESX host local store %(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"LOG.debug(_(""Deleting temporary vmdk file %s"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"LOG.debug(_(""Deleted temporary vmdk file %s"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
self._datastore_dc_mapping = {},7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"dc_obj = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if p.name == 'name':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if p.name == 'datastore':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if p.name == 'vmFolder':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"dcs = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Get the datacenter name and the reference.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"dcs = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"dc_obj = self._session._call_method(vim_util, ""get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
except Exception as excep:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
self._session = session,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"LOG.warning(_(""Unable to validate session %s!""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"LOG.warning(_(""Session %s is inactive!""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# way to differentiate.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# to be empty.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ret_val = done.wait(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ret_val = done.wait(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return device.__class__.__name__ == 'VirtualIDEController',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
taken = {},7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# the SCSI controller sits on its own bus,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
This function inspects the current set of hardware devices and returns,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
controller_key and unit_number that can be used for attaching a new virtual,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
disk to adapter with the given adapter_type.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if devices.__class__.__name__ == ""ArrayOfVirtualDevice"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
ide_keys = [dev.key for dev in devices if _is_ide_controller(dev)],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"elif adapter_type in ['lsiLogic', 'lsiLogicsas', 'busLogic']:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
scsi_keys = [dev.key for dev in devices if _is_scsi_controller(dev)],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
controller_key = -101,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"# For IDE devices, there are these two default controllers created in the",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# VM having keys 200 and 201,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
controller_key = 200,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
controller_key = -101,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"devices = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"hw_devices = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
1 if adapter_type in ['ide'] else 0),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"hardware_devices = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Figure out the correct unit number,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
unit_number = unit_number + 1,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"LOG.debug(_(""Multiple processes/threads are trying to create """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _create_vm_snapshot(self, instance, vm_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"description=""Taking Snapshot of the VM"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"task_info = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def _delete_vm_snapshot(self, instance, vm_ref, snapshot):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"description=""Taking Snapshot of the VM"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if prop.name == ""name"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"elif prop.name == ""runtime.connectionState"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"retrieve_result = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Lists the VM instances that are registered with vCenter cluster.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"if prop.name == ""name"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif prop.name == ""runtime.connectionState"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"vms = self._session._call_method(vim_util,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"return Vim.get_soap_url(protocol, host_name, port) + ""/vimService.wsdl""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"return '%s://[%s]:%d/sdk' % (protocol, host_name, port)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"return '%s://%s:%d/sdk' % (protocol, host_name, port)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"return Vim.get_soap_url(protocol, host_name) + ""/vimService.wsdl""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"return '%s://[%s]/sdk' % (protocol, host_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"return '%s://%s/sdk' % (protocol, host_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
A connection to the VMware vCenter platform.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
help='Hostname or IP address for connection to VMware VC ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"help='Name of a VMware Cluster ComputeResource.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"# Juno, but may still be referenced in configuration files.  The",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
LOG.warn(_LW('The VMware ESX driver is now deprecated and has been ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# hypervisor host machines and their guests. This fact can,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# subtly alter how vSphere and OpenStack interoperate.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"raise exception.NotFound(_(""All clusters specified %s were not""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
""" found in the vCenter"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"LOG.warn(_LW(""The following clusters could not be found in the """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
self._resources = {},7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# vCenter does not actually run the VNC service,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
A connection to the VMware ESX/vCenter platform.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
help='Hostname or IP address for connection to VMware ESX/VC ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
LOG.warning(_('The VMware ESX driver is now deprecated and will be ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise Exception(_(""Must specify host_ip, """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""and host_password to use """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""compute_driver=vmwareapi.VMwareESXDriver or """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if vim is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# to not be None.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def spawn(self, context, instance, image_meta, injected_files,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def snapshot(self, context, instance, image_id, update_task_state):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Create snapshot from a running VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def reboot(self, context, instance, network_info, reboot_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def destroy(self, context, instance, network_info, block_device_info=None,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def pause(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def unpause(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def suspend(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def resume(self, context, instance, network_info, block_device_info=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Resume the suspended VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def rescue(self, context, instance, network_info, image_meta,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def unrescue(self, instance, network_info):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def power_off(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def power_on(self, context, instance, network_info,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def get_info(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Return info about the VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def get_diagnostics(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Return data about VM diagnostics.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
data = self._vmops.get_diagnostics(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return data,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def get_instance_diagnostics(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
data = self._vmops.get_instance_diagnostics(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def get_vnc_console(self, context, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def get_volume_connector(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def attach_volume(self, context, connection_info, instance, mountpoint,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Attach volume storage to VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def detach_volume(self, connection_info, instance, mountpoint,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Detach volume storage to VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Updating host information,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"If 'refresh' is True, run the update first.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Reboots, shuts down or powers up the host.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Sets the specified host's ability to accept new instances.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def inject_network_info(self, instance, nw_info):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Manage the local cache of images.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def instance_exists(self, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def attach_interface(self, instance, image_meta, vif):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Attach an interface to the instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def detach_interface(self, instance, vif):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# hosts in clusters or non-cluster logical-groupings.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# hypervisor host machines and their guests. This fact can,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# subtly alter how vSphere and OpenStack interoperate.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise exception.NotFound(_(""All clusters specified %s were not""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
""" found in the vCenter"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
""" vCenter %s"") % list(missing_clusters))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
self._resources = {},7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"# In specific, vCenter does not actually run the VNC service",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"# NOTE(mdbooth): We use use_linked_clone below, but don't have to import it",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"# possible to import it here, as nova.virt.vmwareapi.driver calls",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# CONF.register_opts() after the import chain which imports this module. This,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
file_size (int): size of file in bytes,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
file_type (str): vmdk or iso,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
self.adapter_type = adapter_type,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# NOTE(vui): This should be removed when we restore the,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if (self.file_type is not None and,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if linked_clone is not None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
return self.disk_type == constants.DISK_TYPE_SPARSE,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
return self.file_type == constants.DISK_FORMAT_ISO,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
if image_meta is None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
image_meta = {},7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
# global property set in the configurations.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"def get_vmdk_size_and_properties(context, image, instance):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"meta_data = IMAGE_API.get(context, image)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if sys.platform == PLATFORM_WIN:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif sys.platform == PLATFORM_LINUX:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
intgr = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return intgr,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"Parse the machine_id to get MAC, IP, Netmask and Gateway fields per NIC.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if machine_id[1].strip() == ""1"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if len(network_info_list) % 6 != 0:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the list of windows network adapters.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_adapters = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = adapter.NetConnectionID,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = config.IPAddress[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return network_adapters,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the list of Linux network adapters.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if arch == ARCH_32_BIT:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif arch == ARCH_64_BIT:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise OSError(_(""Unknown architecture: %s"") % arch)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"adapter_names = [names.tostring()[n_cnt:n_cnt + offset1].split('\0', 1)[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = socket.inet_ntoa(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
raw_mac_address = '%012x' % _bytes2int(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"mac_address = "":"".join([raw_mac_address[m_counter:m_counter + 2]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def _get_adapter_name_and_ip_address(network_adapters, mac_address):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the adapter name based on the MAC address.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if network_adapter['mac-address'] == mac_address.lower():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
adapter_name = network_adapter['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
ip_address = network_adapter['ip-address'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_adapters = _get_windows_network_adapters(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"return _get_adapter_name_and_ip_address(network_adapters, mac_address)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_adapters = _get_linux_network_adapters(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if process_input is not None:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"'VMware Tools', 'vmtoolsd.exe')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"'VMware Tools', 'VMwareService.exe')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
dns_servers) = network_detail,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"adapter_name, current_ip_address = name_and_ip",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Windows doesn't let you manually set the broadcast address,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"'name=""%s""' % adapter_name, dns_server]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
network_details = network_details or [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
interface_file_name = ('/etc/sysconfig/network-scripts/ifcfg-%s' %,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Remove file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
# Touch file,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
interface_file.write('\niface %s inet static' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/sbin/vmtoolsd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/bin/vmtoolsd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/sbin/vmware-guestd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
vmware_tools_bin = '/usr/bin/vmware-guestd',7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif (platform.dist()[0] == 'redhat'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if __name__ == '__main__':,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
if pltfrm == PLATFORM_WIN:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
elif pltfrm == PLATFORM_LINUX:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"raise NotImplementedError(_(""Platform not implemented: '%s'"") % pltfrm)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return base_url,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"base_url = self._get_base_url(scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"base_url = (""%s://[%s]:%s/folder/%s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"% (scheme, host, port, urllib.pathname2url(file_path)))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"base_url = (""%s://%s:%s/folder/%s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"base_url = self._get_base_url(scheme, host, port, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"base_url = self._get_base_url(scheme, host, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""VMware file read handler class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,0
"""""""Glance file read handler class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def read(self, chunk_size):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
self.eof = False,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
return self.eof,7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Close the file handle.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def write(self, data):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"base_url = (""%s://[%s]:%s/folder/%s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"% (scheme, host, port, urllib.pathname2url(file_path)))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"base_url = (""%s://%s:%s/folder/%s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""VMware file write handler class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"base_url = self._get_base_url(scheme, host, port, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if scheme == ""http"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif scheme == ""https"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"conn.putrequest(""PUT"", path + ""?"" + query)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Write to the file.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Get the response and close the connection.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""VMware file read handler class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"request = urllib2.Request(base_url, None, headers)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if hardware_devices.__class__.__name__ == ""ArrayOfVirtualDevice"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif device.__class__.__name__ == ""VirtualLsiLogicController"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif device.__class__.__name__ == ""VirtualBusLogicController"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif device.__class__.__name__ == ""VirtualIDEController"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif device.__class__.__name__ == ""VirtualLsiLogicSASController"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"elif device.__class__.__name__ == ""ParaVirtualSCSIController"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"def _call_method(self, module, method, *args, **kwargs):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"""""""Calls a method within the module specified with",7a60b5c406336c5f410d1a98868c3f93d888ea0c,2,1
"if isinstance(managed_object, str):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
_urlparse = urlparse.urlparse(base_url),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"scheme, netloc, path, params, query, fragment = _urlparse",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vmwareapi_wsdl_loc_opt = cfg.StrOpt('vmwareapi_wsdl_loc',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
'Refer readme-vmware to setup'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self._service_content = self.RetrieveServiceContent(""ServiceInstance"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
request_mo = self._request_managed_object_builder(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
'Refer readme-vmware to setup'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"obj_content = get_object_properties(vim, None, mobj, type, [property_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
prop_filter_spec = client_factory.create('ns0:PropertyFilterSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
virtual_lsi = client_factory.create('ns0:VirtualLsiLogicController'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
network_spec = client_factory.create('ns0:VirtualDeviceConfigSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"backing_name = ''.join(['ns0:VirtualEthernetCardDistributed',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
backing = client_factory.create(backing_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
portgroup = client_factory.create(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
backing = client_factory.create(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
device.backing.__class__.__name__ ==,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
create_vmdk_spec = client_factory.create('ns0:FileBackedVirtualDiskSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
disk_file_backing = client_factory.create(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
virtual_machine_config_spec = client_factory.create(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
device.backing.__class__.__name__ \,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"== ""VirtualDiskFlatVer2BackingInfo"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"vmware_vif_driver_opt = cfg.StrOpt('vmware_vif_driver',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"_image_info = vmware_images.get_vmdk_size_and_properties(context,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"image_size, image_properties = _image_info",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
network_ref = network_utils.get_network_with_the_name(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
_vmdk_info = vm_util.get_vmdk_file_path_and_adapter_type(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
os_type) = _get_vm_and_vmdk_attribs(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
_ds_path = vm_util.split_datastore_path(vm_config_pathname),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"datastore_name, vmx_file_path = _ds_path",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"interface_str = "";"".join([info['mac'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"ip_v4 and ip_v4['ip'] or '',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"ip_v4 and ip_v4['netmask'] or '',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
machine_id_change_spec = vm_util.get_machine_id_change_spec(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if (version and agent_build and,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
_snapshot_info = self._create_snapshot(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"template_vm_ref, template_vdi_uuids = _snapshot_info",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"_vdi_info = VMHelper.get_vdi_for_vm_safely(self._session, vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vdi_ref, vm_vdi_rec = _vdi_info",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if (instance['auto_disk_config'] and,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_('Creating VIF for VM %(vm_ref)s,'",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
' network %(network_ref)s.') % locals()),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
os_type = _get_vm_and_vmdk_attribs(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"ip_v4 and ip_v4['ip'] or '',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"ip_v4 and ip_v4['netmask'] or '',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
LOG.debug(_('Removing VDI %(vdi_ref)s' +,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"path = ""/console?ref=%s&session_id=%s""\",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"% (str(vm_ref), session_id)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
' network %(network_ref)s.') % locals()),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
#,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
#         http://www.apache.org/licenses/LICENSE-2.0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
PLATFORM_WIN = 'win32',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
PLATFORM_LINUX = 'linux2',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ARCH_32_BIT = '32bit',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ARCH_64_BIT = '64bit',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
NO_MACHINE_ID = 'No machine id',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# Logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"FORMAT = ""%(asctime)s - %(levelname)s - %(message)s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG_DIR = os.path.join(os.environ.get('ALLUSERSPROFILE'), 'openstack')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
LOG_DIR = '/var/log/openstack',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
LOG_DIR = 'logs',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not os.path.exists(LOG_DIR):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG_FILENAME = os.path.join(LOG_DIR, 'openstack-guest-tools.log')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if sys.hexversion < 0x3000000:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, exit_code, stdout, stderr, cmd):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.exit_code = exit_code,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.stdout = stdout,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.stderr = stderr,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.cmd = cmd,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def __str__(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return str(self.exit_code),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _bytes2int(bytes):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Convert bytes to int.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _parse_network_details(machine_id):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
'MAC;IP;Netmask;Gateway;Broadcast;DNS' where ';' is field separator.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
Each record is separated by '#' from next record.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.debug(_(""Received machine_id from vmtools : %s"") % machine_id[0])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
network_details = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
network_info_list = machine_id_str.split(';'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
no_grps = len(network_info_list) / 6,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
i = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
k = i * 6,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_info_list[k + 1].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_info_list[k + 2].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_info_list[k + 3].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_info_list[k + 4].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_info_list[k + 5].strip().split(',')))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
i += 1,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.debug(_(""NIC information from vmtools : %s"") % network_details)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return network_details,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_windows_network_adapters():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
wbem_locator = win32com.client.Dispatch('WbemScripting.SWbemLocator'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"wbem_service = wbem_locator.ConnectServer('.', 'root\cimv2')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
wbem_network_adapters = wbem_service.InstancesOf('Win32_NetworkAdapter'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
wbem_network_adapter.NetConnectionStatus == 7:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
mac_address = wbem_network_adapter.MacAddress.lower(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
subnet_mask = '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if wbem_network_adapter_config.IPEnabled:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
subnet_mask = wbem_network_adapter_config.IPSubnet[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_adapters.append({'name': adapter_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"'mac-address': mac_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"'ip-address': ip_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_linux_network_adapters():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
max_bytes = 8096,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
arch = platform.architecture()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
offset1 = 32,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
offset2 = 32,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
offset1 = 16,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
offset2 = 40,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"names = array.array('B', '\0' * max_bytes)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"outbytes = struct.unpack('iL', fcntl.ioctl(",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"sock.fileno(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"[names.tostring()[n_counter:n_counter + offset1].split('\0', 1)[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
for adapter_name in adapter_names:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
subnet_mask = socket.inet_ntoa(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_win_adapter_name_and_ip_address(mac_address):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_linux_adapter_name_and_ip_address(mac_address):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _execute(cmd_list, process_input=None, check_exit_code=True):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
cmd = ' '.join(cmd_list),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.debug(_(""Executing command: '%s'"") % cmd)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
env = os.environ.copy(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"obj = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
result = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
result = obj.communicate(process_input),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
result = obj.communicate(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if obj.returncode:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.debug(_(""Result was %s"") % obj.returncode)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if check_exit_code and obj.returncode != 0:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"(stdout, stderr) = result",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"raise ProcessExecutionError(exit_code=obj.returncode,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return result,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _windows_set_networking():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Set IP address for the windows VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
program_files = os.environ.get('PROGRAMFILES'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
program_files_x86 = os.environ.get('PROGRAMFILES(X86)'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"elif program_files_x86 and os.path.exists(os.path.join(program_files_x86,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if vmware_tools_bin:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"for network_detail in _parse_network_details(_execute(cmd,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"cmd = ['netsh', 'interface', 'ip', 'set', 'address',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if dns_server:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"cmd = ['netsh', 'interface', 'ip', 'add', 'dns',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.warn(_(""VMware Tools is not installed""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _filter_duplicates(all_entries):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
final_list = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if entry and entry not in final_list:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return final_list,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _set_rhel_networking(network_details=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
all_dns_servers = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
for network_detail in network_details:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"interface_file = open(interface_file_name, 'w')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nDEVICE=%s' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nBROADCAST=%s' % broadcast),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nGATEWAY=%s' % gateway),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nNETMASK=%s' % subnet_mask),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nIPADDR=%s' % ip_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nMACADDR=%s' % mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if all_dns_servers:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"dns_file_name = ""/etc/resolv.conf""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"dns_file = open(dns_file_name, 'w')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"dns_file.write(""; generated by OpenStack guest tools"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
unique_entries = _filter_duplicates(all_dns_servers),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"dns_file.write(""\nnameserver %s"" % dns_server)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _set_ubuntu_networking(network_details=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file_name = '/etc/network/interfaces',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"for device, network_detail in enumerate(network_details):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if adapter_name:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nauto %s' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nbroadcast %s' % broadcast),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\ngateway %s' % gateway),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\nnetmask %s' % subnet_mask),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
interface_file.write('\naddress %s\n' % ip_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.debug(_(""Successfully configured NIC %d with """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""NIC info %s"") % (device, network_detail))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _linux_set_networking():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Set IP address for the Linux VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if os.path.exists('/usr/sbin/vmtoolsd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
elif os.path.exists('/usr/bin/vmtoolsd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
elif os.path.exists('/usr/sbin/vmware-guestd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
elif os.path.exists('/usr/bin/vmware-guestd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"cmd = [vmware_tools_bin, '--cmd', 'machine.id.get']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"network_details = _parse_network_details(_execute(cmd,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"# TODO(sateesh): For other distros like suse, debian, BSD, etc.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if(platform.dist()[0] == 'Ubuntu'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"logging.warn(_(""Distro '%s' not supported"") % platform.dist()[0])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
pltfrm = sys.platform,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
#,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
#         http://www.apache.org/licenses/LICENSE-2.0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
PLATFORM_WIN = 'win32',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
PLATFORM_LINUX = 'linux2',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ARCH_32_BIT = '32bit',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ARCH_64_BIT = '64bit',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
NO_MACHINE_ID = 'No machine id',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# Logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"FORMAT = ""%(asctime)s - %(levelname)s - %(message)s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG_DIR = os.path.join(os.environ.get('ALLUSERSPROFILE'), 'openstack')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
LOG_DIR = '/var/log/openstack',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
LOG_DIR = 'logs',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if not os.path.exists(LOG_DIR):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG_FILENAME = os.path.join(LOG_DIR, 'openstack-guest-tools.log')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if sys.hexversion < 0x3000000:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, exit_code, stdout, stderr, cmd):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.exit_code = exit_code,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.stdout = stdout,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.stderr = stderr,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.cmd = cmd,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def __str__(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return str(self.exit_code),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _bytes2int(bytes):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Convert bytes to int.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _parse_network_details(machine_id):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
'MAC;IP;Netmask;Gateway;Broadcast;DNS' where ';' is field separator.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
Each record is separated by '#' from next record.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Received machine_id from vmtools : %s"") % machine_id[0])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
network_details = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
network_info_list = machine_id_str.split(';'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
no_grps = len(network_info_list) / 6,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
i = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
k = i * 6,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 1].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 2].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 3].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 4].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 5].strip().split(',')))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
i += 1,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""NIC information from vmtools : %s"") % network_details)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return network_details,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_windows_network_adapters():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
wbem_locator = win32com.client.Dispatch('WbemScripting.SWbemLocator'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"wbem_service = wbem_locator.ConnectServer('.', 'root\cimv2')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
wbem_network_adapters = wbem_service.InstancesOf('Win32_NetworkAdapter'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
wbem_network_adapter.NetConnectionStatus == 7:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
mac_address = wbem_network_adapter.MacAddress.lower(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if wbem_network_adapter_config.IPEnabled:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = wbem_network_adapter_config.IPSubnet[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_adapters.append({'name': adapter_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"'mac-address': mac_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"'ip-address': ip_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_linux_network_adapters():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
max_bytes = 8096,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
arch = platform.architecture()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset1 = 32,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset2 = 32,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset1 = 16,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset2 = 40,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"names = array.array('B', '\0' * max_bytes)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"outbytes = struct.unpack('iL', fcntl.ioctl(",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"sock.fileno(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"[names.tostring()[n_counter:n_counter + offset1].split('\0', 1)[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
for adapter_name in adapter_names:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = socket.inet_ntoa(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_win_adapter_name_and_ip_address(mac_address):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_linux_adapter_name_and_ip_address(mac_address):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _execute(cmd_list, process_input=None, check_exit_code=True):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
cmd = ' '.join(cmd_list),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Executing command: '%s'"") % cmd)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
env = os.environ.copy(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"obj = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
result = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
result = obj.communicate(process_input),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
result = obj.communicate(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if obj.returncode:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Result was %s"") % obj.returncode)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if check_exit_code and obj.returncode != 0:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"(stdout, stderr) = result",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"raise ProcessExecutionError(exit_code=obj.returncode,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return result,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _windows_set_networking():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Set IP address for the windows VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
program_files = os.environ.get('PROGRAMFILES'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
program_files_x86 = os.environ.get('PROGRAMFILES(X86)'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"elif program_files_x86 and os.path.exists(os.path.join(program_files_x86,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if vmware_tools_bin:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"for network_detail in _parse_network_details(_execute(cmd,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cmd = ['netsh', 'interface', 'ip', 'set', 'address',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if dns_server:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cmd = ['netsh', 'interface', 'ip', 'add', 'dns',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.warn(_(""VMware Tools is not installed""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _filter_duplicates(all_entries):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
final_list = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if entry and entry not in final_list:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return final_list,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _set_rhel_networking(network_details=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
all_dns_servers = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
for network_detail in network_details:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"interface_file = open(interface_file_name, 'w')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nDEVICE=%s' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nBROADCAST=%s' % broadcast),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nGATEWAY=%s' % gateway),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nNETMASK=%s' % subnet_mask),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nIPADDR=%s' % ip_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nMACADDR=%s' % mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if all_dns_servers:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file_name = ""/etc/resolv.conf""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file = open(dns_file_name, 'w')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file.write(""; generated by OpenStack guest tools"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
unique_entries = _filter_duplicates(all_dns_servers),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file.write(""\nnameserver %s"" % dns_server)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _set_ubuntu_networking(network_details=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file_name = '/etc/network/interfaces',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"for device, network_detail in enumerate(network_details):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if adapter_name:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nauto %s' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nbroadcast %s' % broadcast),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\ngateway %s' % gateway),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nnetmask %s' % subnet_mask),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\naddress %s\n' % ip_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Successfully configured NIC %d with """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""NIC info %s"") % (device, network_detail))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _linux_set_networking():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Set IP address for the Linux VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if os.path.exists('/usr/sbin/vmtoolsd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
elif os.path.exists('/usr/bin/vmtoolsd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
elif os.path.exists('/usr/sbin/vmware-guestd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
elif os.path.exists('/usr/bin/vmware-guestd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cmd = [vmware_tools_bin, '--cmd', 'machine.id.get']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_details = _parse_network_details(_execute(cmd,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"# TODO(sateesh): For other distros like suse, debian, BSD, etc.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if(platform.dist()[0] == 'Ubuntu'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.warn(_(""Distro '%s' not supported"") % platform.dist()[0])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
pltfrm = sys.platform,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter.NetConnectionStatus == 7):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
mac_address = adapter.MacAddress.lower(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
config = adapter.associators_(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if config.IPEnabled:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
subnet_mask = config.IPSubnet[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"(mac_address, ip_address, subnet_mask, gateway, broadcast,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
name_and_ip = _get_win_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
name_and_ip = _get_linux_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
wbem_network_adapter.NetConnectionStatus == 7:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
mac_address = wbem_network_adapter.MacAddress.lower(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if wbem_network_adapter_config.IPEnabled:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = wbem_network_adapter_config.IPSubnet[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"[names.tostring()[n_counter:n_counter + offset1].split('\0', 1)[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
VMWARE_PREFIX = 'vmware',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
RESIZE_TOTAL_STEPS = 4,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, session, virtapi, volumeops):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.compute_api = compute.API(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._virtapi = virtapi,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._volumeops = volumeops,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._default_root_device = 'vda',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._rescue_suffix = '-rescue',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._poll_rescue_last_ran = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
the metadata .vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
3.3. Delete the -sparse.vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
5. Power on the VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstanceExists(name=instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds = vm_util.get_datastore_ref_and_name(self._session),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
data_store_ref = ds[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
data_store_name = ds[1],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"disk_type = image_properties.get(""vmware_disktype"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return vmdk_file_size_in_kb, os_type, adapter_type, disk_type",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
disk_type) = _get_image_properties(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vm_folder_ref, res_pool_ref = self._get_vmfolder_and_res_pool_refs()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return vif_infos,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if CONF.vnc_enabled:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vnc_port = self._get_vnc_port(vm_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self._set_vnc_config(client_factory, instance, vnc_port, vnc_pass)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""%(vmdk_file_size_in_kb)s KB and adapter type """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""%(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _delete_disk_file(vmdk_path):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# we just created above,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _copy_virtual_disk():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# storage adapter type.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vmdk_copy_spec = vm_util.get_vmdk_create_spec(client_factory,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vmdk_copy_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Copied Virtual Disk of size %(vmdk_file_size_in_kb)s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"ebs_root = self._volume_in_mapping(self._default_root_device,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not ebs_root:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
linked_clone = CONF.use_linked_clone,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if linked_clone:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
upload_folder = self._instance_path_base,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
upload_name = instance['image_ref'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
upload_folder = instance['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
upload_name = instance['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not (linked_clone and self._check_if_folder_file_exists(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"upload_folder, upload_name + "".vmdk"")):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
flat_uploaded_vmdk_path = vm_util.build_datastore_path(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
sparse_uploaded_vmdk_path = vm_util.build_datastore_path(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
dc_ref = self._get_datacenter_ref_and_name()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"if disk_type != ""sparse"":",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"disk_type = ""thin""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# linked clone base disk exists,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vm_ref, instance,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
root_disk = driver.block_device_info_get_mapping(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
connection_info = root_disk['connection_info'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstanceNotFound(instance_id=instance['uuid']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"name=""%s-snapshot"" % instance['name'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
2. Destroy the VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Destroying the VM""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
destroy_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Destroyed the VM""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"except Exception, excep:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if network_info:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""VM was already in suspended state. So returning """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Rescue the specified instance.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self.spawn(context, instance, image_meta, network_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vmdk_path, controller_key, adapter_type, disk_type, unit_number \",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
= vm_util.get_vmdk_path_and_adapter_type(hardware_devices),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"rescue_vm_ref, instance,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Unrescue the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
instance_orig_name = instance['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
instance['name'] = instance_orig_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Power off the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# Only PoweredOn VMs can be powered off.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Powering off the VM""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
poweroff_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Powered off the VM""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstancePowerOffFailure(reason=reason),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""VM was already in powered off state. So returning """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Power on the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""VM was already in powered on state. So returning """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# Only PoweredOff and Suspended VMs can be powered on.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Powering on the VM""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
poweron_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Powered on the VM""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
#,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
progress = round(float(step) / total_steps * 100),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
instance_uuid = instance['uuid'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Updating instance '%(instance_uuid)s' progress to""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self._update_instance_progress(context, instance,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstanceNotFound(instance_id=instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
host_ref = self._get_host_ref_from_name(dest),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.HostNotFound(host=dest),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
name_label = self._get_orig_vm_name_label(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
rename_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_ref = vm_util.get_datastore_ref_and_name(self._session)[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
client_factory = self._session._get_vim().client.factory,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"rel_spec = vm_util.relocate_vm_spec(client_factory, ds_ref, host_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"clone_spec = vm_util.clone_vm_spec(client_factory, rel_spec)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vm_clone_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
instance_name = self._get_orig_vm_name_label(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.warn(_(""In vmwareapi:vmops:confirm_migration, got this """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# The original vm was suffixed with '-orig'; find it using,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstanceNotFound(instance_id=name_label),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def live_migration(self, context, instance_ref, dest,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstanceNotFound(instance_id=instance_ref.name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vm_migrate_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def poll_rebooting_instances(self, timeout, instances):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ctxt = nova_context.get_admin_context(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"instances_info = dict(instance_count=len(instances),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"if instances_info[""instance_count""] > 0:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.info(_(""Found %(instance_count)d hung reboots """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""older than %(timeout)d seconds"") % instances_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
for instance in instances:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.info(_(""Automatically hard rebooting %d"") % instance['uuid'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self.compute_api.reboot(ctxt, instance, ""HARD"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Return connection info for a vnc console.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return {'host': CONF.vmwareapi_host_ip,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_vnc_port(vm_ref):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vm_id = int(vm_ref.value.replace('vm-', ''))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return port,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vnc_config_spec = vm_util.get_vnc_config_spec(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""port - %(port)s"") % {'port': port},",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_datacenter_ref_and_name(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _get_host_ref_from_name(self, host_name):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
for host in host_objs:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return host.obj,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _get_vmfolder_and_res_pool_refs(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vm_folder_ref = dc_objs[0].propSet[0].val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return vm_folder_ref, res_pool_ref",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _path_file_exists(self, ds_browser, ds_path, file_name):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"search_spec = vm_util.search_datastore_spec(client_factory, file_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"if task_info.state in ['queued', 'running']:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return False, False",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"file_exists = (getattr(task_info.result, 'file', False) and",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
task_info.result.file[0].path == file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return True, file_exists",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _check_if_folder_file_exists(self, ds_ref, ds_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_browser = vim_util.get_dynamic_property(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"folder_path = vm_util.build_datastore_path(ds_name, folder_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"folder_exists, file_exists = self._path_file_exists(ds_browser,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not folder_exists:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return file_exists,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _volume_in_mapping(mount_device, block_device_info):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
block_device_list = [block_device.strip_dev(vol['mount_device']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
swap = driver.block_device_info_get_swap(block_device_info),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if driver.swap_is_usable(swap):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
block_device_list += [block_device.strip_dev(ephemeral['device_name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return block_device.strip_dev(mount_device) in block_device_list,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, session):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
the metadata .vmdk file.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
6. Power on the VM.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.InstanceExists(name=instance.name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_datastore_ref():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ds_name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ds_type = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ds_type = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ds_name = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# Local storage identifier,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
data_store_name = ds_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return data_store_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.NovaException(msg),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
data_store_name = _get_datastore_ref(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_vmfolder_and_res_pool_mors():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vm_folder_mor = dc_objs[0].propSet[0].val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return vm_folder_mor, res_pool_mor",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"vm_folder_mor, res_pool_mor = _get_vmfolder_and_res_pool_mors()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
instance.name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"flat_uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""%(vmdk_file_size_in_kb)s KB and adapter type  """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""%(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _delete_disk_file():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
cookies = self._session._get_vim().client.options.transport.cookiejar,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# above,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""data store %(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _attach_vmdk_to_the_vm():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
to do so.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vmdk_attach_config_spec = vm_util.get_vmdk_attach_config_spec(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
reconfig_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.InstanceNotFound(instance_id=instance.id),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"name=""%s-snapshot"" % instance.name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
dc_ref = self._get_datacenter_name_and_ref()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.debug(_(""VM was already in suspended state. So returning """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_datacenter_name_and_ref(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _get_vm_ref_from_the_name(self, vm_name):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return vm.obj,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
upload_folder = instance['uuid'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"name=""%s-snapshot"" % instance['uuid'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"rescue_vm_ref = vm_util.get_vm_ref_from_uuid(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if vm_ref:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.InstanceExists(name=instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
upload_folder = instance['name'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.InstanceNotFound(instance_id=instance['uuid']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"name=""%s-snapshot"" % instance['name'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.InstanceNotFound(instance_id=instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.InstanceNotFound(instance_id=instance_ref.name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
CONF.vmware.host_password is None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""host_username """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._session = VMwareAPISession(scheme=scheme),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, host_ip=CONF.vmware.host_ip,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._host_username = username,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._host_password = password,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
delay = 1,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"delay = min(2 * delay, 60)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if self.vim:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
host_username = CONF.vmware.host_username,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
host_password = CONF.vmware.host_password,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
api_retry_count = CONF.vmware.api_retry_count,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"raise Exception(_(""Must specify vmwareapi_host_ip,""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""vmwareapi_host_username """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""and vmwareapi_host_password to use""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._session = VMwareAPISession(self._host_ip,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._host_username = host_username,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._host_password = host_password,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.api_retry_count = api_retry_count,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.critical(_(""In vmwareapi:_create_session, """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise exception.NovaException(excep),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if utils.is_valid_ipv6(host):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"property_dict = get_dynamic_properties(vim, mobj, type, [property_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return property_dict.get(property_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_dynamic_properties(vim, mobj, type, property_names):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"obj_content = get_object_properties(vim, None, mobj, type, property_names)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
dynamic_properties = obj_content.objects[0].propSet,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if dynamic_properties:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
property_dict[prop.name] = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return property_dict,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def get_about_info(vim):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return vim.get_service_content().about,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"obj_content = get_object_properties(vim, None, mobj, type, [property_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
property_value = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
dynamic_property = obj_content.objects[0].propSet,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if dynamic_property:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
property_value = dynamic_property[0].val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return property_value,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._vmops.get_diagnostics(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return _vmops.get_diagnostics(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return self._vmops.get_info(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return _vmops.get_info(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vim = self._session._get_vim(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
file_delete_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Deleted the datastore file""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
random_name = uuidutils.generate_uuid(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"dest_vmdk_file_path = vm_util.build_datastore_path(datastore_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"dest_vmdk_data_file_path = vm_util.build_datastore_path(datastore_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""vmware-tmp/%s-flat.vmdk"" % random_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _delete_disk_file(vmdk_path):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""store %(data_store_name)s"") %",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vmdk_delete_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
random_name = str(uuid.uuid4()),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dest_vmdk_file_location = vm_util.build_datastore_path(datastore_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"% dest_vmdk_file_location, instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
remove_disk_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"DcInfo = collections.namedtuple('DcInfo',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
dc_info = self.get_datacenter_ref_and_name(data_store_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return ds_ref,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_ref = _check_if_tmp_folder_exists(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
dc_info = self.get_datacenter_ref_and_name(ds_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"lst_properties = [""config.files.vmPathName"", ""runtime.powerState"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_ref_ret = query['datastore'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_ref = ds_ref_ret.ManagedObjectReference[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_datacenter_ref_and_name(self, ds_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
map = self._datastore_dc_mapping.get(ds_ref.value),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not map:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"map = DcInfo(ref=dc_obj.objects[0].obj,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._datastore_dc_mapping[ds_ref.value] = map,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return map,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _mkdir(self, ds_path, ds_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _update_datacenter_cache_from_objects(self, dcs):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Updates the datastore/datacenter cache.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
token = vm_util._get_token(dcs),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vmFolder = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
dc_ref = dco.obj,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_refs = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
name = p.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
datastore_refs = p.val.ManagedObjectReference,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vmFolder = p.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self._datastore_dc_mapping[ds_ref] = DcInfo(ref=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if token:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
dc_info = self._datastore_dc_mapping.get(ds_ref.value),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not dc_info:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return dc_info,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vm_folder_ref = self._get_vmfolder_ref(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
dc_ref = self._get_datacenter_ref_and_name()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
dc_name = self._get_datacenter_ref_and_name()[1],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"lst_properties = [""config.files.vmPathName"", ""runtime.powerState""]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_datacenter_ref_and_name(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return dc_obj.objects[0].obj, dc_obj.objects[0].propSet[0].val",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _mkdir(self, ds_path):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"if hasattr(self, 'vim') and self.vim:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if self.vim:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ds_ref_ret = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_browser = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ds_ref_ret = vim_util.get_dynamic_property(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ds_browser = vim_util.get_dynamic_property(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
TIME_BETWEEN_API_CALL_RETRIES = 1.0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._session = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if self._session:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _session_is_active(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
active = False,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
active = self.vim.SessionIsActive(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
except Exception as e:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return active,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# active,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if self._session_is_active():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
except error_util.SessionConnectionException as excep:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
exc = excep,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
TIME_BETWEEN_API_CALL_RETRIES = 2.0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._session_id = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if self._session_id:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._session_id = session.key,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
last_fault_list = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if error_util.FAULT_NOT_AUTHENTICATED in last_fault_list:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
last_fault_list = excep.fault_list,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.critical(_(""In vmwareapi:_call_method, """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""got this exception: %s"") % exc)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _stop_loop(self, loop):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return (vmdk_file_path, adapter_type, disk_type)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _find_controller_slot(controller_keys, taken, max_unit_number):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
for controller_key in controller_keys:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"if not unit_number in taken.get(controller_key, []):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return controller_key, unit_number",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _is_ide_controller(device):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _is_scsi_controller(device):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return device.__class__.__name__ in ['VirtualLsiLogicController',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _find_allocated_slots(devices):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"if hasattr(device, 'controllerKey') and hasattr(device, 'unitNumber'):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"unit_numbers = taken.setdefault(device.controllerKey, [])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if _is_scsi_controller(device):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"unit_numbers = taken.setdefault(device.key, [])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return taken,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def allocate_controller_key_and_unit_number(client_factory, devices,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
devices = devices.VirtualDevice,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
taken = _find_allocated_slots(devices),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
ret = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"ret = _find_controller_slot(ide_keys, taken, 2)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"ret = _find_controller_slot(scsi_keys, taken, 16)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if ret:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return ret[0], ret[1], None",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"controller_spec = create_controller_spec(client_factory, controller_key,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return controller_key, 0, controller_spec",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# controls this Hard Disk,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"controller_spec = create_controller_spec(client_factory,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
unit_number = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if device.unitNumber > unit_number:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
unit_number = device.unitNumber,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return (vmdk_file_path, vmdk_controller_key, adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
controller_spec) = vm_util.allocate_controller_key_and_unit_number(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
cdrom_attach_config_spec = vm_util.get_cdrom_attach_config_spec(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if controller_spec:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
disk_type) = vm_util.get_vmdk_path_and_adapter_type(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vmdk_attach_config_spec = vm_util.get_cdrom_attach_config_spec(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"disk_type, unit_number) = vm_util.get_vmdk_path_and_adapter_type(",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
unit_number) = vm_util.get_vmdk_path_and_adapter_type(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.debug(_(""Creating directory with path %s"") % ds_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._session._call_method(self._session._get_vim(), ""MakeDirectory"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.debug(_(""Created directory with path %s"") % ds_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
snapshot_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"name=""%s-snapshot"" % instance['uuid'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
snapshot = task_info.result,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return snapshot,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
delete_snapshot_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"snapshot = self._create_vm_snapshot(instance, vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# Note(vui): handle snapshot cleanup on exceptions.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _create_vm_snapshot():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
snapshot_task = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"name=""%s-snapshot"" % instance['uuid'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
lst_vm_names = self._get_valid_vms_from_retrieve_result(vms),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _get_valid_vms_from_retrieve_result(self, retrieve_result):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""Returns list of valid vms from RetrieveResult object.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
lst_vm_names = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
token = vm_util._get_token(retrieve_result),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vm_name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
conn_state = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vm_name = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
conn_state = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"if conn_state not in [""orphaned"", ""inaccessible""]:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if token:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return lst_vm_names,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def list_instances(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"properties = ['name', 'runtime.connectionState']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.debug(_(""Getting list of instances from cluster %s""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vms = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
root_res_pool = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if root_res_pool:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
vms = self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
lst_vm_names = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
token = vm_util._get_token(vms),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vm_name = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
conn_state = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vm_name = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
conn_state = prop.val,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"if conn_state not in [""orphaned"", ""inaccessible""]:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if token:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self.wsdl_url = Vim.get_wsdl_url(protocol, host, port)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self.url = Vim.get_soap_url(protocol, host, port)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_wsdl_url(protocol, host_name, port):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_soap_url(protocol, host_name, port):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self.wsdl_url = Vim.get_wsdl_url(protocol, host)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self.url = Vim.get_soap_url(protocol, host)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def get_wsdl_url(protocol, host_name):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def get_soap_url(protocol, host_name):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"help='Port for connection to VMware VC host.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"help='Username for connection to VMware VC host.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"help='Password for connection to VMware VC host.',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# deprecation warning.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def _do_deprecation_warning(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
'removed in the Juno release. The VC driver will remain ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
'and continue to be supported.')),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, virtapi, read_only=False, scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""The VC host connection object.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
#,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._cluster_names = CONF.vmware.cluster_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self.dict_mors = vm_util.get_all_cluster_refs_by_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if not self.dict_mors:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
% self._cluster_names),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"clusters_found = [v.get('name') for k, v in self.dict_mors.iteritems()]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
missing_clusters = set(self._cluster_names) - set(clusters_found),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if missing_clusters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""vCenter %s"") % list(missing_clusters))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# objects per cluster,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._resource_keys = set(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._virtapi = virtapi,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# not use VC state.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
first_cluster = self._resources.keys()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._vmops = self._resources.get(first_cluster).get('vmops'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._volumeops = self._resources.get(first_cluster).get('volumeops'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._vc_state = self._resources.get(first_cluster).get('vcstate'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"LOG.warn(_LW('Instance cannot be found in host, or in an unknown'",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _get_available_resources(self, host_stats):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return {'vcpus': host_stats['vcpus'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"help='Port for connection to VMware ESX/VC host.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"help='Username for connection to VMware ESX/VC host.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"help='Password for connection to VMware ESX/VC host.',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"'compute_driver is vmwareapi.VMwareVCDriver.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# VMwareAPI has both ESXi and vCenter API sets.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# valid vCenter calls. There are some small edge-case,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"# exceptions regarding VNC, CIM, User management & SSO.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _do_deprecation_warning(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
'removed in the Juno release. The VC driver will remain ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
'and continue to be supported.')),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._host_ip = CONF.vmware.host_ip,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
CONF.vmware.host_password is None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""host_username """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._volumeops = volumeops.VMwareVolumeOps(self._session),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._vmops = vmops.VMwareVMOps(self._session, self.virtapi,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._host = host.Host(self._session),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._host_state = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def host_state(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if not self._host_state:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._host_state = host.HostState(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._host_state,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def init_host(self, host):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
vim = self._session.vim,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def cleanup_host(self, host):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
service_content = vim.get_service_content(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
session_manager = service_content.sessionManager,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.debug(""No vSphere session was open during cleanup_host."")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def list_instances(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""List VM instances.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._vmops.list_instances(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Create VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._vmops.spawn(context, instance, image_meta, injected_files,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._vmops.snapshot(context, instance, image_id, update_task_state)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Reboot VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Destroy VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# Destroy gets triggered when Resource Claim in resource_tracker,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if not instance['node']:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Pause VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Unpause paused VM instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Suspend the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Rescue the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self._vmops.rescue(context, instance, network_info, image_meta)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Unrescue the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Power off the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Power on the specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.warn(_('Instance cannot be found in host, or in an unknown'",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def poll_rebooting_instances(self, timeout, instances):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._vmops.get_info(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Return link to instance's VNC console.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._vmops.get_vnc_console(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._volumeops.get_volume_connector(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def get_host_ip_addr(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._host_ip,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self._volumeops.attach_volume(connection_info,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"instance,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self._volumeops.detach_volume(connection_info,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def get_console_pool_info(self, console_type):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return {'address': CONF.vmware.host_ip,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _get_available_resources(self, host_stats):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return {'vcpus': host_stats['vcpus'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def get_available_resource(self, nodename):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"This method is called when nova-compute launches, and",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
host_stats = self.get_host_stats(refresh=True),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._get_available_resources(host_stats),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def get_host_stats(self, refresh=False):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self.host_state.get_host_stats(refresh=refresh),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def host_power_action(self, host, action):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self._host.host_power_action(host, action)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def host_maintenance_mode(self, host, mode):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Start/Stop host maintenance window. On start, it triggers",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self._host.host_maintenance_mode(host, mode)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def set_host_enabled(self, host, enabled):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self._host.set_host_enabled(host, enabled)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def get_host_uptime(self, host):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def manage_image_cache(self, context, all_instances):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Efficient override of base instance_exists method.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self._vmops.instance_exists(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Detach an interface from the instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""The VC host connection object.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# The vCenter driver includes several additional VMware vSphere,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
#,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# Driver validated by VMware's Minesweeper CI,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, virtapi, scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._cluster_names = CONF.vmware.cluster_name,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"self.dict_mors = vm_util.get_all_cluster_refs_by_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if not self.dict_mors:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
% self._cluster_names),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"clusters_found = [v.get('name') for k, v in self.dict_mors.iteritems()]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
missing_clusters = set(self._cluster_names) - set(clusters_found),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if missing_clusters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# objects per cluster,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._resource_keys = set(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._virtapi = virtapi,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# not use VC state.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
first_cluster = self._resources.keys()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._vmops = self._resources.get(first_cluster).get('vmops'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._volumeops = self._resources.get(first_cluster).get('volumeops'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self._vc_state = self._resources.get(first_cluster).get('vcstate'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"# In this situation, ESXi and vCenter require different",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
CONF = cfg.CONF,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
LINKED_CLONE_PROPERTY = 'vmware_linked_clone',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, image_id,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
os_type (str): name of guest os (use vSphere names only),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"disk_type (str): type of disk in thin, thick, etc",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"linked_clone(bool): use linked clone, or don't",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.image_id = image_id,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.file_size = file_size,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.os_type = os_type,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.disk_type = disk_type,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.file_type = file_type,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
# descriptor-based validation.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InvalidDiskFormat(disk_format=self.file_type),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.linked_clone = linked_clone,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.linked_clone = CONF.vmware.use_linked_clone,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self.vif_model = vif_model,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def file_size_in_kb(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return self.file_size / units.Ki,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def file_size_in_gb(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return self.file_size / units.Gi,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def is_sparse(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
def is_iso(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def from_image(cls, image_id, image_meta=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
:param image_meta - image metadata we are working with,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
:return: vmware image object,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"properties = image_meta.get(""properties"", {})",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"image_linked_clone = properties.get(LINKED_CLONE_PROPERTY,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
linked_clone = strutils.bool_from_string(image_linked_clone),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
props = {,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if 'size' in image_meta:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
props['file_size'] = image_meta['size'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if 'disk_format' in image_meta:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
props['file_type'] = image_meta['disk_format'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
props_map = {,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if k in properties:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
props[v] = properties[k],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return cls(**props),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"size, properties = meta_data[""size""], meta_data[""properties""]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return size, properties",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
#,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
#         http://www.apache.org/licenses/LICENSE-2.0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
PLATFORM_WIN = 'win32',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
PLATFORM_LINUX = 'linux2',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ARCH_32_BIT = '32bit',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
ARCH_64_BIT = '64bit',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
NO_MACHINE_ID = 'No machine id',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# Logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"FORMAT = ""%(asctime)s - %(levelname)s - %(message)s""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG_DIR = os.path.join(os.environ.get('ALLUSERSPROFILE'), 'openstack')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
LOG_DIR = '/var/log/openstack',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
LOG_DIR = 'logs',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if not os.path.exists(LOG_DIR):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG_FILENAME = os.path.join(LOG_DIR, 'openstack-guest-tools.log')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if sys.hexversion < 0x3000000:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, exit_code, stdout, stderr, cmd):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.exit_code = exit_code,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.stdout = stdout,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.stderr = stderr,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.cmd = cmd,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def __str__(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return str(self.exit_code),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _bytes2int(bytes):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Convert bytes to int.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _parse_network_details(machine_id):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
'MAC;IP;Netmask;Gateway;Broadcast;DNS' where ';' is field separator.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
Each record is separated by '#' from next record.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Received machine_id from vmtools : %s"") % machine_id[0])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
network_details = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
network_info_list = machine_id_str.split(';'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
no_grps = len(network_info_list) / 6,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
i = 0,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
k = i * 6,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 1].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 2].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 3].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 4].strip(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_info_list[k + 5].strip().split(',')))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
i += 1,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""NIC information from vmtools : %s"") % network_details)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return network_details,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_windows_network_adapters():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
wbem_locator = win32com.client.Dispatch('WbemScripting.SWbemLocator'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"wbem_service = wbem_locator.ConnectServer('.', 'root\cimv2')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
wbem_network_adapters = wbem_service.InstancesOf('Win32_NetworkAdapter'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter.NetConnectionStatus == 7):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
mac_address = adapter.MacAddress.lower(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
config = adapter.associators_(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = '',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if config.IPEnabled:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = config.IPSubnet[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_adapters.append({'name': adapter_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"'mac-address': mac_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"'ip-address': ip_address,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_linux_network_adapters():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
max_bytes = 8096,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
arch = platform.architecture()[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset1 = 32,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset2 = 32,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset1 = 16,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
offset2 = 40,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"names = array.array('B', '\0' * max_bytes)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"outbytes = struct.unpack('iL', fcntl.ioctl(",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"sock.fileno(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
for adapter_name in adapter_names:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
subnet_mask = socket.inet_ntoa(fcntl.ioctl(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_win_adapter_name_and_ip_address(mac_address):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _get_linux_adapter_name_and_ip_address(mac_address):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _execute(cmd_list, process_input=None, check_exit_code=True):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
cmd = ' '.join(cmd_list),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Executing command: '%s'"") % cmd)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
env = os.environ.copy(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"obj = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
result = None,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
result = obj.communicate(process_input),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
result = obj.communicate(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if obj.returncode:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Result was %s"") % obj.returncode)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if check_exit_code and obj.returncode != 0:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"(stdout, stderr) = result",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"raise ProcessExecutionError(exit_code=obj.returncode,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return result,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _windows_set_networking():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Set IP address for the windows VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
program_files = os.environ.get('PROGRAMFILES'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
program_files_x86 = os.environ.get('PROGRAMFILES(X86)'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"elif program_files_x86 and os.path.exists(os.path.join(program_files_x86,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if vmware_tools_bin:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"for network_detail in _parse_network_details(_execute(cmd,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"(mac_address, ip_address, subnet_mask, gateway, broadcast,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
name_and_ip = _get_win_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cmd = ['netsh', 'interface', 'ip', 'set', 'address',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if dns_server:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cmd = ['netsh', 'interface', 'ip', 'add', 'dns',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.warn(_(""VMware Tools is not installed""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _filter_duplicates(all_entries):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
final_list = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if entry and entry not in final_list:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return final_list,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _set_rhel_networking(network_details=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
all_dns_servers = [],7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
for network_detail in network_details:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
name_and_ip = _get_linux_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"interface_file = open(interface_file_name, 'w')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nDEVICE=%s' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nBROADCAST=%s' % broadcast),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nGATEWAY=%s' % gateway),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nNETMASK=%s' % subnet_mask),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nIPADDR=%s' % ip_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nMACADDR=%s' % mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if all_dns_servers:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file_name = ""/etc/resolv.conf""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file = open(dns_file_name, 'w')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file.write(""; generated by OpenStack guest tools"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
unique_entries = _filter_duplicates(all_dns_servers),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"dns_file.write(""\nnameserver %s"" % dns_server)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _set_ubuntu_networking(network_details=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file_name = '/etc/network/interfaces',7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"for device, network_detail in enumerate(network_details):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if adapter_name:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nauto %s' % adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nbroadcast %s' % broadcast),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\ngateway %s' % gateway),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\nnetmask %s' % subnet_mask),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
interface_file.write('\naddress %s\n' % ip_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.debug(_(""Successfully configured NIC %(device)d with """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def _linux_set_networking():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Set IP address for the Linux VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if os.path.exists('/usr/sbin/vmtoolsd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
elif os.path.exists('/usr/bin/vmtoolsd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
elif os.path.exists('/usr/sbin/vmware-guestd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
elif os.path.exists('/usr/bin/vmware-guestd'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cmd = [vmware_tools_bin, '--cmd', 'machine.id.get']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"network_details = _parse_network_details(_execute(cmd,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"# TODO(sateesh): For other distros like suse, debian, BSD, etc.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if(platform.dist()[0] == 'Ubuntu'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"logging.warn(_(""Distro '%s' not supported"") % platform.dist()[0])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
pltfrm = sys.platform,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _get_base_url(self, scheme, host, file_path):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if utils.is_valid_ipv6(host):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
if utils.is_valid_ipv6(host):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _get_base_url(self, scheme, host, port, file_path):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def __init__(self, host, port, data_center_name, datastore_name, cookies,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def _get_base_url(self, scheme, host, file_path):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, host, data_center_name, datastore_name, cookies,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, host, port, data_center_name, datastore_name, cookies,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self._base_url = self._get_base_url(scheme, host, port, file_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"param_list = {""dcPath"": data_center_name, ""dsName"": datastore_name}",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"self._conn = self._create_read_connection(self._base_url,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return self._file_handle.read(rw_handles.READ_CHUNKSIZE),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return self._file_handle.headers.get(""Content-Length"", -1)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
LOG = logging.getLogger(__name__),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"USER_AGENT = ""OpenStack-ESX-Adapter""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
READ_CHUNKSIZE = 65536,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, glance_read_iter):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.glance_read_iter = glance_read_iter,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.iter = self.get_next(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""Read an item from the queue.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self.iter.next(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return """"",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def get_next(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
for data in self.glance_read_iter:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
yield data,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def close(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""A dummy close just to maintain consistency.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, file_handle):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.file_handle = file_handle,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def set_eof(self, eof):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def get_eof(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
except Exception as exc:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _build_vim_cookie_headers(self, vim_cookies):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"cookie_header = """"",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return cookie_header,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
raise NotImplementedError(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
def get_size(self):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, host, port, data_center_name, datastore_name, cookies,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"param_list = {""dcPath"": data_center_name, ""dsName"": datastore_name}",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
_urlparse = urlparse.urlparse(base_url),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"scheme, netloc, path, params, query, fragment = _urlparse",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
conn = httplib.HTTPConnection(netloc),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
conn = httplib.HTTPSConnection(netloc),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"conn.putheader(""Content-Length"", file_size)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
self.conn = conn,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"LOG.debug(""Exception during HTTP connection close in """,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"headers = {'User-Agent': USER_AGENT,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
conn = urllib2.urlopen(request),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
# while writing.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self.file_handle.read(READ_CHUNKSIZE),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self.file_handle.headers.get(""Content-Length"", -1)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"vm_props = self._session._call_method(vutil,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
raise exception.InstanceNotFound(instance_id=instance.uuid),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"vm_props = self._session._call_method(vutil,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return hardware.InstanceInfo(state=state),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"lst_properties = [""runtime.powerState""]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"return hardware.InstanceInfo(state=state,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"lst_properties = [""summary.config.numCpu"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"max_mem = int(vm_props.get('summary.config.memorySizeMB', 0)) * 1024",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"num_cpu = int(vm_props.get('summary.config.numCpu', 0))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
CONTROLLER_TO_ADAPTER_TYPE = {,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_hardware_devices(session, vm_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
return vim_util.get_array_items(hardware_devices),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_vmdk_info(session, vm_ref, uuid=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"hardware_devices = get_hardware_devices(session, vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
elif device.__class__.__name__ in CONTROLLER_TO_ADAPTER_TYPE:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
adapter_type_dict[device.key] = CONTROLLER_TO_ADAPTER_TYPE[,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
"def get_vmdk_info(session, vm_ref, uuid=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
hardware_devices = hardware_devices.VirtualDevice,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter_type_dict[device.key] = constants.DEFAULT_ADAPTER_TYPE,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_BUSLOGIC,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_IDE,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_LSILOGICSAS,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_PARAVIRTUAL,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
from nova.virt.vmwareapi import session,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._session = session.VMwareAPISession(scheme=scheme),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,0
self._session = VMwareAPISession(scheme=scheme),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def __init__(self, host_ip=CONF.vmware.host_ip,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _is_vim_object(self, module):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return isinstance(module, vim.Vim)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
if not self._is_vim_object(module):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self.invoke_api(module, method, self.vim, *args, **kwargs)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"return self.invoke_api(module, method, *args, **kwargs)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
"def _wait_for_task(self, task_ref):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
The task is polled until it completes.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
return self.wait_for_task(task_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,1,1
urlparse.urlparse(base_url),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"default=None,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
help='VIM Service WSDL Location ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'e.g http://<server>/vimService.wsdl. ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
managed_object),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"cfg.StrOpt('vmwareapi_wsdl_loc',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"default=None,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
help='VIM Service WSDL Location ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'e.g http://<server>/vimService.wsdl. ',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self.RetrieveServiceContent(""ServiceInstance"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._request_managed_object_builder(managed_object),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"get_object_properties(vim, None, mobj, type, [property_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:PropertyFilterSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'ns0:VirtualDeviceConfigSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'VirtualPortBackingInfo']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'ns0:DistributedVirtualSwitchPortConnection'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'ns0:VirtualEthernetCardNetworkBackingInfo'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualDiskFlatVer2BackingInfo""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'ns0:VirtualDiskFlatVer2BackingInfo'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'ns0:VirtualMachineConfigSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
client_factory.create('ns0:VirtualDeviceConfigSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:VirtualLsiLogicController'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'ns0:VirtualEthernetCardDistributedVirtualPortBackingInfo',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create(backing_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:DistributedVirtualSwitchPortConnection'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:VirtualEthernetCardNetworkBackingInfo'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:VirtualDeviceConnectInfo'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:FileBackedVirtualDiskSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:VirtualDiskFlatVer2BackingInfo'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
client_factory.create('ns0:VirtualMachineConfigSpec'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"default='nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"instance.image_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session, network_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"client_factory, hardware_devices)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"(vmdk_file_path_before_snapshot, adapter_type, datastore_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"info['gateway'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"info['broadcast'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
dns]),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"client_factory, machine_id_str)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""install"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
LOG.info(_('Latest agent build for %(hypervisor)s/%(os)s',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
LOG.info(_('No agent build found for %(hypervisor)s/%(os)s',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"cmp_version(version, agent_build['version']) < 0):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
LOG.debug(_('Removing VDI %(vdi_ref)s',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance['root_gb'] > instance_type['root_gb']):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"cfg.StrOpt('vmware_vif_driver',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"default='nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vmware_images.get_vmdk_size_and_properties(context,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"instance.image_ref, instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"network_utils.get_network_with_the_name(self._session,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
network_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vm_util.get_vmdk_file_path_and_adapter_type(client_factory,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
hardware_devices),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vmdk_file_path_before_snapshot, adapter_type, datastore_name,\",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
vm_util.split_datastore_path(vm_config_pathname),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"(info['mac'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"info['gateway'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"info['broadcast'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
dns),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vm_util.get_machine_id_change_spec(client_factory, machine_id_str)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""install"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"cmp_version(version, agent_build['version']) < 0:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._create_snapshot(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"VMHelper.get_vdi_for_vm_safely(self._session, vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance['root_gb'] > instance_type['root_gb']:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
On Windows we require pyWin32 installed on Python.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import array,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import gettext,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import os,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import platform,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import socket,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import struct,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import subprocess,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import sys,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import time,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"gettext.install('nova', unicode=1)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
os.mkdir(LOG_DIR),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"logging.basicConfig(filename=LOG_FILENAME, format=FORMAT)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
class ProcessExecutionError:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Process Execution Error Class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for byt in bytes:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
pass,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for machine_id_str in machine_id[0].split('#'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
while i < no_grps:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
network_details.append((,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"network_info_list[k].strip().lower(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import win32com.client,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for wbem_network_adapter in wbem_network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
wbem_network_adapter.associators_(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'Win32_NetworkAdapterSetting',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'Win32_NetworkAdapterConfiguration')[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
#wbem_network_adapter_config.DefaultIPGateway[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'subnet-mask': subnet_mask}),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import fcntl,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"0x8912,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"struct.pack('iL', max_bytes, names.buffer_info()[0])))[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"for n_counter in xrange(0, outbytes, offset2)]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"0x8915,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"struct.pack('256s', adapter_name))[20:24])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"0x891b,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"0x8927,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"struct.pack('256s', adapter_name))[18:24])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"for m_counter in range(0, len(raw_mac_address), 2)]).lower()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for network_adapter in network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Get Windows network adapter name.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Get Linux network adapter name.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
obj.stdin.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"stdout=stdout,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"stderr=stderr,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
cmd=cmd),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
time.sleep(0.1),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'vmtoolsd.exe')):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'VMwareService.exe')):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
check_exit_code=False)):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_get_win_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"subnet_mask, gateway, '1']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_execute(cmd),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for dns_server in dns_servers:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for entry in all_entries:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
final_list.append(entry),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Set IPv4 network settings for RHEL distros.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
all_dns_servers.extend(dns_servers),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_get_linux_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
os.remove(interface_file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"_execute(['touch', interface_file_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
interface_file.write('\nUSERCTL=yes'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
interface_file.write('\nONBOOT=yes'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
interface_file.write('\nBOOTPROTO=static'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
interface_file.write('\nNETWORK='),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
interface_file.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
os.remove(dns_file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"_execute(['touch', dns_file_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for dns_server in unique_entries:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
dns_file.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"_execute(['/sbin/service', 'network', 'restart'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Set IPv4 network settings for Ubuntu.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"logging.debug(_(""Restarting networking....\n""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"_execute(['/etc/init.d/networking', 'restart'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
check_exit_code=False)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_set_ubuntu_networking(network_details),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_set_rhel_networking(network_details),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_windows_set_networking(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_linux_set_networking(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
On Windows we require pyWin32 installed on Python.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import array,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import gettext,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import os,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import platform,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import socket,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import struct,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import subprocess,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import sys,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import time,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"gettext.install('nova', unicode=1)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
os.mkdir(LOG_DIR),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"logging.basicConfig(filename=LOG_FILENAME, format=FORMAT)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class ProcessExecutionError:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Process Execution Error Class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for byt in bytes:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
pass,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for machine_id_str in machine_id[0].split('#'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
while i < no_grps:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
network_details.append((,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"network_info_list[k].strip().lower(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import win32com.client,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for wbem_network_adapter in wbem_network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
wbem_network_adapter.associators_(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'Win32_NetworkAdapterSetting',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'Win32_NetworkAdapterConfiguration')[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
#wbem_network_adapter_config.DefaultIPGateway[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'subnet-mask': subnet_mask}),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import fcntl,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x8912,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"struct.pack('iL', max_bytes, names.buffer_info()[0])))[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"for n_counter in xrange(0, outbytes, offset2)]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x8915,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"struct.pack('256s', adapter_name))[20:24])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x891b,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x8927,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"struct.pack('256s', adapter_name))[18:24])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"for m_counter in range(0, len(raw_mac_address), 2)]).lower()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for network_adapter in network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Get Windows network adapter name.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Get Linux network adapter name.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
obj.stdin.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"stdout=stdout,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"stderr=stderr,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
cmd=cmd),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
time.sleep(0.1),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'vmtoolsd.exe')):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'VMwareService.exe')):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
check_exit_code=False)):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_get_win_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"subnet_mask, gateway, '1']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_execute(cmd),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for dns_server in dns_servers:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for entry in all_entries:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
final_list.append(entry),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Set IPv4 network settings for RHEL distros.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
all_dns_servers.extend(dns_servers),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_get_linux_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
os.remove(interface_file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['touch', interface_file_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nUSERCTL=yes'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nONBOOT=yes'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nBOOTPROTO=static'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nNETWORK='),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
os.remove(dns_file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['touch', dns_file_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for dns_server in unique_entries:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
dns_file.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['/sbin/service', 'network', 'restart'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Set IPv4 network settings for Ubuntu.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"logging.debug(_(""Restarting networking....\n""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['/etc/init.d/networking', 'restart'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
check_exit_code=False)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_set_ubuntu_networking(network_details),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_set_rhel_networking(network_details),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_windows_set_networking(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_linux_set_networking(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for adapter in wbem_network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
#config.DefaultIPGateway[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"for n_cnt in xrange(0, outbytes, offset2)]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for wbem_network_adapter in wbem_network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
wbem_network_adapter.associators_(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
#wbem_network_adapter_config.DefaultIPGateway[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"for n_counter in xrange(0, outbytes, offset2)]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_get_win_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_get_linux_adapter_name_and_ip_address(mac_address),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from nova import context,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from nova import db,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from nova import block_device,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.compute import api as compute,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova import context as nova_context,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.openstack.common import excutils,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.openstack.common import timeutils,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.virt import driver,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"CONF.import_opt('vnc_enabled', 'nova.vnc')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'suspended': power_state.SUSPENDED},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device_info=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
2. For flat disk,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
3. For sparse disk,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"instance['image_ref'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""preallocated"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"(vmdk_file_size_in_kb, os_type, adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""CreateVM_Task"", vm_folder_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"config=config_spec, pool=res_pool_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vmdk_file_size_in_kb, adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
disk_type),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"datacenter=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""disk_type"": disk_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"{""vmdk_path"": vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
datacenter=dc_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"{'image_ref': instance['image_ref'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"data_center_name=self._get_datacenter_ref_and_name()[1],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
file_path=upload_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'upload_vmdk_name': upload_vmdk_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"{""vmdk_file_size_in_kb"": vmdk_file_size_in_kb,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""adapter_type"": adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""data_store_name"": data_store_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""disk_type"": disk_type},",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""CopyVirtualDisk_Task"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"service_content.virtualDiskManager,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"sourceName=sparse_uploaded_vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"sourceDatacenter=self._get_datacenter_ref_and_name()[0],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"destName=uploaded_vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
destSpec=vmdk_copy_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], vmdk_copy_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""data_store_name"": data_store_name},",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance=instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device_info),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
uploaded_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"data_store_ref, data_store_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"upload_folder, upload_name)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"data_store_name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
flat_uploaded_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
sparse_uploaded_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_create_virtual_disk(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_delete_disk_file(flat_uploaded_vmdk_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._session._get_vim().client.options.transport.cookiejar,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_fetch_image_on_esx_datastore(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_copy_virtual_disk(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
_delete_disk_file(sparse_uploaded_vmdk_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._volumeops.attach_disk_to_vm(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"adapter_type, disk_type, uploaded_vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vmdk_file_size_in_kb, linked_clone)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device_info)[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._volumeops.attach_volume(connection_info, instance['name'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._default_root_device),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
vmdk_file_path_before_snapshot)[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.debug(_(""instance not present""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self.power_off(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Destroy_Task"", vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], destroy_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.warn(_(""In vmwareapi:vmops:delete, got this exception""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self.unplug_vifs(instance, network_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"except Exception, exc:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.exception(exc, instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""UnregisterVM"", vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=dir_ds_compliant_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
datacenter=self._get_datacenter_ref_and_name()[0]),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""without doing anything""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""get_dynamic_property"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualMachine"", ""config.hardware.device"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"adapter_type, disk_type, vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"controller_key=controller_key,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
unit_number=unit_number),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self.destroy(instance, None)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self.power_on(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualMachine"", ""runtime.powerState"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""PowerOffVM_Task"", vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], poweroff_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""PowerOnVM_Task"", vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], poweron_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._virtapi.instance_update(context, instance_uuid,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
{'progress': progress}),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance_type):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"step=0,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
total_steps=RESIZE_TOTAL_STEPS),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"step=1,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Rename_Task"", vm_ref, newName=name_label)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], rename_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"step=2,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""CloneVM_Task"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"folder=vm_folder_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=instance['name'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
spec=clone_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], vm_clone_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"step=3,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Rename_Task"", vm_ref, newName=instance['name'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"network_info, image_meta, resize_instance=False):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"step=4,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"post_method, recover_method, block_migration=False):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Spawning live_migration operation for distributing high-load.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""MigrateVM_Task"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"host=host_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"priority=""defaultPriority"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance_ref['uuid'], vm_migrate_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
except Exception:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
with excutils.save_and_reraise_exception():,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"recover_method(context, instance_ref, dest, block_migration)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"post_method(context, instance_ref, dest, block_migration)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Poll for rebooting instances.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
timeout=timeout),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'port': self._get_vnc_port(vm_ref),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'internal_access_path': None},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
@staticmethod,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""Return VNC port for an VM.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"client_factory, port, password)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""ReconfigVM_Task"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
spec=vnc_config_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'], reconfig_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""HostSystem"", [""name""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Datacenter"", [""vmFolder""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""ResourcePool"")[0].obj",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""SearchDatastore_Task"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"ds_browser,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"datastorePath=ds_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
searchSpec=search_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
while True:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""get_dynamic_property"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"search_task, ""Task"", ""info"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
time.sleep(2),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
continue,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"folder_name, file_name):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"ds_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Datastore"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""browser"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"folder_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._mkdir(vm_util.build_datastore_path(ds_name, folder_name))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for vol in,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
driver.block_device_info_get_mapping(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device_info)],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device_list.append(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device.strip_dev(swap['device_name'])),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for ephemeral in,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
driver.block_device_info_get_ephemerals(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.debug(_(""block_device_list %s""), block_device_list)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'suspended': power_state.PAUSED},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""Datastore"", [""summary.type"", ""summary.name""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for elem in data_stores:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for prop in elem.propSet:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"LOG.error(msg, instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"instance.image_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""Datacenter"", [""vmFolder""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""ResourcePool"")[0].obj",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""CreateVM_Task"", vm_folder_mor,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"config=config_spec, pool=res_pool_mor)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
flat_uploaded_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
uploaded_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vmdk_file_size_in_kb, adapter_type)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"datacenter=self._get_datacenter_name_and_ref()[0],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_create_virtual_disk(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"{""flat_uploaded_vmdk_path"": flat_uploaded_vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
name=flat_uploaded_vmdk_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_delete_disk_file(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"{'image_ref': instance.image_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"data_center_name=self._get_datacenter_name_and_ref()[1],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
file_path=flat_uploaded_vmdk_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_fetch_image_on_esx_datastore(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"client_factory,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"adapter_type, ""preallocated"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"uploaded_vmdk_path, vmdk_file_size_in_kb)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance=instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""ReconfigVM_Task"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
spec=vmdk_attach_config_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._session._wait_for_task(instance['uuid'], reconfig_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_attach_vmdk_to_the_vm(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
vmdk_file_path_before_snapshot)[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
adapter_type),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""UnregisterVM"", vm_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self.unplug_vifs(instance, network_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
name=dir_ds_compliant_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""without doing anything""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""VirtualMachine"", [""name""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for vm in vms:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._volumeops.attach_volume(connection_info, instance['uuid'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance['uuid']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Rename_Task"", vm_ref, newName=instance['uuid'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._volumeops.attach_volume(connection_info, instance['name'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance['name']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"LOG.debug(_(""instance not present""), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""Rename_Task"", vm_ref, newName=instance['name'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"username=CONF.vmware.host_username,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"password=CONF.vmware.host_password,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"retry_count=CONF.vmware.api_retry_count,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""sleeping for %(seconds)s seconds""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"{'server': self._host_ip, 'seconds': delay})",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
time.sleep(delay),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self.vim.Logout(self.vim.get_service_content().sessionManager),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"api_retry_count, scheme=scheme)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"api_retry_count, scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self.vim.Logout(self.vim.get_service_content().sessionManager),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from nova import utils,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for prop in dynamic_properties:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.openstack.common import uuidutils,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"datacenter=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance=instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""DeleteDatastoreFile_Task"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vim.get_service_content().fileManager,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=datastore_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
datacenter=dc_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._wait_for_task(instance['uuid'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
file_delete_task),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._delete_datastore_file(instance,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"flat_uploaded_vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
dc_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"sparse_uploaded_vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"destName=dest_vmdk_file_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"for f in dest_vmdk_data_file_path, dest_vmdk_file_path:",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._delete_datastore_file(instance, f, dc_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import uuid,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
datacenter):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"datacenter=datacenter,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"{""vmdk_path"": vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""data_store_name"": data_store_name},",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance=instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""DeleteDatastoreFile_Task"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"service_content.fileManager,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"name=vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
datacenter=dc_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._session._wait_for_task(instance['uuid'], vmdk_delete_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_delete_disk_file(flat_uploaded_vmdk_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_delete_disk_file(sparse_uploaded_vmdk_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"destName=dest_vmdk_file_location,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""DeleteVirtualDisk_Task"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"service_content.virtualDiskManager,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"name=dest_vmdk_file_location,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._session._wait_for_task(instance['uuid'], remove_disk_task)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import collections,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"['ref', 'name', 'vmFolder'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""CreateVM_Task"", dc_info.vmFolder,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"datacenter=dc_info.ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"data_center_name=dc_info.name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"sourceDatacenter=dc_info.ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
dc_info.ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"root_vmdk_path, dc_info.ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"dc_info.name,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"data_store_name, dc_name, upload_folder, cookies):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""vmware-tmp""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
ds_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"destDatacenter=dc_info.ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._delete_datastore_file(instance, f, dc_info.ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""datastore""]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'config.files.vmPathName': None,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'datastore': None},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
datacenter=dc_info.ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"folder=dc_info.vmFolder,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Datacenter"", [""name""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vm_util._cancel_retrieve_if_necessary(self._session, dc_obj)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=dc_obj.objects[0].propSet[0].val,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
vmFolder=self._get_vmfolder_ref()),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=ds_path, datacenter=dc_info.ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._mkdir(vm_util.build_datastore_path(ds_name, folder_name),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
while dcs:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for dco in dcs.objects:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for p in dco.propSet:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for ds in datastore_refs:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
ds_refs.append(ds.value),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for ds_ref in ds_refs:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"name=name, vmFolder=vmFolder)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""continue_to_get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
token),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""Datacenter"", [""name"", ""datastore"", ""vmFolder""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._update_datacenter_cache_from_objects(dcs),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""CreateVM_Task"", vm_folder_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"datacenter=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"data_center_name=self._get_datacenter_ref_and_name()[1],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"sourceDatacenter=self._get_datacenter_ref_and_name()[0],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
dc_ref),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"root_vmdk_path, dc_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"sourceDatacenter=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"data_store_name, upload_folder, cookies):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""vmware-tmp""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_check_if_tmp_folder_exists(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"destDatacenter=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._delete_datastore_file(instance, f, dc_ref)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'config.files.vmPathName': None},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
datacenter=self._get_datacenter_ref_and_name()[0]),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"folder=vm_folder_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""Datacenter"", [""name""])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vm_util._cancel_retrieve_if_necessary(self._session, dc_obj)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"name=ds_path, datacenter=dc_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._mkdir(vm_util.build_datastore_path(ds_name, folder_name))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self.vim.Logout(self.vim.get_service_content().sessionManager),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self.vim.Logout(self.vim.get_service_content().sessionManager),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
LOG.debug(excep),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vim_util, ""get_dynamic_property"", vm_ref, ""VirtualMachine"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""datastore"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vim_util, ""get_dynamic_property"", ds_ref, ""Datastore"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""browser"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vim_util, ""get_dynamic_property"", ds_ref, ""Datastore"", ""browser"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""VirtualMachine"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""datastore"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"ds_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""Datastore"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""browser"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
sessionId=[self._session.key]),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self.vim.get_service_content().sessionManager,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"sessionID=self._session.key,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
userName=self._session.userName),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._session.key),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._create_session(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.critical(_(""In vmwareapi: _call_method (session=%s)""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session.key, exc_info=True)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
sessionId=[self._session_id]),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
loop.stop(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
except Exception:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
finally:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._stop_loop(loop),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
loop.stop(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"controller_key,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for unit_number in range(max_unit_number):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'VirtualLsiLogicSASController',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'VirtualBusLogicController'],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
numbers for that controller_key.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for device in devices:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
unit_numbers.append(device.unitNumber),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
unit_numbers.append(device.scsiCtlrUnitNumber),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
adapter_type):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
adapter_type),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"adapter_type=""lsiLogic"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"controller_key,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
adapter_type),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
device_config_spec.append(controller_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"disk_type, unit_number)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
uploaded_iso_path),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"datastore, file_path):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""get_dynamic_property"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualMachine"", ""config.hardware.device"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"(controller_key, unit_number,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"client_factory,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"devices,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'ide'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"controller_key, unit_number)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
cdrom_attach_config_spec.deviceChange.append(controller_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
spec=cdrom_attach_config_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"(vmdk_file_path_before_snapshot, adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"hw_devices, uuid=instance['uuid'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"(vmdk_path, adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"adapter_type, disk_type, vmdk_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"uploaded_iso_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"datastore, file_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
cdrom_unit_number):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
cdrom_unit_number),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
spec=vmdk_attach_config_spec),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"(vmdk_file_path_before_snapshot, controller_key, adapter_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"hardware_devices, uuid=instance['uuid'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"(vmdk_path, controller_key, adapter_type, disk_type,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"adapter_type, disk_type, vmdk_path,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"controller_key=controller_key,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
unit_number=unit_number),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"LOG.debug(_(""Creating directory with path %s""), ds_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._session._call_method(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._get_vim(), ""MakeDirectory"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.debug(_(""Created directory with path %s""), ds_path)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
except error_util.FileAlreadyExistsException:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""directory %(ds_path)s on %(ds)s.""),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"{'ds_path': ds_path, 'ds': dc_info.name})",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""CreateSnapshot_Task"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"memory=False,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
quiesce=True),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._session._wait_for_task(snapshot_task),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""get_dynamic_property"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"snapshot_task, ""Task"", ""info"")",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""RemoveSnapshot_Task"", snapshot,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"removeChildren=False, consolidate=True)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._session._wait_for_task(delete_snapshot_task),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.debug(_('Copying snapshotted disk %s.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vmdk_file_path_before_snapshot,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"LOG.debug(_('Copied snapshotted disk %s.'),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"self._delete_vm_snapshot(instance, vm_ref, snapshot)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance=instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._session._get_vim(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""CreateSnapshot_Task"", vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"memory=False,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
quiesce=True),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._session._wait_for_task(snapshot_task),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_create_vm_snapshot(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
while retrieve_result:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for vm in retrieve_result.objects:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
for prop in vm.propSet:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
lst_vm_names.append(vm_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""continue_to_get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
token),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._cluster),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vim_util, ""get_dynamic_property"", self._cluster,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'ClusterComputeResource', 'resourcePool')",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vim_util, 'get_inner_objects', root_res_pool, 'vm',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'VirtualMachine', properties)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
while vms:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for vm in vms.objects:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for prop in vm.propSet:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
lst_vm_names.append(vm_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""continue_to_get_objects"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
token),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"host=""localhost"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
port=443):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
port    : port for connection,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
:param port: port for connection,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"host=""localhost""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"from nova.i18n import _, _LC, _LW",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._do_deprecation_warning(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
class VMwareVCDriver(driver.ComputeDriver):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"super(VMwareVCDriver, self).__init__(virtapi)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._cluster_names),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self._update_resources(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'state.'), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
instance['uuid']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
block_device_info),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'memory_mb': host_stats['host_memory_total'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'local_gb': host_stats['disk_total'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'vcpus_used': 0,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'memory_mb_used': host_stats['host_memory_total'] -,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"host_stats['host_memory_free'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'local_gb_used': host_stats['disk_used'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'hypervisor_type': host_stats['hypervisor_type'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'hypervisor_version': host_stats['hypervisor_version'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'hypervisor_hostname': host_stats['hypervisor_hostname'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'cpu_info': jsonutils.dumps(host_stats['cpu_info']),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'supported_instances': jsonutils.dumps(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"host_stats['supported_instances']),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import suds,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"from nova.i18n import _, _LC",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"super(VMwareESXDriver, self).__init__(virtapi)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._do_deprecation_warning(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""vmwareapi.VMwareVCDriver""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._volumeops,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
datastore_regex=self._datastore_regex),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
@property,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._host_ip),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._session._create_session(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
vim.client.service.Logout(session_manager),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
except suds.WebFault:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"admin_password, network_info=None, block_device_info=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"admin_password, network_info, block_device_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"block_device_info=None, bad_volumes_callback=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.reboot(instance, network_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"destroy_disks=True, migrate_data=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.destroy(instance, destroy_disks)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.pause(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.unpause(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.suspend(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.resume(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
rescue_password):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.unrescue(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.power_off(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
block_device_info=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._vmops.power_on(instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'state.'), instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance['uuid']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
block_device_info),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Poll for rebooting instances.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.poll_rebooting_instances(timeout, instances)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Return volume connector information.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"disk_bus=None, device_type=None, encryption=None):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
mountpoint),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
encryption=None):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'username': CONF.vmware.host_username,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'password': CONF.vmware.host_password},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'memory_mb': host_stats['host_memory_total'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'local_gb': host_stats['disk_total'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'vcpus_used': 0,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'memory_mb_used': host_stats['host_memory_total'] -,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"host_stats['host_memory_free'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'local_gb_used': host_stats['disk_used'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'hypervisor_type': host_stats['hypervisor_type'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'hypervisor_version': host_stats['hypervisor_version'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'hypervisor_hostname': host_stats['hypervisor_hostname'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'cpu_info': jsonutils.dumps(host_stats['cpu_info']),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'supported_instances': jsonutils.dumps(,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"host_stats['supported_instances']),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Retrieve resource information.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
:returns: dictionary describing resources,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
guest VMs evacuation.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""inject network info for specified instance.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.inject_network_info(instance, nw_info)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.manage_image_cache(context, all_instances)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.attach_interface(instance, image_meta, vif)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"self._vmops.detach_interface(instance, vif)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class VMwareVCDriver(VMwareESXDriver):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
pass,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"super(VMwareVCDriver, self).__init__(virtapi, scheme)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._cluster_names),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"LOG.warn(_(""The following clusters could not be found in the""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self._update_resources(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
Utility functions for Image transfer and manipulation.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from oslo.config import cfg,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.openstack.common import strutils,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.openstack.common import units,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from nova.virt.vmwareapi import constants,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
class VMwareImage(object):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"file_size=0,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"os_type=constants.DEFAULT_OS_TYPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"adapter_type=constants.DEFAULT_ADAPTER_TYPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"disk_type=constants.DEFAULT_DISK_TYPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"file_type=constants.DEFAULT_DISK_FORMAT,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"linked_clone=None,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
vif_model=constants.DEFAULT_VIF_MODEL):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""""""VMwareImage holds values for use in building VMs.",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
self.file_type not in constants.DISK_FORMATS_ALL):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
@property,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
@classmethod,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
:rtype: nova.virt.vmwareapi.vmware_images.VmwareImage,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
CONF.vmware.use_linked_clone),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'image_id': image_id,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'linked_clone': linked_clone,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'vmware_ostype': 'os_type',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'vmware_adaptertype': 'adapter_type',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"'vmware_disktype': 'disk_type',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
'hw_vif_model': 'vif_model',7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"for k, v in props_map.iteritems():",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
Utility functions for Image transfer.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
instance=instance),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"{'size': size, 'image': image}, instance=instance)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
On Windows we require pyWin32 installed on Python.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import array,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import os,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import platform,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import socket,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import struct,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import subprocess,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import sys,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import time,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from nova.i18n import _,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
os.mkdir(LOG_DIR),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"logging.basicConfig(filename=LOG_FILENAME, format=FORMAT)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class ProcessExecutionError:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Process Execution Error Class.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for byt in bytes:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
pass,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for machine_id_str in machine_id[0].split('#'):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
while i < no_grps:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
network_details.append((,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"network_info_list[k].strip().lower(),",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import win32com.client,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for adapter in wbem_network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"'Win32_NetworkAdapterSetting',",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'Win32_NetworkAdapterConfiguration')[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
#config.DefaultIPGateway[0],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'subnet-mask': subnet_mask}),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import fcntl,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x8912,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"struct.pack('iL', max_bytes, names.buffer_info()[0])))[0]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"for n_cnt in xrange(0, outbytes, offset2)]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x8915,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"struct.pack('256s', adapter_name))[20:24])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x891b,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"0x8927,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"struct.pack('256s', adapter_name))[18:24])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"for m_counter in range(0, len(raw_mac_address), 2)]).lower()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for network_adapter in network_adapters:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Get Windows network adapter name.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Get Linux network adapter name.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
obj.stdin.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"stdout=stdout,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"stderr=stderr,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
cmd=cmd),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
time.sleep(0.1),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'vmtoolsd.exe')):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'VMwareService.exe')):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
check_exit_code=False)):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"subnet_mask, gateway, '1']",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_execute(cmd),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for dns_server in dns_servers:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for entry in all_entries:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
final_list.append(entry),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Set IPv4 network settings for RHEL distros.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
all_dns_servers.extend(dns_servers),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
adapter_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
os.remove(interface_file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['touch', interface_file_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nUSERCTL=yes'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nONBOOT=yes'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nBOOTPROTO=static'),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.write('\nNETWORK='),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
interface_file.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
os.remove(dns_file_name),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['touch', dns_file_name])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for dns_server in unique_entries:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
dns_file.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['/sbin/service', 'network', 'restart'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Set IPv4 network settings for Ubuntu.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""NIC info %(detail)s""), {'device': device,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'detail': network_detail}),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"logging.debug(_(""Restarting networking....\n""))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"_execute(['/etc/init.d/networking', 'restart'])",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
check_exit_code=False)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_set_ubuntu_networking(network_details),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_set_rhel_networking(network_details),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_windows_set_networking(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
_linux_set_networking(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
urllib.pathname2url(file_path)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
urllib.pathname2url(file_path)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
urllib.pathname2url(file_path)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from oslo.vmware import rw_handles,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
class VMwareHTTPReadFile(rw_handles.FileHandle):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"file_path, scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
cookies=cookies),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"rw_handles.FileHandle.__init__(self, self._conn)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
urllib.pathname2url(file_path)),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
import httplib,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import urllib2,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
import six.moves.urllib.parse as urlparse,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from nova.openstack.common import log as logging,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class GlanceFileRead(object):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
uses its own CHUNKSIZE.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
except StopIteration:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
pass,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class VMwareHTTPFile(object):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""""""Base class for HTTP file.""""""",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self.file_handle.close(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
LOG.exception(exc),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
for vim_cookie in vim_cookies:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
break,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class VMwareHTTPWriteFile(VMwareHTTPFile):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"file_path, file_size, scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"conn.putheader(""User-Agent"", USER_AGENT)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"conn.putheader(""Cookie"", self._build_vim_cookie_headers(cookies))",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
conn.endheaders(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"VMwareHTTPFile.__init__(self, conn)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self.file_handle.send(data),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
self.conn.getresponse(),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
except Exception:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""VMwareHTTPWrite"", exc_info=True)",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"super(VMwareHTTPWriteFile, self).close()",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class VMwareHTTPReadFile(VMwareHTTPFile):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"file_path, scheme=""https""):",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
'Cookie': self._build_vim_cookie_headers(cookies)},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
try:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""get_object_properties_dict"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
lst_properties),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
except vexc.ManagedObjectNotFoundException:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""get_object_properties_dict"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"vm_ref,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
lst_properties),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
state=constants.POWER_STATES[vm_props['runtime.powerState']]),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"max_mem_kb=info['MemoryUsage'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"mem_kb=info['MemoryUsage'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"num_cpu=info['NumberOfProcessors'],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
cpu_time_ns=info['UpTime']),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""summary.config.memorySizeMB"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""runtime.powerState""]",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"state=constants.POWER_STATES[vm_props['runtime.powerState']],",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"max_mem_kb=max_mem,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"mem_kb=max_mem,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
num_cpu=num_cpu),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"""VirtualLsiLogicController"": constants.DEFAULT_ADAPTER_TYPE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualBusLogicController"": constants.ADAPTER_TYPE_BUSLOGIC,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualIDEController"": constants.ADAPTER_TYPE_IDE,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""VirtualLsiLogicSASController"": constants.ADAPTER_TYPE_LSILOGICSAS,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
"""ParaVirtualSCSIController"": constants.ADAPTER_TYPE_PARAVIRTUAL",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
},7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
device.__class__.__name__],7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,0
from oslo_vmware import api,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
from oslo_vmware import vim,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
class VMwareAPISession(api.VMwareAPISession):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"host_port=CONF.vmware.host_port,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"username=CONF.vmware.host_username,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"password=CONF.vmware.host_password,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"retry_count=CONF.vmware.api_retry_count,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"scheme=""https"",",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"cacert=CONF.vmware.ca_file,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"insecure=CONF.vmware.insecure,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
pool_size=CONF.vmware.connection_pool_size):,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"super(VMwareAPISession, self).__init__(",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"host=host_ip,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"port=host_port,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"server_username=username,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"server_password=password,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"api_retry_count=retry_count,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"task_poll_interval=CONF.vmware.task_poll_interval,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"scheme=scheme,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"create_session=True,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"cacert=cacert,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
"insecure=insecure,",7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
pool_size=pool_size),7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
args provided.,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
else:,7a60b5c406336c5f410d1a98868c3f93d888ea0c,0,1
now = utils.utcnow(),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,3,1
now = timeutils.utcnow(),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,2,0
timeout = FLAGS.instance_build_timeout,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
if timeout == 0:,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
"if timeutils.is_older_than(instance['created_at'], timeout):",fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
interval = FLAGS.reclaim_instance_interval,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
if interval <= 0:,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
old_enough = (not instance.deleted_at or,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
timeout = FLAGS.running_deleted_instance_timeout,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,0
if FLAGS.instance_build_timeout == 0:,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,1
"if utils.is_older_than(instance['created_at'],",fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,1
if FLAGS.reclaim_instance_interval <= 0:,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,1
old_enough = (not instance.deleted_at or utils.is_older_than(,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,1,1
from nova.openstack.common import timeutils,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
launched_at=timeutils.utcnow()),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
terminated_at=timeutils.utcnow()),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
"launched_at=timeutils.utcnow(),",fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
"timeutils.is_older_than(instance.deleted_at,",fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
interval)),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
timeout)),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,0
FLAGS.instance_build_timeout):,fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
launched_at=utils.utcnow()),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
terminated_at=utils.utcnow()),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
"launched_at=utils.utcnow(),",fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
"instance.deleted_at,",fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
FLAGS.reclaim_instance_interval)),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
FLAGS.running_deleted_instance_timeout)),fe576e28a6ed8e15d4cdb96313d9f58426715bb0,0,1
"def auth_token_create(context, token):",2218cb025adca1ded3e6596acc182b88742e3a51,3,0
"def auth_token_create(_context, token):",2218cb025adca1ded3e6596acc182b88742e3a51,3,1
"def model_query(context, *args, **kwargs):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
session = kwargs.get('session') or get_session(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
read_deleted = kwargs.get('read_deleted') or context.read_deleted,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
project_only = kwargs.get('project_only'),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
query = session.query(*args),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
query = query.filter_by(deleted=False),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
query = query.filter_by(deleted=True),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
query = query.filter_by(project_id=context.project_id),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Service, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"query = model_query(context, models.Service)",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Service, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"subq = model_query(context, models.Instance.host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"subq = model_query(context, models.Network.host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"subq = model_query(context, models.Volume.host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Service).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.ComputeNode, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Certificate, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def certificate_get_all_by_user_and_project(context, user_id, project_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.FloatingIp, project_only=True).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"floating_ip_ref = model_query(context, models.FloatingIp,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
def _floating_ip_get_all(context):,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
floating_ip_refs = _floating_ip_get_all(context).all(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
floating_ip_refs = _floating_ip_get_all(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.FloatingIp, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"fixed_ip_ref = model_query(context, models.FixedIp, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def fixed_ip_create(context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def fixed_ip_bulk_create(context, ips):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def fixed_ip_disassociate_all_by_timeout(context, host, time):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"inner_q = model_query(context, models.Network.id, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.FixedIp, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.FixedIp, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.FixedIp, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.FixedIp, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _virtual_interface_query(context, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"vif_ref = _virtual_interface_query(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
vif_ref = _virtual_interface_query(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
vif_refs = _virtual_interface_query(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
vif_refs = _virtual_interface_query(context).all(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _build_instance_get(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _instance_get_all_query(context, project_only=False):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def instance_get_all_by_user(context, user_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.KeyPair, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _network_ips_query(context, network_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"network_ref = network_get(context, network_id=network_id,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Network, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Network, read_deleted=""no"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Network, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _network_get_query(context, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _network_get_query(context).filter_by(bridge=bridge).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _network_get_query(context).filter_by(uuid=uuid).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _network_get_query(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def network_get_by_instance(context, instance_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def network_get_all_by_instance(context, instance_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"host_filter = or_(models.Network.host == host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"network_ref = _network_get_query(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def queue_get_for(context, topic, physical_node_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.AuthToken, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Quota, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"rows = model_query(context, models.Quota, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = {'project_id': project_id},2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"quotas = model_query(context, models.Quota, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"iscsi_target_ref = model_query(context, models.IscsiTarget,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _volume_get_query(context, session=None, project_only=False):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _volume_get_query(context, session=session, project_only=True).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Volume, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _volume_get_query(context).filter_by(id=volume_id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.IscsiTarget, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _volume_metadata_get_query(context, volume_id, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"rows = _volume_metadata_get_query(context, volume_id).all()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = {},2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result[row['key']] = row['value'],2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _volume_metadata_get_query(context, volume_id, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Snapshot, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _block_device_mapping_get_query(context, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _block_device_mapping_get_query(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _security_group_get_query(context, session=None, read_deleted=None,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _security_group_get_query(context, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _security_group_get_query(context, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _security_group_rule_get_query(context, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _security_group_rule_get_query(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.User, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def user_create(context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def project_create(context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Project, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"user = model_query(context, models.User).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Migration, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Migration, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.ConsolePool, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.Console, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"query = model_query(context, models.Console, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = query.first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def instance_type_create(context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _instance_type_get_query(context, session=None, read_deleted=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"read_deleted = ""yes"" if inactive else ""no""",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"query = _instance_type_get_query(context, read_deleted=read_deleted)",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
query = query.filter(,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"inst_types = query.order_by(""name"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _instance_type_get_query(context, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"instance_type_ref = model_query(context, models.InstanceTypes,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _zone_get_by_id_query(context, zone_id, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"zone = zone_get(context, zone_id)",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _zone_get_by_id_query(context, zone_id).first()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _instance_metadata_get_query(context, instance_id, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"rows = _instance_metadata_get_query(context, instance_id).all()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _instance_metadata_get_query(,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"agent_build_ref = model_query(context, models.AgentBuild,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
session = get_session(),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"bwusage = model_query(context, models.BandwidthUsage,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _instance_type_extra_specs_get_query(context, instance_type_id,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
rows = _instance_type_extra_specs_get_query(,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _instance_type_extra_specs_get_query(,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def volume_type_create(context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def volume_type_get_all(context, inactive=False, filters=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
filters = filters or {},2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"rows = model_query(context, models.VolumeTypes,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result[row['name']] = _dict_with_extra_specs(row),2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.VolumeTypes, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"volume_type_ref = model_query(context, models.VolumeTypes,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _volume_type_extra_specs_query(context, volume_type_id, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"rows = _volume_type_extra_specs_query(context, volume_type_id).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
result = _volume_type_extra_specs_query(,2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _vsa_get_query(context, session=None, project_only=False):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _vsa_get_query(context, session=session, project_only=True).\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.S3Image, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"backend_conf = model_query(context, models.SMBackendConf,",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = model_query(context, models.SMBackendConf, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _sm_flavor_get_query(context, sm_flavor_label, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"sm_flavor = sm_flavor_get(context, sm_flavor_label)",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def sm_flavor_get(context, sm_flavor_label):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _sm_flavor_get_query(context, sm_flavor_label).first()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"def _sm_volume_get_query(context, volume_id, session=None):",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"sm_volume = sm_volume_get(context, volume_id)",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
"result = _sm_volume_get_query(context, volume_id).first()",2218cb025adca1ded3e6596acc182b88742e3a51,1,0
def can_read_deleted(context):,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
session = get_session(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Service).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
query = session.query(models.Service).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
topic = 'compute',2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"subq = session.query(models.Instance.host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"subq = session.query(models.Network.host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"subq = session.query(models.Volume.host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.ComputeNode).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Certificate).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def certificate_get_all_by_user_and_project(_context, user_id, project_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = None,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.FloatingIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
floating_ip_ref = session.query(models.FloatingIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
floating_ip_refs = session.query(models.FloatingIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
fixed_ip_ref = session.query(models.FixedIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def fixed_ip_create(_context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def fixed_ip_bulk_create(_context, ips):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def fixed_ip_disassociate_all_by_timeout(_context, host, time):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
inner_q = session.query(models.Network.id).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.FixedIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
rv = session.query(models.FixedIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
vif_ref = session.query(models.VirtualInterface).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
vif_refs = session.query(models.VirtualInterface).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"result = session.query(func.count(models.Instance.id),",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"partial = _build_instance_get(context, session=session)",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = partial.filter_by(uuid=uuid),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = result.first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = partial.filter_by(id=instance_id),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
partial = session.query(models.Instance).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
partial = partial.filter_by(deleted=can_read_deleted(context)),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
partial = partial.filter_by(project_id=context.project_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def instance_get_all_by_user(context, user_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
read_deleted = can_read_deleted(context),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
query = session.query(models.Instance).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.KeyPair).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"network_ref = network_get(context, network_id=network_id, \",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Network).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def network_get_by_instance(_context, instance_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
rv = session.query(models.Network).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def network_get_all_by_instance(_context, instance_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"host_filter = or_(models.Network.host == host,",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
network_ref = session.query(models.Network).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def queue_get_for(_context, topic, physical_node_id):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
tk = session.query(models.AuthToken).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Quota).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = {'project_id': project_id},2218cb025adca1ded3e6596acc182b88742e3a51,1,1
rows = session.query(models.Quota).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
quotas = session.query(models.Quota).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
iscsi_target_ref = session.query(models.IscsiTarget).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"result = session.query(func.count(models.Volume.id),",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Volume).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.IscsiTarget).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
meta_results = session.query(models.VolumeMetadata).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
meta_dict = {},2218cb025adca1ded3e6596acc182b88742e3a51,1,1
meta_dict[i['key']] = i['value'],2218cb025adca1ded3e6596acc182b88742e3a51,1,1
meta_result = session.query(models.VolumeMetadata).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Snapshot).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.BlockDeviceMapping).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.SecurityGroup).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.SecurityGroupIngressRule).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.User).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def user_create(_context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def project_create(_context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Project).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
user = session.query(models.User).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Migration).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
results = session.query(models.Migration).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.ConsolePool).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Console).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
results = session.query(models.Console).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
query = session.query(models.Console).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = query.options(joinedload('pool')).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def instance_type_create(_context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
partial = session.query(models.InstanceTypes)\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
partial = partial.filter_by(deleted=False),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
partial = partial.filter(,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"inst_types = partial.order_by(""name"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
inst_type = session.query(models.InstanceTypes).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
instance_type_ref = session.query(models.InstanceTypes).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
zone = session.query(models.Zone).filter_by(id=zone_id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.Zone).filter_by(id=zone_id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
meta_results = session.query(models.InstanceMetadata).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
meta_result = session.query(models.InstanceMetadata).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
agent_build_ref = session.query(models.AgentBuild).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
session = session if session else get_session(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
bwusage = session.query(models.BandwidthUsage).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
spec_results = session.query(models.InstanceTypeExtraSpecs).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
spec_dict = {},2218cb025adca1ded3e6596acc182b88742e3a51,1,1
spec_dict[i['key']] = i['value'],2218cb025adca1ded3e6596acc182b88742e3a51,1,1
spec_result = session.query(models.InstanceTypeExtraSpecs).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def volume_type_create(_context, values):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def volume_type_get_all(context, inactive=False, filters={}):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
vol_types = session.query(models.VolumeTypes).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
vol_dict = {},2218cb025adca1ded3e6596acc182b88742e3a51,1,1
vol_dict[i['name']] = _dict_with_extra_specs(i),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
vol_type = session.query(models.VolumeTypes).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
volume_type_ref = session.query(models.VolumeTypes).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
spec_results = session.query(models.VolumeTypeExtraSpecs).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
spec_result = session.query(models.VolumeTypeExtraSpecs).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.VirtualStorageArray).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
res = session.query(models.S3Image)\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
backend_conf = session.query(models.SMBackendConf).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.SMBackendConf).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.SMBackendConf).filter_by(sr_uuid=sr_uuid),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
sm_flavor = session.query(models.SMFlavors).\,2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"def sm_flavor_get(context, sm_flavor):",2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.SMFlavors).filter_by(label=sm_flavor),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
sm_volume = session.query(models.SMVolume).filter_by(id=volume_id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
result = session.query(models.SMVolume).filter_by(id=volume_id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,1,1
"""""""Query helper that accounts for context's `read_deleted` field.",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
:param context: context to query under,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
":param session: if present, the session to use",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
":param read_deleted: if present, overrides context's read_deleted field.",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
":param project_only: if present and context is user-type, then restrict",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
query to match the context's project_id.,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"""""""",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
if read_deleted == 'no':,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
elif read_deleted == 'yes':,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
pass  # omit the filter to include deleted and active,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
elif read_deleted == 'only':,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
else:,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise Exception(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_(""Unrecognized read_deleted value '%s'"") % read_deleted)",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
if project_only and is_user_context(context):,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return query,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Service, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(disabled=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(topic=topic).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(host=host).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
first(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('compute_node')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"filter_by(topic=""compute"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Service,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.coalesce(sort_value, 0),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"session=session, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"outerjoin((subq, models.Service.host == subq.c.host)).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
order_by(sort_value).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.sum(models.Instance.vcpus).label(label),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.count(models.Network.id).label(label),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.sum(models.Volume.size).label(label),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.ComputeNode, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Certificate, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('fixed_ip')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload_all('fixed_ip.instance')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.FloatingIp, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
@require_admin_context,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload_all('fixed_ip.instance')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _floating_ip_get_all(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.FloatingIp, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# FIXME(sirp): shouldn't we just use project_only here to restrict the,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# results?,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# NOTE(sirp): shouldn't we just use project_only here to restrict the,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
if not result:,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return result,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
@require_context,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.VirtualInterface, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('fixed_ips')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.count(models.Instance.id),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.sum(models.Instance.vcpus),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.sum(models.Instance.memory_mb),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(uuid=uuid).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=instance_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Instance, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
project_only=True).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Instance).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Instance, project_only=project_only).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('instance_type')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _instance_get_all_query(context).filter_by(user_id=user_id).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _instance_get_all_query(context).filter_by(host=host).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _instance_get_all_query(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(project_id=project_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return _instance_get_all_query(context, project_only=True).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(instance_id=instance_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.KeyPair, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Network, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Network).count()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.FixedIp, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(network_id=network_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return _network_ips_query(context, network_id).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(allocated=True).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
count(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(allocated=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(reserved=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(reserved=True).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=network_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
models.Network.project_id == None),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter(models.Network.uuid.in_(network_uuids)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter(project_or_none).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"# FIXME(sirp): since this returns fixed_ips, this would be better named",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# fixed_ip_get_all_by_network.,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload_all('instance')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(network_id=network_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter(models.FixedIp.instance_id != None).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter(models.FixedIp.virtual_interface_id != None).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"read_deleted=""no"")",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# NOTE(vish): return networks that have host set,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
#             or that have a fixed ip with host set,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
models.FixedIp.host == host),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _network_get_query(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.IscsiTarget).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.count(models.Volume.id),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"func.sum(models.Volume.size),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Volume, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
project_only=project_only).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('instance')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('volume_metadata')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('volume_type')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=volume_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _volume_get_query(context).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _volume_get_query(context).filter_by(host=host).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _volume_get_query(context).filter_by(project_id=project_id).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.VolumeMetadata,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(volume_id=volume_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
for row in rows:,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_volume_metadata_get_query(context, volume_id).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=snapshot_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Snapshot).all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Snapshot).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.BlockDeviceMapping, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_block_device_mapping_get_query(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(instance_id=values['instance_id']).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(virtual_name=virtual_name).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter(models.BlockDeviceMapping.device_name !=,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
values['device_name']).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"update({'deleted': True,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"'deleted_at': utils.utcnow(),",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
'updated_at': literal_column('updated_at')}),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _block_device_mapping_get_query(context).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(volume_id=volume_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
project_only=False):,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SecurityGroup, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"read_deleted=read_deleted, project_only=project_only).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload_all('rules')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _security_group_get_query(context).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=security_group_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload_all('instances')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.SecurityGroupNotFoundForProject(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"project_id=project_id, security_group_id=group_name)",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return _security_group_get_query(context, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SecurityGroupIngressRule,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
session=session),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return _security_group_rule_get_query(context, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.ProviderFirewallRule).all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.ProviderFirewallRule).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.User).all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Project).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(status=status).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Migration, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"filter_by(status=""FINISHED"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.ConsolePoolNotFoundForHostType(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"host=host, console_type=console_type,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
compute_host=compute_host),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.ConsolePool, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# NOTE(mdragon): consoles are meant to be transient.,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.ConsoleNotFoundInPoolForInstance(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"pool_id=pool_id, instance_id=instance_id)",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Console, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=console_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('pool')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
if instance_id is not None:,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.ConsoleNotFoundForInstance(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"console_id=console_id, instance_id=instance_id)",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
##################,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.InstanceTypes, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
read_deleted=read_deleted).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('extra_specs')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _dict_with_extra_specs(result),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(flavorid=flavor_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(name=name),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# FIXME(sirp): this should update deleted_at and updated_at as well,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Zone, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=zone_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_zone_get_by_id_query(context, zone_id, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.Zone, read_deleted=""yes"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.InstanceMetadata, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(instance_id=instance_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_instance_metadata_get_query(context, instance_id).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"context, instance_id, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.AgentBuild, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.AgentBuild, read_deleted=""no"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"model_query(context, models.AgentBuild, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"session=session, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=agent_build_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.BandwidthUsage, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
if not session:,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
session=None):,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.InstanceTypeExtraSpecs,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(instance_type_id=instance_type_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"context, instance_type_id).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
_instance_type_extra_specs_get_query(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"context, instance_type_id, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.InstanceTypeExtraSpecsNotFound(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"extra_specs_key=key, instance_type_id=instance_type_id)",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# TODO(sirp): this patern of converting rows to a result with extra_specs,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"# is repeated quite a bit, might be worth creating a method for it",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# FIXME(sirp): we should be setting deleted_at and updated_at here,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.VolumeTypeExtraSpecs, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(volume_type_id=volume_type_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_volume_type_extra_specs_query(context, volume_type_id).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"context, volume_type_id, session=session).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.VolumeTypeExtraSpecsNotFound(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"extra_specs_key=key, volume_type_id=volume_type_id)",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
####################,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.VirtualStorageArray, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
options(joinedload('vsa_instance_type')),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=vsa_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _vsa_get_query(context).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
return _vsa_get_query(context).filter_by(project_id=project_id).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=image_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(uuid=image_uuid).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=sm_backend_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
raise exception.NotFound(,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_(""No backend config with id %(sm_backend_id)s"") % locals())",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"# FIXME(sirp): for consistency, shouldn't this just mark as deleted with",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# `purge` actually deleting the record?,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"model_query(context, models.SMBackendConf, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
# FIXME(sirp): shouldn't this have a `first()` qualifier attached?,2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SMBackendConf, read_deleted=""yes"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(sr_uuid=sr_uuid),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SMFlavors, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(label=sm_flavor_label),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_sm_flavor_get_query(context, sm_flavor_label).delete()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_(""No sm_flavor called %(sm_flavor)s"") % locals())",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SMFlavors, read_deleted=""yes"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SMVolume, session=session,",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
filter_by(id=volume_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_sm_volume_get_query(context, volume_id, session=session).delete()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"_(""No sm_volume with id %(volume_id)s"") % locals())",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"return model_query(context, models.SMVolume, read_deleted=""yes"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,0
"""""""Indicates if the context has access to deleted objects.""""""",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not context:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return False,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return context.read_deleted,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not session:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(deleted=can_read_deleted(context)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(deleted=can_read_deleted(context)),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Service).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(deleted=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(disabled=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(topic=topic).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(host=host).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
first(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('compute_node')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"return session.query(models.Service, func.coalesce(sort_value, 0)).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"outerjoin((subq, models.Service.host == subq.c.host)).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
order_by(sort_value).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
func.sum(models.Instance.vcpus).label(label)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
func.count(models.Network.id).label(label)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
func.sum(models.Volume.size).label(label)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.ComputeNode).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Certificate).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if is_admin_context(context):,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('fixed_ip')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('fixed_ip.instance')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
elif is_user_context(context):,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(project_id=context.project_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.FloatingIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not rv:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return rv,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('fixed_ips')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"func.sum(models.Instance.vcpus),",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
func.sum(models.Instance.memory_mb)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(deleted=False),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return partial,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Instance).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('instance_type')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(user_id=user_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('fixed_ips.floating_ips')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('security_groups')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('fixed_ips.network')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('metadata')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(deleted=read_deleted).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(project_id=project_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('instance_type')),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return query.\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(instance_id=instance_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.KeyPair).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Network).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
count(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.FixedIp).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(network_id=network_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(allocated=True).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(allocated=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(reserved=False).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(reserved=True).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=network_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(deleted=False).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
models.Network.project_id == None),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter(models.Network.uuid.in_(network_uuids)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter(project_or_none).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('instance')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter(models.FixedIp.instance_id != None).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter(models.FixedIp.virtual_interface_id != None).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(bridge=bridge).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(uuid=uuid).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
with session.begin():,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
# NOTE(vish): return networks that have host set,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
#             or that have a fixed ip with host set,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
models.FixedIp.host == host),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.IscsiTarget).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if session is None:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not tk:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return tk,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
func.sum(models.Volume.size)).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('instance')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('volume_metadata')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('volume_type')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=volume_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Volume).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(volume_id=volume_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
for i in meta_results:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return meta_dict,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.VolumeMetadata).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not meta_result:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return meta_result,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=snapshot_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Snapshot).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.BlockDeviceMapping).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(instance_id=values['instance_id']).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(virtual_name=virtual_name).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter(models.BlockDeviceMapping.device_name !=,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
values['device_name']).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"update({'deleted': True,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"'deleted_at': utils.utcnow(),",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
'updated_at': literal_column('updated_at')}),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not result:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return [],2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return result,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.SecurityGroup).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('rules')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"filter_by(deleted=can_read_deleted(context),).\",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=security_group_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('instances')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
else:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.SecurityGroupNotFoundForProject(project_id=project_id,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
security_group_id=group_name),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=security_group_rule_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
# TODO(vish): Join to group and check for project_id,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(parent_group_id=security_group_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload_all('grantee_group.instances')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(group_id=security_group_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.ProviderFirewallRule).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.User).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Project).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(status=status).first(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"filter_by(status=""FINISHED"").all()",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return results,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.ConsolePoolNotFoundForHostType(host=host,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"console_type=console_type,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
compute_host=compute_host),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.ConsolePool).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
# consoles are meant to be transient. (mdragon),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.ConsoleNotFoundInPoolForInstance(pool_id=pool_id,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
instance_id=instance_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('pool')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=console_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if instance_id:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.ConsoleNotFoundForInstance(console_id=console_id,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
##################,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
.options(joinedload('extra_specs')),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not inactive:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('extra_specs')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not inst_type:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return _dict_with_extra_specs(inst_type),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(flavorid=flavor_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(name=name),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not zone:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
raise exception.ZoneNotFound(zone_id=zone_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.Zone).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=zone_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.Zone).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.InstanceMetadata).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.AgentBuild).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.AgentBuild).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=agent_build_id). \,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.BandwidthUsage).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(instance_type_id=instance_type_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
for i in spec_results:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return spec_dict,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.InstanceTypeExtraSpecs).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not spec_result:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
raise exception.\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"InstanceTypeExtraSpecsNotFound(extra_specs_key=key,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
instance_type_id=instance_type_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return spec_result,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if inactive:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"order_by(""name"").\",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if vol_types:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
for i in vol_types:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return vol_dict,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not vol_type:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return _dict_with_extra_specs(vol_type),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(volume_type_id=volume_type_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.VolumeTypeExtraSpecs).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session=None):,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"VolumeTypeExtraSpecsNotFound(extra_specs_key=key,",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
volume_type_id=volume_type_id),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
####################,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
options(joinedload('vsa_instance_type')).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=vsa_id).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.VirtualStorageArray).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
.filter_by(id=image_id)\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
.first(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not res:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return res,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
.filter_by(uuid=image_uuid)\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(id=sm_backend_id).first(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.NotFound(_(""No backend config with id ""\",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"""%(sm_backend_id)s"") % locals())",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.SMBackendConf).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.SMBackendConf).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(label=sm_flavor_label),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not sm_flavor:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.NotFound(_(""No sm_flavor with id ""\",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"""%(sm_flavor_id)s"") % locals())",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.SMFlavors).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
filter_by(label=sm_flavor_label).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
delete(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.NotFound(_(""No sm_flavor called %(sm_flavor)s"") \",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
% locals()),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.SMFlavors).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
if not sm_volume:,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"raise exception.NotFound(_(""No sm_volume with id %(volume_id)s"") \",2218cb025adca1ded3e6596acc182b88742e3a51,0,1
session.query(models.SMVolume).\,2218cb025adca1ded3e6596acc182b88742e3a51,0,1
return session.query(models.SMVolume).all(),2218cb025adca1ded3e6596acc182b88742e3a51,0,1
"read_deleted = ""yes"" if inactive else ""no""",865c3d57f8b84dfcc493ecead12816874b160e35,2,0
"_(""No backend config with id %(sm_backend_id)s"") % locals())",865c3d57f8b84dfcc493ecead12816874b160e35,2,0
"_(""No sm_volume with id %(volume_id)s"") % locals())",865c3d57f8b84dfcc493ecead12816874b160e35,2,0
"partial = _build_instance_get(context, session=session)",865c3d57f8b84dfcc493ecead12816874b160e35,2,1
with session.begin():,865c3d57f8b84dfcc493ecead12816874b160e35,2,1
session = session if session else get_session(),865c3d57f8b84dfcc493ecead12816874b160e35,2,1
"def model_query(context, *args, **kwargs):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
":param session: if present, the session to use",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
":param read_deleted: if present, overrides context's read_deleted field.",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
":param project_only: if present and context is user-type, then restrict",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
session = kwargs.get('session') or get_session(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
read_deleted = kwargs.get('read_deleted') or context.read_deleted,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
project_only = kwargs.get('project_only'),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
query = session.query(*args),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
if read_deleted == 'no':,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
query = query.filter_by(deleted=False),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
query = query.filter_by(deleted=True),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"_(""Unrecognized read_deleted value '%s'"") % read_deleted)",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
if project_only and is_user_context(context):,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
query = query.filter_by(project_id=context.project_id),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Service, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"query = model_query(context, models.Service)",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Service, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"subq = model_query(context, models.Instance.host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"subq = model_query(context, models.Network.host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"subq = model_query(context, models.Volume.host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Service).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.ComputeNode, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Certificate, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def certificate_get_all_by_user_and_project(context, user_id, project_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.FloatingIp, project_only=True).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"floating_ip_ref = model_query(context, models.FloatingIp,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
def _floating_ip_get_all(context):,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
floating_ip_refs = _floating_ip_get_all(context).all(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
floating_ip_refs = _floating_ip_get_all(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.FloatingIp, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"fixed_ip_ref = model_query(context, models.FixedIp, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def fixed_ip_create(context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def fixed_ip_bulk_create(context, ips):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def fixed_ip_disassociate_all_by_timeout(context, host, time):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"inner_q = model_query(context, models.Network.id, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.FixedIp, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.FixedIp, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.FixedIp, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.FixedIp, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
if not result:,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _virtual_interface_query(context, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"vif_ref = _virtual_interface_query(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
vif_ref = _virtual_interface_query(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
vif_refs = _virtual_interface_query(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
vif_refs = _virtual_interface_query(context).all(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _build_instance_get(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _instance_get_all_query(context, project_only=False):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def instance_get_all_by_user(context, user_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.KeyPair, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _network_ips_query(context, network_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"network_ref = network_get(context, network_id=network_id,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Network, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Network, read_deleted=""no"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Network, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _network_get_query(context, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _network_get_query(context).filter_by(bridge=bridge).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _network_get_query(context).filter_by(uuid=uuid).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _network_get_query(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def network_get_by_instance(context, instance_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def network_get_all_by_instance(context, instance_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
#             or that have a fixed ip with host set,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"host_filter = or_(models.Network.host == host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"network_ref = _network_get_query(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def queue_get_for(context, topic, physical_node_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.AuthToken, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def auth_token_create(context, token):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Quota, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"rows = model_query(context, models.Quota, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = {'project_id': project_id},865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"quotas = model_query(context, models.Quota, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"iscsi_target_ref = model_query(context, models.IscsiTarget,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _volume_get_query(context, session=None, project_only=False):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _volume_get_query(context, session=session, project_only=True).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Volume, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _volume_get_query(context).filter_by(id=volume_id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.IscsiTarget, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _volume_metadata_get_query(context, volume_id, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"rows = _volume_metadata_get_query(context, volume_id).all()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = {},865c3d57f8b84dfcc493ecead12816874b160e35,1,0
for row in rows:,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result[row['key']] = row['value'],865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _volume_metadata_get_query(context, volume_id, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Snapshot, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _block_device_mapping_get_query(context, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _block_device_mapping_get_query(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _security_group_get_query(context, session=None, read_deleted=None,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _security_group_get_query(context, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _security_group_get_query(context, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _security_group_rule_get_query(context, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
session=session),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _security_group_rule_get_query(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.User, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def user_create(context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def project_create(context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Project, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"user = model_query(context, models.User).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Migration, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Migration, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.ConsolePool, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.Console, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"query = model_query(context, models.Console, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
if instance_id is not None:,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = query.first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def instance_type_create(context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _instance_type_get_query(context, session=None, read_deleted=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"query = _instance_type_get_query(context, read_deleted=read_deleted)",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
query = query.filter(,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"inst_types = query.order_by(""name"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _instance_type_get_query(context, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"instance_type_ref = model_query(context, models.InstanceTypes,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _zone_get_by_id_query(context, zone_id, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"zone = zone_get(context, zone_id)",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _zone_get_by_id_query(context, zone_id).first()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _instance_metadata_get_query(context, instance_id, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"rows = _instance_metadata_get_query(context, instance_id).all()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _instance_metadata_get_query(,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"agent_build_ref = model_query(context, models.AgentBuild,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
if not session:,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
session = get_session(),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"bwusage = model_query(context, models.BandwidthUsage,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _instance_type_extra_specs_get_query(context, instance_type_id,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
rows = _instance_type_extra_specs_get_query(,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _instance_type_extra_specs_get_query(,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def volume_type_create(context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def volume_type_get_all(context, inactive=False, filters=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
filters = filters or {},865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"rows = model_query(context, models.VolumeTypes,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
# TODO(sirp): this patern of converting rows to a result with extra_specs,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result[row['name']] = _dict_with_extra_specs(row),865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.VolumeTypes, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"volume_type_ref = model_query(context, models.VolumeTypes,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _volume_type_extra_specs_query(context, volume_type_id, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"rows = _volume_type_extra_specs_query(context, volume_type_id).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
result = _volume_type_extra_specs_query(,865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _vsa_get_query(context, session=None, project_only=False):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _vsa_get_query(context, session=session, project_only=True).\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.S3Image, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"backend_conf = model_query(context, models.SMBackendConf,",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"# FIXME(sirp): for consistency, shouldn't this just mark as deleted with",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = model_query(context, models.SMBackendConf, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _sm_flavor_get_query(context, sm_flavor_label, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"sm_flavor = sm_flavor_get(context, sm_flavor_label)",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def sm_flavor_get(context, sm_flavor_label):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _sm_flavor_get_query(context, sm_flavor_label).first()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"_(""No sm_flavor called %(sm_flavor)s"") % locals())",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"def _sm_volume_get_query(context, volume_id, session=None):",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"sm_volume = sm_volume_get(context, volume_id)",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
"result = _sm_volume_get_query(context, volume_id).first()",865c3d57f8b84dfcc493ecead12816874b160e35,1,0
def can_read_deleted(context):,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"""""""Indicates if the context has access to deleted objects.""""""",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not context:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not session:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
session = get_session(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Service).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
filter_by(deleted=can_read_deleted(context)).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
query = session.query(models.Service).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
topic = 'compute',865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"subq = session.query(models.Instance.host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"subq = session.query(models.Network.host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"subq = session.query(models.Volume.host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.ComputeNode).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Certificate).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def certificate_get_all_by_user_and_project(_context, user_id, project_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = None,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if is_admin_context(context):,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.FloatingIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
floating_ip_ref = session.query(models.FloatingIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
floating_ip_refs = session.query(models.FloatingIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
fixed_ip_ref = session.query(models.FixedIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def fixed_ip_create(_context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def fixed_ip_bulk_create(_context, ips):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def fixed_ip_disassociate_all_by_timeout(_context, host, time):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
inner_q = session.query(models.Network.id).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.FixedIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
rv = session.query(models.FixedIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not rv:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
vif_ref = session.query(models.VirtualInterface).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
vif_refs = session.query(models.VirtualInterface).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"result = session.query(func.count(models.Instance.id),",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = partial.filter_by(uuid=uuid),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = result.first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = partial.filter_by(id=instance_id),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
partial = session.query(models.Instance).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
partial = partial.filter_by(deleted=can_read_deleted(context)),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
partial = partial.filter_by(project_id=context.project_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def instance_get_all_by_user(context, user_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
read_deleted = can_read_deleted(context),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
query = session.query(models.Instance).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.KeyPair).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"network_ref = network_get(context, network_id=network_id, \",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Network).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def network_get_by_instance(_context, instance_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
rv = session.query(models.Network).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def network_get_all_by_instance(_context, instance_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
#             or that have a fixed ip with host set,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"host_filter = or_(models.Network.host == host,",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
network_ref = session.query(models.Network).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def queue_get_for(_context, topic, physical_node_id):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if session is None:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
tk = session.query(models.AuthToken).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not tk:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def auth_token_create(_context, token):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Quota).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = {'project_id': project_id},865c3d57f8b84dfcc493ecead12816874b160e35,1,1
rows = session.query(models.Quota).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
quotas = session.query(models.Quota).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
iscsi_target_ref = session.query(models.IscsiTarget).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"result = session.query(func.count(models.Volume.id),",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Volume).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.IscsiTarget).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
meta_results = session.query(models.VolumeMetadata).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
meta_dict = {},865c3d57f8b84dfcc493ecead12816874b160e35,1,1
for i in meta_results:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
meta_dict[i['key']] = i['value'],865c3d57f8b84dfcc493ecead12816874b160e35,1,1
meta_result = session.query(models.VolumeMetadata).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not meta_result:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Snapshot).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.BlockDeviceMapping).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not result:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.SecurityGroup).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.SecurityGroupIngressRule).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.User).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def user_create(_context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def project_create(_context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Project).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
user = session.query(models.User).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Migration).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
results = session.query(models.Migration).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.ConsolePool).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Console).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
results = session.query(models.Console).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
query = session.query(models.Console).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if instance_id:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = query.options(joinedload('pool')).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def instance_type_create(_context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
partial = session.query(models.InstanceTypes)\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not inactive:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
partial = partial.filter_by(deleted=False),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
partial = partial.filter(,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"inst_types = partial.order_by(""name"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
inst_type = session.query(models.InstanceTypes).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not inst_type:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
instance_type_ref = session.query(models.InstanceTypes).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
zone = session.query(models.Zone).filter_by(id=zone_id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not zone:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.Zone).filter_by(id=zone_id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
meta_results = session.query(models.InstanceMetadata).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
meta_result = session.query(models.InstanceMetadata).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
agent_build_ref = session.query(models.AgentBuild).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
bwusage = session.query(models.BandwidthUsage).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
spec_results = session.query(models.InstanceTypeExtraSpecs).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
spec_dict = {},865c3d57f8b84dfcc493ecead12816874b160e35,1,1
for i in spec_results:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
spec_dict[i['key']] = i['value'],865c3d57f8b84dfcc493ecead12816874b160e35,1,1
spec_result = session.query(models.InstanceTypeExtraSpecs).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not spec_result:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def volume_type_create(_context, values):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def volume_type_get_all(context, inactive=False, filters={}):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if inactive:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
vol_types = session.query(models.VolumeTypes).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
vol_dict = {},865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if vol_types:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
for i in vol_types:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
vol_dict[i['name']] = _dict_with_extra_specs(i),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
vol_type = session.query(models.VolumeTypes).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not vol_type:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
volume_type_ref = session.query(models.VolumeTypes).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
spec_results = session.query(models.VolumeTypeExtraSpecs).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
spec_result = session.query(models.VolumeTypeExtraSpecs).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.VirtualStorageArray).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
res = session.query(models.S3Image)\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not res:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
backend_conf = session.query(models.SMBackendConf).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"raise exception.NotFound(_(""No backend config with id ""\",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"""%(sm_backend_id)s"") % locals())",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.SMBackendConf).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.SMBackendConf).filter_by(sr_uuid=sr_uuid),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
sm_flavor = session.query(models.SMFlavors).\,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not sm_flavor:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"raise exception.NotFound(_(""No sm_flavor with id ""\",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"""%(sm_flavor_id)s"") % locals())",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"def sm_flavor_get(context, sm_flavor):",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.SMFlavors).filter_by(label=sm_flavor),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
% locals()),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
sm_volume = session.query(models.SMVolume).filter_by(id=volume_id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
if not sm_volume:,865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"raise exception.NotFound(_(""No sm_volume with id %(volume_id)s"") \",865c3d57f8b84dfcc493ecead12816874b160e35,1,1
result = session.query(models.SMVolume).filter_by(id=volume_id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,1,1
"""""""Query helper that accounts for context's `read_deleted` field.",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
:param context: context to query under,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
query to match the context's project_id.,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"""""""",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
elif read_deleted == 'yes':,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
pass  # omit the filter to include deleted and active,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
elif read_deleted == 'only':,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
else:,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise Exception(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return query,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Service, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(disabled=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(topic=topic).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(host=host).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
first(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('compute_node')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"filter_by(topic=""compute"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Service,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.coalesce(sort_value, 0),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"session=session, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"outerjoin((subq, models.Service.host == subq.c.host)).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
order_by(sort_value).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.sum(models.Instance.vcpus).label(label),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.count(models.Network.id).label(label),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.sum(models.Volume.size).label(label),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.ComputeNode, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Certificate, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('fixed_ip')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload_all('fixed_ip.instance')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.FloatingIp, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
@require_admin_context,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload_all('fixed_ip.instance')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _floating_ip_get_all(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.FloatingIp, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# FIXME(sirp): shouldn't we just use project_only here to restrict the,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# results?,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# NOTE(sirp): shouldn't we just use project_only here to restrict the,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return result,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
@require_context,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.VirtualInterface, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('fixed_ips')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.count(models.Instance.id),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.sum(models.Instance.vcpus),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.sum(models.Instance.memory_mb),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(uuid=uuid).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=instance_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Instance, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
project_only=True).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Instance).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Instance, project_only=project_only).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('instance_type')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _instance_get_all_query(context).filter_by(user_id=user_id).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _instance_get_all_query(context).filter_by(host=host).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _instance_get_all_query(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(project_id=project_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return _instance_get_all_query(context, project_only=True).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(instance_id=instance_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.KeyPair, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Network, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Network).count()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.FixedIp, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(network_id=network_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return _network_ips_query(context, network_id).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(allocated=True).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
count(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(allocated=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(reserved=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(reserved=True).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=network_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
models.Network.project_id == None),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter(models.Network.uuid.in_(network_uuids)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter(project_or_none).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"# FIXME(sirp): since this returns fixed_ips, this would be better named",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# fixed_ip_get_all_by_network.,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload_all('instance')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(network_id=network_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter(models.FixedIp.instance_id != None).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter(models.FixedIp.virtual_interface_id != None).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"read_deleted=""no"")",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# NOTE(vish): return networks that have host set,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
models.FixedIp.host == host),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _network_get_query(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.IscsiTarget).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.count(models.Volume.id),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"func.sum(models.Volume.size),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Volume, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
project_only=project_only).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('instance')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('volume_metadata')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('volume_type')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=volume_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _volume_get_query(context).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _volume_get_query(context).filter_by(host=host).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _volume_get_query(context).filter_by(project_id=project_id).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.VolumeMetadata,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(volume_id=volume_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_volume_metadata_get_query(context, volume_id).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=snapshot_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Snapshot).all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Snapshot).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.BlockDeviceMapping, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_block_device_mapping_get_query(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(instance_id=values['instance_id']).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(virtual_name=virtual_name).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter(models.BlockDeviceMapping.device_name !=,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
values['device_name']).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"update({'deleted': True,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"'deleted_at': utils.utcnow(),",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
'updated_at': literal_column('updated_at')}),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _block_device_mapping_get_query(context).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(volume_id=volume_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
project_only=False):,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SecurityGroup, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"read_deleted=read_deleted, project_only=project_only).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload_all('rules')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _security_group_get_query(context).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=security_group_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload_all('instances')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.SecurityGroupNotFoundForProject(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"project_id=project_id, security_group_id=group_name)",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return _security_group_get_query(context, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SecurityGroupIngressRule,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return _security_group_rule_get_query(context, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.ProviderFirewallRule).all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.ProviderFirewallRule).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.User).all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Project).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(status=status).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Migration, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"filter_by(status=""FINISHED"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.ConsolePoolNotFoundForHostType(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"host=host, console_type=console_type,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
compute_host=compute_host),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.ConsolePool, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# NOTE(mdragon): consoles are meant to be transient.,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.ConsoleNotFoundInPoolForInstance(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"pool_id=pool_id, instance_id=instance_id)",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Console, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=console_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('pool')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.ConsoleNotFoundForInstance(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"console_id=console_id, instance_id=instance_id)",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
##################,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.InstanceTypes, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
read_deleted=read_deleted).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('extra_specs')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _dict_with_extra_specs(result),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(flavorid=flavor_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(name=name),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# FIXME(sirp): this should update deleted_at and updated_at as well,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Zone, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=zone_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_zone_get_by_id_query(context, zone_id, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.Zone, read_deleted=""yes"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.InstanceMetadata, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(instance_id=instance_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_instance_metadata_get_query(context, instance_id).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"context, instance_id, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.AgentBuild, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.AgentBuild, read_deleted=""no"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"model_query(context, models.AgentBuild, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"session=session, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=agent_build_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.BandwidthUsage, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
session=None):,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.InstanceTypeExtraSpecs,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(instance_type_id=instance_type_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"context, instance_type_id).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
_instance_type_extra_specs_get_query(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"context, instance_type_id, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.InstanceTypeExtraSpecsNotFound(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"extra_specs_key=key, instance_type_id=instance_type_id)",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"# is repeated quite a bit, might be worth creating a method for it",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# FIXME(sirp): we should be setting deleted_at and updated_at here,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.VolumeTypeExtraSpecs, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(volume_type_id=volume_type_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_volume_type_extra_specs_query(context, volume_type_id).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"context, volume_type_id, session=session).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.VolumeTypeExtraSpecsNotFound(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"extra_specs_key=key, volume_type_id=volume_type_id)",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
####################,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.VirtualStorageArray, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
options(joinedload('vsa_instance_type')),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=vsa_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _vsa_get_query(context).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return _vsa_get_query(context).filter_by(project_id=project_id).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=image_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(uuid=image_uuid).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=sm_backend_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
raise exception.NotFound(,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# `purge` actually deleting the record?,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"model_query(context, models.SMBackendConf, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
# FIXME(sirp): shouldn't this have a `first()` qualifier attached?,865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SMBackendConf, read_deleted=""yes"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(sr_uuid=sr_uuid),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SMFlavors, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(label=sm_flavor_label),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_sm_flavor_get_query(context, sm_flavor_label).delete()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SMFlavors, read_deleted=""yes"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SMVolume, session=session,",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
filter_by(id=volume_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"_sm_volume_get_query(context, volume_id, session=session).delete()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
"return model_query(context, models.SMVolume, read_deleted=""yes"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,0
return False,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return context.read_deleted,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(deleted=can_read_deleted(context)),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Service).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(deleted=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(disabled=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(topic=topic).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(host=host).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
first(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('compute_node')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"return session.query(models.Service, func.coalesce(sort_value, 0)).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"outerjoin((subq, models.Service.host == subq.c.host)).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
order_by(sort_value).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
func.sum(models.Instance.vcpus).label(label)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
func.count(models.Network.id).label(label)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
func.sum(models.Volume.size).label(label)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.ComputeNode).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Certificate).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('fixed_ip')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('fixed_ip.instance')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
elif is_user_context(context):,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(project_id=context.project_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.FloatingIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return rv,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('fixed_ips')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"func.sum(models.Instance.vcpus),",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
func.sum(models.Instance.memory_mb)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(deleted=False),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return partial,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Instance).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('instance_type')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(user_id=user_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('fixed_ips.floating_ips')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('security_groups')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('fixed_ips.network')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('metadata')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(deleted=read_deleted).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(project_id=project_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('instance_type')),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return query.\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(instance_id=instance_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.KeyPair).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Network).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
count(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.FixedIp).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(network_id=network_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(allocated=True).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(allocated=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(reserved=False).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(reserved=True).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=network_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(deleted=False).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
models.Network.project_id == None),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter(models.Network.uuid.in_(network_uuids)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter(project_or_none).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('instance')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter(models.FixedIp.instance_id != None).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter(models.FixedIp.virtual_interface_id != None).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(bridge=bridge).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(uuid=uuid).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
# NOTE(vish): return networks that have host set,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
models.FixedIp.host == host),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.IscsiTarget).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return tk,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
func.sum(models.Volume.size)).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('instance')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('volume_metadata')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('volume_type')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=volume_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Volume).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(volume_id=volume_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return meta_dict,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.VolumeMetadata).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return meta_result,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=snapshot_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Snapshot).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.BlockDeviceMapping).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(instance_id=values['instance_id']).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(virtual_name=virtual_name).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter(models.BlockDeviceMapping.device_name !=,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
values['device_name']).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"update({'deleted': True,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"'deleted_at': utils.utcnow(),",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
'updated_at': literal_column('updated_at')}),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return [],865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return result,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.SecurityGroup).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('rules')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"filter_by(deleted=can_read_deleted(context),).\",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=security_group_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('instances')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
else:,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"raise exception.SecurityGroupNotFoundForProject(project_id=project_id,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
security_group_id=group_name),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=security_group_rule_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
# TODO(vish): Join to group and check for project_id,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(parent_group_id=security_group_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload_all('grantee_group.instances')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(group_id=security_group_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.ProviderFirewallRule).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.User).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Project).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(status=status).first(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"filter_by(status=""FINISHED"").all()",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return results,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"raise exception.ConsolePoolNotFoundForHostType(host=host,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"console_type=console_type,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
compute_host=compute_host),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.ConsolePool).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
# consoles are meant to be transient. (mdragon),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"raise exception.ConsoleNotFoundInPoolForInstance(pool_id=pool_id,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
instance_id=instance_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('pool')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=console_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"raise exception.ConsoleNotFoundForInstance(console_id=console_id,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
##################,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
.options(joinedload('extra_specs')),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('extra_specs')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return _dict_with_extra_specs(inst_type),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(flavorid=flavor_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(name=name),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
raise exception.ZoneNotFound(zone_id=zone_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.Zone).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=zone_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.Zone).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.InstanceMetadata).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.AgentBuild).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.AgentBuild).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=agent_build_id). \,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.BandwidthUsage).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(instance_type_id=instance_type_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return spec_dict,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.InstanceTypeExtraSpecs).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
raise exception.\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"InstanceTypeExtraSpecsNotFound(extra_specs_key=key,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
instance_type_id=instance_type_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return spec_result,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"order_by(""name"").\",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return vol_dict,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return _dict_with_extra_specs(vol_type),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(volume_type_id=volume_type_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.VolumeTypeExtraSpecs).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session=None):,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"VolumeTypeExtraSpecsNotFound(extra_specs_key=key,",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
volume_type_id=volume_type_id),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
####################,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
options(joinedload('vsa_instance_type')).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=vsa_id).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.VirtualStorageArray).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
.filter_by(id=image_id)\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
.first(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return res,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
.filter_by(uuid=image_uuid)\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(id=sm_backend_id).first(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.SMBackendConf).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.SMBackendConf).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(label=sm_flavor_label),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.SMFlavors).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
filter_by(label=sm_flavor_label).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
delete(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
"raise exception.NotFound(_(""No sm_flavor called %(sm_flavor)s"") \",865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.SMFlavors).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
session.query(models.SMVolume).\,865c3d57f8b84dfcc493ecead12816874b160e35,0,1
return session.query(models.SMVolume).all(),865c3d57f8b84dfcc493ecead12816874b160e35,0,1
result = session.query(models.FixedIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,3,1
"result = model_query(context, models.Service, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Service, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Service).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.ComputeNode, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Certificate, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.FloatingIp, project_only=True).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.FloatingIp, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.FixedIp, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.FixedIp, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.FixedIp, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.FixedIp, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _build_instance_get(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.KeyPair, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Network, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Network, read_deleted=""no"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Network, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _network_get_query(context).filter_by(bridge=bridge).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _network_get_query(context).filter_by(uuid=uuid).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _network_get_query(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.AuthToken, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Quota, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = {'project_id': project_id},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _volume_get_query(context, session=session, project_only=True).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Volume, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _volume_get_query(context).filter_by(id=volume_id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.IscsiTarget, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = {},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _volume_metadata_get_query(context, volume_id, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Snapshot, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _block_device_mapping_get_query(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _security_group_get_query(context, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _security_group_get_query(context, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _security_group_rule_get_query(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.User, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Project, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Migration, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Migration, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.ConsolePool, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.Console, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = query.first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _instance_type_get_query(context, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _zone_get_by_id_query(context, zone_id).first()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _instance_metadata_get_query(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _instance_type_extra_specs_get_query(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.VolumeTypes, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = _volume_type_extra_specs_query(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _vsa_get_query(context, session=session, project_only=True).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.S3Image, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = model_query(context, models.SMBackendConf, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _sm_flavor_get_query(context, sm_flavor_label).first()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
"result = _sm_volume_get_query(context, volume_id).first()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,0
result = session.query(models.Service).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.ComputeNode).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Certificate).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = None,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.FloatingIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
fixed_ip_ref = session.query(models.FixedIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
rv = session.query(models.FixedIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
"result = session.query(func.count(models.Instance.id),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = partial.filter_by(uuid=uuid),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = result.first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = partial.filter_by(id=instance_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.KeyPair).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Network).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Quota).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = {'project_id': project_id},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
"result = session.query(func.count(models.Volume.id),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Volume).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.IscsiTarget).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Snapshot).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.BlockDeviceMapping).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.SecurityGroup).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.SecurityGroupIngressRule).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.User).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Project).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Migration).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.ConsolePool).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Console).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = query.options(joinedload('pool')).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.Zone).filter_by(id=zone_id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.VirtualStorageArray).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.SMBackendConf).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.SMBackendConf).filter_by(sr_uuid=sr_uuid),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.SMFlavors).filter_by(label=sm_flavor),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
result = session.query(models.SMVolume).filter_by(id=volume_id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,2,1
session = kwargs.get('session') or get_session(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
read_deleted = kwargs.get('read_deleted') or context.read_deleted,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
project_only = kwargs.get('project_only'),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
query = session.query(*args),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
query = query.filter_by(deleted=False),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
query = query.filter_by(deleted=True),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
query = query.filter_by(project_id=context.project_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"query = model_query(context, models.Service)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
filter_by(host=host).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"subq = model_query(context, models.Instance.host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"subq = model_query(context, models.Network.host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"subq = model_query(context, models.Volume.host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"floating_ip_ref = model_query(context, models.FloatingIp,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
floating_ip_refs = _floating_ip_get_all(context).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
floating_ip_refs = _floating_ip_get_all(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"fixed_ip_ref = model_query(context, models.FixedIp, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"inner_q = model_query(context, models.Network.id, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
return result,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"vif_ref = _virtual_interface_query(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
vif_ref = _virtual_interface_query(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
vif_refs = _virtual_interface_query(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
vif_refs = _virtual_interface_query(context).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"network_ref = network_get(context, network_id=network_id,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"host_filter = or_(models.Network.host == host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"network_ref = _network_get_query(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"rows = model_query(context, models.Quota, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"quotas = model_query(context, models.Quota, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"iscsi_target_ref = model_query(context, models.IscsiTarget,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"rows = _volume_metadata_get_query(context, volume_id).all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
result[row['key']] = row['value'],2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"user = model_query(context, models.User).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"query = model_query(context, models.Console, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"read_deleted = ""yes"" if inactive else ""no""",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"query = _instance_type_get_query(context, read_deleted=read_deleted)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
query = query.filter(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"inst_types = query.order_by(""name"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"instance_type_ref = model_query(context, models.InstanceTypes,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"zone = zone_get(context, zone_id)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"rows = _instance_metadata_get_query(context, instance_id).all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"agent_build_ref = model_query(context, models.AgentBuild,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
session = get_session(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"bwusage = model_query(context, models.BandwidthUsage,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
rows = _instance_type_extra_specs_get_query(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
filters = filters or {},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"rows = model_query(context, models.VolumeTypes,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
# TODO(sirp): this patern of converting rows to a result with extra_specs,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
result[row['name']] = _dict_with_extra_specs(row),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"volume_type_ref = model_query(context, models.VolumeTypes,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"rows = _volume_type_extra_specs_query(context, volume_type_id).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"backend_conf = model_query(context, models.SMBackendConf,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"sm_flavor = sm_flavor_get(context, sm_flavor_label)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
"sm_volume = sm_volume_get(context, volume_id)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,0
session = get_session(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
query = session.query(models.Service).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
filter_by(host=host).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
topic = 'compute',2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"subq = session.query(models.Instance.host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"subq = session.query(models.Network.host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"subq = session.query(models.Volume.host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
floating_ip_ref = session.query(models.FloatingIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
floating_ip_refs = session.query(models.FloatingIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
inner_q = session.query(models.Network.id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
vif_ref = session.query(models.VirtualInterface).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
vif_refs = session.query(models.VirtualInterface).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"partial = _build_instance_get(context, session=session)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
partial = session.query(models.Instance).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
partial = partial.filter_by(deleted=can_read_deleted(context)),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
partial = partial.filter_by(project_id=context.project_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
read_deleted = can_read_deleted(context),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
query = session.query(models.Instance).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
return session.query(models.FixedIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"network_ref = network_get(context, network_id=network_id, \",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
rv = session.query(models.Network).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"host_filter = or_(models.Network.host == host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
network_ref = session.query(models.Network).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
tk = session.query(models.AuthToken).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
rows = session.query(models.Quota).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
quotas = session.query(models.Quota).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
iscsi_target_ref = session.query(models.IscsiTarget).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
meta_results = session.query(models.VolumeMetadata).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
meta_dict = {},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
meta_dict[i['key']] = i['value'],2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
meta_result = session.query(models.VolumeMetadata).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
return result,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
user = session.query(models.User).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
results = session.query(models.Migration).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
results = session.query(models.Console).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
query = session.query(models.Console).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
partial = session.query(models.InstanceTypes)\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
partial = partial.filter_by(deleted=False),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
partial = partial.filter(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"inst_types = partial.order_by(""name"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
inst_type = session.query(models.InstanceTypes).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
instance_type_ref = session.query(models.InstanceTypes).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
zone = session.query(models.Zone).filter_by(id=zone_id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
meta_results = session.query(models.InstanceMetadata).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
meta_result = session.query(models.InstanceMetadata).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
agent_build_ref = session.query(models.AgentBuild).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
session = session if session else get_session(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
bwusage = session.query(models.BandwidthUsage).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
spec_results = session.query(models.InstanceTypeExtraSpecs).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
spec_dict = {},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
spec_dict[i['key']] = i['value'],2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
spec_result = session.query(models.InstanceTypeExtraSpecs).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
vol_types = session.query(models.VolumeTypes).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
vol_dict = {},2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
vol_dict[i['name']] = _dict_with_extra_specs(i),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
vol_type = session.query(models.VolumeTypes).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
volume_type_ref = session.query(models.VolumeTypes).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
spec_results = session.query(models.VolumeTypeExtraSpecs).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
spec_result = session.query(models.VolumeTypeExtraSpecs).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
res = session.query(models.S3Image)\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
backend_conf = session.query(models.SMBackendConf).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
sm_flavor = session.query(models.SMFlavors).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
sm_volume = session.query(models.SMVolume).filter_by(id=volume_id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,1,1
"def model_query(context, *args, **kwargs):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"""""""Query helper that accounts for context's `read_deleted` field.",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
:param context: context to query under,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
":param session: if present, the session to use",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
":param read_deleted: if present, overrides context's read_deleted field.",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
":param project_only: if present and context is user-type, then restrict",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
query to match the context's project_id.,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"""""""",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
if read_deleted == 'no':,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
elif read_deleted == 'yes':,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
pass  # omit the filter to include deleted and active,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
elif read_deleted == 'only':,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
else:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise Exception(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_(""Unrecognized read_deleted value '%s'"") % read_deleted)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
if project_only and is_user_context(context):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return query,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Service, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(disabled=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(topic=topic).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('compute_node')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"filter_by(topic=""compute"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Service,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.coalesce(sort_value, 0),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"session=session, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"outerjoin((subq, models.Service.host == subq.c.host)).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
order_by(sort_value).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.sum(models.Instance.vcpus).label(label),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.count(models.Network.id).label(label),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.sum(models.Volume.size).label(label),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.ComputeNode, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Certificate, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def certificate_get_all_by_user_and_project(context, user_id, project_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('fixed_ip')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload_all('fixed_ip.instance')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.FloatingIp, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
@require_admin_context,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
def _floating_ip_get_all(context):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload_all('fixed_ip.instance')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _floating_ip_get_all(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.FloatingIp, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def fixed_ip_create(context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def fixed_ip_bulk_create(context, ips):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def fixed_ip_disassociate_all_by_timeout(context, host, time):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# FIXME(sirp): shouldn't we just use project_only here to restrict the,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# results?,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# NOTE(sirp): shouldn't we just use project_only here to restrict the,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
if not result:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
@require_context,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _virtual_interface_query(context, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.VirtualInterface, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('fixed_ips')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.count(models.Instance.id),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.sum(models.Instance.vcpus),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.sum(models.Instance.memory_mb),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(uuid=uuid).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=instance_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Instance, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
project_only=True).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Instance).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _instance_get_all_query(context, project_only=False):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Instance, project_only=project_only).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('instance_type')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def instance_get_all_by_user(context, user_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _instance_get_all_query(context).filter_by(user_id=user_id).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _instance_get_all_query(context).filter_by(host=host).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _instance_get_all_query(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(project_id=project_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return _instance_get_all_query(context, project_only=True).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(instance_id=instance_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.KeyPair, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Network, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Network).count()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _network_ips_query(context, network_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.FixedIp, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(network_id=network_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return _network_ips_query(context, network_id).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(allocated=True).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
count(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(allocated=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(reserved=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(reserved=True).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=network_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
models.Network.project_id == None),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter(models.Network.uuid.in_(network_uuids)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter(project_or_none).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"# FIXME(sirp): since this returns fixed_ips, this would be better named",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# fixed_ip_get_all_by_network.,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload_all('instance')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(network_id=network_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter(models.FixedIp.instance_id != None).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter(models.FixedIp.virtual_interface_id != None).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _network_get_query(context, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"read_deleted=""no"")",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def network_get_by_instance(context, instance_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def network_get_all_by_instance(context, instance_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# NOTE(vish): return networks that have host set,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
#             or that have a fixed ip with host set,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
models.FixedIp.host == host),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _network_get_query(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def queue_get_for(context, topic, physical_node_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.IscsiTarget).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def auth_token_create(context, token):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.count(models.Volume.id),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"func.sum(models.Volume.size),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _volume_get_query(context, session=None, project_only=False):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Volume, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
project_only=project_only).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('instance')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('volume_metadata')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('volume_type')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=volume_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _volume_get_query(context).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _volume_get_query(context).filter_by(host=host).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _volume_get_query(context).filter_by(project_id=project_id).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _volume_metadata_get_query(context, volume_id, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.VolumeMetadata,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(volume_id=volume_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
for row in rows:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_volume_metadata_get_query(context, volume_id).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=snapshot_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Snapshot).all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Snapshot).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _block_device_mapping_get_query(context, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.BlockDeviceMapping, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_block_device_mapping_get_query(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(instance_id=values['instance_id']).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(virtual_name=virtual_name).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter(models.BlockDeviceMapping.device_name !=,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
values['device_name']).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"update({'deleted': True,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"'deleted_at': utils.utcnow(),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
'updated_at': literal_column('updated_at')}),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _block_device_mapping_get_query(context).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(volume_id=volume_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _security_group_get_query(context, session=None, read_deleted=None,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
project_only=False):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SecurityGroup, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"read_deleted=read_deleted, project_only=project_only).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload_all('rules')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _security_group_get_query(context).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=security_group_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload_all('instances')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.SecurityGroupNotFoundForProject(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"project_id=project_id, security_group_id=group_name)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return _security_group_get_query(context, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _security_group_rule_get_query(context, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SecurityGroupIngressRule,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
session=session),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return _security_group_rule_get_query(context, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.ProviderFirewallRule).all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.ProviderFirewallRule).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def user_create(context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.User).all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def project_create(context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Project).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(status=status).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Migration, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"filter_by(status=""FINISHED"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.ConsolePoolNotFoundForHostType(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"host=host, console_type=console_type,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
compute_host=compute_host),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.ConsolePool, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# NOTE(mdragon): consoles are meant to be transient.,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.ConsoleNotFoundInPoolForInstance(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"pool_id=pool_id, instance_id=instance_id)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Console, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=console_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('pool')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
if instance_id is not None:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.ConsoleNotFoundForInstance(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"console_id=console_id, instance_id=instance_id)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
##################,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def instance_type_create(context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _instance_type_get_query(context, session=None, read_deleted=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.InstanceTypes, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
read_deleted=read_deleted).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('extra_specs')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _dict_with_extra_specs(result),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(flavorid=flavor_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(name=name),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# FIXME(sirp): this should update deleted_at and updated_at as well,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _zone_get_by_id_query(context, zone_id, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Zone, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=zone_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_zone_get_by_id_query(context, zone_id, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.Zone, read_deleted=""yes"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _instance_metadata_get_query(context, instance_id, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.InstanceMetadata, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(instance_id=instance_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_instance_metadata_get_query(context, instance_id).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"context, instance_id, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.AgentBuild, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.AgentBuild, read_deleted=""no"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"model_query(context, models.AgentBuild, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"session=session, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=agent_build_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.BandwidthUsage, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
if not session:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _instance_type_extra_specs_get_query(context, instance_type_id,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
session=None):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.InstanceTypeExtraSpecs,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(instance_type_id=instance_type_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"context, instance_type_id).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
_instance_type_extra_specs_get_query(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"context, instance_type_id, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.InstanceTypeExtraSpecsNotFound(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"extra_specs_key=key, instance_type_id=instance_type_id)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def volume_type_create(context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def volume_type_get_all(context, inactive=False, filters=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"# is repeated quite a bit, might be worth creating a method for it",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# FIXME(sirp): we should be setting deleted_at and updated_at here,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _volume_type_extra_specs_query(context, volume_type_id, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.VolumeTypeExtraSpecs, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(volume_type_id=volume_type_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_volume_type_extra_specs_query(context, volume_type_id).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"context, volume_type_id, session=session).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.VolumeTypeExtraSpecsNotFound(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"extra_specs_key=key, volume_type_id=volume_type_id)",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
####################,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _vsa_get_query(context, session=None, project_only=False):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.VirtualStorageArray, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
options(joinedload('vsa_instance_type')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=vsa_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _vsa_get_query(context).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
return _vsa_get_query(context).filter_by(project_id=project_id).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=image_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(uuid=image_uuid).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=sm_backend_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
raise exception.NotFound(,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_(""No backend config with id %(sm_backend_id)s"") % locals())",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"# FIXME(sirp): for consistency, shouldn't this just mark as deleted with",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# `purge` actually deleting the record?,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"model_query(context, models.SMBackendConf, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
# FIXME(sirp): shouldn't this have a `first()` qualifier attached?,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SMBackendConf, read_deleted=""yes"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(sr_uuid=sr_uuid),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _sm_flavor_get_query(context, sm_flavor_label, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SMFlavors, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(label=sm_flavor_label),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_sm_flavor_get_query(context, sm_flavor_label).delete()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def sm_flavor_get(context, sm_flavor_label):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_(""No sm_flavor called %(sm_flavor)s"") % locals())",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SMFlavors, read_deleted=""yes"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"def _sm_volume_get_query(context, volume_id, session=None):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SMVolume, session=session,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
filter_by(id=volume_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_sm_volume_get_query(context, volume_id, session=session).delete()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"_(""No sm_volume with id %(volume_id)s"") % locals())",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
"return model_query(context, models.SMVolume, read_deleted=""yes"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,0
def can_read_deleted(context):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"""""""Indicates if the context has access to deleted objects.""""""",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not context:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return False,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return context.read_deleted,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not session:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(deleted=can_read_deleted(context)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(deleted=can_read_deleted(context)),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Service).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(deleted=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(disabled=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(topic=topic).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('compute_node')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"return session.query(models.Service, func.coalesce(sort_value, 0)).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"outerjoin((subq, models.Service.host == subq.c.host)).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
order_by(sort_value).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
func.sum(models.Instance.vcpus).label(label)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
func.count(models.Network.id).label(label)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
func.sum(models.Volume.size).label(label)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.ComputeNode).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Certificate).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def certificate_get_all_by_user_and_project(_context, user_id, project_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if is_admin_context(context):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('fixed_ip')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('fixed_ip.instance')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
elif is_user_context(context):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(project_id=context.project_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.FloatingIp).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def fixed_ip_create(_context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def fixed_ip_bulk_create(_context, ips):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def fixed_ip_disassociate_all_by_timeout(_context, host, time):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not rv:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return rv,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('fixed_ips')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"func.sum(models.Instance.vcpus),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
func.sum(models.Instance.memory_mb)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(deleted=False),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return partial,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Instance).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def instance_get_all_by_user(context, user_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('instance_type')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(user_id=user_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('fixed_ips.floating_ips')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('security_groups')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('fixed_ips.network')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('metadata')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(deleted=read_deleted).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(project_id=project_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('instance_type')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return query.\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(instance_id=instance_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.KeyPair).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Network).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
count(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(network_id=network_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(allocated=True).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(allocated=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(reserved=False).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(reserved=True).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=network_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(deleted=False).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
models.Network.project_id == None),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter(models.Network.uuid.in_(network_uuids)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter(project_or_none).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('instance')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter(models.FixedIp.instance_id != None).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter(models.FixedIp.virtual_interface_id != None).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(bridge=bridge).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(uuid=uuid).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def network_get_by_instance(_context, instance_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def network_get_all_by_instance(_context, instance_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
with session.begin():,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
# NOTE(vish): return networks that have host set,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
#             or that have a fixed ip with host set,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
models.FixedIp.host == host),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def queue_get_for(_context, topic, physical_node_id):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.IscsiTarget).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if session is None:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not tk:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return tk,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def auth_token_create(_context, token):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
func.sum(models.Volume.size)).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('instance')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('volume_metadata')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('volume_type')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=volume_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Volume).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(volume_id=volume_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
for i in meta_results:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return meta_dict,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.VolumeMetadata).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not meta_result:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return meta_result,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=snapshot_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Snapshot).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.BlockDeviceMapping).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(instance_id=values['instance_id']).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(virtual_name=virtual_name).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter(models.BlockDeviceMapping.device_name !=,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
values['device_name']).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"update({'deleted': True,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"'deleted_at': utils.utcnow(),",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
'updated_at': literal_column('updated_at')}),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not result:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return [],2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.SecurityGroup).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('rules')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"filter_by(deleted=can_read_deleted(context),).\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=security_group_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('instances')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
else:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.SecurityGroupNotFoundForProject(project_id=project_id,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
security_group_id=group_name),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=security_group_rule_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
# TODO(vish): Join to group and check for project_id,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(parent_group_id=security_group_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload_all('grantee_group.instances')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(group_id=security_group_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.ProviderFirewallRule).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def user_create(_context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.User).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def project_create(_context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Project).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(status=status).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"filter_by(status=""FINISHED"").all()",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return results,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.ConsolePoolNotFoundForHostType(host=host,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"console_type=console_type,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
compute_host=compute_host),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.ConsolePool).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
# consoles are meant to be transient. (mdragon),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.ConsoleNotFoundInPoolForInstance(pool_id=pool_id,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
instance_id=instance_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('pool')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=console_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if instance_id:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.ConsoleNotFoundForInstance(console_id=console_id,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
##################,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def instance_type_create(_context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
.options(joinedload('extra_specs')),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not inactive:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('extra_specs')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not inst_type:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return _dict_with_extra_specs(inst_type),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(flavorid=flavor_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(name=name),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not zone:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
raise exception.ZoneNotFound(zone_id=zone_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.Zone).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=zone_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.Zone).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.InstanceMetadata).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.AgentBuild).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.AgentBuild).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=agent_build_id). \,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.BandwidthUsage).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(instance_type_id=instance_type_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
for i in spec_results:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return spec_dict,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.InstanceTypeExtraSpecs).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not spec_result:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
raise exception.\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"InstanceTypeExtraSpecsNotFound(extra_specs_key=key,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
instance_type_id=instance_type_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return spec_result,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def volume_type_create(_context, values):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def volume_type_get_all(context, inactive=False, filters={}):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if inactive:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"order_by(""name"").\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if vol_types:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
for i in vol_types:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return vol_dict,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not vol_type:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return _dict_with_extra_specs(vol_type),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(volume_type_id=volume_type_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.VolumeTypeExtraSpecs).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session=None):,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"VolumeTypeExtraSpecsNotFound(extra_specs_key=key,",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
volume_type_id=volume_type_id),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
####################,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
options(joinedload('vsa_instance_type')).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=vsa_id).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.VirtualStorageArray).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
.filter_by(id=image_id)\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
.first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not res:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return res,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
.filter_by(uuid=image_uuid)\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(id=sm_backend_id).first(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.NotFound(_(""No backend config with id ""\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"""%(sm_backend_id)s"") % locals())",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.SMBackendConf).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.SMBackendConf).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(label=sm_flavor_label),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not sm_flavor:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.NotFound(_(""No sm_flavor with id ""\",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"""%(sm_flavor_id)s"") % locals())",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.SMFlavors).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
filter_by(label=sm_flavor_label).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
delete(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"def sm_flavor_get(context, sm_flavor):",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.NotFound(_(""No sm_flavor called %(sm_flavor)s"") \",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
% locals()),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.SMFlavors).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
if not sm_volume:,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"raise exception.NotFound(_(""No sm_volume with id %(volume_id)s"") \",2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
session.query(models.SMVolume).\,2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
return session.query(models.SMVolume).all(),2714b2df0d21ecb08966c4d145d2d75fa1bb201d,0,1
"Column('id', Integer(), primary_key=True, nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,4,0
"Column('id', Integer(), primary_key=True, nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,4,1
"Column('service_id', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('vcpus', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('memory_mb', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('local_gb', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('vcpus_used', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('memory_mb_used', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('local_gb_used', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Text(convert_unicode=False, assert_unicode=None,",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"unicode_error=None, _warn_on_bytestring=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
"Column('hypervisor_version', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,0
# New Tables,1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('service_id', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('vcpus', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('memory_mb', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('local_gb', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('vcpus_used', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('memory_mb_used', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('local_gb_used', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Text(convert_unicode=False, assert_unicode=None,",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"unicode_error=None, _warn_on_bytestring=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
"Column('hypervisor_version', Integer(), nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
# Tables to alter,1caa7f189827b4721c2e9d3ddf753acd749d7916,2,1
meta = MetaData(),1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"instances = Table('instances', meta, autoload=True)",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"compute_nodes = Table('compute_nodes', meta,",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"Column('created_at', DateTime(timezone=False)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"Column('updated_at', DateTime(timezone=False)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"Column('deleted_at', DateTime(timezone=False)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
instances_launched_on = Column(,1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
meta.bind = migrate_engine,1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
"compute_nodes = Table('compute_nodes', meta, autoload=True)",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,0
meta = MetaData(),1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"instances = Table('instances', meta,",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
#,1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"compute_nodes = Table('compute_nodes', meta,",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"Column('created_at', DateTime(timezone=False)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"Column('updated_at', DateTime(timezone=False)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"Column('deleted_at', DateTime(timezone=False)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"nullable=False),",1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
instances_launched_on = Column(,1caa7f189827b4721c2e9d3ddf753acd749d7916,1,1
"Column('deleted', Boolean(create_constraint=True, name=None)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
"Column('hypervisor_type',",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
"Column('cpu_info',",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
),1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
"'launched_on',",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
nullable=True),1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
def downgrade(migrate_engine):,1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
compute_nodes.drop(),1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
instances.drop_column('launched_on'),1caa7f189827b4721c2e9d3ddf753acd749d7916,0,0
),1caa7f189827b4721c2e9d3ddf753acd749d7916,0,1
"Column('deleted', Boolean(create_constraint=True, name=None)),",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,1
"Column('hypervisor_type',",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,1
"Column('cpu_info',",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,1
"'launched_on',",1caa7f189827b4721c2e9d3ddf753acd749d7916,0,1
nullable=True),1caa7f189827b4721c2e9d3ddf753acd749d7916,0,1
"""""""Get the list of windows network adapters.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,0
"""""""Get the list of Linux network adapters.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,0
"""""""Get the adapter name based on the MAC address.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,0
"""""""Get Linux network adapter name.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,0
"""""""Set IP address for the windows VM.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,0
"""""""Set IP address for the Linux VM.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,0
"""""""Get the list of windows network adapters.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get the list of Linux network adapters.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get the adapter name based on the MAC address.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get Linux network adapter name.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Set IP address for the windows VM.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Set IP address for the Linux VM.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get the list of windows network adapters.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get the list of Linux network adapters.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get the adapter name based on the MAC address.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Get Linux network adapter name.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Set IP address for the windows VM.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
"""""""Set IP address for the Linux VM.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,4,1
if sys.platform == PLATFORM_WIN:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,0
elif sys.platform == PLATFORM_LINUX:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,0
"""""""Get Windows network adapter name.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,0
"logging.warn(_(""VMware Tools is not installed""))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,0
if pltfrm == PLATFORM_WIN:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,0
elif pltfrm == PLATFORM_LINUX:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,0
if sys.platform == PLATFORM_WIN:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
elif sys.platform == PLATFORM_LINUX:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
"""""""Get Windows network adapter name.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
"logging.warn(_(""VMware Tools is not installed""))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
if pltfrm == PLATFORM_WIN:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
elif pltfrm == PLATFORM_LINUX:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
if sys.platform == PLATFORM_WIN:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
elif sys.platform == PLATFORM_LINUX:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
"""""""Get Windows network adapter name.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
"logging.warn(_(""VMware Tools is not installed""))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
if pltfrm == PLATFORM_WIN:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
elif pltfrm == PLATFORM_LINUX:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,3,1
Guest tools for ESX to set up network in the guest.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,0
Each of the NIC will have record NIC_record in the form,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,0
"""""""Executes the command with the list of arguments specified.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,0
"""""""Set IPv4 network settings for RHEL distros.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,0
"""""""Set IPv4 network settings for Ubuntu.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,0
pltfrm = sys.platform,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,0
Guest tools for ESX to set up network in the guest.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
Each of the NIC will have record NIC_record in the form,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"""""""Executes the command with the list of arguments specified.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"""""""Set IPv4 network settings for RHEL distros.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"""""""Set IPv4 network settings for Ubuntu.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
pltfrm = sys.platform,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
Guest tools for ESX to set up network in the guest.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
Each of the NIC will have record NIC_record in the form,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"""""""Executes the command with the list of arguments specified.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"""""""Set IPv4 network settings for RHEL distros.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"""""""Set IPv4 network settings for Ubuntu.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
pltfrm = sys.platform,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,2,1
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
#    not use this file except in compliance with the License. You may obtain,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
#    a copy of the License at,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
#    License for the specific language governing permissions and limitations,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
#    under the License.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"Parse the machine_id to get MAC, IP, Netmask and Gateway fields per NIC.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"machine_id is of the form ('NIC_record#NIC_record#', '')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"if machine_id[1].strip() == ""1"":",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
if wbem_network_adapter.NetConnectionStatus == 2 or \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
wbem_network_adapter.NetConnectionStatus == 7:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
if arch == ARCH_32_BIT:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
elif arch == ARCH_64_BIT:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
if network_adapter['mac-address'] == mac_address.lower():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"logging.debug(_(""Executing command: '%s'"") % cmd)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
if adapter_name and not ip_address == current_ip_address:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
# Windows doesn't let you manually set the broadcast address,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
if(platform.dist()[0] == 'Ubuntu'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
elif (platform.dist()[0] == 'redhat'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
if __name__ == '__main__':,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"raise NotImplementedError(_(""Platform not implemented: '%s'"") % pltfrm)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,0
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    not use this file except in compliance with the License. You may obtain,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    a copy of the License at,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    License for the specific language governing permissions and limitations,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    under the License.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"Parse the machine_id to get MAC, IP, Netmask and Gateway fields per NIC.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"machine_id is of the form ('NIC_record#NIC_record#', '')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"if machine_id[1].strip() == ""1"":",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if wbem_network_adapter.NetConnectionStatus == 2 or \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
wbem_network_adapter.NetConnectionStatus == 7:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if arch == ARCH_32_BIT:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
elif arch == ARCH_64_BIT:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if network_adapter['mac-address'] == mac_address.lower():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"logging.debug(_(""Executing command: '%s'"") % cmd)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if adapter_name and not ip_address == current_ip_address:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
# Windows doesn't let you manually set the broadcast address,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if(platform.dist()[0] == 'Ubuntu'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
elif (platform.dist()[0] == 'redhat'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if __name__ == '__main__':,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"raise NotImplementedError(_(""Platform not implemented: '%s'"") % pltfrm)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"#    Licensed under the Apache License, Version 2.0 (the ""License""); you may",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    not use this file except in compliance with the License. You may obtain,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    a copy of the License at,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    License for the specific language governing permissions and limitations,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
#    under the License.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"Parse the machine_id to get MAC, IP, Netmask and Gateway fields per NIC.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"machine_id is of the form ('NIC_record#NIC_record#', '')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"if machine_id[1].strip() == ""1"":",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
for adapter in wbem_network_adapters:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if (adapter.NetConnectionStatus == 2 or,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
adapter.NetConnectionStatus == 7):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if arch == ARCH_32_BIT:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
elif arch == ARCH_64_BIT:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if network_adapter['mac-address'] == mac_address.lower():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"logging.debug(_(""Executing command: '%s'"") % cmd)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if adapter_name and not ip_address == current_ip_address:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
# Windows doesn't let you manually set the broadcast address,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if(platform.dist()[0] == 'Ubuntu'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
elif (platform.dist()[0] == 'redhat'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
if __name__ == '__main__':,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
"raise NotImplementedError(_(""Platform not implemented: '%s'"") % pltfrm)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,1,1
# vim: tabstop=4 shiftwidth=4 softtabstop=4,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"# Copyright (c) 2011 Citrix Systems, Inc.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
# Copyright 2011 OpenStack LLC.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
#,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
#         http://www.apache.org/licenses/LICENSE-2.0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"#    Unless required by applicable law or agreed to in writing, software",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
On Windows we require pyWin32 installed on Python.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import array,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import gettext,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import logging,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import os,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import platform,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import socket,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import struct,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import subprocess,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import sys,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import time,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"gettext.install('nova', unicode=1)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
PLATFORM_WIN = 'win32',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
PLATFORM_LINUX = 'linux2',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ARCH_32_BIT = '32bit',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ARCH_64_BIT = '64bit',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
NO_MACHINE_ID = 'No machine id',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
# Logging,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"FORMAT = ""%(asctime)s - %(levelname)s - %(message)s""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"LOG_DIR = os.path.join(os.environ.get('ALLUSERSPROFILE'), 'openstack')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
LOG_DIR = '/var/log/openstack',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
else:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
LOG_DIR = 'logs',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if not os.path.exists(LOG_DIR):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
os.mkdir(LOG_DIR),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"LOG_FILENAME = os.path.join(LOG_DIR, 'openstack-guest-tools.log')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.basicConfig(filename=LOG_FILENAME, format=FORMAT)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if sys.hexversion < 0x3000000:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_byte = ord    # 2.x chr to integer,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_byte = int    # 3.x byte to integer,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
class ProcessExecutionError:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"""""""Process Execution Error Class.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"def __init__(self, exit_code, stdout, stderr, cmd):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
self.exit_code = exit_code,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
self.stdout = stdout,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
self.stderr = stderr,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
self.cmd = cmd,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def __str__(self):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
return str(self.exit_code),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _bytes2int(bytes):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"""""""Convert bytes to int.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
intgr = 0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for byt in bytes:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
intgr = (intgr << 8) + _byte(byt),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
return intgr,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _parse_network_details(machine_id):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
'MAC;IP;Netmask;Gateway;Broadcast;DNS' where ';' is field separator.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
Each record is separated by '#' from next record.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.debug(_(""Received machine_id from vmtools : %s"") % machine_id[0])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_details = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
pass,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for machine_id_str in machine_id[0].split('#'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_info_list = machine_id_str.split(';'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if len(network_info_list) % 6 != 0:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
break,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
no_grps = len(network_info_list) / 6,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
i = 0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
while i < no_grps:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
k = i * 6,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_details.append((,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_info_list[k].strip().lower(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_info_list[k + 1].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_info_list[k + 2].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_info_list[k + 3].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_info_list[k + 4].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_info_list[k + 5].strip().split(',')))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
i += 1,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.debug(_(""NIC information from vmtools : %s"") % network_details)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
return network_details,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _get_windows_network_adapters():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import win32com.client,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
wbem_locator = win32com.client.Dispatch('WbemScripting.SWbemLocator'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"wbem_service = wbem_locator.ConnectServer('.', 'root\cimv2')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
wbem_network_adapters = wbem_service.InstancesOf('Win32_NetworkAdapter'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_adapters = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for wbem_network_adapter in wbem_network_adapters:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
adapter_name = wbem_network_adapter.NetConnectionID,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
mac_address = wbem_network_adapter.MacAddress.lower(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
wbem_network_adapter_config = \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
wbem_network_adapter.associators_(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'Win32_NetworkAdapterSetting',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
'Win32_NetworkAdapterConfiguration')[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ip_address = '',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
subnet_mask = '',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if wbem_network_adapter_config.IPEnabled:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ip_address = wbem_network_adapter_config.IPAddress[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
subnet_mask = wbem_network_adapter_config.IPSubnet[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
#wbem_network_adapter_config.DefaultIPGateway[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_adapters.append({'name': adapter_name,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'mac-address': mac_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'ip-address': ip_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
'subnet-mask': subnet_mask}),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
return network_adapters,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _get_linux_network_adapters():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
import fcntl,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
max_bytes = 8096,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
arch = platform.architecture()[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
offset1 = 32,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
offset2 = 32,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
offset1 = 16,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
offset2 = 40,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"raise OSError(_(""Unknown architecture: %s"") % arch)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"names = array.array('B', '\0' * max_bytes)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"outbytes = struct.unpack('iL', fcntl.ioctl(",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"sock.fileno(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"0x8912,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"struct.pack('iL', max_bytes, names.buffer_info()[0])))[0]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
adapter_names = \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"[names.tostring()[n_counter:n_counter + offset1].split('\0', 1)[0]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"for n_counter in xrange(0, outbytes, offset2)]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for adapter_name in adapter_names:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ip_address = socket.inet_ntoa(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"0x8915,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"struct.pack('256s', adapter_name))[20:24])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
subnet_mask = socket.inet_ntoa(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"0x891b,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
raw_mac_address = '%012x' % _bytes2int(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"0x8927,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"struct.pack('256s', adapter_name))[18:24])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"mac_address = "":"".join([raw_mac_address[m_counter:m_counter + 2]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"for m_counter in range(0, len(raw_mac_address), 2)]).lower()",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"def _get_adapter_name_and_ip_address(network_adapters, mac_address):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
adapter_name = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ip_address = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for network_adapter in network_adapters:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
adapter_name = network_adapter['name'],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
ip_address = network_adapter['ip-address'],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"return adapter_name, ip_address",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _get_win_adapter_name_and_ip_address(mac_address):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_adapters = _get_windows_network_adapters(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"return _get_adapter_name_and_ip_address(network_adapters, mac_address)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _get_linux_adapter_name_and_ip_address(mac_address):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_adapters = _get_linux_network_adapters(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"def _execute(cmd_list, process_input=None, check_exit_code=True):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
cmd = ' '.join(cmd_list),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
env = os.environ.copy(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"obj = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
result = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if process_input is not None:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
result = obj.communicate(process_input),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
result = obj.communicate(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
obj.stdin.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if obj.returncode:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.debug(_(""Result was %s"") % obj.returncode)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if check_exit_code and obj.returncode != 0:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"(stdout, stderr) = result",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"raise ProcessExecutionError(exit_code=obj.returncode,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"stdout=stdout,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"stderr=stderr,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
cmd=cmd),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
time.sleep(0.1),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
return result,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _windows_set_networking():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
program_files = os.environ.get('PROGRAMFILES'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
program_files_x86 = os.environ.get('PROGRAMFILES(X86)'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
vmware_tools_bin = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"if os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
'vmtoolsd.exe')):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"vmware_tools_bin = os.path.join(program_files, 'VMware',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'VMware Tools', 'vmtoolsd.exe')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"elif os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
'VMwareService.exe')):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'VMware Tools', 'VMwareService.exe')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"elif program_files_x86 and os.path.exists(os.path.join(program_files_x86,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"vmware_tools_bin = os.path.join(program_files_x86, 'VMware',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if vmware_tools_bin:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"cmd = ['""' + vmware_tools_bin + '""', '--cmd', 'machine.id.get']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"for network_detail in _parse_network_details(_execute(cmd,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
check_exit_code=False)):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"mac_address, ip_address, subnet_mask, gateway, broadcast,\",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
dns_servers = network_detail,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"adapter_name, current_ip_address = \",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_get_win_adapter_name_and_ip_address(mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"cmd = ['netsh', 'interface', 'ip', 'set', 'address',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'name=""%s""' % adapter_name, 'source=static', ip_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"subnet_mask, gateway, '1']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_execute(cmd),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for dns_server in dns_servers:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if dns_server:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"cmd = ['netsh', 'interface', 'ip', 'add', 'dns',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"'name=""%s""' % adapter_name, dns_server]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _filter_duplicates(all_entries):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
final_list = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for entry in all_entries:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if entry and entry not in final_list:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
final_list.append(entry),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
return final_list,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _set_rhel_networking(network_details=None):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
network_details = network_details or [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
all_dns_servers = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for network_detail in network_details:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
all_dns_servers.extend(dns_servers),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_get_linux_adapter_name_and_ip_address(mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file_name = \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
'/etc/sysconfig/network-scripts/ifcfg-%s' % adapter_name,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
# Remove file,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
os.remove(interface_file_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
# Touch file,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"_execute(['touch', interface_file_name])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"interface_file = open(interface_file_name, 'w')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nDEVICE=%s' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nUSERCTL=yes'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nONBOOT=yes'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nBOOTPROTO=static'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nBROADCAST=%s' % broadcast),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nNETWORK='),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nGATEWAY=%s' % gateway),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nNETMASK=%s' % subnet_mask),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nIPADDR=%s' % ip_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nMACADDR=%s' % mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if all_dns_servers:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"dns_file_name = ""/etc/resolv.conf""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
os.remove(dns_file_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"_execute(['touch', dns_file_name])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"dns_file = open(dns_file_name, 'w')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"dns_file.write(""; generated by OpenStack guest tools"")",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
unique_entries = _filter_duplicates(all_dns_servers),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
for dns_server in unique_entries:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"dns_file.write(""\nnameserver %s"" % dns_server)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
dns_file.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"_execute(['/sbin/service', 'network', 'restart'])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _set_ubuntu_networking(network_details=None):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file_name = '/etc/network/interfaces',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"for device, network_detail in enumerate(network_details):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if adapter_name:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nauto %s' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\niface %s inet static' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nbroadcast %s' % broadcast),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\ngateway %s' % gateway),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\nnetmask %s' % subnet_mask),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
interface_file.write('\naddress %s\n' % ip_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.debug(_(""Successfully configured NIC %d with """,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"""NIC info %s"") % (device, network_detail))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.debug(_(""Restarting networking....\n""))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"_execute(['/etc/init.d/networking', 'restart'])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
def _linux_set_networking():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
if os.path.exists('/usr/sbin/vmtoolsd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
vmware_tools_bin = '/usr/sbin/vmtoolsd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
elif os.path.exists('/usr/bin/vmtoolsd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
vmware_tools_bin = '/usr/bin/vmtoolsd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
elif os.path.exists('/usr/sbin/vmware-guestd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
vmware_tools_bin = '/usr/sbin/vmware-guestd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
elif os.path.exists('/usr/bin/vmware-guestd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
vmware_tools_bin = '/usr/bin/vmware-guestd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"cmd = [vmware_tools_bin, '--cmd', 'machine.id.get']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"network_details = _parse_network_details(_execute(cmd,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
check_exit_code=False)),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"# TODO(sateesh): For other distros like suse, debian, BSD, etc.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_set_ubuntu_networking(network_details),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_set_rhel_networking(network_details),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
"logging.warn(_(""Distro '%s' not supported"") % platform.dist()[0])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_windows_set_networking(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
_linux_set_networking(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,0
# vim: tabstop=4 shiftwidth=4 softtabstop=4,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"# Copyright (c) 2011 Citrix Systems, Inc.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Copyright 2011 OpenStack LLC.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
#,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
#         http://www.apache.org/licenses/LICENSE-2.0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"#    Unless required by applicable law or agreed to in writing, software",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
On Windows we require pyWin32 installed on Python.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import array,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import gettext,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import logging,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import os,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import platform,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import socket,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import struct,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import subprocess,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import sys,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import time,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"gettext.install('nova', unicode=1)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
PLATFORM_WIN = 'win32',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
PLATFORM_LINUX = 'linux2',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ARCH_32_BIT = '32bit',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ARCH_64_BIT = '64bit',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
NO_MACHINE_ID = 'No machine id',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Logging,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"FORMAT = ""%(asctime)s - %(levelname)s - %(message)s""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"LOG_DIR = os.path.join(os.environ.get('ALLUSERSPROFILE'), 'openstack')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
LOG_DIR = '/var/log/openstack',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
else:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
LOG_DIR = 'logs',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if not os.path.exists(LOG_DIR):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
os.mkdir(LOG_DIR),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"LOG_FILENAME = os.path.join(LOG_DIR, 'openstack-guest-tools.log')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.basicConfig(filename=LOG_FILENAME, format=FORMAT)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if sys.hexversion < 0x3000000:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_byte = ord    # 2.x chr to integer,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_byte = int    # 3.x byte to integer,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
class ProcessExecutionError:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""""""Process Execution Error Class.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"def __init__(self, exit_code, stdout, stderr, cmd):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.exit_code = exit_code,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.stdout = stdout,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.stderr = stderr,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.cmd = cmd,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def __str__(self):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return str(self.exit_code),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _bytes2int(bytes):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""""""Convert bytes to int.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
intgr = 0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for byt in bytes:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
intgr = (intgr << 8) + _byte(byt),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return intgr,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _parse_network_details(machine_id):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'MAC;IP;Netmask;Gateway;Broadcast;DNS' where ';' is field separator.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
Each record is separated by '#' from next record.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Received machine_id from vmtools : %s"") % machine_id[0])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_details = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
pass,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for machine_id_str in machine_id[0].split('#'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_info_list = machine_id_str.split(';'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if len(network_info_list) % 6 != 0:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
break,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
no_grps = len(network_info_list) / 6,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
i = 0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
while i < no_grps:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
k = i * 6,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_details.append((,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k].strip().lower(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 1].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 2].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 3].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 4].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 5].strip().split(',')))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
i += 1,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""NIC information from vmtools : %s"") % network_details)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return network_details,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_windows_network_adapters():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import win32com.client,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
wbem_locator = win32com.client.Dispatch('WbemScripting.SWbemLocator'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"wbem_service = wbem_locator.ConnectServer('.', 'root\cimv2')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
wbem_network_adapters = wbem_service.InstancesOf('Win32_NetworkAdapter'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_adapters = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for wbem_network_adapter in wbem_network_adapters:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name = wbem_network_adapter.NetConnectionID,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
mac_address = wbem_network_adapter.MacAddress.lower(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
wbem_network_adapter_config = \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
wbem_network_adapter.associators_(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'Win32_NetworkAdapterSetting',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'Win32_NetworkAdapterConfiguration')[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = '',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
subnet_mask = '',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if wbem_network_adapter_config.IPEnabled:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = wbem_network_adapter_config.IPAddress[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
subnet_mask = wbem_network_adapter_config.IPSubnet[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
#wbem_network_adapter_config.DefaultIPGateway[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_adapters.append({'name': adapter_name,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'mac-address': mac_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'ip-address': ip_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'subnet-mask': subnet_mask}),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return network_adapters,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_linux_network_adapters():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import fcntl,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
max_bytes = 8096,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
arch = platform.architecture()[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset1 = 32,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset2 = 32,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset1 = 16,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset2 = 40,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"raise OSError(_(""Unknown architecture: %s"") % arch)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"names = array.array('B', '\0' * max_bytes)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"outbytes = struct.unpack('iL', fcntl.ioctl(",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"sock.fileno(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x8912,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"struct.pack('iL', max_bytes, names.buffer_info()[0])))[0]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_names = \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"[names.tostring()[n_counter:n_counter + offset1].split('\0', 1)[0]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for n_counter in xrange(0, outbytes, offset2)]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for adapter_name in adapter_names:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = socket.inet_ntoa(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x8915,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"struct.pack('256s', adapter_name))[20:24])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
subnet_mask = socket.inet_ntoa(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x891b,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
raw_mac_address = '%012x' % _bytes2int(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x8927,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"struct.pack('256s', adapter_name))[18:24])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"mac_address = "":"".join([raw_mac_address[m_counter:m_counter + 2]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for m_counter in range(0, len(raw_mac_address), 2)]).lower()",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"def _get_adapter_name_and_ip_address(network_adapters, mac_address):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for network_adapter in network_adapters:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name = network_adapter['name'],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = network_adapter['ip-address'],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"return adapter_name, ip_address",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_win_adapter_name_and_ip_address(mac_address):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_adapters = _get_windows_network_adapters(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"return _get_adapter_name_and_ip_address(network_adapters, mac_address)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_linux_adapter_name_and_ip_address(mac_address):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_adapters = _get_linux_network_adapters(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"def _execute(cmd_list, process_input=None, check_exit_code=True):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
cmd = ' '.join(cmd_list),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
env = os.environ.copy(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"obj = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
result = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if process_input is not None:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
result = obj.communicate(process_input),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
result = obj.communicate(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
obj.stdin.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if obj.returncode:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Result was %s"") % obj.returncode)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if check_exit_code and obj.returncode != 0:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"(stdout, stderr) = result",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"raise ProcessExecutionError(exit_code=obj.returncode,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"stdout=stdout,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"stderr=stderr,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
cmd=cmd),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
time.sleep(0.1),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return result,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _windows_set_networking():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
program_files = os.environ.get('PROGRAMFILES'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
program_files_x86 = os.environ.get('PROGRAMFILES(X86)'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"if os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'vmtoolsd.exe')):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"vmware_tools_bin = os.path.join(program_files, 'VMware',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'VMware Tools', 'vmtoolsd.exe')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"elif os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'VMwareService.exe')):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'VMware Tools', 'VMwareService.exe')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"elif program_files_x86 and os.path.exists(os.path.join(program_files_x86,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"vmware_tools_bin = os.path.join(program_files_x86, 'VMware',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if vmware_tools_bin:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = ['""' + vmware_tools_bin + '""', '--cmd', 'machine.id.get']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for network_detail in _parse_network_details(_execute(cmd,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
check_exit_code=False)):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"mac_address, ip_address, subnet_mask, gateway, broadcast,\",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
dns_servers = network_detail,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"adapter_name, current_ip_address = \",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_get_win_adapter_name_and_ip_address(mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = ['netsh', 'interface', 'ip', 'set', 'address',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'name=""%s""' % adapter_name, 'source=static', ip_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"subnet_mask, gateway, '1']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_execute(cmd),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for dns_server in dns_servers:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if dns_server:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = ['netsh', 'interface', 'ip', 'add', 'dns',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'name=""%s""' % adapter_name, dns_server]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _filter_duplicates(all_entries):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
final_list = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for entry in all_entries:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if entry and entry not in final_list:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
final_list.append(entry),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return final_list,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _set_rhel_networking(network_details=None):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_details = network_details or [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
all_dns_servers = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for network_detail in network_details:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
all_dns_servers.extend(dns_servers),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_get_linux_adapter_name_and_ip_address(mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file_name = \,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'/etc/sysconfig/network-scripts/ifcfg-%s' % adapter_name,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Remove file,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
os.remove(interface_file_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Touch file,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['touch', interface_file_name])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"interface_file = open(interface_file_name, 'w')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nDEVICE=%s' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nUSERCTL=yes'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nONBOOT=yes'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nBOOTPROTO=static'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nBROADCAST=%s' % broadcast),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nNETWORK='),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nGATEWAY=%s' % gateway),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nNETMASK=%s' % subnet_mask),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nIPADDR=%s' % ip_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nMACADDR=%s' % mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if all_dns_servers:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file_name = ""/etc/resolv.conf""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
os.remove(dns_file_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['touch', dns_file_name])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file = open(dns_file_name, 'w')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file.write(""; generated by OpenStack guest tools"")",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
unique_entries = _filter_duplicates(all_dns_servers),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for dns_server in unique_entries:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file.write(""\nnameserver %s"" % dns_server)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
dns_file.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['/sbin/service', 'network', 'restart'])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _set_ubuntu_networking(network_details=None):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file_name = '/etc/network/interfaces',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for device, network_detail in enumerate(network_details):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if adapter_name:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nauto %s' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\niface %s inet static' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nbroadcast %s' % broadcast),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\ngateway %s' % gateway),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nnetmask %s' % subnet_mask),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\naddress %s\n' % ip_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Successfully configured NIC %d with """,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""NIC info %s"") % (device, network_detail))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Restarting networking....\n""))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['/etc/init.d/networking', 'restart'])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _linux_set_networking():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if os.path.exists('/usr/sbin/vmtoolsd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/sbin/vmtoolsd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
elif os.path.exists('/usr/bin/vmtoolsd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/bin/vmtoolsd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
elif os.path.exists('/usr/sbin/vmware-guestd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/sbin/vmware-guestd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
elif os.path.exists('/usr/bin/vmware-guestd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/bin/vmware-guestd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = [vmware_tools_bin, '--cmd', 'machine.id.get']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_details = _parse_network_details(_execute(cmd,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
check_exit_code=False)),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"# TODO(sateesh): For other distros like suse, debian, BSD, etc.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_set_ubuntu_networking(network_details),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_set_rhel_networking(network_details),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.warn(_(""Distro '%s' not supported"") % platform.dist()[0])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_windows_set_networking(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_linux_set_networking(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"# Copyright (c) 2011 Citrix Systems, Inc.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Copyright 2011 OpenStack Foundation,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
#,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
#         http://www.apache.org/licenses/LICENSE-2.0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"#    Unless required by applicable law or agreed to in writing, software",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
On Windows we require pyWin32 installed on Python.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import array,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import logging,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import os,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import platform,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import socket,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import struct,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import subprocess,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import sys,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import time,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
from nova.i18n import _,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
PLATFORM_WIN = 'win32',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
PLATFORM_LINUX = 'linux2',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ARCH_32_BIT = '32bit',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ARCH_64_BIT = '64bit',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
NO_MACHINE_ID = 'No machine id',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Logging,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"FORMAT = ""%(asctime)s - %(levelname)s - %(message)s""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"LOG_DIR = os.path.join(os.environ.get('ALLUSERSPROFILE'), 'openstack')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
LOG_DIR = '/var/log/openstack',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
else:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
LOG_DIR = 'logs',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if not os.path.exists(LOG_DIR):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
os.mkdir(LOG_DIR),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"LOG_FILENAME = os.path.join(LOG_DIR, 'openstack-guest-tools.log')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.basicConfig(filename=LOG_FILENAME, format=FORMAT)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if sys.hexversion < 0x3000000:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_byte = ord    # 2.x chr to integer,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_byte = int    # 3.x byte to integer,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
class ProcessExecutionError:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""""""Process Execution Error Class.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"def __init__(self, exit_code, stdout, stderr, cmd):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.exit_code = exit_code,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.stdout = stdout,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.stderr = stderr,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
self.cmd = cmd,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def __str__(self):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return str(self.exit_code),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _bytes2int(bytes):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""""""Convert bytes to int.""""""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
intgr = 0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for byt in bytes:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
intgr = (intgr << 8) + _byte(byt),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return intgr,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _parse_network_details(machine_id):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'MAC;IP;Netmask;Gateway;Broadcast;DNS' where ';' is field separator.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
Each record is separated by '#' from next record.,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Received machine_id from vmtools : %s"") % machine_id[0])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_details = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
pass,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for machine_id_str in machine_id[0].split('#'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_info_list = machine_id_str.split(';'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if len(network_info_list) % 6 != 0:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
break,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
no_grps = len(network_info_list) / 6,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
i = 0,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
while i < no_grps:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
k = i * 6,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_details.append((,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k].strip().lower(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 1].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 2].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 3].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 4].strip(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_info_list[k + 5].strip().split(',')))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
i += 1,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""NIC information from vmtools : %s"") % network_details)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return network_details,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_windows_network_adapters():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import win32com.client,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
wbem_locator = win32com.client.Dispatch('WbemScripting.SWbemLocator'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"wbem_service = wbem_locator.ConnectServer('.', 'root\cimv2')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
wbem_network_adapters = wbem_service.InstancesOf('Win32_NetworkAdapter'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_adapters = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name = adapter.NetConnectionID,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
mac_address = adapter.MacAddress.lower(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
config = adapter.associators_(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'Win32_NetworkAdapterSetting',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'Win32_NetworkAdapterConfiguration')[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = '',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
subnet_mask = '',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if config.IPEnabled:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = config.IPAddress[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
subnet_mask = config.IPSubnet[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
#config.DefaultIPGateway[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_adapters.append({'name': adapter_name,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'mac-address': mac_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'ip-address': ip_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'subnet-mask': subnet_mask}),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return network_adapters,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_linux_network_adapters():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
import fcntl,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
max_bytes = 8096,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
arch = platform.architecture()[0],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset1 = 32,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset2 = 32,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset1 = 16,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
offset2 = 40,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"raise OSError(_(""Unknown architecture: %s"") % arch)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"names = array.array('B', '\0' * max_bytes)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"outbytes = struct.unpack('iL', fcntl.ioctl(",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"sock.fileno(),",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x8912,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"struct.pack('iL', max_bytes, names.buffer_info()[0])))[0]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"adapter_names = [names.tostring()[n_cnt:n_cnt + offset1].split('\0', 1)[0]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for n_cnt in xrange(0, outbytes, offset2)]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for adapter_name in adapter_names:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = socket.inet_ntoa(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x8915,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"struct.pack('256s', adapter_name))[20:24])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
subnet_mask = socket.inet_ntoa(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x891b,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
raw_mac_address = '%012x' % _bytes2int(fcntl.ioctl(,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"0x8927,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"struct.pack('256s', adapter_name))[18:24])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"mac_address = "":"".join([raw_mac_address[m_counter:m_counter + 2]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for m_counter in range(0, len(raw_mac_address), 2)]).lower()",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"def _get_adapter_name_and_ip_address(network_adapters, mac_address):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for network_adapter in network_adapters:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name = network_adapter['name'],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
ip_address = network_adapter['ip-address'],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"return adapter_name, ip_address",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_win_adapter_name_and_ip_address(mac_address):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_adapters = _get_windows_network_adapters(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"return _get_adapter_name_and_ip_address(network_adapters, mac_address)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _get_linux_adapter_name_and_ip_address(mac_address):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_adapters = _get_linux_network_adapters(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"def _execute(cmd_list, process_input=None, check_exit_code=True):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
cmd = ' '.join(cmd_list),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
env = os.environ.copy(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"obj = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
result = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if process_input is not None:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
result = obj.communicate(process_input),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
result = obj.communicate(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
obj.stdin.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if obj.returncode:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Result was %s"") % obj.returncode)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if check_exit_code and obj.returncode != 0:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"(stdout, stderr) = result",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"raise ProcessExecutionError(exit_code=obj.returncode,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"stdout=stdout,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"stderr=stderr,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
cmd=cmd),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
time.sleep(0.1),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return result,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _windows_set_networking():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
program_files = os.environ.get('PROGRAMFILES'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
program_files_x86 = os.environ.get('PROGRAMFILES(X86)'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = None,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"if os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'vmtoolsd.exe')):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"vmware_tools_bin = os.path.join(program_files, 'VMware',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'VMware Tools', 'vmtoolsd.exe')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"elif os.path.exists(os.path.join(program_files, 'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'VMwareService.exe')):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'VMware Tools', 'VMwareService.exe')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"elif program_files_x86 and os.path.exists(os.path.join(program_files_x86,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'VMware', 'VMware Tools',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"vmware_tools_bin = os.path.join(program_files_x86, 'VMware',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if vmware_tools_bin:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = ['""' + vmware_tools_bin + '""', '--cmd', 'machine.id.get']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for network_detail in _parse_network_details(_execute(cmd,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
check_exit_code=False)):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"(mac_address, ip_address, subnet_mask, gateway, broadcast,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
dns_servers) = network_detail,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
name_and_ip = _get_win_adapter_name_and_ip_address(mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"adapter_name, current_ip_address = name_and_ip",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = ['netsh', 'interface', 'ip', 'set', 'address',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'name=""%s""' % adapter_name, 'source=static', ip_address,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"subnet_mask, gateway, '1']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_execute(cmd),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for dns_server in dns_servers:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if dns_server:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = ['netsh', 'interface', 'ip', 'add', 'dns',",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"'name=""%s""' % adapter_name, dns_server]",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _filter_duplicates(all_entries):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
final_list = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for entry in all_entries:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if entry and entry not in final_list:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
final_list.append(entry),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
return final_list,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _set_rhel_networking(network_details=None):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
network_details = network_details or [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
all_dns_servers = [],ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for network_detail in network_details:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
all_dns_servers.extend(dns_servers),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
name_and_ip = _get_linux_adapter_name_and_ip_address(mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file_name = ('/etc/sysconfig/network-scripts/ifcfg-%s' %,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Remove file,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
os.remove(interface_file_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
# Touch file,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['touch', interface_file_name])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"interface_file = open(interface_file_name, 'w')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nDEVICE=%s' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nUSERCTL=yes'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nONBOOT=yes'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nBOOTPROTO=static'),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nBROADCAST=%s' % broadcast),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nNETWORK='),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nGATEWAY=%s' % gateway),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nNETMASK=%s' % subnet_mask),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nIPADDR=%s' % ip_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nMACADDR=%s' % mac_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if all_dns_servers:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file_name = ""/etc/resolv.conf""",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
os.remove(dns_file_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['touch', dns_file_name])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file = open(dns_file_name, 'w')",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file.write(""; generated by OpenStack guest tools"")",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
unique_entries = _filter_duplicates(all_dns_servers),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
for dns_server in unique_entries:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"dns_file.write(""\nnameserver %s"" % dns_server)",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
dns_file.close(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['/sbin/service', 'network', 'restart'])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _set_ubuntu_networking(network_details=None):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file_name = '/etc/network/interfaces',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"for device, network_detail in enumerate(network_details):",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if adapter_name:,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nauto %s' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\niface %s inet static' % adapter_name),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nbroadcast %s' % broadcast),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\ngateway %s' % gateway),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\nnetmask %s' % subnet_mask),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
interface_file.write('\naddress %s\n' % ip_address),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Successfully configured NIC %(device)d with """,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"""NIC info %(detail)s""), {'device': device,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
'detail': network_detail}),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.debug(_(""Restarting networking....\n""))",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"_execute(['/etc/init.d/networking', 'restart'])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
def _linux_set_networking():,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
if os.path.exists('/usr/sbin/vmtoolsd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/sbin/vmtoolsd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
elif os.path.exists('/usr/bin/vmtoolsd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/bin/vmtoolsd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
elif os.path.exists('/usr/sbin/vmware-guestd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/sbin/vmware-guestd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
elif os.path.exists('/usr/bin/vmware-guestd'):,ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
vmware_tools_bin = '/usr/bin/vmware-guestd',ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"cmd = [vmware_tools_bin, '--cmd', 'machine.id.get']",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"network_details = _parse_network_details(_execute(cmd,",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
check_exit_code=False)),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"# TODO(sateesh): For other distros like suse, debian, BSD, etc.",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_set_ubuntu_networking(network_details),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_set_rhel_networking(network_details),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
"logging.warn(_(""Distro '%s' not supported"") % platform.dist()[0])",ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_windows_set_networking(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
_linux_set_networking(),ba08f5f97a660b2b8f5b623c447e23d608a0d46d,0,1
2.1. Create a dummy vmdk of the size of the disk file that is to be,f952992f035ec130b7608e9851ef9c3becc2047a,9,0
2. Create a dummy vmdk of the size of the disk file that is to be,f952992f035ec130b7608e9851ef9c3becc2047a,9,1
# Get the recommended card type for the VM based on the guest OS of the VM,f952992f035ec130b7608e9851ef9c3becc2047a,9,1
# Naming the VM files in correspondence with the VM instance,f952992f035ec130b7608e9851ef9c3becc2047a,8,0
# Naming the VM files in correspondence with the VM instance name,f952992f035ec130b7608e9851ef9c3becc2047a,8,1
# We are ignoring the chunk size passed for we want the pipe to hold,f952992f035ec130b7608e9851ef9c3becc2047a,8,1
"LOG.debug(_(""Downloaded image file data %(image_ref)s to the ESX """,f952992f035ec130b7608e9851ef9c3becc2047a,7,1
# This class is a *fake* of a class sent back to us by,f952992f035ec130b7608e9851ef9c3becc2047a,7,0
# Login and setup the session with the ESX host for making,f952992f035ec130b7608e9851ef9c3becc2047a,7,1
# it when the data disk it refers to still lingers.,f952992f035ec130b7608e9851ef9c3becc2047a,7,0
:vmwareapi_host_username:   Username for connection to VMware ESX Server.,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
:vmwareapi_host_password:   Password for connection to VMware ESX Server.,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
"Transfers the disk of a running instance in multiple phases, turning",f952992f035ec130b7608e9851ef9c3becc2047a,6,0
:vmwareapi_host_username:  Username for connection to VMware ESX Server.,f952992f035ec130b7608e9851ef9c3becc2047a,6,1
:vmwareapi_host_password:  Password for connection to VMware ESX Server.,f952992f035ec130b7608e9851ef9c3becc2047a,6,1
3.1. Upload the disk file to a -sparse.vmdk file.,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
4. Attach the disk to the VM by reconfiguring the same.,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
"# Set the vnc configuration of the instance, vnc port starts from 5900",f952992f035ec130b7608e9851ef9c3becc2047a,6,0
"""the ESX host local store %(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,6,0
"# depend on the size of the disk, thin/thick provisioning and the",f952992f035ec130b7608e9851ef9c3becc2047a,6,0
# better approximation would use the percentage of the VM image that,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
"Transfers the disk of a running instance in multiple phases, turning",f952992f035ec130b7608e9851ef9c3becc2047a,6,0
5. Attach the disk to the VM by reconfiguring the same.,f952992f035ec130b7608e9851ef9c3becc2047a,6,1
""" KB on the ESX host local store """,f952992f035ec130b7608e9851ef9c3becc2047a,6,1
"# in a real ManagedObject, the propSet is a *set* not a list",f952992f035ec130b7608e9851ef9c3becc2047a,6,0
# data objects of the type in the inventory,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
# Login and setup the session with the host for making,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
# We fake the datastore by keeping the file references as a list of,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
# We fake the datastore by keeping the file references as a list of,f952992f035ec130b7608e9851ef9c3becc2047a,6,1
"""""""Fakes the file size and properties fetch for the image file.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,6,1
# Determine if we need to get the details of the root disk,f952992f035ec130b7608e9851ef9c3becc2047a,6,0
"""""""Return a Deferred that will give the result of the given task.",f952992f035ec130b7608e9851ef9c3becc2047a,6,1
"""%(adapter_type)s on the ESX host local store """,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Downloaded image file data %(image_ref)s to """,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# Copy a sparse virtual disk to a thin virtual disk. This is also,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# The sparse vmdk file name for sparse disk image,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# Copy the sparse virtual disk to a thin virtual disk.,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# Attach the root disk to the VM.,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# the clone disk step begins to dominate the equation. A,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Renaming the VM to %s"") % name_label,",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Renamed the VM to %s"") % name_label,",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Cloning VM to host %s"") % dest, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Cloned VM to host %s"") % dest, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Renaming the VM from %s"") % name_label,",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Renamed the VM from %s"") % name_label,",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Migrating VM to host %s"") % dest, instance=instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Migrated VM to host %s"") % dest, instance=instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"""""""Get reference to the host with the name specified.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# There is only one default datacenter in a standalone ESX host,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# There is only one default datacenter in a standalone ESX host,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
# Upload the -flat.vmdk file whose meta-data file we just created,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"LOG.debug(_(""Reconfiguring VM instance to attach the image disk""),",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"LOG.debug(_(""Reconfigured VM instance to attach the image disk""),",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"""""""Get reference to the VM with the name specified.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
# A managed object is a local representation of a,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# in a real ManagedObject you have to iterate the propSet,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# Method to update summary of a cluster upon host addition,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
# A managed object is a local representation of a,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
# dataobjects of the type in the inventory,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
Sets up a session with the ESX host and handles all,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"# The data file is the one occupying space, and likelier to see",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
disk to adapter with the given adapter_type.,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"# The controller Key pertains to the Key of the LSI Logic Controller, which",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
# Case of Reconfig of VM to set extra params,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"LOG.debug(""Deleting contents of the VM from """,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(""Deleted contents of the VM from """,f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"LOG.debug(_(""Deleting contents of the VM from """,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"LOG.debug(_(""Deleted contents of the VM from """,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"LOG.debug(_(""Migrating VM to host %s"") % dest, instance=instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"LOG.debug(_(""Migrated VM to host %s"") % dest, instance=instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"""""""Get size of the file to be read.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
# data items of the chunk-size that Glance Client uses for read,f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"""""""Returns information for the primary VMDK attached to the given VM.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,5,0
"""""""Returns information for the primary VMDK attached to the given VM.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"""""""Sets up a session with the VC/ESX host and handles all",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
"""""""Check if the module is a VIM Object instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,5,1
'Due to a bug in vSphere ESX 4.1 default wsdl. ',f952992f035ec130b7608e9851ef9c3becc2047a,4,0
'Due to a bug in vSphere ESX 4.1 default wsdl. ',f952992f035ec130b7608e9851ef9c3becc2047a,4,1
:vmwareapi_host_ip:         IP address of VMware ESX server.,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
:vmwareapi_host_ip:        IPAddress of VMware ESX server.,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
2.2. Delete the -flat.vmdk file created in the above step and retain,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
3.2. Copy/Clone the -sparse.vmdk file to a thin vmdk.,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(_(""Deleted the file %(vmdk_path)s on the """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"# For flat disk, upload the -flat.vmdk file whose meta-data file",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"# For sparse disk, upload the -sparse.vmdk file to be copied into",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"""%(upload_vmdk_name)s on the ESX data store """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"""""""Copy a sparse virtual disk to a thin virtual disk.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# done to generate the meta-data file whose specifics,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(_(""Copying Virtual Disk of size """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# Create a flat virtual disk and retain the metadata file.,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# Attach the vmdk uploaded to the VM.,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
""" while destroying the VM: %s"") % str(excep),",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# Attach vmdk to the rescue VM,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"# For a first cut this should be fine, however, for large VM images,",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# 2. Rename the original VM with suffix '-orig',f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# 3. Clone VM on ESX host,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# The original vm was suffixed with '-orig'; find it using,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"# the old suffix, remove the suffix, then power it back on.",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(_(""Reconfiguring VM instance to enable vnc on """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(_(""Reconfigured VM instance to enable vnc on """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# Wait till the state changes from queued or running.,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
3. Delete the -flat.vmdk file created in the above step and retain,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
for prop in elem.propSet:,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""%(adapter_type)s on the ESX host local store""",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
# Delete the -flat.vmdk file created. .vmdk file is retained.,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Deleted the file %(flat_uploaded_vmdk_path)s on the """,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
Attach the vmdk uploaded to the VM. VM reconfigure is done,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
# attributes hold the name of the type,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# of the vCenter object the value,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# for us by the API we are *faking* here.,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# need to use since this is the name that the,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# TODO(hartsocks): this is adds unnecessary complexity to the class,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# Create a temp Managed object which has the same ref,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
# asked for. We need .obj along with the propSet of,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
Sets up a session with the VC/ESX host and handles all,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"""""""Creates a session with the ESX host.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Gets the specified properties of the Managed Object.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"return lambda *args, **kwargs: self._delete_disk(attr_name,",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Deleting the datastore file %s"") % datastore_path,",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(_(""Deleted the file %(vmdk_path)s on the """,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""ESX host local store %(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
# Logout to avoid un-necessary increase in session count at the,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
# It is just cautionary on our part to do a logout in del just,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"# and after creating a new session, we get the same empty",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"# response, then we are sure of the response being supposed",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
# create new controller with the specified type and return its spec,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"# For IDE devices, there are these two default controllers created in the",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Lists the VM instances that are registered with vCenter cluster.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
extraConf = [x for x in existing if x.key == c.key][0],f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"""""""Creates and registers a VM object with the Host System.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
# Impose the config changes specified in the config property,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"help='Port for connection to VMware ESX/VC host.'),",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
port    : port for connection,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(""Reconfiguring VM instance %(instance_name)s to attach """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(""Reconfigured VM instance %(instance_name)s to attach """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(""Reconfiguring VM instance to set the machine id"",",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(""Reconfigured VM instance to set the machine id"",",f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(""Reconfiguring VM instance to enable vnc on """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(""Reconfigured VM instance to enable vnc on """,f952992f035ec130b7608e9851ef9c3becc2047a,4,0
"LOG.debug(_(""Reconfiguring VM instance %(instance_name)s to attach """,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Reconfigured VM instance %(instance_name)s to attach """,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Reconfiguring VM instance to set the machine id""),",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Reconfigured VM instance to set the machine id""),",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Reconfiguring VM instance to enable vnc on """,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"LOG.debug(_(""Reconfigured VM instance to enable vnc on """,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
The chunk size is ignored for the Client ImageBodyIterator,f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Get the next item from the image iterator.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Set the end of file marker.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Check if the end of file has been reached.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Read a chunk of data.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"""""""Calls a method within the module specified with",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"return self.invoke_api(module, method, self.vim, *args, **kwargs)",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
"return self.invoke_api(module, method, *args, **kwargs)",f952992f035ec130b7608e9851ef9c3becc2047a,4,1
off the instance before the end.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Live migration of an instance to another host.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
2.3. Upload the disk file.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Creating VM on the ESX host""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Created VM on the ESX host""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Deleting the file %(vmdk_path)s """,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""%(data_store_name)s to disk type %(disk_type)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Copied Virtual Disk of size %(vmdk_file_size_in_kb)s""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"1. Power off the VM, if it is in poweredOn state.",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
- spawn a rescue VM (the vm name-label will be instance-N-rescue).,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"# Divide the action's workflow into discrete steps and ""bump"" the",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# has been streamed to the destination host.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
off the instance before the end.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# 0. Zero out the progress to begin,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# 1. Power off the instance,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Get the clone vm spec,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""exception while destroying the VM: %s"") % str(excep))",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
for instance in instances:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Return connection info for a vnc console.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
port = CONF.vnc_port + vm_id % CONF.vnc_port_total,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
Set the vnc configuration of the VM.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
for host in host_objs:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Get the Vm folder ref from the datacenter.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Get the resource pool. Taking the first resource pool coming our,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Check if the path and file exists on the datastore.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"# If an error state is returned, it means that the path doesn't exist.",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Check if the file exists or not.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
4. Upload the disk file.,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Get the datastore list and choose the first local storage.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"elif prop.name == ""summary.name"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"msg = _(""Couldn't get a local Datastore reference"")",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Get the Vm folder ref from the datacenter.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# Get the resource pool. Taking the first resource pool coming our,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Creating VM on the ESX  host""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Created VM on the ESX  host""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"uploaded_vmdk_name = ""%s/%s.vmdk"" % (instance.name, instance.name)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
""" %(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Deleting the file %(flat_uploaded_vmdk_path)s """,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
for vm in vms:,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# Managed Object Reference value attributes,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Managed Object Reference _type,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# attribute is the identifier for,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# propSet is the name your Python code will need to,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# use since this is the name that the API will use,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# API we are talking to will use.,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"wsdl_url = '%s://%s/sdk/vimService.wsdl' % (protocol, host_name)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Wraps the given array into a DataObject.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Managed Object Reference type,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Generates a new Managed Object ID.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Update summary every time a new host is added,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# Managed Object Reference _type,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# as the parent object and copies just the properties,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# just the properties asked for,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
for prop in properties:,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Creates a session with the VC/ESX host.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.critical(_(""Unable to connect to server at %(server)s, """,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"# May not have been able to connect to VC, so vim is still None",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Return the adapter type to be used in vmdk descriptor.",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
for prop in dynamic_properties:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Get the About Info from the service content.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"elif attr_name == ""DeleteVirtualDisk_Task"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"# unlikely event that its deletion fails, the small descriptor file",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# is retained too by design since it makes little sense to remove,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Deleting the file %(vmdk_path)s """,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""on the ESX host local""",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# names in the db,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# names in the db,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# ESX host,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"# May not have been able to connect to VC, so vim is still None",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# to ensure that the session is not left active.,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
# way to differentiate. We thus check if the session is,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
# For exceptions with connections we create the session,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
return device.__class__.__name__ == 'VirtualIDEController',f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"return device.__class__.__name__ in ['VirtualLsiLogicController',",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
ide_keys = [dev.key for dev in devices if _is_ide_controller(dev)],f952992f035ec130b7608e9851ef9c3becc2047a,3,0
scsi_keys = [dev.key for dev in devices if _is_scsi_controller(dev)],f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""""""Wraps the given array into a DataObject.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
for vm in retrieve_result.objects:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
for prop in vm.propSet:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"elif prop.name == ""runtime.connectionState"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
for vm in vms.objects:,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
for prop in vm.propSet:,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"elif prop.name == ""runtime.connectionState"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Imposes the changes in extraConfig over the existing extraConfig.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
if len([x for x in existing if x.key == c.key]) > 0:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"task_mdo = create_task(method, ""success"")",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
:param port: port for connection,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
host    : ESX IPAddress[:port] or ESX Hostname[:port],f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""the ESX host"") % pg_name)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(""Exception during HTTP connection close in """,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Exception during HTTP connection close in """,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(""Copying VHD image %(base_vhd_path)s to target: """,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"""one process or thread that tries to delete the file. """,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Copying root disk of size %sGb"", root_gb)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Creating Snapshot of the VM instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Created Snapshot of the VM instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Deleting Snapshot of the VM instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Deleted Snapshot of the VM instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Migrating VM to host %s"", dest, instance=instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(""Migrated VM to host %s"", dest, instance=instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug('Waiting for instance state to become running',",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"LOG.debug(_(""Copying VHD image %(base_vhd_path)s to target: """,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""one process or thread that tries to delete the file. """,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Copying root disk of size %sGb""), root_gb)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Creating Snapshot of the VM instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Created Snapshot of the VM instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Deleting Snapshot of the VM instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Deleted Snapshot of the VM instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Uploading image %s"") % image_id,",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_(""Uploaded image %s"") % image_id,",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(_('Waiting for instance state to become running'),",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Read an item from the queue.",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
for data in self.glance_read_iter:,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Close the file handle.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"""""""Write data to the file.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"LOG.debug(""Exception during HTTP connection close in """,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
elif device.__class__.__name__ in CONTROLLER_TO_ADAPTER_TYPE:,f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"elif device.__class__.__name__ == ""VirtualLsiLogicController"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"elif device.__class__.__name__ == ""VirtualBusLogicController"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"elif device.__class__.__name__ == ""VirtualIDEController"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"elif device.__class__.__name__ == ""VirtualLsiLogicSASController"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"elif device.__class__.__name__ == ""ParaVirtualSCSIController"":",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
the calls made to the host.,f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"def _call_method(self, module, method, *args, **kwargs):",f952992f035ec130b7608e9851ef9c3becc2047a,3,1
"# We can't just dump the managed-object, because it may be circular",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"for i, host in enumerate(get_object_refs(""HostSystem"")):",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
"for vm in get_objects(""VirtualMachine""):",f952992f035ec130b7608e9851ef9c3becc2047a,3,0
'Refer readme-vmware to setup'),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
'Refer readme-vmware to setup'),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
network_spec = client_factory.create('ns0:VirtualDeviceConfigSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
connectable_spec = client_factory.create('ns0:VirtualDeviceConnectInfo'),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
connectable_spec = \,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"if device.__class__.__name__ == ""VirtualDisk"" and \",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
help='The VMWare VIF driver to configure the VIFs.'),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""%(old_gb)dGB to %(new_gb)dGB"") % locals())",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"path = ""/console?ref=%s&session_id=%s"" % (str(vm_ref), session_id)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_('Creating VIF for VM %(vm_ref)s,'",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
help='The VMWare VIF driver to configure the VIFs.'),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"interface_str = ""%s;%s;%s;%s;%s;%s"" % \",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""%(old_gb)dGB to %(new_gb)dGB"") % locals())",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_('Creating VIF for VM %(vm_ref)s,' \",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
:vmwareapi_task_poll_interval: The interval (seconds) used for polling of,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
:vmwareapi_api_retry_count: The API retry count in case of failure such as,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
:vnc_port:                  VNC starting port (default: 5900),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
:vnc_port_total:            Total number of VNC ports (default: 10000),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
:use_linked_clone:          Whether to use linked clone (default: True),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Confirms a resize, destroying the source VM.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Finish reverting a resize, powering back on the instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Completes a resize, turning on the migrated instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
:vmwareapi_task_poll_interval:  The interval (seconds) used for polling of,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
:vmwareapi_api_retry_count:  The API retry count in case of failure such as,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
from nova import block_device,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
from nova.compute import api as compute,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
from nova import context as nova_context,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"def __init__(self, session, virtapi, volumeops):",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Ignoring the orphaned or inaccessible VMs,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
uploaded. This is required just to create the metadata file.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
""" KB and type %(disk_type)s on """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Delete the vmdk file.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# a flat vmdk,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# The vmdk meta-data file,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"uploaded_vmdk_name = ""%s/%s.vmdk"" % (upload_folder, upload_name)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# The flat vmdk file name,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"flat_uploaded_vmdk_name = ""%s/%s-flat.vmdk"" % (",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"sparse_uploaded_vmdk_name = ""%s/%s-sparse.vmdk"" % (",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# linked clone base disk exists,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
Destroy a VM instance. Steps followed are:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""VM was already in suspended state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
- shutdown the instance VM.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Figure out the correct unit number,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Raise Exception if VM is suspended,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"elif pwr_state == ""suspended"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""VM was already in powered off state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""VM was already in powered on state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Update instance progress percent to reflect current step number",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
""" %(progress)d"") % locals(), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Confirms a resize, destroying the source VM.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Destroy the original VM.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Finish reverting a resize, powering back on the instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Completes a resize, turning on the migrated instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# 4. Start VM,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Return VNC port for an VM.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
return port,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"host_objs = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"dc_objs = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# way. Assuming that is the default resource pool.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"res_pool_ref = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"if task_info.state in ['queued', 'running']:",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"if task_info.state == ""error"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"return False, False",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"# Check if the folder exists or not. If not, create one",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for vol in,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for ephemeral in,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
return block_device.strip_dev(mount_device) in block_device_list,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Ignoring the oprhaned or inaccessible VMs,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
uploaded. This is required just to create the metadata file.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"data_stores = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for elem in data_stores:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"if prop.name == ""summary.type"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
ds_type = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
ds_name = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"dc_objs = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# way. Assuming that is the default resource pool.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"res_pool_mor = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# The flat vmdk file name,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"flat_uploaded_vmdk_name = ""%s/%s-flat.vmdk"" % (instance.name,",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# The vmdk meta-data file,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""data store %(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""VM was already in suspended state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"vms = self._session._call_method(vim_util, ""get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
return DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# Keep compatible with other Hyper vif model parameter.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# SOAP. It has its own names. These names are decided,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# missingSet is the name your python code will,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# remote object that you can reference using the,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# we use __setattr__ here because below the,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# default setter has been altered for this class.,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
from nova import utils,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"return '%s://[%s]/sdk' % (protocol, host_name)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
wsdl_url = CONF.vmware.wsdl_location,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
return wsdl_url,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Get object for the give reference.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
array_of_mors = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Get object References of the type.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for key in _db_content[obj_type]:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Update objects of the type.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
summary = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
r_pools = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
hosts = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
datastores = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Compute the aggregate stats,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for host_ref in hosts.ManagedObjectReference:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
about_info = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"host = _db_content[""HostSystem""].keys()[0]",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for mdo_ref in mdo_refs:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for prop_name in properties:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"prop = Prop(prop_name, mdo.get(prop_name))",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# remote object that you can reference using the,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# we use __setattr__ here because below the,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# default setter has been altered for this class.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
ds_do = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
r_pool = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
host_sys = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
datastore = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for mdo_ref in _db_content[type]:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"raise Exception(_(""Must specify host_ip, """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""and host_password to use """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.critical(_(""In vmwareapi:_create_session, """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""got this exception: %s"") % excep)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"elif adapter_type == ""lsiLogicsas"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"adapter_type_dict[device.key] = ""lsiLogicsas""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
Adapter type in vmdk descriptor is same for LSI-SAS & LSILogic,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
because Virtual Disk Manager API does not recognize the newer controller,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"adapter_type_dict[device.key] = ""lsiLogic""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
property_dict[prop.name] = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"*args, **kwargs)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"# deletion problems, so prioritize its deletion first. In the",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"for f in dest_vmdk_data_file_path, dest_vmdk_file_path:",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""store %(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# Delete the vmdk file.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# Delete the temporary vmdk created above.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Deleting temporary vmdk file %s"")",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Deleted temporary vmdk file %s"")",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
datastore = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for c in _CLASSES:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
active = False,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# way to differentiate.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# So if the previous response was also am empty response,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# to be empty.,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.critical(_(""In vmwareapi:_call_method, """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""got this exception: %s"") % exc)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for controller_key in controller_keys:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for unit_number in range(max_unit_number):,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
Return dictionary which maps controller_key to list of allocated unit,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for device in devices:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# the SCSI controller sits on its own bus,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
This function inspects the current set of hardware devices and returns,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
controller_key and unit_number that can be used for attaching a new virtual,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"elif adapter_type in ['lsiLogic', 'lsiLogicsas', 'busLogic']:",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"controller_spec = create_controller_spec(client_factory, controller_key,",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# VM having keys 200 and 201,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"controller_spec = create_controller_spec(client_factory,",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
array_of_optv = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for optval in exconfig_do:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Returns list of valid vms from RetrieveResult object.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"if prop.name == ""name"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
vm_name = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
conn_state = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# Ignoring the orphaned or inaccessible VMs,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""Getting list of instances from cluster %s""),",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""Got total of %s instances"") % str(len(lst_vm_names)))",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"if prop.name == ""name"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
vm_name = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
conn_state = prop.val,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# Ignoring the orphaned or inaccessible VMs,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for c in changes:,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"host = _db_content[""HostSystem""].keys()[0]",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
return task_mdo.obj,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
host    : ESX IPAddress or Hostname,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"return '%s://[%s]:%d/sdk' % (protocol, host_name, port)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"return '%s://%s:%d/sdk' % (protocol, host_name, port)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"return '%s://[%s]/sdk' % (protocol, host_name)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"return '%s://%s/sdk' % (protocol, host_name)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(""Creating Port Group with name %s on """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""the ESX host"", pg_name)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""Created Port Group with name %s on """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""Creating Port Group with name %s on """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Created Port Group with name %s on """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""VMwareHTTPWrite. Exception is %s"") % excep)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(""Resizing VHD %(root_vhd_path)s to new """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""Successfully changed state of VM %(vm_name)s""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""Extending root virtual disk to %s"", requested_size)",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""Unable to delete %(ds)s. There may be more than """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug('Copying snapshotted disk %s.',",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug('Copied snapshotted disk %s.',",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""VM was already in suspended state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""VM was already in powered off state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""Getting list of instances from cluster %s"",",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(""Auto configuring disk, attempting to """,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"LOG.debug(_(""Resizing VHD %(root_vhd_path)s to new """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Successfully changed state of VM %(vm_name)s""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Got total of %s instances"") % str(len(lst_vm_names)))",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Extending root virtual disk to %s""), requested_size)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Unable to delete %(ds)s. There may be more than """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_('Copying snapshotted disk %s.'),",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_('Copied snapshotted disk %s.'),",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""VM was already in suspended state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""VM was already in powered off state. So returning """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""%(adapter_type)s and disk type %(disk_type)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Getting list of instances from cluster %s""),",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"LOG.debug(_(""Auto configuring disk, attempting to """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
self.client = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
# rounding inaccuracies. Use that only if the more accurate,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
root_disk = '%s.vmdk' % uuid,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
# rounding inaccuracies. Use that only if the more accurate,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""VMware file read handler class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"base_url = ""%s://[%s]:%s/folder/%s"" % (scheme, host, port,",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"base_url = ""%s://%s:%s/folder/%s"" % (scheme, host, port,",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Glance file read handler class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Base class for HTTP file.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
self.eof = False,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Build ESX host session cookie headers.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"cookie_header = """"",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for vim_cookie in vim_cookies:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"cookie_header = vim_cookie.name + ""="" + vim_cookie.value",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
return cookie_header,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""VMware file write handler class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"elif scheme == ""https"":",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Write to the file.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Get the response and close the connection.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""VMware file read handler class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"request = urllib2.Request(base_url, None, headers)",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
adapter_type_dict[device.key] = CONTROLLER_TO_ADAPTER_TYPE[,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
adapter_type_dict[device.key] = constants.DEFAULT_ADAPTER_TYPE,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_BUSLOGIC,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_IDE,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_LSILOGICSAS,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
adapter_type_dict[device.key] = constants.ADAPTER_TYPE_PARAVIRTUAL,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"for i, vif_info in enumerate(vif_infos):",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for vif_info in vif_infos:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Get the first object of an object type""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Get the first reference of an object type""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"""""""Get iterator over object References of the type.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for obj in _db_content[obj_type].values():,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for p in self.propSet)),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
vm_list = DataObject(),f952992f035ec130b7608e9851ef9c3becc2047a,2,0
"for value in get_objects(""Datastore""):",f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for prop_name in properties,f952992f035ec130b7608e9851ef9c3becc2047a,2,0
for key in _db_content[obj_type]:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"""""""Get object References of the type.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for elem in self.propSet}),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"for key, value in _db_content[""Datastore""].items():",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"for vm_ref in _db_content.get(""VirtualMachine""):",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
vm = _get_object(vm_ref),f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"raise exception.NotFound(""No Virtual Machine has been """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"raise exception.NotFound(""Virtual Machine with ref %s is not """,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
for prop_name in properties:,f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"prop = Prop(prop_name, mdo.get(prop_name))",f952992f035ec130b7608e9851ef9c3becc2047a,2,1
"flat_vmdk_file_path = vmdk_file_path.replace("".vmdk"", ""-flat.vmdk"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"_host_sk = _db_content[""HostSystem""].keys()[0]",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"host_mdo = _db_content[""HostSystem""][_host_sk]",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"_session_info = {'uuid': str(uuid.uuid4()),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_db_content['session'][self._session] = _session_info,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ref = (is_sr_create and,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
flat_vmdk_file_path = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_mdo = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
_db_content['session'][self._session] = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
ref = is_sr_create and \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vmwareapi_wsdl_loc_opt = cfg.StrOpt('vmwareapi_wsdl_loc',",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self._service_content = self.RetrieveServiceContent(""ServiceInstance"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
request_mo = self._request_managed_object_builder(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmwareapi_wsdl_loc_opt = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._service_content = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
request_mo = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"obj_content = get_object_properties(vim, None, mobj, type, [property_name])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
prop_filter_spec = client_factory.create('ns0:PropertyFilterSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
obj_content = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
prop_filter_spec = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
virtual_device_config = client_factory.create(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
virtual_lsi = client_factory.create('ns0:VirtualLsiLogicController'),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"backing_name = ''.join(['ns0:VirtualEthernetCardDistributed',",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
backing = client_factory.create(backing_name),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
portgroup = client_factory.create(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
backing = client_factory.create(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if (device.__class__.__name__ == ""VirtualDisk"" and",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
device.backing.__class__.__name__ ==,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
create_vmdk_spec = client_factory.create('ns0:FileBackedVirtualDiskSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
disk_file_backing = client_factory.create(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
virtual_machine_config_spec = client_factory.create(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
virtual_device_config = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
client_factory.create('ns0:VirtualDeviceConfigSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
virtual_lsi = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
network_spec = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
backing_name = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
backing = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
portgroup = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"== ""VirtualDiskFlatVer2BackingInfo"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
create_vmdk_spec = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
disk_file_backing = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
virtual_machine_config_spec = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
client_factory.create('ns0:VirtualMachineConfigSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vmware_vif_driver_opt = cfg.StrOpt('vmware_vif_driver',",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"_image_info = vmware_images.get_vmdk_size_and_properties(context,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"image_size, image_properties = _image_info",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
network_ref = network_utils.get_network_with_the_name(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_vmdk_info = vm_util.get_vmdk_file_path_and_adapter_type(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vmdk_file_path_before_snapshot, adapter_type = _vmdk_info",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
os_type) = _get_vm_and_vmdk_attribs(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_ds_path = vm_util.split_datastore_path(vm_config_pathname),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"datastore_name, vmx_file_path = _ds_path",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"interface_str = "";"".join([info['mac'],",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
machine_id_change_spec = vm_util.get_machine_id_change_spec(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
LOG.info(_('Latest agent build for %(hypervisor)s/%(os)s',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
LOG.info(_('No agent build found for %(hypervisor)s/%(os)s',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_snapshot_info = self._create_snapshot(instance),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"template_vm_ref, template_vdi_uuids = _snapshot_info",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"_vdi_info = VMHelper.get_vdi_for_vm_safely(self._session, vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vdi_ref, vm_vdi_rec = _vdi_info",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
' network %(network_ref)s.') % locals()),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmware_vif_driver_opt = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"image_size, image_properties = \",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
network_ref = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vmdk_file_path_before_snapshot, adapter_type = \",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
os_type = _get_vm_and_vmdk_attribs(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"datastore_name, vmx_file_path = \",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
machine_id_change_spec = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
LOG.info(_('Latest agent build for %(hypervisor)s/%(os)s' + \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
LOG.info(_('No agent build found for %(hypervisor)s/%(os)s' + \,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"template_vm_ref, template_vdi_uuids = \",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vdi_ref, vm_vdi_rec = \",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"path = ""/console?ref=%s&session_id=%s""\",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"% (str(vm_ref), session_id)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
' network %(network_ref)s.') % locals()),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"# Copyright (c) 2012 VMware, Inc.",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
(default: 5.0).,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
(default: 10).,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"help='Total number of VNC ports'),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"help='Whether to use linked clone'),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self._vmops = vmops.VMwareVMOps(self._session, self.virtapi,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def rescue(self, context, instance, network_info, image_meta,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Rescue the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def unrescue(self, instance, network_info):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Unrescue the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def power_off(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Power off the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def power_on(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Power on the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def migrate_disk_and_power_off(self, context, instance, dest,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return self._vmops.migrate_disk_and_power_off(context, instance,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def confirm_migration(self, migration, instance, network_info):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def finish_revert_migration(self, instance, network_info,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def finish_migration(self, context, migration, instance, disk_info,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def live_migration(self, context, instance_ref, dest,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def poll_rebooting_instances(self, timeout, instances):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Poll for rebooting instances.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_vnc_console(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Return link to instance's VNC console.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return self._vmops.get_vnc_console(instance),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
(default: 1.0).,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
(default: 10).,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._vmops = vmops.VMwareVMOps(self._session),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from nova.openstack.common import excutils,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
from nova.openstack.common import timeutils,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
from nova.virt import driver,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
VMWARE_PREFIX = 'vmware',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
RESIZE_TOTAL_STEPS = 4,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.compute_api = compute.API(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._virtapi = virtapi,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._volumeops = volumeops,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._instance_path_base = VMWARE_PREFIX + CONF.base_dir_name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._default_root_device = 'vda',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._rescue_suffix = '-rescue',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._poll_rescue_last_ran = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def spawn(self, context, instance, image_meta, network_info,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
2. For flat disk,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
the metadata .vmdk file.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
3. For sparse disk,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
3.3. Delete the -sparse.vmdk file.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
5. Power on the VM.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance['name'])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ds = vm_util.get_datastore_ref_and_name(self._session),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
data_store_ref = ds[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
data_store_name = ds[1],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"disk_type = image_properties.get(""vmware_disktype"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return vmdk_file_size_in_kb, os_type, adapter_type, disk_type",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
disk_type) = _get_image_properties(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_folder_ref, res_pool_ref = self._get_vmfolder_and_res_pool_refs()",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return vif_infos,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vnc_port = self._get_vnc_port(vm_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vnc_pass = CONF.vnc_password or '',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""%(vmdk_file_size_in_kb)s KB and adapter type """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""%(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _delete_disk_file(vmdk_path):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# we just created above,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
upload_vmdk_name = sparse_uploaded_vmdk_name \,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if disk_type == ""sparse"" else flat_uploaded_vmdk_name",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _copy_virtual_disk():,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# storage adapter type.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vmdk_copy_spec = vm_util.get_vmdk_create_spec(client_factory,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_copy_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ebs_root = self._volume_in_mapping(self._default_root_device,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
linked_clone = CONF.use_linked_clone,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
upload_folder = self._instance_path_base,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
upload_name = instance['image_ref'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
upload_folder = instance['name'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
upload_name = instance['name'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
flat_uploaded_vmdk_path = vm_util.build_datastore_path(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
sparse_uploaded_vmdk_path = vm_util.build_datastore_path(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
dc_ref = self._get_datacenter_ref_and_name()[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
cookies = \,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if disk_type == ""sparse"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"disk_type = ""thin""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
root_disk = driver.block_device_info_get_mapping(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
connection_info = root_disk['connection_info'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"name=""%s-snapshot"" % instance['name'],",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _delete(self, instance, network_info):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
2. Destroy the VM.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Destroying the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
destroy_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Destroyed the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"reason = _(""instance is powered off and cannot be suspended."")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def rescue(self, context, instance, network_info, image_meta):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Rescue the specified instance.",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
instance['name'] = instance['name'] + self._rescue_suffix,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"hardware_devices = self._session._call_method(vim_util,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""get_dynamic_property"", vm_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
= vm_util.get_vmdk_path_and_adapter_type(hardware_devices),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
unit_number = unit_number + 1,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def unrescue(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Unrescue the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
instance_orig_name = instance['name'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
instance['name'] = instance_orig_name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def power_off(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Power off the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"pwr_state = self._session._call_method(vim_util,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# Only PoweredOn VMs can be powered off.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if pwr_state == ""poweredOn"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Powering off the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
poweroff_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Powered off the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"reason = _(""instance is suspended and cannot be powered off."")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def power_on(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Power on the specified instance.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# Only PoweredOff and Suspended VMs can be powered on.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Powering on the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
poweron_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Powered on the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _get_orig_vm_name_label(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return instance['name'] + '-orig',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _update_instance_progress(self, context, instance, step, total_steps):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# instance's progress field as each step is completed.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
#,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
progress = round(float(step) / total_steps * 100),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
instance_uuid = instance['uuid'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Updating instance '%(instance_uuid)s' progress to""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def migrate_disk_and_power_off(self, context, instance, dest,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_ref = self._get_host_ref_from_name(dest),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
name_label = self._get_orig_vm_name_label(instance),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
rename_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ds_ref = vm_util.get_datastore_ref_and_name(self._session)[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
client_factory = self._session._get_vim().client.factory,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"rel_spec = vm_util.relocate_vm_spec(client_factory, ds_ref, host_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"clone_spec = vm_util.clone_vm_spec(client_factory, rel_spec)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_clone_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def confirm_migration(self, migration, instance, network_info):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
instance_name = self._get_orig_vm_name_label(instance),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.warn(_(""In vmwareapi:vmops:confirm_migration, got this """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def finish_revert_migration(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, name_label)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def finish_migration(self, context, migration, instance, disk_info,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def live_migration(self, context, instance_ref, dest,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Spawning live_migration operation for distributing high-load.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_ref.name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_migrate_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
with excutils.save_and_reraise_exception():,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def poll_rebooting_instances(self, timeout, instances):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Poll for rebooting instances.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ctxt = nova_context.get_admin_context(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"instances_info = dict(instance_count=len(instances),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.info(_(""Found %(instance_count)d hung reboots """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""older than %(timeout)d seconds"") % instances_info)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.info(_(""Automatically hard rebooting %d"") % instance['uuid'])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_vnc_console(self, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return {'host': CONF.vmwareapi_host_ip,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _get_vnc_port(vm_ref):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_id = int(vm_ref.value.replace('vm-', ''))",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _set_vnc_config(self, client_factory, instance, port, password):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vnc_config_spec = vm_util.get_vnc_config_spec(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""port - %(port)s"") % {'port': port},",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"reconfig_task = self._session._call_method(self._session._get_vim(),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _get_datacenter_ref_and_name(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _get_host_ref_from_name(self, host_name):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""HostSystem"", [""name""])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if host.propSet[0].val == host_name:,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return host.obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _get_vmfolder_and_res_pool_refs(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_folder_ref = dc_objs[0].propSet[0].val,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return vm_folder_ref, res_pool_ref",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _path_file_exists(self, ds_browser, ds_path, file_name):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"search_spec = vm_util.search_datastore_spec(client_factory, file_name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"search_task = self._session._call_method(self._session._get_vim(),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"task_info = self._session._call_method(vim_util,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""get_dynamic_property"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"file_exists = (getattr(task_info.result, 'file', False) and",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
task_info.result.file[0].path == file_name),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return True, file_exists",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _check_if_folder_file_exists(self, ds_ref, ds_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ds_browser = vim_util.get_dynamic_property(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"folder_path = vm_util.build_datastore_path(ds_name, folder_name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"folder_exists, file_exists = self._path_file_exists(ds_browser,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return file_exists,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _volume_in_mapping(mount_device, block_device_info):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
block_device_list = [block_device.strip_dev(vol['mount_device']),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
swap = driver.block_device_info_get_swap(block_device_info),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, session):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def spawn(self, context, instance, image_meta, network_info):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
the metadata .vmdk file.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
6. Power on the VM.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vm_ref = self._get_vm_ref_from_the_name(instance.name),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_datastore_ref():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
ds_name = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
ds_type = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
# Local storage identifier,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if ds_type == ""VMFS"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
data_store_name = ds_name,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return data_store_name,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
data_store_name = _get_datastore_ref(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return vmdk_file_size_in_kb, os_type, adapter_type",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vmdk_file_size_in_kb, os_type, adapter_type = _get_image_properties()",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_vmfolder_and_res_pool_mors():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vm_folder_mor = dc_objs[0].propSet[0].val,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return vm_folder_mor, res_pool_mor",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vm_folder_mor, res_pool_mor = _get_vmfolder_and_res_pool_mors()",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
instance.name),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"flat_uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"uploaded_vmdk_path = vm_util.build_datastore_path(data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""%(vmdk_file_size_in_kb)s KB and adapter type  """,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""%(data_store_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _delete_disk_file():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
cookies = self._session._get_vim().client.options.transport.cookiejar,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
# above,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _attach_vmdk_to_the_vm():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
to do so.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vmdk_attach_config_spec = vm_util.get_vmdk_attach_config_spec(,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
reconfig_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"name=""%s-snapshot"" % instance.name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
dc_ref = self._get_datacenter_name_and_ref()[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"reason = _(""instance is powered off and can not be suspended."")",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vm_ref = self._get_vm_ref_from_the_name(instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_datacenter_name_and_ref(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _get_vm_ref_from_the_name(self, vm_name):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
if vm.propSet[0].val == vm_name:,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return vm.obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"param_list = {""id"": str(vm_ref.value)}",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"param_list = {""id"": str(vm_ref)}",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vm_ref = vm_util.get_vm_ref(self._session, instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
upload_folder = instance['uuid'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"name=""%s-snapshot"" % instance['uuid'],",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"rescue_vm_ref = vm_util.get_vm_ref_from_uuid(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_uuid(self._session, instance['uuid'])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref(self._session, instance_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance['name'])",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
upload_folder = instance['name'],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"name=""%s-snapshot"" % instance['name'],",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vm_ref = vm_util.get_vm_ref_from_name(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"rescue_vm_ref = vm_util.get_vm_ref_from_name(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vm_ref = vm_util.get_vm_ref_from_name(self._session, instance_ref.name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, obj_name=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.obj_name = obj_name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self.device = kwargs.get(""virtual_device"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return DataObject(obj_name),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
nic = VirtualPCNet32(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if vif_info['vif_model'] == ""e1000"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vif_info['vif_model'] = ""VirtualE1000""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vif = 'ns0:' + vif_info['vif_model'],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
net_device = client_factory.create(vif),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
net_device = client_factory.create('ns0:VirtualPCNet32'),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class Property(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=None, val=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.name = name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.val = val,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class ManagedObjectReference(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""A managed object reference is a remote identifier.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, value=""object-123"", _type=""ManagedObject""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# typically have values like vm-123 or,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# host-232 and not UUID.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._type = _type,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class ObjectContent(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, obj_ref, prop_list=None, missing_list=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.obj = obj_ref,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
prop_list = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
missing_list = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.propSet = prop_list,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.missingSet = missing_list,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Managed Object base class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# object reference.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
value = 'obj-123',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"obj_ref = ManagedObjectReference(value, name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
elem = Property(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# TODO(hartsocks): remove this,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, obj_ref=None, value='host-123'):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class Prop(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def __init__(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.name = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.val = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class Obj(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, name, value):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._type = name,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""""""Managed Data Object base class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"obj_ref = Obj(name, value)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
elem = Prop(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return CONF.vmware.wsdl_location,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# calculate default WSDL location if no override supplied,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return Vim.get_soap_url(protocol, host_name) + ""/vimService.wsdl""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if wsdl_url is None:,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
# calculate default WSDL location if no override supplied,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, name=""fake-ds""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def __init__(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_object(obj_ref):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return _db_content[obj_ref.type][obj_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _convert_to_array_of_mor(mors):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
array_of_mors.ManagedObjectReference = mors,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return array_of_mors,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _get_object_refs(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
lst_objs = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return lst_objs,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _update_object(table, table_obj):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_db_content[table][table_obj.obj] = table_obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class Prop(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""ManagedObject"", value=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.type = name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._type = name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_counter = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, mo_id_prefix=""obj""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
elem = Prop(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _generate_moid(self, prefix):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return prefix + ""-"" + str(self.__class__._counter)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ds_do = kwargs.get(""ds"", None)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""test-rpool""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""test_cluster""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.numHosts = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.numCpuCores = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.numCpuThreads = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.numEffectiveHosts = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.totalMemory = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.effectiveMemory = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _add_resource_pool(self, r_pool):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"r_pools = self.get(""resourcePool"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
r_pools.ManagedObjectReference = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _add_host(self, host_sys):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"hosts = self.get(""host"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
hosts.ManagedObjectReference = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _add_datastore(self, datastore):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"datastores = self.get(""datastore"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
datastores.ManagedObjectReference = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _update_summary(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"summary = self.get(""summary"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
summary.numHosts = len(hosts.ManagedObjectReference),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_sys = _get_object(host_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"connected = host_sys.get(""connected"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"host_summary = host_sys.get(""summary"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
free_memory = (host_summary.hardware.memorySize / (1024 * 1024),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""networkSystem""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""ha-host"", connected=True):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""ha-datacenter""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"about_info.name = ""VMware vCenter Server""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"about_info.version = ""5.1.0""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
service_content.about = about_info,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ds = _db_content[""Datastore""].keys()[0]",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo_refs = _db_content[type],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo_refs = [obj_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo = _db_content[type][mdo_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
prop_list = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"obj_content = ObjectContent(mdo.obj, prop_list)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class Property(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, value=""object-123"", _type=""ManagedObject""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._type = _type,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, name=""ManagedObject"", obj_ref=None, value=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
# object reference.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
value = 'obj-123',f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"obj_ref = ManagedObjectReference(value, name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
elem = Property(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"ds_do.ManagedObjectReference = [kwargs.get(""ds"").obj]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def __init__(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, **kwargs):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"obj = _get_objects(""ResourcePool"").objects[0].obj",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
r_pool.ManagedObjectReference = [obj],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"obj = _get_objects(""HostSystem"").objects[0].obj",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_sys.ManagedObjectReference = [obj],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"obj = _get_objects(""Datastore"").objects[0].obj",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
datastore.ManagedObjectReference = [obj],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, obj_ref=None, value='host-123'):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"ds = _db_content[""Datastore""][_db_content[""Datastore""].keys()[0]]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
mdo = _db_content[type][mdo_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"temp_mdo = ManagedObject(mdo.objName, mdo.obj)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
if obj_ref in _db_content[type]:,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
mdo = _db_content[type][obj_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"temp_mdo = ManagedObject(mdo.objName, obj_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""host_username """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._session = VMwareAPISession(scheme=scheme),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, host_ip=CONF.vmware.host_ip,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._host_username = username,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._host_password = password,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._api_retry_count = retry_count,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
delay = 1,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""sleeping for %(seconds)s seconds""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"delay = min(2 * delay, 60)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_username = CONF.vmware.host_username,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_password = CONF.vmware.host_password,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
api_retry_count = CONF.vmware.api_retry_count,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"raise Exception(_(""Must specify vmwareapi_host_ip,""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""vmwareapi_host_username """,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""and vmwareapi_host_password to use""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"self._session = VMwareAPISession(self._host_ip,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, host_ip, host_username, host_password,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._host_username = host_username,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._host_password = host_password,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.api_retry_count = api_retry_count,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
virtual_controller = client_factory.create(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_copy_virtual_disk_spec(client_factory, adapter_type=""lsiLogic"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
dest_spec.adapterType = get_vmdk_adapter_type(adapter_type),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
create_vmdk_spec.adapterType = get_vmdk_adapter_type(adapter_type),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_vmdk_adapter_type(adapter_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if adapter_type == ""lsiLogicsas"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vmdk_adapter_type = ""lsiLogic""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_adapter_type = adapter_type,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return vmdk_adapter_type,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_copy_virtual_disk_spec(client_factory, adapter_type=""lsilogic"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
dest_spec.adapterType = adapter_type,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
create_vmdk_spec.adapterType = adapter_type,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"property_dict = get_dynamic_properties(vim, mobj, type, [property_name])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return property_dict.get(property_name),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_dynamic_properties(vim, mobj, type, property_names):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"obj_content = get_object_properties(vim, None, mobj, type, property_names)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
property_dict = {},f952992f035ec130b7608e9851ef9c3becc2047a,1,0
dynamic_properties = obj_content.objects[0].propSet,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return property_dict,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_about_info(vim):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return vim.get_service_content().about,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"obj_content = get_object_properties(vim, None, mobj, type, [property_name])",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
property_value = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
dynamic_property = obj_content.objects[0].propSet,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
property_value = dynamic_property[0].val,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return property_value,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from nova.openstack.common import uuidutils,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._session = uuidutils.generate_uuid(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._session = str(uuid.uuid4()),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from nova.openstack.common import uuidutils,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _extend_virtual_disk(self, instance, requested_size, name, dc_ref):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _delete_datastore_file(self, instance, datastore_path, dc_ref):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vim = self._session._get_vim(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
file_delete_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""Deleted the datastore file""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
random_name = uuidutils.generate_uuid(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"dest_vmdk_file_path = vm_util.build_datastore_path(datastore_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"dest_vmdk_data_file_path = vm_util.build_datastore_path(datastore_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""vmware-tmp/%s-flat.vmdk"" % random_name)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _extend_virtual_disk(self, instance, requested_size, name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _delete_disk_file(vmdk_path):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vmdk_delete_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
random_name = str(uuid.uuid4()),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"dest_vmdk_file_location = vm_util.build_datastore_path(datastore_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"% dest_vmdk_file_location, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
remove_disk_task = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def reset(vc=False):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ds_ref1 = create_datastore('ds1', 1024, 500)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ds_ref2 = create_datastore('ds2', 1024, 500)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if c == 'files':,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_db_content[c] = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_db_content[c] = {},f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""fake-ds"", capacity=1024, free=500):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, name=""ha-datacenter"", ds_ref=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
datastore.ManagedObjectReference = [ds_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def create_datacenter(name, ds_ref=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"data_center = Datacenter(name, ds_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def create_datastore(name, capacity, free):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"data_store = Datastore(name, capacity, free)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return data_store.obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def create_cluster(name, ds_ref):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def reset():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
if c == 'files':,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
_db_content[c] = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
_db_content[c] = {},f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, name=""fake-ds""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, name=""ha-datacenter""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def create_datacenter():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
data_center = Datacenter(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def create_datastore():,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
data_store = Datastore(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def create_cluster(name):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def get_vm_create_spec(client_factory, instance, name, data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
config_spec.name = name,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_vmdk_volume_disk(hardware_devices, path=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if not path or path == device.backing.fileName:,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return device,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_vm_create_spec(client_factory, instance, data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
config_spec.name = instance['uuid'],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def get_vmdk_volume_disk(hardware_devices):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return device,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
TIME_BETWEEN_API_CALL_RETRIES = 1.0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._session = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._session = session,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _session_is_active(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
active = self.vim.SessionIsActive(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self.vim.get_service_content().sessionManager,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.warning(_(""Unable to validate session %s!""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return active,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# active,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
exc = excep,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.critical(_(""In vmwareapi: _call_method (session=%s)""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
TIME_BETWEEN_API_CALL_RETRIES = 2.0,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._session_id = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._session_id = session.key,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
last_fault_list = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
if error_util.FAULT_NOT_AUTHENTICATED in last_fault_list:,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
last_fault_list = excep.fault_list,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def get_vmdk_path_and_adapter_type(hardware_devices, uuid=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if uuid in device.backing.fileName:,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_file_path = device.backing.fileName,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_vmdk_path_and_adapter_type(hardware_devices):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vmdk_file_path = device.backing.fileName,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, controllerKey=0, unitNumber=0):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.controllerKey = controllerKey,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.unitNumber = unitNumber,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class VirtualIDEController(DataObject):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, key=0):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.key = key,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, key=0, scsiCtlrUnitNumber=0):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.scsiCtlrUnitNumber = scsiCtlrUnitNumber,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
controller_key = val.deviceChange[0].device.controllerKey,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
filename = val.deviceChange[0].device.backing.fileName,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def __init__(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.unitNumber = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
controller_key = val.deviceChange[1].device.controllerKey,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
filename = val.deviceChange[1].device.backing.fileName,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return (vmdk_file_path, adapter_type, disk_type)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _find_controller_slot(controller_keys, taken, max_unit_number):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if not unit_number in taken.get(controller_key, []):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return controller_key, unit_number",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _is_ide_controller(device):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _is_scsi_controller(device):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _find_allocated_slots(devices):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
numbers for that controller_key.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
taken = {},f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"unit_numbers = taken.setdefault(device.controllerKey, [])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"unit_numbers = taken.setdefault(device.key, [])",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return taken,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def allocate_controller_key_and_unit_number(client_factory, devices,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if devices.__class__.__name__ == ""ArrayOfVirtualDevice"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
devices = devices.VirtualDevice,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
taken = _find_allocated_slots(devices),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ret = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if adapter_type == 'ide':,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ret = _find_controller_slot(ide_keys, taken, 2)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ret = _find_controller_slot(scsi_keys, taken, 16)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return ret[0], ret[1], None",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
controller_key = -101,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return controller_key, 0, controller_spec",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# controls this Hard Disk,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if adapter_type == ""ide"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
controller_key = 200,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
controller_key = -101,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
unit_number = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
unit_number = device.unitNumber,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return (vmdk_file_path, vmdk_controller_key, adapter_type,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _convert_to_array_of_opt_val(optvals):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
array_of_optv.OptionValue = optvals,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return array_of_optv,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"exconfig_do = kwargs.get(""extra_config"", None)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self.set('config.extraConfig[""%s""]' % optval.key, optval)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
lst_vm_names = self._get_valid_vms_from_retrieve_result(vms),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _get_valid_vms_from_retrieve_result(self, retrieve_result):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
lst_vm_names = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
token = vm_util._get_token(retrieve_result),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_name = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
conn_state = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if conn_state not in [""orphaned"", ""inaccessible""]:",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"retrieve_result = self._session._call_method(vim_util,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return lst_vm_names,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def list_instances(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"properties = ['name', 'runtime.connectionState']",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vms = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
root_res_pool = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vim_util, ""get_dynamic_property"", self._cluster,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vms = self._session._call_method(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
lst_vm_names = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
token = vm_util._get_token(vms),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vm_name = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
conn_state = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if conn_state not in [""orphaned"", ""inaccessible""]:",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vms = self._session._call_method(vim_util,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
extraConfigs = _merge_extraconfig(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self.get(""config.extraConfig"").OptionValue = extraConfigs",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"if val.instanceUuid == """":",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
val.instanceUuid = uuidutils.generate_uuid(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _merge_extraconfig(existing, changes):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
existing = existing or [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
extraConf.value = c.value,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return existing,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
source_vmref = args[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
source_vm_mdo = _get_vm_mdo(source_vmref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"clone_spec = kwargs.get(""spec"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"ds = _db_content[""Datastore""].keys()[0]",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_dict = {,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_dict[""instanceUuid""] = clone_spec.config.instanceUuid",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"extraConfigs = _merge_extraconfig(vm_dict[""extra_config""],",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_dict[""extra_config""] = extraConfigs",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
virtual_machine = VirtualMachine(**vm_dict),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return self._just_return_task(method),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._host_port = host_port,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return vim.Vim(protocol=self._scheme, host=self._host_ip,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return vim.Vim(protocol=self._scheme, host=self._host_ip)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"self.wsdl_url = Vim.get_wsdl_url(protocol, host, port)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self.url = Vim.get_soap_url(protocol, host, port)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_wsdl_url(protocol, host_name, port):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return Vim.get_soap_url(protocol, host_name, port) + ""/vimService.wsdl""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_soap_url(protocol, host_name, port):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self.wsdl_url = Vim.get_wsdl_url(protocol, host)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"self.url = Vim.get_soap_url(protocol, host)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def get_wsdl_url(protocol, host_name):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return Vim.get_soap_url(protocol, host_name) + ""/vimService.wsdl""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def get_soap_url(protocol, host_name):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
spec_type = spec_set.propSet[0].type,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo_refs = _db_content[spec_type],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
elif obj_ref.type != spec_type:,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo = _db_content[spec_type][mdo_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
type = spec_set.propSet[0].type,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
mdo_refs = _db_content[type],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
elif obj_ref.type != type:,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
mdo = _db_content[type][mdo_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from nova.openstack.common.gettextutils import _,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(""get_info called for instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Creating differencing VHD. Parent: """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug('Creating nic for instance', instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
""" to: %(req_state)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Getting list of instances"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Got total of %s instances"", str(len(lst_vm_names)))",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Create blank virtual disk on %s"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Blank virtual disk created on %s."",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Uploading image %s"", image_id,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Uploaded image %s"", image_id,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Rebooting guest OS of VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Rebooted guest OS of VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Doing hard reboot of VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Did hard reboot of VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Powering off the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Powered off the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Unregistering the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Unregistered the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Rescue VM configured"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Rescue VM destroyed"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Suspending the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Suspended the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Resuming the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Resumed the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Updating instance '%(instance_uuid)s' progress to""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
""" %(progress)d"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Destroying the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Destroyed the VM"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Will copy while retaining adapter type """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""%(adapter_type)s and disk type %(disk_type)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""VM %(uuid)s is currently on host %(host_name)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Importing image upload handler: %s"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Skip agent setup, unable to contact agent."",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Finished snapshot and upload for VM"",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Updating progress to %d"", progress,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Clean shutdown did not complete successfully, """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Read-only migrated for disk: %s"", userdevice,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Not resizing the root volume."",",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Using RAW or VHD, skipping kernel and ramdisk """,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Injecting network info to xenstore"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug('Creating VIF for network %s',",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(""Removing hostname from xenstore"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"LOG.debug(_(""get_info called for instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Creating differencing VHD. Parent: """,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_('Creating nic for instance'), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
""" to: %(req_state)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Getting list of instances""))",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Create blank virtual disk on %s""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Blank virtual disk created on %s.""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Rebooting guest OS of VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Rebooted guest OS of VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Doing hard reboot of VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Did hard reboot of VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Powering off the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Powered off the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Unregistering the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Unregistered the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""datastore %(datastore_name)s"") %",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Rescue VM configured""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Rescue VM destroyed""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Suspending the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Suspended the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Resuming the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Resumed the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Updating instance '%(instance_uuid)s' progress to""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
""" %(progress)d""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Destroying the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Destroyed the VM""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""port - %(port)s"") % {'port': port},",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Will copy while retaining adapter type """,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""VM %(uuid)s is currently on host %(host_name)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Importing image upload handler: %s""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Skip agent setup, unable to contact agent.""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Finished snapshot and upload for VM""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Updating progress to %d""), progress,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Clean shutdown did not complete successfully, """,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Read-only migrated for disk: %s""), userdevice,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Not resizing the root volume.""),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Using RAW or VHD, skipping kernel and ramdisk """,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Injecting network info to xenstore""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_('Creating VIF for network %s'),",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"LOG.debug(_(""Removing hostname from xenstore""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class FakeService(DataObject):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def Logout(self, session_manager):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class FakeClient(DataObject):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def __init__(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""""""Creates a namespace object.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.service = FakeService(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self.client = FakeClient(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def fake_get_vmdk_size_and_properties(context, image_id, instance):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"props = {""vmware_ostype"": constants.DEFAULT_OS_TYPE,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return _FAKE_FILE_SIZE, props",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from oslo.vmware.objects import datastore as ds_obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _get_device_capacity(device):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"# Devices pre-vSphere-5.5 only reports capacityInKB, which has",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
# attribute is absent.,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return device.capacityInBytes,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return device.capacityInKB * units.Ki,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _get_device_disk_type(device):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return constants.DISK_TYPE_THIN,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return constants.DISK_TYPE_EAGER_ZEROED_THICK,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return constants.DEFAULT_DISK_TYPE,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
capacity_in_bytes = 0,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_device = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
root_disk = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
root_device = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
path = ds_obj.DatastorePath.parse(device.backing.fileName),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
if root_disk and path.basename == root_disk:,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
root_device = device,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_device = device,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_device = root_device,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_file_path = vmdk_device.backing.fileName,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
capacity_in_bytes = _get_device_capacity(vmdk_device),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vmdk_controller_key = vmdk_device.controllerKey,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
disk_type = _get_device_disk_type(vmdk_device),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
adapter_type = adapter_type_dict.get(vmdk_controller_key),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
capacity_in_bytes = None,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
if uuid in device.backing.fileName:,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vmdk_file_path = device.backing.fileName,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vmdk_controller_key = device.controllerKey,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"# Devices pre-vSphere-5.5 only reports capacityInKB, which has",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
# attribute is absent.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
capacity_in_bytes = device.capacityInBytes,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
capacity_in_bytes = device.capacityInKB * units.Ki,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"disk_type = ""thin""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"disk_type = ""eagerZeroedThick""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
disk_type = constants.DEFAULT_DISK_TYPE,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"adapter_type = adapter_type_dict.get(vmdk_controller_key, """")",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
write_file_handle = rw_handles.FileWriteHandle(,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
read_file_handle = rw_handles.ImageReadHandle(read_iter),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
from nova.virt.vmwareapi import read_write_util,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
write_file_handle = read_write_util.VMwareHTTPWriteFile(,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
read_file_handle = read_write_util.GlanceFileRead(read_iter),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from oslo.vmware import rw_handles,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
class VMwareHTTPReadFile(rw_handles.FileHandle):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __init__(self, host, port, data_center_name, datastore_name, cookies,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self._base_url = self._get_base_url(scheme, host, port, file_path)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"param_list = {""dcPath"": data_center_name, ""dsName"": datastore_name}",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self._base_url = self._base_url + ""?"" + urllib.urlencode(param_list)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"self._conn = self._create_read_connection(self._base_url,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return self._file_handle.read(rw_handles.READ_CHUNKSIZE),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return self._file_handle.headers.get(""Content-Length"", -1)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
from nova.openstack.common import log as logging,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
LOG = logging.getLogger(__name__),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"USER_AGENT = ""OpenStack-ESX-Adapter""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
READ_CHUNKSIZE = 65536,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class GlanceFileRead(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, glance_read_iter):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.glance_read_iter = glance_read_iter,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.iter = self.get_next(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def read(self, chunk_size):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return self.iter.next(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return """"",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def get_next(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
yield data,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def close(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""""""A dummy close just to maintain consistency.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class VMwareHTTPFile(object):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, file_handle):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.file_handle = file_handle,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def set_eof(self, eof):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.eof = eof,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def get_eof(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return self.eof,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _build_vim_cookie_headers(self, vim_cookies):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def write(self, data):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def get_size(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"base_url = (""%s://[%s]:%s/folder/%s""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"% (scheme, host, port, urllib.pathname2url(file_path)))",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"base_url = (""%s://%s:%s/folder/%s""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class VMwareHTTPWriteFile(VMwareHTTPFile):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, host, port, data_center_name, datastore_name, cookies,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"base_url = self._get_base_url(scheme, host, port, file_path)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"param_list = {""dcPath"": data_center_name, ""dsName"": datastore_name}",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"base_url = base_url + ""?"" + urllib.urlencode(param_list)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
_urlparse = urlparse.urlparse(base_url),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"scheme, netloc, path, params, query, fragment = _urlparse",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if scheme == ""http"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
conn = httplib.HTTPConnection(netloc),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
conn = httplib.HTTPSConnection(netloc),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self.conn = conn,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class VMwareHTTPReadFile(VMwareHTTPFile):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"headers = {'User-Agent': USER_AGENT,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
conn = urllib2.urlopen(request),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
# while writing.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return self.file_handle.read(READ_CHUNKSIZE),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return self.file_handle.headers.get(""Content-Length"", -1)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
CONTROLLER_TO_ADAPTER_TYPE = {,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_hardware_devices(session, vm_ref):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return vim_util.get_array_items(hardware_devices),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_vmdk_info(session, vm_ref, uuid=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"hardware_devices = get_hardware_devices(session, vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def get_vmdk_info(session, vm_ref, uuid=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if hardware_devices.__class__.__name__ == ""ArrayOfVirtualDevice"":",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
hardware_devices = hardware_devices.VirtualDevice,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _create_vif_spec(client_factory, vif_info, vif_limits=None, offset=0):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
net_device.key = -47 - offset,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def _create_vif_spec(client_factory, vif_info, vif_limits=None):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
net_device.key = -47,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from nova.virt.vmwareapi import session,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
self._session = session.VMwareAPISession(scheme=scheme),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
from oslo_vmware import api,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from oslo_vmware import vim,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
self._session = VMwareAPISession(scheme=scheme),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
class VMwareAPISession(api.VMwareAPISession):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""""""",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def __init__(self, host_ip=CONF.vmware.host_ip,",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _is_vim_object(self, module):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return isinstance(module, vim.Vim)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _wait_for_task(self, task_ref):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
The task is polled until it completes.,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return self.wait_for_task(task_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
from oslo_vmware import vim_util,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _create_object(table_obj):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_object(obj_ref):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return _db_content[obj_ref.type][obj_ref.value],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_objects(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return _db_content[obj_type].values(),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_first_object(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return next(iter(_db_content[obj_type].values())),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_first_object_ref(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return get_first_object(obj_type).obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def _no_objects_of_type(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return not _db_content.get(obj_type),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def add_object(self, obj):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def get_object_refs(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def update_object(table_obj):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
_db_content[table_obj.obj._type][table_obj.obj.value] = table_obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
def __repr__(self):,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return f'{self._type}:{self.value}',f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"def __eq__(self, other):",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return (other is not None and,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vim_util.get_moref_value(other) == self.value and,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vim_util.get_moref_type(other) == self.type),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"return ""{}:{}({})"".format(self.obj._type, self.obj.value,",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""{}={}"".format(p.name, p.val if p.name == ""name"" else ""<>"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"host_ref = get_first_object_ref(""HostSystem"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_list.ManagedObjectReference = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
pool = get_object(r_pool),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_sys = get_object(host_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"host_net_obj = get_first_object(""HostNetworkSystem"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_net_ref = host_net_obj.obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_storage_sys_key = get_first_object_ref('HostStorageSystem'),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"net_ref = get_first_object_ref(""Network"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_storage_sys = get_object(host_storage_sys_key),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"folder_ref = get_first_object_ref(""Folder"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vm_path = ds_obj.DatastorePath(get_first_object(""Datastore""))",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"res_pool_ref = get_first_object_ref(""ResourcePool"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
ds = value.obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
res_pool = get_object(res_pool_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"vms = _db_content.get(""VirtualMachine"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
return vms[vm_ref.value],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"""there"" % vm_ref.value)",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
vm_mdo = _get_vm_mdo(vm_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo_refs = list(get_object_refs(spec_type)),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
parent_mdo = get_object(obj_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo_list = _db_content[spec_type],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
mdo = mdo_list[mdo_ref.value],f952992f035ec130b7608e9851ef9c3becc2047a,1,0
prop_list = [,f952992f035ec130b7608e9851ef9c3becc2047a,1,0
"host_mdo = get_first_object(""HostSystem"")",f952992f035ec130b7608e9851ef9c3becc2047a,1,0
host_storage_sys = get_first_object('HostStorageSystem'),f952992f035ec130b7608e9851ef9c3becc2047a,1,0
from oslo_serialization import jsonutils,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _create_object(table, table_obj):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
_db_content[table][table_obj.obj] = table_obj,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_object(obj_ref):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return _db_content[obj_ref.type][obj_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_objects(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
lst_objs = FakeRetrieveResult(),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return lst_objs,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def add_object(self, object):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
def _get_object_refs(obj_type):,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
lst_objs = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"def _update_object(table, table_obj):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
return jsonutils.dumps({elem.name: elem.val,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"host_ref = (_db_content[""HostSystem""]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_sys = _get_object(host_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"host_net_key = list(_db_content[""HostNetworkSystem""].keys())[0]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"host_net_sys = _db_content[""HostNetworkSystem""][host_net_key].obj",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_storage_sys_key = _get_object_refs('HostStorageSystem')[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"net_ref = _db_content[""Network""][",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_storage_sys = _get_object(host_storage_sys_key),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"folder_ref = _db_content[""Folder""][",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
vm_path = ds_obj.DatastorePath(,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
res_pool_ref = list(_db_content['ResourcePool'].keys())[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"host_ref = list(_db_content[""HostSystem""].keys())[0]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
ds = key,f952992f035ec130b7608e9851ef9c3becc2047a,1,1
res_pool = _get_object(res_pool_ref),f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"if vm_ref not in _db_content.get(""VirtualMachine""):",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"""there"" % vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"return _db_content.get(""VirtualMachine"")[vm_ref]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"vm_mdo = _db_content.get(""VirtualMachine"").get(vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
mdo_refs = _db_content[spec_type],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
parent_mdo = _db_content[obj_ref.type][obj_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
mdo = _db_content[spec_type][mdo_ref],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
prop_list = [],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"_host_sk = list(_db_content[""HostSystem""].keys())[0]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
"host_mdo = _db_content[""HostSystem""][_host_sk]",f952992f035ec130b7608e9851ef9c3becc2047a,1,1
host_storage_sys = _get_objects('HostStorageSystem').objects[0],f952992f035ec130b7608e9851ef9c3becc2047a,1,1
'this_host': _db_content['host'].keys()[0]},f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"_create_sr(cls, params) or",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
is_vlan_create and,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"_create_vlan(params[1], params[2], params[3]) or",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"_create_object(cls, params[1]))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vmdk_file_path.replace("".vmdk"", ""-flat.vmdk"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_db_content[""HostSystem""][_db_content[""HostSystem""].keys()[0]]",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"{'uuid': str(uuid.uuid4()),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'this_host': _db_content['host'].keys()[0]},f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_sr(cls, params) or \",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
is_vlan_create and \,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_vlan(params[1], params[2], params[3]) or \",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object(cls, params[1])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"default=None,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
help='VIM Service WSDL Location ',f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'e.g http://<server>/vimService.wsdl. ',f952992f035ec130b7608e9851ef9c3becc2047a,0,0
managed_object),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cfg.StrOpt('vmwareapi_wsdl_loc',",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"default=None,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
help='VIM Service WSDL Location ',f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'e.g http://<server>/vimService.wsdl. ',f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.RetrieveServiceContent(""ServiceInstance"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self._request_managed_object_builder(managed_object),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"get_object_properties(vim, None, mobj, type, [property_name])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create('ns0:PropertyFilterSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'ns0:VirtualDeviceConfigSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'VirtualPortBackingInfo']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'ns0:DistributedVirtualSwitchPortConnection'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'ns0:VirtualEthernetCardNetworkBackingInfo'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""VirtualDiskFlatVer2BackingInfo""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'ns0:VirtualDiskFlatVer2BackingInfo'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'ns0:VirtualMachineConfigSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
client_factory.create('ns0:VirtualLsiLogicController'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'ns0:VirtualEthernetCardDistributedVirtualPortBackingInfo',f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create(backing_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create('ns0:DistributedVirtualSwitchPortConnection'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create('ns0:VirtualEthernetCardNetworkBackingInfo'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create('ns0:VirtualDeviceConnectInfo'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
device.backing.__class__.__name__ \,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create('ns0:FileBackedVirtualDiskSpec'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
client_factory.create('ns0:VirtualDiskFlatVer2BackingInfo'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"default='nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"instance.image_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session, network_name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"client_factory, hardware_devices)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"(vmdk_file_path_before_snapshot, adapter_type, datastore_name,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"ip_v4 and ip_v4['ip'] or '',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"ip_v4 and ip_v4['netmask'] or '',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"info['gateway'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"info['broadcast'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
dns]),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"client_factory, machine_id_str)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""install"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if (version and agent_build and,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cmp_version(version, agent_build['version']) < 0):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
LOG.debug(_('Removing VDI %(vdi_ref)s',f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if (instance['auto_disk_config'] and,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance['root_gb'] > instance_type['root_gb']):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cfg.StrOpt('vmware_vif_driver',",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"default='nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver',",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"vmware_images.get_vmdk_size_and_properties(context,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"instance.image_ref, instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"network_utils.get_network_with_the_name(self._session,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
network_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"vm_util.get_vmdk_file_path_and_adapter_type(client_factory,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
hardware_devices),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"vmdk_file_path_before_snapshot, adapter_type, datastore_name,\",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
vm_util.split_datastore_path(vm_config_pathname),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"(info['mac'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"ip_v4 and ip_v4['ip'] or '',",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"ip_v4 and ip_v4['netmask'] or '',",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"info['gateway'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"info['broadcast'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
dns),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"vm_util.get_machine_id_change_spec(client_factory, machine_id_str)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""install"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if version and agent_build and \,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cmp_version(version, agent_build['version']) < 0:",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
LOG.debug(_('Removing VDI %(vdi_ref)s' +,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self._create_snapshot(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"VMHelper.get_vdi_for_vm_safely(self._session, vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if instance['auto_disk_config'] and \,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
instance['root_gb'] > instance_type['root_gb']:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
remote tasks,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
network failures (socket errors etc.),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
:vnc_password:              VNC password,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cfg.IntOpt('vnc_port',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"default=5900,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"help='VNC starting port'),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cfg.IntOpt('vnc_port_total',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"default=10000,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cfg.StrOpt('vnc_password',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"default=None,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"help='VNC password'),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cfg.BoolOpt('use_linked_clone',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"default=True,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._volumeops),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._vmops.spawn(context, instance, image_meta, network_info,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_info),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
rescue_password):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._vmops.rescue(context, instance, network_info, image_meta)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._vmops.unrescue(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._vmops.power_off(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._vmops.power_on(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"instance_type, network_info,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_info=None):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"dest, instance_type)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._vmops.confirm_migration(migration, instance, network_info)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._vmops.finish_revert_migration(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"network_info, image_meta, resize_instance=False,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._vmops.finish_migration(context, migration, instance, disk_info,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"network_info, image_meta, resize_instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"post_method, recover_method, block_migration=False,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
migrate_data=None):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._vmops.live_migration(context, instance_ref, dest,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"post_method, recover_method,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_migration),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._vmops.poll_rebooting_instances(timeout, instances)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
remote tasks,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
network failures (socket errors etc.),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._vmops.spawn(context, instance, image_meta, network_info)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"CONF.import_opt('vnc_enabled', 'nova.vnc')",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'suspended': power_state.SUSPENDED},f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_info=None):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.InstanceExists(name=instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"instance['image_ref'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""preallocated"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"(vmdk_file_size_in_kb, os_type, adapter_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if network_info is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""CreateVM_Task"", vm_folder_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"config=config_spec, pool=res_pool_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if CONF.vnc_enabled:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._set_vnc_config(client_factory, instance, vnc_port, vnc_pass)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vmdk_file_size_in_kb, adapter_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
disk_type),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"datacenter=dc_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""disk_type"": disk_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"{""vmdk_path"": vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"name=vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
datacenter=dc_ref),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"{'image_ref': instance['image_ref'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"data_center_name=self._get_datacenter_ref_and_name()[1],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
file_path=upload_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"'upload_vmdk_name': upload_vmdk_name,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"{""vmdk_file_size_in_kb"": vmdk_file_size_in_kb,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""adapter_type"": adapter_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""data_store_name"": data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""disk_type"": disk_type},",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._get_vim(),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""CopyVirtualDisk_Task"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"service_content.virtualDiskManager,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"sourceName=sparse_uploaded_vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"sourceDatacenter=self._get_datacenter_ref_and_name()[0],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"destName=uploaded_vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
destSpec=vmdk_copy_spec),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], vmdk_copy_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""data_store_name"": data_store_name},",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance=instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_info),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if not ebs_root:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if linked_clone:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
uploaded_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if not (linked_clone and self._check_if_folder_file_exists(,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"data_store_ref, data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"upload_folder, upload_name + "".vmdk"")):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"upload_folder, upload_name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"data_store_name,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
flat_uploaded_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
sparse_uploaded_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if disk_type != ""sparse"":",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_virtual_disk(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_delete_disk_file(flat_uploaded_vmdk_path),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._session._get_vim().client.options.transport.cookiejar,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_fetch_image_on_esx_datastore(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_copy_virtual_disk(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_delete_disk_file(sparse_uploaded_vmdk_path),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._volumeops.attach_disk_to_vm(,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vm_ref, instance,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"adapter_type, disk_type, uploaded_vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vmdk_file_size_in_kb, linked_clone)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_info)[0],f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._volumeops.attach_volume(connection_info, instance['name'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._default_root_device),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.InstanceNotFound(instance_id=instance['uuid']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
vmdk_file_path_before_snapshot)[0],f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"adapter_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
try:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if vm_ref is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(_(""instance not present""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.power_off(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Destroy_Task"", vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], destroy_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"except Exception, excep:",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.warn(_(""In vmwareapi:vmops:delete, got this exception""",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if network_info:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.unplug_vifs(instance, network_info)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"except Exception, exc:",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.exception(exc, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""UnregisterVM"", vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"name=dir_ds_compliant_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
datacenter=self._get_datacenter_ref_and_name()[0]),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""without doing anything""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.spawn(context, instance, image_meta, network_info)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""VirtualMachine"", ""config.hardware.device"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vmdk_path, controller_key, adapter_type, disk_type, unit_number \",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"rescue_vm_ref, instance,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"adapter_type, disk_type, vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"controller_key=controller_key,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
unit_number=unit_number),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.destroy(instance, None)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.power_on(instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""VirtualMachine"", ""runtime.powerState"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""PowerOffVM_Task"", vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], poweroff_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.InstancePowerOffFailure(reason=reason),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""PowerOnVM_Task"", vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], poweron_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._virtapi.instance_update(context, instance_uuid,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
{'progress': progress}),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance_type):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._update_instance_progress(context, instance,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"step=0,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
total_steps=RESIZE_TOTAL_STEPS),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.InstanceNotFound(instance_id=instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if host_ref is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.HostNotFound(host=dest),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"step=1,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Rename_Task"", vm_ref, newName=name_label)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], rename_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"step=2,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""CloneVM_Task"", vm_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"folder=vm_folder_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"name=instance['name'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
spec=clone_spec),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], vm_clone_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"step=3,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.InstanceNotFound(instance_id=name_label),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Rename_Task"", vm_ref, newName=instance['name'])",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"network_info, image_meta, resize_instance=False):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"step=4,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"post_method, recover_method, block_migration=False):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
raise exception.InstanceNotFound(instance_id=instance_ref.name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""MigrateVM_Task"", vm_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"host=host_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"priority=""defaultPriority"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance_ref['uuid'], vm_migrate_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
except Exception:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"recover_method(context, instance_ref, dest, block_migration)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"post_method(context, instance_ref, dest, block_migration)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
timeout=timeout),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if instances_info[""instance_count""] > 0:",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.compute_api.reboot(ctxt, instance, ""HARD"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"'port': self._get_vnc_port(vm_ref),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'internal_access_path': None},f952992f035ec130b7608e9851ef9c3becc2047a,0,0
@staticmethod,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"client_factory, port, password)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""ReconfigVM_Task"", vm_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
spec=vnc_config_spec),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'], reconfig_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Datacenter"", [""vmFolder""])",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""ResourcePool"")[0].obj",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""SearchDatastore_Task"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"ds_browser,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"datastorePath=ds_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
searchSpec=search_spec),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
while True:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"search_task, ""Task"", ""info"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
time.sleep(2),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
continue,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
break,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"folder_name, file_name):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"ds_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Datastore"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""browser"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"folder_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
file_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if not folder_exists:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._mkdir(vm_util.build_datastore_path(ds_name, folder_name))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
driver.block_device_info_get_mapping(,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_info)],f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if driver.swap_is_usable(swap):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_list.append(,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device.strip_dev(swap['device_name'])),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
block_device_list += [block_device.strip_dev(ephemeral['device_name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
driver.block_device_info_get_ephemerals(,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(_(""block_device_list %s""), block_device_list)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'suspended': power_state.PAUSED},f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.InstanceExists(name=instance.name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""Datastore"", [""summary.type"", ""summary.name""])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if data_store_name is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.error(msg, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.NovaException(msg),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"instance.image_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""Datacenter"", [""vmFolder""])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""ResourcePool"")[0].obj",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""CreateVM_Task"", vm_folder_mor,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"config=config_spec, pool=res_pool_mor)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
flat_uploaded_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
uploaded_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"vmdk_file_size_in_kb, adapter_type)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"datacenter=self._get_datacenter_name_and_ref()[0],",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
_create_virtual_disk(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"{""flat_uploaded_vmdk_path"": flat_uploaded_vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
name=flat_uploaded_vmdk_path),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
_delete_disk_file(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"{'image_ref': instance.image_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"data_center_name=self._get_datacenter_name_and_ref()[1],",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
file_path=flat_uploaded_vmdk_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
_fetch_image_on_esx_datastore(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"client_factory,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"adapter_type, ""preallocated"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"uploaded_vmdk_path, vmdk_file_size_in_kb)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
instance=instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._session._get_vim(),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""ReconfigVM_Task"", vm_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
spec=vmdk_attach_config_spec),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._session._wait_for_task(instance['uuid'], reconfig_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
_attach_vmdk_to_the_vm(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.InstanceNotFound(instance_id=instance.id),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
vmdk_file_path_before_snapshot)[0],f952992f035ec130b7608e9851ef9c3becc2047a,0,1
adapter_type),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""UnregisterVM"", vm_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.unplug_vifs(instance, network_info)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
name=dir_ds_compliant_path),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""without doing anything""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""VirtualMachine"", [""name""])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._volumeops.attach_volume(connection_info, instance['uuid'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance['uuid']),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if rescue_vm_ref is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if vm_ref is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Rename_Task"", vm_ref, newName=instance['uuid'])",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if vm_ref:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.InstanceExists(name=instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._volumeops.attach_volume(connection_info, instance['name'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if vm_ref is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.InstanceNotFound(instance_id=instance['uuid']),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""instance not present""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.InstanceNotFound(instance_id=instance['name']),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""Rename_Task"", vm_ref, newName=instance['name'])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.InstanceNotFound(instance_id=instance_ref.name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""config.hardware.device"", [disk, controller,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.device[0]]),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""extra_config"": config_spec.extraConfig,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""virtual_device"": config_spec.deviceChange}",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
pass,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""config.hardware.device"", [disk, controller, nic])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""extra_config"": config_spec.extraConfig}",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
import collections,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(ManagedObjectReference, self)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""""""ObjectContent array holds dynamic properties.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if not isinstance(prop_list, collections.Iterable):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if not isinstance(missing_list, collections.Iterable):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if value is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set('runtime.host',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"ManagedObjectReference(value='host-123', _type=""HostSystem""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(HostSystem, self).__init__(""HostSystem"", obj_ref, value)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(HostSystem, self).__init__(""HostSystem"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if CONF.vmware.wsdl_location:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if utils.is_valid_ipv6(host_name):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary.name"", name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary.name"", ""fake-ds"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
lst_objs.append(key),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"object.__setattr__(self, 'mo_id', self._generate_moid(mo_id_prefix))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"object.__setattr__(self, 'obj',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"ManagedObjectReference(self.__class__.__name__,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.mo_id)),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'name': self.__class__.__name__}),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.__class__._counter += 1,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(VirtualMachine, self).__init__(""vm"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""name"", kwargs.get(""name"", 'test-vm'))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""datastore"", _convert_to_array_of_mor(ds_do))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set('runtime.host', kwargs.get(""runtime_host"", None))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(Network, self).__init__(""network"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(ResourcePool, self).__init__(""rp"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""name"", name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(ClusterComputeResource, self).__init__(""domain"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""host"", None)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""datastore"", None)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""resourcePool"", None)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary"", summary)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if r_pool:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if r_pools is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""resourcePool"", r_pools)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
r_pools.ManagedObjectReference.append(r_pool),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if host_sys:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if hosts is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""host"", hosts)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
hosts.ManagedObjectReference.append(host_sys),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._update_summary(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if datastore:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if datastores is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""datastore"", datastores)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
datastores.ManagedObjectReference.append(datastore),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
summary.numCpuCores += host_summary.hardware.numCpuCores,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
summary.numCpuThreads += host_summary.hardware.numCpuThreads,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
summary.totalMemory += host_summary.hardware.memorySize,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
- host_summary.quickStats.overallMemoryUsage),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
summary.effectiveMemory += free_memory if connected else 0,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
summary.numEffectiveHosts += 1 if connected else 0,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(Datastore, self).__init__(""ds"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(HostNetworkSystem, self).__init__(""ns"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(HostSystem, self).__init__(""host"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary.hardware"", hardware)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""connected"", connected)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(Datacenter, self).__init__(""dc"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cluster._add_host(_get_object_refs(""HostSystem"")[0])",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"cluster._add_datastore(_get_object_refs(""Datastore"")[0])",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""ds"": [ds],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""runtime_host"": host,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
prop_list.append(prop),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
lst_ret_objs.add_object(obj_content),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"super(ManagedObject, self).__setattr__('objName', name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if obj_ref is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if value is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"object.__setattr__(self, 'obj', obj_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'name': self.objName}),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(VirtualMachine, self).__init__(""VirtualMachine"", value='vm-10')",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""name"", kwargs.get(""name""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""datastore"", ds_do)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set('runtime.host',",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"ManagedObjectReference(value='host-123', _type=""HostSystem""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(Network, self).__init__(""Network"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(ResourcePool, self).__init__(""ResourcePool"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""name"", ""ResPool"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(ClusterComputeResource, self).__init__(""ClusterComputeResource"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"value=""domain-test"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""resourcePool"", r_pool)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""host"", host_sys)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""name"", ""test_cluster"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""datastore"", datastore)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(Datastore, self).__init__(""Datastore"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(HostNetworkSystem, self).__init__(""HostNetworkSystem"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""name"", ""networkSystem"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(HostSystem, self).__init__(""HostSystem"", obj_ref, value)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""name"", ""ha-host"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(Datacenter, self).__init__(""Datacenter"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""name"", ""ha-datacenter"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""ds"": ds,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"temp_mdo.set(prop, mdo.get(prop))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
lst_ret_objs.add_object(temp_mdo),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if not (self._host_ip or CONF.vmware.host_username is None or,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
CONF.vmware.host_password is None):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"username=CONF.vmware.host_username,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"password=CONF.vmware.host_password,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"retry_count=CONF.vmware.api_retry_count,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"scheme=""https""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"{'server': self._host_ip, 'seconds': delay})",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
time.sleep(delay),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if self.vim:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.vim.Logout(self.vim.get_service_content().sessionManager),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if retry_count > self._api_retry_count:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if not self._host_ip or host_username is None or host_password is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"host_username, host_password,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"api_retry_count, scheme=scheme)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"api_retry_count, scheme=""https""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise exception.NovaException(excep),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self.vim.Logout(self.vim.get_service_content().sessionManager),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if retry_count > self.api_retry_count:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'ns0:VirtualLsiLogicSASController'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
types.,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if dynamic_properties:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if dynamic_property:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
import uuid,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"datacenter=dc_ref,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
instance=instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._get_vim(),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""DeleteDatastoreFile_Task"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vim.get_service_content().fileManager,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"name=datastore_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
datacenter=dc_ref),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session._wait_for_task(instance['uuid'],",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
file_delete_task),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._delete_datastore_file(instance,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"flat_uploaded_vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
dc_ref),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"sparse_uploaded_vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"destName=dest_vmdk_file_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._delete_datastore_file(instance, f, dc_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
import uuid,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
datacenter):,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"datacenter=datacenter,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"{""vmdk_path"": vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""data_store_name"": data_store_name},",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
instance=instance),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._session._get_vim(),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""DeleteDatastoreFile_Task"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"service_content.fileManager,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"name=vmdk_path,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
datacenter=dc_ref),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._session._wait_for_task(instance['uuid'], vmdk_delete_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
_delete_disk_file(flat_uploaded_vmdk_path),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
_delete_disk_file(sparse_uploaded_vmdk_path),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"destName=dest_vmdk_file_location,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""DeleteVirtualDisk_Task"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"service_content.virtualDiskManager,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"name=dest_vmdk_file_location,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self._session._wait_for_task(instance['uuid'], remove_disk_task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
cleanup(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if vc:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
create_host(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"create_datacenter('dc1', ds_ref1)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"create_datacenter('dc2', ds_ref2)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"create_cluster('test_cluster', ds_ref1)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"create_cluster('test_cluster2', ds_ref2)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary.capacity"", capacity * unit.Gi)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary.freeSpace"", free * unit.Gi)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""datastore"", datastore)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
cluster._add_datastore(ds_ref),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
create_host(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
create_datacenter(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
create_datastore(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
create_cluster('test_cluster'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
create_cluster('test_cluster2'),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""summary.capacity"", unit.Ti)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""summary.freeSpace"", 500 * unit.Gi)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cluster._add_datastore(_get_object_refs(""Datastore"")[0])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if hasattr(self, 'vim') and self.vim:",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.vim.Logout(self.vim.get_service_content().sessionManager),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
try:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if self.vim:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self.vim.Logout(self.vim.get_service_content().sessionManager),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
except Exception as excep:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
LOG.debug(excep),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if self._session:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
sessionId=[self._session.key]),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
try:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"sessionID=self._session.key,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
userName=self._session.userName),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
except Exception as e:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._session.key),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if self._session_is_active():,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.warning(_(""Session %s is inactive!""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
except error_util.SessionConnectionException as excep:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._create_session(),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self._session.key, exc_info=True)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if self._session_id:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
sessionId=[self._session_id]),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if uuid:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
pass,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"controller_key,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"'VirtualLsiLogicSASController',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
'VirtualBusLogicController'],f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if hasattr(device, 'controllerKey') and hasattr(device, 'unitNumber'):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
unit_numbers.append(device.unitNumber),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if _is_scsi_controller(device):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
unit_numbers.append(device.scsiCtlrUnitNumber),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
adapter_type):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if ret:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
adapter_type),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"adapter_type=""lsiLogic"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if controller_key is None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"controller_key,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
adapter_type),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
device_config_spec.append(controller_spec),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if device.unitNumber > unit_number:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"disk_type, unit_number)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""config.extraConfig"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_convert_to_array_of_opt_val(exconfig_do)),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if exconfig_do:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""config.extraConfig"", kwargs.get(""extra_config"", None))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
while retrieve_result:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
lst_vm_names.append(vm_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if token:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""continue_to_get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
token),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
break,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self._cluster),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"'ClusterComputeResource', 'resourcePool')",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if root_res_pool:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"vim_util, 'get_inner_objects', root_res_pool, 'vm',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"'VirtualMachine', properties)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
while vms:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
lst_vm_names.append(vm_name),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if token:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""continue_to_get_objects"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
token),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
break,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if hasattr(val, 'name') and val.name:",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""name"", val.name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if hasattr(val, 'extraConfig'):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.get(""config.extraConfig"").OptionValue,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
val.extraConfig),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if hasattr(val, 'instanceUuid') and val.instanceUuid is not None:",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""summary.config.instanceUuid"", val.instanceUuid)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
pass,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if (changes):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
existing.append(c),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""name"": kwargs.get(""name""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""ds"": source_vm_mdo.get(""datastore""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""runtime_host"": source_vm_mdo.get(""runtime.host""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""powerstate"": source_vm_mdo.get(""runtime.powerState""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""vmPathName"": source_vm_mdo.get(""config.files.vmPathName""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""numCpu"": source_vm_mdo.get(""summary.config.numCpu""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""mem"": source_vm_mdo.get(""summary.config.memorySizeMB""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""extra_config"": source_vm_mdo.get(""config.extraConfig"").OptionValue,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""virtual_device"": source_vm_mdo.get(""config.hardware.device""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""instanceUuid"": source_vm_mdo.get(""summary.config.instanceUuid"")}",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if clone_spec.config is not None:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if (hasattr(clone_spec.config, 'instanceUuid') and",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
clone_spec.config.instanceUuid is not None):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if hasattr(clone_spec.config, 'extraConfig'):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
clone_spec.config.extraConfig),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"_create_object(""VirtualMachine"", virtual_machine)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""config.extraConfig"", val.extraConfig)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cfg.IntOpt('host_port',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"default=443,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"host_port=CONF.vmware.host_port,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
port=self._host_port),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"host=""localhost"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
port=443):,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"host=""localhost""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(""%(text)s: _db_content => %(content)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Session is faulty"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
LOG.debug('Raising NotImplemented'),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug('Calling %(name)s %(impl)s',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug('Calling getter %s', name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug('Calling setter %s', name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(_(""%(text)s: _db_content => %(content)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Session is faulty""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
LOG.debug(_('Raising NotImplemented')),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_('Calling %(name)s %(impl)s'),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_('Calling getter %s'), name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_('Calling setter %s'), name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(""No networks configured on host!"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Configured networks: %s"", vm_networks)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Network %s not found on host!"", network_name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Port Group %s already exists."", pg_name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(_(""No networks configured on host!""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Configured networks: %s""), vm_networks)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Network %s not found on host!""), network_name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Port Group %s already exists.""), pg_name)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""VMwareHTTPWrite. Exception is %s"", excep)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""%(base_vhd_path)s, Target: %(root_vhd_path)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""%(root_vhd_path)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""size %(root_vhd_size)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Instance not found"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Rebooting instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Pause instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Unpause instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Suspend instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Resume instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Power off instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Power on instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Extended root virtual disk"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""Exception: %(ex)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""File %s already exists"", dest_folder)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""cdrom %(file_path)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""datastore %(datastore_name)s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"{'datastore_name': datastore_name},",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Destroying instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Instance destroyed"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""without doing anything"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""instance not present"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""port - %(port)s"", {'port': port},",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Folder %s created."", path)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Image aging disabled. Aging will not be done."")",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"{""disk_type"": disk_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""adapter_type"": adapter_type})",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Starting instance"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Block device information present: %s"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Using PV kernel: %s"", use_pv_kernel, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""resize root disk..."", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Skip agent setup, not enabled."", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug('Detected agent version: %s', version, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""VM was already shutdown."", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""trying hard shutdown."", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Migrated root base vhds"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Migrated all base vhds."", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Destroying VDIs"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""deletion"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""kernel/ramdisk files removed"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Creating vifs"", instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug('Created VIF %(vif_ref)s, network %(network_ref)s',",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"LOG.debug(""Injecting hostname (%s) into xenstore"", hostname,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""%(base_vhd_path)s, Target: %(root_vhd_path)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""%(root_vhd_path)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""size %(root_vhd_size)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Instance not found""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Rebooting instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Pause instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Unpause instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Suspend instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Resume instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Power off instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Power on instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Extended root virtual disk""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""Exception: %(ex)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""File %s already exists""), dest_folder)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""cdrom %(file_path)s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"{'datastore_name': datastore_name},",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Destroying instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Instance destroyed""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""without doing anything""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""instance not present""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Folder %s created.""), path)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Image aging disabled. Aging will not be done.""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"{""disk_type"": disk_type,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""adapter_type"": adapter_type})",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Starting instance""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Block device information present: %s""),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Using PV kernel: %s""), use_pv_kernel, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""resize root disk...""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Skip agent setup, not enabled.""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_('Detected agent version: %s'), version, instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""VM was already shutdown.""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""trying hard shutdown.""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Migrated root base vhds""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Migrated all base vhds.""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Destroying VDIs""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""deletion""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""kernel/ramdisk files removed""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Creating vifs""), instance=instance)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_('Created VIF %(vif_ref)s, network %(network_ref)s'),",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"LOG.debug(_(""Injecting hostname (%s) into xenstore""), hostname,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""""""Fake service class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
pass,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""""""Fake client class.""""""",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""vmware_adaptertype"": constants.DEFAULT_ADAPTER_TYPE}",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if hasattr(device, 'capacityInBytes'):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if getattr(device.backing, 'thinProvisioned', False):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if getattr(device.backing, 'eagerlyScrub', False):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if uuid:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if root_disk:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if vmdk_device:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if uuid:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if hasattr(device, 'capacityInBytes'):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if getattr(device.backing, 'thinProvisioned', False):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if getattr(device.backing, 'eagerlyScrub', False):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"file_path, scheme=""https""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
cookies=cookies),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"rw_handles.FileHandle.__init__(self, self._conn)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
urllib.pathname2url(file_path)),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
import httplib,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
import urllib2,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
import six.moves.urllib.parse as urlparse,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
uses its own CHUNKSIZE.,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
try:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
except StopIteration:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
pass,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self.file_handle.close(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
except Exception as exc:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
LOG.exception(exc),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
break,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
raise NotImplementedError(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"file_path, file_size, scheme=""https""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"conn.putrequest(""PUT"", path + ""?"" + query)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"conn.putheader(""User-Agent"", USER_AGENT)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"conn.putheader(""Content-Length"", file_size)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"conn.putheader(""Cookie"", self._build_vim_cookie_headers(cookies))",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
conn.endheaders(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"VMwareHTTPFile.__init__(self, conn)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self.file_handle.send(data),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self.conn.getresponse(),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
except Exception:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""VMwareHTTPWrite"", exc_info=True)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(VMwareHTTPWriteFile, self).close()",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"file_path, scheme=""https""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
'Cookie': self._build_vim_cookie_headers(cookies)},f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""VirtualLsiLogicController"": constants.DEFAULT_ADAPTER_TYPE,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""VirtualBusLogicController"": constants.ADAPTER_TYPE_BUSLOGIC,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""VirtualIDEController"": constants.ADAPTER_TYPE_IDE,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""VirtualLsiLogicSASController"": constants.ADAPTER_TYPE_LSILOGICSAS,",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"""ParaVirtualSCSIController"": constants.ADAPTER_TYPE_PARAVIRTUAL",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
},f952992f035ec130b7608e9851ef9c3becc2047a,0,0
device.__class__.__name__],f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"extra_specs.vif_limits, i)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
extra_specs.vif_limits),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"host_port=CONF.vmware.host_port,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"username=CONF.vmware.host_username,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"password=CONF.vmware.host_password,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"retry_count=CONF.vmware.api_retry_count,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"scheme=""https"",",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cacert=CONF.vmware.ca_file,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"insecure=CONF.vmware.insecure,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
pool_size=CONF.vmware.connection_pool_size):,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"super(VMwareAPISession, self).__init__(",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"host=host_ip,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"port=host_port,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"server_username=username,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"server_password=password,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"api_retry_count=retry_count,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"task_poll_interval=CONF.vmware.task_poll_interval,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"scheme=scheme,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"create_session=True,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cacert=cacert,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"insecure=insecure,",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
pool_size=pool_size),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
args provided.,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if not self._is_vim_object(module):,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
else:,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_db_content.setdefault(table_obj.obj._type, {})",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
update_object(table_obj),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
self.objects.append(obj),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
yield obj.obj,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
""", "".join(",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""vm"", vm_list)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""vm"", pool.get(""vm""))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if _no_objects_of_type(""HostNetworkSystem""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if _no_objects_of_type(""HostStorageSystem""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"self.set(""configManager.networkSystem"", host_net_ref)",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if _no_objects_of_type(""Network""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"if _no_objects_of_type(""Folder""):",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(host_net_system),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(host_storage_system),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(host_system),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(data_center),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(data_store),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(res_pool),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(folder),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(network),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
cluster._add_host(host),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if i >= 1:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
break,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(cluster),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(vm),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(task),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
if not vms:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
try:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
except KeyError:,f952992f035ec130b7608e9851ef9c3becc2047a,0,0
vm_refs.append(vm.obj),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
_create_object(virtual_machine),f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"del _db_content[""VirtualMachine""][vm_ref.value]",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"Prop(prop_name, mdo.get(prop_name))",f952992f035ec130b7608e9851ef9c3becc2047a,0,0
],f952992f035ec130b7608e9851ef9c3becc2047a,0,0
"_db_content.setdefault(table, {})",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
lst_objs.add_object(_db_content[obj_type][key]),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
self.objects.append(object),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
lst_objs.append(key),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"[list(_db_content[""HostSystem""].keys())[0]].obj)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if _db_content.get(""HostNetworkSystem"", None) is None:",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
if not _get_object_refs('HostStorageSystem'):,f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"self.set(""configManager.networkSystem"", host_net_sys)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if _db_content.get(""Network"", None) is None:",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"list(_db_content[""Network""].keys())[0]].obj",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if _db_content.get(""Folder"", None) is None:",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"list(_db_content[""Folder""].keys())[0]].obj",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object(""HostNetworkSystem"", host_net_system)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object(""HostStorageSystem"", host_storage_system)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('HostSystem', host_system)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('Datacenter', data_center)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('Datastore', data_store)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('ResourcePool', res_pool)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('Folder', folder)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('Network', network)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cluster._add_host(_get_object_refs(""HostSystem"")[0])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"cluster._add_host(_get_object_refs(""HostSystem"")[1])",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object('ClusterComputeResource', cluster)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
list(_db_content['Datastore'].values())[0]),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object(""VirtualMachine"", vm)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object(""Task"", task)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"if _db_content.get(""VirtualMachine"", None) is None:",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
vm_refs.append(vm_ref),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"_create_object(""VirtualMachine"", virtual_machine)",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"del _db_content[""VirtualMachine""][vm_ref]",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"""registered yet"")",f952992f035ec130b7608e9851ef9c3becc2047a,0,1
prop_list.append(prop),f952992f035ec130b7608e9851ef9c3becc2047a,0,1
"# Copyright (c) 2012 VMware, Inc.",e21763b15948603e618d4435335ef3785dc5660a,4,0
from nova.virt.vmwareapi import vmware_images,e21763b15948603e618d4435335ef3785dc5660a,4,1
from nova.virt.vmwareapi import vm_util,e21763b15948603e618d4435335ef3785dc5660a,3,0
# Simply tests that the VMwareESXDriver doesn't implement the,e21763b15948603e618d4435335ef3785dc5660a,3,0
# Tests that the VMwareESXDriver does not implement the pause method.,e21763b15948603e618d4435335ef3785dc5660a,3,0
# Tests that the VMwareESXDriver does not implement the unpause method.,e21763b15948603e618d4435335ef3785dc5660a,3,0
# Tests that the VMwareVCDriver does not implement the pause method.,e21763b15948603e618d4435335ef3785dc5660a,3,0
# Tests that the VMwareVCDriver does not implement the unpause method.,e21763b15948603e618d4435335ef3785dc5660a,3,0
from nova.virt.vmwareapi import fake,e21763b15948603e618d4435335ef3785dc5660a,3,1
from nova.virt.vmwareapi import fake as vmwareapi_fake,e21763b15948603e618d4435335ef3785dc5660a,3,1
# Tests that the VMwareESXDriver does not implement the pause method.,e21763b15948603e618d4435335ef3785dc5660a,3,1
# Tests that the VMwareESXDriver does not implement the unpause method.,e21763b15948603e618d4435335ef3785dc5660a,3,1
# assert that the mock Logout method was never called,e21763b15948603e618d4435335ef3785dc5660a,3,1
"def fake_is_vim_object(arg, module):",e21763b15948603e618d4435335ef3785dc5660a,3,1
info = self.conn.get_info({'name': 1}),e21763b15948603e618d4435335ef3785dc5660a,2,0
"self._check_vm_info(info, power_state.RUNNING)",e21763b15948603e618d4435335ef3785dc5660a,2,0
# Tests that the VMwareVCDriver doesn't implement get_diagnostics.,e21763b15948603e618d4435335ef3785dc5660a,2,0
# Check calls for delete vmdk and -flat.vmdk pair,e21763b15948603e618d4435335ef3785dc5660a,2,0
from nova.tests.virt.vmwareapi import fake,e21763b15948603e618d4435335ef3785dc5660a,2,0
from nova.tests.virt.vmwareapi import fake as vmwareapi_fake,e21763b15948603e618d4435335ef3785dc5660a,2,0
from nova.virt import fake,e21763b15948603e618d4435335ef3785dc5660a,2,1
"info = self.conn.get_console_pool_info(""console_type"")",e21763b15948603e618d4435335ef3785dc5660a,2,1
FLAGS.vmwareapi_host_ip = 'test_url',e21763b15948603e618d4435335ef3785dc5660a,1,1
FLAGS.vmwareapi_host_username = 'test_username',e21763b15948603e618d4435335ef3785dc5660a,1,1
FLAGS.vmwareapi_host_password = 'test_pass',e21763b15948603e618d4435335ef3785dc5660a,1,1
"self._check_vm_info(info, power_state.SUSPENDED)",e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_power_on(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
self._create_vm(),e21763b15948603e618d4435335ef3785dc5660a,1,0
"self._check_vm_info(info, power_state.SHUTDOWN)",e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_power_on_non_existent(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_power_off(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_power_off_non_existent(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_power_off_suspended(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
"self._check_vm_info(info, power_state.PAUSED)",e21763b15948603e618d4435335ef3785dc5660a,1,1
import mox,e21763b15948603e618d4435335ef3785dc5660a,1,0
import urllib2,e21763b15948603e618d4435335ef3785dc5660a,1,0
def __init__(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
self.value = 4,e21763b15948603e618d4435335ef3785dc5660a,1,0
self._type = 'VirtualMachine',e21763b15948603e618d4435335ef3785dc5660a,1,0
self.code = 200,e21763b15948603e618d4435335ef3785dc5660a,1,0
def read(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
"return ""console log""",e21763b15948603e618d4435335ef3785dc5660a,1,0
vm_ref = fake_vm_ref(),e21763b15948603e618d4435335ef3785dc5660a,1,0
result = fake_http_resp(),e21763b15948603e618d4435335ef3785dc5660a,1,0
pass,e21763b15948603e618d4435335ef3785dc5660a,1,1
"values = {'name': 'fake_name',",e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_instance_dir_disk_created(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
self._create_vm(),e21763b15948603e618d4435335ef3785dc5660a,1,0
inst_file_path = '[fake-ds] fake-uuid/fake_name.vmdk',e21763b15948603e618d4435335ef3785dc5660a,1,0
cache_file_path = '[fake-ds] vmware_base/fake_image_uuid.vmdk',e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_cache_dir_disk_created(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
file_path = '[fake-ds] vmware_base/fake_image_uuid.vmdk',e21763b15948603e618d4435335ef3785dc5660a,1,0
"values = {'name': '1',",e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_get_diagnostics(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
# get_diagnostics API.,e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_diagnostics(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
pass,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_diagnostics_non_existent_vm(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_pause(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_unpause(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
pass,e21763b15948603e618d4435335ef3785dc5660a,1,1
self._create_vm(),e21763b15948603e618d4435335ef3785dc5660a,1,0
def test_snapshot_using_file_manager(self):,e21763b15948603e618d4435335ef3785dc5660a,1,0
uuid_str = uuidutils.generate_uuid(),e21763b15948603e618d4435335ef3785dc5660a,1,0
self._create_vm(),e21763b15948603e618d4435335ef3785dc5660a,1,1
cluster_name = 'test_cluster',e21763b15948603e618d4435335ef3785dc5660a,1,0
cluster_name2 = 'test_cluster2',e21763b15948603e618d4435335ef3785dc5660a,1,0
"self.conn = driver.VMwareVCDriver(None, False)",e21763b15948603e618d4435335ef3785dc5660a,1,0
self.node_name = self.conn._resources.keys()[0],e21763b15948603e618d4435335ef3785dc5660a,1,0
self.node_name2 = self.conn._resources.keys()[1],e21763b15948603e618d4435335ef3785dc5660a,1,0
self.ds = 'ds1',e21763b15948603e618d4435335ef3785dc5660a,1,0
self.ds = 'ds2',e21763b15948603e618d4435335ef3785dc5660a,1,0
self.vnc_host = 'ha-host',e21763b15948603e618d4435335ef3785dc5660a,1,0
self.node_name = 'test_url',e21763b15948603e618d4435335ef3785dc5660a,1,1
self.ds = 'ds1',e21763b15948603e618d4435335ef3785dc5660a,1,1
self.conn = driver.VMwareESXDriver(fake.FakeVirtAPI),e21763b15948603e618d4435335ef3785dc5660a,1,1
self.vnc_host = 'test_url',e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_spawn_attach_volume_vmdk(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_spawn_attach_volume_vmdk_no_image_ref(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_pause(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_unpause(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_confirm_migration(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
self._create_vm(),e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_finish_revert_migration_power_on(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_finish_revert_migration_power_off(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_get_console_pool_info(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_ip_addr(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def setUp(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
self.conn = driver.VMwareESXDriver(False),e21763b15948603e618d4435335ef3785dc5660a,1,1
def tearDown(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_public_api_signatures(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_state(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
stats = self.conn.get_host_stats(),e21763b15948603e618d4435335ef3785dc5660a,1,1
"supported_instances = [('i686', 'vmware', 'hvm'),",e21763b15948603e618d4435335ef3785dc5660a,1,1
"def _test_host_action(self, method, action, expected=None):",e21763b15948603e618d4435335ef3785dc5660a,1,1
"result = method('host', action)",e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_reboot(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_shutdown(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_startup(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_maintenance_on(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_host_maintenance_off(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
def test_get_host_uptime(self):,e21763b15948603e618d4435335ef3785dc5660a,1,1
result = self.conn.get_host_uptime('host'),e21763b15948603e618d4435335ef3785dc5660a,1,1
"self.assertEqual('Please refer to test_url for the uptime', result)",e21763b15948603e618d4435335ef3785dc5660a,1,1
"def test_init_host_and_cleanup_host(self, mock_init):",e21763b15948603e618d4435335ef3785dc5660a,1,1
vcdriver = self._setup_mocks_for_session(mock_init),e21763b15948603e618d4435335ef3785dc5660a,1,1
"def test_cleanup_host_with_no_login(self, mock_init, mock_logger):",e21763b15948603e618d4435335ef3785dc5660a,1,1
# Not logged in...,e21763b15948603e618d4435335ef3785dc5660a,1,1
# observe that no exceptions were thrown,e21763b15948603e618d4435335ef3785dc5660a,1,1
mock_sc = mock.Mock(),e21763b15948603e618d4435335ef3785dc5660a,1,1
vcdriver._session.vim.retrieve_service_content.return_value = mock_sc,e21763b15948603e618d4435335ef3785dc5660a,1,1
"web_fault = suds.WebFault(mock.Mock(), mock.Mock())",e21763b15948603e618d4435335ef3785dc5660a,1,1
vcdriver._session.vim.client.service.Logout.side_effect = web_fault,e21763b15948603e618d4435335ef3785dc5660a,1,1
"stubs.Set(vmware_images, 'get_vmdk_size_and_properties',",e21763b15948603e618d4435335ef3785dc5660a,1,1
def fake_is_vim_object(module):,e21763b15948603e618d4435335ef3785dc5660a,1,0
"self.flags(vmwareapi_host_ip='test_url',",e21763b15948603e618d4435335ef3785dc5660a,0,0
"vmwareapi_host_username='test_username',",e21763b15948603e618d4435335ef3785dc5660a,0,0
vmware_host_password='test_pass'),e21763b15948603e618d4435335ef3785dc5660a,0,0
"vmwareapi_host_password='test_pass',",e21763b15948603e618d4435335ef3785dc5660a,0,0
"vnc_enabled=False,",e21763b15948603e618d4435335ef3785dc5660a,0,0
use_linked_clone=False),e21763b15948603e618d4435335ef3785dc5660a,0,0
self.conn.power_off(self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
self.conn.power_on(self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
self._create_instance_in_the_db(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertRaises(exception.InstanceNotFound, self.conn.power_on,",e21763b15948603e618d4435335ef3785dc5660a,0,0
self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertRaises(exception.InstanceNotFound, self.conn.power_off,",e21763b15948603e618d4435335ef3785dc5660a,0,0
self.conn.suspend(self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertRaises(exception.InstancePowerOffFailure,",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.conn.power_off, self.instance)",e21763b15948603e618d4435335ef3785dc5660a,0,0
vmwareapi_host_password='test_pass'),e21763b15948603e618d4435335ef3785dc5660a,0,1
class fake_vm_ref(object):,e21763b15948603e618d4435335ef3785dc5660a,0,0
class fake_http_resp(object):,e21763b15948603e618d4435335ef3785dc5660a,0,0
self._create_instance_in_the_db(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.mox.StubOutWithMock(vm_util, 'get_vm_ref_from_name')",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.mox.StubOutWithMock(urllib2, 'urlopen')",e21763b15948603e618d4435335ef3785dc5660a,0,0
"vm_util.get_vm_ref_from_name(mox.IgnoreArg(), self.instance['name']).\",e21763b15948603e618d4435335ef3785dc5660a,0,0
AndReturn(vm_ref),e21763b15948603e618d4435335ef3785dc5660a,0,0
urllib2.urlopen(mox.IgnoreArg()).AndReturn(result),e21763b15948603e618d4435335ef3785dc5660a,0,0
self.mox.ReplayAll(),e21763b15948603e618d4435335ef3785dc5660a,0,0
self.conn.get_console_output(self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
"'image_ref': ""fake_image_uuid"",",e21763b15948603e618d4435335ef3785dc5660a,0,0
"'kernel_id': ""fake_kernel_uuid"",",e21763b15948603e618d4435335ef3785dc5660a,0,0
"'ramdisk_id': ""fake_ramdisk_uuid"",",e21763b15948603e618d4435335ef3785dc5660a,0,0
"""""""Test image file isn't cached when use_linked_clone is False.""""""",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertEqual(vmwareapi_fake.get_file(inst_file_path), True)",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertEqual(vmwareapi_fake.get_file(cache_file_path), False)",e21763b15948603e618d4435335ef3785dc5660a,0,0
"""""""Test image disk is cached when use_linked_clone is True.""""""",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.flags(use_linked_clone=True, group='vmware')",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertEqual(vmwareapi_fake.get_file(file_path), True)",e21763b15948603e618d4435335ef3785dc5660a,0,0
"'image_ref': ""1"",",e21763b15948603e618d4435335ef3785dc5660a,0,1
"'kernel_id': ""1"",",e21763b15948603e618d4435335ef3785dc5660a,0,1
"'ramdisk_id': ""1"",",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertRaises(NotImplementedError, self.conn.get_diagnostics, None)",e21763b15948603e618d4435335ef3785dc5660a,0,0
self._create_instance_in_the_db(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertRaises(NotImplementedError,",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.conn.get_diagnostics,",e21763b15948603e618d4435335ef3785dc5660a,0,0
self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
self._create_instance_in_the_db(),e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertRaises(exception.InstanceNotFound,",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.conn.get_diagnostics,",e21763b15948603e618d4435335ef3785dc5660a,0,1
self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertRaises(NotImplementedError, self.conn.pause, instance=None)",e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertRaises(NotImplementedError, self.conn.unpause,",e21763b15948603e618d4435335ef3785dc5660a,0,0
instance=None),e21763b15948603e618d4435335ef3785dc5660a,0,0
self._create_instance_in_the_db(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.assertRaises(NotImplementedError, self.conn.pause, self.instance)",e21763b15948603e618d4435335ef3785dc5660a,0,0
self.instance),e21763b15948603e618d4435335ef3785dc5660a,0,0
self._test_snapshot(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.mox.StubOutWithMock(uuidutils,",e21763b15948603e618d4435335ef3785dc5660a,0,0
'generate_uuid'),e21763b15948603e618d4435335ef3785dc5660a,0,0
uuidutils.generate_uuid().AndReturn(uuid_str),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.mox.StubOutWithMock(vmops.VMwareVMOps,",e21763b15948603e618d4435335ef3785dc5660a,0,0
'_delete_datastore_file'),e21763b15948603e618d4435335ef3785dc5660a,0,0
self.conn._vmops._delete_datastore_file(,e21763b15948603e618d4435335ef3785dc5660a,0,0
"mox.IgnoreArg(),",e21763b15948603e618d4435335ef3785dc5660a,0,0
"""[fake-ds] vmware-tmp/%s-flat.vmdk"" % uuid_str,",e21763b15948603e618d4435335ef3785dc5660a,0,0
mox.IgnoreArg()).AndReturn(None),e21763b15948603e618d4435335ef3785dc5660a,0,0
"""[fake-ds] vmware-tmp/%s.vmdk"" % uuid_str,",e21763b15948603e618d4435335ef3785dc5660a,0,0
self.mox.ReplayAll(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.flags(cluster_name=[cluster_name, cluster_name2],",e21763b15948603e618d4435335ef3785dc5660a,0,0
"host_ip='test_url',",e21763b15948603e618d4435335ef3785dc5660a,0,0
if cluster_name2 in self.node_name2:,e21763b15948603e618d4435335ef3785dc5660a,0,0
else:,e21763b15948603e618d4435335ef3785dc5660a,0,0
vmwareapi_fake.reset(),e21763b15948603e618d4435335ef3785dc5660a,0,0
"self.flags(host_ip='test_url',",e21763b15948603e618d4435335ef3785dc5660a,0,1
"datastore_regex='.*',",e21763b15948603e618d4435335ef3785dc5660a,0,1
self._spawn_attach_volume_vmdk(),e21763b15948603e618d4435335ef3785dc5660a,0,1
self._spawn_attach_volume_vmdk(set_image_ref=False),e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertRaises(NotImplementedError, self.conn.pause, instance=None)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertRaises(NotImplementedError, self.conn.unpause,",e21763b15948603e618d4435335ef3785dc5660a,0,1
instance=None),e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertRaises(NotImplementedError,",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.conn.confirm_migration, self.context,",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.instance, None)",e21763b15948603e618d4435335ef3785dc5660a,0,1
self._test_finish_revert_migration(power_on=True),e21763b15948603e618d4435335ef3785dc5660a,0,1
self._test_finish_revert_migration(power_on=False),e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(info['address'], 'test_url')",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(info['username'], 'test_username')",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(info['password'], 'test_pass')",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(self.conn.get_host_ip_addr(), ""test_url"")",e21763b15948603e618d4435335ef3785dc5660a,0,1
"class VMwareAPIHostTestCase(test.NoDBTestCase,",e21763b15948603e618d4435335ef3785dc5660a,0,1
test_driver.DriverAPITestHelper):,e21763b15948603e618d4435335ef3785dc5660a,0,1
"""""""Unit tests for Vmware API host calls.""""""",e21763b15948603e618d4435335ef3785dc5660a,0,1
"super(VMwareAPIHostTestCase, self).setUp()",e21763b15948603e618d4435335ef3785dc5660a,0,1
self.flags(image_cache_subdirectory_name='vmware_base'),e21763b15948603e618d4435335ef3785dc5660a,0,1
vm_util.vm_refs_cache_reset(),e21763b15948603e618d4435335ef3785dc5660a,0,1
"host_username='test_username',",e21763b15948603e618d4435335ef3785dc5660a,0,1
"host_password='test_pass', group='vmware')",e21763b15948603e618d4435335ef3785dc5660a,0,1
vmwareapi_fake.reset(),e21763b15948603e618d4435335ef3785dc5660a,0,1
stubs.set_stubs(self.stubs),e21763b15948603e618d4435335ef3785dc5660a,0,1
"super(VMwareAPIHostTestCase, self).tearDown()",e21763b15948603e618d4435335ef3785dc5660a,0,1
vmwareapi_fake.cleanup(),e21763b15948603e618d4435335ef3785dc5660a,0,1
self.assertPublicAPISignatures(self.conn),e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['vcpus'], 16)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['disk_total'], 1024)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['disk_available'], 500)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['disk_used'], 1024 - 500)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['host_memory_total'], 1024)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['host_memory_free'], 1024 - 500)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['hypervisor_version'], 5000000)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"('x86_64', 'vmware', 'hvm')]",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(stats['supported_instances'], supported_instances)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self.assertEqual(result, expected)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self._test_host_action(self.conn.host_power_action, 'reboot')",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self._test_host_action(self.conn.host_power_action, 'shutdown')",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self._test_host_action(self.conn.host_power_action, 'startup')",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self._test_host_action(self.conn.host_maintenance_mode, True)",e21763b15948603e618d4435335ef3785dc5660a,0,1
"self._test_host_action(self.conn.host_maintenance_mode, False)",e21763b15948603e618d4435335ef3785dc5660a,0,1
vmwareapi_fake.reset(vc=True),e21763b15948603e618d4435335ef3785dc5660a,0,1
@mock.patch('nova.virt.vmwareapi.driver.VMwareVCDriver.__init__'),e21763b15948603e618d4435335ef3785dc5660a,0,1
"vcdriver.init_host(""foo"")",e21763b15948603e618d4435335ef3785dc5660a,0,1
vcdriver._session._create_session.assert_called_once_with(),e21763b15948603e618d4435335ef3785dc5660a,0,1
"vcdriver.cleanup_host(""foo"")",e21763b15948603e618d4435335ef3785dc5660a,0,1
vcdriver._session.vim.client.service.Logout.assert_called_once_with(,e21763b15948603e618d4435335ef3785dc5660a,0,1
mock.ANY),e21763b15948603e618d4435335ef3785dc5660a,0,1
@mock.patch('nova.virt.vmwareapi.driver.LOG'),e21763b15948603e618d4435335ef3785dc5660a,0,1
mock_logger.debug.assert_called_once_with(mock.ANY),e21763b15948603e618d4435335ef3785dc5660a,0,1
fake.fake_get_vmdk_size_and_properties),e21763b15948603e618d4435335ef3785dc5660a,0,1
"test.stub_out('nova.virt.vmwareapi.session.VMwareAPISession.vim',",e21763b15948603e618d4435335ef3785dc5660a,0,0
test.stub_out('nova.virt.vmwareapi.session.VMwareAPISession.',e21763b15948603e618d4435335ef3785dc5660a,0,0
"'_is_vim_object',",e21763b15948603e618d4435335ef3785dc5660a,0,0
"test.stub_out('nova.virt.vmwareapi.driver.VMwareAPISession.vim',",e21763b15948603e618d4435335ef3785dc5660a,0,1
"test.stub_out('nova.virt.vmwareapi.driver.VMwareAPISession._is_vim_object',",e21763b15948603e618d4435335ef3785dc5660a,0,1
meta = MetaData(),cdb1b16a6019fd68a7969666d754c4007607ae53,1,0
"instances = Table('instances', meta, autoload=True)",cdb1b16a6019fd68a7969666d754c4007607ae53,1,0
"instances_os_type = Column('os_type',",cdb1b16a6019fd68a7969666d754c4007607ae53,1,0
meta = MetaData(),cdb1b16a6019fd68a7969666d754c4007607ae53,1,1
"instances = Table('instances', meta,",cdb1b16a6019fd68a7969666d754c4007607ae53,1,1
),cdb1b16a6019fd68a7969666d754c4007607ae53,1,1
"instances_os_type = Column('os_type',",cdb1b16a6019fd68a7969666d754c4007607ae53,1,1
"String(length=255, convert_unicode=False,",cdb1b16a6019fd68a7969666d754c4007607ae53,0,0
"assert_unicode=None, unicode_error=None,",cdb1b16a6019fd68a7969666d754c4007607ae53,0,0
"_warn_on_bytestring=False),",cdb1b16a6019fd68a7969666d754c4007607ae53,0,0
nullable=True),cdb1b16a6019fd68a7969666d754c4007607ae53,0,0
"Column('id', Integer(), primary_key=True, nullable=False),",cdb1b16a6019fd68a7969666d754c4007607ae53,0,1
"String(length=255, convert_unicode=False,",cdb1b16a6019fd68a7969666d754c4007607ae53,0,1
"assert_unicode=None, unicode_error=None,",cdb1b16a6019fd68a7969666d754c4007607ae53,0,1
"_warn_on_bytestring=False),",cdb1b16a6019fd68a7969666d754c4007607ae53,0,1
nullable=True),cdb1b16a6019fd68a7969666d754c4007607ae53,0,1
if errcode == libvirt.VIR_ERR_NO_DOMAIN:,c6923ec603288e1d46fdb80e874c8e71361442f5,2,0
is_okay = True,c6923ec603288e1d46fdb80e874c8e71361442f5,2,0
if error_code == libvirt.VIR_ERR_NO_DOMAIN:,c6923ec603288e1d46fdb80e874c8e71361442f5,2,0
msg = (_('Error from libvirt while getting domain info for ',c6923ec603288e1d46fdb80e874c8e71361442f5,2,0
if errcode == libvirt.VIR_ERR_OPERATION_INVALID:,c6923ec603288e1d46fdb80e874c8e71361442f5,2,1
# Domain already gone. This can safely be ignored.,c6923ec603288e1d46fdb80e874c8e71361442f5,1,0
elif errcode == libvirt.VIR_ERR_OPERATION_INVALID:,c6923ec603288e1d46fdb80e874c8e71361442f5,1,0
dom_info = virt_dom.info(),c6923ec603288e1d46fdb80e874c8e71361442f5,1,0
error_code = ex.get_error_code(),c6923ec603288e1d46fdb80e874c8e71361442f5,1,0
dom_info = virt_dom.info(),c6923ec603288e1d46fdb80e874c8e71361442f5,1,1
try:,c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
except libvirt.libvirtError as ex:,c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
raise exception.InstanceNotFound(instance_id=instance['name']),c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
'%(instance_name)s: [Error Code %(error_code)s] %(ex)s') %,c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
"{'instance_name': instance['name'],",c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
"'error_code': error_code,",c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
'ex': ex}),c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
raise exception.NovaException(msg),c6923ec603288e1d46fdb80e874c8e71361442f5,0,0
"LOG.error(_(""Can't downgrade without losing data""))",1845c5df145251f1e90709a91cc02ee5ec787e2f,4,1
info['gateway6'] = network['gateway_v6'],1845c5df145251f1e90709a91cc02ee5ec787e2f,3,1
"""""""Stop the instance or raise if it does not exist.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,3,1
:param network_id: = network to retrieve vifs for,1845c5df145251f1e90709a91cc02ee5ec787e2f,3,1
info['gateway_v6'] = network['gateway_v6'],1845c5df145251f1e90709a91cc02ee5ec787e2f,2,0
info['gateway6'] = v6_subnet['gateway'],1845c5df145251f1e90709a91cc02ee5ec787e2f,2,1
# grab tables and (column for dropping later),1845c5df145251f1e90709a91cc02ee5ec787e2f,2,0
"networks = Table('networks', meta, autoload=True)",1845c5df145251f1e90709a91cc02ee5ec787e2f,2,0
"mac_address = Column('mac_address',",1845c5df145251f1e90709a91cc02ee5ec787e2f,2,0
# bridge_interface column to add to networks table,1845c5df145251f1e90709a91cc02ee5ec787e2f,2,1
raise Exception,1845c5df145251f1e90709a91cc02ee5ec787e2f,2,1
# NOTE(francois.charlier): in some cases the instance might be,1845c5df145251f1e90709a91cc02ee5ec787e2f,2,0
# NOTE(francois.charlier): the instance may have been deleted already,1845c5df145251f1e90709a91cc02ee5ec787e2f,2,0
"""""""Get all network services sorted by network count.",1845c5df145251f1e90709a91cc02ee5ec787e2f,2,1
# Filters for exact matches that we can do along with the SQL query.,1845c5df145251f1e90709a91cc02ee5ec787e2f,2,1
info['gateway_v6'] = v6_subnet['gateway'],1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
meta = MetaData(),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"interface = Column('bridge_interface',",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"virtual_interface_id = Column('virtual_interface_id',",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
#,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
# New Tables,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"virtual_interfaces = Table('virtual_interfaces', meta,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"Column('address',",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
meta.bind = migrate_engine,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"instances = Table('instances', meta, autoload=True)",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"fixed_ips = Table('fixed_ips', meta, autoload=True)",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"virtual_interfaces = Table('virtual_interfaces', meta, autoload=True)",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"s = select([instances.c.id, virtual_interfaces.c.address],",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
for row in s.execute():,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
u = instances.update().values(mac_address=row['address']).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
meta = MetaData(),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# virtual interface table to add to DB,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"virtual_interfaces = Table('virtual_interfaces', meta,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"Column('address',",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"interface = Column('bridge_interface',",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# virtual interface id column to add to fixed_ips table,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# foreignkey added in next migration,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"virtual_interface_id = Column('virtual_interface_id',",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"# deleted before the IPs are released, so we need to get deleted",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
# instances too,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
read_deleted_context = context.elevated(read_deleted='yes'),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"fixed_ips = self.db.fixed_ip_get_by_instance(read_deleted_context,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"self.disassociate_floating_ip(read_deleted_context, address,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"self.deallocate_floating_ip(read_deleted_context, address,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
# thus enabling `read_deleted`,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
admin_context = context.get_admin_context(read_deleted='yes'),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,0
"fixed_ips = self.db.fixed_ip_get_by_instance(context, instance_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"self.disassociate_floating_ip(context, address,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"self.deallocate_floating_ip(context, address,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
admin_context = context.get_admin_context(),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
def service_get_all_network_sorted(context):,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def compute_node_get_for_service(context, service_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def compute_node_capacity_find(context, minimum_ram_mb, minimum_disk_gb):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def virtual_interface_update(context, vif_id, values):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def virtual_interface_get_by_network(context, network_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def instance_stop(context, instance_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def instance_get_all_by_user(context, user_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def network_count_allocated_ips(context, network_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def network_count_available_ips(context, network_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
def network_disassociate_all(context):,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"""""""Disassociate all networks from projects.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
def security_group_destroy_all(context):,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def provider_fw_rule_get_all_by_cidr(context, cidr):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def project_get_networks_v6(context, project_id):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def bw_usage_get_all_by_filters(context, filters):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
session = get_session(),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
topic = 'network',1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
label = 'network_count',1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"subq = model_query(context, models.Network.host,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def compute_node_get_by_service(context, service_id, session=None):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
if not session:,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"result = model_query(context, models.ComputeNode, session=session).\",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
if not result:,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"raise exception.ComputeHostNotFound(host=""ServiceID=%s"" % service_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# Note: these operations use with_lockmode() ... so this will only work,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# reliably with engines that support row-level locking,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"# (postgres, mysql+innodb and above).",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
:param vif_id: = id of virtual interface to update,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
:param values: = values to update,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"vif_ref = virtual_interface_get(context, vif_id, session=session)",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
vif_refs = _virtual_interface_query(context).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"def security_group_destroy_all(context, session=None):",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
query_prefix = session.query(models.BandwidthUsage).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"# Make a copy of the filters dictionary to use going forward, as we'll",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# be modifying it and we shouldn't affect the caller's use of it.,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
filters = filters.copy(),1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"exact_match_filter_names = [""instance_id"", ""mac"",",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
# Filter the query,1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"query_prefix = exact_filter(query_prefix, models.BandwidthUsage,",1845c5df145251f1e90709a91cc02ee5ec787e2f,1,1
"from sqlalchemy import select, Boolean, Column, DateTime, ForeignKey",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"from sqlalchemy import Integer, MetaData, String",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
from sqlalchemy import Table,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"String(length=255, convert_unicode=False,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"assert_unicode=None, unicode_error=None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
_warn_on_bytestring=False)),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
Integer()),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('created_at', DateTime(timezone=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"default=utils.utcnow()),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('updated_at', DateTime(timezone=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"onupdate=utils.utcnow()),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('deleted_at', DateTime(timezone=False)),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('deleted', Boolean(create_constraint=True, name=None)),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('id', Integer(), primary_key=True, nullable=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"assert_unicode=None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"unicode_error=None, _warn_on_bytestring=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"unique=True),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('network_id',",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Integer(),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"ForeignKey('networks.id')),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"Column('instance_id',",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"ForeignKey('instances.id'),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"nullable=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
mysql_engine='InnoDB'),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"unicode_error=None, _warn_on_bytestring=False))",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
instances.create_column(mac_address),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
virtual_interfaces.c.instance_id == instances.c.id),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
where(instances.c.id == row['id']),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
networks.drop_column('bridge_interface'),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
virtual_interfaces.drop(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
fixed_ips.drop_column('virtual_interface_id'),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
from sqlalchemy import *,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
from migrate import *,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('created_at', DateTime(timezone=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"default=utils.utcnow()),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('updated_at', DateTime(timezone=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"onupdate=utils.utcnow()),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('deleted_at', DateTime(timezone=False)),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('deleted', Boolean(create_constraint=True, name=None)),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('id', Integer(), primary_key=True, nullable=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"String(length=255, convert_unicode=False, assert_unicode=None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"unicode_error=None, _warn_on_bytestring=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"unique=True),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('network_id',",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Integer(),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"ForeignKey('networks.id')),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"Column('instance_id',",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"ForeignKey('instances.id'),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"nullable=False),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
mysql_engine='InnoDB'),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"String(length=255, convert_unicode=False,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"assert_unicode=None, unicode_error=None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
_warn_on_bytestring=False)),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
Integer()),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
context=read_deleted_context),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
instance_id),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"self.db.fixed_ip_get_by_instance(read_deleted_context,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"self.deallocate_fixed_ip(read_deleted_context, fixed_ip['address'],",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
**kwargs),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
"self.db.virtual_interface_delete_by_instance(read_deleted_context,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,0
context=context),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"self.db.fixed_ip_get_by_instance(context,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"self.deallocate_fixed_ip(context, fixed_ip['address'], **kwargs)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"self.db.virtual_interface_delete_by_instance(context, instance_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
":returns: a list of (Service, network_count) tuples.",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return IMPL.service_get_all_network_sorted(context),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Get all computeNodes.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.compute_node_get_for_service(context, service_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.compute_node_capacity_find(context, minimum_ram_mb,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
minimum_disk_gb),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Update a virtual interface record in the database.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.virtual_interface_update(context, vif_id, values)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Gets all virtual interfaces on network.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.virtual_interface_get_by_network(context, network_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.instance_stop(context, instance_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Get all instances.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.instance_get_all_by_user(context, user_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Return the number of allocated non-reserved ips in the network.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.network_count_allocated_ips(context, network_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Return the number of available ips in the network.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.network_count_available_ips(context, network_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return IMPL.network_disassociate_all(context),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Deletes a security group.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return IMPL.security_group_destroy_all(context),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Get all provider-level firewall rules.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.provider_fw_rule_get_all_by_cidr(context, cidr)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.project_get_networks_v6(context, project_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Return bandwidth usage that matches all filters.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return IMPL.bw_usage_get_all_by_filters(context, filters)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
@require_admin_context,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
with session.begin():,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"func.count(models.Network.id).label(label),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"session=session, read_deleted=""no"").\",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
group_by(models.Network.host).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
subquery(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return _service_get_all_topic_subquery(context,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"session,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"topic,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"subq,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
label),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(service_id=service_id).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
first(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return result,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return model_query(context, models.ComputeNode).\",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
options(joinedload('service')).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Get all enabled hosts with enough ram and disk.""""""",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return session.query(models.ComputeNode).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter(models.ComputeNode.free_ram_mb >= minimum_ram_mb).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter(models.ComputeNode.free_disk_gb >= minimum_disk_gb).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter(models.Service.disabled == False).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(deleted=False).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
with_lockmode('update').all(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
@require_context,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Update a virtual interface record in the database.",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
vif_ref.update(values),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
vif_ref.save(session=session),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return vif_ref,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""""""Gets all virtual_interface on network.",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(network_id=network_id).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
all(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return vif_refs,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
session.query(models.Instance).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(id=instance_id).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"update({'host': None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"'vm_state': vm_states.STOPPED,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"'task_state': None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
'updated_at': literal_column('updated_at')}),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
session.query(models.SecurityGroupInstanceAssociation).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(instance_id=instance_id).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
update({'updated_at': literal_column('updated_at')}),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
session.query(models.InstanceMetadata).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return _instance_get_all_query(context).filter_by(user_id=user_id).all(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return _network_ips_query(context, network_id).\",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(allocated=True).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
count(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(allocated=False).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(reserved=False).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
session.query(models.Network).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"update({'project_id': None,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
session.query(models.SecurityGroup).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"update({'deleted': True,",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"'deleted_at': utils.utcnow(),",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
session.query(models.SecurityGroupIngressRule).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return model_query(context, models.ProviderFirewallRule).\",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
filter_by(cidr=cidr).\,1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"return project_get_networks(context, project_id)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
order_by(desc(models.BandwidthUsage.created_at)),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"""start_period"", ""last_refreshed"", ""bw_in"", ""bw_out""]",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
"filters, exact_match_filter_names)",1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
return query_prefix.all(),1845c5df145251f1e90709a91cc02ee5ec787e2f,0,1
context = filter_properties['context'],60ad1946567136445e83446d3774726f161c813e,3,1
context = filter_properties['context'],60ad1946567136445e83446d3774726f161c813e,3,1
context = filter_properties['context'],60ad1946567136445e83446d3774726f161c813e,3,1
context = filter_properties['context'],60ad1946567136445e83446d3774726f161c813e,3,0
context = filter_properties['context'],60ad1946567136445e83446d3774726f161c813e,3,1
aggregate_vals = utils.aggregate_values_from_db(,60ad1946567136445e83446d3774726f161c813e,1,0
ratio = utils.validate_num_values(,60ad1946567136445e83446d3774726f161c813e,1,0
metadata = db.aggregate_metadata_get_by_host(,60ad1946567136445e83446d3774726f161c813e,1,1
"aggregate_vals = metadata.get('cpu_allocation_ratio', set())",60ad1946567136445e83446d3774726f161c813e,1,1
num_values = len(aggregate_vals),60ad1946567136445e83446d3774726f161c813e,1,1
ratio = float(min(aggregate_vals)),60ad1946567136445e83446d3774726f161c813e,1,1
aggregate_vals = utils.aggregate_values_from_db(,60ad1946567136445e83446d3774726f161c813e,1,0
ratio = utils.validate_num_values(,60ad1946567136445e83446d3774726f161c813e,1,0
metadata = db.aggregate_metadata_get_by_host(,60ad1946567136445e83446d3774726f161c813e,1,1
"aggregate_vals = metadata.get('ram_allocation_ratio', set())",60ad1946567136445e83446d3774726f161c813e,1,1
num_values = len(aggregate_vals),60ad1946567136445e83446d3774726f161c813e,1,1
ratio = float(min(aggregate_vals)),60ad1946567136445e83446d3774726f161c813e,1,1
aggregate_vals = utils.aggregate_values_from_db(,60ad1946567136445e83446d3774726f161c813e,1,0
metadata = db.aggregate_metadata_get_by_host(,60ad1946567136445e83446d3774726f161c813e,1,1
LOG = logging.getLogger(__name__),60ad1946567136445e83446d3774726f161c813e,1,0
metadata = db.aggregate_metadata_get_by_host(,60ad1946567136445e83446d3774726f161c813e,1,0
hosts_passes = availability_zone in metadata['availability_zone'],60ad1946567136445e83446d3774726f161c813e,1,0
host_az = metadata['availability_zone'],60ad1946567136445e83446d3774726f161c813e,1,0
hosts_passes = availability_zone == CONF.default_availability_zone,60ad1946567136445e83446d3774726f161c813e,1,0
host_az = CONF.default_availability_zone,60ad1946567136445e83446d3774726f161c813e,1,0
metadata = db.aggregate_metadata_get_by_host(,60ad1946567136445e83446d3774726f161c813e,1,1
from nova.openstack.common.gettextutils import _LW,60ad1946567136445e83446d3774726f161c813e,0,0
from nova.scheduler.filters import utils,60ad1946567136445e83446d3774726f161c813e,0,0
"LOG.warning(_LW(""VCPUs not set; assuming CPU collection broken""))",60ad1946567136445e83446d3774726f161c813e,0,0
"filter_properties['context'],",60ad1946567136445e83446d3774726f161c813e,0,0
"host_state.host,",60ad1946567136445e83446d3774726f161c813e,0,0
'cpu_allocation_ratio'),60ad1946567136445e83446d3774726f161c813e,0,0
"aggregate_vals, CONF.cpu_allocation_ratio, cast_to=float)",60ad1946567136445e83446d3774726f161c813e,0,0
"LOG.warning(_LW(""Could not decode cpu_allocation_ratio: '%s'""), e)",60ad1946567136445e83446d3774726f161c813e,0,0
from nova import db,60ad1946567136445e83446d3774726f161c813e,0,1
from nova.openstack.common.gettextutils import _,60ad1946567136445e83446d3774726f161c813e,0,1
"LOG.warning(_(""VCPUs not set; assuming CPU collection broken""))",60ad1946567136445e83446d3774726f161c813e,0,1
"context, host_state.host, key='cpu_allocation_ratio')",60ad1946567136445e83446d3774726f161c813e,0,1
if num_values == 0:,60ad1946567136445e83446d3774726f161c813e,0,1
return CONF.cpu_allocation_ratio,60ad1946567136445e83446d3774726f161c813e,0,1
if num_values > 1:,60ad1946567136445e83446d3774726f161c813e,0,1
"LOG.warning(_(""%(num_values)d ratio values found, """,60ad1946567136445e83446d3774726f161c813e,0,1
"""of which the minimum value will be used.""),",60ad1946567136445e83446d3774726f161c813e,0,1
{'num_values': num_values}),60ad1946567136445e83446d3774726f161c813e,0,1
"LOG.warning(_(""Could not decode cpu_allocation_ratio: '%s'""), e)",60ad1946567136445e83446d3774726f161c813e,0,1
from nova.openstack.common.gettextutils import _LW,60ad1946567136445e83446d3774726f161c813e,0,0
from nova.scheduler.filters import utils,60ad1946567136445e83446d3774726f161c813e,0,0
"filter_properties['context'],",60ad1946567136445e83446d3774726f161c813e,0,0
"host_state.host,",60ad1946567136445e83446d3774726f161c813e,0,0
'ram_allocation_ratio'),60ad1946567136445e83446d3774726f161c813e,0,0
"aggregate_vals, CONF.ram_allocation_ratio, cast_to=float)",60ad1946567136445e83446d3774726f161c813e,0,0
"LOG.warning(_LW(""Could not decode ram_allocation_ratio: '%s'""), e)",60ad1946567136445e83446d3774726f161c813e,0,0
from nova import db,60ad1946567136445e83446d3774726f161c813e,0,1
from nova.openstack.common.gettextutils import _,60ad1946567136445e83446d3774726f161c813e,0,1
"context, host_state.host, key='ram_allocation_ratio')",60ad1946567136445e83446d3774726f161c813e,0,1
if num_values == 0:,60ad1946567136445e83446d3774726f161c813e,0,1
return CONF.ram_allocation_ratio,60ad1946567136445e83446d3774726f161c813e,0,1
if num_values > 1:,60ad1946567136445e83446d3774726f161c813e,0,1
"LOG.warning(_(""%(num_values)d ratio values found, """,60ad1946567136445e83446d3774726f161c813e,0,1
"""of which the minimum value will be used.""),",60ad1946567136445e83446d3774726f161c813e,0,1
{'num_values': num_values}),60ad1946567136445e83446d3774726f161c813e,0,1
"LOG.warning(_(""Could not decode ram_allocation_ratio: '%s'""), e)",60ad1946567136445e83446d3774726f161c813e,0,1
from nova.scheduler.filters import utils,60ad1946567136445e83446d3774726f161c813e,0,0
"# TODO(uni): DB query in filter is a performance hit, especially for",60ad1946567136445e83446d3774726f161c813e,0,0
# system with lots of hosts. Will need a general solution here to fix,60ad1946567136445e83446d3774726f161c813e,0,0
# all filters with aggregate DB call things.,60ad1946567136445e83446d3774726f161c813e,0,0
"filter_properties['context'], host_state.host, 'instance_type')",60ad1946567136445e83446d3774726f161c813e,0,0
if not aggregate_vals:,60ad1946567136445e83446d3774726f161c813e,0,0
return True,60ad1946567136445e83446d3774726f161c813e,0,0
return instance_type['name'] in aggregate_vals,60ad1946567136445e83446d3774726f161c813e,0,0
"context, host_state.host, key='instance_type')",60ad1946567136445e83446d3774726f161c813e,0,1
return (len(metadata) == 0 or,60ad1946567136445e83446d3774726f161c813e,0,1
instance_type['name'] in metadata['instance_type']),60ad1946567136445e83446d3774726f161c813e,0,1
from nova.openstack.common import log as logging,60ad1946567136445e83446d3774726f161c813e,0,0
if not availability_zone:,60ad1946567136445e83446d3774726f161c813e,0,0
return True,60ad1946567136445e83446d3774726f161c813e,0,0
"context, host_state.host, key='availability_zone')",60ad1946567136445e83446d3774726f161c813e,0,0
if 'availability_zone' in metadata:,60ad1946567136445e83446d3774726f161c813e,0,0
else:,60ad1946567136445e83446d3774726f161c813e,0,0
if not hosts_passes:,60ad1946567136445e83446d3774726f161c813e,0,0
"LOG.debug(""Availability Zone '%(az)s' requested. """,60ad1946567136445e83446d3774726f161c813e,0,0
"""%(host_state)s has AZs: %(host_az)s"",",60ad1946567136445e83446d3774726f161c813e,0,0
"{'host_state': host_state,",60ad1946567136445e83446d3774726f161c813e,0,0
"'az': availability_zone,",60ad1946567136445e83446d3774726f161c813e,0,0
'host_az': host_az}),60ad1946567136445e83446d3774726f161c813e,0,0
return hosts_passes,60ad1946567136445e83446d3774726f161c813e,0,0
if availability_zone:,60ad1946567136445e83446d3774726f161c813e,0,1
"context, host_state.host, key='availability_zone')",60ad1946567136445e83446d3774726f161c813e,0,1
if 'availability_zone' in metadata:,60ad1946567136445e83446d3774726f161c813e,0,1
return availability_zone in metadata['availability_zone'],60ad1946567136445e83446d3774726f161c813e,0,1
else:,60ad1946567136445e83446d3774726f161c813e,0,1
return availability_zone == CONF.default_availability_zone,60ad1946567136445e83446d3774726f161c813e,0,1
return True,60ad1946567136445e83446d3774726f161c813e,0,1
